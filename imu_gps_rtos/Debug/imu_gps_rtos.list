
imu_gps_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bba4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800bda8  0800bda8  0001bda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c354  0800c354  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c35c  0800c35c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c35c  0800c35c  0001c35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c360  0800c360  0001c360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba4  200001e4  0800c548  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d88  0800c548  00024d88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6a8  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b7  00000000  00000000  0003f8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00043278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00044a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6d8  00000000  00000000  000460e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c663  00000000  00000000  000707b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108795  00000000  00000000  0008ce1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001955b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007910  00000000  00000000  00195600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bd8c 	.word	0x0800bd8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800bd8c 	.word	0x0800bd8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <init_MPU_6050>:

	return i2c_success;
}

void init_MPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	/* create a parameter that determines the size of each array */
	uint8_t i2cTxBuffer[6] = {0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	2300      	movs	r3, #0
 80009ec:	82bb      	strh	r3, [r7, #20]
	uint8_t i2cRxBuffer[6] = {0};
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	2300      	movs	r3, #0
 80009f4:	81bb      	strh	r3, [r7, #12]

	my_mpu_6050->i2c_handle = i2c;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	601a      	str	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff = i2cTxBuffer;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f107 0210 	add.w	r2, r7, #16
 8000a02:	605a      	str	r2, [r3, #4]
	my_mpu_6050->i2c_rx_buff = i2cRxBuffer;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f107 0208 	add.w	r2, r7, #8
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <accel_Gyro_Config>:

/* Create another parameter that will allow user to
 * configure the full scale range of the accelerometer
 */
uint8_t accel_Gyro_Config(mpu_6050_t *my_mpu_6050)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t configSuccess = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
	uint8_t dlpfSet = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]

	/* Selecting the 8g full range scale for the accelerometer
	 * by writing AFS_SEL_8 to ACCEL_CONFIG register
	 */
	my_mpu_6050->i2c_tx_buff[0] = ACCEL_CONFIG;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	221c      	movs	r2, #28
 8000a2e:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = AFS_SEL_8;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	2210      	movs	r2, #16
 8000a38:	701a      	strb	r2, [r3, #0]

	/* Selecting the 250 degree/seconds full range scale for the gyro
	 * by writing FS_SEL_250 to GYRO_CONFIG register
	 */

	my_mpu_6050->i2c_tx_buff[2] = GYRO_CONFIG;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	221b      	movs	r2, #27
 8000a42:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[3] = FS_SEL_250;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	3303      	adds	r3, #3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]


	configSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 4, 100);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	21d0      	movs	r1, #208	; 0xd0
 8000a5e:	f001 f9a9 	bl	8001db4 <HAL_I2C_Master_Transmit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]

/* Enabling the digital low pass filter */

	my_mpu_6050->i2c_tx_buff[0] = CONFIG;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	221a      	movs	r2, #26
 8000a6c:	701a      	strb	r2, [r3, #0]
	my_mpu_6050->i2c_tx_buff[1] = (0x05U);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	2205      	movs	r2, #5
 8000a76:	701a      	strb	r2, [r3, #0]

	dlpfSet = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	21d0      	movs	r1, #208	; 0xd0
 8000a88:	f001 f994 	bl	8001db4 <HAL_I2C_Master_Transmit>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73bb      	strb	r3, [r7, #14]

return configSuccess;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <get_Accel>:

	return enableSuccess;
}

uint8_t get_Accel(mpu_6050_t *my_mpu_6050)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af02      	add	r7, sp, #8
 8000aa0:	6078      	str	r0, [r7, #4]
	/* flags that check if communication between i2c master and slave was successful */
	uint8_t i2c_Tx_flag = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = ACCEL_XOUT_H;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	223b      	movs	r2, #59	; 0x3b
 8000ab4:	701a      	strb	r2, [r3, #0]

	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 1000);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	21d0      	movs	r1, #208	; 0xd0
 8000ac8:	f001 f974 	bl	8001db4 <HAL_I2C_Master_Transmit>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73bb      	strb	r3, [r7, #14]


	/* Retrieve the acceleration values from 6 registers
	 * ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ACCEL_YOUT_L, ACCEL_ZOUT_H, ACCEL_ZOUT_L respectively
	 */
	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 1000);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2306      	movs	r3, #6
 8000ae0:	21d1      	movs	r1, #209	; 0xd1
 8000ae2:	f001 fa5b 	bl	8001f9c <HAL_I2C_Master_Receive>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d104      	bne.n	8000afa <get_Accel+0x60>
 8000af0:	7b7b      	ldrb	r3, [r7, #13]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <get_Accel+0x60>
		i2c_success = HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]

	/* You are also supposed to check A0 Pin on MPU_6050 */

	return i2c_success;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	0000      	movs	r0, r0
	...

08000b08 <formatAccel>:

void formatAccel(mpu_6050_t *my_mpu_6050)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	my_mpu_6050->accelX = (int16_t)((my_mpu_6050->i2c_rx_buff[0] << 8) | my_mpu_6050->i2c_rx_buff[1]);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	819a      	strh	r2, [r3, #12]
	my_mpu_6050->aX =  ((float)(my_mpu_6050->accelX))/4096;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b3a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000bf0 <formatAccel+0xe8>
 8000b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Calibration value for acceleration in the x direction */
	//my_mpu_6050->aX-= 0.089;

	my_mpu_6050->accelY = (int16_t)((my_mpu_6050->i2c_rx_buff[2] << 8) | my_mpu_6050->i2c_rx_buff[3]);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	3303      	adds	r3, #3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	81da      	strh	r2, [r3, #14]
	my_mpu_6050->aY =  ((float)my_mpu_6050->accelY)/4096;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b74:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000bf0 <formatAccel+0xe8>
 8000b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Calibration value for acceleration in the y direction */
	//my_mpu_6050->aY += 1.05;

	my_mpu_6050->accelZ = (int16_t)((my_mpu_6050->i2c_rx_buff[4] << 8) | my_mpu_6050->i2c_rx_buff[5]);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	3304      	adds	r3, #4
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	3305      	adds	r3, #5
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	821a      	strh	r2, [r3, #16]
	my_mpu_6050->aZ =  ((float)my_mpu_6050->accelZ)/4096;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bae:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000bf0 <formatAccel+0xe8>
 8000bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Calibration value for acceleration in the z direction */
	my_mpu_6050->aZ += 0.1;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000be8 <formatAccel+0xe0>
 8000bca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	f3af 8000 	nop.w
 8000be8:	9999999a 	.word	0x9999999a
 8000bec:	3fb99999 	.word	0x3fb99999
 8000bf0:	45800000 	.word	0x45800000

08000bf4 <print_Accel>:

void print_Accel(mpu_6050_t *my_mpu_6050, UART_HandleTypeDef *uartHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0a0      	sub	sp, #128	; 0x80
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	uint8_t uart_buff[100];
	uint8_t uart_len = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	uart_len = sprintf((char *)uart_buff, "AccelX: %.2f , AccelY: %.2f, AccelZ: %.2f\r\n", my_mpu_6050->aX, my_mpu_6050->aY, my_mpu_6050->aZ);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	edd3 6a07 	vldr	s13, [r3, #28]
 8000c1e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c22:	f107 0008 	add.w	r0, r7, #8
 8000c26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c2a:	ed8d 7b00 	vstr	d7, [sp]
 8000c2e:	ec53 2b15 	vmov	r2, r3, d5
 8000c32:	4909      	ldr	r1, [pc, #36]	; (8000c58 <print_Accel+0x64>)
 8000c34:	f007 fd38 	bl	80086a8 <siprintf>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	HAL_UART_Transmit(uartHandle, uart_buff, uart_len, 100);
 8000c3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f107 0108 	add.w	r1, r7, #8
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f003 f9fa 	bl	8004044 <HAL_UART_Transmit>
	//HAL_Delay(500);
}
 8000c50:	bf00      	nop
 8000c52:	3770      	adds	r7, #112	; 0x70
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	0800bda8 	.word	0x0800bda8

08000c5c <set_Sample_Rt>:
	HAL_Delay(500);
}


uint8_t set_Sample_Rt(mpu_6050_t *my_mpu_6050)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
	uint8_t sampleSuccess = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = SMPRT_DIV;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2219      	movs	r2, #25
 8000c6e:	701a      	strb	r2, [r3, #0]

	/* Divider == 8 therefore sampleRate of accelerometer and gryo = 8MHz/8 == 1MHz */
	my_mpu_6050->i2c_tx_buff[1] = 0x08U;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	3301      	adds	r3, #1
 8000c76:	2208      	movs	r2, #8
 8000c78:	701a      	strb	r2, [r3, #0]

//	/* Divider == 200 therefore sampleRate of accelerometer and gryo = 8kHz/200 == 40kHz */
//	my_mpu_6050->i2c_tx_buff[1] = 0xC8U;


	sampleSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	2364      	movs	r3, #100	; 0x64
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2302      	movs	r3, #2
 8000c88:	21d0      	movs	r1, #208	; 0xd0
 8000c8a:	f001 f893 	bl	8001db4 <HAL_I2C_Master_Transmit>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	73fb      	strb	r3, [r7, #15]

	return sampleSuccess;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <wake>:

uint8_t wake(mpu_6050_t *my_mpu_6050)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	6078      	str	r0, [r7, #4]
	uint8_t wakeSuccess = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = PWR_MGMT_1;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	226b      	movs	r2, #107	; 0x6b
 8000cae:	701a      	strb	r2, [r3, #0]

//	/* Selecting 8MHz internal oscillator as clock source for MPU-6050 */
//	my_mpu_6050->i2c_tx_buff[1] = 0x00U;

	my_mpu_6050->i2c_tx_buff[1] = 0x01U;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]

	wakeSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	2364      	movs	r3, #100	; 0x64
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	21d0      	movs	r1, #208	; 0xd0
 8000cca:	f001 f873 	bl	8001db4 <HAL_I2C_Master_Transmit>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	73fb      	strb	r3, [r7, #15]

	return wakeSuccess;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce0:	f000 fce9 	bl	80016b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce4:	f000 f846 	bl	8000d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce8:	f000 f90e 	bl	8000f08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cec:	f000 f89e 	bl	8000e2c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cf0:	f000 f8da 	bl	8000ea8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //init_MPU_6050(&my_mpu, &hi2c1);
  init_MPU_6050(&my_imu, &hi2c1);
 8000cf4:	4914      	ldr	r1, [pc, #80]	; (8000d48 <main+0x6c>)
 8000cf6:	4815      	ldr	r0, [pc, #84]	; (8000d4c <main+0x70>)
 8000cf8:	f7ff fe70 	bl	80009dc <init_MPU_6050>

  wake(&my_imu);
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <main+0x70>)
 8000cfe:	f7ff ffcd 	bl	8000c9c <wake>

  set_Sample_Rt(&my_imu);
 8000d02:	4812      	ldr	r0, [pc, #72]	; (8000d4c <main+0x70>)
 8000d04:	f7ff ffaa 	bl	8000c5c <set_Sample_Rt>

  accel_Gyro_Config(&my_imu);
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <main+0x70>)
 8000d0a:	f7ff fe85 	bl	8000a18 <accel_Gyro_Config>
//  fifo_Enable(&my_imu);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d0e:	f003 fe3d 	bl	800498c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(startBlink01, NULL, &blink01_attributes);
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <main+0x74>)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <main+0x78>)
 8000d18:	f003 fea2 	bl	8004a60 <osThreadNew>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <main+0x7c>)
 8000d20:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(startBlink02, NULL, &blink02_attributes);
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <main+0x80>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <main+0x84>)
 8000d28:	f003 fe9a 	bl	8004a60 <osThreadNew>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <main+0x88>)
 8000d30:	6013      	str	r3, [r2, #0]

  /* creation of getMPU_6050_val */
  getMPU_6050_valHandle = osThreadNew(getVals, NULL, &getMPU_6050_val_attributes);
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <main+0x8c>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <main+0x90>)
 8000d38:	f003 fe92 	bl	8004a60 <osThreadNew>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <main+0x94>)
 8000d40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d42:	f003 fe57 	bl	80049f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x6a>
 8000d48:	20000200 	.word	0x20000200
 8000d4c:	200002e8 	.word	0x200002e8
 8000d50:	0800be2c 	.word	0x0800be2c
 8000d54:	08001111 	.word	0x08001111
 8000d58:	200002dc 	.word	0x200002dc
 8000d5c:	0800be50 	.word	0x0800be50
 8000d60:	08001131 	.word	0x08001131
 8000d64:	200002e0 	.word	0x200002e0
 8000d68:	0800be74 	.word	0x0800be74
 8000d6c:	08001151 	.word	0x08001151
 8000d70:	200002e4 	.word	0x200002e4

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	; 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2234      	movs	r2, #52	; 0x34
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 fd2b 	bl	80077de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <SystemClock_Config+0xb0>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <SystemClock_Config+0xb0>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <SystemClock_Config+0xb0>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <SystemClock_Config+0xb4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <SystemClock_Config+0xb4>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <SystemClock_Config+0xb4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fcd5 	bl	8002790 <HAL_RCC_OscConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000dec:	f000 f9da 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df0:	230f      	movs	r3, #15
 8000df2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 ff6d 	bl	8002cec <HAL_RCC_ClockConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e18:	f000 f9c4 	bl	80011a4 <Error_Handler>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3750      	adds	r7, #80	; 0x50
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40007000 	.word	0x40007000

08000e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <MX_I2C1_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e38:	f240 220b 	movw	r2, #523	; 0x20b
 8000e3c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e6a:	f000 ff13 	bl	8001c94 <HAL_I2C_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e74:	f000 f996 	bl	80011a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e7c:	f001 fbf0 	bl	8002660 <HAL_I2CEx_ConfigAnalogFilter>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e86:	f000 f98d 	bl	80011a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e8e:	f001 fc32 	bl	80026f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e98:	f000 f984 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000200 	.word	0x20000200
 8000ea4:	40005400 	.word	0x40005400

08000ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <MX_USART3_UART_Init+0x5c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART3_UART_Init+0x58>)
 8000eec:	f003 f85c 	bl	8003fa8 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ef6:	f000 f955 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000254 	.word	0x20000254
 8000f04:	40004800 	.word	0x40004800

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b77      	ldr	r3, [pc, #476]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a76      	ldr	r2, [pc, #472]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b74      	ldr	r3, [pc, #464]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b71      	ldr	r3, [pc, #452]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a70      	ldr	r2, [pc, #448]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b6e      	ldr	r3, [pc, #440]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a6a      	ldr	r2, [pc, #424]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b68      	ldr	r3, [pc, #416]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b65      	ldr	r3, [pc, #404]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a64      	ldr	r2, [pc, #400]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b62      	ldr	r3, [pc, #392]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a5e      	ldr	r2, [pc, #376]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	4b59      	ldr	r3, [pc, #356]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b56      	ldr	r3, [pc, #344]	; (80010fc <MX_GPIO_Init+0x1f4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fb4:	4852      	ldr	r0, [pc, #328]	; (8001100 <MX_GPIO_Init+0x1f8>)
 8000fb6:	f000 fe39 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	4851      	ldr	r0, [pc, #324]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fc0:	f000 fe34 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	484b      	ldr	r0, [pc, #300]	; (8001108 <MX_GPIO_Init+0x200>)
 8000fdc:	f000 fc7a 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fe0:	2332      	movs	r3, #50	; 0x32
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4843      	ldr	r0, [pc, #268]	; (8001108 <MX_GPIO_Init+0x200>)
 8000ffc:	f000 fc6a 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001000:	2386      	movs	r3, #134	; 0x86
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001010:	230b      	movs	r3, #11
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	483c      	ldr	r0, [pc, #240]	; (800110c <MX_GPIO_Init+0x204>)
 800101c:	f000 fc5a 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001020:	f244 0381 	movw	r3, #16513	; 0x4081
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4831      	ldr	r0, [pc, #196]	; (8001100 <MX_GPIO_Init+0x1f8>)
 800103a:	f000 fc4b 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800103e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001050:	230b      	movs	r3, #11
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4829      	ldr	r0, [pc, #164]	; (8001100 <MX_GPIO_Init+0x1f8>)
 800105c:	f000 fc3a 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001060:	2340      	movs	r3, #64	; 0x40
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4823      	ldr	r0, [pc, #140]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8001078:	f000 fc2c 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	481d      	ldr	r0, [pc, #116]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8001090:	f000 fc20 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001094:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010a6:	230a      	movs	r3, #10
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4816      	ldr	r0, [pc, #88]	; (800110c <MX_GPIO_Init+0x204>)
 80010b2:	f000 fc0f 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4810      	ldr	r0, [pc, #64]	; (800110c <MX_GPIO_Init+0x204>)
 80010cc:	f000 fc02 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e2:	230b      	movs	r3, #11
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_GPIO_Init+0x1fc>)
 80010ee:	f000 fbf1 	bl	80018d4 <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020400 	.word	0x40020400
 8001104:	40021800 	.word	0x40021800
 8001108:	40020800 	.word	0x40020800
 800110c:	40020000 	.word	0x40020000

08001110 <startBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBlink01 */
void startBlink01(void *argument)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001118:	2101      	movs	r1, #1
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <startBlink01+0x1c>)
 800111c:	f000 fd9f 	bl	8001c5e <HAL_GPIO_TogglePin>
		osDelay(500);
 8001120:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001124:	f003 fd42 	bl	8004bac <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001128:	e7f6      	b.n	8001118 <startBlink01+0x8>
 800112a:	bf00      	nop
 800112c:	40020400 	.word	0x40020400

08001130 <startBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBlink02 */
void startBlink02(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBlink02 */

  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001138:	2101      	movs	r1, #1
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <startBlink02+0x1c>)
 800113c:	f000 fd8f 	bl	8001c5e <HAL_GPIO_TogglePin>
		osDelay(600);
 8001140:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001144:	f003 fd32 	bl	8004bac <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001148:	e7f6      	b.n	8001138 <startBlink02+0x8>
 800114a:	bf00      	nop
 800114c:	40020400 	.word	0x40020400

08001150 <getVals>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getVals */
void getVals(void *argument)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getVals */
  /* Infinite loop */
  for(;;)
  {
	get_Accel(&my_imu);
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <getVals+0x28>)
 800115a:	f7ff fc9e 	bl	8000a9a <get_Accel>

	formatAccel(&my_imu);
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <getVals+0x28>)
 8001160:	f7ff fcd2 	bl	8000b08 <formatAccel>

	print_Accel(&my_imu, &huart3);
 8001164:	4905      	ldr	r1, [pc, #20]	; (800117c <getVals+0x2c>)
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <getVals+0x28>)
 8001168:	f7ff fd44 	bl	8000bf4 <print_Accel>

//	uart_len = sprintf((char *)uart_buff, "gyroX: %hd , gyroY: %hd, gyroZ: %hd\r\n", my_mpu_6050->gyroX, my_mpu_6050->gyroY, my_mpu_6050->gyroZ);
//	uart_len = sprintf((char *)uart_buff, "%c\r\n", my_imu.i2c_rx_buff[0]);
//	HAL_UART_Transmit(&huart3, uart_buff, uart_len, 100);

	osDelay(400);
 800116c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001170:	f003 fd1c 	bl	8004bac <osDelay>
	get_Accel(&my_imu);
 8001174:	e7f0      	b.n	8001158 <getVals+0x8>
 8001176:	bf00      	nop
 8001178:	200002e8 	.word	0x200002e8
 800117c:	20000254 	.word	0x20000254

08001180 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001192:	f000 fa9d 	bl	80016d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40001000 	.word	0x40001000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_MspInit+0x4c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	210f      	movs	r1, #15
 80011ea:	f06f 0001 	mvn.w	r0, #1
 80011ee:	f000 fb47 	bl	8001880 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ae      	sub	sp, #184	; 0xb8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2290      	movs	r2, #144	; 0x90
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f006 fadc 	bl	80077de <memset>
  if(hi2c->Instance==I2C1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_I2C_MspInit+0xb4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d13c      	bne.n	80012aa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001230:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001234:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001236:	2300      	movs	r3, #0
 8001238:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4618      	mov	r0, r3
 8001240:	f001 ffaa 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800124a:	f7ff ffab 	bl	80011a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_I2C_MspInit+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_I2C_MspInit+0xb8>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_I2C_MspInit+0xb8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001266:	f44f 7310 	mov.w	r3, #576	; 0x240
 800126a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001280:	2304      	movs	r3, #4
 8001282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_I2C_MspInit+0xbc>)
 800128e:	f000 fb21 	bl	80018d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_I2C_MspInit+0xb8>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_I2C_MspInit+0xb8>)
 8001298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_I2C_MspInit+0xb8>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	37b8      	adds	r7, #184	; 0xb8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40005400 	.word	0x40005400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020400 	.word	0x40020400

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ae      	sub	sp, #184	; 0xb8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2290      	movs	r2, #144	; 0x90
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 fa7c 	bl	80077de <memset>
  if(huart->Instance==USART3)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a22      	ldr	r2, [pc, #136]	; (8001374 <HAL_UART_MspInit+0xb4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d13c      	bne.n	800136a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 ff4a 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800130a:	f7ff ff4b 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_UART_MspInit+0xb8>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_UART_MspInit+0xb8>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_UART_MspInit+0xb8>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_UART_MspInit+0xb8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_UART_MspInit+0xb8>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_UART_MspInit+0xb8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001358:	2307      	movs	r3, #7
 800135a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_UART_MspInit+0xbc>)
 8001366:	f000 fab5 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	37b8      	adds	r7, #184	; 0xb8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004800 	.word	0x40004800
 8001378:	40023800 	.word	0x40023800
 800137c:	40020c00 	.word	0x40020c00

08001380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	; 0x38
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_InitTick+0xe0>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_InitTick+0xe0>)
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_InitTick+0xe0>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 febe 	bl	8003134 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013c2:	f001 fe8f 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80013c6:	6378      	str	r0, [r7, #52]	; 0x34
 80013c8:	e004      	b.n	80013d4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ca:	f001 fe8b 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80013ce:	4603      	mov	r3, r0
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_InitTick+0xe4>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	3b01      	subs	r3, #1
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_InitTick+0xe8>)
 80013e4:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_InitTick+0xec>)
 80013e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_InitTick+0xe8>)
 80013ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_InitTick+0xe8>)
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_InitTick+0xe8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_InitTick+0xe8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_InitTick+0xe8>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <HAL_InitTick+0xe8>)
 800140a:	f002 faed 	bl	80039e8 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <HAL_InitTick+0xe8>)
 800141e:	f002 fb45 	bl	8003aac <HAL_TIM_Base_Start_IT>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001430:	2036      	movs	r0, #54	; 0x36
 8001432:	f000 fa41 	bl	80018b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d808      	bhi.n	800144e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2036      	movs	r0, #54	; 0x36
 8001442:	f000 fa1d 	bl	8001880 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_InitTick+0xf0>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e002      	b.n	8001454 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001458:	4618      	mov	r0, r3
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	431bde83 	.word	0x431bde83
 8001468:	2000031c 	.word	0x2000031c
 800146c:	40001000 	.word	0x40001000
 8001470:	20000004 	.word	0x20000004

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM6_DAC_IRQHandler+0x10>)
 80014a6:	f002 fb79 	bl	8003b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000031c 	.word	0x2000031c

080014b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return 1;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_kill>:

int _kill(int pid, int sig)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ce:	f006 f855 	bl	800757c <__errno>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2216      	movs	r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
  return -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_exit>:

void _exit (int status)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffe7 	bl	80014c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014f6:	e7fe      	b.n	80014f6 <_exit+0x12>

080014f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
  }

  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e009      	b.n	8001558 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf1      	blt.n	8001544 <_write+0x12>
  }
  return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_close>:

int _close(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001592:	605a      	str	r2, [r3, #4]
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_isatty>:

int _isatty(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f005 ffba 	bl	800757c <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20080000 	.word	0x20080000
 8001634:	00000400 	.word	0x00000400
 8001638:	20000368 	.word	0x20000368
 800163c:	20004d88 	.word	0x20004d88

08001640 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800166a:	490e      	ldr	r1, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001680:	4c0b      	ldr	r4, [pc, #44]	; (80016b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168e:	f7ff ffd7 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f006 f86f 	bl	8007774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff fb21 	bl	8000cdc <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80016a8:	0800c364 	.word	0x0800c364
  ldr r2, =_sbss
 80016ac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80016b0:	20004d88 	.word	0x20004d88

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>

080016b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ba:	2003      	movs	r0, #3
 80016bc:	f000 f8d5 	bl	800186a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c0:	200f      	movs	r0, #15
 80016c2:	f7ff fe5d 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c6:	f7ff fd73 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	2000036c 	.word	0x2000036c

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000036c 	.word	0x2000036c

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <__NVIC_SetPriorityGrouping+0x40>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	4313      	orrs	r3, r2
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x40>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	05fa0000 	.word	0x05fa0000

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4907      	ldr	r1, [pc, #28]	; (80017ac <__NVIC_EnableIRQ+0x38>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ff4c 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001892:	f7ff ff61 	bl	8001758 <__NVIC_GetPriorityGrouping>
 8001896:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	6978      	ldr	r0, [r7, #20]
 800189e:	f7ff ffb1 	bl	8001804 <NVIC_EncodePriority>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff80 	bl	80017b0 <__NVIC_SetPriority>
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff54 	bl	8001774 <__NVIC_EnableIRQ>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e175      	b.n	8001be0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8164 	bne.w	8001bda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d005      	beq.n	800192a <HAL_GPIO_Init+0x56>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d130      	bne.n	800198c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0201 	and.w	r2, r3, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d017      	beq.n	80019c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80be 	beq.w	8001bda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a76:	4a61      	ldr	r2, [pc, #388]	; (8001bfc <HAL_GPIO_Init+0x328>)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_GPIO_Init+0x32c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d037      	beq.n	8001b12 <HAL_GPIO_Init+0x23e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <HAL_GPIO_Init+0x330>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d031      	beq.n	8001b0e <HAL_GPIO_Init+0x23a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a56      	ldr	r2, [pc, #344]	; (8001c08 <HAL_GPIO_Init+0x334>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02b      	beq.n	8001b0a <HAL_GPIO_Init+0x236>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a55      	ldr	r2, [pc, #340]	; (8001c0c <HAL_GPIO_Init+0x338>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d025      	beq.n	8001b06 <HAL_GPIO_Init+0x232>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a54      	ldr	r2, [pc, #336]	; (8001c10 <HAL_GPIO_Init+0x33c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01f      	beq.n	8001b02 <HAL_GPIO_Init+0x22e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a53      	ldr	r2, [pc, #332]	; (8001c14 <HAL_GPIO_Init+0x340>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_GPIO_Init+0x22a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_GPIO_Init+0x344>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x226>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a51      	ldr	r2, [pc, #324]	; (8001c1c <HAL_GPIO_Init+0x348>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x222>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a50      	ldr	r2, [pc, #320]	; (8001c20 <HAL_GPIO_Init+0x34c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x21e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_GPIO_Init+0x350>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x21a>
 8001aea:	2309      	movs	r3, #9
 8001aec:	e012      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001aee:	230a      	movs	r3, #10
 8001af0:	e010      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001af2:	2308      	movs	r3, #8
 8001af4:	e00e      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001af6:	2307      	movs	r3, #7
 8001af8:	e00c      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e00a      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001afe:	2305      	movs	r3, #5
 8001b00:	e008      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001b06:	2303      	movs	r3, #3
 8001b08:	e004      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x240>
 8001b12:	2300      	movs	r3, #0
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	f002 0203 	and.w	r2, r2, #3
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	4093      	lsls	r3, r2
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b24:	4935      	ldr	r1, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x328>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b56:	4a34      	ldr	r2, [pc, #208]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b80:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_GPIO_Init+0x354>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	f67f ae86 	bls.w	80018f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40021400 	.word	0x40021400
 8001c18:	40021800 	.word	0x40021800
 8001c1c:	40021c00 	.word	0x40021c00
 8001c20:	40022000 	.word	0x40022000
 8001c24:	40022400 	.word	0x40022400
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c48:	e003      	b.n	8001c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	619a      	str	r2, [r3, #24]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	041a      	lsls	r2, r3, #16
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	400b      	ands	r3, r1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff faa0 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	e006      	b.n	8001d1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d104      	bne.n	8001d2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_I2C_Init+0x11c>)
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69d9      	ldr	r1, [r3, #28]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1a      	ldr	r2, [r3, #32]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	02008000 	.word	0x02008000

08001db4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	817b      	strh	r3, [r7, #10]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	f040 80da 	bne.w	8001f8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x30>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e0d3      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x1d8>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dec:	f7ff fc84 	bl	80016f8 <HAL_GetTick>
 8001df0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2319      	movs	r3, #25
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f9e6 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0be      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2221      	movs	r2, #33	; 0x21
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	893a      	ldrh	r2, [r7, #8]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	d90e      	bls.n	8001e5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	22ff      	movs	r2, #255	; 0xff
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	8979      	ldrh	r1, [r7, #10]
 8001e4e:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fbd0 	bl	80025fc <I2C_TransferConfig>
 8001e5c:	e06c      	b.n	8001f38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	8979      	ldrh	r1, [r7, #10]
 8001e70:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fbbf 	bl	80025fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e7e:	e05b      	b.n	8001f38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	6a39      	ldr	r1, [r7, #32]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f9e3 	bl	8002250 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e07b      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d034      	beq.n	8001f38 <HAL_I2C_Master_Transmit+0x184>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d130      	bne.n	8001f38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	2200      	movs	r2, #0
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f975 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04d      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2bff      	cmp	r3, #255	; 0xff
 8001ef8:	d90e      	bls.n	8001f18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	22ff      	movs	r2, #255	; 0xff
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	8979      	ldrh	r1, [r7, #10]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 fb73 	bl	80025fc <I2C_TransferConfig>
 8001f16:	e00f      	b.n	8001f38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	8979      	ldrh	r1, [r7, #10]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fb62 	bl	80025fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d19e      	bne.n	8001e80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f9c2 	bl	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e01a      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	80002000 	.word	0x80002000
 8001f98:	fe00e800 	.word	0xfe00e800

08001f9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	817b      	strh	r3, [r7, #10]
 8001fac:	4613      	mov	r3, r2
 8001fae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	f040 80db 	bne.w	8002174 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2C_Master_Receive+0x30>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0d4      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd4:	f7ff fb90 	bl	80016f8 <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2319      	movs	r3, #25
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f8f2 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0bf      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2222      	movs	r2, #34	; 0x22
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2210      	movs	r2, #16
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	893a      	ldrh	r2, [r7, #8]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d90e      	bls.n	8002046 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	b2da      	uxtb	r2, r3
 8002034:	8979      	ldrh	r1, [r7, #10]
 8002036:	4b52      	ldr	r3, [pc, #328]	; (8002180 <HAL_I2C_Master_Receive+0x1e4>)
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fadc 	bl	80025fc <I2C_TransferConfig>
 8002044:	e06d      	b.n	8002122 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	b2da      	uxtb	r2, r3
 8002056:	8979      	ldrh	r1, [r7, #10]
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_I2C_Master_Receive+0x1e4>)
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 facb 	bl	80025fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002066:	e05c      	b.n	8002122 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	6a39      	ldr	r1, [r7, #32]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f96b 	bl	8002348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e07c      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d034      	beq.n	8002122 <HAL_I2C_Master_Receive+0x186>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d130      	bne.n	8002122 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f880 	bl	80021d0 <I2C_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e04d      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2bff      	cmp	r3, #255	; 0xff
 80020e2:	d90e      	bls.n	8002102 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	22ff      	movs	r2, #255	; 0xff
 80020e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	2300      	movs	r3, #0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fa7e 	bl	80025fc <I2C_TransferConfig>
 8002100:	e00f      	b.n	8002122 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	b2da      	uxtb	r2, r3
 8002112:	8979      	ldrh	r1, [r7, #10]
 8002114:	2300      	movs	r3, #0
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fa6d 	bl	80025fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d19d      	bne.n	8002068 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f8cd 	bl	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e01a      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2220      	movs	r2, #32
 8002146:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_I2C_Master_Receive+0x1e8>)
 8002154:	400b      	ands	r3, r1
 8002156:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	80002400 	.word	0x80002400
 8002184:	fe00e800 	.word	0xfe00e800

08002188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d103      	bne.n	80021a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d007      	beq.n	80021c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	619a      	str	r2, [r3, #24]
  }
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e0:	e022      	b.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e8:	d01e      	beq.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff fa85 	bl	80016f8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d113      	bne.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0220 	orr.w	r2, r3, #32
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e00f      	b.n	8002248 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4013      	ands	r3, r2
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	429a      	cmp	r2, r3
 8002244:	d0cd      	beq.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800225c:	e02c      	b.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f8ea 	bl	800243c <I2C_IsErrorOccurred>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e02a      	b.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002278:	d01e      	beq.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7ff fa3d 	bl	80016f8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d113      	bne.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e007      	b.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d1cb      	bne.n	800225e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022dc:	e028      	b.n	8002330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f8aa 	bl	800243c <I2C_IsErrorOccurred>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e026      	b.n	8002340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7ff fa01 	bl	80016f8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d113      	bne.n	8002330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e007      	b.n	8002340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b20      	cmp	r3, #32
 800233c:	d1cf      	bne.n	80022de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002354:	e064      	b.n	8002420 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f86e 	bl	800243c <I2C_IsErrorOccurred>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e062      	b.n	8002430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b20      	cmp	r3, #32
 8002376:	d138      	bne.n	80023ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d105      	bne.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e04e      	b.n	8002430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b10      	cmp	r3, #16
 800239e:	d107      	bne.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2210      	movs	r2, #16
 80023a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2204      	movs	r2, #4
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
 80023ae:	e002      	b.n	80023b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2220      	movs	r2, #32
 80023bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80023ca:	400b      	ands	r3, r1
 80023cc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e022      	b.n	8002430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7ff f985 	bl	80016f8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d302      	bcc.n	8002400 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10f      	bne.n	8002420 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e007      	b.n	8002430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d193      	bne.n	8002356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fe00e800 	.word	0xfe00e800

0800243c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d068      	beq.n	800253a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2210      	movs	r2, #16
 800246e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002470:	e049      	b.n	8002506 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002478:	d045      	beq.n	8002506 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7ff f93d 	bl	80016f8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <I2C_IsErrorOccurred+0x54>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d13a      	bne.n	8002506 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b2:	d121      	bne.n	80024f8 <I2C_IsErrorOccurred+0xbc>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ba:	d01d      	beq.n	80024f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d01a      	beq.n	80024f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024d2:	f7ff f911 	bl	80016f8 <HAL_GetTick>
 80024d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d8:	e00e      	b.n	80024f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024da:	f7ff f90d 	bl	80016f8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b19      	cmp	r3, #25
 80024e6:	d907      	bls.n	80024f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	f043 0320 	orr.w	r3, r3, #32
 80024ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024f6:	e006      	b.n	8002506 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b20      	cmp	r3, #32
 8002504:	d1e9      	bne.n	80024da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b20      	cmp	r3, #32
 8002512:	d003      	beq.n	800251c <I2C_IsErrorOccurred+0xe0>
 8002514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0aa      	beq.n	8002472 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800251c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2220      	movs	r2, #32
 800252a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01c      	beq.n	80025ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff fde9 	bl	8002188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <I2C_IsErrorOccurred+0x1bc>)
 80025c2:	400b      	ands	r3, r1
 80025c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	fe00e800 	.word	0xfe00e800

080025fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	817b      	strh	r3, [r7, #10]
 800260a:	4613      	mov	r3, r2
 800260c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002614:	7a7b      	ldrb	r3, [r7, #9]
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800261c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	4313      	orrs	r3, r2
 8002626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800262a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	0d5b      	lsrs	r3, r3, #21
 8002636:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <I2C_TransferConfig+0x60>)
 800263c:	430b      	orrs	r3, r1
 800263e:	43db      	mvns	r3, r3
 8002640:	ea02 0103 	and.w	r1, r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	03ff63ff 	.word	0x03ff63ff

08002660 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	d138      	bne.n	80026e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002680:	2302      	movs	r3, #2
 8002682:	e032      	b.n	80026ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b20      	cmp	r3, #32
 800270a:	d139      	bne.n	8002780 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002716:	2302      	movs	r3, #2
 8002718:	e033      	b.n	8002782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2224      	movs	r2, #36	; 0x24
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002748:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e29b      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8087 	beq.w	80028c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b4:	4b96      	ldr	r3, [pc, #600]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d00c      	beq.n	80027da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c0:	4b93      	ldr	r3, [pc, #588]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d112      	bne.n	80027f2 <HAL_RCC_OscConfig+0x62>
 80027cc:	4b90      	ldr	r3, [pc, #576]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d06c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x130>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d168      	bne.n	80028c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e275      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x7a>
 80027fc:	4b84      	ldr	r3, [pc, #528]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a83      	ldr	r2, [pc, #524]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e02e      	b.n	8002868 <HAL_RCC_OscConfig+0xd8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x9c>
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xd8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0xc0>
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a72      	ldr	r2, [pc, #456]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xd8>
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6b      	ldr	r2, [pc, #428]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe ff42 	bl	80016f8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe ff3e 	bl	80016f8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e229      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xe8>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe ff2e 	bl	80016f8 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe ff2a 	bl	80016f8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e215      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b57      	ldr	r3, [pc, #348]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x110>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d069      	beq.n	80029a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ce:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x190>
 80028e6:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x17a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1e9      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	493d      	ldr	r1, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e040      	b.n	80029a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d023      	beq.n	8002970 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fee0 	bl	80016f8 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe fedc 	bl	80016f8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1c7      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4929      	ldr	r1, [pc, #164]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
 800296e:	e018      	b.n	80029a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe febc 	bl	80016f8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe feb8 	bl	80016f8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1a3      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d038      	beq.n	8002a20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d019      	beq.n	80029ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe fe99 	bl	80016f8 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe fe95 	bl	80016f8 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e180      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x23a>
 80029e8:	e01a      	b.n	8002a20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fe fe7f 	bl	80016f8 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fe:	f7fe fe7b 	bl	80016f8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d903      	bls.n	8002a14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e166      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
 8002a10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a14:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a4 	beq.w	8002b76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2e:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b89      	ldr	r3, [pc, #548]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a88      	ldr	r2, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b86      	ldr	r3, [pc, #536]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a56:	4b83      	ldr	r3, [pc, #524]	; (8002c64 <HAL_RCC_OscConfig+0x4d4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a62:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x4d4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7f      	ldr	r2, [pc, #508]	; (8002c64 <HAL_RCC_OscConfig+0x4d4>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fe43 	bl	80016f8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fe3f 	bl	80016f8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e12a      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x4d4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x31a>
 8002a9c:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a6f      	ldr	r2, [pc, #444]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	e02d      	b.n	8002b06 <HAL_RCC_OscConfig+0x376>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x33c>
 8002ab2:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e01c      	b.n	8002b06 <HAL_RCC_OscConfig+0x376>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x35e>
 8002ad4:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a61      	ldr	r2, [pc, #388]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	4b5f      	ldr	r3, [pc, #380]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a5e      	ldr	r2, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x376>
 8002aee:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a5b      	ldr	r2, [pc, #364]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fdf3 	bl	80016f8 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fdef 	bl	80016f8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0d8      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ee      	beq.n	8002b16 <HAL_RCC_OscConfig+0x386>
 8002b38:	e014      	b.n	8002b64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fddd 	bl	80016f8 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fdd9 	bl	80016f8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0c2      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80ae 	beq.w	8002cdc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d06d      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d14b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fdaa 	bl	80016f8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fda6 	bl	80016f8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e091      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	019b      	lsls	r3, r3, #6
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	3b01      	subs	r3, #1
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	071b      	lsls	r3, r3, #28
 8002bf2:	491b      	ldr	r1, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fd78 	bl	80016f8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fd74 	bl	80016f8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e05f      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x47c>
 8002c2a:	e057      	b.n	8002cdc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fd5e 	bl	80016f8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fe fd5a 	bl	80016f8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e045      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4b0>
 8002c5e:	e03d      	b.n	8002cdc <HAL_RCC_OscConfig+0x54c>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <HAL_RCC_OscConfig+0x558>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d030      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d129      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d122      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d119      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0d0      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d910      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	4965      	ldr	r1, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d040      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d115      	bne.n	8002dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e073      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4936      	ldr	r1, [pc, #216]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de0:	f7fe fc8a 	bl	80016f8 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fe fc86 	bl	80016f8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e053      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d210      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1d0>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1d4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fa6e 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	0800be98 	.word	0x0800be98
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b094      	sub	sp, #80	; 0x50
 8002eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	f200 80e1 	bhi.w	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef6:	e0db      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efc:	e0db      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efe:	4b72      	ldr	r3, [pc, #456]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f02:	e0d8      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d063      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2e:	2300      	movs	r3, #0
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
 8002f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	f04f 0000 	mov.w	r0, #0
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	0159      	lsls	r1, r3, #5
 8002f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f48:	0150      	lsls	r0, r2, #5
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4621      	mov	r1, r4
 8002f50:	1a51      	subs	r1, r2, r1
 8002f52:	6139      	str	r1, [r7, #16]
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	018b      	lsls	r3, r1, #6
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f72:	4651      	mov	r1, sl
 8002f74:	018a      	lsls	r2, r1, #6
 8002f76:	4651      	mov	r1, sl
 8002f78:	ebb2 0801 	subs.w	r8, r2, r1
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f96:	4690      	mov	r8, r2
 8002f98:	4699      	mov	r9, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	eb18 0303 	adds.w	r3, r8, r3
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	eb49 0303 	adc.w	r3, r9, r3
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	028b      	lsls	r3, r1, #10
 8002fba:	4621      	mov	r1, r4
 8002fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	028a      	lsls	r2, r1, #10
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fca:	2200      	movs	r2, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd4:	f7fd fb48 	bl	8000668 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	e058      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	4611      	mov	r1, r2
 8002fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	0159      	lsls	r1, r3, #5
 800300a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300e:	0150      	lsls	r0, r2, #5
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4641      	mov	r1, r8
 8003016:	ebb2 0a01 	subs.w	sl, r2, r1
 800301a:	4649      	mov	r1, r9
 800301c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800302c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003034:	ebb2 040a 	subs.w	r4, r2, sl
 8003038:	eb63 050b 	sbc.w	r5, r3, fp
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	00eb      	lsls	r3, r5, #3
 8003046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	4614      	mov	r4, r2
 800304e:	461d      	mov	r5, r3
 8003050:	4643      	mov	r3, r8
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	464b      	mov	r3, r9
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307e:	2200      	movs	r2, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	61fa      	str	r2, [r7, #28]
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	f7fd faee 	bl	8000668 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80030a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3750      	adds	r7, #80	; 0x50
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400

080030cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	0800bea8 	.word	0x0800bea8

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003110:	f7ff ffdc 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0b5b      	lsrs	r3, r3, #13
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	0800bea8 	.word	0x0800bea8

08003134 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	220f      	movs	r2, #15
 8003142:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCC_GetClockConfig+0x60>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40023c00 	.word	0x40023c00

08003198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031c0:	4b69      	ldr	r3, [pc, #420]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	4964      	ldr	r1, [pc, #400]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d017      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	4959      	ldr	r1, [pc, #356]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d017      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	494a      	ldr	r1, [pc, #296]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800325a:	2301      	movs	r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 808b 	beq.w	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a39      	ldr	r2, [pc, #228]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a34      	ldr	r2, [pc, #208]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800329a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7fe fa2a 	bl	80016f8 <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a8:	f7fe fa26 	bl	80016f8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e38f      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d035      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d02e      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a1a      	ldr	r2, [pc, #104]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d114      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f9ee 	bl	80016f8 <HAL_GetTick>
 800331c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe f9ea 	bl	80016f8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e351      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ee      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334e:	d111      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800335e:	400b      	ands	r3, r1
 8003360:	4901      	ldr	r1, [pc, #4]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
 8003366:	e00b      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000
 8003370:	0ffffcff 	.word	0x0ffffcff
 8003374:	4bac      	ldr	r3, [pc, #688]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4aab      	ldr	r2, [pc, #684]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800337e:	6093      	str	r3, [r2, #8]
 8003380:	4ba9      	ldr	r3, [pc, #676]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003382:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	49a6      	ldr	r1, [pc, #664]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338e:	4313      	orrs	r3, r2
 8003390:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800339e:	4ba2      	ldr	r3, [pc, #648]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	4aa0      	ldr	r2, [pc, #640]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033ae:	4b9e      	ldr	r3, [pc, #632]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	499b      	ldr	r1, [pc, #620]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033cc:	4b96      	ldr	r3, [pc, #600]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033da:	4993      	ldr	r1, [pc, #588]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ee:	4b8e      	ldr	r3, [pc, #568]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fc:	498a      	ldr	r1, [pc, #552]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003410:	4b85      	ldr	r3, [pc, #532]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341e:	4982      	ldr	r1, [pc, #520]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003432:	4b7d      	ldr	r3, [pc, #500]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4979      	ldr	r1, [pc, #484]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003454:	4b74      	ldr	r3, [pc, #464]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4971      	ldr	r1, [pc, #452]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003476:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f023 020c 	bic.w	r2, r3, #12
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	4968      	ldr	r1, [pc, #416]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003498:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	4960      	ldr	r1, [pc, #384]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ba:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	4957      	ldr	r1, [pc, #348]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034dc:	4b52      	ldr	r3, [pc, #328]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	494f      	ldr	r1, [pc, #316]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034fe:	4b4a      	ldr	r3, [pc, #296]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	4946      	ldr	r1, [pc, #280]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003520:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	493e      	ldr	r1, [pc, #248]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	4935      	ldr	r1, [pc, #212]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003564:	4b30      	ldr	r3, [pc, #192]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003572:	492d      	ldr	r1, [pc, #180]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d011      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003586:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003594:	4924      	ldr	r1, [pc, #144]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a4:	d101      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c6:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d4:	4914      	ldr	r1, [pc, #80]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f8:	490b      	ldr	r1, [pc, #44]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00f      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361c:	4902      	ldr	r1, [pc, #8]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003624:	e002      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003638:	4b8a      	ldr	r3, [pc, #552]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	4986      	ldr	r1, [pc, #536]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800365c:	4b81      	ldr	r3, [pc, #516]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800365e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003662:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366c:	497d      	ldr	r1, [pc, #500]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d006      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80d6 	beq.w	8003834 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003688:	4b76      	ldr	r3, [pc, #472]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a75      	ldr	r2, [pc, #468]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fe f830 	bl	80016f8 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800369c:	f7fe f82c 	bl	80016f8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e195      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ae:	4b6d      	ldr	r3, [pc, #436]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d021      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11d      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036dc:	4b61      	ldr	r3, [pc, #388]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e2:	0e1b      	lsrs	r3, r3, #24
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	019a      	lsls	r2, r3, #6
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	071b      	lsls	r3, r3, #28
 8003702:	4958      	ldr	r1, [pc, #352]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02e      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003734:	d129      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003736:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003744:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	0f1b      	lsrs	r3, r3, #28
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	019a      	lsls	r2, r3, #6
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	071b      	lsls	r3, r3, #28
 800376a:	493e      	ldr	r1, [pc, #248]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003772:	4b3c      	ldr	r3, [pc, #240]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003778:	f023 021f 	bic.w	r2, r3, #31
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	3b01      	subs	r3, #1
 8003782:	4938      	ldr	r1, [pc, #224]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01d      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003796:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379c:	0e1b      	lsrs	r3, r3, #24
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037a4:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037aa:	0f1b      	lsrs	r3, r3, #28
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	019a      	lsls	r2, r3, #6
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	071b      	lsls	r3, r3, #28
 80037ca:	4926      	ldr	r1, [pc, #152]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	019a      	lsls	r2, r3, #6
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	071b      	lsls	r3, r3, #28
 80037fa:	491a      	ldr	r1, [pc, #104]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd ff73 	bl	80016f8 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003816:	f7fd ff6f 	bl	80016f8 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b64      	cmp	r3, #100	; 0x64
 8003822:	d901      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e0d8      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b01      	cmp	r3, #1
 8003838:	f040 80ce 	bne.w	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a08      	ldr	r2, [pc, #32]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003848:	f7fd ff56 	bl	80016f8 <HAL_GetTick>
 800384c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800384e:	e00b      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003850:	f7fd ff52 	bl	80016f8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d904      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0bb      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003868:	4b5e      	ldr	r3, [pc, #376]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003874:	d0ec      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02e      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d12a      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800389e:	4b51      	ldr	r3, [pc, #324]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038ac:	4b4d      	ldr	r3, [pc, #308]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	0f1b      	lsrs	r3, r3, #28
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	019a      	lsls	r2, r3, #6
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	071b      	lsls	r3, r3, #28
 80038d2:	4944      	ldr	r1, [pc, #272]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038da:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	493d      	ldr	r1, [pc, #244]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d022      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003908:	d11d      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800390a:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003918:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	0f1b      	lsrs	r3, r3, #28
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	019a      	lsls	r2, r3, #6
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	431a      	orrs	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	071b      	lsls	r3, r3, #28
 800393e:	4929      	ldr	r1, [pc, #164]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d028      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	0e1b      	lsrs	r3, r3, #24
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	019a      	lsls	r2, r3, #6
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	431a      	orrs	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	071b      	lsls	r3, r3, #28
 8003986:	4917      	ldr	r1, [pc, #92]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4911      	ldr	r1, [pc, #68]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd fea2 	bl	80016f8 <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039b8:	f7fd fe9e 	bl	80016f8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e007      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d6:	d1ef      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e049      	b.n	8003a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f841 	bl	8003a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f000 fa00 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d001      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e054      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x80>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d01d      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x80>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_TIM_Base_Start_IT+0xd4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x80>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x80>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x80>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <HAL_TIM_Base_Start_IT+0xe0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x80>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x80>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d115      	bne.n	8003b58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_TIM_Base_Start_IT+0xec>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	d015      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0xbe>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d011      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b56:	e008      	b.n	8003b6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e000      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40010400 	.word	0x40010400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40001800 	.word	0x40001800
 8003b98:	00010007 	.word	0x00010007

08003b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0202 	mvn.w	r2, #2
 8003bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f905 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8f7 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f908 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0204 	mvn.w	r2, #4
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8db 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8cd 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f8de 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0208 	mvn.w	r2, #8
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2204      	movs	r2, #4
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8b1 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8a3 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f8b4 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d122      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0210 	mvn.w	r2, #16
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f887 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f879 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f88a 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10e      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0201 	mvn.w	r2, #1
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fa30 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d10e      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d107      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f91a 	bl	8003f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5a:	d10e      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d107      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f90d 	bl	8003f94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d10e      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d107      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f838 	bl	8003e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d10e      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f06f 0220 	mvn.w	r2, #32
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8cd 	bl	8003f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d00f      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <TIM_Base_SetConfig+0x118>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <TIM_Base_SetConfig+0x11c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <TIM_Base_SetConfig+0x120>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d108      	bne.n	8003e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2f      	ldr	r2, [pc, #188]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d027      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <TIM_Base_SetConfig+0x118>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d023      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <TIM_Base_SetConfig+0x11c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <TIM_Base_SetConfig+0x120>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d017      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <TIM_Base_SetConfig+0x128>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <TIM_Base_SetConfig+0x12c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00f      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <TIM_Base_SetConfig+0x130>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <TIM_Base_SetConfig+0x134>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <TIM_Base_SetConfig+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <TIM_Base_SetConfig+0x13c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0xf8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d103      	bne.n	8003f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	615a      	str	r2, [r3, #20]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800
 8003f60:	40001800 	.word	0x40001800
 8003f64:	40001c00 	.word	0x40001c00
 8003f68:	40002000 	.word	0x40002000

08003f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e040      	b.n	800403c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd f978 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8b0 	bl	800414c <UART_SetConfig>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e022      	b.n	800403c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fb08 	bl	8004614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fb8f 	bl	8004758 <UART_CheckIdleState>
 800403a:	4603      	mov	r3, r0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004058:	2b20      	cmp	r3, #32
 800405a:	d171      	bne.n	8004140 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Transmit+0x24>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e06a      	b.n	8004142 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2221      	movs	r2, #33	; 0x21
 8004078:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407a:	f7fd fb3d 	bl	80016f8 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	d108      	bne.n	80040ac <HAL_UART_Transmit+0x68>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e003      	b.n	80040b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040b4:	e02c      	b.n	8004110 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fb96 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e038      	b.n	8004142 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	3302      	adds	r3, #2
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e007      	b.n	80040fe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1cc      	bne.n	80040b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	2140      	movs	r1, #64	; 0x40
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fb63 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e005      	b.n	8004142 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4ba6      	ldr	r3, [pc, #664]	; (8004410 <UART_SetConfig+0x2c4>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	6979      	ldr	r1, [r7, #20]
 8004180:	430b      	orrs	r3, r1
 8004182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a94      	ldr	r2, [pc, #592]	; (8004414 <UART_SetConfig+0x2c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d120      	bne.n	800420a <UART_SetConfig+0xbe>
 80041c8:	4b93      	ldr	r3, [pc, #588]	; (8004418 <UART_SetConfig+0x2cc>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d816      	bhi.n	8004204 <UART_SetConfig+0xb8>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x90>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	080041f3 	.word	0x080041f3
 80041e8:	080041ff 	.word	0x080041ff
 80041ec:	2301      	movs	r3, #1
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e150      	b.n	8004494 <UART_SetConfig+0x348>
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e14d      	b.n	8004494 <UART_SetConfig+0x348>
 80041f8:	2304      	movs	r3, #4
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e14a      	b.n	8004494 <UART_SetConfig+0x348>
 80041fe:	2308      	movs	r3, #8
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e147      	b.n	8004494 <UART_SetConfig+0x348>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e144      	b.n	8004494 <UART_SetConfig+0x348>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a83      	ldr	r2, [pc, #524]	; (800441c <UART_SetConfig+0x2d0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d132      	bne.n	800427a <UART_SetConfig+0x12e>
 8004214:	4b80      	ldr	r3, [pc, #512]	; (8004418 <UART_SetConfig+0x2cc>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d828      	bhi.n	8004274 <UART_SetConfig+0x128>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0xdc>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	0800425d 	.word	0x0800425d
 800422c:	08004275 	.word	0x08004275
 8004230:	08004275 	.word	0x08004275
 8004234:	08004275 	.word	0x08004275
 8004238:	08004269 	.word	0x08004269
 800423c:	08004275 	.word	0x08004275
 8004240:	08004275 	.word	0x08004275
 8004244:	08004275 	.word	0x08004275
 8004248:	08004263 	.word	0x08004263
 800424c:	08004275 	.word	0x08004275
 8004250:	08004275 	.word	0x08004275
 8004254:	08004275 	.word	0x08004275
 8004258:	0800426f 	.word	0x0800426f
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e118      	b.n	8004494 <UART_SetConfig+0x348>
 8004262:	2302      	movs	r3, #2
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e115      	b.n	8004494 <UART_SetConfig+0x348>
 8004268:	2304      	movs	r3, #4
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e112      	b.n	8004494 <UART_SetConfig+0x348>
 800426e:	2308      	movs	r3, #8
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e10f      	b.n	8004494 <UART_SetConfig+0x348>
 8004274:	2310      	movs	r3, #16
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e10c      	b.n	8004494 <UART_SetConfig+0x348>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a68      	ldr	r2, [pc, #416]	; (8004420 <UART_SetConfig+0x2d4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d120      	bne.n	80042c6 <UART_SetConfig+0x17a>
 8004284:	4b64      	ldr	r3, [pc, #400]	; (8004418 <UART_SetConfig+0x2cc>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800428e:	2b30      	cmp	r3, #48	; 0x30
 8004290:	d013      	beq.n	80042ba <UART_SetConfig+0x16e>
 8004292:	2b30      	cmp	r3, #48	; 0x30
 8004294:	d814      	bhi.n	80042c0 <UART_SetConfig+0x174>
 8004296:	2b20      	cmp	r3, #32
 8004298:	d009      	beq.n	80042ae <UART_SetConfig+0x162>
 800429a:	2b20      	cmp	r3, #32
 800429c:	d810      	bhi.n	80042c0 <UART_SetConfig+0x174>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <UART_SetConfig+0x15c>
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d006      	beq.n	80042b4 <UART_SetConfig+0x168>
 80042a6:	e00b      	b.n	80042c0 <UART_SetConfig+0x174>
 80042a8:	2300      	movs	r3, #0
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e0f2      	b.n	8004494 <UART_SetConfig+0x348>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e0ef      	b.n	8004494 <UART_SetConfig+0x348>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e0ec      	b.n	8004494 <UART_SetConfig+0x348>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e0e9      	b.n	8004494 <UART_SetConfig+0x348>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e0e6      	b.n	8004494 <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a56      	ldr	r2, [pc, #344]	; (8004424 <UART_SetConfig+0x2d8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d120      	bne.n	8004312 <UART_SetConfig+0x1c6>
 80042d0:	4b51      	ldr	r3, [pc, #324]	; (8004418 <UART_SetConfig+0x2cc>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042da:	2bc0      	cmp	r3, #192	; 0xc0
 80042dc:	d013      	beq.n	8004306 <UART_SetConfig+0x1ba>
 80042de:	2bc0      	cmp	r3, #192	; 0xc0
 80042e0:	d814      	bhi.n	800430c <UART_SetConfig+0x1c0>
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d009      	beq.n	80042fa <UART_SetConfig+0x1ae>
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d810      	bhi.n	800430c <UART_SetConfig+0x1c0>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <UART_SetConfig+0x1a8>
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d006      	beq.n	8004300 <UART_SetConfig+0x1b4>
 80042f2:	e00b      	b.n	800430c <UART_SetConfig+0x1c0>
 80042f4:	2300      	movs	r3, #0
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e0cc      	b.n	8004494 <UART_SetConfig+0x348>
 80042fa:	2302      	movs	r3, #2
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e0c9      	b.n	8004494 <UART_SetConfig+0x348>
 8004300:	2304      	movs	r3, #4
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e0c6      	b.n	8004494 <UART_SetConfig+0x348>
 8004306:	2308      	movs	r3, #8
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e0c3      	b.n	8004494 <UART_SetConfig+0x348>
 800430c:	2310      	movs	r3, #16
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e0c0      	b.n	8004494 <UART_SetConfig+0x348>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a44      	ldr	r2, [pc, #272]	; (8004428 <UART_SetConfig+0x2dc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d125      	bne.n	8004368 <UART_SetConfig+0x21c>
 800431c:	4b3e      	ldr	r3, [pc, #248]	; (8004418 <UART_SetConfig+0x2cc>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432a:	d017      	beq.n	800435c <UART_SetConfig+0x210>
 800432c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004330:	d817      	bhi.n	8004362 <UART_SetConfig+0x216>
 8004332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004336:	d00b      	beq.n	8004350 <UART_SetConfig+0x204>
 8004338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433c:	d811      	bhi.n	8004362 <UART_SetConfig+0x216>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <UART_SetConfig+0x1fe>
 8004342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004346:	d006      	beq.n	8004356 <UART_SetConfig+0x20a>
 8004348:	e00b      	b.n	8004362 <UART_SetConfig+0x216>
 800434a:	2300      	movs	r3, #0
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e0a1      	b.n	8004494 <UART_SetConfig+0x348>
 8004350:	2302      	movs	r3, #2
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e09e      	b.n	8004494 <UART_SetConfig+0x348>
 8004356:	2304      	movs	r3, #4
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e09b      	b.n	8004494 <UART_SetConfig+0x348>
 800435c:	2308      	movs	r3, #8
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e098      	b.n	8004494 <UART_SetConfig+0x348>
 8004362:	2310      	movs	r3, #16
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e095      	b.n	8004494 <UART_SetConfig+0x348>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2f      	ldr	r2, [pc, #188]	; (800442c <UART_SetConfig+0x2e0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d125      	bne.n	80043be <UART_SetConfig+0x272>
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <UART_SetConfig+0x2cc>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800437c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004380:	d017      	beq.n	80043b2 <UART_SetConfig+0x266>
 8004382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004386:	d817      	bhi.n	80043b8 <UART_SetConfig+0x26c>
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438c:	d00b      	beq.n	80043a6 <UART_SetConfig+0x25a>
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004392:	d811      	bhi.n	80043b8 <UART_SetConfig+0x26c>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <UART_SetConfig+0x254>
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439c:	d006      	beq.n	80043ac <UART_SetConfig+0x260>
 800439e:	e00b      	b.n	80043b8 <UART_SetConfig+0x26c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e076      	b.n	8004494 <UART_SetConfig+0x348>
 80043a6:	2302      	movs	r3, #2
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e073      	b.n	8004494 <UART_SetConfig+0x348>
 80043ac:	2304      	movs	r3, #4
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e070      	b.n	8004494 <UART_SetConfig+0x348>
 80043b2:	2308      	movs	r3, #8
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e06d      	b.n	8004494 <UART_SetConfig+0x348>
 80043b8:	2310      	movs	r3, #16
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e06a      	b.n	8004494 <UART_SetConfig+0x348>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <UART_SetConfig+0x2e4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d138      	bne.n	800443a <UART_SetConfig+0x2ee>
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <UART_SetConfig+0x2cc>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043d6:	d017      	beq.n	8004408 <UART_SetConfig+0x2bc>
 80043d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043dc:	d82a      	bhi.n	8004434 <UART_SetConfig+0x2e8>
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	d00b      	beq.n	80043fc <UART_SetConfig+0x2b0>
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e8:	d824      	bhi.n	8004434 <UART_SetConfig+0x2e8>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <UART_SetConfig+0x2aa>
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d006      	beq.n	8004402 <UART_SetConfig+0x2b6>
 80043f4:	e01e      	b.n	8004434 <UART_SetConfig+0x2e8>
 80043f6:	2300      	movs	r3, #0
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e04b      	b.n	8004494 <UART_SetConfig+0x348>
 80043fc:	2302      	movs	r3, #2
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e048      	b.n	8004494 <UART_SetConfig+0x348>
 8004402:	2304      	movs	r3, #4
 8004404:	77fb      	strb	r3, [r7, #31]
 8004406:	e045      	b.n	8004494 <UART_SetConfig+0x348>
 8004408:	2308      	movs	r3, #8
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e042      	b.n	8004494 <UART_SetConfig+0x348>
 800440e:	bf00      	nop
 8004410:	efff69f3 	.word	0xefff69f3
 8004414:	40011000 	.word	0x40011000
 8004418:	40023800 	.word	0x40023800
 800441c:	40004400 	.word	0x40004400
 8004420:	40004800 	.word	0x40004800
 8004424:	40004c00 	.word	0x40004c00
 8004428:	40005000 	.word	0x40005000
 800442c:	40011400 	.word	0x40011400
 8004430:	40007800 	.word	0x40007800
 8004434:	2310      	movs	r3, #16
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e02c      	b.n	8004494 <UART_SetConfig+0x348>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a72      	ldr	r2, [pc, #456]	; (8004608 <UART_SetConfig+0x4bc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <UART_SetConfig+0x344>
 8004444:	4b71      	ldr	r3, [pc, #452]	; (800460c <UART_SetConfig+0x4c0>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800444e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004452:	d017      	beq.n	8004484 <UART_SetConfig+0x338>
 8004454:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004458:	d817      	bhi.n	800448a <UART_SetConfig+0x33e>
 800445a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445e:	d00b      	beq.n	8004478 <UART_SetConfig+0x32c>
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	d811      	bhi.n	800448a <UART_SetConfig+0x33e>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <UART_SetConfig+0x326>
 800446a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446e:	d006      	beq.n	800447e <UART_SetConfig+0x332>
 8004470:	e00b      	b.n	800448a <UART_SetConfig+0x33e>
 8004472:	2300      	movs	r3, #0
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e00d      	b.n	8004494 <UART_SetConfig+0x348>
 8004478:	2302      	movs	r3, #2
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e00a      	b.n	8004494 <UART_SetConfig+0x348>
 800447e:	2304      	movs	r3, #4
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e007      	b.n	8004494 <UART_SetConfig+0x348>
 8004484:	2308      	movs	r3, #8
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e004      	b.n	8004494 <UART_SetConfig+0x348>
 800448a:	2310      	movs	r3, #16
 800448c:	77fb      	strb	r3, [r7, #31]
 800448e:	e001      	b.n	8004494 <UART_SetConfig+0x348>
 8004490:	2310      	movs	r3, #16
 8004492:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449c:	d15b      	bne.n	8004556 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800449e:	7ffb      	ldrb	r3, [r7, #31]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d828      	bhi.n	80044f6 <UART_SetConfig+0x3aa>
 80044a4:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x360>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe fe08 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61b8      	str	r0, [r7, #24]
        break;
 80044d6:	e013      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fe fe18 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80044dc:	61b8      	str	r0, [r7, #24]
        break;
 80044de:	e00f      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <UART_SetConfig+0x4c4>)
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fe fced 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 80044ea:	61b8      	str	r0, [r7, #24]
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61bb      	str	r3, [r7, #24]
        break;
 80044f4:	e004      	b.n	8004500 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	77bb      	strb	r3, [r7, #30]
        break;
 80044fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d074      	beq.n	80045f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	005a      	lsls	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d916      	bls.n	8004550 <UART_SetConfig+0x404>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d212      	bcs.n	8004550 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f023 030f 	bic.w	r3, r3, #15
 8004532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	b29b      	uxth	r3, r3
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	b29a      	uxth	r2, r3
 8004540:	89fb      	ldrh	r3, [r7, #14]
 8004542:	4313      	orrs	r3, r2
 8004544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	89fa      	ldrh	r2, [r7, #14]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e04f      	b.n	80045f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77bb      	strb	r3, [r7, #30]
 8004554:	e04c      	b.n	80045f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004556:	7ffb      	ldrb	r3, [r7, #31]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d828      	bhi.n	80045ae <UART_SetConfig+0x462>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x418>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe fdac 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 800458c:	61b8      	str	r0, [r7, #24]
        break;
 800458e:	e013      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe fdbc 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 8004594:	61b8      	str	r0, [r7, #24]
        break;
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <UART_SetConfig+0x4c4>)
 800459a:	61bb      	str	r3, [r7, #24]
        break;
 800459c:	e00c      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe fc91 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 80045a2:	61b8      	str	r0, [r7, #24]
        break;
 80045a4:	e008      	b.n	80045b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045aa:	61bb      	str	r3, [r7, #24]
        break;
 80045ac:	e004      	b.n	80045b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	77bb      	strb	r3, [r7, #30]
        break;
 80045b6:	bf00      	nop
    }

    if (pclk != 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085a      	lsrs	r2, r3, #1
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	441a      	add	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d909      	bls.n	80045ec <UART_SetConfig+0x4a0>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045de:	d205      	bcs.n	80045ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e001      	b.n	80045f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40007c00 	.word	0x40007c00
 800460c:	40023800 	.word	0x40023800
 8004610:	00f42400 	.word	0x00f42400

08004614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01a      	beq.n	800472a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004712:	d10a      	bne.n	800472a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af02      	add	r7, sp, #8
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004768:	f7fc ffc6 	bl	80016f8 <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d10e      	bne.n	800479a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800477c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f831 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e027      	b.n	80047ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d10e      	bne.n	80047c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f81b 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e011      	b.n	80047ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b09c      	sub	sp, #112	; 0x70
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	e0a7      	b.n	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480a:	f000 80a3 	beq.w	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fc ff73 	bl	80016f8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <UART_WaitOnFlagUntilTimeout+0x32>
 800481e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004820:	2b00      	cmp	r3, #0
 8004822:	d13f      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004838:	667b      	str	r3, [r7, #100]	; 0x64
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004844:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e6      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3308      	adds	r3, #8
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	663b      	str	r3, [r7, #96]	; 0x60
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004876:	64ba      	str	r2, [r7, #72]	; 0x48
 8004878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800487c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e068      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d050      	beq.n	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c0:	d148      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
 80048ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e6      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	613b      	str	r3, [r7, #16]
   return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	66bb      	str	r3, [r7, #104]	; 0x68
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800491e:	623a      	str	r2, [r7, #32]
 8004920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	69f9      	ldr	r1, [r7, #28]
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	61bb      	str	r3, [r7, #24]
   return(result);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e010      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	429a      	cmp	r2, r3
 8004970:	f43f af48 	beq.w	8004804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3770      	adds	r7, #112	; 0x70
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004992:	f3ef 8305 	mrs	r3, IPSR
 8004996:	60bb      	str	r3, [r7, #8]
  return(result);
 8004998:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499e:	f3ef 8310 	mrs	r3, PRIMASK
 80049a2:	607b      	str	r3, [r7, #4]
  return(result);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d105      	bne.n	80049b6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049aa:	f3ef 8311 	mrs	r3, BASEPRI
 80049ae:	603b      	str	r3, [r7, #0]
  return(result);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <osKernelInitialize+0x3a>
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <osKernelInitialize+0x64>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d103      	bne.n	80049c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80049be:	f06f 0305 	mvn.w	r3, #5
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e00c      	b.n	80049e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <osKernelInitialize+0x64>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <osKernelInitialize+0x64>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e002      	b.n	80049e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80049da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049e0:	68fb      	ldr	r3, [r7, #12]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000370 	.word	0x20000370

080049f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049fa:	f3ef 8305 	mrs	r3, IPSR
 80049fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10f      	bne.n	8004a26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a06:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d105      	bne.n	8004a1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a12:	f3ef 8311 	mrs	r3, BASEPRI
 8004a16:	603b      	str	r3, [r7, #0]
  return(result);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <osKernelStart+0x3a>
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <osKernelStart+0x68>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004a26:	f06f 0305 	mvn.w	r3, #5
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e010      	b.n	8004a50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <osKernelStart+0x68>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d109      	bne.n	8004a4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a36:	f7ff ffa2 	bl	800497e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <osKernelStart+0x68>)
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a40:	f001 f8ca 	bl	8005bd8 <vTaskStartScheduler>
      stat = osOK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e002      	b.n	8004a50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a50:	68fb      	ldr	r3, [r7, #12]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000370 	.word	0x20000370

08004a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b090      	sub	sp, #64	; 0x40
 8004a64:	af04      	add	r7, sp, #16
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a70:	f3ef 8305 	mrs	r3, IPSR
 8004a74:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 808f 	bne.w	8004b9c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a82:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8e:	617b      	str	r3, [r7, #20]
  return(result);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <osThreadNew+0x3e>
 8004a96:	4b44      	ldr	r3, [pc, #272]	; (8004ba8 <osThreadNew+0x148>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d07e      	beq.n	8004b9c <osThreadNew+0x13c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d07b      	beq.n	8004b9c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004aa8:	2318      	movs	r3, #24
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ab4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d045      	beq.n	8004b48 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <osThreadNew+0x6a>
        name = attr->name;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <osThreadNew+0x90>
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	2b38      	cmp	r3, #56	; 0x38
 8004ae2:	d805      	bhi.n	8004af0 <osThreadNew+0x90>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <osThreadNew+0x94>
        return (NULL);
 8004af0:	2300      	movs	r3, #0
 8004af2:	e054      	b.n	8004b9e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	089b      	lsrs	r3, r3, #2
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <osThreadNew+0xca>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2bbb      	cmp	r3, #187	; 0xbb
 8004b12:	d90a      	bls.n	8004b2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d006      	beq.n	8004b2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <osThreadNew+0xca>
        mem = 1;
 8004b24:	2301      	movs	r3, #1
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	e010      	b.n	8004b4c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10c      	bne.n	8004b4c <osThreadNew+0xec>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <osThreadNew+0xec>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d104      	bne.n	8004b4c <osThreadNew+0xec>
          mem = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	e001      	b.n	8004b4c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d110      	bne.n	8004b74 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b5a:	9202      	str	r2, [sp, #8]
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fe3f 	bl	80057ec <xTaskCreateStatic>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e013      	b.n	8004b9c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d110      	bne.n	8004b9c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	f107 0310 	add.w	r3, r7, #16
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fe90 	bl	80058b2 <xTaskCreate>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d001      	beq.n	8004b9c <osThreadNew+0x13c>
          hTask = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b9c:	693b      	ldr	r3, [r7, #16]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3730      	adds	r7, #48	; 0x30
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000370 	.word	0x20000370

08004bac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb4:	f3ef 8305 	mrs	r3, IPSR
 8004bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10f      	bne.n	8004be0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <osDelay+0x3c>
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <osDelay+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d103      	bne.n	8004be8 <osDelay+0x3c>
    stat = osErrorISR;
 8004be0:	f06f 0305 	mvn.w	r3, #5
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	e007      	b.n	8004bf8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 ffba 	bl	8005b6c <vTaskDelay>
    }
  }

  return (stat);
 8004bf8:	697b      	ldr	r3, [r7, #20]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000370 	.word	0x20000370

08004c08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <vApplicationGetIdleTaskMemory+0x30>)
 8004c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000374 	.word	0x20000374
 8004c38:	20000430 	.word	0x20000430

08004c3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <vApplicationGetTimerTaskMemory+0x30>)
 8004c52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c5a:	601a      	str	r2, [r3, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	20000630 	.word	0x20000630
 8004c6c:	200006ec 	.word	0x200006ec

08004c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f103 0208 	add.w	r2, r3, #8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f103 0208 	add.w	r2, r3, #8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 0208 	add.w	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d28:	d103      	bne.n	8004d32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e00c      	b.n	8004d4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3308      	adds	r3, #8
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e002      	b.n	8004d40 <vListInsert+0x2e>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d2f6      	bcs.n	8004d3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6852      	ldr	r2, [r2, #4]
 8004da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d103      	bne.n	8004db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10c      	bne.n	8004e06 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	b672      	cpsid	i
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	b662      	cpsie	i
 8004e00:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004e06:	f002 f8a9 	bl	8006f5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	3b01      	subs	r3, #1
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	22ff      	movs	r2, #255	; 0xff
 8004e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d114      	bne.n	8004e86 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01a      	beq.n	8004e9a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3310      	adds	r3, #16
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 f95d 	bl	8006128 <xTaskRemoveFromEventList>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d012      	beq.n	8004e9a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <xQueueGenericReset+0xd0>)
 8004e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	e009      	b.n	8004e9a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3310      	adds	r3, #16
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fef0 	bl	8004c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff feeb 	bl	8004c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e9a:	f002 f893 	bl	8006fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e9e:	2301      	movs	r3, #1
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08e      	sub	sp, #56	; 0x38
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10c      	bne.n	8004eda <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	b672      	cpsid	i
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	b662      	cpsie	i
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10c      	bne.n	8004efa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	b672      	cpsid	i
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	b662      	cpsie	i
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <xQueueGenericCreateStatic+0x5a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <xQueueGenericCreateStatic+0x5e>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueGenericCreateStatic+0x60>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10c      	bne.n	8004f2a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	b672      	cpsid	i
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	b662      	cpsie	i
 8004f24:	623b      	str	r3, [r7, #32]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <xQueueGenericCreateStatic+0x8a>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <xQueueGenericCreateStatic+0x8e>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericCreateStatic+0x90>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10c      	bne.n	8004f5a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	b672      	cpsid	i
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	b662      	cpsie	i
 8004f54:	61fb      	str	r3, [r7, #28]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f5a:	2350      	movs	r3, #80	; 0x50
 8004f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b50      	cmp	r3, #80	; 0x50
 8004f62:	d00c      	beq.n	8004f7e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	61bb      	str	r3, [r7, #24]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f805 	bl	8004fb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3730      	adds	r7, #48	; 0x30
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fde:	2101      	movs	r1, #1
 8004fe0:	69b8      	ldr	r0, [r7, #24]
 8004fe2:	f7ff fef9 	bl	8004dd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08e      	sub	sp, #56	; 0x38
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005006:	2300      	movs	r3, #0
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10c      	bne.n	800502e <xQueueGenericSend+0x36>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	b672      	cpsid	i
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	b662      	cpsie	i
 8005028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d103      	bne.n	800503c <xQueueGenericSend+0x44>
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <xQueueGenericSend+0x48>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <xQueueGenericSend+0x4a>
 8005040:	2300      	movs	r3, #0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10c      	bne.n	8005060 <xQueueGenericSend+0x68>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	b672      	cpsid	i
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	b662      	cpsie	i
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800505c:	bf00      	nop
 800505e:	e7fe      	b.n	800505e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d103      	bne.n	800506e <xQueueGenericSend+0x76>
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <xQueueGenericSend+0x7a>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <xQueueGenericSend+0x7c>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10c      	bne.n	8005092 <xQueueGenericSend+0x9a>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	b672      	cpsid	i
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	b662      	cpsie	i
 800508c:	623b      	str	r3, [r7, #32]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005092:	f001 fa13 	bl	80064bc <xTaskGetSchedulerState>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <xQueueGenericSend+0xaa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <xQueueGenericSend+0xae>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueGenericSend+0xb0>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10c      	bne.n	80050c6 <xQueueGenericSend+0xce>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	b672      	cpsid	i
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	b662      	cpsie	i
 80050c0:	61fb      	str	r3, [r7, #28]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050c6:	f001 ff49 	bl	8006f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d302      	bcc.n	80050dc <xQueueGenericSend+0xe4>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d129      	bne.n	8005130 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050e2:	f000 fa15 	bl	8005510 <prvCopyDataToQueue>
 80050e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d010      	beq.n	8005112 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	3324      	adds	r3, #36	; 0x24
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 f817 	bl	8006128 <xTaskRemoveFromEventList>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005100:	4b3f      	ldr	r3, [pc, #252]	; (8005200 <xQueueGenericSend+0x208>)
 8005102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	e00a      	b.n	8005128 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005118:	4b39      	ldr	r3, [pc, #228]	; (8005200 <xQueueGenericSend+0x208>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005128:	f001 ff4c 	bl	8006fc4 <vPortExitCritical>
				return pdPASS;
 800512c:	2301      	movs	r3, #1
 800512e:	e063      	b.n	80051f8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005136:	f001 ff45 	bl	8006fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800513a:	2300      	movs	r3, #0
 800513c:	e05c      	b.n	80051f8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005144:	f107 0314 	add.w	r3, r7, #20
 8005148:	4618      	mov	r0, r3
 800514a:	f001 f853 	bl	80061f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800514e:	2301      	movs	r3, #1
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005152:	f001 ff37 	bl	8006fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005156:	f000 fdb3 	bl	8005cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800515a:	f001 feff 	bl	8006f5c <vPortEnterCritical>
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005164:	b25b      	sxtb	r3, r3
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800516a:	d103      	bne.n	8005174 <xQueueGenericSend+0x17c>
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800517a:	b25b      	sxtb	r3, r3
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005180:	d103      	bne.n	800518a <xQueueGenericSend+0x192>
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800518a:	f001 ff1b 	bl	8006fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800518e:	1d3a      	adds	r2, r7, #4
 8005190:	f107 0314 	add.w	r3, r7, #20
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f001 f842 	bl	8006220 <xTaskCheckForTimeOut>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d124      	bne.n	80051ec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051a4:	f000 faac 	bl	8005700 <prvIsQueueFull>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d018      	beq.n	80051e0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	3310      	adds	r3, #16
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff62 	bl	8006080 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051be:	f000 fa37 	bl	8005630 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051c2:	f000 fd8b 	bl	8005cdc <xTaskResumeAll>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f47f af7c 	bne.w	80050c6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <xQueueGenericSend+0x208>)
 80051d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	e772      	b.n	80050c6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051e2:	f000 fa25 	bl	8005630 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051e6:	f000 fd79 	bl	8005cdc <xTaskResumeAll>
 80051ea:	e76c      	b.n	80050c6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ee:	f000 fa1f 	bl	8005630 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051f2:	f000 fd73 	bl	8005cdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3738      	adds	r7, #56	; 0x38
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08e      	sub	sp, #56	; 0x38
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10c      	bne.n	8005236 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	b672      	cpsid	i
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	b662      	cpsie	i
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <xQueueGenericSendFromISR+0x40>
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <xQueueGenericSendFromISR+0x44>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <xQueueGenericSendFromISR+0x46>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10c      	bne.n	8005268 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	b672      	cpsid	i
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	b662      	cpsie	i
 8005262:	623b      	str	r3, [r7, #32]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d103      	bne.n	8005276 <xQueueGenericSendFromISR+0x72>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <xQueueGenericSendFromISR+0x76>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <xQueueGenericSendFromISR+0x78>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10c      	bne.n	800529a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	b672      	cpsid	i
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	b662      	cpsie	i
 8005294:	61fb      	str	r3, [r7, #28]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800529a:	f001 ff47 	bl	800712c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800529e:	f3ef 8211 	mrs	r2, BASEPRI
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	b672      	cpsid	i
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	b662      	cpsie	i
 80052b6:	61ba      	str	r2, [r7, #24]
 80052b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <xQueueGenericSendFromISR+0xcc>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d12c      	bne.n	800532a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052e0:	f000 f916 	bl	8005510 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ec:	d112      	bne.n	8005314 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	3324      	adds	r3, #36	; 0x24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 ff14 	bl	8006128 <xTaskRemoveFromEventList>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00e      	beq.n	8005324 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e007      	b.n	8005324 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005314:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005318:	3301      	adds	r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	b25a      	sxtb	r2, r3
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005324:	2301      	movs	r3, #1
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005328:	e001      	b.n	800532e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800532a:	2300      	movs	r3, #0
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005338:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800533c:	4618      	mov	r0, r3
 800533e:	3738      	adds	r7, #56	; 0x38
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10c      	bne.n	8005378 <xQueueReceive+0x34>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	b672      	cpsid	i
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	b662      	cpsie	i
 8005372:	623b      	str	r3, [r7, #32]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <xQueueReceive+0x42>
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <xQueueReceive+0x46>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <xQueueReceive+0x48>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10c      	bne.n	80053aa <xQueueReceive+0x66>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	b672      	cpsid	i
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	b662      	cpsie	i
 80053a4:	61fb      	str	r3, [r7, #28]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053aa:	f001 f887 	bl	80064bc <xTaskGetSchedulerState>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d102      	bne.n	80053ba <xQueueReceive+0x76>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <xQueueReceive+0x7a>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <xQueueReceive+0x7c>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10c      	bne.n	80053de <xQueueReceive+0x9a>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	b672      	cpsid	i
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	b662      	cpsie	i
 80053d8:	61bb      	str	r3, [r7, #24]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053de:	f001 fdbd 	bl	8006f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01f      	beq.n	800542e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f2:	f000 f8f7 	bl	80055e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00f      	beq.n	8005426 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	3310      	adds	r3, #16
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fe8c 	bl	8006128 <xTaskRemoveFromEventList>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005416:	4b3d      	ldr	r3, [pc, #244]	; (800550c <xQueueReceive+0x1c8>)
 8005418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005426:	f001 fdcd 	bl	8006fc4 <vPortExitCritical>
				return pdPASS;
 800542a:	2301      	movs	r3, #1
 800542c:	e069      	b.n	8005502 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005434:	f001 fdc6 	bl	8006fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005438:	2300      	movs	r3, #0
 800543a:	e062      	b.n	8005502 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fed4 	bl	80061f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005450:	f001 fdb8 	bl	8006fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005454:	f000 fc34 	bl	8005cc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005458:	f001 fd80 	bl	8006f5c <vPortEnterCritical>
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005462:	b25b      	sxtb	r3, r3
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005468:	d103      	bne.n	8005472 <xQueueReceive+0x12e>
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005478:	b25b      	sxtb	r3, r3
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800547e:	d103      	bne.n	8005488 <xQueueReceive+0x144>
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005488:	f001 fd9c 	bl	8006fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800548c:	1d3a      	adds	r2, r7, #4
 800548e:	f107 0310 	add.w	r3, r7, #16
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fec3 	bl	8006220 <xTaskCheckForTimeOut>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d123      	bne.n	80054e8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a2:	f000 f917 	bl	80056d4 <prvIsQueueEmpty>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fde3 	bl	8006080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054bc:	f000 f8b8 	bl	8005630 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054c0:	f000 fc0c 	bl	8005cdc <xTaskResumeAll>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d189      	bne.n	80053de <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80054ca:	4b10      	ldr	r3, [pc, #64]	; (800550c <xQueueReceive+0x1c8>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	e780      	b.n	80053de <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f000 f8a7 	bl	8005630 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054e2:	f000 fbfb 	bl	8005cdc <xTaskResumeAll>
 80054e6:	e77a      	b.n	80053de <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ea:	f000 f8a1 	bl	8005630 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ee:	f000 fbf5 	bl	8005cdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f4:	f000 f8ee 	bl	80056d4 <prvIsQueueEmpty>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f43f af6f 	beq.w	80053de <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005500:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005502:	4618      	mov	r0, r3
 8005504:	3730      	adds	r7, #48	; 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10d      	bne.n	800554a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d14d      	bne.n	80055d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 ffdc 	bl	80064f8 <xTaskPriorityDisinherit>
 8005540:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	e043      	b.n	80055d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d119      	bne.n	8005584 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6858      	ldr	r0, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	461a      	mov	r2, r3
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	f002 f931 	bl	80077c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	441a      	add	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	d32b      	bcc.n	80055d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e026      	b.n	80055d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	68d8      	ldr	r0, [r3, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	461a      	mov	r2, r3
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	f002 f917 	bl	80077c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	425b      	negs	r3, r3
 800559e:	441a      	add	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d207      	bcs.n	80055c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	425b      	negs	r3, r3
 80055ba:	441a      	add	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d105      	bne.n	80055d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055da:	697b      	ldr	r3, [r7, #20]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	441a      	add	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d303      	bcc.n	8005618 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68d9      	ldr	r1, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	461a      	mov	r2, r3
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	f002 f8cd 	bl	80077c2 <memcpy>
	}
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005638:	f001 fc90 	bl	8006f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005642:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005644:	e011      	b.n	800566a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d012      	beq.n	8005674 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3324      	adds	r3, #36	; 0x24
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fd68 	bl	8006128 <xTaskRemoveFromEventList>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800565e:	f000 fe45 	bl	80062ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	3b01      	subs	r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800566a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	dce9      	bgt.n	8005646 <prvUnlockQueue+0x16>
 8005672:	e000      	b.n	8005676 <prvUnlockQueue+0x46>
					break;
 8005674:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	22ff      	movs	r2, #255	; 0xff
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800567e:	f001 fca1 	bl	8006fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005682:	f001 fc6b 	bl	8006f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800568c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800568e:	e011      	b.n	80056b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d012      	beq.n	80056be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3310      	adds	r3, #16
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fd43 	bl	8006128 <xTaskRemoveFromEventList>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056a8:	f000 fe20 	bl	80062ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	dce9      	bgt.n	8005690 <prvUnlockQueue+0x60>
 80056bc:	e000      	b.n	80056c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	22ff      	movs	r2, #255	; 0xff
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056c8:	f001 fc7c 	bl	8006fc4 <vPortExitCritical>
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056dc:	f001 fc3e 	bl	8006f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e001      	b.n	80056f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056f2:	f001 fc67 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005708:	f001 fc28 	bl	8006f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	429a      	cmp	r2, r3
 8005716:	d102      	bne.n	800571e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e001      	b.n	8005722 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005722:	f001 fc4f 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e014      	b.n	800576a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005740:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <vQueueAddToRegistry+0x50>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800574c:	490c      	ldr	r1, [pc, #48]	; (8005780 <vQueueAddToRegistry+0x50>)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005756:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <vQueueAddToRegistry+0x50>)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4413      	add	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005762:	e006      	b.n	8005772 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b07      	cmp	r3, #7
 800576e:	d9e7      	bls.n	8005740 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000aec 	.word	0x20000aec

08005784 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005794:	f001 fbe2 	bl	8006f5c <vPortEnterCritical>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800579e:	b25b      	sxtb	r3, r3
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a4:	d103      	bne.n	80057ae <vQueueWaitForMessageRestricted+0x2a>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ba:	d103      	bne.n	80057c4 <vQueueWaitForMessageRestricted+0x40>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c4:	f001 fbfe 	bl	8006fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fc77 	bl	80060cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	f7ff ff26 	bl	8005630 <prvUnlockQueue>
	}
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af04      	add	r7, sp, #16
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10c      	bne.n	800581a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	b672      	cpsid	i
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	b662      	cpsie	i
 8005814:	623b      	str	r3, [r7, #32]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <xTaskCreateStatic+0x4e>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	b672      	cpsid	i
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	b662      	cpsie	i
 8005834:	61fb      	str	r3, [r7, #28]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800583a:	23bc      	movs	r3, #188	; 0xbc
 800583c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2bbc      	cmp	r3, #188	; 0xbc
 8005842:	d00c      	beq.n	800585e <xTaskCreateStatic+0x72>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	b672      	cpsid	i
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	b662      	cpsie	i
 8005858:	61bb      	str	r3, [r7, #24]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800585e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01e      	beq.n	80058a4 <xTaskCreateStatic+0xb8>
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01b      	beq.n	80058a4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005874:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	2202      	movs	r2, #2
 800587a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800587e:	2300      	movs	r3, #0
 8005880:	9303      	str	r3, [sp, #12]
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	9302      	str	r3, [sp, #8]
 8005886:	f107 0314 	add.w	r3, r7, #20
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f850 	bl	800593c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800589c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800589e:	f000 f8f5 	bl	8005a8c <prvAddNewTaskToReadyList>
 80058a2:	e001      	b.n	80058a8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058a8:	697b      	ldr	r3, [r7, #20]
	}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3728      	adds	r7, #40	; 0x28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b08c      	sub	sp, #48	; 0x30
 80058b6:	af04      	add	r7, sp, #16
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	603b      	str	r3, [r7, #0]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 fc74 	bl	80071b4 <pvPortMalloc>
 80058cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058d4:	20bc      	movs	r0, #188	; 0xbc
 80058d6:	f001 fc6d 	bl	80071b4 <pvPortMalloc>
 80058da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
 80058e8:	e005      	b.n	80058f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058ea:	6978      	ldr	r0, [r7, #20]
 80058ec:	f001 fd2c 	bl	8007348 <vPortFree>
 80058f0:	e001      	b.n	80058f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d017      	beq.n	800592c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005904:	88fa      	ldrh	r2, [r7, #6]
 8005906:	2300      	movs	r3, #0
 8005908:	9303      	str	r3, [sp, #12]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	9302      	str	r3, [sp, #8]
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f80e 	bl	800593c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005920:	69f8      	ldr	r0, [r7, #28]
 8005922:	f000 f8b3 	bl	8005a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005926:	2301      	movs	r3, #1
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e002      	b.n	8005932 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800592c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005930:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005932:	69bb      	ldr	r3, [r7, #24]
	}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	461a      	mov	r2, r3
 8005954:	21a5      	movs	r1, #165	; 0xa5
 8005956:	f001 ff42 	bl	80077de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005964:	440b      	add	r3, r1
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f023 0307 	bic.w	r3, r3, #7
 8005972:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	b672      	cpsid	i
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	b662      	cpsie	i
 8005992:	617b      	str	r3, [r7, #20]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01f      	beq.n	80059de <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e012      	b.n	80059ca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	7819      	ldrb	r1, [r3, #0]
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	3334      	adds	r3, #52	; 0x34
 80059b4:	460a      	mov	r2, r1
 80059b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	4413      	add	r3, r2
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d006      	beq.n	80059d2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d9e9      	bls.n	80059a4 <prvInitialiseNewTask+0x68>
 80059d0:	e000      	b.n	80059d4 <prvInitialiseNewTask+0x98>
			{
				break;
 80059d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059dc:	e003      	b.n	80059e6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2b37      	cmp	r3, #55	; 0x37
 80059ea:	d901      	bls.n	80059f0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059ec:	2337      	movs	r3, #55	; 0x37
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	2200      	movs	r2, #0
 8005a00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff f952 	bl	8004cb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	3318      	adds	r3, #24
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff f94d 	bl	8004cb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	3354      	adds	r3, #84	; 0x54
 8005a40:	2260      	movs	r2, #96	; 0x60
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 feca 	bl	80077de <memset>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <prvInitialiseNewTask+0x144>)
 8005a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <prvInitialiseNewTask+0x148>)
 8005a54:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <prvInitialiseNewTask+0x14c>)
 8005a5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	69b8      	ldr	r0, [r7, #24]
 8005a62:	f001 f96b 	bl	8006d3c <pxPortInitialiseStack>
 8005a66:	4602      	mov	r2, r0
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a78:	bf00      	nop
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	0800bed0 	.word	0x0800bed0
 8005a84:	0800bef0 	.word	0x0800bef0
 8005a88:	0800beb0 	.word	0x0800beb0

08005a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a94:	f001 fa62 	bl	8006f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aaa:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d110      	bne.n	8005ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ab8:	f000 fc3c 	bl	8006334 <prvInitialiseTaskLists>
 8005abc:	e00d      	b.n	8005ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005abe:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <prvAddNewTaskToReadyList+0xcc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ac6:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d802      	bhi.n	8005ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ada:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <prvAddNewTaskToReadyList+0xd0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <prvAddNewTaskToReadyList+0xd0>)
 8005ae2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ae4:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <prvAddNewTaskToReadyList+0xd0>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <prvAddNewTaskToReadyList+0xd4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d903      	bls.n	8005b00 <prvAddNewTaskToReadyList+0x74>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <prvAddNewTaskToReadyList+0xd4>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <prvAddNewTaskToReadyList+0xd8>)
 8005b0e:	441a      	add	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7ff f8d7 	bl	8004cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b1c:	f001 fa52 	bl	8006fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <prvAddNewTaskToReadyList+0xcc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d207      	bcs.n	8005b46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <prvAddNewTaskToReadyList+0xdc>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20001000 	.word	0x20001000
 8005b54:	20000b2c 	.word	0x20000b2c
 8005b58:	2000100c 	.word	0x2000100c
 8005b5c:	2000101c 	.word	0x2000101c
 8005b60:	20001008 	.word	0x20001008
 8005b64:	20000b30 	.word	0x20000b30
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d019      	beq.n	8005bb2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <vTaskDelay+0x64>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <vTaskDelay+0x34>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	b672      	cpsid	i
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	b662      	cpsie	i
 8005b9a:	60bb      	str	r3, [r7, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005ba0:	f000 f88e 	bl	8005cc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fd18 	bl	80065dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bac:	f000 f896 	bl	8005cdc <xTaskResumeAll>
 8005bb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d107      	bne.n	8005bc8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <vTaskDelay+0x68>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20001028 	.word	0x20001028
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005be6:	463a      	mov	r2, r7
 8005be8:	1d39      	adds	r1, r7, #4
 8005bea:	f107 0308 	add.w	r3, r7, #8
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff f80a 	bl	8004c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	9202      	str	r2, [sp, #8]
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	2300      	movs	r3, #0
 8005c04:	460a      	mov	r2, r1
 8005c06:	4926      	ldr	r1, [pc, #152]	; (8005ca0 <vTaskStartScheduler+0xc8>)
 8005c08:	4826      	ldr	r0, [pc, #152]	; (8005ca4 <vTaskStartScheduler+0xcc>)
 8005c0a:	f7ff fdef 	bl	80057ec <xTaskCreateStatic>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <vTaskStartScheduler+0xd0>)
 8005c12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <vTaskStartScheduler+0xd0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e001      	b.n	8005c26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d102      	bne.n	8005c32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c2c:	f000 fd2a 	bl	8006684 <xTimerCreateTimerTask>
 8005c30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d11d      	bne.n	8005c74 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	b672      	cpsid	i
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	b662      	cpsie	i
 8005c4c:	613b      	str	r3, [r7, #16]
}
 8005c4e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c50:	4b16      	ldr	r3, [pc, #88]	; (8005cac <vTaskStartScheduler+0xd4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3354      	adds	r3, #84	; 0x54
 8005c56:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <vTaskStartScheduler+0xd8>)
 8005c58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <vTaskStartScheduler+0xdc>)
 8005c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <vTaskStartScheduler+0xe0>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c68:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <vTaskStartScheduler+0xe4>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c6e:	f001 f8f7 	bl	8006e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c72:	e010      	b.n	8005c96 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7a:	d10c      	bne.n	8005c96 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	b672      	cpsid	i
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	b662      	cpsie	i
 8005c90:	60fb      	str	r3, [r7, #12]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <vTaskStartScheduler+0xbc>
}
 8005c96:	bf00      	nop
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	0800be14 	.word	0x0800be14
 8005ca4:	08006305 	.word	0x08006305
 8005ca8:	20001024 	.word	0x20001024
 8005cac:	20000b2c 	.word	0x20000b2c
 8005cb0:	20000010 	.word	0x20000010
 8005cb4:	20001020 	.word	0x20001020
 8005cb8:	2000100c 	.word	0x2000100c
 8005cbc:	20001004 	.word	0x20001004

08005cc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <vTaskSuspendAll+0x18>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	4a03      	ldr	r2, [pc, #12]	; (8005cd8 <vTaskSuspendAll+0x18>)
 8005ccc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005cce:	bf00      	nop
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	20001028 	.word	0x20001028

08005cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cea:	4b43      	ldr	r3, [pc, #268]	; (8005df8 <xTaskResumeAll+0x11c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10c      	bne.n	8005d0c <xTaskResumeAll+0x30>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	b672      	cpsid	i
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	b662      	cpsie	i
 8005d06:	603b      	str	r3, [r7, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d0c:	f001 f926 	bl	8006f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d10:	4b39      	ldr	r3, [pc, #228]	; (8005df8 <xTaskResumeAll+0x11c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	4a38      	ldr	r2, [pc, #224]	; (8005df8 <xTaskResumeAll+0x11c>)
 8005d18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d1a:	4b37      	ldr	r3, [pc, #220]	; (8005df8 <xTaskResumeAll+0x11c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d162      	bne.n	8005de8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d22:	4b36      	ldr	r3, [pc, #216]	; (8005dfc <xTaskResumeAll+0x120>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d05e      	beq.n	8005de8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d2a:	e02f      	b.n	8005d8c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2c:	4b34      	ldr	r3, [pc, #208]	; (8005e00 <xTaskResumeAll+0x124>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3318      	adds	r3, #24
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff f823 	bl	8004d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff f81e 	bl	8004d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <xTaskResumeAll+0x128>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d903      	bls.n	8005d5c <xTaskResumeAll+0x80>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	4a2a      	ldr	r2, [pc, #168]	; (8005e04 <xTaskResumeAll+0x128>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <xTaskResumeAll+0x12c>)
 8005d6a:	441a      	add	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fe ffa9 	bl	8004cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7c:	4b23      	ldr	r3, [pc, #140]	; (8005e0c <xTaskResumeAll+0x130>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005d86:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <xTaskResumeAll+0x134>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d8c:	4b1c      	ldr	r3, [pc, #112]	; (8005e00 <xTaskResumeAll+0x124>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1cb      	bne.n	8005d2c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d9a:	f000 fb6f 	bl	800647c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d9e:	4b1d      	ldr	r3, [pc, #116]	; (8005e14 <xTaskResumeAll+0x138>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d010      	beq.n	8005dcc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005daa:	f000 f847 	bl	8005e3c <xTaskIncrementTick>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005db4:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <xTaskResumeAll+0x134>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f1      	bne.n	8005daa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <xTaskResumeAll+0x138>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <xTaskResumeAll+0x134>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <xTaskResumeAll+0x13c>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005de8:	f001 f8ec 	bl	8006fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8005dec:	68bb      	ldr	r3, [r7, #8]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20001028 	.word	0x20001028
 8005dfc:	20001000 	.word	0x20001000
 8005e00:	20000fc0 	.word	0x20000fc0
 8005e04:	20001008 	.word	0x20001008
 8005e08:	20000b30 	.word	0x20000b30
 8005e0c:	20000b2c 	.word	0x20000b2c
 8005e10:	20001014 	.word	0x20001014
 8005e14:	20001010 	.word	0x20001010
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <xTaskGetTickCount+0x1c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e28:	687b      	ldr	r3, [r7, #4]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20001004 	.word	0x20001004

08005e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e46:	4b50      	ldr	r3, [pc, #320]	; (8005f88 <xTaskIncrementTick+0x14c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 808b 	bne.w	8005f66 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e50:	4b4e      	ldr	r3, [pc, #312]	; (8005f8c <xTaskIncrementTick+0x150>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e58:	4a4c      	ldr	r2, [pc, #304]	; (8005f8c <xTaskIncrementTick+0x150>)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d122      	bne.n	8005eaa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e64:	4b4a      	ldr	r3, [pc, #296]	; (8005f90 <xTaskIncrementTick+0x154>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	b672      	cpsid	i
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	b662      	cpsie	i
 8005e82:	603b      	str	r3, [r7, #0]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <xTaskIncrementTick+0x4a>
 8005e88:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <xTaskIncrementTick+0x154>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	4b41      	ldr	r3, [pc, #260]	; (8005f94 <xTaskIncrementTick+0x158>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a3f      	ldr	r2, [pc, #252]	; (8005f90 <xTaskIncrementTick+0x154>)
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4a3f      	ldr	r2, [pc, #252]	; (8005f94 <xTaskIncrementTick+0x158>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4b3e      	ldr	r3, [pc, #248]	; (8005f98 <xTaskIncrementTick+0x15c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	4a3d      	ldr	r2, [pc, #244]	; (8005f98 <xTaskIncrementTick+0x15c>)
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	f000 fae9 	bl	800647c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eaa:	4b3c      	ldr	r3, [pc, #240]	; (8005f9c <xTaskIncrementTick+0x160>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d349      	bcc.n	8005f48 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb4:	4b36      	ldr	r3, [pc, #216]	; (8005f90 <xTaskIncrementTick+0x154>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebe:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <xTaskIncrementTick+0x160>)
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec4:	601a      	str	r2, [r3, #0]
					break;
 8005ec6:	e03f      	b.n	8005f48 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec8:	4b31      	ldr	r3, [pc, #196]	; (8005f90 <xTaskIncrementTick+0x154>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d203      	bcs.n	8005ee8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ee0:	4a2e      	ldr	r2, [pc, #184]	; (8005f9c <xTaskIncrementTick+0x160>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ee6:	e02f      	b.n	8005f48 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe ff49 	bl	8004d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3318      	adds	r3, #24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe ff40 	bl	8004d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f08:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <xTaskIncrementTick+0x164>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d903      	bls.n	8005f18 <xTaskIncrementTick+0xdc>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	4a22      	ldr	r2, [pc, #136]	; (8005fa0 <xTaskIncrementTick+0x164>)
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <xTaskIncrementTick+0x168>)
 8005f26:	441a      	add	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f7fe fecb 	bl	8004cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <xTaskIncrementTick+0x16c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d3b8      	bcc.n	8005eb4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f46:	e7b5      	b.n	8005eb4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f48:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <xTaskIncrementTick+0x16c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4e:	4915      	ldr	r1, [pc, #84]	; (8005fa4 <xTaskIncrementTick+0x168>)
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d907      	bls.n	8005f70 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	e004      	b.n	8005f70 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f66:	4b11      	ldr	r3, [pc, #68]	; (8005fac <xTaskIncrementTick+0x170>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	4a0f      	ldr	r2, [pc, #60]	; (8005fac <xTaskIncrementTick+0x170>)
 8005f6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <xTaskIncrementTick+0x174>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f7c:	697b      	ldr	r3, [r7, #20]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20001028 	.word	0x20001028
 8005f8c:	20001004 	.word	0x20001004
 8005f90:	20000fb8 	.word	0x20000fb8
 8005f94:	20000fbc 	.word	0x20000fbc
 8005f98:	20001018 	.word	0x20001018
 8005f9c:	20001020 	.word	0x20001020
 8005fa0:	20001008 	.word	0x20001008
 8005fa4:	20000b30 	.word	0x20000b30
 8005fa8:	20000b2c 	.word	0x20000b2c
 8005fac:	20001010 	.word	0x20001010
 8005fb0:	20001014 	.word	0x20001014

08005fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fba:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <vTaskSwitchContext+0xb4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fc2:	4b2a      	ldr	r3, [pc, #168]	; (800606c <vTaskSwitchContext+0xb8>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fc8:	e048      	b.n	800605c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005fca:	4b28      	ldr	r3, [pc, #160]	; (800606c <vTaskSwitchContext+0xb8>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd0:	4b27      	ldr	r3, [pc, #156]	; (8006070 <vTaskSwitchContext+0xbc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e012      	b.n	8005ffe <vTaskSwitchContext+0x4a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10c      	bne.n	8005ff8 <vTaskSwitchContext+0x44>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	b672      	cpsid	i
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	b662      	cpsie	i
 8005ff2:	607b      	str	r3, [r7, #4]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <vTaskSwitchContext+0x42>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	491d      	ldr	r1, [pc, #116]	; (8006074 <vTaskSwitchContext+0xc0>)
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0e2      	beq.n	8005fd8 <vTaskSwitchContext+0x24>
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a15      	ldr	r2, [pc, #84]	; (8006074 <vTaskSwitchContext+0xc0>)
 800601e:	4413      	add	r3, r2
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	605a      	str	r2, [r3, #4]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3308      	adds	r3, #8
 8006034:	429a      	cmp	r2, r3
 8006036:	d104      	bne.n	8006042 <vTaskSwitchContext+0x8e>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4a0b      	ldr	r2, [pc, #44]	; (8006078 <vTaskSwitchContext+0xc4>)
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <vTaskSwitchContext+0xbc>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <vTaskSwitchContext+0xc4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3354      	adds	r3, #84	; 0x54
 8006058:	4a08      	ldr	r2, [pc, #32]	; (800607c <vTaskSwitchContext+0xc8>)
 800605a:	6013      	str	r3, [r2, #0]
}
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20001028 	.word	0x20001028
 800606c:	20001014 	.word	0x20001014
 8006070:	20001008 	.word	0x20001008
 8006074:	20000b30 	.word	0x20000b30
 8006078:	20000b2c 	.word	0x20000b2c
 800607c:	20000010 	.word	0x20000010

08006080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	b672      	cpsid	i
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	b662      	cpsie	i
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <vTaskPlaceOnEventList+0x48>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3318      	adds	r3, #24
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fe fe2d 	bl	8004d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060b8:	2101      	movs	r1, #1
 80060ba:	6838      	ldr	r0, [r7, #0]
 80060bc:	f000 fa8e 	bl	80065dc <prvAddCurrentTaskToDelayedList>
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20000b2c 	.word	0x20000b2c

080060cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10c      	bne.n	80060f8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	b672      	cpsid	i
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	b662      	cpsie	i
 80060f2:	617b      	str	r3, [r7, #20]
}
 80060f4:	bf00      	nop
 80060f6:	e7fe      	b.n	80060f6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <vTaskPlaceOnEventListRestricted+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3318      	adds	r3, #24
 80060fe:	4619      	mov	r1, r3
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7fe fde2 	bl	8004cca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800610c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006110:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68b8      	ldr	r0, [r7, #8]
 8006116:	f000 fa61 	bl	80065dc <prvAddCurrentTaskToDelayedList>
	}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000b2c 	.word	0x20000b2c

08006128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10c      	bne.n	8006158 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	b672      	cpsid	i
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	b662      	cpsie	i
 8006152:	60fb      	str	r3, [r7, #12]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	3318      	adds	r3, #24
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fe11 	bl	8004d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006162:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <xTaskRemoveFromEventList+0xb4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11d      	bne.n	80061a6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fe08 	bl	8004d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <xTaskRemoveFromEventList+0xb8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d903      	bls.n	8006188 <xTaskRemoveFromEventList+0x60>
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <xTaskRemoveFromEventList+0xb8>)
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <xTaskRemoveFromEventList+0xbc>)
 8006196:	441a      	add	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fe fd93 	bl	8004cca <vListInsertEnd>
 80061a4:	e005      	b.n	80061b2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3318      	adds	r3, #24
 80061aa:	4619      	mov	r1, r3
 80061ac:	480e      	ldr	r0, [pc, #56]	; (80061e8 <xTaskRemoveFromEventList+0xc0>)
 80061ae:	f7fe fd8c 	bl	8004cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <xTaskRemoveFromEventList+0xc4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d905      	bls.n	80061cc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <xTaskRemoveFromEventList+0xc8>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e001      	b.n	80061d0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20001028 	.word	0x20001028
 80061e0:	20001008 	.word	0x20001008
 80061e4:	20000b30 	.word	0x20000b30
 80061e8:	20000fc0 	.word	0x20000fc0
 80061ec:	20000b2c 	.word	0x20000b2c
 80061f0:	20001014 	.word	0x20001014

080061f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <vTaskInternalSetTimeOutState+0x24>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <vTaskInternalSetTimeOutState+0x28>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20001018 	.word	0x20001018
 800621c:	20001004 	.word	0x20001004

08006220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10c      	bne.n	800624a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	b672      	cpsid	i
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	b662      	cpsie	i
 8006244:	613b      	str	r3, [r7, #16]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10c      	bne.n	800626a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	b672      	cpsid	i
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	b662      	cpsie	i
 8006264:	60fb      	str	r3, [r7, #12]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800626a:	f000 fe77 	bl	8006f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800626e:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <xTaskCheckForTimeOut+0xc4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006286:	d102      	bne.n	800628e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	e023      	b.n	80062d6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <xTaskCheckForTimeOut+0xc8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d007      	beq.n	80062aa <xTaskCheckForTimeOut+0x8a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e015      	b.n	80062d6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d20b      	bcs.n	80062cc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad2      	subs	r2, r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ff97 	bl	80061f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	e004      	b.n	80062d6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062d2:	2301      	movs	r3, #1
 80062d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062d6:	f000 fe75 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 80062da:	69fb      	ldr	r3, [r7, #28]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20001004 	.word	0x20001004
 80062e8:	20001018 	.word	0x20001018

080062ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062f0:	4b03      	ldr	r3, [pc, #12]	; (8006300 <vTaskMissedYield+0x14>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	20001014 	.word	0x20001014

08006304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800630c:	f000 f852 	bl	80063b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <prvIdleTask+0x28>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d9f9      	bls.n	800630c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <prvIdleTask+0x2c>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006328:	e7f0      	b.n	800630c <prvIdleTask+0x8>
 800632a:	bf00      	nop
 800632c:	20000b30 	.word	0x20000b30
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	e00c      	b.n	800635a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <prvInitialiseTaskLists+0x60>)
 800634c:	4413      	add	r3, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fc8e 	bl	8004c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3301      	adds	r3, #1
 8006358:	607b      	str	r3, [r7, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b37      	cmp	r3, #55	; 0x37
 800635e:	d9ef      	bls.n	8006340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006360:	480d      	ldr	r0, [pc, #52]	; (8006398 <prvInitialiseTaskLists+0x64>)
 8006362:	f7fe fc85 	bl	8004c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006366:	480d      	ldr	r0, [pc, #52]	; (800639c <prvInitialiseTaskLists+0x68>)
 8006368:	f7fe fc82 	bl	8004c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800636c:	480c      	ldr	r0, [pc, #48]	; (80063a0 <prvInitialiseTaskLists+0x6c>)
 800636e:	f7fe fc7f 	bl	8004c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006372:	480c      	ldr	r0, [pc, #48]	; (80063a4 <prvInitialiseTaskLists+0x70>)
 8006374:	f7fe fc7c 	bl	8004c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006378:	480b      	ldr	r0, [pc, #44]	; (80063a8 <prvInitialiseTaskLists+0x74>)
 800637a:	f7fe fc79 	bl	8004c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <prvInitialiseTaskLists+0x78>)
 8006380:	4a05      	ldr	r2, [pc, #20]	; (8006398 <prvInitialiseTaskLists+0x64>)
 8006382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006384:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <prvInitialiseTaskLists+0x7c>)
 8006386:	4a05      	ldr	r2, [pc, #20]	; (800639c <prvInitialiseTaskLists+0x68>)
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000b30 	.word	0x20000b30
 8006398:	20000f90 	.word	0x20000f90
 800639c:	20000fa4 	.word	0x20000fa4
 80063a0:	20000fc0 	.word	0x20000fc0
 80063a4:	20000fd4 	.word	0x20000fd4
 80063a8:	20000fec 	.word	0x20000fec
 80063ac:	20000fb8 	.word	0x20000fb8
 80063b0:	20000fbc 	.word	0x20000fbc

080063b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ba:	e019      	b.n	80063f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063bc:	f000 fdce 	bl	8006f5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c0:	4b10      	ldr	r3, [pc, #64]	; (8006404 <prvCheckTasksWaitingTermination+0x50>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fcd9 	bl	8004d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063d2:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <prvCheckTasksWaitingTermination+0x54>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	4a0b      	ldr	r2, [pc, #44]	; (8006408 <prvCheckTasksWaitingTermination+0x54>)
 80063da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <prvCheckTasksWaitingTermination+0x58>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	4a0a      	ldr	r2, [pc, #40]	; (800640c <prvCheckTasksWaitingTermination+0x58>)
 80063e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063e6:	f000 fded 	bl	8006fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f810 	bl	8006410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f0:	4b06      	ldr	r3, [pc, #24]	; (800640c <prvCheckTasksWaitingTermination+0x58>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e1      	bne.n	80063bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000fd4 	.word	0x20000fd4
 8006408:	20001000 	.word	0x20001000
 800640c:	20000fe8 	.word	0x20000fe8

08006410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3354      	adds	r3, #84	; 0x54
 800641c:	4618      	mov	r0, r3
 800641e:	f002 f8d1 	bl	80085c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006428:	2b00      	cmp	r3, #0
 800642a:	d108      	bne.n	800643e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	4618      	mov	r0, r3
 8006432:	f000 ff89 	bl	8007348 <vPortFree>
				vPortFree( pxTCB );
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 ff86 	bl	8007348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800643c:	e01a      	b.n	8006474 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006444:	2b01      	cmp	r3, #1
 8006446:	d103      	bne.n	8006450 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ff7d 	bl	8007348 <vPortFree>
	}
 800644e:	e011      	b.n	8006474 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006456:	2b02      	cmp	r3, #2
 8006458:	d00c      	beq.n	8006474 <prvDeleteTCB+0x64>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	b672      	cpsid	i
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	b662      	cpsie	i
 800646e:	60fb      	str	r3, [r7, #12]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <prvDeleteTCB+0x62>
	}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <prvResetNextTaskUnblockTime+0x38>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <prvResetNextTaskUnblockTime+0x3c>)
 800648e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006494:	e008      	b.n	80064a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <prvResetNextTaskUnblockTime+0x38>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <prvResetNextTaskUnblockTime+0x3c>)
 80064a6:	6013      	str	r3, [r2, #0]
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	20000fb8 	.word	0x20000fb8
 80064b8:	20001020 	.word	0x20001020

080064bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <xTaskGetSchedulerState+0x34>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064ca:	2301      	movs	r3, #1
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	e008      	b.n	80064e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d0:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <xTaskGetSchedulerState+0x38>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064d8:	2302      	movs	r3, #2
 80064da:	607b      	str	r3, [r7, #4]
 80064dc:	e001      	b.n	80064e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064e2:	687b      	ldr	r3, [r7, #4]
	}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	2000100c 	.word	0x2000100c
 80064f4:	20001028 	.word	0x20001028

080064f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d05a      	beq.n	80065c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800650e:	4b30      	ldr	r3, [pc, #192]	; (80065d0 <xTaskPriorityDisinherit+0xd8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	429a      	cmp	r2, r3
 8006516:	d00c      	beq.n	8006532 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	b672      	cpsid	i
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	b662      	cpsie	i
 800652c:	60fb      	str	r3, [r7, #12]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	b672      	cpsid	i
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	b662      	cpsie	i
 800654e:	60bb      	str	r3, [r7, #8]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006558:	1e5a      	subs	r2, r3, #1
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	429a      	cmp	r2, r3
 8006568:	d02c      	beq.n	80065c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656e:	2b00      	cmp	r3, #0
 8006570:	d128      	bne.n	80065c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	3304      	adds	r3, #4
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fc04 	bl	8004d84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <xTaskPriorityDisinherit+0xdc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d903      	bls.n	80065a4 <xTaskPriorityDisinherit+0xac>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a0c      	ldr	r2, [pc, #48]	; (80065d4 <xTaskPriorityDisinherit+0xdc>)
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <xTaskPriorityDisinherit+0xe0>)
 80065b2:	441a      	add	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f7fe fb85 	bl	8004cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065c0:	2301      	movs	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065c4:	697b      	ldr	r3, [r7, #20]
	}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000b2c 	.word	0x20000b2c
 80065d4:	20001008 	.word	0x20001008
 80065d8:	20000b30 	.word	0x20000b30

080065dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065e6:	4b21      	ldr	r3, [pc, #132]	; (800666c <prvAddCurrentTaskToDelayedList+0x90>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ec:	4b20      	ldr	r3, [pc, #128]	; (8006670 <prvAddCurrentTaskToDelayedList+0x94>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3304      	adds	r3, #4
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe fbc6 	bl	8004d84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fe:	d10a      	bne.n	8006616 <prvAddCurrentTaskToDelayedList+0x3a>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006606:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <prvAddCurrentTaskToDelayedList+0x94>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3304      	adds	r3, #4
 800660c:	4619      	mov	r1, r3
 800660e:	4819      	ldr	r0, [pc, #100]	; (8006674 <prvAddCurrentTaskToDelayedList+0x98>)
 8006610:	f7fe fb5b 	bl	8004cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006614:	e026      	b.n	8006664 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800661e:	4b14      	ldr	r3, [pc, #80]	; (8006670 <prvAddCurrentTaskToDelayedList+0x94>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	429a      	cmp	r2, r3
 800662c:	d209      	bcs.n	8006642 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <prvAddCurrentTaskToDelayedList+0x94>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fe fb69 	bl	8004d12 <vListInsert>
}
 8006640:	e010      	b.n	8006664 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006642:	4b0e      	ldr	r3, [pc, #56]	; (800667c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <prvAddCurrentTaskToDelayedList+0x94>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3304      	adds	r3, #4
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f7fe fb5f 	bl	8004d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	429a      	cmp	r2, r3
 800665c:	d202      	bcs.n	8006664 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800665e:	4a08      	ldr	r2, [pc, #32]	; (8006680 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6013      	str	r3, [r2, #0]
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20001004 	.word	0x20001004
 8006670:	20000b2c 	.word	0x20000b2c
 8006674:	20000fec 	.word	0x20000fec
 8006678:	20000fbc 	.word	0x20000fbc
 800667c:	20000fb8 	.word	0x20000fb8
 8006680:	20001020 	.word	0x20001020

08006684 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	; 0x28
 8006688:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800668e:	f000 fb15 	bl	8006cbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <xTimerCreateTimerTask+0x84>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d021      	beq.n	80066de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066a2:	1d3a      	adds	r2, r7, #4
 80066a4:	f107 0108 	add.w	r1, r7, #8
 80066a8:	f107 030c 	add.w	r3, r7, #12
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fac5 	bl	8004c3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	9202      	str	r2, [sp, #8]
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	2302      	movs	r3, #2
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	2300      	movs	r3, #0
 80066c2:	460a      	mov	r2, r1
 80066c4:	4911      	ldr	r1, [pc, #68]	; (800670c <xTimerCreateTimerTask+0x88>)
 80066c6:	4812      	ldr	r0, [pc, #72]	; (8006710 <xTimerCreateTimerTask+0x8c>)
 80066c8:	f7ff f890 	bl	80057ec <xTaskCreateStatic>
 80066cc:	4603      	mov	r3, r0
 80066ce:	4a11      	ldr	r2, [pc, #68]	; (8006714 <xTimerCreateTimerTask+0x90>)
 80066d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066d2:	4b10      	ldr	r3, [pc, #64]	; (8006714 <xTimerCreateTimerTask+0x90>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10c      	bne.n	80066fe <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	b672      	cpsid	i
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	b662      	cpsie	i
 80066f8:	613b      	str	r3, [r7, #16]
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80066fe:	697b      	ldr	r3, [r7, #20]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	2000105c 	.word	0x2000105c
 800670c:	0800be1c 	.word	0x0800be1c
 8006710:	08006855 	.word	0x08006855
 8006714:	20001060 	.word	0x20001060

08006718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006726:	2300      	movs	r3, #0
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10c      	bne.n	800674a <xTimerGenericCommand+0x32>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	b672      	cpsid	i
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	b662      	cpsie	i
 8006744:	623b      	str	r3, [r7, #32]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800674a:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <xTimerGenericCommand+0x9c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d02a      	beq.n	80067a8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b05      	cmp	r3, #5
 8006762:	dc18      	bgt.n	8006796 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006764:	f7ff feaa 	bl	80064bc <xTaskGetSchedulerState>
 8006768:	4603      	mov	r3, r0
 800676a:	2b02      	cmp	r3, #2
 800676c:	d109      	bne.n	8006782 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800676e:	4b11      	ldr	r3, [pc, #68]	; (80067b4 <xTimerGenericCommand+0x9c>)
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	f107 0110 	add.w	r1, r7, #16
 8006776:	2300      	movs	r3, #0
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	f7fe fc3d 	bl	8004ff8 <xQueueGenericSend>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24
 8006780:	e012      	b.n	80067a8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006782:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <xTimerGenericCommand+0x9c>)
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	f107 0110 	add.w	r1, r7, #16
 800678a:	2300      	movs	r3, #0
 800678c:	2200      	movs	r2, #0
 800678e:	f7fe fc33 	bl	8004ff8 <xQueueGenericSend>
 8006792:	6278      	str	r0, [r7, #36]	; 0x24
 8006794:	e008      	b.n	80067a8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <xTimerGenericCommand+0x9c>)
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	f107 0110 	add.w	r1, r7, #16
 800679e:	2300      	movs	r3, #0
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	f7fe fd2f 	bl	8005204 <xQueueGenericSendFromISR>
 80067a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3728      	adds	r7, #40	; 0x28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	2000105c 	.word	0x2000105c

080067b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c2:	4b23      	ldr	r3, [pc, #140]	; (8006850 <prvProcessExpiredTimer+0x98>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fad7 	bl	8004d84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d024      	beq.n	800682e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	699a      	ldr	r2, [r3, #24]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	18d1      	adds	r1, r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	6978      	ldr	r0, [r7, #20]
 80067f2:	f000 f8d3 	bl	800699c <prvInsertTimerInActiveList>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d021      	beq.n	8006840 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067fc:	2300      	movs	r3, #0
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2300      	movs	r3, #0
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	2100      	movs	r1, #0
 8006806:	6978      	ldr	r0, [r7, #20]
 8006808:	f7ff ff86 	bl	8006718 <xTimerGenericCommand>
 800680c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d115      	bne.n	8006840 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	b672      	cpsid	i
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	b662      	cpsie	i
 8006828:	60fb      	str	r3, [r7, #12]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	b2da      	uxtb	r2, r3
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	6978      	ldr	r0, [r7, #20]
 8006846:	4798      	blx	r3
}
 8006848:	bf00      	nop
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20001054 	.word	0x20001054

08006854 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800685c:	f107 0308 	add.w	r3, r7, #8
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f857 	bl	8006914 <prvGetNextExpireTime>
 8006866:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4619      	mov	r1, r3
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f803 	bl	8006878 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006872:	f000 f8d5 	bl	8006a20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006876:	e7f1      	b.n	800685c <prvTimerTask+0x8>

08006878 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006882:	f7ff fa1d 	bl	8005cc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006886:	f107 0308 	add.w	r3, r7, #8
 800688a:	4618      	mov	r0, r3
 800688c:	f000 f866 	bl	800695c <prvSampleTimeNow>
 8006890:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d130      	bne.n	80068fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <prvProcessTimerOrBlockTask+0x3c>
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d806      	bhi.n	80068b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068a6:	f7ff fa19 	bl	8005cdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ff83 	bl	80067b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068b2:	e024      	b.n	80068fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d008      	beq.n	80068cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <prvProcessTimerOrBlockTask+0x90>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <prvProcessTimerOrBlockTask+0x50>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <prvProcessTimerOrBlockTask+0x52>
 80068c8:	2300      	movs	r3, #0
 80068ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <prvProcessTimerOrBlockTask+0x94>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	4619      	mov	r1, r3
 80068da:	f7fe ff53 	bl	8005784 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068de:	f7ff f9fd 	bl	8005cdc <xTaskResumeAll>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068e8:	4b09      	ldr	r3, [pc, #36]	; (8006910 <prvProcessTimerOrBlockTask+0x98>)
 80068ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	f3bf 8f6f 	isb	sy
}
 80068f8:	e001      	b.n	80068fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068fa:	f7ff f9ef 	bl	8005cdc <xTaskResumeAll>
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20001058 	.word	0x20001058
 800690c:	2000105c 	.word	0x2000105c
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800691c:	4b0e      	ldr	r3, [pc, #56]	; (8006958 <prvGetNextExpireTime+0x44>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <prvGetNextExpireTime+0x16>
 8006926:	2201      	movs	r2, #1
 8006928:	e000      	b.n	800692c <prvGetNextExpireTime+0x18>
 800692a:	2200      	movs	r2, #0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d105      	bne.n	8006944 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006938:	4b07      	ldr	r3, [pc, #28]	; (8006958 <prvGetNextExpireTime+0x44>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e001      	b.n	8006948 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006948:	68fb      	ldr	r3, [r7, #12]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20001054 	.word	0x20001054

0800695c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006964:	f7ff fa5a 	bl	8005e1c <xTaskGetTickCount>
 8006968:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <prvSampleTimeNow+0x3c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d205      	bcs.n	8006980 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006974:	f000 f93c 	bl	8006bf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e002      	b.n	8006986 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006986:	4a04      	ldr	r2, [pc, #16]	; (8006998 <prvSampleTimeNow+0x3c>)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20001064 	.word	0x20001064

0800699c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d812      	bhi.n	80069e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	1ad2      	subs	r2, r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e01b      	b.n	8006a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <prvInsertTimerInActiveList+0x7c>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fe f996 	bl	8004d12 <vListInsert>
 80069e6:	e012      	b.n	8006a0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d206      	bcs.n	80069fe <prvInsertTimerInActiveList+0x62>
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e007      	b.n	8006a0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <prvInsertTimerInActiveList+0x80>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fe f982 	bl	8004d12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a0e:	697b      	ldr	r3, [r7, #20]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20001058 	.word	0x20001058
 8006a1c:	20001054 	.word	0x20001054

08006a20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08e      	sub	sp, #56	; 0x38
 8006a24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a26:	e0d0      	b.n	8006bca <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da1a      	bge.n	8006a64 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a2e:	1d3b      	adds	r3, r7, #4
 8006a30:	3304      	adds	r3, #4
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10c      	bne.n	8006a54 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	b672      	cpsid	i
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	b662      	cpsie	i
 8006a4e:	61fb      	str	r3, [r7, #28]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5a:	6850      	ldr	r0, [r2, #4]
 8006a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5e:	6892      	ldr	r2, [r2, #8]
 8006a60:	4611      	mov	r1, r2
 8006a62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f2c0 80ae 	blt.w	8006bc8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe f981 	bl	8004d84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a82:	463b      	mov	r3, r7
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff ff69 	bl	800695c <prvSampleTimeNow>
 8006a8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b09      	cmp	r3, #9
 8006a90:	f200 809b 	bhi.w	8006bca <prvProcessReceivedCommands+0x1aa>
 8006a94:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <prvProcessReceivedCommands+0x7c>)
 8006a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9a:	bf00      	nop
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006ac5 	.word	0x08006ac5
 8006aa8:	08006b3d 	.word	0x08006b3d
 8006aac:	08006b51 	.word	0x08006b51
 8006ab0:	08006b9f 	.word	0x08006b9f
 8006ab4:	08006ac5 	.word	0x08006ac5
 8006ab8:	08006ac5 	.word	0x08006ac5
 8006abc:	08006b3d 	.word	0x08006b3d
 8006ac0:	08006b51 	.word	0x08006b51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	18d1      	adds	r1, r2, r3
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae4:	f7ff ff5a 	bl	800699c <prvInsertTimerInActiveList>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d06d      	beq.n	8006bca <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d062      	beq.n	8006bca <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	441a      	add	r2, r3
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2300      	movs	r3, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b16:	f7ff fdff 	bl	8006718 <xTimerGenericCommand>
 8006b1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d153      	bne.n	8006bca <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	b672      	cpsid	i
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	b662      	cpsie	i
 8006b36:	61bb      	str	r3, [r7, #24]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b4e:	e03c      	b.n	8006bca <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10c      	bne.n	8006b8a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	b672      	cpsid	i
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	b662      	cpsie	i
 8006b84:	617b      	str	r3, [r7, #20]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	18d1      	adds	r1, r2, r3
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b98:	f7ff ff00 	bl	800699c <prvInsertTimerInActiveList>
					break;
 8006b9c:	e015      	b.n	8006bca <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bae:	f000 fbcb 	bl	8007348 <vPortFree>
 8006bb2:	e00a      	b.n	8006bca <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bc6:	e000      	b.n	8006bca <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006bc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bca:	4b08      	ldr	r3, [pc, #32]	; (8006bec <prvProcessReceivedCommands+0x1cc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	1d39      	adds	r1, r7, #4
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fbb6 	bl	8005344 <xQueueReceive>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f47f af24 	bne.w	8006a28 <prvProcessReceivedCommands+0x8>
	}
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	3730      	adds	r7, #48	; 0x30
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2000105c 	.word	0x2000105c

08006bf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bf6:	e04a      	b.n	8006c8e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bf8:	4b2e      	ldr	r3, [pc, #184]	; (8006cb4 <prvSwitchTimerLists+0xc4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c02:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <prvSwitchTimerLists+0xc4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe f8b7 	bl	8004d84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d030      	beq.n	8006c8e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d90e      	bls.n	8006c5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c4a:	4b1a      	ldr	r3, [pc, #104]	; (8006cb4 <prvSwitchTimerLists+0xc4>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f7fe f85c 	bl	8004d12 <vListInsert>
 8006c5a:	e018      	b.n	8006c8e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	2300      	movs	r3, #0
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	2100      	movs	r1, #0
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fd56 	bl	8006718 <xTimerGenericCommand>
 8006c6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10c      	bne.n	8006c8e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	b672      	cpsid	i
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	b662      	cpsie	i
 8006c88:	603b      	str	r3, [r7, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <prvSwitchTimerLists+0xc4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1af      	bne.n	8006bf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <prvSwitchTimerLists+0xc4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <prvSwitchTimerLists+0xc8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <prvSwitchTimerLists+0xc4>)
 8006ca4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ca6:	4a04      	ldr	r2, [pc, #16]	; (8006cb8 <prvSwitchTimerLists+0xc8>)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	6013      	str	r3, [r2, #0]
}
 8006cac:	bf00      	nop
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20001054 	.word	0x20001054
 8006cb8:	20001058 	.word	0x20001058

08006cbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cc2:	f000 f94b 	bl	8006f5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cc6:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d120      	bne.n	8006d10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cce:	4814      	ldr	r0, [pc, #80]	; (8006d20 <prvCheckForValidListAndQueue+0x64>)
 8006cd0:	f7fd ffce 	bl	8004c70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cd4:	4813      	ldr	r0, [pc, #76]	; (8006d24 <prvCheckForValidListAndQueue+0x68>)
 8006cd6:	f7fd ffcb 	bl	8004c70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <prvCheckForValidListAndQueue+0x6c>)
 8006cdc:	4a10      	ldr	r2, [pc, #64]	; (8006d20 <prvCheckForValidListAndQueue+0x64>)
 8006cde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ce0:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <prvCheckForValidListAndQueue+0x70>)
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <prvCheckForValidListAndQueue+0x68>)
 8006ce4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <prvCheckForValidListAndQueue+0x74>)
 8006cec:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <prvCheckForValidListAndQueue+0x78>)
 8006cee:	2110      	movs	r1, #16
 8006cf0:	200a      	movs	r0, #10
 8006cf2:	f7fe f8db 	bl	8004eac <xQueueGenericCreateStatic>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006cfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <prvCheckForValidListAndQueue+0x60>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	490b      	ldr	r1, [pc, #44]	; (8006d38 <prvCheckForValidListAndQueue+0x7c>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fd10 	bl	8005730 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d10:	f000 f958 	bl	8006fc4 <vPortExitCritical>
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2000105c 	.word	0x2000105c
 8006d20:	2000102c 	.word	0x2000102c
 8006d24:	20001040 	.word	0x20001040
 8006d28:	20001054 	.word	0x20001054
 8006d2c:	20001058 	.word	0x20001058
 8006d30:	20001108 	.word	0x20001108
 8006d34:	20001068 	.word	0x20001068
 8006d38:	0800be24 	.word	0x0800be24

08006d3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3b04      	subs	r3, #4
 8006d4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3b04      	subs	r3, #4
 8006d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f023 0201 	bic.w	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3b04      	subs	r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d6c:	4a0c      	ldr	r2, [pc, #48]	; (8006da0 <pxPortInitialiseStack+0x64>)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3b14      	subs	r3, #20
 8006d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3b04      	subs	r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f06f 0202 	mvn.w	r2, #2
 8006d8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3b20      	subs	r3, #32
 8006d90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d92:	68fb      	ldr	r3, [r7, #12]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	08006da5 	.word	0x08006da5

08006da4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dae:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <prvTaskExitError+0x5c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db6:	d00c      	beq.n	8006dd2 <prvTaskExitError+0x2e>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	b672      	cpsid	i
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	b662      	cpsie	i
 8006dcc:	60fb      	str	r3, [r7, #12]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <prvTaskExitError+0x2c>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	b672      	cpsid	i
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	b662      	cpsie	i
 8006de6:	60bb      	str	r3, [r7, #8]
}
 8006de8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dea:	bf00      	nop
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0fc      	beq.n	8006dec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	2000000c 	.word	0x2000000c
	...

08006e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <pxCurrentTCBConst2>)
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	6808      	ldr	r0, [r1, #0]
 8006e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1a:	f380 8809 	msr	PSP, r0
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8811 	msr	BASEPRI, r0
 8006e2a:	4770      	bx	lr
 8006e2c:	f3af 8000 	nop.w

08006e30 <pxCurrentTCBConst2>:
 8006e30:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop

08006e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e38:	4808      	ldr	r0, [pc, #32]	; (8006e5c <prvPortStartFirstTask+0x24>)
 8006e3a:	6800      	ldr	r0, [r0, #0]
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f380 8808 	msr	MSP, r0
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f380 8814 	msr	CONTROL, r0
 8006e4a:	b662      	cpsie	i
 8006e4c:	b661      	cpsie	f
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	df00      	svc	0
 8006e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e5a:	bf00      	nop
 8006e5c:	e000ed08 	.word	0xe000ed08

08006e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e66:	4b37      	ldr	r3, [pc, #220]	; (8006f44 <xPortStartScheduler+0xe4>)
 8006e68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b2f      	ldr	r3, [pc, #188]	; (8006f48 <xPortStartScheduler+0xe8>)
 8006e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e8e:	4b2f      	ldr	r3, [pc, #188]	; (8006f4c <xPortStartScheduler+0xec>)
 8006e90:	2207      	movs	r2, #7
 8006e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e94:	e009      	b.n	8006eaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e96:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <xPortStartScheduler+0xec>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4a2b      	ldr	r2, [pc, #172]	; (8006f4c <xPortStartScheduler+0xec>)
 8006e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d0ef      	beq.n	8006e96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eb6:	4b25      	ldr	r3, [pc, #148]	; (8006f4c <xPortStartScheduler+0xec>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f1c3 0307 	rsb	r3, r3, #7
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d00c      	beq.n	8006edc <xPortStartScheduler+0x7c>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	b672      	cpsid	i
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	b662      	cpsie	i
 8006ed6:	60bb      	str	r3, [r7, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006edc:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <xPortStartScheduler+0xec>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <xPortStartScheduler+0xec>)
 8006ee4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ee6:	4b19      	ldr	r3, [pc, #100]	; (8006f4c <xPortStartScheduler+0xec>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eee:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <xPortStartScheduler+0xec>)
 8006ef0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006efa:	4b15      	ldr	r3, [pc, #84]	; (8006f50 <xPortStartScheduler+0xf0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a14      	ldr	r2, [pc, #80]	; (8006f50 <xPortStartScheduler+0xf0>)
 8006f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <xPortStartScheduler+0xf0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a11      	ldr	r2, [pc, #68]	; (8006f50 <xPortStartScheduler+0xf0>)
 8006f0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f12:	f000 f8dd 	bl	80070d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f16:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <xPortStartScheduler+0xf4>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f1c:	f000 f8fc 	bl	8007118 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f20:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <xPortStartScheduler+0xf8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <xPortStartScheduler+0xf8>)
 8006f26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f2c:	f7ff ff84 	bl	8006e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f30:	f7ff f840 	bl	8005fb4 <vTaskSwitchContext>
	prvTaskExitError();
 8006f34:	f7ff ff36 	bl	8006da4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	e000e400 	.word	0xe000e400
 8006f48:	20001158 	.word	0x20001158
 8006f4c:	2000115c 	.word	0x2000115c
 8006f50:	e000ed20 	.word	0xe000ed20
 8006f54:	2000000c 	.word	0x2000000c
 8006f58:	e000ef34 	.word	0xe000ef34

08006f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	b672      	cpsid	i
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	b662      	cpsie	i
 8006f76:	607b      	str	r3, [r7, #4]
}
 8006f78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f7a:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <vPortEnterCritical+0x60>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	4a0e      	ldr	r2, [pc, #56]	; (8006fbc <vPortEnterCritical+0x60>)
 8006f82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <vPortEnterCritical+0x60>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d111      	bne.n	8006fb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <vPortEnterCritical+0x64>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <vPortEnterCritical+0x54>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	b672      	cpsid	i
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	b662      	cpsie	i
 8006faa:	603b      	str	r3, [r7, #0]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <vPortEnterCritical+0x52>
	}
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000000c 	.word	0x2000000c
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <vPortExitCritical+0x54>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10c      	bne.n	8006fec <vPortExitCritical+0x28>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	b672      	cpsid	i
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	b662      	cpsie	i
 8006fe6:	607b      	str	r3, [r7, #4]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <vPortExitCritical+0x54>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	4a09      	ldr	r2, [pc, #36]	; (8007018 <vPortExitCritical+0x54>)
 8006ff4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ff6:	4b08      	ldr	r3, [pc, #32]	; (8007018 <vPortExitCritical+0x54>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d105      	bne.n	800700a <vPortExitCritical+0x46>
 8006ffe:	2300      	movs	r3, #0
 8007000:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f383 8811 	msr	BASEPRI, r3
}
 8007008:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	2000000c 	.word	0x2000000c
 800701c:	00000000 	.word	0x00000000

08007020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007020:	f3ef 8009 	mrs	r0, PSP
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4b15      	ldr	r3, [pc, #84]	; (8007080 <pxCurrentTCBConst>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f01e 0f10 	tst.w	lr, #16
 8007030:	bf08      	it	eq
 8007032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007044:	b672      	cpsid	i
 8007046:	f380 8811 	msr	BASEPRI, r0
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	b662      	cpsie	i
 8007054:	f7fe ffae 	bl	8005fb4 <vTaskSwitchContext>
 8007058:	f04f 0000 	mov.w	r0, #0
 800705c:	f380 8811 	msr	BASEPRI, r0
 8007060:	bc09      	pop	{r0, r3}
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f01e 0f10 	tst.w	lr, #16
 800706e:	bf08      	it	eq
 8007070:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007074:	f380 8809 	msr	PSP, r0
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop

08007080 <pxCurrentTCBConst>:
 8007080:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	b672      	cpsid	i
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	b662      	cpsie	i
 80070a2:	607b      	str	r3, [r7, #4]
}
 80070a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070a6:	f7fe fec9 	bl	8005e3c <xTaskIncrementTick>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <SysTick_Handler+0x44>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	2300      	movs	r3, #0
 80070ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	f383 8811 	msr	BASEPRI, r3
}
 80070c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <vPortSetupTimerInterrupt+0x34>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070da:	4b0b      	ldr	r3, [pc, #44]	; (8007108 <vPortSetupTimerInterrupt+0x38>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <vPortSetupTimerInterrupt+0x3c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <vPortSetupTimerInterrupt+0x40>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	099b      	lsrs	r3, r3, #6
 80070ec:	4a09      	ldr	r2, [pc, #36]	; (8007114 <vPortSetupTimerInterrupt+0x44>)
 80070ee:	3b01      	subs	r3, #1
 80070f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070f2:	4b04      	ldr	r3, [pc, #16]	; (8007104 <vPortSetupTimerInterrupt+0x34>)
 80070f4:	2207      	movs	r2, #7
 80070f6:	601a      	str	r2, [r3, #0]
}
 80070f8:	bf00      	nop
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	e000e010 	.word	0xe000e010
 8007108:	e000e018 	.word	0xe000e018
 800710c:	20000000 	.word	0x20000000
 8007110:	10624dd3 	.word	0x10624dd3
 8007114:	e000e014 	.word	0xe000e014

08007118 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007118:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007128 <vPortEnableVFP+0x10>
 800711c:	6801      	ldr	r1, [r0, #0]
 800711e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007122:	6001      	str	r1, [r0, #0]
 8007124:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007126:	bf00      	nop
 8007128:	e000ed88 	.word	0xe000ed88

0800712c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007132:	f3ef 8305 	mrs	r3, IPSR
 8007136:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b0f      	cmp	r3, #15
 800713c:	d916      	bls.n	800716c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800713e:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <vPortValidateInterruptPriority+0x78>)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007148:	4b17      	ldr	r3, [pc, #92]	; (80071a8 <vPortValidateInterruptPriority+0x7c>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	7afa      	ldrb	r2, [r7, #11]
 800714e:	429a      	cmp	r2, r3
 8007150:	d20c      	bcs.n	800716c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	b672      	cpsid	i
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	b662      	cpsie	i
 8007166:	607b      	str	r3, [r7, #4]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800716c:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <vPortValidateInterruptPriority+0x80>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <vPortValidateInterruptPriority+0x84>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d90c      	bls.n	8007196 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	b672      	cpsid	i
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	b662      	cpsie	i
 8007190:	603b      	str	r3, [r7, #0]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <vPortValidateInterruptPriority+0x68>
	}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	e000e3f0 	.word	0xe000e3f0
 80071a8:	20001158 	.word	0x20001158
 80071ac:	e000ed0c 	.word	0xe000ed0c
 80071b0:	2000115c 	.word	0x2000115c

080071b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	; 0x28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071c0:	f7fe fd7e 	bl	8005cc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071c4:	4b5b      	ldr	r3, [pc, #364]	; (8007334 <pvPortMalloc+0x180>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071cc:	f000 f91a 	bl	8007404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071d0:	4b59      	ldr	r3, [pc, #356]	; (8007338 <pvPortMalloc+0x184>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4013      	ands	r3, r2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 8092 	bne.w	8007302 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01f      	beq.n	8007224 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80071e4:	2208      	movs	r2, #8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4413      	add	r3, r2
 80071ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d016      	beq.n	8007224 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f023 0307 	bic.w	r3, r3, #7
 80071fc:	3308      	adds	r3, #8
 80071fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00c      	beq.n	8007224 <pvPortMalloc+0x70>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	b672      	cpsid	i
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	b662      	cpsie	i
 800721e:	617b      	str	r3, [r7, #20]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d06b      	beq.n	8007302 <pvPortMalloc+0x14e>
 800722a:	4b44      	ldr	r3, [pc, #272]	; (800733c <pvPortMalloc+0x188>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d866      	bhi.n	8007302 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007234:	4b42      	ldr	r3, [pc, #264]	; (8007340 <pvPortMalloc+0x18c>)
 8007236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007238:	4b41      	ldr	r3, [pc, #260]	; (8007340 <pvPortMalloc+0x18c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800723e:	e004      	b.n	800724a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d903      	bls.n	800725c <pvPortMalloc+0xa8>
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f1      	bne.n	8007240 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800725c:	4b35      	ldr	r3, [pc, #212]	; (8007334 <pvPortMalloc+0x180>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	429a      	cmp	r2, r3
 8007264:	d04d      	beq.n	8007302 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2208      	movs	r2, #8
 800726c:	4413      	add	r3, r2
 800726e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	2308      	movs	r3, #8
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	429a      	cmp	r2, r3
 8007286:	d921      	bls.n	80072cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4413      	add	r3, r2
 800728e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00c      	beq.n	80072b4 <pvPortMalloc+0x100>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	b672      	cpsid	i
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	b662      	cpsie	i
 80072ae:	613b      	str	r3, [r7, #16]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072c6:	69b8      	ldr	r0, [r7, #24]
 80072c8:	f000 f8fe 	bl	80074c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <pvPortMalloc+0x188>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	4a19      	ldr	r2, [pc, #100]	; (800733c <pvPortMalloc+0x188>)
 80072d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072da:	4b18      	ldr	r3, [pc, #96]	; (800733c <pvPortMalloc+0x188>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4b19      	ldr	r3, [pc, #100]	; (8007344 <pvPortMalloc+0x190>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d203      	bcs.n	80072ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072e6:	4b15      	ldr	r3, [pc, #84]	; (800733c <pvPortMalloc+0x188>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a16      	ldr	r2, [pc, #88]	; (8007344 <pvPortMalloc+0x190>)
 80072ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <pvPortMalloc+0x184>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007302:	f7fe fceb 	bl	8005cdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <pvPortMalloc+0x176>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	b672      	cpsid	i
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	b662      	cpsie	i
 8007324:	60fb      	str	r3, [r7, #12]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <pvPortMalloc+0x174>
	return pvReturn;
 800732a:	69fb      	ldr	r3, [r7, #28]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3728      	adds	r7, #40	; 0x28
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20004d68 	.word	0x20004d68
 8007338:	20004d74 	.word	0x20004d74
 800733c:	20004d6c 	.word	0x20004d6c
 8007340:	20004d60 	.word	0x20004d60
 8007344:	20004d70 	.word	0x20004d70

08007348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d04c      	beq.n	80073f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800735a:	2308      	movs	r3, #8
 800735c:	425b      	negs	r3, r3
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4413      	add	r3, r2
 8007362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	4b23      	ldr	r3, [pc, #140]	; (80073fc <vPortFree+0xb4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4013      	ands	r3, r2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10c      	bne.n	8007390 <vPortFree+0x48>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	b672      	cpsid	i
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	b662      	cpsie	i
 800738a:	60fb      	str	r3, [r7, #12]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00c      	beq.n	80073b2 <vPortFree+0x6a>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	b672      	cpsid	i
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	b662      	cpsie	i
 80073ac:	60bb      	str	r3, [r7, #8]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <vPortFree+0xb4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d019      	beq.n	80073f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d115      	bne.n	80073f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <vPortFree+0xb4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	401a      	ands	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073d8:	f7fe fc72 	bl	8005cc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <vPortFree+0xb8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	4a06      	ldr	r2, [pc, #24]	; (8007400 <vPortFree+0xb8>)
 80073e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ea:	6938      	ldr	r0, [r7, #16]
 80073ec:	f000 f86c 	bl	80074c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073f0:	f7fe fc74 	bl	8005cdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073f4:	bf00      	nop
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20004d74 	.word	0x20004d74
 8007400:	20004d6c 	.word	0x20004d6c

08007404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800740a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800740e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007410:	4b27      	ldr	r3, [pc, #156]	; (80074b0 <prvHeapInit+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1f      	ldr	r2, [pc, #124]	; (80074b0 <prvHeapInit+0xac>)
 8007434:	4413      	add	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <prvHeapInit+0xb0>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <prvHeapInit+0xb0>)
 8007444:	2200      	movs	r2, #0
 8007446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007450:	2208      	movs	r2, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <prvHeapInit+0xb4>)
 8007464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <prvHeapInit+0xb4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <prvHeapInit+0xb4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvHeapInit+0xb4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <prvHeapInit+0xb8>)
 8007492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <prvHeapInit+0xbc>)
 800749a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <prvHeapInit+0xc0>)
 800749e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20001160 	.word	0x20001160
 80074b4:	20004d60 	.word	0x20004d60
 80074b8:	20004d68 	.word	0x20004d68
 80074bc:	20004d70 	.word	0x20004d70
 80074c0:	20004d6c 	.word	0x20004d6c
 80074c4:	20004d74 	.word	0x20004d74

080074c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <prvInsertBlockIntoFreeList+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e002      	b.n	80074dc <prvInsertBlockIntoFreeList+0x14>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d8f7      	bhi.n	80074d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d108      	bne.n	800750a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d118      	bne.n	8007550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d00d      	beq.n	8007546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	441a      	add	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e008      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e003      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d002      	beq.n	8007566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20004d60 	.word	0x20004d60
 8007578:	20004d68 	.word	0x20004d68

0800757c <__errno>:
 800757c:	4b01      	ldr	r3, [pc, #4]	; (8007584 <__errno+0x8>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20000010 	.word	0x20000010

08007588 <std>:
 8007588:	2300      	movs	r3, #0
 800758a:	b510      	push	{r4, lr}
 800758c:	4604      	mov	r4, r0
 800758e:	e9c0 3300 	strd	r3, r3, [r0]
 8007592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007596:	6083      	str	r3, [r0, #8]
 8007598:	8181      	strh	r1, [r0, #12]
 800759a:	6643      	str	r3, [r0, #100]	; 0x64
 800759c:	81c2      	strh	r2, [r0, #14]
 800759e:	6183      	str	r3, [r0, #24]
 80075a0:	4619      	mov	r1, r3
 80075a2:	2208      	movs	r2, #8
 80075a4:	305c      	adds	r0, #92	; 0x5c
 80075a6:	f000 f91a 	bl	80077de <memset>
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <std+0x38>)
 80075ac:	6263      	str	r3, [r4, #36]	; 0x24
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <std+0x3c>)
 80075b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <std+0x40>)
 80075b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <std+0x44>)
 80075b8:	6224      	str	r4, [r4, #32]
 80075ba:	6323      	str	r3, [r4, #48]	; 0x30
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	080086e9 	.word	0x080086e9
 80075c4:	0800870b 	.word	0x0800870b
 80075c8:	08008743 	.word	0x08008743
 80075cc:	08008767 	.word	0x08008767

080075d0 <_cleanup_r>:
 80075d0:	4901      	ldr	r1, [pc, #4]	; (80075d8 <_cleanup_r+0x8>)
 80075d2:	f000 b8af 	b.w	8007734 <_fwalk_reent>
 80075d6:	bf00      	nop
 80075d8:	0800a171 	.word	0x0800a171

080075dc <__sfmoreglue>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	2268      	movs	r2, #104	; 0x68
 80075e0:	1e4d      	subs	r5, r1, #1
 80075e2:	4355      	muls	r5, r2
 80075e4:	460e      	mov	r6, r1
 80075e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075ea:	f000 f921 	bl	8007830 <_malloc_r>
 80075ee:	4604      	mov	r4, r0
 80075f0:	b140      	cbz	r0, 8007604 <__sfmoreglue+0x28>
 80075f2:	2100      	movs	r1, #0
 80075f4:	e9c0 1600 	strd	r1, r6, [r0]
 80075f8:	300c      	adds	r0, #12
 80075fa:	60a0      	str	r0, [r4, #8]
 80075fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007600:	f000 f8ed 	bl	80077de <memset>
 8007604:	4620      	mov	r0, r4
 8007606:	bd70      	pop	{r4, r5, r6, pc}

08007608 <__sfp_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sfp_lock_acquire+0x8>)
 800760a:	f000 b8d8 	b.w	80077be <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20004d79 	.word	0x20004d79

08007614 <__sfp_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sfp_lock_release+0x8>)
 8007616:	f000 b8d3 	b.w	80077c0 <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20004d79 	.word	0x20004d79

08007620 <__sinit_lock_acquire>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__sinit_lock_acquire+0x8>)
 8007622:	f000 b8cc 	b.w	80077be <__retarget_lock_acquire_recursive>
 8007626:	bf00      	nop
 8007628:	20004d7a 	.word	0x20004d7a

0800762c <__sinit_lock_release>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__sinit_lock_release+0x8>)
 800762e:	f000 b8c7 	b.w	80077c0 <__retarget_lock_release_recursive>
 8007632:	bf00      	nop
 8007634:	20004d7a 	.word	0x20004d7a

08007638 <__sinit>:
 8007638:	b510      	push	{r4, lr}
 800763a:	4604      	mov	r4, r0
 800763c:	f7ff fff0 	bl	8007620 <__sinit_lock_acquire>
 8007640:	69a3      	ldr	r3, [r4, #24]
 8007642:	b11b      	cbz	r3, 800764c <__sinit+0x14>
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007648:	f7ff bff0 	b.w	800762c <__sinit_lock_release>
 800764c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007650:	6523      	str	r3, [r4, #80]	; 0x50
 8007652:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <__sinit+0x68>)
 8007654:	4a13      	ldr	r2, [pc, #76]	; (80076a4 <__sinit+0x6c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	62a2      	str	r2, [r4, #40]	; 0x28
 800765a:	42a3      	cmp	r3, r4
 800765c:	bf04      	itt	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	61a3      	streq	r3, [r4, #24]
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f820 	bl	80076a8 <__sfp>
 8007668:	6060      	str	r0, [r4, #4]
 800766a:	4620      	mov	r0, r4
 800766c:	f000 f81c 	bl	80076a8 <__sfp>
 8007670:	60a0      	str	r0, [r4, #8]
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f818 	bl	80076a8 <__sfp>
 8007678:	2200      	movs	r2, #0
 800767a:	60e0      	str	r0, [r4, #12]
 800767c:	2104      	movs	r1, #4
 800767e:	6860      	ldr	r0, [r4, #4]
 8007680:	f7ff ff82 	bl	8007588 <std>
 8007684:	68a0      	ldr	r0, [r4, #8]
 8007686:	2201      	movs	r2, #1
 8007688:	2109      	movs	r1, #9
 800768a:	f7ff ff7d 	bl	8007588 <std>
 800768e:	68e0      	ldr	r0, [r4, #12]
 8007690:	2202      	movs	r2, #2
 8007692:	2112      	movs	r1, #18
 8007694:	f7ff ff78 	bl	8007588 <std>
 8007698:	2301      	movs	r3, #1
 800769a:	61a3      	str	r3, [r4, #24]
 800769c:	e7d2      	b.n	8007644 <__sinit+0xc>
 800769e:	bf00      	nop
 80076a0:	0800bf10 	.word	0x0800bf10
 80076a4:	080075d1 	.word	0x080075d1

080076a8 <__sfp>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	4607      	mov	r7, r0
 80076ac:	f7ff ffac 	bl	8007608 <__sfp_lock_acquire>
 80076b0:	4b1e      	ldr	r3, [pc, #120]	; (800772c <__sfp+0x84>)
 80076b2:	681e      	ldr	r6, [r3, #0]
 80076b4:	69b3      	ldr	r3, [r6, #24]
 80076b6:	b913      	cbnz	r3, 80076be <__sfp+0x16>
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff ffbd 	bl	8007638 <__sinit>
 80076be:	3648      	adds	r6, #72	; 0x48
 80076c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	d503      	bpl.n	80076d0 <__sfp+0x28>
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	b30b      	cbz	r3, 8007710 <__sfp+0x68>
 80076cc:	6836      	ldr	r6, [r6, #0]
 80076ce:	e7f7      	b.n	80076c0 <__sfp+0x18>
 80076d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076d4:	b9d5      	cbnz	r5, 800770c <__sfp+0x64>
 80076d6:	4b16      	ldr	r3, [pc, #88]	; (8007730 <__sfp+0x88>)
 80076d8:	60e3      	str	r3, [r4, #12]
 80076da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076de:	6665      	str	r5, [r4, #100]	; 0x64
 80076e0:	f000 f86c 	bl	80077bc <__retarget_lock_init_recursive>
 80076e4:	f7ff ff96 	bl	8007614 <__sfp_lock_release>
 80076e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076f0:	6025      	str	r5, [r4, #0]
 80076f2:	61a5      	str	r5, [r4, #24]
 80076f4:	2208      	movs	r2, #8
 80076f6:	4629      	mov	r1, r5
 80076f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076fc:	f000 f86f 	bl	80077de <memset>
 8007700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007708:	4620      	mov	r0, r4
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770c:	3468      	adds	r4, #104	; 0x68
 800770e:	e7d9      	b.n	80076c4 <__sfp+0x1c>
 8007710:	2104      	movs	r1, #4
 8007712:	4638      	mov	r0, r7
 8007714:	f7ff ff62 	bl	80075dc <__sfmoreglue>
 8007718:	4604      	mov	r4, r0
 800771a:	6030      	str	r0, [r6, #0]
 800771c:	2800      	cmp	r0, #0
 800771e:	d1d5      	bne.n	80076cc <__sfp+0x24>
 8007720:	f7ff ff78 	bl	8007614 <__sfp_lock_release>
 8007724:	230c      	movs	r3, #12
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	e7ee      	b.n	8007708 <__sfp+0x60>
 800772a:	bf00      	nop
 800772c:	0800bf10 	.word	0x0800bf10
 8007730:	ffff0001 	.word	0xffff0001

08007734 <_fwalk_reent>:
 8007734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007738:	4606      	mov	r6, r0
 800773a:	4688      	mov	r8, r1
 800773c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007740:	2700      	movs	r7, #0
 8007742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007746:	f1b9 0901 	subs.w	r9, r9, #1
 800774a:	d505      	bpl.n	8007758 <_fwalk_reent+0x24>
 800774c:	6824      	ldr	r4, [r4, #0]
 800774e:	2c00      	cmp	r4, #0
 8007750:	d1f7      	bne.n	8007742 <_fwalk_reent+0xe>
 8007752:	4638      	mov	r0, r7
 8007754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007758:	89ab      	ldrh	r3, [r5, #12]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d907      	bls.n	800776e <_fwalk_reent+0x3a>
 800775e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007762:	3301      	adds	r3, #1
 8007764:	d003      	beq.n	800776e <_fwalk_reent+0x3a>
 8007766:	4629      	mov	r1, r5
 8007768:	4630      	mov	r0, r6
 800776a:	47c0      	blx	r8
 800776c:	4307      	orrs	r7, r0
 800776e:	3568      	adds	r5, #104	; 0x68
 8007770:	e7e9      	b.n	8007746 <_fwalk_reent+0x12>
	...

08007774 <__libc_init_array>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4d0d      	ldr	r5, [pc, #52]	; (80077ac <__libc_init_array+0x38>)
 8007778:	4c0d      	ldr	r4, [pc, #52]	; (80077b0 <__libc_init_array+0x3c>)
 800777a:	1b64      	subs	r4, r4, r5
 800777c:	10a4      	asrs	r4, r4, #2
 800777e:	2600      	movs	r6, #0
 8007780:	42a6      	cmp	r6, r4
 8007782:	d109      	bne.n	8007798 <__libc_init_array+0x24>
 8007784:	4d0b      	ldr	r5, [pc, #44]	; (80077b4 <__libc_init_array+0x40>)
 8007786:	4c0c      	ldr	r4, [pc, #48]	; (80077b8 <__libc_init_array+0x44>)
 8007788:	f004 fb00 	bl	800bd8c <_init>
 800778c:	1b64      	subs	r4, r4, r5
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	2600      	movs	r6, #0
 8007792:	42a6      	cmp	r6, r4
 8007794:	d105      	bne.n	80077a2 <__libc_init_array+0x2e>
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	f855 3b04 	ldr.w	r3, [r5], #4
 800779c:	4798      	blx	r3
 800779e:	3601      	adds	r6, #1
 80077a0:	e7ee      	b.n	8007780 <__libc_init_array+0xc>
 80077a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a6:	4798      	blx	r3
 80077a8:	3601      	adds	r6, #1
 80077aa:	e7f2      	b.n	8007792 <__libc_init_array+0x1e>
 80077ac:	0800c35c 	.word	0x0800c35c
 80077b0:	0800c35c 	.word	0x0800c35c
 80077b4:	0800c35c 	.word	0x0800c35c
 80077b8:	0800c360 	.word	0x0800c360

080077bc <__retarget_lock_init_recursive>:
 80077bc:	4770      	bx	lr

080077be <__retarget_lock_acquire_recursive>:
 80077be:	4770      	bx	lr

080077c0 <__retarget_lock_release_recursive>:
 80077c0:	4770      	bx	lr

080077c2 <memcpy>:
 80077c2:	440a      	add	r2, r1
 80077c4:	4291      	cmp	r1, r2
 80077c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077ca:	d100      	bne.n	80077ce <memcpy+0xc>
 80077cc:	4770      	bx	lr
 80077ce:	b510      	push	{r4, lr}
 80077d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d8:	4291      	cmp	r1, r2
 80077da:	d1f9      	bne.n	80077d0 <memcpy+0xe>
 80077dc:	bd10      	pop	{r4, pc}

080077de <memset>:
 80077de:	4402      	add	r2, r0
 80077e0:	4603      	mov	r3, r0
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d100      	bne.n	80077e8 <memset+0xa>
 80077e6:	4770      	bx	lr
 80077e8:	f803 1b01 	strb.w	r1, [r3], #1
 80077ec:	e7f9      	b.n	80077e2 <memset+0x4>
	...

080077f0 <sbrk_aligned>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	4e0e      	ldr	r6, [pc, #56]	; (800782c <sbrk_aligned+0x3c>)
 80077f4:	460c      	mov	r4, r1
 80077f6:	6831      	ldr	r1, [r6, #0]
 80077f8:	4605      	mov	r5, r0
 80077fa:	b911      	cbnz	r1, 8007802 <sbrk_aligned+0x12>
 80077fc:	f000 ff3e 	bl	800867c <_sbrk_r>
 8007800:	6030      	str	r0, [r6, #0]
 8007802:	4621      	mov	r1, r4
 8007804:	4628      	mov	r0, r5
 8007806:	f000 ff39 	bl	800867c <_sbrk_r>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d00a      	beq.n	8007824 <sbrk_aligned+0x34>
 800780e:	1cc4      	adds	r4, r0, #3
 8007810:	f024 0403 	bic.w	r4, r4, #3
 8007814:	42a0      	cmp	r0, r4
 8007816:	d007      	beq.n	8007828 <sbrk_aligned+0x38>
 8007818:	1a21      	subs	r1, r4, r0
 800781a:	4628      	mov	r0, r5
 800781c:	f000 ff2e 	bl	800867c <_sbrk_r>
 8007820:	3001      	adds	r0, #1
 8007822:	d101      	bne.n	8007828 <sbrk_aligned+0x38>
 8007824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007828:	4620      	mov	r0, r4
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	20004d80 	.word	0x20004d80

08007830 <_malloc_r>:
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	1ccd      	adds	r5, r1, #3
 8007836:	f025 0503 	bic.w	r5, r5, #3
 800783a:	3508      	adds	r5, #8
 800783c:	2d0c      	cmp	r5, #12
 800783e:	bf38      	it	cc
 8007840:	250c      	movcc	r5, #12
 8007842:	2d00      	cmp	r5, #0
 8007844:	4607      	mov	r7, r0
 8007846:	db01      	blt.n	800784c <_malloc_r+0x1c>
 8007848:	42a9      	cmp	r1, r5
 800784a:	d905      	bls.n	8007858 <_malloc_r+0x28>
 800784c:	230c      	movs	r3, #12
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	2600      	movs	r6, #0
 8007852:	4630      	mov	r0, r6
 8007854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007858:	4e2e      	ldr	r6, [pc, #184]	; (8007914 <_malloc_r+0xe4>)
 800785a:	f003 f865 	bl	800a928 <__malloc_lock>
 800785e:	6833      	ldr	r3, [r6, #0]
 8007860:	461c      	mov	r4, r3
 8007862:	bb34      	cbnz	r4, 80078b2 <_malloc_r+0x82>
 8007864:	4629      	mov	r1, r5
 8007866:	4638      	mov	r0, r7
 8007868:	f7ff ffc2 	bl	80077f0 <sbrk_aligned>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	4604      	mov	r4, r0
 8007870:	d14d      	bne.n	800790e <_malloc_r+0xde>
 8007872:	6834      	ldr	r4, [r6, #0]
 8007874:	4626      	mov	r6, r4
 8007876:	2e00      	cmp	r6, #0
 8007878:	d140      	bne.n	80078fc <_malloc_r+0xcc>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	4631      	mov	r1, r6
 800787e:	4638      	mov	r0, r7
 8007880:	eb04 0803 	add.w	r8, r4, r3
 8007884:	f000 fefa 	bl	800867c <_sbrk_r>
 8007888:	4580      	cmp	r8, r0
 800788a:	d13a      	bne.n	8007902 <_malloc_r+0xd2>
 800788c:	6821      	ldr	r1, [r4, #0]
 800788e:	3503      	adds	r5, #3
 8007890:	1a6d      	subs	r5, r5, r1
 8007892:	f025 0503 	bic.w	r5, r5, #3
 8007896:	3508      	adds	r5, #8
 8007898:	2d0c      	cmp	r5, #12
 800789a:	bf38      	it	cc
 800789c:	250c      	movcc	r5, #12
 800789e:	4629      	mov	r1, r5
 80078a0:	4638      	mov	r0, r7
 80078a2:	f7ff ffa5 	bl	80077f0 <sbrk_aligned>
 80078a6:	3001      	adds	r0, #1
 80078a8:	d02b      	beq.n	8007902 <_malloc_r+0xd2>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	442b      	add	r3, r5
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	e00e      	b.n	80078d0 <_malloc_r+0xa0>
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	1b52      	subs	r2, r2, r5
 80078b6:	d41e      	bmi.n	80078f6 <_malloc_r+0xc6>
 80078b8:	2a0b      	cmp	r2, #11
 80078ba:	d916      	bls.n	80078ea <_malloc_r+0xba>
 80078bc:	1961      	adds	r1, r4, r5
 80078be:	42a3      	cmp	r3, r4
 80078c0:	6025      	str	r5, [r4, #0]
 80078c2:	bf18      	it	ne
 80078c4:	6059      	strne	r1, [r3, #4]
 80078c6:	6863      	ldr	r3, [r4, #4]
 80078c8:	bf08      	it	eq
 80078ca:	6031      	streq	r1, [r6, #0]
 80078cc:	5162      	str	r2, [r4, r5]
 80078ce:	604b      	str	r3, [r1, #4]
 80078d0:	4638      	mov	r0, r7
 80078d2:	f104 060b 	add.w	r6, r4, #11
 80078d6:	f003 f82d 	bl	800a934 <__malloc_unlock>
 80078da:	f026 0607 	bic.w	r6, r6, #7
 80078de:	1d23      	adds	r3, r4, #4
 80078e0:	1af2      	subs	r2, r6, r3
 80078e2:	d0b6      	beq.n	8007852 <_malloc_r+0x22>
 80078e4:	1b9b      	subs	r3, r3, r6
 80078e6:	50a3      	str	r3, [r4, r2]
 80078e8:	e7b3      	b.n	8007852 <_malloc_r+0x22>
 80078ea:	6862      	ldr	r2, [r4, #4]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	bf0c      	ite	eq
 80078f0:	6032      	streq	r2, [r6, #0]
 80078f2:	605a      	strne	r2, [r3, #4]
 80078f4:	e7ec      	b.n	80078d0 <_malloc_r+0xa0>
 80078f6:	4623      	mov	r3, r4
 80078f8:	6864      	ldr	r4, [r4, #4]
 80078fa:	e7b2      	b.n	8007862 <_malloc_r+0x32>
 80078fc:	4634      	mov	r4, r6
 80078fe:	6876      	ldr	r6, [r6, #4]
 8007900:	e7b9      	b.n	8007876 <_malloc_r+0x46>
 8007902:	230c      	movs	r3, #12
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	4638      	mov	r0, r7
 8007908:	f003 f814 	bl	800a934 <__malloc_unlock>
 800790c:	e7a1      	b.n	8007852 <_malloc_r+0x22>
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	e7de      	b.n	80078d0 <_malloc_r+0xa0>
 8007912:	bf00      	nop
 8007914:	20004d7c 	.word	0x20004d7c

08007918 <__cvt>:
 8007918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800791a:	ed2d 8b02 	vpush	{d8}
 800791e:	eeb0 8b40 	vmov.f64	d8, d0
 8007922:	b085      	sub	sp, #20
 8007924:	4617      	mov	r7, r2
 8007926:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007928:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800792a:	ee18 2a90 	vmov	r2, s17
 800792e:	f025 0520 	bic.w	r5, r5, #32
 8007932:	2a00      	cmp	r2, #0
 8007934:	bfb6      	itet	lt
 8007936:	222d      	movlt	r2, #45	; 0x2d
 8007938:	2200      	movge	r2, #0
 800793a:	eeb1 8b40 	vneglt.f64	d8, d0
 800793e:	2d46      	cmp	r5, #70	; 0x46
 8007940:	460c      	mov	r4, r1
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	d004      	beq.n	8007950 <__cvt+0x38>
 8007946:	2d45      	cmp	r5, #69	; 0x45
 8007948:	d100      	bne.n	800794c <__cvt+0x34>
 800794a:	3401      	adds	r4, #1
 800794c:	2102      	movs	r1, #2
 800794e:	e000      	b.n	8007952 <__cvt+0x3a>
 8007950:	2103      	movs	r1, #3
 8007952:	ab03      	add	r3, sp, #12
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	ab02      	add	r3, sp, #8
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	4622      	mov	r2, r4
 800795c:	4633      	mov	r3, r6
 800795e:	eeb0 0b48 	vmov.f64	d0, d8
 8007962:	f001 fe11 	bl	8009588 <_dtoa_r>
 8007966:	2d47      	cmp	r5, #71	; 0x47
 8007968:	d101      	bne.n	800796e <__cvt+0x56>
 800796a:	07fb      	lsls	r3, r7, #31
 800796c:	d51a      	bpl.n	80079a4 <__cvt+0x8c>
 800796e:	2d46      	cmp	r5, #70	; 0x46
 8007970:	eb00 0204 	add.w	r2, r0, r4
 8007974:	d10c      	bne.n	8007990 <__cvt+0x78>
 8007976:	7803      	ldrb	r3, [r0, #0]
 8007978:	2b30      	cmp	r3, #48	; 0x30
 800797a:	d107      	bne.n	800798c <__cvt+0x74>
 800797c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	bf1c      	itt	ne
 8007986:	f1c4 0401 	rsbne	r4, r4, #1
 800798a:	6034      	strne	r4, [r6, #0]
 800798c:	6833      	ldr	r3, [r6, #0]
 800798e:	441a      	add	r2, r3
 8007990:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007998:	bf08      	it	eq
 800799a:	9203      	streq	r2, [sp, #12]
 800799c:	2130      	movs	r1, #48	; 0x30
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d307      	bcc.n	80079b4 <__cvt+0x9c>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079a8:	1a1b      	subs	r3, r3, r0
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	b005      	add	sp, #20
 80079ae:	ecbd 8b02 	vpop	{d8}
 80079b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b4:	1c5c      	adds	r4, r3, #1
 80079b6:	9403      	str	r4, [sp, #12]
 80079b8:	7019      	strb	r1, [r3, #0]
 80079ba:	e7f0      	b.n	800799e <__cvt+0x86>

080079bc <__exponent>:
 80079bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079be:	4603      	mov	r3, r0
 80079c0:	2900      	cmp	r1, #0
 80079c2:	bfb8      	it	lt
 80079c4:	4249      	neglt	r1, r1
 80079c6:	f803 2b02 	strb.w	r2, [r3], #2
 80079ca:	bfb4      	ite	lt
 80079cc:	222d      	movlt	r2, #45	; 0x2d
 80079ce:	222b      	movge	r2, #43	; 0x2b
 80079d0:	2909      	cmp	r1, #9
 80079d2:	7042      	strb	r2, [r0, #1]
 80079d4:	dd2a      	ble.n	8007a2c <__exponent+0x70>
 80079d6:	f10d 0407 	add.w	r4, sp, #7
 80079da:	46a4      	mov	ip, r4
 80079dc:	270a      	movs	r7, #10
 80079de:	46a6      	mov	lr, r4
 80079e0:	460a      	mov	r2, r1
 80079e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80079e6:	fb07 1516 	mls	r5, r7, r6, r1
 80079ea:	3530      	adds	r5, #48	; 0x30
 80079ec:	2a63      	cmp	r2, #99	; 0x63
 80079ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80079f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079f6:	4631      	mov	r1, r6
 80079f8:	dcf1      	bgt.n	80079de <__exponent+0x22>
 80079fa:	3130      	adds	r1, #48	; 0x30
 80079fc:	f1ae 0502 	sub.w	r5, lr, #2
 8007a00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a04:	1c44      	adds	r4, r0, #1
 8007a06:	4629      	mov	r1, r5
 8007a08:	4561      	cmp	r1, ip
 8007a0a:	d30a      	bcc.n	8007a22 <__exponent+0x66>
 8007a0c:	f10d 0209 	add.w	r2, sp, #9
 8007a10:	eba2 020e 	sub.w	r2, r2, lr
 8007a14:	4565      	cmp	r5, ip
 8007a16:	bf88      	it	hi
 8007a18:	2200      	movhi	r2, #0
 8007a1a:	4413      	add	r3, r2
 8007a1c:	1a18      	subs	r0, r3, r0
 8007a1e:	b003      	add	sp, #12
 8007a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a2a:	e7ed      	b.n	8007a08 <__exponent+0x4c>
 8007a2c:	2330      	movs	r3, #48	; 0x30
 8007a2e:	3130      	adds	r1, #48	; 0x30
 8007a30:	7083      	strb	r3, [r0, #2]
 8007a32:	70c1      	strb	r1, [r0, #3]
 8007a34:	1d03      	adds	r3, r0, #4
 8007a36:	e7f1      	b.n	8007a1c <__exponent+0x60>

08007a38 <_printf_float>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	b08b      	sub	sp, #44	; 0x2c
 8007a3e:	460c      	mov	r4, r1
 8007a40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007a44:	4616      	mov	r6, r2
 8007a46:	461f      	mov	r7, r3
 8007a48:	4605      	mov	r5, r0
 8007a4a:	f002 ff3d 	bl	800a8c8 <_localeconv_r>
 8007a4e:	f8d0 b000 	ldr.w	fp, [r0]
 8007a52:	4658      	mov	r0, fp
 8007a54:	f7f8 fbf4 	bl	8000240 <strlen>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9308      	str	r3, [sp, #32]
 8007a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a64:	6822      	ldr	r2, [r4, #0]
 8007a66:	3307      	adds	r3, #7
 8007a68:	f023 0307 	bic.w	r3, r3, #7
 8007a6c:	f103 0108 	add.w	r1, r3, #8
 8007a70:	f8c8 1000 	str.w	r1, [r8]
 8007a74:	4682      	mov	sl, r0
 8007a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007a7e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007ce0 <_printf_float+0x2a8>
 8007a82:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007a86:	eeb0 6bc0 	vabs.f64	d6, d0
 8007a8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a92:	dd24      	ble.n	8007ade <_printf_float+0xa6>
 8007a94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9c:	d502      	bpl.n	8007aa4 <_printf_float+0x6c>
 8007a9e:	232d      	movs	r3, #45	; 0x2d
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa4:	4b90      	ldr	r3, [pc, #576]	; (8007ce8 <_printf_float+0x2b0>)
 8007aa6:	4891      	ldr	r0, [pc, #580]	; (8007cec <_printf_float+0x2b4>)
 8007aa8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007aac:	bf94      	ite	ls
 8007aae:	4698      	movls	r8, r3
 8007ab0:	4680      	movhi	r8, r0
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	f022 0204 	bic.w	r2, r2, #4
 8007aba:	2300      	movs	r3, #0
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	9700      	str	r7, [sp, #0]
 8007ac2:	4633      	mov	r3, r6
 8007ac4:	aa09      	add	r2, sp, #36	; 0x24
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 f9d3 	bl	8007e74 <_printf_common>
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f040 808a 	bne.w	8007be8 <_printf_float+0x1b0>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad8:	b00b      	add	sp, #44	; 0x2c
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	eeb4 0b40 	vcmp.f64	d0, d0
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	d709      	bvc.n	8007afc <_printf_float+0xc4>
 8007ae8:	ee10 3a90 	vmov	r3, s1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfbc      	itt	lt
 8007af0:	232d      	movlt	r3, #45	; 0x2d
 8007af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007af6:	487e      	ldr	r0, [pc, #504]	; (8007cf0 <_printf_float+0x2b8>)
 8007af8:	4b7e      	ldr	r3, [pc, #504]	; (8007cf4 <_printf_float+0x2bc>)
 8007afa:	e7d5      	b.n	8007aa8 <_printf_float+0x70>
 8007afc:	6863      	ldr	r3, [r4, #4]
 8007afe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007b02:	9104      	str	r1, [sp, #16]
 8007b04:	1c59      	adds	r1, r3, #1
 8007b06:	d13c      	bne.n	8007b82 <_printf_float+0x14a>
 8007b08:	2306      	movs	r3, #6
 8007b0a:	6063      	str	r3, [r4, #4]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9303      	str	r3, [sp, #12]
 8007b10:	ab08      	add	r3, sp, #32
 8007b12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007b16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b1a:	ab07      	add	r3, sp, #28
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	6022      	str	r2, [r4, #0]
 8007b22:	f10d 031b 	add.w	r3, sp, #27
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7ff fef6 	bl	8007918 <__cvt>
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	9907      	ldr	r1, [sp, #28]
 8007b30:	2b47      	cmp	r3, #71	; 0x47
 8007b32:	4680      	mov	r8, r0
 8007b34:	d108      	bne.n	8007b48 <_printf_float+0x110>
 8007b36:	1cc8      	adds	r0, r1, #3
 8007b38:	db02      	blt.n	8007b40 <_printf_float+0x108>
 8007b3a:	6863      	ldr	r3, [r4, #4]
 8007b3c:	4299      	cmp	r1, r3
 8007b3e:	dd41      	ble.n	8007bc4 <_printf_float+0x18c>
 8007b40:	f1a9 0902 	sub.w	r9, r9, #2
 8007b44:	fa5f f989 	uxtb.w	r9, r9
 8007b48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b4c:	d820      	bhi.n	8007b90 <_printf_float+0x158>
 8007b4e:	3901      	subs	r1, #1
 8007b50:	464a      	mov	r2, r9
 8007b52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b56:	9107      	str	r1, [sp, #28]
 8007b58:	f7ff ff30 	bl	80079bc <__exponent>
 8007b5c:	9a08      	ldr	r2, [sp, #32]
 8007b5e:	9004      	str	r0, [sp, #16]
 8007b60:	1813      	adds	r3, r2, r0
 8007b62:	2a01      	cmp	r2, #1
 8007b64:	6123      	str	r3, [r4, #16]
 8007b66:	dc02      	bgt.n	8007b6e <_printf_float+0x136>
 8007b68:	6822      	ldr	r2, [r4, #0]
 8007b6a:	07d2      	lsls	r2, r2, #31
 8007b6c:	d501      	bpl.n	8007b72 <_printf_float+0x13a>
 8007b6e:	3301      	adds	r3, #1
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0a2      	beq.n	8007ac0 <_printf_float+0x88>
 8007b7a:	232d      	movs	r3, #45	; 0x2d
 8007b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b80:	e79e      	b.n	8007ac0 <_printf_float+0x88>
 8007b82:	9904      	ldr	r1, [sp, #16]
 8007b84:	2947      	cmp	r1, #71	; 0x47
 8007b86:	d1c1      	bne.n	8007b0c <_printf_float+0xd4>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1bf      	bne.n	8007b0c <_printf_float+0xd4>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e7bc      	b.n	8007b0a <_printf_float+0xd2>
 8007b90:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b94:	d118      	bne.n	8007bc8 <_printf_float+0x190>
 8007b96:	2900      	cmp	r1, #0
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	dd0b      	ble.n	8007bb4 <_printf_float+0x17c>
 8007b9c:	6121      	str	r1, [r4, #16]
 8007b9e:	b913      	cbnz	r3, 8007ba6 <_printf_float+0x16e>
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	07d0      	lsls	r0, r2, #31
 8007ba4:	d502      	bpl.n	8007bac <_printf_float+0x174>
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	440b      	add	r3, r1
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	2300      	movs	r3, #0
 8007bae:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	e7de      	b.n	8007b72 <_printf_float+0x13a>
 8007bb4:	b913      	cbnz	r3, 8007bbc <_printf_float+0x184>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	07d2      	lsls	r2, r2, #31
 8007bba:	d501      	bpl.n	8007bc0 <_printf_float+0x188>
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	e7f4      	b.n	8007baa <_printf_float+0x172>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e7f2      	b.n	8007baa <_printf_float+0x172>
 8007bc4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007bc8:	9b08      	ldr	r3, [sp, #32]
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	db05      	blt.n	8007bda <_printf_float+0x1a2>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6121      	str	r1, [r4, #16]
 8007bd2:	07d8      	lsls	r0, r3, #31
 8007bd4:	d5ea      	bpl.n	8007bac <_printf_float+0x174>
 8007bd6:	1c4b      	adds	r3, r1, #1
 8007bd8:	e7e7      	b.n	8007baa <_printf_float+0x172>
 8007bda:	2900      	cmp	r1, #0
 8007bdc:	bfd4      	ite	le
 8007bde:	f1c1 0202 	rsble	r2, r1, #2
 8007be2:	2201      	movgt	r2, #1
 8007be4:	4413      	add	r3, r2
 8007be6:	e7e0      	b.n	8007baa <_printf_float+0x172>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	055a      	lsls	r2, r3, #21
 8007bec:	d407      	bmi.n	8007bfe <_printf_float+0x1c6>
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b8      	blx	r7
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d12a      	bne.n	8007c52 <_printf_float+0x21a>
 8007bfc:	e76a      	b.n	8007ad4 <_printf_float+0x9c>
 8007bfe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c02:	f240 80e2 	bls.w	8007dca <_printf_float+0x392>
 8007c06:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c12:	d133      	bne.n	8007c7c <_printf_float+0x244>
 8007c14:	4a38      	ldr	r2, [pc, #224]	; (8007cf8 <_printf_float+0x2c0>)
 8007c16:	2301      	movs	r3, #1
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f af58 	beq.w	8007ad4 <_printf_float+0x9c>
 8007c24:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	db02      	blt.n	8007c32 <_printf_float+0x1fa>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	07d8      	lsls	r0, r3, #31
 8007c30:	d50f      	bpl.n	8007c52 <_printf_float+0x21a>
 8007c32:	4653      	mov	r3, sl
 8007c34:	465a      	mov	r2, fp
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	f43f af49 	beq.w	8007ad4 <_printf_float+0x9c>
 8007c42:	f04f 0800 	mov.w	r8, #0
 8007c46:	f104 091a 	add.w	r9, r4, #26
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	4543      	cmp	r3, r8
 8007c50:	dc09      	bgt.n	8007c66 <_printf_float+0x22e>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	079b      	lsls	r3, r3, #30
 8007c56:	f100 8108 	bmi.w	8007e6a <_printf_float+0x432>
 8007c5a:	68e0      	ldr	r0, [r4, #12]
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	4298      	cmp	r0, r3
 8007c60:	bfb8      	it	lt
 8007c62:	4618      	movlt	r0, r3
 8007c64:	e738      	b.n	8007ad8 <_printf_float+0xa0>
 8007c66:	2301      	movs	r3, #1
 8007c68:	464a      	mov	r2, r9
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	f43f af2f 	beq.w	8007ad4 <_printf_float+0x9c>
 8007c76:	f108 0801 	add.w	r8, r8, #1
 8007c7a:	e7e6      	b.n	8007c4a <_printf_float+0x212>
 8007c7c:	9b07      	ldr	r3, [sp, #28]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dc3c      	bgt.n	8007cfc <_printf_float+0x2c4>
 8007c82:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <_printf_float+0x2c0>)
 8007c84:	2301      	movs	r3, #1
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b8      	blx	r7
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	f43f af21 	beq.w	8007ad4 <_printf_float+0x9c>
 8007c92:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	d102      	bne.n	8007ca0 <_printf_float+0x268>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	07d9      	lsls	r1, r3, #31
 8007c9e:	d5d8      	bpl.n	8007c52 <_printf_float+0x21a>
 8007ca0:	4653      	mov	r3, sl
 8007ca2:	465a      	mov	r2, fp
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f af12 	beq.w	8007ad4 <_printf_float+0x9c>
 8007cb0:	f04f 0900 	mov.w	r9, #0
 8007cb4:	f104 0a1a 	add.w	sl, r4, #26
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	425b      	negs	r3, r3
 8007cbc:	454b      	cmp	r3, r9
 8007cbe:	dc01      	bgt.n	8007cc4 <_printf_float+0x28c>
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	e795      	b.n	8007bf0 <_printf_float+0x1b8>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4652      	mov	r2, sl
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f43f af00 	beq.w	8007ad4 <_printf_float+0x9c>
 8007cd4:	f109 0901 	add.w	r9, r9, #1
 8007cd8:	e7ee      	b.n	8007cb8 <_printf_float+0x280>
 8007cda:	bf00      	nop
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	ffffffff 	.word	0xffffffff
 8007ce4:	7fefffff 	.word	0x7fefffff
 8007ce8:	0800bf14 	.word	0x0800bf14
 8007cec:	0800bf18 	.word	0x0800bf18
 8007cf0:	0800bf20 	.word	0x0800bf20
 8007cf4:	0800bf1c 	.word	0x0800bf1c
 8007cf8:	0800bf24 	.word	0x0800bf24
 8007cfc:	9a08      	ldr	r2, [sp, #32]
 8007cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d00:	429a      	cmp	r2, r3
 8007d02:	bfa8      	it	ge
 8007d04:	461a      	movge	r2, r3
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	4691      	mov	r9, r2
 8007d0a:	dc38      	bgt.n	8007d7e <_printf_float+0x346>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9305      	str	r3, [sp, #20]
 8007d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d14:	f104 021a 	add.w	r2, r4, #26
 8007d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d1a:	9905      	ldr	r1, [sp, #20]
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	eba3 0309 	sub.w	r3, r3, r9
 8007d22:	428b      	cmp	r3, r1
 8007d24:	dc33      	bgt.n	8007d8e <_printf_float+0x356>
 8007d26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	db3c      	blt.n	8007da8 <_printf_float+0x370>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	07da      	lsls	r2, r3, #31
 8007d32:	d439      	bmi.n	8007da8 <_printf_float+0x370>
 8007d34:	9b08      	ldr	r3, [sp, #32]
 8007d36:	9a04      	ldr	r2, [sp, #16]
 8007d38:	9907      	ldr	r1, [sp, #28]
 8007d3a:	1a9a      	subs	r2, r3, r2
 8007d3c:	eba3 0901 	sub.w	r9, r3, r1
 8007d40:	4591      	cmp	r9, r2
 8007d42:	bfa8      	it	ge
 8007d44:	4691      	movge	r9, r2
 8007d46:	f1b9 0f00 	cmp.w	r9, #0
 8007d4a:	dc35      	bgt.n	8007db8 <_printf_float+0x380>
 8007d4c:	f04f 0800 	mov.w	r8, #0
 8007d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d54:	f104 0a1a 	add.w	sl, r4, #26
 8007d58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	eba3 0309 	sub.w	r3, r3, r9
 8007d62:	4543      	cmp	r3, r8
 8007d64:	f77f af75 	ble.w	8007c52 <_printf_float+0x21a>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	f43f aeae 	beq.w	8007ad4 <_printf_float+0x9c>
 8007d78:	f108 0801 	add.w	r8, r8, #1
 8007d7c:	e7ec      	b.n	8007d58 <_printf_float+0x320>
 8007d7e:	4613      	mov	r3, r2
 8007d80:	4631      	mov	r1, r6
 8007d82:	4642      	mov	r2, r8
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d1bf      	bne.n	8007d0c <_printf_float+0x2d4>
 8007d8c:	e6a2      	b.n	8007ad4 <_printf_float+0x9c>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	9204      	str	r2, [sp, #16]
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f43f ae9b 	beq.w	8007ad4 <_printf_float+0x9c>
 8007d9e:	9b05      	ldr	r3, [sp, #20]
 8007da0:	9a04      	ldr	r2, [sp, #16]
 8007da2:	3301      	adds	r3, #1
 8007da4:	9305      	str	r3, [sp, #20]
 8007da6:	e7b7      	b.n	8007d18 <_printf_float+0x2e0>
 8007da8:	4653      	mov	r3, sl
 8007daa:	465a      	mov	r2, fp
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	d1be      	bne.n	8007d34 <_printf_float+0x2fc>
 8007db6:	e68d      	b.n	8007ad4 <_printf_float+0x9c>
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	464b      	mov	r3, r9
 8007dbc:	4442      	add	r2, r8
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	47b8      	blx	r7
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d1c1      	bne.n	8007d4c <_printf_float+0x314>
 8007dc8:	e684      	b.n	8007ad4 <_printf_float+0x9c>
 8007dca:	9a08      	ldr	r2, [sp, #32]
 8007dcc:	2a01      	cmp	r2, #1
 8007dce:	dc01      	bgt.n	8007dd4 <_printf_float+0x39c>
 8007dd0:	07db      	lsls	r3, r3, #31
 8007dd2:	d537      	bpl.n	8007e44 <_printf_float+0x40c>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b8      	blx	r7
 8007dde:	3001      	adds	r0, #1
 8007de0:	f43f ae78 	beq.w	8007ad4 <_printf_float+0x9c>
 8007de4:	4653      	mov	r3, sl
 8007de6:	465a      	mov	r2, fp
 8007de8:	4631      	mov	r1, r6
 8007dea:	4628      	mov	r0, r5
 8007dec:	47b8      	blx	r7
 8007dee:	3001      	adds	r0, #1
 8007df0:	f43f ae70 	beq.w	8007ad4 <_printf_float+0x9c>
 8007df4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007df8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e00:	d01b      	beq.n	8007e3a <_printf_float+0x402>
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	f108 0201 	add.w	r2, r8, #1
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	d10e      	bne.n	8007e32 <_printf_float+0x3fa>
 8007e14:	e65e      	b.n	8007ad4 <_printf_float+0x9c>
 8007e16:	2301      	movs	r3, #1
 8007e18:	464a      	mov	r2, r9
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f ae57 	beq.w	8007ad4 <_printf_float+0x9c>
 8007e26:	f108 0801 	add.w	r8, r8, #1
 8007e2a:	9b08      	ldr	r3, [sp, #32]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	4543      	cmp	r3, r8
 8007e30:	dcf1      	bgt.n	8007e16 <_printf_float+0x3de>
 8007e32:	9b04      	ldr	r3, [sp, #16]
 8007e34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e38:	e6db      	b.n	8007bf2 <_printf_float+0x1ba>
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	f104 091a 	add.w	r9, r4, #26
 8007e42:	e7f2      	b.n	8007e2a <_printf_float+0x3f2>
 8007e44:	2301      	movs	r3, #1
 8007e46:	4642      	mov	r2, r8
 8007e48:	e7df      	b.n	8007e0a <_printf_float+0x3d2>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	464a      	mov	r2, r9
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f ae3d 	beq.w	8007ad4 <_printf_float+0x9c>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	68e3      	ldr	r3, [r4, #12]
 8007e60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e62:	1a5b      	subs	r3, r3, r1
 8007e64:	4543      	cmp	r3, r8
 8007e66:	dcf0      	bgt.n	8007e4a <_printf_float+0x412>
 8007e68:	e6f7      	b.n	8007c5a <_printf_float+0x222>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f104 0919 	add.w	r9, r4, #25
 8007e72:	e7f4      	b.n	8007e5e <_printf_float+0x426>

08007e74 <_printf_common>:
 8007e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	4616      	mov	r6, r2
 8007e7a:	4699      	mov	r9, r3
 8007e7c:	688a      	ldr	r2, [r1, #8]
 8007e7e:	690b      	ldr	r3, [r1, #16]
 8007e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	bfb8      	it	lt
 8007e88:	4613      	movlt	r3, r2
 8007e8a:	6033      	str	r3, [r6, #0]
 8007e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e90:	4607      	mov	r7, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	b10a      	cbz	r2, 8007e9a <_printf_common+0x26>
 8007e96:	3301      	adds	r3, #1
 8007e98:	6033      	str	r3, [r6, #0]
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	0699      	lsls	r1, r3, #26
 8007e9e:	bf42      	ittt	mi
 8007ea0:	6833      	ldrmi	r3, [r6, #0]
 8007ea2:	3302      	addmi	r3, #2
 8007ea4:	6033      	strmi	r3, [r6, #0]
 8007ea6:	6825      	ldr	r5, [r4, #0]
 8007ea8:	f015 0506 	ands.w	r5, r5, #6
 8007eac:	d106      	bne.n	8007ebc <_printf_common+0x48>
 8007eae:	f104 0a19 	add.w	sl, r4, #25
 8007eb2:	68e3      	ldr	r3, [r4, #12]
 8007eb4:	6832      	ldr	r2, [r6, #0]
 8007eb6:	1a9b      	subs	r3, r3, r2
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	dc26      	bgt.n	8007f0a <_printf_common+0x96>
 8007ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ec0:	1e13      	subs	r3, r2, #0
 8007ec2:	6822      	ldr	r2, [r4, #0]
 8007ec4:	bf18      	it	ne
 8007ec6:	2301      	movne	r3, #1
 8007ec8:	0692      	lsls	r2, r2, #26
 8007eca:	d42b      	bmi.n	8007f24 <_printf_common+0xb0>
 8007ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c0      	blx	r8
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d01e      	beq.n	8007f18 <_printf_common+0xa4>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	68e5      	ldr	r5, [r4, #12]
 8007ede:	6832      	ldr	r2, [r6, #0]
 8007ee0:	f003 0306 	and.w	r3, r3, #6
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	bf08      	it	eq
 8007ee8:	1aad      	subeq	r5, r5, r2
 8007eea:	68a3      	ldr	r3, [r4, #8]
 8007eec:	6922      	ldr	r2, [r4, #16]
 8007eee:	bf0c      	ite	eq
 8007ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ef4:	2500      	movne	r5, #0
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	bfc4      	itt	gt
 8007efa:	1a9b      	subgt	r3, r3, r2
 8007efc:	18ed      	addgt	r5, r5, r3
 8007efe:	2600      	movs	r6, #0
 8007f00:	341a      	adds	r4, #26
 8007f02:	42b5      	cmp	r5, r6
 8007f04:	d11a      	bne.n	8007f3c <_printf_common+0xc8>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e008      	b.n	8007f1c <_printf_common+0xa8>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	4649      	mov	r1, r9
 8007f10:	4638      	mov	r0, r7
 8007f12:	47c0      	blx	r8
 8007f14:	3001      	adds	r0, #1
 8007f16:	d103      	bne.n	8007f20 <_printf_common+0xac>
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	3501      	adds	r5, #1
 8007f22:	e7c6      	b.n	8007eb2 <_printf_common+0x3e>
 8007f24:	18e1      	adds	r1, r4, r3
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	2030      	movs	r0, #48	; 0x30
 8007f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f2e:	4422      	add	r2, r4
 8007f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f38:	3302      	adds	r3, #2
 8007f3a:	e7c7      	b.n	8007ecc <_printf_common+0x58>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4649      	mov	r1, r9
 8007f42:	4638      	mov	r0, r7
 8007f44:	47c0      	blx	r8
 8007f46:	3001      	adds	r0, #1
 8007f48:	d0e6      	beq.n	8007f18 <_printf_common+0xa4>
 8007f4a:	3601      	adds	r6, #1
 8007f4c:	e7d9      	b.n	8007f02 <_printf_common+0x8e>
	...

08007f50 <_printf_i>:
 8007f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	7e0f      	ldrb	r7, [r1, #24]
 8007f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f58:	2f78      	cmp	r7, #120	; 0x78
 8007f5a:	4691      	mov	r9, r2
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	469a      	mov	sl, r3
 8007f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f66:	d807      	bhi.n	8007f78 <_printf_i+0x28>
 8007f68:	2f62      	cmp	r7, #98	; 0x62
 8007f6a:	d80a      	bhi.n	8007f82 <_printf_i+0x32>
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	f000 80d8 	beq.w	8008122 <_printf_i+0x1d2>
 8007f72:	2f58      	cmp	r7, #88	; 0x58
 8007f74:	f000 80a3 	beq.w	80080be <_printf_i+0x16e>
 8007f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f80:	e03a      	b.n	8007ff8 <_printf_i+0xa8>
 8007f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f86:	2b15      	cmp	r3, #21
 8007f88:	d8f6      	bhi.n	8007f78 <_printf_i+0x28>
 8007f8a:	a101      	add	r1, pc, #4	; (adr r1, 8007f90 <_printf_i+0x40>)
 8007f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007ffd 	.word	0x08007ffd
 8007f98:	08007f79 	.word	0x08007f79
 8007f9c:	08007f79 	.word	0x08007f79
 8007fa0:	08007f79 	.word	0x08007f79
 8007fa4:	08007f79 	.word	0x08007f79
 8007fa8:	08007ffd 	.word	0x08007ffd
 8007fac:	08007f79 	.word	0x08007f79
 8007fb0:	08007f79 	.word	0x08007f79
 8007fb4:	08007f79 	.word	0x08007f79
 8007fb8:	08007f79 	.word	0x08007f79
 8007fbc:	08008109 	.word	0x08008109
 8007fc0:	0800802d 	.word	0x0800802d
 8007fc4:	080080eb 	.word	0x080080eb
 8007fc8:	08007f79 	.word	0x08007f79
 8007fcc:	08007f79 	.word	0x08007f79
 8007fd0:	0800812b 	.word	0x0800812b
 8007fd4:	08007f79 	.word	0x08007f79
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08007f79 	.word	0x08007f79
 8007fe0:	08007f79 	.word	0x08007f79
 8007fe4:	080080f3 	.word	0x080080f3
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	602a      	str	r2, [r5, #0]
 8007ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e0a3      	b.n	8008144 <_printf_i+0x1f4>
 8007ffc:	6820      	ldr	r0, [r4, #0]
 8007ffe:	6829      	ldr	r1, [r5, #0]
 8008000:	0606      	lsls	r6, r0, #24
 8008002:	f101 0304 	add.w	r3, r1, #4
 8008006:	d50a      	bpl.n	800801e <_printf_i+0xce>
 8008008:	680e      	ldr	r6, [r1, #0]
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	2e00      	cmp	r6, #0
 800800e:	da03      	bge.n	8008018 <_printf_i+0xc8>
 8008010:	232d      	movs	r3, #45	; 0x2d
 8008012:	4276      	negs	r6, r6
 8008014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008018:	485e      	ldr	r0, [pc, #376]	; (8008194 <_printf_i+0x244>)
 800801a:	230a      	movs	r3, #10
 800801c:	e019      	b.n	8008052 <_printf_i+0x102>
 800801e:	680e      	ldr	r6, [r1, #0]
 8008020:	602b      	str	r3, [r5, #0]
 8008022:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008026:	bf18      	it	ne
 8008028:	b236      	sxthne	r6, r6
 800802a:	e7ef      	b.n	800800c <_printf_i+0xbc>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	1d19      	adds	r1, r3, #4
 8008032:	6029      	str	r1, [r5, #0]
 8008034:	0601      	lsls	r1, r0, #24
 8008036:	d501      	bpl.n	800803c <_printf_i+0xec>
 8008038:	681e      	ldr	r6, [r3, #0]
 800803a:	e002      	b.n	8008042 <_printf_i+0xf2>
 800803c:	0646      	lsls	r6, r0, #25
 800803e:	d5fb      	bpl.n	8008038 <_printf_i+0xe8>
 8008040:	881e      	ldrh	r6, [r3, #0]
 8008042:	4854      	ldr	r0, [pc, #336]	; (8008194 <_printf_i+0x244>)
 8008044:	2f6f      	cmp	r7, #111	; 0x6f
 8008046:	bf0c      	ite	eq
 8008048:	2308      	moveq	r3, #8
 800804a:	230a      	movne	r3, #10
 800804c:	2100      	movs	r1, #0
 800804e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008052:	6865      	ldr	r5, [r4, #4]
 8008054:	60a5      	str	r5, [r4, #8]
 8008056:	2d00      	cmp	r5, #0
 8008058:	bfa2      	ittt	ge
 800805a:	6821      	ldrge	r1, [r4, #0]
 800805c:	f021 0104 	bicge.w	r1, r1, #4
 8008060:	6021      	strge	r1, [r4, #0]
 8008062:	b90e      	cbnz	r6, 8008068 <_printf_i+0x118>
 8008064:	2d00      	cmp	r5, #0
 8008066:	d04d      	beq.n	8008104 <_printf_i+0x1b4>
 8008068:	4615      	mov	r5, r2
 800806a:	fbb6 f1f3 	udiv	r1, r6, r3
 800806e:	fb03 6711 	mls	r7, r3, r1, r6
 8008072:	5dc7      	ldrb	r7, [r0, r7]
 8008074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008078:	4637      	mov	r7, r6
 800807a:	42bb      	cmp	r3, r7
 800807c:	460e      	mov	r6, r1
 800807e:	d9f4      	bls.n	800806a <_printf_i+0x11a>
 8008080:	2b08      	cmp	r3, #8
 8008082:	d10b      	bne.n	800809c <_printf_i+0x14c>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	07de      	lsls	r6, r3, #31
 8008088:	d508      	bpl.n	800809c <_printf_i+0x14c>
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	6861      	ldr	r1, [r4, #4]
 800808e:	4299      	cmp	r1, r3
 8008090:	bfde      	ittt	le
 8008092:	2330      	movle	r3, #48	; 0x30
 8008094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008098:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800809c:	1b52      	subs	r2, r2, r5
 800809e:	6122      	str	r2, [r4, #16]
 80080a0:	f8cd a000 	str.w	sl, [sp]
 80080a4:	464b      	mov	r3, r9
 80080a6:	aa03      	add	r2, sp, #12
 80080a8:	4621      	mov	r1, r4
 80080aa:	4640      	mov	r0, r8
 80080ac:	f7ff fee2 	bl	8007e74 <_printf_common>
 80080b0:	3001      	adds	r0, #1
 80080b2:	d14c      	bne.n	800814e <_printf_i+0x1fe>
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080b8:	b004      	add	sp, #16
 80080ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080be:	4835      	ldr	r0, [pc, #212]	; (8008194 <_printf_i+0x244>)
 80080c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080c4:	6829      	ldr	r1, [r5, #0]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80080cc:	6029      	str	r1, [r5, #0]
 80080ce:	061d      	lsls	r5, r3, #24
 80080d0:	d514      	bpl.n	80080fc <_printf_i+0x1ac>
 80080d2:	07df      	lsls	r7, r3, #31
 80080d4:	bf44      	itt	mi
 80080d6:	f043 0320 	orrmi.w	r3, r3, #32
 80080da:	6023      	strmi	r3, [r4, #0]
 80080dc:	b91e      	cbnz	r6, 80080e6 <_printf_i+0x196>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	f023 0320 	bic.w	r3, r3, #32
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	2310      	movs	r3, #16
 80080e8:	e7b0      	b.n	800804c <_printf_i+0xfc>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	f043 0320 	orr.w	r3, r3, #32
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	2378      	movs	r3, #120	; 0x78
 80080f4:	4828      	ldr	r0, [pc, #160]	; (8008198 <_printf_i+0x248>)
 80080f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080fa:	e7e3      	b.n	80080c4 <_printf_i+0x174>
 80080fc:	0659      	lsls	r1, r3, #25
 80080fe:	bf48      	it	mi
 8008100:	b2b6      	uxthmi	r6, r6
 8008102:	e7e6      	b.n	80080d2 <_printf_i+0x182>
 8008104:	4615      	mov	r5, r2
 8008106:	e7bb      	b.n	8008080 <_printf_i+0x130>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	6826      	ldr	r6, [r4, #0]
 800810c:	6961      	ldr	r1, [r4, #20]
 800810e:	1d18      	adds	r0, r3, #4
 8008110:	6028      	str	r0, [r5, #0]
 8008112:	0635      	lsls	r5, r6, #24
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	d501      	bpl.n	800811c <_printf_i+0x1cc>
 8008118:	6019      	str	r1, [r3, #0]
 800811a:	e002      	b.n	8008122 <_printf_i+0x1d2>
 800811c:	0670      	lsls	r0, r6, #25
 800811e:	d5fb      	bpl.n	8008118 <_printf_i+0x1c8>
 8008120:	8019      	strh	r1, [r3, #0]
 8008122:	2300      	movs	r3, #0
 8008124:	6123      	str	r3, [r4, #16]
 8008126:	4615      	mov	r5, r2
 8008128:	e7ba      	b.n	80080a0 <_printf_i+0x150>
 800812a:	682b      	ldr	r3, [r5, #0]
 800812c:	1d1a      	adds	r2, r3, #4
 800812e:	602a      	str	r2, [r5, #0]
 8008130:	681d      	ldr	r5, [r3, #0]
 8008132:	6862      	ldr	r2, [r4, #4]
 8008134:	2100      	movs	r1, #0
 8008136:	4628      	mov	r0, r5
 8008138:	f7f8 f88a 	bl	8000250 <memchr>
 800813c:	b108      	cbz	r0, 8008142 <_printf_i+0x1f2>
 800813e:	1b40      	subs	r0, r0, r5
 8008140:	6060      	str	r0, [r4, #4]
 8008142:	6863      	ldr	r3, [r4, #4]
 8008144:	6123      	str	r3, [r4, #16]
 8008146:	2300      	movs	r3, #0
 8008148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800814c:	e7a8      	b.n	80080a0 <_printf_i+0x150>
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	462a      	mov	r2, r5
 8008152:	4649      	mov	r1, r9
 8008154:	4640      	mov	r0, r8
 8008156:	47d0      	blx	sl
 8008158:	3001      	adds	r0, #1
 800815a:	d0ab      	beq.n	80080b4 <_printf_i+0x164>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	079b      	lsls	r3, r3, #30
 8008160:	d413      	bmi.n	800818a <_printf_i+0x23a>
 8008162:	68e0      	ldr	r0, [r4, #12]
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	4298      	cmp	r0, r3
 8008168:	bfb8      	it	lt
 800816a:	4618      	movlt	r0, r3
 800816c:	e7a4      	b.n	80080b8 <_printf_i+0x168>
 800816e:	2301      	movs	r3, #1
 8008170:	4632      	mov	r2, r6
 8008172:	4649      	mov	r1, r9
 8008174:	4640      	mov	r0, r8
 8008176:	47d0      	blx	sl
 8008178:	3001      	adds	r0, #1
 800817a:	d09b      	beq.n	80080b4 <_printf_i+0x164>
 800817c:	3501      	adds	r5, #1
 800817e:	68e3      	ldr	r3, [r4, #12]
 8008180:	9903      	ldr	r1, [sp, #12]
 8008182:	1a5b      	subs	r3, r3, r1
 8008184:	42ab      	cmp	r3, r5
 8008186:	dcf2      	bgt.n	800816e <_printf_i+0x21e>
 8008188:	e7eb      	b.n	8008162 <_printf_i+0x212>
 800818a:	2500      	movs	r5, #0
 800818c:	f104 0619 	add.w	r6, r4, #25
 8008190:	e7f5      	b.n	800817e <_printf_i+0x22e>
 8008192:	bf00      	nop
 8008194:	0800bf26 	.word	0x0800bf26
 8008198:	0800bf37 	.word	0x0800bf37

0800819c <_scanf_float>:
 800819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	b087      	sub	sp, #28
 80081a2:	4617      	mov	r7, r2
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	688b      	ldr	r3, [r1, #8]
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80081ae:	bf83      	ittte	hi
 80081b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80081b4:	195b      	addhi	r3, r3, r5
 80081b6:	9302      	strhi	r3, [sp, #8]
 80081b8:	2300      	movls	r3, #0
 80081ba:	bf86      	itte	hi
 80081bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80081c0:	608b      	strhi	r3, [r1, #8]
 80081c2:	9302      	strls	r3, [sp, #8]
 80081c4:	680b      	ldr	r3, [r1, #0]
 80081c6:	468b      	mov	fp, r1
 80081c8:	2500      	movs	r5, #0
 80081ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80081ce:	f84b 3b1c 	str.w	r3, [fp], #28
 80081d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081d6:	4680      	mov	r8, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	465e      	mov	r6, fp
 80081dc:	46aa      	mov	sl, r5
 80081de:	46a9      	mov	r9, r5
 80081e0:	9501      	str	r5, [sp, #4]
 80081e2:	68a2      	ldr	r2, [r4, #8]
 80081e4:	b152      	cbz	r2, 80081fc <_scanf_float+0x60>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b4e      	cmp	r3, #78	; 0x4e
 80081ec:	d864      	bhi.n	80082b8 <_scanf_float+0x11c>
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d83c      	bhi.n	800826c <_scanf_float+0xd0>
 80081f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80081f6:	b2c8      	uxtb	r0, r1
 80081f8:	280e      	cmp	r0, #14
 80081fa:	d93a      	bls.n	8008272 <_scanf_float+0xd6>
 80081fc:	f1b9 0f00 	cmp.w	r9, #0
 8008200:	d003      	beq.n	800820a <_scanf_float+0x6e>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800820e:	f1ba 0f01 	cmp.w	sl, #1
 8008212:	f200 8113 	bhi.w	800843c <_scanf_float+0x2a0>
 8008216:	455e      	cmp	r6, fp
 8008218:	f200 8105 	bhi.w	8008426 <_scanf_float+0x28a>
 800821c:	2501      	movs	r5, #1
 800821e:	4628      	mov	r0, r5
 8008220:	b007      	add	sp, #28
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800822a:	2a0d      	cmp	r2, #13
 800822c:	d8e6      	bhi.n	80081fc <_scanf_float+0x60>
 800822e:	a101      	add	r1, pc, #4	; (adr r1, 8008234 <_scanf_float+0x98>)
 8008230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008234:	08008373 	.word	0x08008373
 8008238:	080081fd 	.word	0x080081fd
 800823c:	080081fd 	.word	0x080081fd
 8008240:	080081fd 	.word	0x080081fd
 8008244:	080083d3 	.word	0x080083d3
 8008248:	080083ab 	.word	0x080083ab
 800824c:	080081fd 	.word	0x080081fd
 8008250:	080081fd 	.word	0x080081fd
 8008254:	08008381 	.word	0x08008381
 8008258:	080081fd 	.word	0x080081fd
 800825c:	080081fd 	.word	0x080081fd
 8008260:	080081fd 	.word	0x080081fd
 8008264:	080081fd 	.word	0x080081fd
 8008268:	08008339 	.word	0x08008339
 800826c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008270:	e7db      	b.n	800822a <_scanf_float+0x8e>
 8008272:	290e      	cmp	r1, #14
 8008274:	d8c2      	bhi.n	80081fc <_scanf_float+0x60>
 8008276:	a001      	add	r0, pc, #4	; (adr r0, 800827c <_scanf_float+0xe0>)
 8008278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800827c:	0800832b 	.word	0x0800832b
 8008280:	080081fd 	.word	0x080081fd
 8008284:	0800832b 	.word	0x0800832b
 8008288:	080083bf 	.word	0x080083bf
 800828c:	080081fd 	.word	0x080081fd
 8008290:	080082d9 	.word	0x080082d9
 8008294:	08008315 	.word	0x08008315
 8008298:	08008315 	.word	0x08008315
 800829c:	08008315 	.word	0x08008315
 80082a0:	08008315 	.word	0x08008315
 80082a4:	08008315 	.word	0x08008315
 80082a8:	08008315 	.word	0x08008315
 80082ac:	08008315 	.word	0x08008315
 80082b0:	08008315 	.word	0x08008315
 80082b4:	08008315 	.word	0x08008315
 80082b8:	2b6e      	cmp	r3, #110	; 0x6e
 80082ba:	d809      	bhi.n	80082d0 <_scanf_float+0x134>
 80082bc:	2b60      	cmp	r3, #96	; 0x60
 80082be:	d8b2      	bhi.n	8008226 <_scanf_float+0x8a>
 80082c0:	2b54      	cmp	r3, #84	; 0x54
 80082c2:	d077      	beq.n	80083b4 <_scanf_float+0x218>
 80082c4:	2b59      	cmp	r3, #89	; 0x59
 80082c6:	d199      	bne.n	80081fc <_scanf_float+0x60>
 80082c8:	2d07      	cmp	r5, #7
 80082ca:	d197      	bne.n	80081fc <_scanf_float+0x60>
 80082cc:	2508      	movs	r5, #8
 80082ce:	e029      	b.n	8008324 <_scanf_float+0x188>
 80082d0:	2b74      	cmp	r3, #116	; 0x74
 80082d2:	d06f      	beq.n	80083b4 <_scanf_float+0x218>
 80082d4:	2b79      	cmp	r3, #121	; 0x79
 80082d6:	e7f6      	b.n	80082c6 <_scanf_float+0x12a>
 80082d8:	6821      	ldr	r1, [r4, #0]
 80082da:	05c8      	lsls	r0, r1, #23
 80082dc:	d51a      	bpl.n	8008314 <_scanf_float+0x178>
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80082e4:	6021      	str	r1, [r4, #0]
 80082e6:	f109 0901 	add.w	r9, r9, #1
 80082ea:	b11b      	cbz	r3, 80082f4 <_scanf_float+0x158>
 80082ec:	3b01      	subs	r3, #1
 80082ee:	3201      	adds	r2, #1
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	60a2      	str	r2, [r4, #8]
 80082f4:	68a3      	ldr	r3, [r4, #8]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	60a3      	str	r3, [r4, #8]
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	3301      	adds	r3, #1
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3b01      	subs	r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	f340 8084 	ble.w	8008414 <_scanf_float+0x278>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	3301      	adds	r3, #1
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	e766      	b.n	80081e2 <_scanf_float+0x46>
 8008314:	eb1a 0f05 	cmn.w	sl, r5
 8008318:	f47f af70 	bne.w	80081fc <_scanf_float+0x60>
 800831c:	6822      	ldr	r2, [r4, #0]
 800831e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008322:	6022      	str	r2, [r4, #0]
 8008324:	f806 3b01 	strb.w	r3, [r6], #1
 8008328:	e7e4      	b.n	80082f4 <_scanf_float+0x158>
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	0610      	lsls	r0, r2, #24
 800832e:	f57f af65 	bpl.w	80081fc <_scanf_float+0x60>
 8008332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008336:	e7f4      	b.n	8008322 <_scanf_float+0x186>
 8008338:	f1ba 0f00 	cmp.w	sl, #0
 800833c:	d10e      	bne.n	800835c <_scanf_float+0x1c0>
 800833e:	f1b9 0f00 	cmp.w	r9, #0
 8008342:	d10e      	bne.n	8008362 <_scanf_float+0x1c6>
 8008344:	6822      	ldr	r2, [r4, #0]
 8008346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800834a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800834e:	d108      	bne.n	8008362 <_scanf_float+0x1c6>
 8008350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	f04f 0a01 	mov.w	sl, #1
 800835a:	e7e3      	b.n	8008324 <_scanf_float+0x188>
 800835c:	f1ba 0f02 	cmp.w	sl, #2
 8008360:	d055      	beq.n	800840e <_scanf_float+0x272>
 8008362:	2d01      	cmp	r5, #1
 8008364:	d002      	beq.n	800836c <_scanf_float+0x1d0>
 8008366:	2d04      	cmp	r5, #4
 8008368:	f47f af48 	bne.w	80081fc <_scanf_float+0x60>
 800836c:	3501      	adds	r5, #1
 800836e:	b2ed      	uxtb	r5, r5
 8008370:	e7d8      	b.n	8008324 <_scanf_float+0x188>
 8008372:	f1ba 0f01 	cmp.w	sl, #1
 8008376:	f47f af41 	bne.w	80081fc <_scanf_float+0x60>
 800837a:	f04f 0a02 	mov.w	sl, #2
 800837e:	e7d1      	b.n	8008324 <_scanf_float+0x188>
 8008380:	b97d      	cbnz	r5, 80083a2 <_scanf_float+0x206>
 8008382:	f1b9 0f00 	cmp.w	r9, #0
 8008386:	f47f af3c 	bne.w	8008202 <_scanf_float+0x66>
 800838a:	6822      	ldr	r2, [r4, #0]
 800838c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008394:	f47f af39 	bne.w	800820a <_scanf_float+0x6e>
 8008398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	2501      	movs	r5, #1
 80083a0:	e7c0      	b.n	8008324 <_scanf_float+0x188>
 80083a2:	2d03      	cmp	r5, #3
 80083a4:	d0e2      	beq.n	800836c <_scanf_float+0x1d0>
 80083a6:	2d05      	cmp	r5, #5
 80083a8:	e7de      	b.n	8008368 <_scanf_float+0x1cc>
 80083aa:	2d02      	cmp	r5, #2
 80083ac:	f47f af26 	bne.w	80081fc <_scanf_float+0x60>
 80083b0:	2503      	movs	r5, #3
 80083b2:	e7b7      	b.n	8008324 <_scanf_float+0x188>
 80083b4:	2d06      	cmp	r5, #6
 80083b6:	f47f af21 	bne.w	80081fc <_scanf_float+0x60>
 80083ba:	2507      	movs	r5, #7
 80083bc:	e7b2      	b.n	8008324 <_scanf_float+0x188>
 80083be:	6822      	ldr	r2, [r4, #0]
 80083c0:	0591      	lsls	r1, r2, #22
 80083c2:	f57f af1b 	bpl.w	80081fc <_scanf_float+0x60>
 80083c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80083ca:	6022      	str	r2, [r4, #0]
 80083cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80083d0:	e7a8      	b.n	8008324 <_scanf_float+0x188>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80083d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80083dc:	d006      	beq.n	80083ec <_scanf_float+0x250>
 80083de:	0550      	lsls	r0, r2, #21
 80083e0:	f57f af0c 	bpl.w	80081fc <_scanf_float+0x60>
 80083e4:	f1b9 0f00 	cmp.w	r9, #0
 80083e8:	f43f af0f 	beq.w	800820a <_scanf_float+0x6e>
 80083ec:	0591      	lsls	r1, r2, #22
 80083ee:	bf58      	it	pl
 80083f0:	9901      	ldrpl	r1, [sp, #4]
 80083f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083f6:	bf58      	it	pl
 80083f8:	eba9 0101 	subpl.w	r1, r9, r1
 80083fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008400:	bf58      	it	pl
 8008402:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	f04f 0900 	mov.w	r9, #0
 800840c:	e78a      	b.n	8008324 <_scanf_float+0x188>
 800840e:	f04f 0a03 	mov.w	sl, #3
 8008412:	e787      	b.n	8008324 <_scanf_float+0x188>
 8008414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008418:	4639      	mov	r1, r7
 800841a:	4640      	mov	r0, r8
 800841c:	4798      	blx	r3
 800841e:	2800      	cmp	r0, #0
 8008420:	f43f aedf 	beq.w	80081e2 <_scanf_float+0x46>
 8008424:	e6ea      	b.n	80081fc <_scanf_float+0x60>
 8008426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800842a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800842e:	463a      	mov	r2, r7
 8008430:	4640      	mov	r0, r8
 8008432:	4798      	blx	r3
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	3b01      	subs	r3, #1
 8008438:	6123      	str	r3, [r4, #16]
 800843a:	e6ec      	b.n	8008216 <_scanf_float+0x7a>
 800843c:	1e6b      	subs	r3, r5, #1
 800843e:	2b06      	cmp	r3, #6
 8008440:	d825      	bhi.n	800848e <_scanf_float+0x2f2>
 8008442:	2d02      	cmp	r5, #2
 8008444:	d836      	bhi.n	80084b4 <_scanf_float+0x318>
 8008446:	455e      	cmp	r6, fp
 8008448:	f67f aee8 	bls.w	800821c <_scanf_float+0x80>
 800844c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008450:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008454:	463a      	mov	r2, r7
 8008456:	4640      	mov	r0, r8
 8008458:	4798      	blx	r3
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	3b01      	subs	r3, #1
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	e7f1      	b.n	8008446 <_scanf_float+0x2aa>
 8008462:	9802      	ldr	r0, [sp, #8]
 8008464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800846c:	9002      	str	r0, [sp, #8]
 800846e:	463a      	mov	r2, r7
 8008470:	4640      	mov	r0, r8
 8008472:	4798      	blx	r3
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	3b01      	subs	r3, #1
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800847e:	fa5f fa8a 	uxtb.w	sl, sl
 8008482:	f1ba 0f02 	cmp.w	sl, #2
 8008486:	d1ec      	bne.n	8008462 <_scanf_float+0x2c6>
 8008488:	3d03      	subs	r5, #3
 800848a:	b2ed      	uxtb	r5, r5
 800848c:	1b76      	subs	r6, r6, r5
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	05da      	lsls	r2, r3, #23
 8008492:	d52f      	bpl.n	80084f4 <_scanf_float+0x358>
 8008494:	055b      	lsls	r3, r3, #21
 8008496:	d510      	bpl.n	80084ba <_scanf_float+0x31e>
 8008498:	455e      	cmp	r6, fp
 800849a:	f67f aebf 	bls.w	800821c <_scanf_float+0x80>
 800849e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084a6:	463a      	mov	r2, r7
 80084a8:	4640      	mov	r0, r8
 80084aa:	4798      	blx	r3
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	e7f1      	b.n	8008498 <_scanf_float+0x2fc>
 80084b4:	46aa      	mov	sl, r5
 80084b6:	9602      	str	r6, [sp, #8]
 80084b8:	e7df      	b.n	800847a <_scanf_float+0x2de>
 80084ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	2965      	cmp	r1, #101	; 0x65
 80084c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80084c6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	d00c      	beq.n	80084e8 <_scanf_float+0x34c>
 80084ce:	2945      	cmp	r1, #69	; 0x45
 80084d0:	d00a      	beq.n	80084e8 <_scanf_float+0x34c>
 80084d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084d6:	463a      	mov	r2, r7
 80084d8:	4640      	mov	r0, r8
 80084da:	4798      	blx	r3
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	1eb5      	subs	r5, r6, #2
 80084e6:	6123      	str	r3, [r4, #16]
 80084e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084ec:	463a      	mov	r2, r7
 80084ee:	4640      	mov	r0, r8
 80084f0:	4798      	blx	r3
 80084f2:	462e      	mov	r6, r5
 80084f4:	6825      	ldr	r5, [r4, #0]
 80084f6:	f015 0510 	ands.w	r5, r5, #16
 80084fa:	d14e      	bne.n	800859a <_scanf_float+0x3fe>
 80084fc:	7035      	strb	r5, [r6, #0]
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008508:	d119      	bne.n	800853e <_scanf_float+0x3a2>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	454b      	cmp	r3, r9
 800850e:	eba3 0209 	sub.w	r2, r3, r9
 8008512:	d121      	bne.n	8008558 <_scanf_float+0x3bc>
 8008514:	2200      	movs	r2, #0
 8008516:	4659      	mov	r1, fp
 8008518:	4640      	mov	r0, r8
 800851a:	f000 fefb 	bl	8009314 <_strtod_r>
 800851e:	6822      	ldr	r2, [r4, #0]
 8008520:	9b03      	ldr	r3, [sp, #12]
 8008522:	f012 0f02 	tst.w	r2, #2
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	d021      	beq.n	800856e <_scanf_float+0x3d2>
 800852a:	9903      	ldr	r1, [sp, #12]
 800852c:	1d1a      	adds	r2, r3, #4
 800852e:	600a      	str	r2, [r1, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	ed83 0b00 	vstr	d0, [r3]
 8008536:	68e3      	ldr	r3, [r4, #12]
 8008538:	3301      	adds	r3, #1
 800853a:	60e3      	str	r3, [r4, #12]
 800853c:	e66f      	b.n	800821e <_scanf_float+0x82>
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0e7      	beq.n	8008514 <_scanf_float+0x378>
 8008544:	9905      	ldr	r1, [sp, #20]
 8008546:	230a      	movs	r3, #10
 8008548:	462a      	mov	r2, r5
 800854a:	3101      	adds	r1, #1
 800854c:	4640      	mov	r0, r8
 800854e:	f000 ff69 	bl	8009424 <_strtol_r>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	9e05      	ldr	r6, [sp, #20]
 8008556:	1ac2      	subs	r2, r0, r3
 8008558:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800855c:	429e      	cmp	r6, r3
 800855e:	bf28      	it	cs
 8008560:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008564:	490e      	ldr	r1, [pc, #56]	; (80085a0 <_scanf_float+0x404>)
 8008566:	4630      	mov	r0, r6
 8008568:	f000 f89e 	bl	80086a8 <siprintf>
 800856c:	e7d2      	b.n	8008514 <_scanf_float+0x378>
 800856e:	9903      	ldr	r1, [sp, #12]
 8008570:	f012 0f04 	tst.w	r2, #4
 8008574:	f103 0204 	add.w	r2, r3, #4
 8008578:	600a      	str	r2, [r1, #0]
 800857a:	d1d9      	bne.n	8008530 <_scanf_float+0x394>
 800857c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	681e      	ldr	r6, [r3, #0]
 8008586:	d705      	bvc.n	8008594 <_scanf_float+0x3f8>
 8008588:	4806      	ldr	r0, [pc, #24]	; (80085a4 <_scanf_float+0x408>)
 800858a:	f000 f887 	bl	800869c <nanf>
 800858e:	ed86 0a00 	vstr	s0, [r6]
 8008592:	e7d0      	b.n	8008536 <_scanf_float+0x39a>
 8008594:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008598:	e7f9      	b.n	800858e <_scanf_float+0x3f2>
 800859a:	2500      	movs	r5, #0
 800859c:	e63f      	b.n	800821e <_scanf_float+0x82>
 800859e:	bf00      	nop
 80085a0:	0800bf48 	.word	0x0800bf48
 80085a4:	0800c350 	.word	0x0800c350

080085a8 <cleanup_glue>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	460c      	mov	r4, r1
 80085ac:	6809      	ldr	r1, [r1, #0]
 80085ae:	4605      	mov	r5, r0
 80085b0:	b109      	cbz	r1, 80085b6 <cleanup_glue+0xe>
 80085b2:	f7ff fff9 	bl	80085a8 <cleanup_glue>
 80085b6:	4621      	mov	r1, r4
 80085b8:	4628      	mov	r0, r5
 80085ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085be:	f002 be93 	b.w	800b2e8 <_free_r>
	...

080085c4 <_reclaim_reent>:
 80085c4:	4b2c      	ldr	r3, [pc, #176]	; (8008678 <_reclaim_reent+0xb4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4283      	cmp	r3, r0
 80085ca:	b570      	push	{r4, r5, r6, lr}
 80085cc:	4604      	mov	r4, r0
 80085ce:	d051      	beq.n	8008674 <_reclaim_reent+0xb0>
 80085d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80085d2:	b143      	cbz	r3, 80085e6 <_reclaim_reent+0x22>
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d14a      	bne.n	8008670 <_reclaim_reent+0xac>
 80085da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085dc:	6819      	ldr	r1, [r3, #0]
 80085de:	b111      	cbz	r1, 80085e6 <_reclaim_reent+0x22>
 80085e0:	4620      	mov	r0, r4
 80085e2:	f002 fe81 	bl	800b2e8 <_free_r>
 80085e6:	6961      	ldr	r1, [r4, #20]
 80085e8:	b111      	cbz	r1, 80085f0 <_reclaim_reent+0x2c>
 80085ea:	4620      	mov	r0, r4
 80085ec:	f002 fe7c 	bl	800b2e8 <_free_r>
 80085f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085f2:	b111      	cbz	r1, 80085fa <_reclaim_reent+0x36>
 80085f4:	4620      	mov	r0, r4
 80085f6:	f002 fe77 	bl	800b2e8 <_free_r>
 80085fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085fc:	b111      	cbz	r1, 8008604 <_reclaim_reent+0x40>
 80085fe:	4620      	mov	r0, r4
 8008600:	f002 fe72 	bl	800b2e8 <_free_r>
 8008604:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008606:	b111      	cbz	r1, 800860e <_reclaim_reent+0x4a>
 8008608:	4620      	mov	r0, r4
 800860a:	f002 fe6d 	bl	800b2e8 <_free_r>
 800860e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008610:	b111      	cbz	r1, 8008618 <_reclaim_reent+0x54>
 8008612:	4620      	mov	r0, r4
 8008614:	f002 fe68 	bl	800b2e8 <_free_r>
 8008618:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800861a:	b111      	cbz	r1, 8008622 <_reclaim_reent+0x5e>
 800861c:	4620      	mov	r0, r4
 800861e:	f002 fe63 	bl	800b2e8 <_free_r>
 8008622:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008624:	b111      	cbz	r1, 800862c <_reclaim_reent+0x68>
 8008626:	4620      	mov	r0, r4
 8008628:	f002 fe5e 	bl	800b2e8 <_free_r>
 800862c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800862e:	b111      	cbz	r1, 8008636 <_reclaim_reent+0x72>
 8008630:	4620      	mov	r0, r4
 8008632:	f002 fe59 	bl	800b2e8 <_free_r>
 8008636:	69a3      	ldr	r3, [r4, #24]
 8008638:	b1e3      	cbz	r3, 8008674 <_reclaim_reent+0xb0>
 800863a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800863c:	4620      	mov	r0, r4
 800863e:	4798      	blx	r3
 8008640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008642:	b1b9      	cbz	r1, 8008674 <_reclaim_reent+0xb0>
 8008644:	4620      	mov	r0, r4
 8008646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800864a:	f7ff bfad 	b.w	80085a8 <cleanup_glue>
 800864e:	5949      	ldr	r1, [r1, r5]
 8008650:	b941      	cbnz	r1, 8008664 <_reclaim_reent+0xa0>
 8008652:	3504      	adds	r5, #4
 8008654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008656:	2d80      	cmp	r5, #128	; 0x80
 8008658:	68d9      	ldr	r1, [r3, #12]
 800865a:	d1f8      	bne.n	800864e <_reclaim_reent+0x8a>
 800865c:	4620      	mov	r0, r4
 800865e:	f002 fe43 	bl	800b2e8 <_free_r>
 8008662:	e7ba      	b.n	80085da <_reclaim_reent+0x16>
 8008664:	680e      	ldr	r6, [r1, #0]
 8008666:	4620      	mov	r0, r4
 8008668:	f002 fe3e 	bl	800b2e8 <_free_r>
 800866c:	4631      	mov	r1, r6
 800866e:	e7ef      	b.n	8008650 <_reclaim_reent+0x8c>
 8008670:	2500      	movs	r5, #0
 8008672:	e7ef      	b.n	8008654 <_reclaim_reent+0x90>
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	bf00      	nop
 8008678:	20000010 	.word	0x20000010

0800867c <_sbrk_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d06      	ldr	r5, [pc, #24]	; (8008698 <_sbrk_r+0x1c>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f8 ffa4 	bl	80015d4 <_sbrk>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_sbrk_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_sbrk_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	20004d84 	.word	0x20004d84

0800869c <nanf>:
 800869c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086a4 <nanf+0x8>
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	7fc00000 	.word	0x7fc00000

080086a8 <siprintf>:
 80086a8:	b40e      	push	{r1, r2, r3}
 80086aa:	b500      	push	{lr}
 80086ac:	b09c      	sub	sp, #112	; 0x70
 80086ae:	ab1d      	add	r3, sp, #116	; 0x74
 80086b0:	9002      	str	r0, [sp, #8]
 80086b2:	9006      	str	r0, [sp, #24]
 80086b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086b8:	4809      	ldr	r0, [pc, #36]	; (80086e0 <siprintf+0x38>)
 80086ba:	9107      	str	r1, [sp, #28]
 80086bc:	9104      	str	r1, [sp, #16]
 80086be:	4909      	ldr	r1, [pc, #36]	; (80086e4 <siprintf+0x3c>)
 80086c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c4:	9105      	str	r1, [sp, #20]
 80086c6:	6800      	ldr	r0, [r0, #0]
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	a902      	add	r1, sp, #8
 80086cc:	f002 feb4 	bl	800b438 <_svfiprintf_r>
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	b01c      	add	sp, #112	; 0x70
 80086d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086dc:	b003      	add	sp, #12
 80086de:	4770      	bx	lr
 80086e0:	20000010 	.word	0x20000010
 80086e4:	ffff0208 	.word	0xffff0208

080086e8 <__sread>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	f002 ffa2 	bl	800b638 <_read_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	bfab      	itete	ge
 80086f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fa:	89a3      	ldrhlt	r3, [r4, #12]
 80086fc:	181b      	addge	r3, r3, r0
 80086fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008702:	bfac      	ite	ge
 8008704:	6563      	strge	r3, [r4, #84]	; 0x54
 8008706:	81a3      	strhlt	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__swrite>:
 800870a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	461f      	mov	r7, r3
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	05db      	lsls	r3, r3, #23
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4616      	mov	r6, r2
 800871a:	d505      	bpl.n	8008728 <__swrite+0x1e>
 800871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008720:	2302      	movs	r3, #2
 8008722:	2200      	movs	r2, #0
 8008724:	f002 f8d4 	bl	800a8d0 <_lseek_r>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	4628      	mov	r0, r5
 800873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	f000 be73 	b.w	8009428 <_write_r>

08008742 <__sseek>:
 8008742:	b510      	push	{r4, lr}
 8008744:	460c      	mov	r4, r1
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f002 f8c1 	bl	800a8d0 <_lseek_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	bf15      	itete	ne
 8008754:	6560      	strne	r0, [r4, #84]	; 0x54
 8008756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800875e:	81a3      	strheq	r3, [r4, #12]
 8008760:	bf18      	it	ne
 8008762:	81a3      	strhne	r3, [r4, #12]
 8008764:	bd10      	pop	{r4, pc}

08008766 <__sclose>:
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 be6f 	b.w	800944c <_close_r>

0800876e <sulp>:
 800876e:	b570      	push	{r4, r5, r6, lr}
 8008770:	4604      	mov	r4, r0
 8008772:	460d      	mov	r5, r1
 8008774:	4616      	mov	r6, r2
 8008776:	ec45 4b10 	vmov	d0, r4, r5
 800877a:	f002 fc53 	bl	800b024 <__ulp>
 800877e:	b17e      	cbz	r6, 80087a0 <sulp+0x32>
 8008780:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008784:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008788:	2b00      	cmp	r3, #0
 800878a:	dd09      	ble.n	80087a0 <sulp+0x32>
 800878c:	051b      	lsls	r3, r3, #20
 800878e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008792:	2000      	movs	r0, #0
 8008794:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008798:	ec41 0b17 	vmov	d7, r0, r1
 800879c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	0000      	movs	r0, r0
 80087a4:	0000      	movs	r0, r0
	...

080087a8 <_strtod_l>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	ed2d 8b0e 	vpush	{d8-d14}
 80087b0:	b097      	sub	sp, #92	; 0x5c
 80087b2:	461f      	mov	r7, r3
 80087b4:	2300      	movs	r3, #0
 80087b6:	9312      	str	r3, [sp, #72]	; 0x48
 80087b8:	4ba1      	ldr	r3, [pc, #644]	; (8008a40 <_strtod_l+0x298>)
 80087ba:	920d      	str	r2, [sp, #52]	; 0x34
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	4604      	mov	r4, r0
 80087c2:	4618      	mov	r0, r3
 80087c4:	468b      	mov	fp, r1
 80087c6:	f7f7 fd3b 	bl	8000240 <strlen>
 80087ca:	f04f 0800 	mov.w	r8, #0
 80087ce:	4605      	mov	r5, r0
 80087d0:	f04f 0900 	mov.w	r9, #0
 80087d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80087d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087da:	7813      	ldrb	r3, [r2, #0]
 80087dc:	2b2b      	cmp	r3, #43	; 0x2b
 80087de:	d04d      	beq.n	800887c <_strtod_l+0xd4>
 80087e0:	d83a      	bhi.n	8008858 <_strtod_l+0xb0>
 80087e2:	2b0d      	cmp	r3, #13
 80087e4:	d833      	bhi.n	800884e <_strtod_l+0xa6>
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d833      	bhi.n	8008852 <_strtod_l+0xaa>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d03d      	beq.n	800886a <_strtod_l+0xc2>
 80087ee:	2300      	movs	r3, #0
 80087f0:	9308      	str	r3, [sp, #32]
 80087f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80087f4:	7833      	ldrb	r3, [r6, #0]
 80087f6:	2b30      	cmp	r3, #48	; 0x30
 80087f8:	f040 80b0 	bne.w	800895c <_strtod_l+0x1b4>
 80087fc:	7873      	ldrb	r3, [r6, #1]
 80087fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008802:	2b58      	cmp	r3, #88	; 0x58
 8008804:	d167      	bne.n	80088d6 <_strtod_l+0x12e>
 8008806:	9b08      	ldr	r3, [sp, #32]
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	ab12      	add	r3, sp, #72	; 0x48
 800880c:	9702      	str	r7, [sp, #8]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4a8c      	ldr	r2, [pc, #560]	; (8008a44 <_strtod_l+0x29c>)
 8008812:	ab13      	add	r3, sp, #76	; 0x4c
 8008814:	a911      	add	r1, sp, #68	; 0x44
 8008816:	4620      	mov	r0, r4
 8008818:	f001 fd4e 	bl	800a2b8 <__gethex>
 800881c:	f010 0507 	ands.w	r5, r0, #7
 8008820:	4607      	mov	r7, r0
 8008822:	d005      	beq.n	8008830 <_strtod_l+0x88>
 8008824:	2d06      	cmp	r5, #6
 8008826:	d12b      	bne.n	8008880 <_strtod_l+0xd8>
 8008828:	3601      	adds	r6, #1
 800882a:	2300      	movs	r3, #0
 800882c:	9611      	str	r6, [sp, #68]	; 0x44
 800882e:	9308      	str	r3, [sp, #32]
 8008830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 854e 	bne.w	80092d4 <_strtod_l+0xb2c>
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	b1e3      	cbz	r3, 8008876 <_strtod_l+0xce>
 800883c:	ec49 8b17 	vmov	d7, r8, r9
 8008840:	eeb1 0b47 	vneg.f64	d0, d7
 8008844:	b017      	add	sp, #92	; 0x5c
 8008846:	ecbd 8b0e 	vpop	{d8-d14}
 800884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884e:	2b20      	cmp	r3, #32
 8008850:	d1cd      	bne.n	80087ee <_strtod_l+0x46>
 8008852:	3201      	adds	r2, #1
 8008854:	9211      	str	r2, [sp, #68]	; 0x44
 8008856:	e7bf      	b.n	80087d8 <_strtod_l+0x30>
 8008858:	2b2d      	cmp	r3, #45	; 0x2d
 800885a:	d1c8      	bne.n	80087ee <_strtod_l+0x46>
 800885c:	2301      	movs	r3, #1
 800885e:	9308      	str	r3, [sp, #32]
 8008860:	1c53      	adds	r3, r2, #1
 8008862:	9311      	str	r3, [sp, #68]	; 0x44
 8008864:	7853      	ldrb	r3, [r2, #1]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1c3      	bne.n	80087f2 <_strtod_l+0x4a>
 800886a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800886c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008870:	2b00      	cmp	r3, #0
 8008872:	f040 852d 	bne.w	80092d0 <_strtod_l+0xb28>
 8008876:	ec49 8b10 	vmov	d0, r8, r9
 800887a:	e7e3      	b.n	8008844 <_strtod_l+0x9c>
 800887c:	2300      	movs	r3, #0
 800887e:	e7ee      	b.n	800885e <_strtod_l+0xb6>
 8008880:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008882:	b13a      	cbz	r2, 8008894 <_strtod_l+0xec>
 8008884:	2135      	movs	r1, #53	; 0x35
 8008886:	a814      	add	r0, sp, #80	; 0x50
 8008888:	f002 fcd4 	bl	800b234 <__copybits>
 800888c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800888e:	4620      	mov	r0, r4
 8008890:	f002 f896 	bl	800a9c0 <_Bfree>
 8008894:	3d01      	subs	r5, #1
 8008896:	2d04      	cmp	r5, #4
 8008898:	d806      	bhi.n	80088a8 <_strtod_l+0x100>
 800889a:	e8df f005 	tbb	[pc, r5]
 800889e:	030a      	.short	0x030a
 80088a0:	1714      	.short	0x1714
 80088a2:	0a          	.byte	0x0a
 80088a3:	00          	.byte	0x00
 80088a4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80088a8:	073f      	lsls	r7, r7, #28
 80088aa:	d5c1      	bpl.n	8008830 <_strtod_l+0x88>
 80088ac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80088b0:	e7be      	b.n	8008830 <_strtod_l+0x88>
 80088b2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80088b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80088bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80088c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80088c4:	e7f0      	b.n	80088a8 <_strtod_l+0x100>
 80088c6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008a48 <_strtod_l+0x2a0>
 80088ca:	e7ed      	b.n	80088a8 <_strtod_l+0x100>
 80088cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80088d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80088d4:	e7e8      	b.n	80088a8 <_strtod_l+0x100>
 80088d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	9211      	str	r2, [sp, #68]	; 0x44
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	2b30      	cmp	r3, #48	; 0x30
 80088e0:	d0f9      	beq.n	80088d6 <_strtod_l+0x12e>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0a4      	beq.n	8008830 <_strtod_l+0x88>
 80088e6:	2301      	movs	r3, #1
 80088e8:	f04f 0a00 	mov.w	sl, #0
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088f0:	930a      	str	r3, [sp, #40]	; 0x28
 80088f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80088f6:	f8cd a018 	str.w	sl, [sp, #24]
 80088fa:	220a      	movs	r2, #10
 80088fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80088fe:	7807      	ldrb	r7, [r0, #0]
 8008900:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008904:	b2d9      	uxtb	r1, r3
 8008906:	2909      	cmp	r1, #9
 8008908:	d92a      	bls.n	8008960 <_strtod_l+0x1b8>
 800890a:	9907      	ldr	r1, [sp, #28]
 800890c:	462a      	mov	r2, r5
 800890e:	f002 feaf 	bl	800b670 <strncmp>
 8008912:	2800      	cmp	r0, #0
 8008914:	d033      	beq.n	800897e <_strtod_l+0x1d6>
 8008916:	2000      	movs	r0, #0
 8008918:	9b06      	ldr	r3, [sp, #24]
 800891a:	463a      	mov	r2, r7
 800891c:	4601      	mov	r1, r0
 800891e:	4607      	mov	r7, r0
 8008920:	2a65      	cmp	r2, #101	; 0x65
 8008922:	d001      	beq.n	8008928 <_strtod_l+0x180>
 8008924:	2a45      	cmp	r2, #69	; 0x45
 8008926:	d117      	bne.n	8008958 <_strtod_l+0x1b0>
 8008928:	b91b      	cbnz	r3, 8008932 <_strtod_l+0x18a>
 800892a:	9b04      	ldr	r3, [sp, #16]
 800892c:	4303      	orrs	r3, r0
 800892e:	d09c      	beq.n	800886a <_strtod_l+0xc2>
 8008930:	2300      	movs	r3, #0
 8008932:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008936:	f10b 0201 	add.w	r2, fp, #1
 800893a:	9211      	str	r2, [sp, #68]	; 0x44
 800893c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008940:	2a2b      	cmp	r2, #43	; 0x2b
 8008942:	d071      	beq.n	8008a28 <_strtod_l+0x280>
 8008944:	2a2d      	cmp	r2, #45	; 0x2d
 8008946:	d077      	beq.n	8008a38 <_strtod_l+0x290>
 8008948:	f04f 0e00 	mov.w	lr, #0
 800894c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008950:	2d09      	cmp	r5, #9
 8008952:	d97f      	bls.n	8008a54 <_strtod_l+0x2ac>
 8008954:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008958:	2500      	movs	r5, #0
 800895a:	e09b      	b.n	8008a94 <_strtod_l+0x2ec>
 800895c:	2300      	movs	r3, #0
 800895e:	e7c3      	b.n	80088e8 <_strtod_l+0x140>
 8008960:	9906      	ldr	r1, [sp, #24]
 8008962:	2908      	cmp	r1, #8
 8008964:	bfdd      	ittte	le
 8008966:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008968:	fb02 3301 	mlale	r3, r2, r1, r3
 800896c:	9309      	strle	r3, [sp, #36]	; 0x24
 800896e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	3001      	adds	r0, #1
 8008976:	3301      	adds	r3, #1
 8008978:	9306      	str	r3, [sp, #24]
 800897a:	9011      	str	r0, [sp, #68]	; 0x44
 800897c:	e7be      	b.n	80088fc <_strtod_l+0x154>
 800897e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008980:	195a      	adds	r2, r3, r5
 8008982:	9211      	str	r2, [sp, #68]	; 0x44
 8008984:	5d5a      	ldrb	r2, [r3, r5]
 8008986:	9b06      	ldr	r3, [sp, #24]
 8008988:	b3a3      	cbz	r3, 80089f4 <_strtod_l+0x24c>
 800898a:	4607      	mov	r7, r0
 800898c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008990:	2909      	cmp	r1, #9
 8008992:	d912      	bls.n	80089ba <_strtod_l+0x212>
 8008994:	2101      	movs	r1, #1
 8008996:	e7c3      	b.n	8008920 <_strtod_l+0x178>
 8008998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	9211      	str	r2, [sp, #68]	; 0x44
 800899e:	785a      	ldrb	r2, [r3, #1]
 80089a0:	3001      	adds	r0, #1
 80089a2:	2a30      	cmp	r2, #48	; 0x30
 80089a4:	d0f8      	beq.n	8008998 <_strtod_l+0x1f0>
 80089a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	f200 8497 	bhi.w	80092de <_strtod_l+0xb36>
 80089b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089b2:	930a      	str	r3, [sp, #40]	; 0x28
 80089b4:	4607      	mov	r7, r0
 80089b6:	2000      	movs	r0, #0
 80089b8:	4603      	mov	r3, r0
 80089ba:	3a30      	subs	r2, #48	; 0x30
 80089bc:	f100 0101 	add.w	r1, r0, #1
 80089c0:	d012      	beq.n	80089e8 <_strtod_l+0x240>
 80089c2:	440f      	add	r7, r1
 80089c4:	eb00 0c03 	add.w	ip, r0, r3
 80089c8:	4619      	mov	r1, r3
 80089ca:	250a      	movs	r5, #10
 80089cc:	4561      	cmp	r1, ip
 80089ce:	d113      	bne.n	80089f8 <_strtod_l+0x250>
 80089d0:	1819      	adds	r1, r3, r0
 80089d2:	2908      	cmp	r1, #8
 80089d4:	f103 0301 	add.w	r3, r3, #1
 80089d8:	4403      	add	r3, r0
 80089da:	dc1c      	bgt.n	8008a16 <_strtod_l+0x26e>
 80089dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089de:	210a      	movs	r1, #10
 80089e0:	fb01 2200 	mla	r2, r1, r0, r2
 80089e4:	9209      	str	r2, [sp, #36]	; 0x24
 80089e6:	2100      	movs	r1, #0
 80089e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089ea:	1c50      	adds	r0, r2, #1
 80089ec:	9011      	str	r0, [sp, #68]	; 0x44
 80089ee:	7852      	ldrb	r2, [r2, #1]
 80089f0:	4608      	mov	r0, r1
 80089f2:	e7cb      	b.n	800898c <_strtod_l+0x1e4>
 80089f4:	9806      	ldr	r0, [sp, #24]
 80089f6:	e7d4      	b.n	80089a2 <_strtod_l+0x1fa>
 80089f8:	2908      	cmp	r1, #8
 80089fa:	dc04      	bgt.n	8008a06 <_strtod_l+0x25e>
 80089fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089fe:	436e      	muls	r6, r5
 8008a00:	9609      	str	r6, [sp, #36]	; 0x24
 8008a02:	3101      	adds	r1, #1
 8008a04:	e7e2      	b.n	80089cc <_strtod_l+0x224>
 8008a06:	f101 0e01 	add.w	lr, r1, #1
 8008a0a:	f1be 0f10 	cmp.w	lr, #16
 8008a0e:	bfd8      	it	le
 8008a10:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008a14:	e7f5      	b.n	8008a02 <_strtod_l+0x25a>
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	bfdc      	itt	le
 8008a1a:	210a      	movle	r1, #10
 8008a1c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008a20:	e7e1      	b.n	80089e6 <_strtod_l+0x23e>
 8008a22:	2700      	movs	r7, #0
 8008a24:	2101      	movs	r1, #1
 8008a26:	e780      	b.n	800892a <_strtod_l+0x182>
 8008a28:	f04f 0e00 	mov.w	lr, #0
 8008a2c:	f10b 0202 	add.w	r2, fp, #2
 8008a30:	9211      	str	r2, [sp, #68]	; 0x44
 8008a32:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008a36:	e789      	b.n	800894c <_strtod_l+0x1a4>
 8008a38:	f04f 0e01 	mov.w	lr, #1
 8008a3c:	e7f6      	b.n	8008a2c <_strtod_l+0x284>
 8008a3e:	bf00      	nop
 8008a40:	0800c198 	.word	0x0800c198
 8008a44:	0800bf50 	.word	0x0800bf50
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a4e:	1c55      	adds	r5, r2, #1
 8008a50:	9511      	str	r5, [sp, #68]	; 0x44
 8008a52:	7852      	ldrb	r2, [r2, #1]
 8008a54:	2a30      	cmp	r2, #48	; 0x30
 8008a56:	d0f9      	beq.n	8008a4c <_strtod_l+0x2a4>
 8008a58:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008a5c:	2d08      	cmp	r5, #8
 8008a5e:	f63f af7b 	bhi.w	8008958 <_strtod_l+0x1b0>
 8008a62:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008a66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a68:	9207      	str	r2, [sp, #28]
 8008a6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a6c:	1c55      	adds	r5, r2, #1
 8008a6e:	9511      	str	r5, [sp, #68]	; 0x44
 8008a70:	7852      	ldrb	r2, [r2, #1]
 8008a72:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008a76:	2e09      	cmp	r6, #9
 8008a78:	d937      	bls.n	8008aea <_strtod_l+0x342>
 8008a7a:	9e07      	ldr	r6, [sp, #28]
 8008a7c:	1bad      	subs	r5, r5, r6
 8008a7e:	2d08      	cmp	r5, #8
 8008a80:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008a84:	dc02      	bgt.n	8008a8c <_strtod_l+0x2e4>
 8008a86:	4565      	cmp	r5, ip
 8008a88:	bfa8      	it	ge
 8008a8a:	4665      	movge	r5, ip
 8008a8c:	f1be 0f00 	cmp.w	lr, #0
 8008a90:	d000      	beq.n	8008a94 <_strtod_l+0x2ec>
 8008a92:	426d      	negs	r5, r5
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d14d      	bne.n	8008b34 <_strtod_l+0x38c>
 8008a98:	9b04      	ldr	r3, [sp, #16]
 8008a9a:	4303      	orrs	r3, r0
 8008a9c:	f47f aec8 	bne.w	8008830 <_strtod_l+0x88>
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	f47f aee2 	bne.w	800886a <_strtod_l+0xc2>
 8008aa6:	2a69      	cmp	r2, #105	; 0x69
 8008aa8:	d027      	beq.n	8008afa <_strtod_l+0x352>
 8008aaa:	dc24      	bgt.n	8008af6 <_strtod_l+0x34e>
 8008aac:	2a49      	cmp	r2, #73	; 0x49
 8008aae:	d024      	beq.n	8008afa <_strtod_l+0x352>
 8008ab0:	2a4e      	cmp	r2, #78	; 0x4e
 8008ab2:	f47f aeda 	bne.w	800886a <_strtod_l+0xc2>
 8008ab6:	4996      	ldr	r1, [pc, #600]	; (8008d10 <_strtod_l+0x568>)
 8008ab8:	a811      	add	r0, sp, #68	; 0x44
 8008aba:	f001 fe55 	bl	800a768 <__match>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f aed3 	beq.w	800886a <_strtod_l+0xc2>
 8008ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b28      	cmp	r3, #40	; 0x28
 8008aca:	d12d      	bne.n	8008b28 <_strtod_l+0x380>
 8008acc:	4991      	ldr	r1, [pc, #580]	; (8008d14 <_strtod_l+0x56c>)
 8008ace:	aa14      	add	r2, sp, #80	; 0x50
 8008ad0:	a811      	add	r0, sp, #68	; 0x44
 8008ad2:	f001 fe5d 	bl	800a790 <__hexnan>
 8008ad6:	2805      	cmp	r0, #5
 8008ad8:	d126      	bne.n	8008b28 <_strtod_l+0x380>
 8008ada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008adc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008ae0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008ae4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008ae8:	e6a2      	b.n	8008830 <_strtod_l+0x88>
 8008aea:	250a      	movs	r5, #10
 8008aec:	fb05 250c 	mla	r5, r5, ip, r2
 8008af0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008af4:	e7b9      	b.n	8008a6a <_strtod_l+0x2c2>
 8008af6:	2a6e      	cmp	r2, #110	; 0x6e
 8008af8:	e7db      	b.n	8008ab2 <_strtod_l+0x30a>
 8008afa:	4987      	ldr	r1, [pc, #540]	; (8008d18 <_strtod_l+0x570>)
 8008afc:	a811      	add	r0, sp, #68	; 0x44
 8008afe:	f001 fe33 	bl	800a768 <__match>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f43f aeb1 	beq.w	800886a <_strtod_l+0xc2>
 8008b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b0a:	4984      	ldr	r1, [pc, #528]	; (8008d1c <_strtod_l+0x574>)
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	a811      	add	r0, sp, #68	; 0x44
 8008b10:	9311      	str	r3, [sp, #68]	; 0x44
 8008b12:	f001 fe29 	bl	800a768 <__match>
 8008b16:	b910      	cbnz	r0, 8008b1e <_strtod_l+0x376>
 8008b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	9311      	str	r3, [sp, #68]	; 0x44
 8008b1e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008d30 <_strtod_l+0x588>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	e683      	b.n	8008830 <_strtod_l+0x88>
 8008b28:	487d      	ldr	r0, [pc, #500]	; (8008d20 <_strtod_l+0x578>)
 8008b2a:	f002 fd99 	bl	800b660 <nan>
 8008b2e:	ec59 8b10 	vmov	r8, r9, d0
 8008b32:	e67d      	b.n	8008830 <_strtod_l+0x88>
 8008b34:	1bea      	subs	r2, r5, r7
 8008b36:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008b3a:	9207      	str	r2, [sp, #28]
 8008b3c:	9a06      	ldr	r2, [sp, #24]
 8008b3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	bf08      	it	eq
 8008b46:	461a      	moveq	r2, r3
 8008b48:	2b10      	cmp	r3, #16
 8008b4a:	9206      	str	r2, [sp, #24]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	bfa8      	it	ge
 8008b50:	2210      	movge	r2, #16
 8008b52:	2b09      	cmp	r3, #9
 8008b54:	ec59 8b17 	vmov	r8, r9, d7
 8008b58:	dd0c      	ble.n	8008b74 <_strtod_l+0x3cc>
 8008b5a:	4972      	ldr	r1, [pc, #456]	; (8008d24 <_strtod_l+0x57c>)
 8008b5c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008b60:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008b64:	ee06 aa90 	vmov	s13, sl
 8008b68:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008b6c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008b70:	ec59 8b16 	vmov	r8, r9, d6
 8008b74:	2b0f      	cmp	r3, #15
 8008b76:	dc36      	bgt.n	8008be6 <_strtod_l+0x43e>
 8008b78:	9907      	ldr	r1, [sp, #28]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	f43f ae58 	beq.w	8008830 <_strtod_l+0x88>
 8008b80:	dd23      	ble.n	8008bca <_strtod_l+0x422>
 8008b82:	2916      	cmp	r1, #22
 8008b84:	dc0b      	bgt.n	8008b9e <_strtod_l+0x3f6>
 8008b86:	4b67      	ldr	r3, [pc, #412]	; (8008d24 <_strtod_l+0x57c>)
 8008b88:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008b8c:	ed93 7b00 	vldr	d7, [r3]
 8008b90:	ec49 8b16 	vmov	d6, r8, r9
 8008b94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b98:	ec59 8b17 	vmov	r8, r9, d7
 8008b9c:	e648      	b.n	8008830 <_strtod_l+0x88>
 8008b9e:	9807      	ldr	r0, [sp, #28]
 8008ba0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008ba4:	4281      	cmp	r1, r0
 8008ba6:	db1e      	blt.n	8008be6 <_strtod_l+0x43e>
 8008ba8:	4a5e      	ldr	r2, [pc, #376]	; (8008d24 <_strtod_l+0x57c>)
 8008baa:	f1c3 030f 	rsb	r3, r3, #15
 8008bae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008bb2:	ed91 7b00 	vldr	d7, [r1]
 8008bb6:	ec49 8b16 	vmov	d6, r8, r9
 8008bba:	1ac3      	subs	r3, r0, r3
 8008bbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008bc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008bc4:	ed92 6b00 	vldr	d6, [r2]
 8008bc8:	e7e4      	b.n	8008b94 <_strtod_l+0x3ec>
 8008bca:	9907      	ldr	r1, [sp, #28]
 8008bcc:	3116      	adds	r1, #22
 8008bce:	db0a      	blt.n	8008be6 <_strtod_l+0x43e>
 8008bd0:	4b54      	ldr	r3, [pc, #336]	; (8008d24 <_strtod_l+0x57c>)
 8008bd2:	1b7d      	subs	r5, r7, r5
 8008bd4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008bd8:	ed95 7b00 	vldr	d7, [r5]
 8008bdc:	ec49 8b16 	vmov	d6, r8, r9
 8008be0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008be4:	e7d8      	b.n	8008b98 <_strtod_l+0x3f0>
 8008be6:	9907      	ldr	r1, [sp, #28]
 8008be8:	1a9a      	subs	r2, r3, r2
 8008bea:	440a      	add	r2, r1
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	dd6f      	ble.n	8008cd0 <_strtod_l+0x528>
 8008bf0:	f012 000f 	ands.w	r0, r2, #15
 8008bf4:	d00a      	beq.n	8008c0c <_strtod_l+0x464>
 8008bf6:	494b      	ldr	r1, [pc, #300]	; (8008d24 <_strtod_l+0x57c>)
 8008bf8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008bfc:	ed91 7b00 	vldr	d7, [r1]
 8008c00:	ec49 8b16 	vmov	d6, r8, r9
 8008c04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c08:	ec59 8b17 	vmov	r8, r9, d7
 8008c0c:	f032 020f 	bics.w	r2, r2, #15
 8008c10:	d04f      	beq.n	8008cb2 <_strtod_l+0x50a>
 8008c12:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008c16:	dd22      	ble.n	8008c5e <_strtod_l+0x4b6>
 8008c18:	2500      	movs	r5, #0
 8008c1a:	462e      	mov	r6, r5
 8008c1c:	9506      	str	r5, [sp, #24]
 8008c1e:	462f      	mov	r7, r5
 8008c20:	2322      	movs	r3, #34	; 0x22
 8008c22:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008d30 <_strtod_l+0x588>
 8008c26:	6023      	str	r3, [r4, #0]
 8008c28:	f04f 0800 	mov.w	r8, #0
 8008c2c:	9b06      	ldr	r3, [sp, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f43f adfe 	beq.w	8008830 <_strtod_l+0x88>
 8008c34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008c36:	4620      	mov	r0, r4
 8008c38:	f001 fec2 	bl	800a9c0 <_Bfree>
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f001 febe 	bl	800a9c0 <_Bfree>
 8008c44:	4631      	mov	r1, r6
 8008c46:	4620      	mov	r0, r4
 8008c48:	f001 feba 	bl	800a9c0 <_Bfree>
 8008c4c:	9906      	ldr	r1, [sp, #24]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f001 feb6 	bl	800a9c0 <_Bfree>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4620      	mov	r0, r4
 8008c58:	f001 feb2 	bl	800a9c0 <_Bfree>
 8008c5c:	e5e8      	b.n	8008830 <_strtod_l+0x88>
 8008c5e:	2000      	movs	r0, #0
 8008c60:	ec49 8b17 	vmov	d7, r8, r9
 8008c64:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008d28 <_strtod_l+0x580>
 8008c68:	1112      	asrs	r2, r2, #4
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	2a01      	cmp	r2, #1
 8008c6e:	dc23      	bgt.n	8008cb8 <_strtod_l+0x510>
 8008c70:	b108      	cbz	r0, 8008c76 <_strtod_l+0x4ce>
 8008c72:	ec59 8b17 	vmov	r8, r9, d7
 8008c76:	4a2c      	ldr	r2, [pc, #176]	; (8008d28 <_strtod_l+0x580>)
 8008c78:	482c      	ldr	r0, [pc, #176]	; (8008d2c <_strtod_l+0x584>)
 8008c7a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008c7e:	ed92 7b00 	vldr	d7, [r2]
 8008c82:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008c86:	ec49 8b16 	vmov	d6, r8, r9
 8008c8a:	4a29      	ldr	r2, [pc, #164]	; (8008d30 <_strtod_l+0x588>)
 8008c8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c90:	ee17 1a90 	vmov	r1, s15
 8008c94:	400a      	ands	r2, r1
 8008c96:	4282      	cmp	r2, r0
 8008c98:	ec59 8b17 	vmov	r8, r9, d7
 8008c9c:	d8bc      	bhi.n	8008c18 <_strtod_l+0x470>
 8008c9e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008ca2:	4282      	cmp	r2, r0
 8008ca4:	bf86      	itte	hi
 8008ca6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008d34 <_strtod_l+0x58c>
 8008caa:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8008cae:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	9204      	str	r2, [sp, #16]
 8008cb6:	e078      	b.n	8008daa <_strtod_l+0x602>
 8008cb8:	07d6      	lsls	r6, r2, #31
 8008cba:	d504      	bpl.n	8008cc6 <_strtod_l+0x51e>
 8008cbc:	ed9c 6b00 	vldr	d6, [ip]
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cc6:	3101      	adds	r1, #1
 8008cc8:	1052      	asrs	r2, r2, #1
 8008cca:	f10c 0c08 	add.w	ip, ip, #8
 8008cce:	e7cd      	b.n	8008c6c <_strtod_l+0x4c4>
 8008cd0:	d0ef      	beq.n	8008cb2 <_strtod_l+0x50a>
 8008cd2:	4252      	negs	r2, r2
 8008cd4:	f012 000f 	ands.w	r0, r2, #15
 8008cd8:	d00a      	beq.n	8008cf0 <_strtod_l+0x548>
 8008cda:	4912      	ldr	r1, [pc, #72]	; (8008d24 <_strtod_l+0x57c>)
 8008cdc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008ce0:	ed91 7b00 	vldr	d7, [r1]
 8008ce4:	ec49 8b16 	vmov	d6, r8, r9
 8008ce8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008cec:	ec59 8b17 	vmov	r8, r9, d7
 8008cf0:	1112      	asrs	r2, r2, #4
 8008cf2:	d0de      	beq.n	8008cb2 <_strtod_l+0x50a>
 8008cf4:	2a1f      	cmp	r2, #31
 8008cf6:	dd1f      	ble.n	8008d38 <_strtod_l+0x590>
 8008cf8:	2500      	movs	r5, #0
 8008cfa:	462e      	mov	r6, r5
 8008cfc:	9506      	str	r5, [sp, #24]
 8008cfe:	462f      	mov	r7, r5
 8008d00:	2322      	movs	r3, #34	; 0x22
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	f04f 0900 	mov.w	r9, #0
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	e78e      	b.n	8008c2c <_strtod_l+0x484>
 8008d0e:	bf00      	nop
 8008d10:	0800bf21 	.word	0x0800bf21
 8008d14:	0800bf64 	.word	0x0800bf64
 8008d18:	0800bf19 	.word	0x0800bf19
 8008d1c:	0800c0a4 	.word	0x0800c0a4
 8008d20:	0800c350 	.word	0x0800c350
 8008d24:	0800c230 	.word	0x0800c230
 8008d28:	0800c208 	.word	0x0800c208
 8008d2c:	7ca00000 	.word	0x7ca00000
 8008d30:	7ff00000 	.word	0x7ff00000
 8008d34:	7fefffff 	.word	0x7fefffff
 8008d38:	f012 0110 	ands.w	r1, r2, #16
 8008d3c:	bf18      	it	ne
 8008d3e:	216a      	movne	r1, #106	; 0x6a
 8008d40:	9104      	str	r1, [sp, #16]
 8008d42:	ec49 8b17 	vmov	d7, r8, r9
 8008d46:	49be      	ldr	r1, [pc, #760]	; (8009040 <_strtod_l+0x898>)
 8008d48:	2000      	movs	r0, #0
 8008d4a:	07d6      	lsls	r6, r2, #31
 8008d4c:	d504      	bpl.n	8008d58 <_strtod_l+0x5b0>
 8008d4e:	ed91 6b00 	vldr	d6, [r1]
 8008d52:	2001      	movs	r0, #1
 8008d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d58:	1052      	asrs	r2, r2, #1
 8008d5a:	f101 0108 	add.w	r1, r1, #8
 8008d5e:	d1f4      	bne.n	8008d4a <_strtod_l+0x5a2>
 8008d60:	b108      	cbz	r0, 8008d66 <_strtod_l+0x5be>
 8008d62:	ec59 8b17 	vmov	r8, r9, d7
 8008d66:	9a04      	ldr	r2, [sp, #16]
 8008d68:	b1c2      	cbz	r2, 8008d9c <_strtod_l+0x5f4>
 8008d6a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008d6e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	4648      	mov	r0, r9
 8008d76:	dd11      	ble.n	8008d9c <_strtod_l+0x5f4>
 8008d78:	2a1f      	cmp	r2, #31
 8008d7a:	f340 812e 	ble.w	8008fda <_strtod_l+0x832>
 8008d7e:	2a34      	cmp	r2, #52	; 0x34
 8008d80:	bfde      	ittt	le
 8008d82:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008d86:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008d8a:	fa02 f101 	lslle.w	r1, r2, r1
 8008d8e:	f04f 0800 	mov.w	r8, #0
 8008d92:	bfcc      	ite	gt
 8008d94:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008d98:	ea01 0900 	andle.w	r9, r1, r0
 8008d9c:	ec49 8b17 	vmov	d7, r8, r9
 8008da0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da8:	d0a6      	beq.n	8008cf8 <_strtod_l+0x550>
 8008daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dac:	9200      	str	r2, [sp, #0]
 8008dae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008db0:	9a06      	ldr	r2, [sp, #24]
 8008db2:	4620      	mov	r0, r4
 8008db4:	f001 fe6c 	bl	800aa90 <__s2b>
 8008db8:	9006      	str	r0, [sp, #24]
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f43f af2c 	beq.w	8008c18 <_strtod_l+0x470>
 8008dc0:	9b07      	ldr	r3, [sp, #28]
 8008dc2:	1b7d      	subs	r5, r7, r5
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bfb4      	ite	lt
 8008dc8:	462b      	movlt	r3, r5
 8008dca:	2300      	movge	r3, #0
 8008dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dce:	9b07      	ldr	r3, [sp, #28]
 8008dd0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009020 <_strtod_l+0x878>
 8008dd4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009028 <_strtod_l+0x880>
 8008dd8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009030 <_strtod_l+0x888>
 8008ddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008de0:	2500      	movs	r5, #0
 8008de2:	930c      	str	r3, [sp, #48]	; 0x30
 8008de4:	462e      	mov	r6, r5
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	4620      	mov	r0, r4
 8008dea:	6859      	ldr	r1, [r3, #4]
 8008dec:	f001 fda8 	bl	800a940 <_Balloc>
 8008df0:	4607      	mov	r7, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f43f af14 	beq.w	8008c20 <_strtod_l+0x478>
 8008df8:	9b06      	ldr	r3, [sp, #24]
 8008dfa:	691a      	ldr	r2, [r3, #16]
 8008dfc:	3202      	adds	r2, #2
 8008dfe:	f103 010c 	add.w	r1, r3, #12
 8008e02:	0092      	lsls	r2, r2, #2
 8008e04:	300c      	adds	r0, #12
 8008e06:	f7fe fcdc 	bl	80077c2 <memcpy>
 8008e0a:	ec49 8b10 	vmov	d0, r8, r9
 8008e0e:	aa14      	add	r2, sp, #80	; 0x50
 8008e10:	a913      	add	r1, sp, #76	; 0x4c
 8008e12:	4620      	mov	r0, r4
 8008e14:	f002 f982 	bl	800b11c <__d2b>
 8008e18:	ec49 8b18 	vmov	d8, r8, r9
 8008e1c:	9012      	str	r0, [sp, #72]	; 0x48
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f43f aefe 	beq.w	8008c20 <_strtod_l+0x478>
 8008e24:	2101      	movs	r1, #1
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 fecc 	bl	800abc4 <__i2b>
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f43f aef6 	beq.w	8008c20 <_strtod_l+0x478>
 8008e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e36:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bfab      	itete	ge
 8008e3c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008e3e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008e40:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008e44:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008e48:	bfac      	ite	ge
 8008e4a:	eb03 0b02 	addge.w	fp, r3, r2
 8008e4e:	eba2 0a03 	sublt.w	sl, r2, r3
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	440b      	add	r3, r1
 8008e58:	4a7a      	ldr	r2, [pc, #488]	; (8009044 <_strtod_l+0x89c>)
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008e62:	f280 80cd 	bge.w	8009000 <_strtod_l+0x858>
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	2a1f      	cmp	r2, #31
 8008e6a:	eba1 0102 	sub.w	r1, r1, r2
 8008e6e:	f04f 0001 	mov.w	r0, #1
 8008e72:	f300 80b9 	bgt.w	8008fe8 <_strtod_l+0x840>
 8008e76:	fa00 f302 	lsl.w	r3, r0, r2
 8008e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e80:	eb0b 0301 	add.w	r3, fp, r1
 8008e84:	9a04      	ldr	r2, [sp, #16]
 8008e86:	459b      	cmp	fp, r3
 8008e88:	448a      	add	sl, r1
 8008e8a:	4492      	add	sl, r2
 8008e8c:	465a      	mov	r2, fp
 8008e8e:	bfa8      	it	ge
 8008e90:	461a      	movge	r2, r3
 8008e92:	4552      	cmp	r2, sl
 8008e94:	bfa8      	it	ge
 8008e96:	4652      	movge	r2, sl
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	bfc2      	ittt	gt
 8008e9c:	1a9b      	subgt	r3, r3, r2
 8008e9e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008ea2:	ebab 0b02 	subgt.w	fp, fp, r2
 8008ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	dd18      	ble.n	8008ede <_strtod_l+0x736>
 8008eac:	4631      	mov	r1, r6
 8008eae:	4620      	mov	r0, r4
 8008eb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb2:	f001 ff47 	bl	800ad44 <__pow5mult>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	f43f aeb1 	beq.w	8008c20 <_strtod_l+0x478>
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f001 fe94 	bl	800abf0 <__multiply>
 8008ec8:	900e      	str	r0, [sp, #56]	; 0x38
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	f43f aea8 	beq.w	8008c20 <_strtod_l+0x478>
 8008ed0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f001 fd74 	bl	800a9c0 <_Bfree>
 8008ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008edc:	9212      	str	r2, [sp, #72]	; 0x48
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f300 8093 	bgt.w	800900a <_strtod_l+0x862>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	dd08      	ble.n	8008efc <_strtod_l+0x754>
 8008eea:	4639      	mov	r1, r7
 8008eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f001 ff28 	bl	800ad44 <__pow5mult>
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f43f ae92 	beq.w	8008c20 <_strtod_l+0x478>
 8008efc:	f1ba 0f00 	cmp.w	sl, #0
 8008f00:	dd08      	ble.n	8008f14 <_strtod_l+0x76c>
 8008f02:	4639      	mov	r1, r7
 8008f04:	4652      	mov	r2, sl
 8008f06:	4620      	mov	r0, r4
 8008f08:	f001 ff76 	bl	800adf8 <__lshift>
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f43f ae86 	beq.w	8008c20 <_strtod_l+0x478>
 8008f14:	f1bb 0f00 	cmp.w	fp, #0
 8008f18:	dd08      	ble.n	8008f2c <_strtod_l+0x784>
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	465a      	mov	r2, fp
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f001 ff6a 	bl	800adf8 <__lshift>
 8008f24:	4606      	mov	r6, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f43f ae7a 	beq.w	8008c20 <_strtod_l+0x478>
 8008f2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f2e:	463a      	mov	r2, r7
 8008f30:	4620      	mov	r0, r4
 8008f32:	f001 ffed 	bl	800af10 <__mdiff>
 8008f36:	4605      	mov	r5, r0
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	f43f ae71 	beq.w	8008c20 <_strtod_l+0x478>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008f44:	60c3      	str	r3, [r0, #12]
 8008f46:	4631      	mov	r1, r6
 8008f48:	f001 ffc6 	bl	800aed8 <__mcmp>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	da7d      	bge.n	800904c <_strtod_l+0x8a4>
 8008f50:	ea5a 0308 	orrs.w	r3, sl, r8
 8008f54:	f040 80a3 	bne.w	800909e <_strtod_l+0x8f6>
 8008f58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f040 809e 	bne.w	800909e <_strtod_l+0x8f6>
 8008f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f66:	0d1b      	lsrs	r3, r3, #20
 8008f68:	051b      	lsls	r3, r3, #20
 8008f6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f6e:	f240 8096 	bls.w	800909e <_strtod_l+0x8f6>
 8008f72:	696b      	ldr	r3, [r5, #20]
 8008f74:	b91b      	cbnz	r3, 8008f7e <_strtod_l+0x7d6>
 8008f76:	692b      	ldr	r3, [r5, #16]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	f340 8090 	ble.w	800909e <_strtod_l+0x8f6>
 8008f7e:	4629      	mov	r1, r5
 8008f80:	2201      	movs	r2, #1
 8008f82:	4620      	mov	r0, r4
 8008f84:	f001 ff38 	bl	800adf8 <__lshift>
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	f001 ffa4 	bl	800aed8 <__mcmp>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f340 8084 	ble.w	800909e <_strtod_l+0x8f6>
 8008f96:	9904      	ldr	r1, [sp, #16]
 8008f98:	4a2b      	ldr	r2, [pc, #172]	; (8009048 <_strtod_l+0x8a0>)
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	f000 809d 	beq.w	80090dc <_strtod_l+0x934>
 8008fa2:	ea02 0109 	and.w	r1, r2, r9
 8008fa6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008faa:	f300 8097 	bgt.w	80090dc <_strtod_l+0x934>
 8008fae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008fb2:	f77f aea5 	ble.w	8008d00 <_strtod_l+0x558>
 8008fb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009038 <_strtod_l+0x890>
 8008fba:	ec49 8b16 	vmov	d6, r8, r9
 8008fbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008fc2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008fc6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	bf08      	it	eq
 8008fce:	2322      	moveq	r3, #34	; 0x22
 8008fd0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fd4:	bf08      	it	eq
 8008fd6:	6023      	streq	r3, [r4, #0]
 8008fd8:	e62c      	b.n	8008c34 <_strtod_l+0x48c>
 8008fda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008fde:	fa01 f202 	lsl.w	r2, r1, r2
 8008fe2:	ea02 0808 	and.w	r8, r2, r8
 8008fe6:	e6d9      	b.n	8008d9c <_strtod_l+0x5f4>
 8008fe8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008fec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008ff0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008ff4:	33e2      	adds	r3, #226	; 0xe2
 8008ff6:	fa00 f303 	lsl.w	r3, r0, r3
 8008ffa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008ffe:	e73f      	b.n	8008e80 <_strtod_l+0x6d8>
 8009000:	2200      	movs	r2, #0
 8009002:	2301      	movs	r3, #1
 8009004:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009008:	e73a      	b.n	8008e80 <_strtod_l+0x6d8>
 800900a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800900c:	461a      	mov	r2, r3
 800900e:	4620      	mov	r0, r4
 8009010:	f001 fef2 	bl	800adf8 <__lshift>
 8009014:	9012      	str	r0, [sp, #72]	; 0x48
 8009016:	2800      	cmp	r0, #0
 8009018:	f47f af64 	bne.w	8008ee4 <_strtod_l+0x73c>
 800901c:	e600      	b.n	8008c20 <_strtod_l+0x478>
 800901e:	bf00      	nop
 8009020:	94a03595 	.word	0x94a03595
 8009024:	3fcfffff 	.word	0x3fcfffff
 8009028:	94a03595 	.word	0x94a03595
 800902c:	3fdfffff 	.word	0x3fdfffff
 8009030:	35afe535 	.word	0x35afe535
 8009034:	3fe00000 	.word	0x3fe00000
 8009038:	00000000 	.word	0x00000000
 800903c:	39500000 	.word	0x39500000
 8009040:	0800bf78 	.word	0x0800bf78
 8009044:	fffffc02 	.word	0xfffffc02
 8009048:	7ff00000 	.word	0x7ff00000
 800904c:	46cb      	mov	fp, r9
 800904e:	d15f      	bne.n	8009110 <_strtod_l+0x968>
 8009050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009054:	f1ba 0f00 	cmp.w	sl, #0
 8009058:	d02a      	beq.n	80090b0 <_strtod_l+0x908>
 800905a:	4aa7      	ldr	r2, [pc, #668]	; (80092f8 <_strtod_l+0xb50>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d12b      	bne.n	80090b8 <_strtod_l+0x910>
 8009060:	9b04      	ldr	r3, [sp, #16]
 8009062:	4642      	mov	r2, r8
 8009064:	b1fb      	cbz	r3, 80090a6 <_strtod_l+0x8fe>
 8009066:	4ba5      	ldr	r3, [pc, #660]	; (80092fc <_strtod_l+0xb54>)
 8009068:	ea09 0303 	and.w	r3, r9, r3
 800906c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009074:	d81a      	bhi.n	80090ac <_strtod_l+0x904>
 8009076:	0d1b      	lsrs	r3, r3, #20
 8009078:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800907c:	fa01 f303 	lsl.w	r3, r1, r3
 8009080:	429a      	cmp	r2, r3
 8009082:	d119      	bne.n	80090b8 <_strtod_l+0x910>
 8009084:	4b9e      	ldr	r3, [pc, #632]	; (8009300 <_strtod_l+0xb58>)
 8009086:	459b      	cmp	fp, r3
 8009088:	d102      	bne.n	8009090 <_strtod_l+0x8e8>
 800908a:	3201      	adds	r2, #1
 800908c:	f43f adc8 	beq.w	8008c20 <_strtod_l+0x478>
 8009090:	4b9a      	ldr	r3, [pc, #616]	; (80092fc <_strtod_l+0xb54>)
 8009092:	ea0b 0303 	and.w	r3, fp, r3
 8009096:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800909a:	f04f 0800 	mov.w	r8, #0
 800909e:	9b04      	ldr	r3, [sp, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d188      	bne.n	8008fb6 <_strtod_l+0x80e>
 80090a4:	e5c6      	b.n	8008c34 <_strtod_l+0x48c>
 80090a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090aa:	e7e9      	b.n	8009080 <_strtod_l+0x8d8>
 80090ac:	460b      	mov	r3, r1
 80090ae:	e7e7      	b.n	8009080 <_strtod_l+0x8d8>
 80090b0:	ea53 0308 	orrs.w	r3, r3, r8
 80090b4:	f43f af6f 	beq.w	8008f96 <_strtod_l+0x7ee>
 80090b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ba:	b1cb      	cbz	r3, 80090f0 <_strtod_l+0x948>
 80090bc:	ea13 0f0b 	tst.w	r3, fp
 80090c0:	d0ed      	beq.n	800909e <_strtod_l+0x8f6>
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	4640      	mov	r0, r8
 80090c6:	4649      	mov	r1, r9
 80090c8:	f1ba 0f00 	cmp.w	sl, #0
 80090cc:	d014      	beq.n	80090f8 <_strtod_l+0x950>
 80090ce:	f7ff fb4e 	bl	800876e <sulp>
 80090d2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80090d6:	ec59 8b17 	vmov	r8, r9, d7
 80090da:	e7e0      	b.n	800909e <_strtod_l+0x8f6>
 80090dc:	4013      	ands	r3, r2
 80090de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80090e2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80090e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80090ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80090ee:	e7d6      	b.n	800909e <_strtod_l+0x8f6>
 80090f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f2:	ea13 0f08 	tst.w	r3, r8
 80090f6:	e7e3      	b.n	80090c0 <_strtod_l+0x918>
 80090f8:	f7ff fb39 	bl	800876e <sulp>
 80090fc:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009100:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	ec59 8b10 	vmov	r8, r9, d0
 800910c:	d1c7      	bne.n	800909e <_strtod_l+0x8f6>
 800910e:	e5f7      	b.n	8008d00 <_strtod_l+0x558>
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	f002 f85e 	bl	800b1d4 <__ratio>
 8009118:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800911c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009124:	d865      	bhi.n	80091f2 <_strtod_l+0xa4a>
 8009126:	f1ba 0f00 	cmp.w	sl, #0
 800912a:	d042      	beq.n	80091b2 <_strtod_l+0xa0a>
 800912c:	4b75      	ldr	r3, [pc, #468]	; (8009304 <_strtod_l+0xb5c>)
 800912e:	2200      	movs	r2, #0
 8009130:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009134:	4871      	ldr	r0, [pc, #452]	; (80092fc <_strtod_l+0xb54>)
 8009136:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009310 <_strtod_l+0xb68>
 800913a:	ea0b 0100 	and.w	r1, fp, r0
 800913e:	4561      	cmp	r1, ip
 8009140:	f040 808e 	bne.w	8009260 <_strtod_l+0xab8>
 8009144:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009148:	ec49 8b10 	vmov	d0, r8, r9
 800914c:	ec43 2b1c 	vmov	d12, r2, r3
 8009150:	910a      	str	r1, [sp, #40]	; 0x28
 8009152:	f001 ff67 	bl	800b024 <__ulp>
 8009156:	ec49 8b1e 	vmov	d14, r8, r9
 800915a:	4868      	ldr	r0, [pc, #416]	; (80092fc <_strtod_l+0xb54>)
 800915c:	eeac eb00 	vfma.f64	d14, d12, d0
 8009160:	ee1e 3a90 	vmov	r3, s29
 8009164:	4a68      	ldr	r2, [pc, #416]	; (8009308 <_strtod_l+0xb60>)
 8009166:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009168:	4018      	ands	r0, r3
 800916a:	4290      	cmp	r0, r2
 800916c:	ec59 8b1e 	vmov	r8, r9, d14
 8009170:	d94e      	bls.n	8009210 <_strtod_l+0xa68>
 8009172:	ee18 3a90 	vmov	r3, s17
 8009176:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800917a:	4293      	cmp	r3, r2
 800917c:	d104      	bne.n	8009188 <_strtod_l+0x9e0>
 800917e:	ee18 3a10 	vmov	r3, s16
 8009182:	3301      	adds	r3, #1
 8009184:	f43f ad4c 	beq.w	8008c20 <_strtod_l+0x478>
 8009188:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009300 <_strtod_l+0xb58>
 800918c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009190:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009192:	4620      	mov	r0, r4
 8009194:	f001 fc14 	bl	800a9c0 <_Bfree>
 8009198:	4639      	mov	r1, r7
 800919a:	4620      	mov	r0, r4
 800919c:	f001 fc10 	bl	800a9c0 <_Bfree>
 80091a0:	4631      	mov	r1, r6
 80091a2:	4620      	mov	r0, r4
 80091a4:	f001 fc0c 	bl	800a9c0 <_Bfree>
 80091a8:	4629      	mov	r1, r5
 80091aa:	4620      	mov	r0, r4
 80091ac:	f001 fc08 	bl	800a9c0 <_Bfree>
 80091b0:	e619      	b.n	8008de6 <_strtod_l+0x63e>
 80091b2:	f1b8 0f00 	cmp.w	r8, #0
 80091b6:	d112      	bne.n	80091de <_strtod_l+0xa36>
 80091b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091bc:	b9b3      	cbnz	r3, 80091ec <_strtod_l+0xa44>
 80091be:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80091c2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80091c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80091ce:	bf58      	it	pl
 80091d0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80091d4:	eeb1 7b4d 	vneg.f64	d7, d13
 80091d8:	ec53 2b17 	vmov	r2, r3, d7
 80091dc:	e7aa      	b.n	8009134 <_strtod_l+0x98c>
 80091de:	f1b8 0f01 	cmp.w	r8, #1
 80091e2:	d103      	bne.n	80091ec <_strtod_l+0xa44>
 80091e4:	f1b9 0f00 	cmp.w	r9, #0
 80091e8:	f43f ad8a 	beq.w	8008d00 <_strtod_l+0x558>
 80091ec:	4b47      	ldr	r3, [pc, #284]	; (800930c <_strtod_l+0xb64>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	e79e      	b.n	8009130 <_strtod_l+0x988>
 80091f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80091f6:	ee20 db0d 	vmul.f64	d13, d0, d13
 80091fa:	f1ba 0f00 	cmp.w	sl, #0
 80091fe:	d104      	bne.n	800920a <_strtod_l+0xa62>
 8009200:	eeb1 7b4d 	vneg.f64	d7, d13
 8009204:	ec53 2b17 	vmov	r2, r3, d7
 8009208:	e794      	b.n	8009134 <_strtod_l+0x98c>
 800920a:	eeb0 7b4d 	vmov.f64	d7, d13
 800920e:	e7f9      	b.n	8009204 <_strtod_l+0xa5c>
 8009210:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1ba      	bne.n	8009190 <_strtod_l+0x9e8>
 800921a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800921e:	0d1b      	lsrs	r3, r3, #20
 8009220:	051b      	lsls	r3, r3, #20
 8009222:	4299      	cmp	r1, r3
 8009224:	d1b4      	bne.n	8009190 <_strtod_l+0x9e8>
 8009226:	ec51 0b1d 	vmov	r0, r1, d13
 800922a:	f7f7 fa35 	bl	8000698 <__aeabi_d2lz>
 800922e:	f7f7 f9ed 	bl	800060c <__aeabi_l2d>
 8009232:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009236:	ec41 0b17 	vmov	d7, r0, r1
 800923a:	ea43 0308 	orr.w	r3, r3, r8
 800923e:	ea53 030a 	orrs.w	r3, r3, sl
 8009242:	ee3d db47 	vsub.f64	d13, d13, d7
 8009246:	d03c      	beq.n	80092c2 <_strtod_l+0xb1a>
 8009248:	eeb4 dbca 	vcmpe.f64	d13, d10
 800924c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009250:	f53f acf0 	bmi.w	8008c34 <_strtod_l+0x48c>
 8009254:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925c:	dd98      	ble.n	8009190 <_strtod_l+0x9e8>
 800925e:	e4e9      	b.n	8008c34 <_strtod_l+0x48c>
 8009260:	9804      	ldr	r0, [sp, #16]
 8009262:	b1f0      	cbz	r0, 80092a2 <_strtod_l+0xafa>
 8009264:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009268:	d81b      	bhi.n	80092a2 <_strtod_l+0xafa>
 800926a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80092f0 <_strtod_l+0xb48>
 800926e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009276:	d811      	bhi.n	800929c <_strtod_l+0xaf4>
 8009278:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800927c:	ee1d 3a10 	vmov	r3, s26
 8009280:	2b01      	cmp	r3, #1
 8009282:	bf38      	it	cc
 8009284:	2301      	movcc	r3, #1
 8009286:	ee0d 3a10 	vmov	s26, r3
 800928a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800928e:	f1ba 0f00 	cmp.w	sl, #0
 8009292:	d113      	bne.n	80092bc <_strtod_l+0xb14>
 8009294:	eeb1 7b4d 	vneg.f64	d7, d13
 8009298:	ec53 2b17 	vmov	r2, r3, d7
 800929c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80092a0:	1a43      	subs	r3, r0, r1
 80092a2:	eeb0 0b48 	vmov.f64	d0, d8
 80092a6:	ec43 2b1c 	vmov	d12, r2, r3
 80092aa:	910a      	str	r1, [sp, #40]	; 0x28
 80092ac:	f001 feba 	bl	800b024 <__ulp>
 80092b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092b2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80092b6:	ec59 8b18 	vmov	r8, r9, d8
 80092ba:	e7ab      	b.n	8009214 <_strtod_l+0xa6c>
 80092bc:	eeb0 7b4d 	vmov.f64	d7, d13
 80092c0:	e7ea      	b.n	8009298 <_strtod_l+0xaf0>
 80092c2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80092c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ca:	f57f af61 	bpl.w	8009190 <_strtod_l+0x9e8>
 80092ce:	e4b1      	b.n	8008c34 <_strtod_l+0x48c>
 80092d0:	2300      	movs	r3, #0
 80092d2:	9308      	str	r3, [sp, #32]
 80092d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	f7ff baad 	b.w	8008838 <_strtod_l+0x90>
 80092de:	2a65      	cmp	r2, #101	; 0x65
 80092e0:	f43f ab9f 	beq.w	8008a22 <_strtod_l+0x27a>
 80092e4:	2a45      	cmp	r2, #69	; 0x45
 80092e6:	f43f ab9c 	beq.w	8008a22 <_strtod_l+0x27a>
 80092ea:	2101      	movs	r1, #1
 80092ec:	f7ff bbd4 	b.w	8008a98 <_strtod_l+0x2f0>
 80092f0:	ffc00000 	.word	0xffc00000
 80092f4:	41dfffff 	.word	0x41dfffff
 80092f8:	000fffff 	.word	0x000fffff
 80092fc:	7ff00000 	.word	0x7ff00000
 8009300:	7fefffff 	.word	0x7fefffff
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	7c9fffff 	.word	0x7c9fffff
 800930c:	bff00000 	.word	0xbff00000
 8009310:	7fe00000 	.word	0x7fe00000

08009314 <_strtod_r>:
 8009314:	4b01      	ldr	r3, [pc, #4]	; (800931c <_strtod_r+0x8>)
 8009316:	f7ff ba47 	b.w	80087a8 <_strtod_l>
 800931a:	bf00      	nop
 800931c:	20000078 	.word	0x20000078

08009320 <_strtol_l.constprop.0>:
 8009320:	2b01      	cmp	r3, #1
 8009322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009326:	d001      	beq.n	800932c <_strtol_l.constprop.0+0xc>
 8009328:	2b24      	cmp	r3, #36	; 0x24
 800932a:	d906      	bls.n	800933a <_strtol_l.constprop.0+0x1a>
 800932c:	f7fe f926 	bl	800757c <__errno>
 8009330:	2316      	movs	r3, #22
 8009332:	6003      	str	r3, [r0, #0]
 8009334:	2000      	movs	r0, #0
 8009336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009420 <_strtol_l.constprop.0+0x100>
 800933e:	460d      	mov	r5, r1
 8009340:	462e      	mov	r6, r5
 8009342:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009346:	f814 700c 	ldrb.w	r7, [r4, ip]
 800934a:	f017 0708 	ands.w	r7, r7, #8
 800934e:	d1f7      	bne.n	8009340 <_strtol_l.constprop.0+0x20>
 8009350:	2c2d      	cmp	r4, #45	; 0x2d
 8009352:	d132      	bne.n	80093ba <_strtol_l.constprop.0+0x9a>
 8009354:	782c      	ldrb	r4, [r5, #0]
 8009356:	2701      	movs	r7, #1
 8009358:	1cb5      	adds	r5, r6, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d05b      	beq.n	8009416 <_strtol_l.constprop.0+0xf6>
 800935e:	2b10      	cmp	r3, #16
 8009360:	d109      	bne.n	8009376 <_strtol_l.constprop.0+0x56>
 8009362:	2c30      	cmp	r4, #48	; 0x30
 8009364:	d107      	bne.n	8009376 <_strtol_l.constprop.0+0x56>
 8009366:	782c      	ldrb	r4, [r5, #0]
 8009368:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800936c:	2c58      	cmp	r4, #88	; 0x58
 800936e:	d14d      	bne.n	800940c <_strtol_l.constprop.0+0xec>
 8009370:	786c      	ldrb	r4, [r5, #1]
 8009372:	2310      	movs	r3, #16
 8009374:	3502      	adds	r5, #2
 8009376:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800937a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800937e:	f04f 0c00 	mov.w	ip, #0
 8009382:	fbb8 f9f3 	udiv	r9, r8, r3
 8009386:	4666      	mov	r6, ip
 8009388:	fb03 8a19 	mls	sl, r3, r9, r8
 800938c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009390:	f1be 0f09 	cmp.w	lr, #9
 8009394:	d816      	bhi.n	80093c4 <_strtol_l.constprop.0+0xa4>
 8009396:	4674      	mov	r4, lr
 8009398:	42a3      	cmp	r3, r4
 800939a:	dd24      	ble.n	80093e6 <_strtol_l.constprop.0+0xc6>
 800939c:	f1bc 0f00 	cmp.w	ip, #0
 80093a0:	db1e      	blt.n	80093e0 <_strtol_l.constprop.0+0xc0>
 80093a2:	45b1      	cmp	r9, r6
 80093a4:	d31c      	bcc.n	80093e0 <_strtol_l.constprop.0+0xc0>
 80093a6:	d101      	bne.n	80093ac <_strtol_l.constprop.0+0x8c>
 80093a8:	45a2      	cmp	sl, r4
 80093aa:	db19      	blt.n	80093e0 <_strtol_l.constprop.0+0xc0>
 80093ac:	fb06 4603 	mla	r6, r6, r3, r4
 80093b0:	f04f 0c01 	mov.w	ip, #1
 80093b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093b8:	e7e8      	b.n	800938c <_strtol_l.constprop.0+0x6c>
 80093ba:	2c2b      	cmp	r4, #43	; 0x2b
 80093bc:	bf04      	itt	eq
 80093be:	782c      	ldrbeq	r4, [r5, #0]
 80093c0:	1cb5      	addeq	r5, r6, #2
 80093c2:	e7ca      	b.n	800935a <_strtol_l.constprop.0+0x3a>
 80093c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80093c8:	f1be 0f19 	cmp.w	lr, #25
 80093cc:	d801      	bhi.n	80093d2 <_strtol_l.constprop.0+0xb2>
 80093ce:	3c37      	subs	r4, #55	; 0x37
 80093d0:	e7e2      	b.n	8009398 <_strtol_l.constprop.0+0x78>
 80093d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80093d6:	f1be 0f19 	cmp.w	lr, #25
 80093da:	d804      	bhi.n	80093e6 <_strtol_l.constprop.0+0xc6>
 80093dc:	3c57      	subs	r4, #87	; 0x57
 80093de:	e7db      	b.n	8009398 <_strtol_l.constprop.0+0x78>
 80093e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80093e4:	e7e6      	b.n	80093b4 <_strtol_l.constprop.0+0x94>
 80093e6:	f1bc 0f00 	cmp.w	ip, #0
 80093ea:	da05      	bge.n	80093f8 <_strtol_l.constprop.0+0xd8>
 80093ec:	2322      	movs	r3, #34	; 0x22
 80093ee:	6003      	str	r3, [r0, #0]
 80093f0:	4646      	mov	r6, r8
 80093f2:	b942      	cbnz	r2, 8009406 <_strtol_l.constprop.0+0xe6>
 80093f4:	4630      	mov	r0, r6
 80093f6:	e79e      	b.n	8009336 <_strtol_l.constprop.0+0x16>
 80093f8:	b107      	cbz	r7, 80093fc <_strtol_l.constprop.0+0xdc>
 80093fa:	4276      	negs	r6, r6
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	d0f9      	beq.n	80093f4 <_strtol_l.constprop.0+0xd4>
 8009400:	f1bc 0f00 	cmp.w	ip, #0
 8009404:	d000      	beq.n	8009408 <_strtol_l.constprop.0+0xe8>
 8009406:	1e69      	subs	r1, r5, #1
 8009408:	6011      	str	r1, [r2, #0]
 800940a:	e7f3      	b.n	80093f4 <_strtol_l.constprop.0+0xd4>
 800940c:	2430      	movs	r4, #48	; 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1b1      	bne.n	8009376 <_strtol_l.constprop.0+0x56>
 8009412:	2308      	movs	r3, #8
 8009414:	e7af      	b.n	8009376 <_strtol_l.constprop.0+0x56>
 8009416:	2c30      	cmp	r4, #48	; 0x30
 8009418:	d0a5      	beq.n	8009366 <_strtol_l.constprop.0+0x46>
 800941a:	230a      	movs	r3, #10
 800941c:	e7ab      	b.n	8009376 <_strtol_l.constprop.0+0x56>
 800941e:	bf00      	nop
 8009420:	0800bfa1 	.word	0x0800bfa1

08009424 <_strtol_r>:
 8009424:	f7ff bf7c 	b.w	8009320 <_strtol_l.constprop.0>

08009428 <_write_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4d07      	ldr	r5, [pc, #28]	; (8009448 <_write_r+0x20>)
 800942c:	4604      	mov	r4, r0
 800942e:	4608      	mov	r0, r1
 8009430:	4611      	mov	r1, r2
 8009432:	2200      	movs	r2, #0
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f8 f87b 	bl	8001532 <_write>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_write_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_write_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20004d84 	.word	0x20004d84

0800944c <_close_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d06      	ldr	r5, [pc, #24]	; (8009468 <_close_r+0x1c>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	f7f8 f887 	bl	800156a <_close>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_close_r+0x1a>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_close_r+0x1a>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	20004d84 	.word	0x20004d84

0800946c <quorem>:
 800946c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	6903      	ldr	r3, [r0, #16]
 8009472:	690c      	ldr	r4, [r1, #16]
 8009474:	42a3      	cmp	r3, r4
 8009476:	4607      	mov	r7, r0
 8009478:	f2c0 8081 	blt.w	800957e <quorem+0x112>
 800947c:	3c01      	subs	r4, #1
 800947e:	f101 0814 	add.w	r8, r1, #20
 8009482:	f100 0514 	add.w	r5, r0, #20
 8009486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009494:	3301      	adds	r3, #1
 8009496:	429a      	cmp	r2, r3
 8009498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800949c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80094a4:	d331      	bcc.n	800950a <quorem+0x9e>
 80094a6:	f04f 0e00 	mov.w	lr, #0
 80094aa:	4640      	mov	r0, r8
 80094ac:	46ac      	mov	ip, r5
 80094ae:	46f2      	mov	sl, lr
 80094b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80094b4:	b293      	uxth	r3, r2
 80094b6:	fb06 e303 	mla	r3, r6, r3, lr
 80094ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094be:	b29b      	uxth	r3, r3
 80094c0:	ebaa 0303 	sub.w	r3, sl, r3
 80094c4:	f8dc a000 	ldr.w	sl, [ip]
 80094c8:	0c12      	lsrs	r2, r2, #16
 80094ca:	fa13 f38a 	uxtah	r3, r3, sl
 80094ce:	fb06 e202 	mla	r2, r6, r2, lr
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	9b00      	ldr	r3, [sp, #0]
 80094d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094da:	b292      	uxth	r2, r2
 80094dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80094e8:	4581      	cmp	r9, r0
 80094ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ee:	f84c 3b04 	str.w	r3, [ip], #4
 80094f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094f6:	d2db      	bcs.n	80094b0 <quorem+0x44>
 80094f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80094fc:	b92b      	cbnz	r3, 800950a <quorem+0x9e>
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	3b04      	subs	r3, #4
 8009502:	429d      	cmp	r5, r3
 8009504:	461a      	mov	r2, r3
 8009506:	d32e      	bcc.n	8009566 <quorem+0xfa>
 8009508:	613c      	str	r4, [r7, #16]
 800950a:	4638      	mov	r0, r7
 800950c:	f001 fce4 	bl	800aed8 <__mcmp>
 8009510:	2800      	cmp	r0, #0
 8009512:	db24      	blt.n	800955e <quorem+0xf2>
 8009514:	3601      	adds	r6, #1
 8009516:	4628      	mov	r0, r5
 8009518:	f04f 0c00 	mov.w	ip, #0
 800951c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009520:	f8d0 e000 	ldr.w	lr, [r0]
 8009524:	b293      	uxth	r3, r2
 8009526:	ebac 0303 	sub.w	r3, ip, r3
 800952a:	0c12      	lsrs	r2, r2, #16
 800952c:	fa13 f38e 	uxtah	r3, r3, lr
 8009530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009538:	b29b      	uxth	r3, r3
 800953a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800953e:	45c1      	cmp	r9, r8
 8009540:	f840 3b04 	str.w	r3, [r0], #4
 8009544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009548:	d2e8      	bcs.n	800951c <quorem+0xb0>
 800954a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800954e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009552:	b922      	cbnz	r2, 800955e <quorem+0xf2>
 8009554:	3b04      	subs	r3, #4
 8009556:	429d      	cmp	r5, r3
 8009558:	461a      	mov	r2, r3
 800955a:	d30a      	bcc.n	8009572 <quorem+0x106>
 800955c:	613c      	str	r4, [r7, #16]
 800955e:	4630      	mov	r0, r6
 8009560:	b003      	add	sp, #12
 8009562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	3b04      	subs	r3, #4
 800956a:	2a00      	cmp	r2, #0
 800956c:	d1cc      	bne.n	8009508 <quorem+0x9c>
 800956e:	3c01      	subs	r4, #1
 8009570:	e7c7      	b.n	8009502 <quorem+0x96>
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	3b04      	subs	r3, #4
 8009576:	2a00      	cmp	r2, #0
 8009578:	d1f0      	bne.n	800955c <quorem+0xf0>
 800957a:	3c01      	subs	r4, #1
 800957c:	e7eb      	b.n	8009556 <quorem+0xea>
 800957e:	2000      	movs	r0, #0
 8009580:	e7ee      	b.n	8009560 <quorem+0xf4>
 8009582:	0000      	movs	r0, r0
 8009584:	0000      	movs	r0, r0
	...

08009588 <_dtoa_r>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	ed2d 8b02 	vpush	{d8}
 8009590:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009592:	b091      	sub	sp, #68	; 0x44
 8009594:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009598:	ec59 8b10 	vmov	r8, r9, d0
 800959c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800959e:	9106      	str	r1, [sp, #24]
 80095a0:	4606      	mov	r6, r0
 80095a2:	9208      	str	r2, [sp, #32]
 80095a4:	930c      	str	r3, [sp, #48]	; 0x30
 80095a6:	b975      	cbnz	r5, 80095c6 <_dtoa_r+0x3e>
 80095a8:	2010      	movs	r0, #16
 80095aa:	f001 f9a3 	bl	800a8f4 <malloc>
 80095ae:	4602      	mov	r2, r0
 80095b0:	6270      	str	r0, [r6, #36]	; 0x24
 80095b2:	b920      	cbnz	r0, 80095be <_dtoa_r+0x36>
 80095b4:	4baa      	ldr	r3, [pc, #680]	; (8009860 <_dtoa_r+0x2d8>)
 80095b6:	21ea      	movs	r1, #234	; 0xea
 80095b8:	48aa      	ldr	r0, [pc, #680]	; (8009864 <_dtoa_r+0x2dc>)
 80095ba:	f002 f87b 	bl	800b6b4 <__assert_func>
 80095be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095c2:	6005      	str	r5, [r0, #0]
 80095c4:	60c5      	str	r5, [r0, #12]
 80095c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80095c8:	6819      	ldr	r1, [r3, #0]
 80095ca:	b151      	cbz	r1, 80095e2 <_dtoa_r+0x5a>
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	604a      	str	r2, [r1, #4]
 80095d0:	2301      	movs	r3, #1
 80095d2:	4093      	lsls	r3, r2
 80095d4:	608b      	str	r3, [r1, #8]
 80095d6:	4630      	mov	r0, r6
 80095d8:	f001 f9f2 	bl	800a9c0 <_Bfree>
 80095dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	f1b9 0300 	subs.w	r3, r9, #0
 80095e6:	bfbb      	ittet	lt
 80095e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	9303      	strlt	r3, [sp, #12]
 80095ee:	2300      	movge	r3, #0
 80095f0:	2201      	movlt	r2, #1
 80095f2:	bfac      	ite	ge
 80095f4:	6023      	strge	r3, [r4, #0]
 80095f6:	6022      	strlt	r2, [r4, #0]
 80095f8:	4b9b      	ldr	r3, [pc, #620]	; (8009868 <_dtoa_r+0x2e0>)
 80095fa:	9c03      	ldr	r4, [sp, #12]
 80095fc:	43a3      	bics	r3, r4
 80095fe:	d11c      	bne.n	800963a <_dtoa_r+0xb2>
 8009600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009602:	f242 730f 	movw	r3, #9999	; 0x270f
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800960c:	ea53 0308 	orrs.w	r3, r3, r8
 8009610:	f000 84fd 	beq.w	800a00e <_dtoa_r+0xa86>
 8009614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009616:	b963      	cbnz	r3, 8009632 <_dtoa_r+0xaa>
 8009618:	4b94      	ldr	r3, [pc, #592]	; (800986c <_dtoa_r+0x2e4>)
 800961a:	e01f      	b.n	800965c <_dtoa_r+0xd4>
 800961c:	4b94      	ldr	r3, [pc, #592]	; (8009870 <_dtoa_r+0x2e8>)
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	3308      	adds	r3, #8
 8009622:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	9801      	ldr	r0, [sp, #4]
 8009628:	b011      	add	sp, #68	; 0x44
 800962a:	ecbd 8b02 	vpop	{d8}
 800962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009632:	4b8e      	ldr	r3, [pc, #568]	; (800986c <_dtoa_r+0x2e4>)
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	3303      	adds	r3, #3
 8009638:	e7f3      	b.n	8009622 <_dtoa_r+0x9a>
 800963a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800963e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009646:	d10b      	bne.n	8009660 <_dtoa_r+0xd8>
 8009648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800964a:	2301      	movs	r3, #1
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 84d9 	beq.w	800a008 <_dtoa_r+0xa80>
 8009656:	4887      	ldr	r0, [pc, #540]	; (8009874 <_dtoa_r+0x2ec>)
 8009658:	6018      	str	r0, [r3, #0]
 800965a:	1e43      	subs	r3, r0, #1
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	e7e2      	b.n	8009626 <_dtoa_r+0x9e>
 8009660:	a90f      	add	r1, sp, #60	; 0x3c
 8009662:	aa0e      	add	r2, sp, #56	; 0x38
 8009664:	4630      	mov	r0, r6
 8009666:	eeb0 0b48 	vmov.f64	d0, d8
 800966a:	f001 fd57 	bl	800b11c <__d2b>
 800966e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009672:	4605      	mov	r5, r0
 8009674:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009676:	2900      	cmp	r1, #0
 8009678:	d046      	beq.n	8009708 <_dtoa_r+0x180>
 800967a:	ee18 4a90 	vmov	r4, s17
 800967e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009682:	ec53 2b18 	vmov	r2, r3, d8
 8009686:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800968a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800968e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009692:	2400      	movs	r4, #0
 8009694:	ec43 2b16 	vmov	d6, r2, r3
 8009698:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800969c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009848 <_dtoa_r+0x2c0>
 80096a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096a4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009850 <_dtoa_r+0x2c8>
 80096a8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80096ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009858 <_dtoa_r+0x2d0>
 80096b0:	ee07 1a90 	vmov	s15, r1
 80096b4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80096b8:	eeb0 7b46 	vmov.f64	d7, d6
 80096bc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80096c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80096c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80096c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096cc:	ee16 ba90 	vmov	fp, s13
 80096d0:	940a      	str	r4, [sp, #40]	; 0x28
 80096d2:	d508      	bpl.n	80096e6 <_dtoa_r+0x15e>
 80096d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80096d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80096dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e0:	bf18      	it	ne
 80096e2:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80096e6:	f1bb 0f16 	cmp.w	fp, #22
 80096ea:	d82f      	bhi.n	800974c <_dtoa_r+0x1c4>
 80096ec:	4b62      	ldr	r3, [pc, #392]	; (8009878 <_dtoa_r+0x2f0>)
 80096ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096f2:	ed93 7b00 	vldr	d7, [r3]
 80096f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80096fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fe:	d501      	bpl.n	8009704 <_dtoa_r+0x17c>
 8009700:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009704:	2300      	movs	r3, #0
 8009706:	e022      	b.n	800974e <_dtoa_r+0x1c6>
 8009708:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800970a:	4401      	add	r1, r0
 800970c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009710:	2b20      	cmp	r3, #32
 8009712:	bfc1      	itttt	gt
 8009714:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009718:	fa04 f303 	lslgt.w	r3, r4, r3
 800971c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009720:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009724:	bfd6      	itet	le
 8009726:	f1c3 0320 	rsble	r3, r3, #32
 800972a:	ea43 0808 	orrgt.w	r8, r3, r8
 800972e:	fa08 f803 	lslle.w	r8, r8, r3
 8009732:	ee07 8a90 	vmov	s15, r8
 8009736:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800973a:	3901      	subs	r1, #1
 800973c:	ee17 4a90 	vmov	r4, s15
 8009740:	ec53 2b17 	vmov	r2, r3, d7
 8009744:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009748:	2401      	movs	r4, #1
 800974a:	e7a3      	b.n	8009694 <_dtoa_r+0x10c>
 800974c:	2301      	movs	r3, #1
 800974e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009750:	1a43      	subs	r3, r0, r1
 8009752:	1e5a      	subs	r2, r3, #1
 8009754:	bf45      	ittet	mi
 8009756:	f1c3 0301 	rsbmi	r3, r3, #1
 800975a:	9304      	strmi	r3, [sp, #16]
 800975c:	2300      	movpl	r3, #0
 800975e:	2300      	movmi	r3, #0
 8009760:	9205      	str	r2, [sp, #20]
 8009762:	bf54      	ite	pl
 8009764:	9304      	strpl	r3, [sp, #16]
 8009766:	9305      	strmi	r3, [sp, #20]
 8009768:	f1bb 0f00 	cmp.w	fp, #0
 800976c:	db18      	blt.n	80097a0 <_dtoa_r+0x218>
 800976e:	9b05      	ldr	r3, [sp, #20]
 8009770:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009774:	445b      	add	r3, fp
 8009776:	9305      	str	r3, [sp, #20]
 8009778:	2300      	movs	r3, #0
 800977a:	9a06      	ldr	r2, [sp, #24]
 800977c:	2a09      	cmp	r2, #9
 800977e:	d849      	bhi.n	8009814 <_dtoa_r+0x28c>
 8009780:	2a05      	cmp	r2, #5
 8009782:	bfc4      	itt	gt
 8009784:	3a04      	subgt	r2, #4
 8009786:	9206      	strgt	r2, [sp, #24]
 8009788:	9a06      	ldr	r2, [sp, #24]
 800978a:	f1a2 0202 	sub.w	r2, r2, #2
 800978e:	bfcc      	ite	gt
 8009790:	2400      	movgt	r4, #0
 8009792:	2401      	movle	r4, #1
 8009794:	2a03      	cmp	r2, #3
 8009796:	d848      	bhi.n	800982a <_dtoa_r+0x2a2>
 8009798:	e8df f002 	tbb	[pc, r2]
 800979c:	3a2c2e0b 	.word	0x3a2c2e0b
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	2200      	movs	r2, #0
 80097a4:	eba3 030b 	sub.w	r3, r3, fp
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	9209      	str	r2, [sp, #36]	; 0x24
 80097ac:	f1cb 0300 	rsb	r3, fp, #0
 80097b0:	e7e3      	b.n	800977a <_dtoa_r+0x1f2>
 80097b2:	2200      	movs	r2, #0
 80097b4:	9207      	str	r2, [sp, #28]
 80097b6:	9a08      	ldr	r2, [sp, #32]
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	dc39      	bgt.n	8009830 <_dtoa_r+0x2a8>
 80097bc:	f04f 0a01 	mov.w	sl, #1
 80097c0:	46d1      	mov	r9, sl
 80097c2:	4652      	mov	r2, sl
 80097c4:	f8cd a020 	str.w	sl, [sp, #32]
 80097c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80097ca:	2100      	movs	r1, #0
 80097cc:	6079      	str	r1, [r7, #4]
 80097ce:	2004      	movs	r0, #4
 80097d0:	f100 0c14 	add.w	ip, r0, #20
 80097d4:	4594      	cmp	ip, r2
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	d92f      	bls.n	800983a <_dtoa_r+0x2b2>
 80097da:	4630      	mov	r0, r6
 80097dc:	930d      	str	r3, [sp, #52]	; 0x34
 80097de:	f001 f8af 	bl	800a940 <_Balloc>
 80097e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e4:	9001      	str	r0, [sp, #4]
 80097e6:	4602      	mov	r2, r0
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d149      	bne.n	8009880 <_dtoa_r+0x2f8>
 80097ec:	4b23      	ldr	r3, [pc, #140]	; (800987c <_dtoa_r+0x2f4>)
 80097ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80097f2:	e6e1      	b.n	80095b8 <_dtoa_r+0x30>
 80097f4:	2201      	movs	r2, #1
 80097f6:	e7dd      	b.n	80097b4 <_dtoa_r+0x22c>
 80097f8:	2200      	movs	r2, #0
 80097fa:	9207      	str	r2, [sp, #28]
 80097fc:	9a08      	ldr	r2, [sp, #32]
 80097fe:	eb0b 0a02 	add.w	sl, fp, r2
 8009802:	f10a 0901 	add.w	r9, sl, #1
 8009806:	464a      	mov	r2, r9
 8009808:	2a01      	cmp	r2, #1
 800980a:	bfb8      	it	lt
 800980c:	2201      	movlt	r2, #1
 800980e:	e7db      	b.n	80097c8 <_dtoa_r+0x240>
 8009810:	2201      	movs	r2, #1
 8009812:	e7f2      	b.n	80097fa <_dtoa_r+0x272>
 8009814:	2401      	movs	r4, #1
 8009816:	2200      	movs	r2, #0
 8009818:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800981c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009820:	2100      	movs	r1, #0
 8009822:	46d1      	mov	r9, sl
 8009824:	2212      	movs	r2, #18
 8009826:	9108      	str	r1, [sp, #32]
 8009828:	e7ce      	b.n	80097c8 <_dtoa_r+0x240>
 800982a:	2201      	movs	r2, #1
 800982c:	9207      	str	r2, [sp, #28]
 800982e:	e7f5      	b.n	800981c <_dtoa_r+0x294>
 8009830:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009834:	46d1      	mov	r9, sl
 8009836:	4652      	mov	r2, sl
 8009838:	e7c6      	b.n	80097c8 <_dtoa_r+0x240>
 800983a:	3101      	adds	r1, #1
 800983c:	6079      	str	r1, [r7, #4]
 800983e:	0040      	lsls	r0, r0, #1
 8009840:	e7c6      	b.n	80097d0 <_dtoa_r+0x248>
 8009842:	bf00      	nop
 8009844:	f3af 8000 	nop.w
 8009848:	636f4361 	.word	0x636f4361
 800984c:	3fd287a7 	.word	0x3fd287a7
 8009850:	8b60c8b3 	.word	0x8b60c8b3
 8009854:	3fc68a28 	.word	0x3fc68a28
 8009858:	509f79fb 	.word	0x509f79fb
 800985c:	3fd34413 	.word	0x3fd34413
 8009860:	0800c0ae 	.word	0x0800c0ae
 8009864:	0800c0c5 	.word	0x0800c0c5
 8009868:	7ff00000 	.word	0x7ff00000
 800986c:	0800c0aa 	.word	0x0800c0aa
 8009870:	0800c0a1 	.word	0x0800c0a1
 8009874:	0800bf25 	.word	0x0800bf25
 8009878:	0800c230 	.word	0x0800c230
 800987c:	0800c120 	.word	0x0800c120
 8009880:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009882:	9901      	ldr	r1, [sp, #4]
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	f1b9 0f0e 	cmp.w	r9, #14
 800988a:	d86c      	bhi.n	8009966 <_dtoa_r+0x3de>
 800988c:	2c00      	cmp	r4, #0
 800988e:	d06a      	beq.n	8009966 <_dtoa_r+0x3de>
 8009890:	f1bb 0f00 	cmp.w	fp, #0
 8009894:	f340 80a0 	ble.w	80099d8 <_dtoa_r+0x450>
 8009898:	49c1      	ldr	r1, [pc, #772]	; (8009ba0 <_dtoa_r+0x618>)
 800989a:	f00b 020f 	and.w	r2, fp, #15
 800989e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80098a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80098a6:	ed92 7b00 	vldr	d7, [r2]
 80098aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80098ae:	f000 8087 	beq.w	80099c0 <_dtoa_r+0x438>
 80098b2:	4abc      	ldr	r2, [pc, #752]	; (8009ba4 <_dtoa_r+0x61c>)
 80098b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80098b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80098bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80098c0:	f001 010f 	and.w	r1, r1, #15
 80098c4:	2203      	movs	r2, #3
 80098c6:	48b7      	ldr	r0, [pc, #732]	; (8009ba4 <_dtoa_r+0x61c>)
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d17b      	bne.n	80099c4 <_dtoa_r+0x43c>
 80098cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80098d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80098d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098da:	2900      	cmp	r1, #0
 80098dc:	f000 80a2 	beq.w	8009a24 <_dtoa_r+0x49c>
 80098e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80098e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f0:	f140 8098 	bpl.w	8009a24 <_dtoa_r+0x49c>
 80098f4:	f1b9 0f00 	cmp.w	r9, #0
 80098f8:	f000 8094 	beq.w	8009a24 <_dtoa_r+0x49c>
 80098fc:	f1ba 0f00 	cmp.w	sl, #0
 8009900:	dd2f      	ble.n	8009962 <_dtoa_r+0x3da>
 8009902:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009906:	ee27 7b06 	vmul.f64	d7, d7, d6
 800990a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800990e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009912:	3201      	adds	r2, #1
 8009914:	4650      	mov	r0, sl
 8009916:	ed9d 6b02 	vldr	d6, [sp, #8]
 800991a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800991e:	ee07 2a90 	vmov	s15, r2
 8009922:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009926:	eea7 5b06 	vfma.f64	d5, d7, d6
 800992a:	ee15 4a90 	vmov	r4, s11
 800992e:	ec52 1b15 	vmov	r1, r2, d5
 8009932:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009936:	2800      	cmp	r0, #0
 8009938:	d177      	bne.n	8009a2a <_dtoa_r+0x4a2>
 800993a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800993e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009942:	ec42 1b17 	vmov	d7, r1, r2
 8009946:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800994a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994e:	f300 8263 	bgt.w	8009e18 <_dtoa_r+0x890>
 8009952:	eeb1 7b47 	vneg.f64	d7, d7
 8009956:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800995a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995e:	f100 8258 	bmi.w	8009e12 <_dtoa_r+0x88a>
 8009962:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009968:	2a00      	cmp	r2, #0
 800996a:	f2c0 811d 	blt.w	8009ba8 <_dtoa_r+0x620>
 800996e:	f1bb 0f0e 	cmp.w	fp, #14
 8009972:	f300 8119 	bgt.w	8009ba8 <_dtoa_r+0x620>
 8009976:	4b8a      	ldr	r3, [pc, #552]	; (8009ba0 <_dtoa_r+0x618>)
 8009978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800997c:	ed93 6b00 	vldr	d6, [r3]
 8009980:	9b08      	ldr	r3, [sp, #32]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f280 80b7 	bge.w	8009af6 <_dtoa_r+0x56e>
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	f300 80b3 	bgt.w	8009af6 <_dtoa_r+0x56e>
 8009990:	f040 823f 	bne.w	8009e12 <_dtoa_r+0x88a>
 8009994:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009998:	ee26 6b07 	vmul.f64	d6, d6, d7
 800999c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a8:	464c      	mov	r4, r9
 80099aa:	464f      	mov	r7, r9
 80099ac:	f280 8215 	bge.w	8009dda <_dtoa_r+0x852>
 80099b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099b4:	2331      	movs	r3, #49	; 0x31
 80099b6:	f808 3b01 	strb.w	r3, [r8], #1
 80099ba:	f10b 0b01 	add.w	fp, fp, #1
 80099be:	e211      	b.n	8009de4 <_dtoa_r+0x85c>
 80099c0:	2202      	movs	r2, #2
 80099c2:	e780      	b.n	80098c6 <_dtoa_r+0x33e>
 80099c4:	07cc      	lsls	r4, r1, #31
 80099c6:	d504      	bpl.n	80099d2 <_dtoa_r+0x44a>
 80099c8:	ed90 6b00 	vldr	d6, [r0]
 80099cc:	3201      	adds	r2, #1
 80099ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099d2:	1049      	asrs	r1, r1, #1
 80099d4:	3008      	adds	r0, #8
 80099d6:	e777      	b.n	80098c8 <_dtoa_r+0x340>
 80099d8:	d022      	beq.n	8009a20 <_dtoa_r+0x498>
 80099da:	f1cb 0100 	rsb	r1, fp, #0
 80099de:	4a70      	ldr	r2, [pc, #448]	; (8009ba0 <_dtoa_r+0x618>)
 80099e0:	f001 000f 	and.w	r0, r1, #15
 80099e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80099e8:	ed92 7b00 	vldr	d7, [r2]
 80099ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80099f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099f4:	486b      	ldr	r0, [pc, #428]	; (8009ba4 <_dtoa_r+0x61c>)
 80099f6:	1109      	asrs	r1, r1, #4
 80099f8:	2400      	movs	r4, #0
 80099fa:	2202      	movs	r2, #2
 80099fc:	b929      	cbnz	r1, 8009a0a <_dtoa_r+0x482>
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	f43f af6a 	beq.w	80098d8 <_dtoa_r+0x350>
 8009a04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a08:	e766      	b.n	80098d8 <_dtoa_r+0x350>
 8009a0a:	07cf      	lsls	r7, r1, #31
 8009a0c:	d505      	bpl.n	8009a1a <_dtoa_r+0x492>
 8009a0e:	ed90 6b00 	vldr	d6, [r0]
 8009a12:	3201      	adds	r2, #1
 8009a14:	2401      	movs	r4, #1
 8009a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a1a:	1049      	asrs	r1, r1, #1
 8009a1c:	3008      	adds	r0, #8
 8009a1e:	e7ed      	b.n	80099fc <_dtoa_r+0x474>
 8009a20:	2202      	movs	r2, #2
 8009a22:	e759      	b.n	80098d8 <_dtoa_r+0x350>
 8009a24:	465f      	mov	r7, fp
 8009a26:	4648      	mov	r0, r9
 8009a28:	e775      	b.n	8009916 <_dtoa_r+0x38e>
 8009a2a:	ec42 1b17 	vmov	d7, r1, r2
 8009a2e:	4a5c      	ldr	r2, [pc, #368]	; (8009ba0 <_dtoa_r+0x618>)
 8009a30:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a34:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	1814      	adds	r4, r2, r0
 8009a3c:	9a07      	ldr	r2, [sp, #28]
 8009a3e:	b352      	cbz	r2, 8009a96 <_dtoa_r+0x50e>
 8009a40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009a44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009a48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a4c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009a50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009a54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009a58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009a5c:	ee14 2a90 	vmov	r2, s9
 8009a60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009a64:	3230      	adds	r2, #48	; 0x30
 8009a66:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009a6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a72:	f808 2b01 	strb.w	r2, [r8], #1
 8009a76:	d439      	bmi.n	8009aec <_dtoa_r+0x564>
 8009a78:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009a7c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a84:	d472      	bmi.n	8009b6c <_dtoa_r+0x5e4>
 8009a86:	45a0      	cmp	r8, r4
 8009a88:	f43f af6b 	beq.w	8009962 <_dtoa_r+0x3da>
 8009a8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009a90:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009a94:	e7e0      	b.n	8009a58 <_dtoa_r+0x4d0>
 8009a96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009aa4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009aa8:	ee14 2a90 	vmov	r2, s9
 8009aac:	3230      	adds	r2, #48	; 0x30
 8009aae:	f808 2b01 	strb.w	r2, [r8], #1
 8009ab2:	45a0      	cmp	r8, r4
 8009ab4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ab8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009abc:	d118      	bne.n	8009af0 <_dtoa_r+0x568>
 8009abe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009ac2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009ac6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ace:	dc4d      	bgt.n	8009b6c <_dtoa_r+0x5e4>
 8009ad0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ad4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009adc:	f57f af41 	bpl.w	8009962 <_dtoa_r+0x3da>
 8009ae0:	4688      	mov	r8, r1
 8009ae2:	3901      	subs	r1, #1
 8009ae4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009ae8:	2b30      	cmp	r3, #48	; 0x30
 8009aea:	d0f9      	beq.n	8009ae0 <_dtoa_r+0x558>
 8009aec:	46bb      	mov	fp, r7
 8009aee:	e02a      	b.n	8009b46 <_dtoa_r+0x5be>
 8009af0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009af4:	e7d6      	b.n	8009aa4 <_dtoa_r+0x51c>
 8009af6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009afa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009afe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b06:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b0a:	ee15 3a10 	vmov	r3, s10
 8009b0e:	3330      	adds	r3, #48	; 0x30
 8009b10:	f808 3b01 	strb.w	r3, [r8], #1
 8009b14:	9b01      	ldr	r3, [sp, #4]
 8009b16:	eba8 0303 	sub.w	r3, r8, r3
 8009b1a:	4599      	cmp	r9, r3
 8009b1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b24:	d133      	bne.n	8009b8e <_dtoa_r+0x606>
 8009b26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b32:	dc1a      	bgt.n	8009b6a <_dtoa_r+0x5e2>
 8009b34:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	d103      	bne.n	8009b46 <_dtoa_r+0x5be>
 8009b3e:	ee15 3a10 	vmov	r3, s10
 8009b42:	07d9      	lsls	r1, r3, #31
 8009b44:	d411      	bmi.n	8009b6a <_dtoa_r+0x5e2>
 8009b46:	4629      	mov	r1, r5
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f000 ff39 	bl	800a9c0 <_Bfree>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b52:	f888 3000 	strb.w	r3, [r8]
 8009b56:	f10b 0301 	add.w	r3, fp, #1
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f43f ad61 	beq.w	8009626 <_dtoa_r+0x9e>
 8009b64:	f8c3 8000 	str.w	r8, [r3]
 8009b68:	e55d      	b.n	8009626 <_dtoa_r+0x9e>
 8009b6a:	465f      	mov	r7, fp
 8009b6c:	4643      	mov	r3, r8
 8009b6e:	4698      	mov	r8, r3
 8009b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b74:	2a39      	cmp	r2, #57	; 0x39
 8009b76:	d106      	bne.n	8009b86 <_dtoa_r+0x5fe>
 8009b78:	9a01      	ldr	r2, [sp, #4]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d1f7      	bne.n	8009b6e <_dtoa_r+0x5e6>
 8009b7e:	9901      	ldr	r1, [sp, #4]
 8009b80:	2230      	movs	r2, #48	; 0x30
 8009b82:	3701      	adds	r7, #1
 8009b84:	700a      	strb	r2, [r1, #0]
 8009b86:	781a      	ldrb	r2, [r3, #0]
 8009b88:	3201      	adds	r2, #1
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e7ae      	b.n	8009aec <_dtoa_r+0x564>
 8009b8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009b92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9a:	d1b2      	bne.n	8009b02 <_dtoa_r+0x57a>
 8009b9c:	e7d3      	b.n	8009b46 <_dtoa_r+0x5be>
 8009b9e:	bf00      	nop
 8009ba0:	0800c230 	.word	0x0800c230
 8009ba4:	0800c208 	.word	0x0800c208
 8009ba8:	9907      	ldr	r1, [sp, #28]
 8009baa:	2900      	cmp	r1, #0
 8009bac:	f000 80d0 	beq.w	8009d50 <_dtoa_r+0x7c8>
 8009bb0:	9906      	ldr	r1, [sp, #24]
 8009bb2:	2901      	cmp	r1, #1
 8009bb4:	f300 80b4 	bgt.w	8009d20 <_dtoa_r+0x798>
 8009bb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	f000 80ac 	beq.w	8009d18 <_dtoa_r+0x790>
 8009bc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009bc4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009bc8:	461c      	mov	r4, r3
 8009bca:	930a      	str	r3, [sp, #40]	; 0x28
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	4413      	add	r3, r2
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4413      	add	r3, r2
 8009bd8:	4630      	mov	r0, r6
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	f000 fff2 	bl	800abc4 <__i2b>
 8009be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be2:	4607      	mov	r7, r0
 8009be4:	f1b8 0f00 	cmp.w	r8, #0
 8009be8:	dd0d      	ble.n	8009c06 <_dtoa_r+0x67e>
 8009bea:	9a05      	ldr	r2, [sp, #20]
 8009bec:	2a00      	cmp	r2, #0
 8009bee:	dd0a      	ble.n	8009c06 <_dtoa_r+0x67e>
 8009bf0:	4542      	cmp	r2, r8
 8009bf2:	9904      	ldr	r1, [sp, #16]
 8009bf4:	bfa8      	it	ge
 8009bf6:	4642      	movge	r2, r8
 8009bf8:	1a89      	subs	r1, r1, r2
 8009bfa:	9104      	str	r1, [sp, #16]
 8009bfc:	9905      	ldr	r1, [sp, #20]
 8009bfe:	eba8 0802 	sub.w	r8, r8, r2
 8009c02:	1a8a      	subs	r2, r1, r2
 8009c04:	9205      	str	r2, [sp, #20]
 8009c06:	b303      	cbz	r3, 8009c4a <_dtoa_r+0x6c2>
 8009c08:	9a07      	ldr	r2, [sp, #28]
 8009c0a:	2a00      	cmp	r2, #0
 8009c0c:	f000 80a5 	beq.w	8009d5a <_dtoa_r+0x7d2>
 8009c10:	2c00      	cmp	r4, #0
 8009c12:	dd13      	ble.n	8009c3c <_dtoa_r+0x6b4>
 8009c14:	4639      	mov	r1, r7
 8009c16:	4622      	mov	r2, r4
 8009c18:	4630      	mov	r0, r6
 8009c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c1c:	f001 f892 	bl	800ad44 <__pow5mult>
 8009c20:	462a      	mov	r2, r5
 8009c22:	4601      	mov	r1, r0
 8009c24:	4607      	mov	r7, r0
 8009c26:	4630      	mov	r0, r6
 8009c28:	f000 ffe2 	bl	800abf0 <__multiply>
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	900a      	str	r0, [sp, #40]	; 0x28
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 fec5 	bl	800a9c0 <_Bfree>
 8009c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c3a:	4615      	mov	r5, r2
 8009c3c:	1b1a      	subs	r2, r3, r4
 8009c3e:	d004      	beq.n	8009c4a <_dtoa_r+0x6c2>
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f001 f87e 	bl	800ad44 <__pow5mult>
 8009c48:	4605      	mov	r5, r0
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 ffb9 	bl	800abc4 <__i2b>
 8009c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	4604      	mov	r4, r0
 8009c58:	f340 8081 	ble.w	8009d5e <_dtoa_r+0x7d6>
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4601      	mov	r1, r0
 8009c60:	4630      	mov	r0, r6
 8009c62:	f001 f86f 	bl	800ad44 <__pow5mult>
 8009c66:	9b06      	ldr	r3, [sp, #24]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	dd7a      	ble.n	8009d64 <_dtoa_r+0x7dc>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	930a      	str	r3, [sp, #40]	; 0x28
 8009c72:	6922      	ldr	r2, [r4, #16]
 8009c74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009c78:	6910      	ldr	r0, [r2, #16]
 8009c7a:	f000 ff53 	bl	800ab24 <__hi0bits>
 8009c7e:	f1c0 0020 	rsb	r0, r0, #32
 8009c82:	9b05      	ldr	r3, [sp, #20]
 8009c84:	4418      	add	r0, r3
 8009c86:	f010 001f 	ands.w	r0, r0, #31
 8009c8a:	f000 808c 	beq.w	8009da6 <_dtoa_r+0x81e>
 8009c8e:	f1c0 0220 	rsb	r2, r0, #32
 8009c92:	2a04      	cmp	r2, #4
 8009c94:	f340 8085 	ble.w	8009da2 <_dtoa_r+0x81a>
 8009c98:	f1c0 001c 	rsb	r0, r0, #28
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	4403      	add	r3, r0
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	9b05      	ldr	r3, [sp, #20]
 8009ca4:	4403      	add	r3, r0
 8009ca6:	4480      	add	r8, r0
 8009ca8:	9305      	str	r3, [sp, #20]
 8009caa:	9b04      	ldr	r3, [sp, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dd05      	ble.n	8009cbc <_dtoa_r+0x734>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f001 f89f 	bl	800adf8 <__lshift>
 8009cba:	4605      	mov	r5, r0
 8009cbc:	9b05      	ldr	r3, [sp, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dd05      	ble.n	8009cce <_dtoa_r+0x746>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f001 f896 	bl	800adf8 <__lshift>
 8009ccc:	4604      	mov	r4, r0
 8009cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d06a      	beq.n	8009daa <_dtoa_r+0x822>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f001 f8fe 	bl	800aed8 <__mcmp>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	da64      	bge.n	8009daa <_dtoa_r+0x822>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 fe8c 	bl	800aa04 <__multadd>
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8191 	beq.w	800a01c <_dtoa_r+0xa94>
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	220a      	movs	r2, #10
 8009d00:	4630      	mov	r0, r6
 8009d02:	f000 fe7f 	bl	800aa04 <__multadd>
 8009d06:	f1ba 0f00 	cmp.w	sl, #0
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	f300 808d 	bgt.w	8009e2a <_dtoa_r+0x8a2>
 8009d10:	9b06      	ldr	r3, [sp, #24]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	dc50      	bgt.n	8009db8 <_dtoa_r+0x830>
 8009d16:	e088      	b.n	8009e2a <_dtoa_r+0x8a2>
 8009d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d1e:	e751      	b.n	8009bc4 <_dtoa_r+0x63c>
 8009d20:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bfbf      	itttt	lt
 8009d28:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009d2a:	1ae3      	sublt	r3, r4, r3
 8009d2c:	18d2      	addlt	r2, r2, r3
 8009d2e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009d30:	bfb6      	itet	lt
 8009d32:	4623      	movlt	r3, r4
 8009d34:	1b1c      	subge	r4, r3, r4
 8009d36:	2400      	movlt	r4, #0
 8009d38:	f1b9 0f00 	cmp.w	r9, #0
 8009d3c:	bfb5      	itete	lt
 8009d3e:	9a04      	ldrlt	r2, [sp, #16]
 8009d40:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009d44:	eba2 0809 	sublt.w	r8, r2, r9
 8009d48:	464a      	movge	r2, r9
 8009d4a:	bfb8      	it	lt
 8009d4c:	2200      	movlt	r2, #0
 8009d4e:	e73c      	b.n	8009bca <_dtoa_r+0x642>
 8009d50:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d54:	9f07      	ldr	r7, [sp, #28]
 8009d56:	461c      	mov	r4, r3
 8009d58:	e744      	b.n	8009be4 <_dtoa_r+0x65c>
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	e770      	b.n	8009c40 <_dtoa_r+0x6b8>
 8009d5e:	9b06      	ldr	r3, [sp, #24]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	dc18      	bgt.n	8009d96 <_dtoa_r+0x80e>
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	b9b3      	cbnz	r3, 8009d96 <_dtoa_r+0x80e>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009d6e:	b9a2      	cbnz	r2, 8009d9a <_dtoa_r+0x812>
 8009d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d74:	0d12      	lsrs	r2, r2, #20
 8009d76:	0512      	lsls	r2, r2, #20
 8009d78:	b18a      	cbz	r2, 8009d9e <_dtoa_r+0x816>
 8009d7a:	9b04      	ldr	r3, [sp, #16]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	3301      	adds	r3, #1
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	2301      	movs	r3, #1
 8009d88:	930a      	str	r3, [sp, #40]	; 0x28
 8009d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f47f af70 	bne.w	8009c72 <_dtoa_r+0x6ea>
 8009d92:	2001      	movs	r0, #1
 8009d94:	e775      	b.n	8009c82 <_dtoa_r+0x6fa>
 8009d96:	2300      	movs	r3, #0
 8009d98:	e7f6      	b.n	8009d88 <_dtoa_r+0x800>
 8009d9a:	9b02      	ldr	r3, [sp, #8]
 8009d9c:	e7f4      	b.n	8009d88 <_dtoa_r+0x800>
 8009d9e:	920a      	str	r2, [sp, #40]	; 0x28
 8009da0:	e7f3      	b.n	8009d8a <_dtoa_r+0x802>
 8009da2:	d082      	beq.n	8009caa <_dtoa_r+0x722>
 8009da4:	4610      	mov	r0, r2
 8009da6:	301c      	adds	r0, #28
 8009da8:	e778      	b.n	8009c9c <_dtoa_r+0x714>
 8009daa:	f1b9 0f00 	cmp.w	r9, #0
 8009dae:	dc37      	bgt.n	8009e20 <_dtoa_r+0x898>
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	dd34      	ble.n	8009e20 <_dtoa_r+0x898>
 8009db6:	46ca      	mov	sl, r9
 8009db8:	f1ba 0f00 	cmp.w	sl, #0
 8009dbc:	d10d      	bne.n	8009dda <_dtoa_r+0x852>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4653      	mov	r3, sl
 8009dc2:	2205      	movs	r2, #5
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f000 fe1d 	bl	800aa04 <__multadd>
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4604      	mov	r4, r0
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f001 f882 	bl	800aed8 <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f73f adeb 	bgt.w	80099b0 <_dtoa_r+0x428>
 8009dda:	9b08      	ldr	r3, [sp, #32]
 8009ddc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009de0:	ea6f 0b03 	mvn.w	fp, r3
 8009de4:	f04f 0900 	mov.w	r9, #0
 8009de8:	4621      	mov	r1, r4
 8009dea:	4630      	mov	r0, r6
 8009dec:	f000 fde8 	bl	800a9c0 <_Bfree>
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	f43f aea8 	beq.w	8009b46 <_dtoa_r+0x5be>
 8009df6:	f1b9 0f00 	cmp.w	r9, #0
 8009dfa:	d005      	beq.n	8009e08 <_dtoa_r+0x880>
 8009dfc:	45b9      	cmp	r9, r7
 8009dfe:	d003      	beq.n	8009e08 <_dtoa_r+0x880>
 8009e00:	4649      	mov	r1, r9
 8009e02:	4630      	mov	r0, r6
 8009e04:	f000 fddc 	bl	800a9c0 <_Bfree>
 8009e08:	4639      	mov	r1, r7
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f000 fdd8 	bl	800a9c0 <_Bfree>
 8009e10:	e699      	b.n	8009b46 <_dtoa_r+0x5be>
 8009e12:	2400      	movs	r4, #0
 8009e14:	4627      	mov	r7, r4
 8009e16:	e7e0      	b.n	8009dda <_dtoa_r+0x852>
 8009e18:	46bb      	mov	fp, r7
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	e5c7      	b.n	80099b0 <_dtoa_r+0x428>
 8009e20:	9b07      	ldr	r3, [sp, #28]
 8009e22:	46ca      	mov	sl, r9
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 8100 	beq.w	800a02a <_dtoa_r+0xaa2>
 8009e2a:	f1b8 0f00 	cmp.w	r8, #0
 8009e2e:	dd05      	ble.n	8009e3c <_dtoa_r+0x8b4>
 8009e30:	4639      	mov	r1, r7
 8009e32:	4642      	mov	r2, r8
 8009e34:	4630      	mov	r0, r6
 8009e36:	f000 ffdf 	bl	800adf8 <__lshift>
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d05d      	beq.n	8009efe <_dtoa_r+0x976>
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4630      	mov	r0, r6
 8009e46:	f000 fd7b 	bl	800a940 <_Balloc>
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	b928      	cbnz	r0, 8009e5a <_dtoa_r+0x8d2>
 8009e4e:	4b82      	ldr	r3, [pc, #520]	; (800a058 <_dtoa_r+0xad0>)
 8009e50:	4602      	mov	r2, r0
 8009e52:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e56:	f7ff bbaf 	b.w	80095b8 <_dtoa_r+0x30>
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	3202      	adds	r2, #2
 8009e5e:	0092      	lsls	r2, r2, #2
 8009e60:	f107 010c 	add.w	r1, r7, #12
 8009e64:	300c      	adds	r0, #12
 8009e66:	f7fd fcac 	bl	80077c2 <memcpy>
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	4641      	mov	r1, r8
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 ffc2 	bl	800adf8 <__lshift>
 8009e74:	9b01      	ldr	r3, [sp, #4]
 8009e76:	3301      	adds	r3, #1
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	4453      	add	r3, sl
 8009e7e:	9308      	str	r3, [sp, #32]
 8009e80:	9b02      	ldr	r3, [sp, #8]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	46b9      	mov	r9, r7
 8009e88:	9307      	str	r3, [sp, #28]
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	4621      	mov	r1, r4
 8009e90:	3b01      	subs	r3, #1
 8009e92:	4628      	mov	r0, r5
 8009e94:	9302      	str	r3, [sp, #8]
 8009e96:	f7ff fae9 	bl	800946c <quorem>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	3330      	adds	r3, #48	; 0x30
 8009e9e:	9005      	str	r0, [sp, #20]
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea6:	f001 f817 	bl	800aed8 <__mcmp>
 8009eaa:	463a      	mov	r2, r7
 8009eac:	4682      	mov	sl, r0
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f001 f82d 	bl	800af10 <__mdiff>
 8009eb6:	68c2      	ldr	r2, [r0, #12]
 8009eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eba:	4680      	mov	r8, r0
 8009ebc:	bb0a      	cbnz	r2, 8009f02 <_dtoa_r+0x97a>
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f001 f809 	bl	800aed8 <__mcmp>
 8009ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec8:	4602      	mov	r2, r0
 8009eca:	4641      	mov	r1, r8
 8009ecc:	4630      	mov	r0, r6
 8009ece:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009ed2:	f000 fd75 	bl	800a9c0 <_Bfree>
 8009ed6:	9b06      	ldr	r3, [sp, #24]
 8009ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eda:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009ede:	ea43 0102 	orr.w	r1, r3, r2
 8009ee2:	9b07      	ldr	r3, [sp, #28]
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee8:	d10d      	bne.n	8009f06 <_dtoa_r+0x97e>
 8009eea:	2b39      	cmp	r3, #57	; 0x39
 8009eec:	d029      	beq.n	8009f42 <_dtoa_r+0x9ba>
 8009eee:	f1ba 0f00 	cmp.w	sl, #0
 8009ef2:	dd01      	ble.n	8009ef8 <_dtoa_r+0x970>
 8009ef4:	9b05      	ldr	r3, [sp, #20]
 8009ef6:	3331      	adds	r3, #49	; 0x31
 8009ef8:	9a02      	ldr	r2, [sp, #8]
 8009efa:	7013      	strb	r3, [r2, #0]
 8009efc:	e774      	b.n	8009de8 <_dtoa_r+0x860>
 8009efe:	4638      	mov	r0, r7
 8009f00:	e7b8      	b.n	8009e74 <_dtoa_r+0x8ec>
 8009f02:	2201      	movs	r2, #1
 8009f04:	e7e1      	b.n	8009eca <_dtoa_r+0x942>
 8009f06:	f1ba 0f00 	cmp.w	sl, #0
 8009f0a:	db06      	blt.n	8009f1a <_dtoa_r+0x992>
 8009f0c:	9906      	ldr	r1, [sp, #24]
 8009f0e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009f12:	9907      	ldr	r1, [sp, #28]
 8009f14:	ea5a 0101 	orrs.w	r1, sl, r1
 8009f18:	d120      	bne.n	8009f5c <_dtoa_r+0x9d4>
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	ddec      	ble.n	8009ef8 <_dtoa_r+0x970>
 8009f1e:	4629      	mov	r1, r5
 8009f20:	2201      	movs	r2, #1
 8009f22:	4630      	mov	r0, r6
 8009f24:	9304      	str	r3, [sp, #16]
 8009f26:	f000 ff67 	bl	800adf8 <__lshift>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	f000 ffd3 	bl	800aed8 <__mcmp>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	9b04      	ldr	r3, [sp, #16]
 8009f36:	dc02      	bgt.n	8009f3e <_dtoa_r+0x9b6>
 8009f38:	d1de      	bne.n	8009ef8 <_dtoa_r+0x970>
 8009f3a:	07da      	lsls	r2, r3, #31
 8009f3c:	d5dc      	bpl.n	8009ef8 <_dtoa_r+0x970>
 8009f3e:	2b39      	cmp	r3, #57	; 0x39
 8009f40:	d1d8      	bne.n	8009ef4 <_dtoa_r+0x96c>
 8009f42:	9a02      	ldr	r2, [sp, #8]
 8009f44:	2339      	movs	r3, #57	; 0x39
 8009f46:	7013      	strb	r3, [r2, #0]
 8009f48:	4643      	mov	r3, r8
 8009f4a:	4698      	mov	r8, r3
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009f52:	2a39      	cmp	r2, #57	; 0x39
 8009f54:	d051      	beq.n	8009ffa <_dtoa_r+0xa72>
 8009f56:	3201      	adds	r2, #1
 8009f58:	701a      	strb	r2, [r3, #0]
 8009f5a:	e745      	b.n	8009de8 <_dtoa_r+0x860>
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	dd03      	ble.n	8009f68 <_dtoa_r+0x9e0>
 8009f60:	2b39      	cmp	r3, #57	; 0x39
 8009f62:	d0ee      	beq.n	8009f42 <_dtoa_r+0x9ba>
 8009f64:	3301      	adds	r3, #1
 8009f66:	e7c7      	b.n	8009ef8 <_dtoa_r+0x970>
 8009f68:	9a04      	ldr	r2, [sp, #16]
 8009f6a:	9908      	ldr	r1, [sp, #32]
 8009f6c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f70:	428a      	cmp	r2, r1
 8009f72:	d02b      	beq.n	8009fcc <_dtoa_r+0xa44>
 8009f74:	4629      	mov	r1, r5
 8009f76:	2300      	movs	r3, #0
 8009f78:	220a      	movs	r2, #10
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f000 fd42 	bl	800aa04 <__multadd>
 8009f80:	45b9      	cmp	r9, r7
 8009f82:	4605      	mov	r5, r0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	f04f 020a 	mov.w	r2, #10
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	4630      	mov	r0, r6
 8009f90:	d107      	bne.n	8009fa2 <_dtoa_r+0xa1a>
 8009f92:	f000 fd37 	bl	800aa04 <__multadd>
 8009f96:	4681      	mov	r9, r0
 8009f98:	4607      	mov	r7, r0
 8009f9a:	9b04      	ldr	r3, [sp, #16]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	e774      	b.n	8009e8c <_dtoa_r+0x904>
 8009fa2:	f000 fd2f 	bl	800aa04 <__multadd>
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	4681      	mov	r9, r0
 8009faa:	2300      	movs	r3, #0
 8009fac:	220a      	movs	r2, #10
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f000 fd28 	bl	800aa04 <__multadd>
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	e7f0      	b.n	8009f9a <_dtoa_r+0xa12>
 8009fb8:	f1ba 0f00 	cmp.w	sl, #0
 8009fbc:	9a01      	ldr	r2, [sp, #4]
 8009fbe:	bfcc      	ite	gt
 8009fc0:	46d0      	movgt	r8, sl
 8009fc2:	f04f 0801 	movle.w	r8, #1
 8009fc6:	4490      	add	r8, r2
 8009fc8:	f04f 0900 	mov.w	r9, #0
 8009fcc:	4629      	mov	r1, r5
 8009fce:	2201      	movs	r2, #1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	9302      	str	r3, [sp, #8]
 8009fd4:	f000 ff10 	bl	800adf8 <__lshift>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4605      	mov	r5, r0
 8009fdc:	f000 ff7c 	bl	800aed8 <__mcmp>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	dcb1      	bgt.n	8009f48 <_dtoa_r+0x9c0>
 8009fe4:	d102      	bne.n	8009fec <_dtoa_r+0xa64>
 8009fe6:	9b02      	ldr	r3, [sp, #8]
 8009fe8:	07db      	lsls	r3, r3, #31
 8009fea:	d4ad      	bmi.n	8009f48 <_dtoa_r+0x9c0>
 8009fec:	4643      	mov	r3, r8
 8009fee:	4698      	mov	r8, r3
 8009ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ff4:	2a30      	cmp	r2, #48	; 0x30
 8009ff6:	d0fa      	beq.n	8009fee <_dtoa_r+0xa66>
 8009ff8:	e6f6      	b.n	8009de8 <_dtoa_r+0x860>
 8009ffa:	9a01      	ldr	r2, [sp, #4]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d1a4      	bne.n	8009f4a <_dtoa_r+0x9c2>
 800a000:	f10b 0b01 	add.w	fp, fp, #1
 800a004:	2331      	movs	r3, #49	; 0x31
 800a006:	e778      	b.n	8009efa <_dtoa_r+0x972>
 800a008:	4b14      	ldr	r3, [pc, #80]	; (800a05c <_dtoa_r+0xad4>)
 800a00a:	f7ff bb27 	b.w	800965c <_dtoa_r+0xd4>
 800a00e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a010:	2b00      	cmp	r3, #0
 800a012:	f47f ab03 	bne.w	800961c <_dtoa_r+0x94>
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <_dtoa_r+0xad8>)
 800a018:	f7ff bb20 	b.w	800965c <_dtoa_r+0xd4>
 800a01c:	f1ba 0f00 	cmp.w	sl, #0
 800a020:	dc03      	bgt.n	800a02a <_dtoa_r+0xaa2>
 800a022:	9b06      	ldr	r3, [sp, #24]
 800a024:	2b02      	cmp	r3, #2
 800a026:	f73f aec7 	bgt.w	8009db8 <_dtoa_r+0x830>
 800a02a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f7ff fa1b 	bl	800946c <quorem>
 800a036:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a03a:	f808 3b01 	strb.w	r3, [r8], #1
 800a03e:	9a01      	ldr	r2, [sp, #4]
 800a040:	eba8 0202 	sub.w	r2, r8, r2
 800a044:	4592      	cmp	sl, r2
 800a046:	ddb7      	ble.n	8009fb8 <_dtoa_r+0xa30>
 800a048:	4629      	mov	r1, r5
 800a04a:	2300      	movs	r3, #0
 800a04c:	220a      	movs	r2, #10
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 fcd8 	bl	800aa04 <__multadd>
 800a054:	4605      	mov	r5, r0
 800a056:	e7ea      	b.n	800a02e <_dtoa_r+0xaa6>
 800a058:	0800c120 	.word	0x0800c120
 800a05c:	0800bf24 	.word	0x0800bf24
 800a060:	0800c0a1 	.word	0x0800c0a1

0800a064 <__sflush_r>:
 800a064:	898a      	ldrh	r2, [r1, #12]
 800a066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	4605      	mov	r5, r0
 800a06c:	0710      	lsls	r0, r2, #28
 800a06e:	460c      	mov	r4, r1
 800a070:	d458      	bmi.n	800a124 <__sflush_r+0xc0>
 800a072:	684b      	ldr	r3, [r1, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	dc05      	bgt.n	800a084 <__sflush_r+0x20>
 800a078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	dc02      	bgt.n	800a084 <__sflush_r+0x20>
 800a07e:	2000      	movs	r0, #0
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a086:	2e00      	cmp	r6, #0
 800a088:	d0f9      	beq.n	800a07e <__sflush_r+0x1a>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a090:	682f      	ldr	r7, [r5, #0]
 800a092:	602b      	str	r3, [r5, #0]
 800a094:	d032      	beq.n	800a0fc <__sflush_r+0x98>
 800a096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	075a      	lsls	r2, r3, #29
 800a09c:	d505      	bpl.n	800a0aa <__sflush_r+0x46>
 800a09e:	6863      	ldr	r3, [r4, #4]
 800a0a0:	1ac0      	subs	r0, r0, r3
 800a0a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0a4:	b10b      	cbz	r3, 800a0aa <__sflush_r+0x46>
 800a0a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0a8:	1ac0      	subs	r0, r0, r3
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0b0:	6a21      	ldr	r1, [r4, #32]
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b0      	blx	r6
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	d106      	bne.n	800a0ca <__sflush_r+0x66>
 800a0bc:	6829      	ldr	r1, [r5, #0]
 800a0be:	291d      	cmp	r1, #29
 800a0c0:	d82c      	bhi.n	800a11c <__sflush_r+0xb8>
 800a0c2:	4a2a      	ldr	r2, [pc, #168]	; (800a16c <__sflush_r+0x108>)
 800a0c4:	40ca      	lsrs	r2, r1
 800a0c6:	07d6      	lsls	r6, r2, #31
 800a0c8:	d528      	bpl.n	800a11c <__sflush_r+0xb8>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6062      	str	r2, [r4, #4]
 800a0ce:	04d9      	lsls	r1, r3, #19
 800a0d0:	6922      	ldr	r2, [r4, #16]
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	d504      	bpl.n	800a0e0 <__sflush_r+0x7c>
 800a0d6:	1c42      	adds	r2, r0, #1
 800a0d8:	d101      	bne.n	800a0de <__sflush_r+0x7a>
 800a0da:	682b      	ldr	r3, [r5, #0]
 800a0dc:	b903      	cbnz	r3, 800a0e0 <__sflush_r+0x7c>
 800a0de:	6560      	str	r0, [r4, #84]	; 0x54
 800a0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e2:	602f      	str	r7, [r5, #0]
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	d0ca      	beq.n	800a07e <__sflush_r+0x1a>
 800a0e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ec:	4299      	cmp	r1, r3
 800a0ee:	d002      	beq.n	800a0f6 <__sflush_r+0x92>
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f001 f8f9 	bl	800b2e8 <_free_r>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0fa:	e7c1      	b.n	800a080 <__sflush_r+0x1c>
 800a0fc:	6a21      	ldr	r1, [r4, #32]
 800a0fe:	2301      	movs	r3, #1
 800a100:	4628      	mov	r0, r5
 800a102:	47b0      	blx	r6
 800a104:	1c41      	adds	r1, r0, #1
 800a106:	d1c7      	bne.n	800a098 <__sflush_r+0x34>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0c4      	beq.n	800a098 <__sflush_r+0x34>
 800a10e:	2b1d      	cmp	r3, #29
 800a110:	d001      	beq.n	800a116 <__sflush_r+0xb2>
 800a112:	2b16      	cmp	r3, #22
 800a114:	d101      	bne.n	800a11a <__sflush_r+0xb6>
 800a116:	602f      	str	r7, [r5, #0]
 800a118:	e7b1      	b.n	800a07e <__sflush_r+0x1a>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a120:	81a3      	strh	r3, [r4, #12]
 800a122:	e7ad      	b.n	800a080 <__sflush_r+0x1c>
 800a124:	690f      	ldr	r7, [r1, #16]
 800a126:	2f00      	cmp	r7, #0
 800a128:	d0a9      	beq.n	800a07e <__sflush_r+0x1a>
 800a12a:	0793      	lsls	r3, r2, #30
 800a12c:	680e      	ldr	r6, [r1, #0]
 800a12e:	bf08      	it	eq
 800a130:	694b      	ldreq	r3, [r1, #20]
 800a132:	600f      	str	r7, [r1, #0]
 800a134:	bf18      	it	ne
 800a136:	2300      	movne	r3, #0
 800a138:	eba6 0807 	sub.w	r8, r6, r7
 800a13c:	608b      	str	r3, [r1, #8]
 800a13e:	f1b8 0f00 	cmp.w	r8, #0
 800a142:	dd9c      	ble.n	800a07e <__sflush_r+0x1a>
 800a144:	6a21      	ldr	r1, [r4, #32]
 800a146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a148:	4643      	mov	r3, r8
 800a14a:	463a      	mov	r2, r7
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b0      	blx	r6
 800a150:	2800      	cmp	r0, #0
 800a152:	dc06      	bgt.n	800a162 <__sflush_r+0xfe>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a160:	e78e      	b.n	800a080 <__sflush_r+0x1c>
 800a162:	4407      	add	r7, r0
 800a164:	eba8 0800 	sub.w	r8, r8, r0
 800a168:	e7e9      	b.n	800a13e <__sflush_r+0xda>
 800a16a:	bf00      	nop
 800a16c:	20400001 	.word	0x20400001

0800a170 <_fflush_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	690b      	ldr	r3, [r1, #16]
 800a174:	4605      	mov	r5, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b913      	cbnz	r3, 800a180 <_fflush_r+0x10>
 800a17a:	2500      	movs	r5, #0
 800a17c:	4628      	mov	r0, r5
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	b118      	cbz	r0, 800a18a <_fflush_r+0x1a>
 800a182:	6983      	ldr	r3, [r0, #24]
 800a184:	b90b      	cbnz	r3, 800a18a <_fflush_r+0x1a>
 800a186:	f7fd fa57 	bl	8007638 <__sinit>
 800a18a:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <_fflush_r+0x6c>)
 800a18c:	429c      	cmp	r4, r3
 800a18e:	d11b      	bne.n	800a1c8 <_fflush_r+0x58>
 800a190:	686c      	ldr	r4, [r5, #4]
 800a192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0ef      	beq.n	800a17a <_fflush_r+0xa>
 800a19a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a19c:	07d0      	lsls	r0, r2, #31
 800a19e:	d404      	bmi.n	800a1aa <_fflush_r+0x3a>
 800a1a0:	0599      	lsls	r1, r3, #22
 800a1a2:	d402      	bmi.n	800a1aa <_fflush_r+0x3a>
 800a1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1a6:	f7fd fb0a 	bl	80077be <__retarget_lock_acquire_recursive>
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	f7ff ff59 	bl	800a064 <__sflush_r>
 800a1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b4:	07da      	lsls	r2, r3, #31
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	d4e0      	bmi.n	800a17c <_fflush_r+0xc>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	059b      	lsls	r3, r3, #22
 800a1be:	d4dd      	bmi.n	800a17c <_fflush_r+0xc>
 800a1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c2:	f7fd fafd 	bl	80077c0 <__retarget_lock_release_recursive>
 800a1c6:	e7d9      	b.n	800a17c <_fflush_r+0xc>
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <_fflush_r+0x70>)
 800a1ca:	429c      	cmp	r4, r3
 800a1cc:	d101      	bne.n	800a1d2 <_fflush_r+0x62>
 800a1ce:	68ac      	ldr	r4, [r5, #8]
 800a1d0:	e7df      	b.n	800a192 <_fflush_r+0x22>
 800a1d2:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <_fflush_r+0x74>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	bf08      	it	eq
 800a1d8:	68ec      	ldreq	r4, [r5, #12]
 800a1da:	e7da      	b.n	800a192 <_fflush_r+0x22>
 800a1dc:	0800bed0 	.word	0x0800bed0
 800a1e0:	0800bef0 	.word	0x0800bef0
 800a1e4:	0800beb0 	.word	0x0800beb0

0800a1e8 <rshift>:
 800a1e8:	6903      	ldr	r3, [r0, #16]
 800a1ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1f6:	f100 0414 	add.w	r4, r0, #20
 800a1fa:	dd45      	ble.n	800a288 <rshift+0xa0>
 800a1fc:	f011 011f 	ands.w	r1, r1, #31
 800a200:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a204:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a208:	d10c      	bne.n	800a224 <rshift+0x3c>
 800a20a:	f100 0710 	add.w	r7, r0, #16
 800a20e:	4629      	mov	r1, r5
 800a210:	42b1      	cmp	r1, r6
 800a212:	d334      	bcc.n	800a27e <rshift+0x96>
 800a214:	1a9b      	subs	r3, r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	1eea      	subs	r2, r5, #3
 800a21a:	4296      	cmp	r6, r2
 800a21c:	bf38      	it	cc
 800a21e:	2300      	movcc	r3, #0
 800a220:	4423      	add	r3, r4
 800a222:	e015      	b.n	800a250 <rshift+0x68>
 800a224:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a228:	f1c1 0820 	rsb	r8, r1, #32
 800a22c:	40cf      	lsrs	r7, r1
 800a22e:	f105 0e04 	add.w	lr, r5, #4
 800a232:	46a1      	mov	r9, r4
 800a234:	4576      	cmp	r6, lr
 800a236:	46f4      	mov	ip, lr
 800a238:	d815      	bhi.n	800a266 <rshift+0x7e>
 800a23a:	1a9a      	subs	r2, r3, r2
 800a23c:	0092      	lsls	r2, r2, #2
 800a23e:	3a04      	subs	r2, #4
 800a240:	3501      	adds	r5, #1
 800a242:	42ae      	cmp	r6, r5
 800a244:	bf38      	it	cc
 800a246:	2200      	movcc	r2, #0
 800a248:	18a3      	adds	r3, r4, r2
 800a24a:	50a7      	str	r7, [r4, r2]
 800a24c:	b107      	cbz	r7, 800a250 <rshift+0x68>
 800a24e:	3304      	adds	r3, #4
 800a250:	1b1a      	subs	r2, r3, r4
 800a252:	42a3      	cmp	r3, r4
 800a254:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a258:	bf08      	it	eq
 800a25a:	2300      	moveq	r3, #0
 800a25c:	6102      	str	r2, [r0, #16]
 800a25e:	bf08      	it	eq
 800a260:	6143      	streq	r3, [r0, #20]
 800a262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a266:	f8dc c000 	ldr.w	ip, [ip]
 800a26a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a26e:	ea4c 0707 	orr.w	r7, ip, r7
 800a272:	f849 7b04 	str.w	r7, [r9], #4
 800a276:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a27a:	40cf      	lsrs	r7, r1
 800a27c:	e7da      	b.n	800a234 <rshift+0x4c>
 800a27e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a282:	f847 cf04 	str.w	ip, [r7, #4]!
 800a286:	e7c3      	b.n	800a210 <rshift+0x28>
 800a288:	4623      	mov	r3, r4
 800a28a:	e7e1      	b.n	800a250 <rshift+0x68>

0800a28c <__hexdig_fun>:
 800a28c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a290:	2b09      	cmp	r3, #9
 800a292:	d802      	bhi.n	800a29a <__hexdig_fun+0xe>
 800a294:	3820      	subs	r0, #32
 800a296:	b2c0      	uxtb	r0, r0
 800a298:	4770      	bx	lr
 800a29a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	d801      	bhi.n	800a2a6 <__hexdig_fun+0x1a>
 800a2a2:	3847      	subs	r0, #71	; 0x47
 800a2a4:	e7f7      	b.n	800a296 <__hexdig_fun+0xa>
 800a2a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	d801      	bhi.n	800a2b2 <__hexdig_fun+0x26>
 800a2ae:	3827      	subs	r0, #39	; 0x27
 800a2b0:	e7f1      	b.n	800a296 <__hexdig_fun+0xa>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <__gethex>:
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	ed2d 8b02 	vpush	{d8}
 800a2c0:	b089      	sub	sp, #36	; 0x24
 800a2c2:	ee08 0a10 	vmov	s16, r0
 800a2c6:	9304      	str	r3, [sp, #16]
 800a2c8:	4bb4      	ldr	r3, [pc, #720]	; (800a59c <__gethex+0x2e4>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	468b      	mov	fp, r1
 800a2d2:	4690      	mov	r8, r2
 800a2d4:	f7f5 ffb4 	bl	8000240 <strlen>
 800a2d8:	9b01      	ldr	r3, [sp, #4]
 800a2da:	f8db 2000 	ldr.w	r2, [fp]
 800a2de:	4403      	add	r3, r0
 800a2e0:	4682      	mov	sl, r0
 800a2e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a2e6:	9305      	str	r3, [sp, #20]
 800a2e8:	1c93      	adds	r3, r2, #2
 800a2ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a2ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a2f2:	32fe      	adds	r2, #254	; 0xfe
 800a2f4:	18d1      	adds	r1, r2, r3
 800a2f6:	461f      	mov	r7, r3
 800a2f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a2fc:	9100      	str	r1, [sp, #0]
 800a2fe:	2830      	cmp	r0, #48	; 0x30
 800a300:	d0f8      	beq.n	800a2f4 <__gethex+0x3c>
 800a302:	f7ff ffc3 	bl	800a28c <__hexdig_fun>
 800a306:	4604      	mov	r4, r0
 800a308:	2800      	cmp	r0, #0
 800a30a:	d13a      	bne.n	800a382 <__gethex+0xca>
 800a30c:	9901      	ldr	r1, [sp, #4]
 800a30e:	4652      	mov	r2, sl
 800a310:	4638      	mov	r0, r7
 800a312:	f001 f9ad 	bl	800b670 <strncmp>
 800a316:	4605      	mov	r5, r0
 800a318:	2800      	cmp	r0, #0
 800a31a:	d168      	bne.n	800a3ee <__gethex+0x136>
 800a31c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a320:	eb07 060a 	add.w	r6, r7, sl
 800a324:	f7ff ffb2 	bl	800a28c <__hexdig_fun>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d062      	beq.n	800a3f2 <__gethex+0x13a>
 800a32c:	4633      	mov	r3, r6
 800a32e:	7818      	ldrb	r0, [r3, #0]
 800a330:	2830      	cmp	r0, #48	; 0x30
 800a332:	461f      	mov	r7, r3
 800a334:	f103 0301 	add.w	r3, r3, #1
 800a338:	d0f9      	beq.n	800a32e <__gethex+0x76>
 800a33a:	f7ff ffa7 	bl	800a28c <__hexdig_fun>
 800a33e:	2301      	movs	r3, #1
 800a340:	fab0 f480 	clz	r4, r0
 800a344:	0964      	lsrs	r4, r4, #5
 800a346:	4635      	mov	r5, r6
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	463a      	mov	r2, r7
 800a34c:	4616      	mov	r6, r2
 800a34e:	3201      	adds	r2, #1
 800a350:	7830      	ldrb	r0, [r6, #0]
 800a352:	f7ff ff9b 	bl	800a28c <__hexdig_fun>
 800a356:	2800      	cmp	r0, #0
 800a358:	d1f8      	bne.n	800a34c <__gethex+0x94>
 800a35a:	9901      	ldr	r1, [sp, #4]
 800a35c:	4652      	mov	r2, sl
 800a35e:	4630      	mov	r0, r6
 800a360:	f001 f986 	bl	800b670 <strncmp>
 800a364:	b980      	cbnz	r0, 800a388 <__gethex+0xd0>
 800a366:	b94d      	cbnz	r5, 800a37c <__gethex+0xc4>
 800a368:	eb06 050a 	add.w	r5, r6, sl
 800a36c:	462a      	mov	r2, r5
 800a36e:	4616      	mov	r6, r2
 800a370:	3201      	adds	r2, #1
 800a372:	7830      	ldrb	r0, [r6, #0]
 800a374:	f7ff ff8a 	bl	800a28c <__hexdig_fun>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1f8      	bne.n	800a36e <__gethex+0xb6>
 800a37c:	1bad      	subs	r5, r5, r6
 800a37e:	00ad      	lsls	r5, r5, #2
 800a380:	e004      	b.n	800a38c <__gethex+0xd4>
 800a382:	2400      	movs	r4, #0
 800a384:	4625      	mov	r5, r4
 800a386:	e7e0      	b.n	800a34a <__gethex+0x92>
 800a388:	2d00      	cmp	r5, #0
 800a38a:	d1f7      	bne.n	800a37c <__gethex+0xc4>
 800a38c:	7833      	ldrb	r3, [r6, #0]
 800a38e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a392:	2b50      	cmp	r3, #80	; 0x50
 800a394:	d13b      	bne.n	800a40e <__gethex+0x156>
 800a396:	7873      	ldrb	r3, [r6, #1]
 800a398:	2b2b      	cmp	r3, #43	; 0x2b
 800a39a:	d02c      	beq.n	800a3f6 <__gethex+0x13e>
 800a39c:	2b2d      	cmp	r3, #45	; 0x2d
 800a39e:	d02e      	beq.n	800a3fe <__gethex+0x146>
 800a3a0:	1c71      	adds	r1, r6, #1
 800a3a2:	f04f 0900 	mov.w	r9, #0
 800a3a6:	7808      	ldrb	r0, [r1, #0]
 800a3a8:	f7ff ff70 	bl	800a28c <__hexdig_fun>
 800a3ac:	1e43      	subs	r3, r0, #1
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b18      	cmp	r3, #24
 800a3b2:	d82c      	bhi.n	800a40e <__gethex+0x156>
 800a3b4:	f1a0 0210 	sub.w	r2, r0, #16
 800a3b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3bc:	f7ff ff66 	bl	800a28c <__hexdig_fun>
 800a3c0:	1e43      	subs	r3, r0, #1
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b18      	cmp	r3, #24
 800a3c6:	d91d      	bls.n	800a404 <__gethex+0x14c>
 800a3c8:	f1b9 0f00 	cmp.w	r9, #0
 800a3cc:	d000      	beq.n	800a3d0 <__gethex+0x118>
 800a3ce:	4252      	negs	r2, r2
 800a3d0:	4415      	add	r5, r2
 800a3d2:	f8cb 1000 	str.w	r1, [fp]
 800a3d6:	b1e4      	cbz	r4, 800a412 <__gethex+0x15a>
 800a3d8:	9b00      	ldr	r3, [sp, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bf14      	ite	ne
 800a3de:	2700      	movne	r7, #0
 800a3e0:	2706      	moveq	r7, #6
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	b009      	add	sp, #36	; 0x24
 800a3e6:	ecbd 8b02 	vpop	{d8}
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	463e      	mov	r6, r7
 800a3f0:	4625      	mov	r5, r4
 800a3f2:	2401      	movs	r4, #1
 800a3f4:	e7ca      	b.n	800a38c <__gethex+0xd4>
 800a3f6:	f04f 0900 	mov.w	r9, #0
 800a3fa:	1cb1      	adds	r1, r6, #2
 800a3fc:	e7d3      	b.n	800a3a6 <__gethex+0xee>
 800a3fe:	f04f 0901 	mov.w	r9, #1
 800a402:	e7fa      	b.n	800a3fa <__gethex+0x142>
 800a404:	230a      	movs	r3, #10
 800a406:	fb03 0202 	mla	r2, r3, r2, r0
 800a40a:	3a10      	subs	r2, #16
 800a40c:	e7d4      	b.n	800a3b8 <__gethex+0x100>
 800a40e:	4631      	mov	r1, r6
 800a410:	e7df      	b.n	800a3d2 <__gethex+0x11a>
 800a412:	1bf3      	subs	r3, r6, r7
 800a414:	3b01      	subs	r3, #1
 800a416:	4621      	mov	r1, r4
 800a418:	2b07      	cmp	r3, #7
 800a41a:	dc0b      	bgt.n	800a434 <__gethex+0x17c>
 800a41c:	ee18 0a10 	vmov	r0, s16
 800a420:	f000 fa8e 	bl	800a940 <_Balloc>
 800a424:	4604      	mov	r4, r0
 800a426:	b940      	cbnz	r0, 800a43a <__gethex+0x182>
 800a428:	4b5d      	ldr	r3, [pc, #372]	; (800a5a0 <__gethex+0x2e8>)
 800a42a:	4602      	mov	r2, r0
 800a42c:	21de      	movs	r1, #222	; 0xde
 800a42e:	485d      	ldr	r0, [pc, #372]	; (800a5a4 <__gethex+0x2ec>)
 800a430:	f001 f940 	bl	800b6b4 <__assert_func>
 800a434:	3101      	adds	r1, #1
 800a436:	105b      	asrs	r3, r3, #1
 800a438:	e7ee      	b.n	800a418 <__gethex+0x160>
 800a43a:	f100 0914 	add.w	r9, r0, #20
 800a43e:	f04f 0b00 	mov.w	fp, #0
 800a442:	f1ca 0301 	rsb	r3, sl, #1
 800a446:	f8cd 9008 	str.w	r9, [sp, #8]
 800a44a:	f8cd b000 	str.w	fp, [sp]
 800a44e:	9306      	str	r3, [sp, #24]
 800a450:	42b7      	cmp	r7, r6
 800a452:	d340      	bcc.n	800a4d6 <__gethex+0x21e>
 800a454:	9802      	ldr	r0, [sp, #8]
 800a456:	9b00      	ldr	r3, [sp, #0]
 800a458:	f840 3b04 	str.w	r3, [r0], #4
 800a45c:	eba0 0009 	sub.w	r0, r0, r9
 800a460:	1080      	asrs	r0, r0, #2
 800a462:	0146      	lsls	r6, r0, #5
 800a464:	6120      	str	r0, [r4, #16]
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fb5c 	bl	800ab24 <__hi0bits>
 800a46c:	1a30      	subs	r0, r6, r0
 800a46e:	f8d8 6000 	ldr.w	r6, [r8]
 800a472:	42b0      	cmp	r0, r6
 800a474:	dd63      	ble.n	800a53e <__gethex+0x286>
 800a476:	1b87      	subs	r7, r0, r6
 800a478:	4639      	mov	r1, r7
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 fefd 	bl	800b27a <__any_on>
 800a480:	4682      	mov	sl, r0
 800a482:	b1a8      	cbz	r0, 800a4b0 <__gethex+0x1f8>
 800a484:	1e7b      	subs	r3, r7, #1
 800a486:	1159      	asrs	r1, r3, #5
 800a488:	f003 021f 	and.w	r2, r3, #31
 800a48c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a490:	f04f 0a01 	mov.w	sl, #1
 800a494:	fa0a f202 	lsl.w	r2, sl, r2
 800a498:	420a      	tst	r2, r1
 800a49a:	d009      	beq.n	800a4b0 <__gethex+0x1f8>
 800a49c:	4553      	cmp	r3, sl
 800a49e:	dd05      	ble.n	800a4ac <__gethex+0x1f4>
 800a4a0:	1eb9      	subs	r1, r7, #2
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 fee9 	bl	800b27a <__any_on>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d145      	bne.n	800a538 <__gethex+0x280>
 800a4ac:	f04f 0a02 	mov.w	sl, #2
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7ff fe98 	bl	800a1e8 <rshift>
 800a4b8:	443d      	add	r5, r7
 800a4ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4be:	42ab      	cmp	r3, r5
 800a4c0:	da4c      	bge.n	800a55c <__gethex+0x2a4>
 800a4c2:	ee18 0a10 	vmov	r0, s16
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	f000 fa7a 	bl	800a9c0 <_Bfree>
 800a4cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	27a3      	movs	r7, #163	; 0xa3
 800a4d4:	e785      	b.n	800a3e2 <__gethex+0x12a>
 800a4d6:	1e73      	subs	r3, r6, #1
 800a4d8:	9a05      	ldr	r2, [sp, #20]
 800a4da:	9303      	str	r3, [sp, #12]
 800a4dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d019      	beq.n	800a518 <__gethex+0x260>
 800a4e4:	f1bb 0f20 	cmp.w	fp, #32
 800a4e8:	d107      	bne.n	800a4fa <__gethex+0x242>
 800a4ea:	9b02      	ldr	r3, [sp, #8]
 800a4ec:	9a00      	ldr	r2, [sp, #0]
 800a4ee:	f843 2b04 	str.w	r2, [r3], #4
 800a4f2:	9302      	str	r3, [sp, #8]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	469b      	mov	fp, r3
 800a4fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a4fe:	f7ff fec5 	bl	800a28c <__hexdig_fun>
 800a502:	9b00      	ldr	r3, [sp, #0]
 800a504:	f000 000f 	and.w	r0, r0, #15
 800a508:	fa00 f00b 	lsl.w	r0, r0, fp
 800a50c:	4303      	orrs	r3, r0
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	f10b 0b04 	add.w	fp, fp, #4
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	e00d      	b.n	800a534 <__gethex+0x27c>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	9a06      	ldr	r2, [sp, #24]
 800a51c:	4413      	add	r3, r2
 800a51e:	42bb      	cmp	r3, r7
 800a520:	d3e0      	bcc.n	800a4e4 <__gethex+0x22c>
 800a522:	4618      	mov	r0, r3
 800a524:	9901      	ldr	r1, [sp, #4]
 800a526:	9307      	str	r3, [sp, #28]
 800a528:	4652      	mov	r2, sl
 800a52a:	f001 f8a1 	bl	800b670 <strncmp>
 800a52e:	9b07      	ldr	r3, [sp, #28]
 800a530:	2800      	cmp	r0, #0
 800a532:	d1d7      	bne.n	800a4e4 <__gethex+0x22c>
 800a534:	461e      	mov	r6, r3
 800a536:	e78b      	b.n	800a450 <__gethex+0x198>
 800a538:	f04f 0a03 	mov.w	sl, #3
 800a53c:	e7b8      	b.n	800a4b0 <__gethex+0x1f8>
 800a53e:	da0a      	bge.n	800a556 <__gethex+0x29e>
 800a540:	1a37      	subs	r7, r6, r0
 800a542:	4621      	mov	r1, r4
 800a544:	ee18 0a10 	vmov	r0, s16
 800a548:	463a      	mov	r2, r7
 800a54a:	f000 fc55 	bl	800adf8 <__lshift>
 800a54e:	1bed      	subs	r5, r5, r7
 800a550:	4604      	mov	r4, r0
 800a552:	f100 0914 	add.w	r9, r0, #20
 800a556:	f04f 0a00 	mov.w	sl, #0
 800a55a:	e7ae      	b.n	800a4ba <__gethex+0x202>
 800a55c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a560:	42a8      	cmp	r0, r5
 800a562:	dd72      	ble.n	800a64a <__gethex+0x392>
 800a564:	1b45      	subs	r5, r0, r5
 800a566:	42ae      	cmp	r6, r5
 800a568:	dc36      	bgt.n	800a5d8 <__gethex+0x320>
 800a56a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d02a      	beq.n	800a5c8 <__gethex+0x310>
 800a572:	2b03      	cmp	r3, #3
 800a574:	d02c      	beq.n	800a5d0 <__gethex+0x318>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d11c      	bne.n	800a5b4 <__gethex+0x2fc>
 800a57a:	42ae      	cmp	r6, r5
 800a57c:	d11a      	bne.n	800a5b4 <__gethex+0x2fc>
 800a57e:	2e01      	cmp	r6, #1
 800a580:	d112      	bne.n	800a5a8 <__gethex+0x2f0>
 800a582:	9a04      	ldr	r2, [sp, #16]
 800a584:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	2301      	movs	r3, #1
 800a58c:	6123      	str	r3, [r4, #16]
 800a58e:	f8c9 3000 	str.w	r3, [r9]
 800a592:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a594:	2762      	movs	r7, #98	; 0x62
 800a596:	601c      	str	r4, [r3, #0]
 800a598:	e723      	b.n	800a3e2 <__gethex+0x12a>
 800a59a:	bf00      	nop
 800a59c:	0800c198 	.word	0x0800c198
 800a5a0:	0800c120 	.word	0x0800c120
 800a5a4:	0800c131 	.word	0x0800c131
 800a5a8:	1e71      	subs	r1, r6, #1
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 fe65 	bl	800b27a <__any_on>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1e6      	bne.n	800a582 <__gethex+0x2ca>
 800a5b4:	ee18 0a10 	vmov	r0, s16
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	f000 fa01 	bl	800a9c0 <_Bfree>
 800a5be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	2750      	movs	r7, #80	; 0x50
 800a5c6:	e70c      	b.n	800a3e2 <__gethex+0x12a>
 800a5c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1f2      	bne.n	800a5b4 <__gethex+0x2fc>
 800a5ce:	e7d8      	b.n	800a582 <__gethex+0x2ca>
 800a5d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1d5      	bne.n	800a582 <__gethex+0x2ca>
 800a5d6:	e7ed      	b.n	800a5b4 <__gethex+0x2fc>
 800a5d8:	1e6f      	subs	r7, r5, #1
 800a5da:	f1ba 0f00 	cmp.w	sl, #0
 800a5de:	d131      	bne.n	800a644 <__gethex+0x38c>
 800a5e0:	b127      	cbz	r7, 800a5ec <__gethex+0x334>
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fe48 	bl	800b27a <__any_on>
 800a5ea:	4682      	mov	sl, r0
 800a5ec:	117b      	asrs	r3, r7, #5
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a5f4:	f007 071f 	and.w	r7, r7, #31
 800a5f8:	fa01 f707 	lsl.w	r7, r1, r7
 800a5fc:	421f      	tst	r7, r3
 800a5fe:	4629      	mov	r1, r5
 800a600:	4620      	mov	r0, r4
 800a602:	bf18      	it	ne
 800a604:	f04a 0a02 	orrne.w	sl, sl, #2
 800a608:	1b76      	subs	r6, r6, r5
 800a60a:	f7ff fded 	bl	800a1e8 <rshift>
 800a60e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a612:	2702      	movs	r7, #2
 800a614:	f1ba 0f00 	cmp.w	sl, #0
 800a618:	d048      	beq.n	800a6ac <__gethex+0x3f4>
 800a61a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d015      	beq.n	800a64e <__gethex+0x396>
 800a622:	2b03      	cmp	r3, #3
 800a624:	d017      	beq.n	800a656 <__gethex+0x39e>
 800a626:	2b01      	cmp	r3, #1
 800a628:	d109      	bne.n	800a63e <__gethex+0x386>
 800a62a:	f01a 0f02 	tst.w	sl, #2
 800a62e:	d006      	beq.n	800a63e <__gethex+0x386>
 800a630:	f8d9 0000 	ldr.w	r0, [r9]
 800a634:	ea4a 0a00 	orr.w	sl, sl, r0
 800a638:	f01a 0f01 	tst.w	sl, #1
 800a63c:	d10e      	bne.n	800a65c <__gethex+0x3a4>
 800a63e:	f047 0710 	orr.w	r7, r7, #16
 800a642:	e033      	b.n	800a6ac <__gethex+0x3f4>
 800a644:	f04f 0a01 	mov.w	sl, #1
 800a648:	e7d0      	b.n	800a5ec <__gethex+0x334>
 800a64a:	2701      	movs	r7, #1
 800a64c:	e7e2      	b.n	800a614 <__gethex+0x35c>
 800a64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a650:	f1c3 0301 	rsb	r3, r3, #1
 800a654:	9315      	str	r3, [sp, #84]	; 0x54
 800a656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0f0      	beq.n	800a63e <__gethex+0x386>
 800a65c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a660:	f104 0314 	add.w	r3, r4, #20
 800a664:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a668:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a66c:	f04f 0c00 	mov.w	ip, #0
 800a670:	4618      	mov	r0, r3
 800a672:	f853 2b04 	ldr.w	r2, [r3], #4
 800a676:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a67a:	d01c      	beq.n	800a6b6 <__gethex+0x3fe>
 800a67c:	3201      	adds	r2, #1
 800a67e:	6002      	str	r2, [r0, #0]
 800a680:	2f02      	cmp	r7, #2
 800a682:	f104 0314 	add.w	r3, r4, #20
 800a686:	d13f      	bne.n	800a708 <__gethex+0x450>
 800a688:	f8d8 2000 	ldr.w	r2, [r8]
 800a68c:	3a01      	subs	r2, #1
 800a68e:	42b2      	cmp	r2, r6
 800a690:	d10a      	bne.n	800a6a8 <__gethex+0x3f0>
 800a692:	1171      	asrs	r1, r6, #5
 800a694:	2201      	movs	r2, #1
 800a696:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a69a:	f006 061f 	and.w	r6, r6, #31
 800a69e:	fa02 f606 	lsl.w	r6, r2, r6
 800a6a2:	421e      	tst	r6, r3
 800a6a4:	bf18      	it	ne
 800a6a6:	4617      	movne	r7, r2
 800a6a8:	f047 0720 	orr.w	r7, r7, #32
 800a6ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6ae:	601c      	str	r4, [r3, #0]
 800a6b0:	9b04      	ldr	r3, [sp, #16]
 800a6b2:	601d      	str	r5, [r3, #0]
 800a6b4:	e695      	b.n	800a3e2 <__gethex+0x12a>
 800a6b6:	4299      	cmp	r1, r3
 800a6b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a6bc:	d8d8      	bhi.n	800a670 <__gethex+0x3b8>
 800a6be:	68a3      	ldr	r3, [r4, #8]
 800a6c0:	459b      	cmp	fp, r3
 800a6c2:	db19      	blt.n	800a6f8 <__gethex+0x440>
 800a6c4:	6861      	ldr	r1, [r4, #4]
 800a6c6:	ee18 0a10 	vmov	r0, s16
 800a6ca:	3101      	adds	r1, #1
 800a6cc:	f000 f938 	bl	800a940 <_Balloc>
 800a6d0:	4681      	mov	r9, r0
 800a6d2:	b918      	cbnz	r0, 800a6dc <__gethex+0x424>
 800a6d4:	4b1a      	ldr	r3, [pc, #104]	; (800a740 <__gethex+0x488>)
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	2184      	movs	r1, #132	; 0x84
 800a6da:	e6a8      	b.n	800a42e <__gethex+0x176>
 800a6dc:	6922      	ldr	r2, [r4, #16]
 800a6de:	3202      	adds	r2, #2
 800a6e0:	f104 010c 	add.w	r1, r4, #12
 800a6e4:	0092      	lsls	r2, r2, #2
 800a6e6:	300c      	adds	r0, #12
 800a6e8:	f7fd f86b 	bl	80077c2 <memcpy>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	ee18 0a10 	vmov	r0, s16
 800a6f2:	f000 f965 	bl	800a9c0 <_Bfree>
 800a6f6:	464c      	mov	r4, r9
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a700:	6122      	str	r2, [r4, #16]
 800a702:	2201      	movs	r2, #1
 800a704:	615a      	str	r2, [r3, #20]
 800a706:	e7bb      	b.n	800a680 <__gethex+0x3c8>
 800a708:	6922      	ldr	r2, [r4, #16]
 800a70a:	455a      	cmp	r2, fp
 800a70c:	dd0b      	ble.n	800a726 <__gethex+0x46e>
 800a70e:	2101      	movs	r1, #1
 800a710:	4620      	mov	r0, r4
 800a712:	f7ff fd69 	bl	800a1e8 <rshift>
 800a716:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a71a:	3501      	adds	r5, #1
 800a71c:	42ab      	cmp	r3, r5
 800a71e:	f6ff aed0 	blt.w	800a4c2 <__gethex+0x20a>
 800a722:	2701      	movs	r7, #1
 800a724:	e7c0      	b.n	800a6a8 <__gethex+0x3f0>
 800a726:	f016 061f 	ands.w	r6, r6, #31
 800a72a:	d0fa      	beq.n	800a722 <__gethex+0x46a>
 800a72c:	4453      	add	r3, sl
 800a72e:	f1c6 0620 	rsb	r6, r6, #32
 800a732:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a736:	f000 f9f5 	bl	800ab24 <__hi0bits>
 800a73a:	42b0      	cmp	r0, r6
 800a73c:	dbe7      	blt.n	800a70e <__gethex+0x456>
 800a73e:	e7f0      	b.n	800a722 <__gethex+0x46a>
 800a740:	0800c120 	.word	0x0800c120

0800a744 <L_shift>:
 800a744:	f1c2 0208 	rsb	r2, r2, #8
 800a748:	0092      	lsls	r2, r2, #2
 800a74a:	b570      	push	{r4, r5, r6, lr}
 800a74c:	f1c2 0620 	rsb	r6, r2, #32
 800a750:	6843      	ldr	r3, [r0, #4]
 800a752:	6804      	ldr	r4, [r0, #0]
 800a754:	fa03 f506 	lsl.w	r5, r3, r6
 800a758:	432c      	orrs	r4, r5
 800a75a:	40d3      	lsrs	r3, r2
 800a75c:	6004      	str	r4, [r0, #0]
 800a75e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a762:	4288      	cmp	r0, r1
 800a764:	d3f4      	bcc.n	800a750 <L_shift+0xc>
 800a766:	bd70      	pop	{r4, r5, r6, pc}

0800a768 <__match>:
 800a768:	b530      	push	{r4, r5, lr}
 800a76a:	6803      	ldr	r3, [r0, #0]
 800a76c:	3301      	adds	r3, #1
 800a76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a772:	b914      	cbnz	r4, 800a77a <__match+0x12>
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	2001      	movs	r0, #1
 800a778:	bd30      	pop	{r4, r5, pc}
 800a77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a77e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a782:	2d19      	cmp	r5, #25
 800a784:	bf98      	it	ls
 800a786:	3220      	addls	r2, #32
 800a788:	42a2      	cmp	r2, r4
 800a78a:	d0f0      	beq.n	800a76e <__match+0x6>
 800a78c:	2000      	movs	r0, #0
 800a78e:	e7f3      	b.n	800a778 <__match+0x10>

0800a790 <__hexnan>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	680b      	ldr	r3, [r1, #0]
 800a796:	115e      	asrs	r6, r3, #5
 800a798:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a79c:	f013 031f 	ands.w	r3, r3, #31
 800a7a0:	b087      	sub	sp, #28
 800a7a2:	bf18      	it	ne
 800a7a4:	3604      	addne	r6, #4
 800a7a6:	2500      	movs	r5, #0
 800a7a8:	1f37      	subs	r7, r6, #4
 800a7aa:	4690      	mov	r8, r2
 800a7ac:	6802      	ldr	r2, [r0, #0]
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a7b6:	46b9      	mov	r9, r7
 800a7b8:	463c      	mov	r4, r7
 800a7ba:	9502      	str	r5, [sp, #8]
 800a7bc:	46ab      	mov	fp, r5
 800a7be:	7851      	ldrb	r1, [r2, #1]
 800a7c0:	1c53      	adds	r3, r2, #1
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	b341      	cbz	r1, 800a818 <__hexnan+0x88>
 800a7c6:	4608      	mov	r0, r1
 800a7c8:	9205      	str	r2, [sp, #20]
 800a7ca:	9104      	str	r1, [sp, #16]
 800a7cc:	f7ff fd5e 	bl	800a28c <__hexdig_fun>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d14f      	bne.n	800a874 <__hexnan+0xe4>
 800a7d4:	9904      	ldr	r1, [sp, #16]
 800a7d6:	9a05      	ldr	r2, [sp, #20]
 800a7d8:	2920      	cmp	r1, #32
 800a7da:	d818      	bhi.n	800a80e <__hexnan+0x7e>
 800a7dc:	9b02      	ldr	r3, [sp, #8]
 800a7de:	459b      	cmp	fp, r3
 800a7e0:	dd13      	ble.n	800a80a <__hexnan+0x7a>
 800a7e2:	454c      	cmp	r4, r9
 800a7e4:	d206      	bcs.n	800a7f4 <__hexnan+0x64>
 800a7e6:	2d07      	cmp	r5, #7
 800a7e8:	dc04      	bgt.n	800a7f4 <__hexnan+0x64>
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7ff ffa8 	bl	800a744 <L_shift>
 800a7f4:	4544      	cmp	r4, r8
 800a7f6:	d950      	bls.n	800a89a <__hexnan+0x10a>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f1a4 0904 	sub.w	r9, r4, #4
 800a7fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800a802:	f8cd b008 	str.w	fp, [sp, #8]
 800a806:	464c      	mov	r4, r9
 800a808:	461d      	mov	r5, r3
 800a80a:	9a03      	ldr	r2, [sp, #12]
 800a80c:	e7d7      	b.n	800a7be <__hexnan+0x2e>
 800a80e:	2929      	cmp	r1, #41	; 0x29
 800a810:	d156      	bne.n	800a8c0 <__hexnan+0x130>
 800a812:	3202      	adds	r2, #2
 800a814:	f8ca 2000 	str.w	r2, [sl]
 800a818:	f1bb 0f00 	cmp.w	fp, #0
 800a81c:	d050      	beq.n	800a8c0 <__hexnan+0x130>
 800a81e:	454c      	cmp	r4, r9
 800a820:	d206      	bcs.n	800a830 <__hexnan+0xa0>
 800a822:	2d07      	cmp	r5, #7
 800a824:	dc04      	bgt.n	800a830 <__hexnan+0xa0>
 800a826:	462a      	mov	r2, r5
 800a828:	4649      	mov	r1, r9
 800a82a:	4620      	mov	r0, r4
 800a82c:	f7ff ff8a 	bl	800a744 <L_shift>
 800a830:	4544      	cmp	r4, r8
 800a832:	d934      	bls.n	800a89e <__hexnan+0x10e>
 800a834:	f1a8 0204 	sub.w	r2, r8, #4
 800a838:	4623      	mov	r3, r4
 800a83a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a83e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a842:	429f      	cmp	r7, r3
 800a844:	d2f9      	bcs.n	800a83a <__hexnan+0xaa>
 800a846:	1b3b      	subs	r3, r7, r4
 800a848:	f023 0303 	bic.w	r3, r3, #3
 800a84c:	3304      	adds	r3, #4
 800a84e:	3401      	adds	r4, #1
 800a850:	3e03      	subs	r6, #3
 800a852:	42b4      	cmp	r4, r6
 800a854:	bf88      	it	hi
 800a856:	2304      	movhi	r3, #4
 800a858:	4443      	add	r3, r8
 800a85a:	2200      	movs	r2, #0
 800a85c:	f843 2b04 	str.w	r2, [r3], #4
 800a860:	429f      	cmp	r7, r3
 800a862:	d2fb      	bcs.n	800a85c <__hexnan+0xcc>
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	b91b      	cbnz	r3, 800a870 <__hexnan+0xe0>
 800a868:	4547      	cmp	r7, r8
 800a86a:	d127      	bne.n	800a8bc <__hexnan+0x12c>
 800a86c:	2301      	movs	r3, #1
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	2005      	movs	r0, #5
 800a872:	e026      	b.n	800a8c2 <__hexnan+0x132>
 800a874:	3501      	adds	r5, #1
 800a876:	2d08      	cmp	r5, #8
 800a878:	f10b 0b01 	add.w	fp, fp, #1
 800a87c:	dd06      	ble.n	800a88c <__hexnan+0xfc>
 800a87e:	4544      	cmp	r4, r8
 800a880:	d9c3      	bls.n	800a80a <__hexnan+0x7a>
 800a882:	2300      	movs	r3, #0
 800a884:	f844 3c04 	str.w	r3, [r4, #-4]
 800a888:	2501      	movs	r5, #1
 800a88a:	3c04      	subs	r4, #4
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	f000 000f 	and.w	r0, r0, #15
 800a892:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a896:	6022      	str	r2, [r4, #0]
 800a898:	e7b7      	b.n	800a80a <__hexnan+0x7a>
 800a89a:	2508      	movs	r5, #8
 800a89c:	e7b5      	b.n	800a80a <__hexnan+0x7a>
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0df      	beq.n	800a864 <__hexnan+0xd4>
 800a8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8a8:	f1c3 0320 	rsb	r3, r3, #32
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8b4:	401a      	ands	r2, r3
 800a8b6:	f846 2c04 	str.w	r2, [r6, #-4]
 800a8ba:	e7d3      	b.n	800a864 <__hexnan+0xd4>
 800a8bc:	3f04      	subs	r7, #4
 800a8be:	e7d1      	b.n	800a864 <__hexnan+0xd4>
 800a8c0:	2004      	movs	r0, #4
 800a8c2:	b007      	add	sp, #28
 800a8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8c8 <_localeconv_r>:
 800a8c8:	4800      	ldr	r0, [pc, #0]	; (800a8cc <_localeconv_r+0x4>)
 800a8ca:	4770      	bx	lr
 800a8cc:	20000168 	.word	0x20000168

0800a8d0 <_lseek_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_lseek_r+0x20>)
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	4611      	mov	r1, r2
 800a8da:	2200      	movs	r2, #0
 800a8dc:	602a      	str	r2, [r5, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f7f6 fe6a 	bl	80015b8 <_lseek>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_lseek_r+0x1e>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_lseek_r+0x1e>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	20004d84 	.word	0x20004d84

0800a8f4 <malloc>:
 800a8f4:	4b02      	ldr	r3, [pc, #8]	; (800a900 <malloc+0xc>)
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	f7fc bf99 	b.w	8007830 <_malloc_r>
 800a8fe:	bf00      	nop
 800a900:	20000010 	.word	0x20000010

0800a904 <__ascii_mbtowc>:
 800a904:	b082      	sub	sp, #8
 800a906:	b901      	cbnz	r1, 800a90a <__ascii_mbtowc+0x6>
 800a908:	a901      	add	r1, sp, #4
 800a90a:	b142      	cbz	r2, 800a91e <__ascii_mbtowc+0x1a>
 800a90c:	b14b      	cbz	r3, 800a922 <__ascii_mbtowc+0x1e>
 800a90e:	7813      	ldrb	r3, [r2, #0]
 800a910:	600b      	str	r3, [r1, #0]
 800a912:	7812      	ldrb	r2, [r2, #0]
 800a914:	1e10      	subs	r0, r2, #0
 800a916:	bf18      	it	ne
 800a918:	2001      	movne	r0, #1
 800a91a:	b002      	add	sp, #8
 800a91c:	4770      	bx	lr
 800a91e:	4610      	mov	r0, r2
 800a920:	e7fb      	b.n	800a91a <__ascii_mbtowc+0x16>
 800a922:	f06f 0001 	mvn.w	r0, #1
 800a926:	e7f8      	b.n	800a91a <__ascii_mbtowc+0x16>

0800a928 <__malloc_lock>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__malloc_lock+0x8>)
 800a92a:	f7fc bf48 	b.w	80077be <__retarget_lock_acquire_recursive>
 800a92e:	bf00      	nop
 800a930:	20004d78 	.word	0x20004d78

0800a934 <__malloc_unlock>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__malloc_unlock+0x8>)
 800a936:	f7fc bf43 	b.w	80077c0 <__retarget_lock_release_recursive>
 800a93a:	bf00      	nop
 800a93c:	20004d78 	.word	0x20004d78

0800a940 <_Balloc>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a944:	4604      	mov	r4, r0
 800a946:	460d      	mov	r5, r1
 800a948:	b976      	cbnz	r6, 800a968 <_Balloc+0x28>
 800a94a:	2010      	movs	r0, #16
 800a94c:	f7ff ffd2 	bl	800a8f4 <malloc>
 800a950:	4602      	mov	r2, r0
 800a952:	6260      	str	r0, [r4, #36]	; 0x24
 800a954:	b920      	cbnz	r0, 800a960 <_Balloc+0x20>
 800a956:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <_Balloc+0x78>)
 800a958:	4818      	ldr	r0, [pc, #96]	; (800a9bc <_Balloc+0x7c>)
 800a95a:	2166      	movs	r1, #102	; 0x66
 800a95c:	f000 feaa 	bl	800b6b4 <__assert_func>
 800a960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a964:	6006      	str	r6, [r0, #0]
 800a966:	60c6      	str	r6, [r0, #12]
 800a968:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a96a:	68f3      	ldr	r3, [r6, #12]
 800a96c:	b183      	cbz	r3, 800a990 <_Balloc+0x50>
 800a96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a976:	b9b8      	cbnz	r0, 800a9a8 <_Balloc+0x68>
 800a978:	2101      	movs	r1, #1
 800a97a:	fa01 f605 	lsl.w	r6, r1, r5
 800a97e:	1d72      	adds	r2, r6, #5
 800a980:	0092      	lsls	r2, r2, #2
 800a982:	4620      	mov	r0, r4
 800a984:	f000 fc9a 	bl	800b2bc <_calloc_r>
 800a988:	b160      	cbz	r0, 800a9a4 <_Balloc+0x64>
 800a98a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a98e:	e00e      	b.n	800a9ae <_Balloc+0x6e>
 800a990:	2221      	movs	r2, #33	; 0x21
 800a992:	2104      	movs	r1, #4
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fc91 	bl	800b2bc <_calloc_r>
 800a99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a99c:	60f0      	str	r0, [r6, #12]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e4      	bne.n	800a96e <_Balloc+0x2e>
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	6802      	ldr	r2, [r0, #0]
 800a9aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9b4:	e7f7      	b.n	800a9a6 <_Balloc+0x66>
 800a9b6:	bf00      	nop
 800a9b8:	0800c0ae 	.word	0x0800c0ae
 800a9bc:	0800c1ac 	.word	0x0800c1ac

0800a9c0 <_Bfree>:
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	b976      	cbnz	r6, 800a9e8 <_Bfree+0x28>
 800a9ca:	2010      	movs	r0, #16
 800a9cc:	f7ff ff92 	bl	800a8f4 <malloc>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	6268      	str	r0, [r5, #36]	; 0x24
 800a9d4:	b920      	cbnz	r0, 800a9e0 <_Bfree+0x20>
 800a9d6:	4b09      	ldr	r3, [pc, #36]	; (800a9fc <_Bfree+0x3c>)
 800a9d8:	4809      	ldr	r0, [pc, #36]	; (800aa00 <_Bfree+0x40>)
 800a9da:	218a      	movs	r1, #138	; 0x8a
 800a9dc:	f000 fe6a 	bl	800b6b4 <__assert_func>
 800a9e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9e4:	6006      	str	r6, [r0, #0]
 800a9e6:	60c6      	str	r6, [r0, #12]
 800a9e8:	b13c      	cbz	r4, 800a9fa <_Bfree+0x3a>
 800a9ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9ec:	6862      	ldr	r2, [r4, #4]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9f4:	6021      	str	r1, [r4, #0]
 800a9f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	0800c0ae 	.word	0x0800c0ae
 800aa00:	0800c1ac 	.word	0x0800c1ac

0800aa04 <__multadd>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	690d      	ldr	r5, [r1, #16]
 800aa0a:	4607      	mov	r7, r0
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	461e      	mov	r6, r3
 800aa10:	f101 0c14 	add.w	ip, r1, #20
 800aa14:	2000      	movs	r0, #0
 800aa16:	f8dc 3000 	ldr.w	r3, [ip]
 800aa1a:	b299      	uxth	r1, r3
 800aa1c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa20:	0c1e      	lsrs	r6, r3, #16
 800aa22:	0c0b      	lsrs	r3, r1, #16
 800aa24:	fb02 3306 	mla	r3, r2, r6, r3
 800aa28:	b289      	uxth	r1, r1
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa30:	4285      	cmp	r5, r0
 800aa32:	f84c 1b04 	str.w	r1, [ip], #4
 800aa36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa3a:	dcec      	bgt.n	800aa16 <__multadd+0x12>
 800aa3c:	b30e      	cbz	r6, 800aa82 <__multadd+0x7e>
 800aa3e:	68a3      	ldr	r3, [r4, #8]
 800aa40:	42ab      	cmp	r3, r5
 800aa42:	dc19      	bgt.n	800aa78 <__multadd+0x74>
 800aa44:	6861      	ldr	r1, [r4, #4]
 800aa46:	4638      	mov	r0, r7
 800aa48:	3101      	adds	r1, #1
 800aa4a:	f7ff ff79 	bl	800a940 <_Balloc>
 800aa4e:	4680      	mov	r8, r0
 800aa50:	b928      	cbnz	r0, 800aa5e <__multadd+0x5a>
 800aa52:	4602      	mov	r2, r0
 800aa54:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <__multadd+0x84>)
 800aa56:	480d      	ldr	r0, [pc, #52]	; (800aa8c <__multadd+0x88>)
 800aa58:	21b5      	movs	r1, #181	; 0xb5
 800aa5a:	f000 fe2b 	bl	800b6b4 <__assert_func>
 800aa5e:	6922      	ldr	r2, [r4, #16]
 800aa60:	3202      	adds	r2, #2
 800aa62:	f104 010c 	add.w	r1, r4, #12
 800aa66:	0092      	lsls	r2, r2, #2
 800aa68:	300c      	adds	r0, #12
 800aa6a:	f7fc feaa 	bl	80077c2 <memcpy>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4638      	mov	r0, r7
 800aa72:	f7ff ffa5 	bl	800a9c0 <_Bfree>
 800aa76:	4644      	mov	r4, r8
 800aa78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	615e      	str	r6, [r3, #20]
 800aa80:	6125      	str	r5, [r4, #16]
 800aa82:	4620      	mov	r0, r4
 800aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa88:	0800c120 	.word	0x0800c120
 800aa8c:	0800c1ac 	.word	0x0800c1ac

0800aa90 <__s2b>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	460c      	mov	r4, r1
 800aa96:	4615      	mov	r5, r2
 800aa98:	461f      	mov	r7, r3
 800aa9a:	2209      	movs	r2, #9
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	db09      	blt.n	800aac0 <__s2b+0x30>
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff ff47 	bl	800a940 <_Balloc>
 800aab2:	b940      	cbnz	r0, 800aac6 <__s2b+0x36>
 800aab4:	4602      	mov	r2, r0
 800aab6:	4b19      	ldr	r3, [pc, #100]	; (800ab1c <__s2b+0x8c>)
 800aab8:	4819      	ldr	r0, [pc, #100]	; (800ab20 <__s2b+0x90>)
 800aaba:	21ce      	movs	r1, #206	; 0xce
 800aabc:	f000 fdfa 	bl	800b6b4 <__assert_func>
 800aac0:	0052      	lsls	r2, r2, #1
 800aac2:	3101      	adds	r1, #1
 800aac4:	e7f0      	b.n	800aaa8 <__s2b+0x18>
 800aac6:	9b08      	ldr	r3, [sp, #32]
 800aac8:	6143      	str	r3, [r0, #20]
 800aaca:	2d09      	cmp	r5, #9
 800aacc:	f04f 0301 	mov.w	r3, #1
 800aad0:	6103      	str	r3, [r0, #16]
 800aad2:	dd16      	ble.n	800ab02 <__s2b+0x72>
 800aad4:	f104 0909 	add.w	r9, r4, #9
 800aad8:	46c8      	mov	r8, r9
 800aada:	442c      	add	r4, r5
 800aadc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aae0:	4601      	mov	r1, r0
 800aae2:	3b30      	subs	r3, #48	; 0x30
 800aae4:	220a      	movs	r2, #10
 800aae6:	4630      	mov	r0, r6
 800aae8:	f7ff ff8c 	bl	800aa04 <__multadd>
 800aaec:	45a0      	cmp	r8, r4
 800aaee:	d1f5      	bne.n	800aadc <__s2b+0x4c>
 800aaf0:	f1a5 0408 	sub.w	r4, r5, #8
 800aaf4:	444c      	add	r4, r9
 800aaf6:	1b2d      	subs	r5, r5, r4
 800aaf8:	1963      	adds	r3, r4, r5
 800aafa:	42bb      	cmp	r3, r7
 800aafc:	db04      	blt.n	800ab08 <__s2b+0x78>
 800aafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab02:	340a      	adds	r4, #10
 800ab04:	2509      	movs	r5, #9
 800ab06:	e7f6      	b.n	800aaf6 <__s2b+0x66>
 800ab08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	3b30      	subs	r3, #48	; 0x30
 800ab10:	220a      	movs	r2, #10
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7ff ff76 	bl	800aa04 <__multadd>
 800ab18:	e7ee      	b.n	800aaf8 <__s2b+0x68>
 800ab1a:	bf00      	nop
 800ab1c:	0800c120 	.word	0x0800c120
 800ab20:	0800c1ac 	.word	0x0800c1ac

0800ab24 <__hi0bits>:
 800ab24:	0c03      	lsrs	r3, r0, #16
 800ab26:	041b      	lsls	r3, r3, #16
 800ab28:	b9d3      	cbnz	r3, 800ab60 <__hi0bits+0x3c>
 800ab2a:	0400      	lsls	r0, r0, #16
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab32:	bf04      	itt	eq
 800ab34:	0200      	lsleq	r0, r0, #8
 800ab36:	3308      	addeq	r3, #8
 800ab38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab3c:	bf04      	itt	eq
 800ab3e:	0100      	lsleq	r0, r0, #4
 800ab40:	3304      	addeq	r3, #4
 800ab42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab46:	bf04      	itt	eq
 800ab48:	0080      	lsleq	r0, r0, #2
 800ab4a:	3302      	addeq	r3, #2
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	db05      	blt.n	800ab5c <__hi0bits+0x38>
 800ab50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab54:	f103 0301 	add.w	r3, r3, #1
 800ab58:	bf08      	it	eq
 800ab5a:	2320      	moveq	r3, #32
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	4770      	bx	lr
 800ab60:	2300      	movs	r3, #0
 800ab62:	e7e4      	b.n	800ab2e <__hi0bits+0xa>

0800ab64 <__lo0bits>:
 800ab64:	6803      	ldr	r3, [r0, #0]
 800ab66:	f013 0207 	ands.w	r2, r3, #7
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	d00b      	beq.n	800ab86 <__lo0bits+0x22>
 800ab6e:	07da      	lsls	r2, r3, #31
 800ab70:	d423      	bmi.n	800abba <__lo0bits+0x56>
 800ab72:	0798      	lsls	r0, r3, #30
 800ab74:	bf49      	itett	mi
 800ab76:	085b      	lsrmi	r3, r3, #1
 800ab78:	089b      	lsrpl	r3, r3, #2
 800ab7a:	2001      	movmi	r0, #1
 800ab7c:	600b      	strmi	r3, [r1, #0]
 800ab7e:	bf5c      	itt	pl
 800ab80:	600b      	strpl	r3, [r1, #0]
 800ab82:	2002      	movpl	r0, #2
 800ab84:	4770      	bx	lr
 800ab86:	b298      	uxth	r0, r3
 800ab88:	b9a8      	cbnz	r0, 800abb6 <__lo0bits+0x52>
 800ab8a:	0c1b      	lsrs	r3, r3, #16
 800ab8c:	2010      	movs	r0, #16
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	b90a      	cbnz	r2, 800ab96 <__lo0bits+0x32>
 800ab92:	3008      	adds	r0, #8
 800ab94:	0a1b      	lsrs	r3, r3, #8
 800ab96:	071a      	lsls	r2, r3, #28
 800ab98:	bf04      	itt	eq
 800ab9a:	091b      	lsreq	r3, r3, #4
 800ab9c:	3004      	addeq	r0, #4
 800ab9e:	079a      	lsls	r2, r3, #30
 800aba0:	bf04      	itt	eq
 800aba2:	089b      	lsreq	r3, r3, #2
 800aba4:	3002      	addeq	r0, #2
 800aba6:	07da      	lsls	r2, r3, #31
 800aba8:	d403      	bmi.n	800abb2 <__lo0bits+0x4e>
 800abaa:	085b      	lsrs	r3, r3, #1
 800abac:	f100 0001 	add.w	r0, r0, #1
 800abb0:	d005      	beq.n	800abbe <__lo0bits+0x5a>
 800abb2:	600b      	str	r3, [r1, #0]
 800abb4:	4770      	bx	lr
 800abb6:	4610      	mov	r0, r2
 800abb8:	e7e9      	b.n	800ab8e <__lo0bits+0x2a>
 800abba:	2000      	movs	r0, #0
 800abbc:	4770      	bx	lr
 800abbe:	2020      	movs	r0, #32
 800abc0:	4770      	bx	lr
	...

0800abc4 <__i2b>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	460c      	mov	r4, r1
 800abc8:	2101      	movs	r1, #1
 800abca:	f7ff feb9 	bl	800a940 <_Balloc>
 800abce:	4602      	mov	r2, r0
 800abd0:	b928      	cbnz	r0, 800abde <__i2b+0x1a>
 800abd2:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <__i2b+0x24>)
 800abd4:	4805      	ldr	r0, [pc, #20]	; (800abec <__i2b+0x28>)
 800abd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abda:	f000 fd6b 	bl	800b6b4 <__assert_func>
 800abde:	2301      	movs	r3, #1
 800abe0:	6144      	str	r4, [r0, #20]
 800abe2:	6103      	str	r3, [r0, #16]
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	0800c120 	.word	0x0800c120
 800abec:	0800c1ac 	.word	0x0800c1ac

0800abf0 <__multiply>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4691      	mov	r9, r2
 800abf6:	690a      	ldr	r2, [r1, #16]
 800abf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	bfb8      	it	lt
 800ac00:	460b      	movlt	r3, r1
 800ac02:	460c      	mov	r4, r1
 800ac04:	bfbc      	itt	lt
 800ac06:	464c      	movlt	r4, r9
 800ac08:	4699      	movlt	r9, r3
 800ac0a:	6927      	ldr	r7, [r4, #16]
 800ac0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	6861      	ldr	r1, [r4, #4]
 800ac14:	eb07 060a 	add.w	r6, r7, sl
 800ac18:	42b3      	cmp	r3, r6
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	bfb8      	it	lt
 800ac1e:	3101      	addlt	r1, #1
 800ac20:	f7ff fe8e 	bl	800a940 <_Balloc>
 800ac24:	b930      	cbnz	r0, 800ac34 <__multiply+0x44>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4b44      	ldr	r3, [pc, #272]	; (800ad3c <__multiply+0x14c>)
 800ac2a:	4845      	ldr	r0, [pc, #276]	; (800ad40 <__multiply+0x150>)
 800ac2c:	f240 115d 	movw	r1, #349	; 0x15d
 800ac30:	f000 fd40 	bl	800b6b4 <__assert_func>
 800ac34:	f100 0514 	add.w	r5, r0, #20
 800ac38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac3c:	462b      	mov	r3, r5
 800ac3e:	2200      	movs	r2, #0
 800ac40:	4543      	cmp	r3, r8
 800ac42:	d321      	bcc.n	800ac88 <__multiply+0x98>
 800ac44:	f104 0314 	add.w	r3, r4, #20
 800ac48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac4c:	f109 0314 	add.w	r3, r9, #20
 800ac50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac54:	9202      	str	r2, [sp, #8]
 800ac56:	1b3a      	subs	r2, r7, r4
 800ac58:	3a15      	subs	r2, #21
 800ac5a:	f022 0203 	bic.w	r2, r2, #3
 800ac5e:	3204      	adds	r2, #4
 800ac60:	f104 0115 	add.w	r1, r4, #21
 800ac64:	428f      	cmp	r7, r1
 800ac66:	bf38      	it	cc
 800ac68:	2204      	movcc	r2, #4
 800ac6a:	9201      	str	r2, [sp, #4]
 800ac6c:	9a02      	ldr	r2, [sp, #8]
 800ac6e:	9303      	str	r3, [sp, #12]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d80c      	bhi.n	800ac8e <__multiply+0x9e>
 800ac74:	2e00      	cmp	r6, #0
 800ac76:	dd03      	ble.n	800ac80 <__multiply+0x90>
 800ac78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d05a      	beq.n	800ad36 <__multiply+0x146>
 800ac80:	6106      	str	r6, [r0, #16]
 800ac82:	b005      	add	sp, #20
 800ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac88:	f843 2b04 	str.w	r2, [r3], #4
 800ac8c:	e7d8      	b.n	800ac40 <__multiply+0x50>
 800ac8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac92:	f1ba 0f00 	cmp.w	sl, #0
 800ac96:	d024      	beq.n	800ace2 <__multiply+0xf2>
 800ac98:	f104 0e14 	add.w	lr, r4, #20
 800ac9c:	46a9      	mov	r9, r5
 800ac9e:	f04f 0c00 	mov.w	ip, #0
 800aca2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aca6:	f8d9 1000 	ldr.w	r1, [r9]
 800acaa:	fa1f fb82 	uxth.w	fp, r2
 800acae:	b289      	uxth	r1, r1
 800acb0:	fb0a 110b 	mla	r1, sl, fp, r1
 800acb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acb8:	f8d9 2000 	ldr.w	r2, [r9]
 800acbc:	4461      	add	r1, ip
 800acbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acc2:	fb0a c20b 	mla	r2, sl, fp, ip
 800acc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acca:	b289      	uxth	r1, r1
 800accc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acd0:	4577      	cmp	r7, lr
 800acd2:	f849 1b04 	str.w	r1, [r9], #4
 800acd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acda:	d8e2      	bhi.n	800aca2 <__multiply+0xb2>
 800acdc:	9a01      	ldr	r2, [sp, #4]
 800acde:	f845 c002 	str.w	ip, [r5, r2]
 800ace2:	9a03      	ldr	r2, [sp, #12]
 800ace4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ace8:	3304      	adds	r3, #4
 800acea:	f1b9 0f00 	cmp.w	r9, #0
 800acee:	d020      	beq.n	800ad32 <__multiply+0x142>
 800acf0:	6829      	ldr	r1, [r5, #0]
 800acf2:	f104 0c14 	add.w	ip, r4, #20
 800acf6:	46ae      	mov	lr, r5
 800acf8:	f04f 0a00 	mov.w	sl, #0
 800acfc:	f8bc b000 	ldrh.w	fp, [ip]
 800ad00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad04:	fb09 220b 	mla	r2, r9, fp, r2
 800ad08:	4492      	add	sl, r2
 800ad0a:	b289      	uxth	r1, r1
 800ad0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad10:	f84e 1b04 	str.w	r1, [lr], #4
 800ad14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad18:	f8be 1000 	ldrh.w	r1, [lr]
 800ad1c:	0c12      	lsrs	r2, r2, #16
 800ad1e:	fb09 1102 	mla	r1, r9, r2, r1
 800ad22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad26:	4567      	cmp	r7, ip
 800ad28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad2c:	d8e6      	bhi.n	800acfc <__multiply+0x10c>
 800ad2e:	9a01      	ldr	r2, [sp, #4]
 800ad30:	50a9      	str	r1, [r5, r2]
 800ad32:	3504      	adds	r5, #4
 800ad34:	e79a      	b.n	800ac6c <__multiply+0x7c>
 800ad36:	3e01      	subs	r6, #1
 800ad38:	e79c      	b.n	800ac74 <__multiply+0x84>
 800ad3a:	bf00      	nop
 800ad3c:	0800c120 	.word	0x0800c120
 800ad40:	0800c1ac 	.word	0x0800c1ac

0800ad44 <__pow5mult>:
 800ad44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad48:	4615      	mov	r5, r2
 800ad4a:	f012 0203 	ands.w	r2, r2, #3
 800ad4e:	4606      	mov	r6, r0
 800ad50:	460f      	mov	r7, r1
 800ad52:	d007      	beq.n	800ad64 <__pow5mult+0x20>
 800ad54:	4c25      	ldr	r4, [pc, #148]	; (800adec <__pow5mult+0xa8>)
 800ad56:	3a01      	subs	r2, #1
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad5e:	f7ff fe51 	bl	800aa04 <__multadd>
 800ad62:	4607      	mov	r7, r0
 800ad64:	10ad      	asrs	r5, r5, #2
 800ad66:	d03d      	beq.n	800ade4 <__pow5mult+0xa0>
 800ad68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad6a:	b97c      	cbnz	r4, 800ad8c <__pow5mult+0x48>
 800ad6c:	2010      	movs	r0, #16
 800ad6e:	f7ff fdc1 	bl	800a8f4 <malloc>
 800ad72:	4602      	mov	r2, r0
 800ad74:	6270      	str	r0, [r6, #36]	; 0x24
 800ad76:	b928      	cbnz	r0, 800ad84 <__pow5mult+0x40>
 800ad78:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <__pow5mult+0xac>)
 800ad7a:	481e      	ldr	r0, [pc, #120]	; (800adf4 <__pow5mult+0xb0>)
 800ad7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad80:	f000 fc98 	bl	800b6b4 <__assert_func>
 800ad84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad88:	6004      	str	r4, [r0, #0]
 800ad8a:	60c4      	str	r4, [r0, #12]
 800ad8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad94:	b94c      	cbnz	r4, 800adaa <__pow5mult+0x66>
 800ad96:	f240 2171 	movw	r1, #625	; 0x271
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f7ff ff12 	bl	800abc4 <__i2b>
 800ada0:	2300      	movs	r3, #0
 800ada2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ada6:	4604      	mov	r4, r0
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	f04f 0900 	mov.w	r9, #0
 800adae:	07eb      	lsls	r3, r5, #31
 800adb0:	d50a      	bpl.n	800adc8 <__pow5mult+0x84>
 800adb2:	4639      	mov	r1, r7
 800adb4:	4622      	mov	r2, r4
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ff1a 	bl	800abf0 <__multiply>
 800adbc:	4639      	mov	r1, r7
 800adbe:	4680      	mov	r8, r0
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff fdfd 	bl	800a9c0 <_Bfree>
 800adc6:	4647      	mov	r7, r8
 800adc8:	106d      	asrs	r5, r5, #1
 800adca:	d00b      	beq.n	800ade4 <__pow5mult+0xa0>
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	b938      	cbnz	r0, 800ade0 <__pow5mult+0x9c>
 800add0:	4622      	mov	r2, r4
 800add2:	4621      	mov	r1, r4
 800add4:	4630      	mov	r0, r6
 800add6:	f7ff ff0b 	bl	800abf0 <__multiply>
 800adda:	6020      	str	r0, [r4, #0]
 800addc:	f8c0 9000 	str.w	r9, [r0]
 800ade0:	4604      	mov	r4, r0
 800ade2:	e7e4      	b.n	800adae <__pow5mult+0x6a>
 800ade4:	4638      	mov	r0, r7
 800ade6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adea:	bf00      	nop
 800adec:	0800c2f8 	.word	0x0800c2f8
 800adf0:	0800c0ae 	.word	0x0800c0ae
 800adf4:	0800c1ac 	.word	0x0800c1ac

0800adf8 <__lshift>:
 800adf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adfc:	460c      	mov	r4, r1
 800adfe:	6849      	ldr	r1, [r1, #4]
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae06:	68a3      	ldr	r3, [r4, #8]
 800ae08:	4607      	mov	r7, r0
 800ae0a:	4691      	mov	r9, r2
 800ae0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae10:	f108 0601 	add.w	r6, r8, #1
 800ae14:	42b3      	cmp	r3, r6
 800ae16:	db0b      	blt.n	800ae30 <__lshift+0x38>
 800ae18:	4638      	mov	r0, r7
 800ae1a:	f7ff fd91 	bl	800a940 <_Balloc>
 800ae1e:	4605      	mov	r5, r0
 800ae20:	b948      	cbnz	r0, 800ae36 <__lshift+0x3e>
 800ae22:	4602      	mov	r2, r0
 800ae24:	4b2a      	ldr	r3, [pc, #168]	; (800aed0 <__lshift+0xd8>)
 800ae26:	482b      	ldr	r0, [pc, #172]	; (800aed4 <__lshift+0xdc>)
 800ae28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae2c:	f000 fc42 	bl	800b6b4 <__assert_func>
 800ae30:	3101      	adds	r1, #1
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	e7ee      	b.n	800ae14 <__lshift+0x1c>
 800ae36:	2300      	movs	r3, #0
 800ae38:	f100 0114 	add.w	r1, r0, #20
 800ae3c:	f100 0210 	add.w	r2, r0, #16
 800ae40:	4618      	mov	r0, r3
 800ae42:	4553      	cmp	r3, sl
 800ae44:	db37      	blt.n	800aeb6 <__lshift+0xbe>
 800ae46:	6920      	ldr	r0, [r4, #16]
 800ae48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae4c:	f104 0314 	add.w	r3, r4, #20
 800ae50:	f019 091f 	ands.w	r9, r9, #31
 800ae54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae5c:	d02f      	beq.n	800aebe <__lshift+0xc6>
 800ae5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ae62:	468a      	mov	sl, r1
 800ae64:	f04f 0c00 	mov.w	ip, #0
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	fa02 f209 	lsl.w	r2, r2, r9
 800ae6e:	ea42 020c 	orr.w	r2, r2, ip
 800ae72:	f84a 2b04 	str.w	r2, [sl], #4
 800ae76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae7a:	4298      	cmp	r0, r3
 800ae7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae80:	d8f2      	bhi.n	800ae68 <__lshift+0x70>
 800ae82:	1b03      	subs	r3, r0, r4
 800ae84:	3b15      	subs	r3, #21
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	f104 0215 	add.w	r2, r4, #21
 800ae90:	4290      	cmp	r0, r2
 800ae92:	bf38      	it	cc
 800ae94:	2304      	movcc	r3, #4
 800ae96:	f841 c003 	str.w	ip, [r1, r3]
 800ae9a:	f1bc 0f00 	cmp.w	ip, #0
 800ae9e:	d001      	beq.n	800aea4 <__lshift+0xac>
 800aea0:	f108 0602 	add.w	r6, r8, #2
 800aea4:	3e01      	subs	r6, #1
 800aea6:	4638      	mov	r0, r7
 800aea8:	612e      	str	r6, [r5, #16]
 800aeaa:	4621      	mov	r1, r4
 800aeac:	f7ff fd88 	bl	800a9c0 <_Bfree>
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aeba:	3301      	adds	r3, #1
 800aebc:	e7c1      	b.n	800ae42 <__lshift+0x4a>
 800aebe:	3904      	subs	r1, #4
 800aec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aec4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aec8:	4298      	cmp	r0, r3
 800aeca:	d8f9      	bhi.n	800aec0 <__lshift+0xc8>
 800aecc:	e7ea      	b.n	800aea4 <__lshift+0xac>
 800aece:	bf00      	nop
 800aed0:	0800c120 	.word	0x0800c120
 800aed4:	0800c1ac 	.word	0x0800c1ac

0800aed8 <__mcmp>:
 800aed8:	b530      	push	{r4, r5, lr}
 800aeda:	6902      	ldr	r2, [r0, #16]
 800aedc:	690c      	ldr	r4, [r1, #16]
 800aede:	1b12      	subs	r2, r2, r4
 800aee0:	d10e      	bne.n	800af00 <__mcmp+0x28>
 800aee2:	f100 0314 	add.w	r3, r0, #20
 800aee6:	3114      	adds	r1, #20
 800aee8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aeec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aef0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aef4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aef8:	42a5      	cmp	r5, r4
 800aefa:	d003      	beq.n	800af04 <__mcmp+0x2c>
 800aefc:	d305      	bcc.n	800af0a <__mcmp+0x32>
 800aefe:	2201      	movs	r2, #1
 800af00:	4610      	mov	r0, r2
 800af02:	bd30      	pop	{r4, r5, pc}
 800af04:	4283      	cmp	r3, r0
 800af06:	d3f3      	bcc.n	800aef0 <__mcmp+0x18>
 800af08:	e7fa      	b.n	800af00 <__mcmp+0x28>
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af0e:	e7f7      	b.n	800af00 <__mcmp+0x28>

0800af10 <__mdiff>:
 800af10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	460c      	mov	r4, r1
 800af16:	4606      	mov	r6, r0
 800af18:	4611      	mov	r1, r2
 800af1a:	4620      	mov	r0, r4
 800af1c:	4690      	mov	r8, r2
 800af1e:	f7ff ffdb 	bl	800aed8 <__mcmp>
 800af22:	1e05      	subs	r5, r0, #0
 800af24:	d110      	bne.n	800af48 <__mdiff+0x38>
 800af26:	4629      	mov	r1, r5
 800af28:	4630      	mov	r0, r6
 800af2a:	f7ff fd09 	bl	800a940 <_Balloc>
 800af2e:	b930      	cbnz	r0, 800af3e <__mdiff+0x2e>
 800af30:	4b3a      	ldr	r3, [pc, #232]	; (800b01c <__mdiff+0x10c>)
 800af32:	4602      	mov	r2, r0
 800af34:	f240 2132 	movw	r1, #562	; 0x232
 800af38:	4839      	ldr	r0, [pc, #228]	; (800b020 <__mdiff+0x110>)
 800af3a:	f000 fbbb 	bl	800b6b4 <__assert_func>
 800af3e:	2301      	movs	r3, #1
 800af40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af48:	bfa4      	itt	ge
 800af4a:	4643      	movge	r3, r8
 800af4c:	46a0      	movge	r8, r4
 800af4e:	4630      	mov	r0, r6
 800af50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af54:	bfa6      	itte	ge
 800af56:	461c      	movge	r4, r3
 800af58:	2500      	movge	r5, #0
 800af5a:	2501      	movlt	r5, #1
 800af5c:	f7ff fcf0 	bl	800a940 <_Balloc>
 800af60:	b920      	cbnz	r0, 800af6c <__mdiff+0x5c>
 800af62:	4b2e      	ldr	r3, [pc, #184]	; (800b01c <__mdiff+0x10c>)
 800af64:	4602      	mov	r2, r0
 800af66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af6a:	e7e5      	b.n	800af38 <__mdiff+0x28>
 800af6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af70:	6926      	ldr	r6, [r4, #16]
 800af72:	60c5      	str	r5, [r0, #12]
 800af74:	f104 0914 	add.w	r9, r4, #20
 800af78:	f108 0514 	add.w	r5, r8, #20
 800af7c:	f100 0e14 	add.w	lr, r0, #20
 800af80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af88:	f108 0210 	add.w	r2, r8, #16
 800af8c:	46f2      	mov	sl, lr
 800af8e:	2100      	movs	r1, #0
 800af90:	f859 3b04 	ldr.w	r3, [r9], #4
 800af94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af98:	fa1f f883 	uxth.w	r8, r3
 800af9c:	fa11 f18b 	uxtah	r1, r1, fp
 800afa0:	0c1b      	lsrs	r3, r3, #16
 800afa2:	eba1 0808 	sub.w	r8, r1, r8
 800afa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afae:	fa1f f888 	uxth.w	r8, r8
 800afb2:	1419      	asrs	r1, r3, #16
 800afb4:	454e      	cmp	r6, r9
 800afb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afba:	f84a 3b04 	str.w	r3, [sl], #4
 800afbe:	d8e7      	bhi.n	800af90 <__mdiff+0x80>
 800afc0:	1b33      	subs	r3, r6, r4
 800afc2:	3b15      	subs	r3, #21
 800afc4:	f023 0303 	bic.w	r3, r3, #3
 800afc8:	3304      	adds	r3, #4
 800afca:	3415      	adds	r4, #21
 800afcc:	42a6      	cmp	r6, r4
 800afce:	bf38      	it	cc
 800afd0:	2304      	movcc	r3, #4
 800afd2:	441d      	add	r5, r3
 800afd4:	4473      	add	r3, lr
 800afd6:	469e      	mov	lr, r3
 800afd8:	462e      	mov	r6, r5
 800afda:	4566      	cmp	r6, ip
 800afdc:	d30e      	bcc.n	800affc <__mdiff+0xec>
 800afde:	f10c 0203 	add.w	r2, ip, #3
 800afe2:	1b52      	subs	r2, r2, r5
 800afe4:	f022 0203 	bic.w	r2, r2, #3
 800afe8:	3d03      	subs	r5, #3
 800afea:	45ac      	cmp	ip, r5
 800afec:	bf38      	it	cc
 800afee:	2200      	movcc	r2, #0
 800aff0:	441a      	add	r2, r3
 800aff2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aff6:	b17b      	cbz	r3, 800b018 <__mdiff+0x108>
 800aff8:	6107      	str	r7, [r0, #16]
 800affa:	e7a3      	b.n	800af44 <__mdiff+0x34>
 800affc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b000:	fa11 f288 	uxtah	r2, r1, r8
 800b004:	1414      	asrs	r4, r2, #16
 800b006:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b00a:	b292      	uxth	r2, r2
 800b00c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b010:	f84e 2b04 	str.w	r2, [lr], #4
 800b014:	1421      	asrs	r1, r4, #16
 800b016:	e7e0      	b.n	800afda <__mdiff+0xca>
 800b018:	3f01      	subs	r7, #1
 800b01a:	e7ea      	b.n	800aff2 <__mdiff+0xe2>
 800b01c:	0800c120 	.word	0x0800c120
 800b020:	0800c1ac 	.word	0x0800c1ac

0800b024 <__ulp>:
 800b024:	b082      	sub	sp, #8
 800b026:	ed8d 0b00 	vstr	d0, [sp]
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	4912      	ldr	r1, [pc, #72]	; (800b078 <__ulp+0x54>)
 800b02e:	4019      	ands	r1, r3
 800b030:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b034:	2900      	cmp	r1, #0
 800b036:	dd05      	ble.n	800b044 <__ulp+0x20>
 800b038:	2200      	movs	r2, #0
 800b03a:	460b      	mov	r3, r1
 800b03c:	ec43 2b10 	vmov	d0, r2, r3
 800b040:	b002      	add	sp, #8
 800b042:	4770      	bx	lr
 800b044:	4249      	negs	r1, r1
 800b046:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b04a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	f04f 0300 	mov.w	r3, #0
 800b056:	da04      	bge.n	800b062 <__ulp+0x3e>
 800b058:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b05c:	fa41 f300 	asr.w	r3, r1, r0
 800b060:	e7ec      	b.n	800b03c <__ulp+0x18>
 800b062:	f1a0 0114 	sub.w	r1, r0, #20
 800b066:	291e      	cmp	r1, #30
 800b068:	bfda      	itte	le
 800b06a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b06e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b072:	2101      	movgt	r1, #1
 800b074:	460a      	mov	r2, r1
 800b076:	e7e1      	b.n	800b03c <__ulp+0x18>
 800b078:	7ff00000 	.word	0x7ff00000

0800b07c <__b2d>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	6905      	ldr	r5, [r0, #16]
 800b080:	f100 0714 	add.w	r7, r0, #20
 800b084:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b088:	1f2e      	subs	r6, r5, #4
 800b08a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b08e:	4620      	mov	r0, r4
 800b090:	f7ff fd48 	bl	800ab24 <__hi0bits>
 800b094:	f1c0 0320 	rsb	r3, r0, #32
 800b098:	280a      	cmp	r0, #10
 800b09a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b118 <__b2d+0x9c>
 800b09e:	600b      	str	r3, [r1, #0]
 800b0a0:	dc14      	bgt.n	800b0cc <__b2d+0x50>
 800b0a2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b0a6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b0aa:	42b7      	cmp	r7, r6
 800b0ac:	ea41 030c 	orr.w	r3, r1, ip
 800b0b0:	bf34      	ite	cc
 800b0b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0b6:	2100      	movcs	r1, #0
 800b0b8:	3015      	adds	r0, #21
 800b0ba:	fa04 f000 	lsl.w	r0, r4, r0
 800b0be:	fa21 f10e 	lsr.w	r1, r1, lr
 800b0c2:	ea40 0201 	orr.w	r2, r0, r1
 800b0c6:	ec43 2b10 	vmov	d0, r2, r3
 800b0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0cc:	42b7      	cmp	r7, r6
 800b0ce:	bf3a      	itte	cc
 800b0d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0d4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b0d8:	2100      	movcs	r1, #0
 800b0da:	380b      	subs	r0, #11
 800b0dc:	d017      	beq.n	800b10e <__b2d+0x92>
 800b0de:	f1c0 0c20 	rsb	ip, r0, #32
 800b0e2:	fa04 f500 	lsl.w	r5, r4, r0
 800b0e6:	42be      	cmp	r6, r7
 800b0e8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b0ec:	ea45 0504 	orr.w	r5, r5, r4
 800b0f0:	bf8c      	ite	hi
 800b0f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b0f6:	2400      	movls	r4, #0
 800b0f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b0fc:	fa01 f000 	lsl.w	r0, r1, r0
 800b100:	fa24 f40c 	lsr.w	r4, r4, ip
 800b104:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b108:	ea40 0204 	orr.w	r2, r0, r4
 800b10c:	e7db      	b.n	800b0c6 <__b2d+0x4a>
 800b10e:	ea44 030c 	orr.w	r3, r4, ip
 800b112:	460a      	mov	r2, r1
 800b114:	e7d7      	b.n	800b0c6 <__b2d+0x4a>
 800b116:	bf00      	nop
 800b118:	3ff00000 	.word	0x3ff00000

0800b11c <__d2b>:
 800b11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b120:	4689      	mov	r9, r1
 800b122:	2101      	movs	r1, #1
 800b124:	ec57 6b10 	vmov	r6, r7, d0
 800b128:	4690      	mov	r8, r2
 800b12a:	f7ff fc09 	bl	800a940 <_Balloc>
 800b12e:	4604      	mov	r4, r0
 800b130:	b930      	cbnz	r0, 800b140 <__d2b+0x24>
 800b132:	4602      	mov	r2, r0
 800b134:	4b25      	ldr	r3, [pc, #148]	; (800b1cc <__d2b+0xb0>)
 800b136:	4826      	ldr	r0, [pc, #152]	; (800b1d0 <__d2b+0xb4>)
 800b138:	f240 310a 	movw	r1, #778	; 0x30a
 800b13c:	f000 faba 	bl	800b6b4 <__assert_func>
 800b140:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b144:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b148:	bb35      	cbnz	r5, 800b198 <__d2b+0x7c>
 800b14a:	2e00      	cmp	r6, #0
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	d028      	beq.n	800b1a2 <__d2b+0x86>
 800b150:	4668      	mov	r0, sp
 800b152:	9600      	str	r6, [sp, #0]
 800b154:	f7ff fd06 	bl	800ab64 <__lo0bits>
 800b158:	9900      	ldr	r1, [sp, #0]
 800b15a:	b300      	cbz	r0, 800b19e <__d2b+0x82>
 800b15c:	9a01      	ldr	r2, [sp, #4]
 800b15e:	f1c0 0320 	rsb	r3, r0, #32
 800b162:	fa02 f303 	lsl.w	r3, r2, r3
 800b166:	430b      	orrs	r3, r1
 800b168:	40c2      	lsrs	r2, r0
 800b16a:	6163      	str	r3, [r4, #20]
 800b16c:	9201      	str	r2, [sp, #4]
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	61a3      	str	r3, [r4, #24]
 800b172:	2b00      	cmp	r3, #0
 800b174:	bf14      	ite	ne
 800b176:	2202      	movne	r2, #2
 800b178:	2201      	moveq	r2, #1
 800b17a:	6122      	str	r2, [r4, #16]
 800b17c:	b1d5      	cbz	r5, 800b1b4 <__d2b+0x98>
 800b17e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b182:	4405      	add	r5, r0
 800b184:	f8c9 5000 	str.w	r5, [r9]
 800b188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b18c:	f8c8 0000 	str.w	r0, [r8]
 800b190:	4620      	mov	r0, r4
 800b192:	b003      	add	sp, #12
 800b194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b19c:	e7d5      	b.n	800b14a <__d2b+0x2e>
 800b19e:	6161      	str	r1, [r4, #20]
 800b1a0:	e7e5      	b.n	800b16e <__d2b+0x52>
 800b1a2:	a801      	add	r0, sp, #4
 800b1a4:	f7ff fcde 	bl	800ab64 <__lo0bits>
 800b1a8:	9b01      	ldr	r3, [sp, #4]
 800b1aa:	6163      	str	r3, [r4, #20]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	6122      	str	r2, [r4, #16]
 800b1b0:	3020      	adds	r0, #32
 800b1b2:	e7e3      	b.n	800b17c <__d2b+0x60>
 800b1b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1bc:	f8c9 0000 	str.w	r0, [r9]
 800b1c0:	6918      	ldr	r0, [r3, #16]
 800b1c2:	f7ff fcaf 	bl	800ab24 <__hi0bits>
 800b1c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1ca:	e7df      	b.n	800b18c <__d2b+0x70>
 800b1cc:	0800c120 	.word	0x0800c120
 800b1d0:	0800c1ac 	.word	0x0800c1ac

0800b1d4 <__ratio>:
 800b1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	4688      	mov	r8, r1
 800b1da:	4669      	mov	r1, sp
 800b1dc:	4681      	mov	r9, r0
 800b1de:	f7ff ff4d 	bl	800b07c <__b2d>
 800b1e2:	a901      	add	r1, sp, #4
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	ec55 4b10 	vmov	r4, r5, d0
 800b1ea:	ee10 aa10 	vmov	sl, s0
 800b1ee:	f7ff ff45 	bl	800b07c <__b2d>
 800b1f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b1fa:	1a59      	subs	r1, r3, r1
 800b1fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b206:	ec57 6b10 	vmov	r6, r7, d0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bfd6      	itet	le
 800b20e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b212:	462a      	movgt	r2, r5
 800b214:	463a      	movle	r2, r7
 800b216:	46ab      	mov	fp, r5
 800b218:	bfd6      	itet	le
 800b21a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b21e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b222:	ee00 3a90 	vmovle	s1, r3
 800b226:	ec4b ab17 	vmov	d7, sl, fp
 800b22a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b22e:	b003      	add	sp, #12
 800b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b234 <__copybits>:
 800b234:	3901      	subs	r1, #1
 800b236:	b570      	push	{r4, r5, r6, lr}
 800b238:	1149      	asrs	r1, r1, #5
 800b23a:	6914      	ldr	r4, [r2, #16]
 800b23c:	3101      	adds	r1, #1
 800b23e:	f102 0314 	add.w	r3, r2, #20
 800b242:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b246:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b24a:	1f05      	subs	r5, r0, #4
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	d30c      	bcc.n	800b26a <__copybits+0x36>
 800b250:	1aa3      	subs	r3, r4, r2
 800b252:	3b11      	subs	r3, #17
 800b254:	f023 0303 	bic.w	r3, r3, #3
 800b258:	3211      	adds	r2, #17
 800b25a:	42a2      	cmp	r2, r4
 800b25c:	bf88      	it	hi
 800b25e:	2300      	movhi	r3, #0
 800b260:	4418      	add	r0, r3
 800b262:	2300      	movs	r3, #0
 800b264:	4288      	cmp	r0, r1
 800b266:	d305      	bcc.n	800b274 <__copybits+0x40>
 800b268:	bd70      	pop	{r4, r5, r6, pc}
 800b26a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b26e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b272:	e7eb      	b.n	800b24c <__copybits+0x18>
 800b274:	f840 3b04 	str.w	r3, [r0], #4
 800b278:	e7f4      	b.n	800b264 <__copybits+0x30>

0800b27a <__any_on>:
 800b27a:	f100 0214 	add.w	r2, r0, #20
 800b27e:	6900      	ldr	r0, [r0, #16]
 800b280:	114b      	asrs	r3, r1, #5
 800b282:	4298      	cmp	r0, r3
 800b284:	b510      	push	{r4, lr}
 800b286:	db11      	blt.n	800b2ac <__any_on+0x32>
 800b288:	dd0a      	ble.n	800b2a0 <__any_on+0x26>
 800b28a:	f011 011f 	ands.w	r1, r1, #31
 800b28e:	d007      	beq.n	800b2a0 <__any_on+0x26>
 800b290:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b294:	fa24 f001 	lsr.w	r0, r4, r1
 800b298:	fa00 f101 	lsl.w	r1, r0, r1
 800b29c:	428c      	cmp	r4, r1
 800b29e:	d10b      	bne.n	800b2b8 <__any_on+0x3e>
 800b2a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d803      	bhi.n	800b2b0 <__any_on+0x36>
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	bd10      	pop	{r4, pc}
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	e7f7      	b.n	800b2a0 <__any_on+0x26>
 800b2b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2b4:	2900      	cmp	r1, #0
 800b2b6:	d0f5      	beq.n	800b2a4 <__any_on+0x2a>
 800b2b8:	2001      	movs	r0, #1
 800b2ba:	e7f6      	b.n	800b2aa <__any_on+0x30>

0800b2bc <_calloc_r>:
 800b2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2be:	fba1 2402 	umull	r2, r4, r1, r2
 800b2c2:	b94c      	cbnz	r4, 800b2d8 <_calloc_r+0x1c>
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	9201      	str	r2, [sp, #4]
 800b2c8:	f7fc fab2 	bl	8007830 <_malloc_r>
 800b2cc:	9a01      	ldr	r2, [sp, #4]
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	b930      	cbnz	r0, 800b2e0 <_calloc_r+0x24>
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	b003      	add	sp, #12
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	220c      	movs	r2, #12
 800b2da:	6002      	str	r2, [r0, #0]
 800b2dc:	2500      	movs	r5, #0
 800b2de:	e7f8      	b.n	800b2d2 <_calloc_r+0x16>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	f7fc fa7c 	bl	80077de <memset>
 800b2e6:	e7f4      	b.n	800b2d2 <_calloc_r+0x16>

0800b2e8 <_free_r>:
 800b2e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ea:	2900      	cmp	r1, #0
 800b2ec:	d044      	beq.n	800b378 <_free_r+0x90>
 800b2ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f2:	9001      	str	r0, [sp, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2fa:	bfb8      	it	lt
 800b2fc:	18e4      	addlt	r4, r4, r3
 800b2fe:	f7ff fb13 	bl	800a928 <__malloc_lock>
 800b302:	4a1e      	ldr	r2, [pc, #120]	; (800b37c <_free_r+0x94>)
 800b304:	9801      	ldr	r0, [sp, #4]
 800b306:	6813      	ldr	r3, [r2, #0]
 800b308:	b933      	cbnz	r3, 800b318 <_free_r+0x30>
 800b30a:	6063      	str	r3, [r4, #4]
 800b30c:	6014      	str	r4, [r2, #0]
 800b30e:	b003      	add	sp, #12
 800b310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b314:	f7ff bb0e 	b.w	800a934 <__malloc_unlock>
 800b318:	42a3      	cmp	r3, r4
 800b31a:	d908      	bls.n	800b32e <_free_r+0x46>
 800b31c:	6825      	ldr	r5, [r4, #0]
 800b31e:	1961      	adds	r1, r4, r5
 800b320:	428b      	cmp	r3, r1
 800b322:	bf01      	itttt	eq
 800b324:	6819      	ldreq	r1, [r3, #0]
 800b326:	685b      	ldreq	r3, [r3, #4]
 800b328:	1949      	addeq	r1, r1, r5
 800b32a:	6021      	streq	r1, [r4, #0]
 800b32c:	e7ed      	b.n	800b30a <_free_r+0x22>
 800b32e:	461a      	mov	r2, r3
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	b10b      	cbz	r3, 800b338 <_free_r+0x50>
 800b334:	42a3      	cmp	r3, r4
 800b336:	d9fa      	bls.n	800b32e <_free_r+0x46>
 800b338:	6811      	ldr	r1, [r2, #0]
 800b33a:	1855      	adds	r5, r2, r1
 800b33c:	42a5      	cmp	r5, r4
 800b33e:	d10b      	bne.n	800b358 <_free_r+0x70>
 800b340:	6824      	ldr	r4, [r4, #0]
 800b342:	4421      	add	r1, r4
 800b344:	1854      	adds	r4, r2, r1
 800b346:	42a3      	cmp	r3, r4
 800b348:	6011      	str	r1, [r2, #0]
 800b34a:	d1e0      	bne.n	800b30e <_free_r+0x26>
 800b34c:	681c      	ldr	r4, [r3, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	6053      	str	r3, [r2, #4]
 800b352:	4421      	add	r1, r4
 800b354:	6011      	str	r1, [r2, #0]
 800b356:	e7da      	b.n	800b30e <_free_r+0x26>
 800b358:	d902      	bls.n	800b360 <_free_r+0x78>
 800b35a:	230c      	movs	r3, #12
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	e7d6      	b.n	800b30e <_free_r+0x26>
 800b360:	6825      	ldr	r5, [r4, #0]
 800b362:	1961      	adds	r1, r4, r5
 800b364:	428b      	cmp	r3, r1
 800b366:	bf04      	itt	eq
 800b368:	6819      	ldreq	r1, [r3, #0]
 800b36a:	685b      	ldreq	r3, [r3, #4]
 800b36c:	6063      	str	r3, [r4, #4]
 800b36e:	bf04      	itt	eq
 800b370:	1949      	addeq	r1, r1, r5
 800b372:	6021      	streq	r1, [r4, #0]
 800b374:	6054      	str	r4, [r2, #4]
 800b376:	e7ca      	b.n	800b30e <_free_r+0x26>
 800b378:	b003      	add	sp, #12
 800b37a:	bd30      	pop	{r4, r5, pc}
 800b37c:	20004d7c 	.word	0x20004d7c

0800b380 <__ssputs_r>:
 800b380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b384:	688e      	ldr	r6, [r1, #8]
 800b386:	429e      	cmp	r6, r3
 800b388:	4682      	mov	sl, r0
 800b38a:	460c      	mov	r4, r1
 800b38c:	4690      	mov	r8, r2
 800b38e:	461f      	mov	r7, r3
 800b390:	d838      	bhi.n	800b404 <__ssputs_r+0x84>
 800b392:	898a      	ldrh	r2, [r1, #12]
 800b394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b398:	d032      	beq.n	800b400 <__ssputs_r+0x80>
 800b39a:	6825      	ldr	r5, [r4, #0]
 800b39c:	6909      	ldr	r1, [r1, #16]
 800b39e:	eba5 0901 	sub.w	r9, r5, r1
 800b3a2:	6965      	ldr	r5, [r4, #20]
 800b3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	444b      	add	r3, r9
 800b3b0:	106d      	asrs	r5, r5, #1
 800b3b2:	429d      	cmp	r5, r3
 800b3b4:	bf38      	it	cc
 800b3b6:	461d      	movcc	r5, r3
 800b3b8:	0553      	lsls	r3, r2, #21
 800b3ba:	d531      	bpl.n	800b420 <__ssputs_r+0xa0>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7fc fa37 	bl	8007830 <_malloc_r>
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	b950      	cbnz	r0, 800b3dc <__ssputs_r+0x5c>
 800b3c6:	230c      	movs	r3, #12
 800b3c8:	f8ca 3000 	str.w	r3, [sl]
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3dc:	6921      	ldr	r1, [r4, #16]
 800b3de:	464a      	mov	r2, r9
 800b3e0:	f7fc f9ef 	bl	80077c2 <memcpy>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	6126      	str	r6, [r4, #16]
 800b3f2:	6165      	str	r5, [r4, #20]
 800b3f4:	444e      	add	r6, r9
 800b3f6:	eba5 0509 	sub.w	r5, r5, r9
 800b3fa:	6026      	str	r6, [r4, #0]
 800b3fc:	60a5      	str	r5, [r4, #8]
 800b3fe:	463e      	mov	r6, r7
 800b400:	42be      	cmp	r6, r7
 800b402:	d900      	bls.n	800b406 <__ssputs_r+0x86>
 800b404:	463e      	mov	r6, r7
 800b406:	6820      	ldr	r0, [r4, #0]
 800b408:	4632      	mov	r2, r6
 800b40a:	4641      	mov	r1, r8
 800b40c:	f000 f982 	bl	800b714 <memmove>
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	1b9b      	subs	r3, r3, r6
 800b414:	60a3      	str	r3, [r4, #8]
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	4433      	add	r3, r6
 800b41a:	6023      	str	r3, [r4, #0]
 800b41c:	2000      	movs	r0, #0
 800b41e:	e7db      	b.n	800b3d8 <__ssputs_r+0x58>
 800b420:	462a      	mov	r2, r5
 800b422:	f000 f991 	bl	800b748 <_realloc_r>
 800b426:	4606      	mov	r6, r0
 800b428:	2800      	cmp	r0, #0
 800b42a:	d1e1      	bne.n	800b3f0 <__ssputs_r+0x70>
 800b42c:	6921      	ldr	r1, [r4, #16]
 800b42e:	4650      	mov	r0, sl
 800b430:	f7ff ff5a 	bl	800b2e8 <_free_r>
 800b434:	e7c7      	b.n	800b3c6 <__ssputs_r+0x46>
	...

0800b438 <_svfiprintf_r>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	4698      	mov	r8, r3
 800b43e:	898b      	ldrh	r3, [r1, #12]
 800b440:	061b      	lsls	r3, r3, #24
 800b442:	b09d      	sub	sp, #116	; 0x74
 800b444:	4607      	mov	r7, r0
 800b446:	460d      	mov	r5, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	d50e      	bpl.n	800b46a <_svfiprintf_r+0x32>
 800b44c:	690b      	ldr	r3, [r1, #16]
 800b44e:	b963      	cbnz	r3, 800b46a <_svfiprintf_r+0x32>
 800b450:	2140      	movs	r1, #64	; 0x40
 800b452:	f7fc f9ed 	bl	8007830 <_malloc_r>
 800b456:	6028      	str	r0, [r5, #0]
 800b458:	6128      	str	r0, [r5, #16]
 800b45a:	b920      	cbnz	r0, 800b466 <_svfiprintf_r+0x2e>
 800b45c:	230c      	movs	r3, #12
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b464:	e0d1      	b.n	800b60a <_svfiprintf_r+0x1d2>
 800b466:	2340      	movs	r3, #64	; 0x40
 800b468:	616b      	str	r3, [r5, #20]
 800b46a:	2300      	movs	r3, #0
 800b46c:	9309      	str	r3, [sp, #36]	; 0x24
 800b46e:	2320      	movs	r3, #32
 800b470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b474:	f8cd 800c 	str.w	r8, [sp, #12]
 800b478:	2330      	movs	r3, #48	; 0x30
 800b47a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b624 <_svfiprintf_r+0x1ec>
 800b47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b482:	f04f 0901 	mov.w	r9, #1
 800b486:	4623      	mov	r3, r4
 800b488:	469a      	mov	sl, r3
 800b48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b48e:	b10a      	cbz	r2, 800b494 <_svfiprintf_r+0x5c>
 800b490:	2a25      	cmp	r2, #37	; 0x25
 800b492:	d1f9      	bne.n	800b488 <_svfiprintf_r+0x50>
 800b494:	ebba 0b04 	subs.w	fp, sl, r4
 800b498:	d00b      	beq.n	800b4b2 <_svfiprintf_r+0x7a>
 800b49a:	465b      	mov	r3, fp
 800b49c:	4622      	mov	r2, r4
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff ff6d 	bl	800b380 <__ssputs_r>
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f000 80aa 	beq.w	800b600 <_svfiprintf_r+0x1c8>
 800b4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ae:	445a      	add	r2, fp
 800b4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 80a2 	beq.w	800b600 <_svfiprintf_r+0x1c8>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	9307      	str	r3, [sp, #28]
 800b4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4d4:	4654      	mov	r4, sl
 800b4d6:	2205      	movs	r2, #5
 800b4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4dc:	4851      	ldr	r0, [pc, #324]	; (800b624 <_svfiprintf_r+0x1ec>)
 800b4de:	f7f4 feb7 	bl	8000250 <memchr>
 800b4e2:	9a04      	ldr	r2, [sp, #16]
 800b4e4:	b9d8      	cbnz	r0, 800b51e <_svfiprintf_r+0xe6>
 800b4e6:	06d0      	lsls	r0, r2, #27
 800b4e8:	bf44      	itt	mi
 800b4ea:	2320      	movmi	r3, #32
 800b4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f0:	0711      	lsls	r1, r2, #28
 800b4f2:	bf44      	itt	mi
 800b4f4:	232b      	movmi	r3, #43	; 0x2b
 800b4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b500:	d015      	beq.n	800b52e <_svfiprintf_r+0xf6>
 800b502:	9a07      	ldr	r2, [sp, #28]
 800b504:	4654      	mov	r4, sl
 800b506:	2000      	movs	r0, #0
 800b508:	f04f 0c0a 	mov.w	ip, #10
 800b50c:	4621      	mov	r1, r4
 800b50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b512:	3b30      	subs	r3, #48	; 0x30
 800b514:	2b09      	cmp	r3, #9
 800b516:	d94e      	bls.n	800b5b6 <_svfiprintf_r+0x17e>
 800b518:	b1b0      	cbz	r0, 800b548 <_svfiprintf_r+0x110>
 800b51a:	9207      	str	r2, [sp, #28]
 800b51c:	e014      	b.n	800b548 <_svfiprintf_r+0x110>
 800b51e:	eba0 0308 	sub.w	r3, r0, r8
 800b522:	fa09 f303 	lsl.w	r3, r9, r3
 800b526:	4313      	orrs	r3, r2
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	46a2      	mov	sl, r4
 800b52c:	e7d2      	b.n	800b4d4 <_svfiprintf_r+0x9c>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	1d19      	adds	r1, r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	9103      	str	r1, [sp, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	bfbb      	ittet	lt
 800b53a:	425b      	neglt	r3, r3
 800b53c:	f042 0202 	orrlt.w	r2, r2, #2
 800b540:	9307      	strge	r3, [sp, #28]
 800b542:	9307      	strlt	r3, [sp, #28]
 800b544:	bfb8      	it	lt
 800b546:	9204      	strlt	r2, [sp, #16]
 800b548:	7823      	ldrb	r3, [r4, #0]
 800b54a:	2b2e      	cmp	r3, #46	; 0x2e
 800b54c:	d10c      	bne.n	800b568 <_svfiprintf_r+0x130>
 800b54e:	7863      	ldrb	r3, [r4, #1]
 800b550:	2b2a      	cmp	r3, #42	; 0x2a
 800b552:	d135      	bne.n	800b5c0 <_svfiprintf_r+0x188>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	1d1a      	adds	r2, r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	9203      	str	r2, [sp, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb8      	it	lt
 800b560:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b564:	3402      	adds	r4, #2
 800b566:	9305      	str	r3, [sp, #20]
 800b568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b634 <_svfiprintf_r+0x1fc>
 800b56c:	7821      	ldrb	r1, [r4, #0]
 800b56e:	2203      	movs	r2, #3
 800b570:	4650      	mov	r0, sl
 800b572:	f7f4 fe6d 	bl	8000250 <memchr>
 800b576:	b140      	cbz	r0, 800b58a <_svfiprintf_r+0x152>
 800b578:	2340      	movs	r3, #64	; 0x40
 800b57a:	eba0 000a 	sub.w	r0, r0, sl
 800b57e:	fa03 f000 	lsl.w	r0, r3, r0
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	4303      	orrs	r3, r0
 800b586:	3401      	adds	r4, #1
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58e:	4826      	ldr	r0, [pc, #152]	; (800b628 <_svfiprintf_r+0x1f0>)
 800b590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b594:	2206      	movs	r2, #6
 800b596:	f7f4 fe5b 	bl	8000250 <memchr>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d038      	beq.n	800b610 <_svfiprintf_r+0x1d8>
 800b59e:	4b23      	ldr	r3, [pc, #140]	; (800b62c <_svfiprintf_r+0x1f4>)
 800b5a0:	bb1b      	cbnz	r3, 800b5ea <_svfiprintf_r+0x1b2>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	3307      	adds	r3, #7
 800b5a6:	f023 0307 	bic.w	r3, r3, #7
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	9303      	str	r3, [sp, #12]
 800b5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b0:	4433      	add	r3, r6
 800b5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b4:	e767      	b.n	800b486 <_svfiprintf_r+0x4e>
 800b5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	2001      	movs	r0, #1
 800b5be:	e7a5      	b.n	800b50c <_svfiprintf_r+0xd4>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	3401      	adds	r4, #1
 800b5c4:	9305      	str	r3, [sp, #20]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	f04f 0c0a 	mov.w	ip, #10
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d2:	3a30      	subs	r2, #48	; 0x30
 800b5d4:	2a09      	cmp	r2, #9
 800b5d6:	d903      	bls.n	800b5e0 <_svfiprintf_r+0x1a8>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0c5      	beq.n	800b568 <_svfiprintf_r+0x130>
 800b5dc:	9105      	str	r1, [sp, #20]
 800b5de:	e7c3      	b.n	800b568 <_svfiprintf_r+0x130>
 800b5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e7f0      	b.n	800b5cc <_svfiprintf_r+0x194>
 800b5ea:	ab03      	add	r3, sp, #12
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <_svfiprintf_r+0x1f8>)
 800b5f2:	a904      	add	r1, sp, #16
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7fc fa1f 	bl	8007a38 <_printf_float>
 800b5fa:	1c42      	adds	r2, r0, #1
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	d1d6      	bne.n	800b5ae <_svfiprintf_r+0x176>
 800b600:	89ab      	ldrh	r3, [r5, #12]
 800b602:	065b      	lsls	r3, r3, #25
 800b604:	f53f af2c 	bmi.w	800b460 <_svfiprintf_r+0x28>
 800b608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b60a:	b01d      	add	sp, #116	; 0x74
 800b60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b610:	ab03      	add	r3, sp, #12
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	462a      	mov	r2, r5
 800b616:	4b06      	ldr	r3, [pc, #24]	; (800b630 <_svfiprintf_r+0x1f8>)
 800b618:	a904      	add	r1, sp, #16
 800b61a:	4638      	mov	r0, r7
 800b61c:	f7fc fc98 	bl	8007f50 <_printf_i>
 800b620:	e7eb      	b.n	800b5fa <_svfiprintf_r+0x1c2>
 800b622:	bf00      	nop
 800b624:	0800c304 	.word	0x0800c304
 800b628:	0800c30e 	.word	0x0800c30e
 800b62c:	08007a39 	.word	0x08007a39
 800b630:	0800b381 	.word	0x0800b381
 800b634:	0800c30a 	.word	0x0800c30a

0800b638 <_read_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4d07      	ldr	r5, [pc, #28]	; (800b658 <_read_r+0x20>)
 800b63c:	4604      	mov	r4, r0
 800b63e:	4608      	mov	r0, r1
 800b640:	4611      	mov	r1, r2
 800b642:	2200      	movs	r2, #0
 800b644:	602a      	str	r2, [r5, #0]
 800b646:	461a      	mov	r2, r3
 800b648:	f7f5 ff56 	bl	80014f8 <_read>
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d102      	bne.n	800b656 <_read_r+0x1e>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	b103      	cbz	r3, 800b656 <_read_r+0x1e>
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	20004d84 	.word	0x20004d84
 800b65c:	00000000 	.word	0x00000000

0800b660 <nan>:
 800b660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b668 <nan+0x8>
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	00000000 	.word	0x00000000
 800b66c:	7ff80000 	.word	0x7ff80000

0800b670 <strncmp>:
 800b670:	b510      	push	{r4, lr}
 800b672:	b17a      	cbz	r2, 800b694 <strncmp+0x24>
 800b674:	4603      	mov	r3, r0
 800b676:	3901      	subs	r1, #1
 800b678:	1884      	adds	r4, r0, r2
 800b67a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b67e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b682:	4290      	cmp	r0, r2
 800b684:	d101      	bne.n	800b68a <strncmp+0x1a>
 800b686:	42a3      	cmp	r3, r4
 800b688:	d101      	bne.n	800b68e <strncmp+0x1e>
 800b68a:	1a80      	subs	r0, r0, r2
 800b68c:	bd10      	pop	{r4, pc}
 800b68e:	2800      	cmp	r0, #0
 800b690:	d1f3      	bne.n	800b67a <strncmp+0xa>
 800b692:	e7fa      	b.n	800b68a <strncmp+0x1a>
 800b694:	4610      	mov	r0, r2
 800b696:	e7f9      	b.n	800b68c <strncmp+0x1c>

0800b698 <__ascii_wctomb>:
 800b698:	b149      	cbz	r1, 800b6ae <__ascii_wctomb+0x16>
 800b69a:	2aff      	cmp	r2, #255	; 0xff
 800b69c:	bf85      	ittet	hi
 800b69e:	238a      	movhi	r3, #138	; 0x8a
 800b6a0:	6003      	strhi	r3, [r0, #0]
 800b6a2:	700a      	strbls	r2, [r1, #0]
 800b6a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b6a8:	bf98      	it	ls
 800b6aa:	2001      	movls	r0, #1
 800b6ac:	4770      	bx	lr
 800b6ae:	4608      	mov	r0, r1
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <__assert_func>:
 800b6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <__assert_func+0x2c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4605      	mov	r5, r0
 800b6c0:	68d8      	ldr	r0, [r3, #12]
 800b6c2:	b14c      	cbz	r4, 800b6d8 <__assert_func+0x24>
 800b6c4:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <__assert_func+0x30>)
 800b6c6:	9100      	str	r1, [sp, #0]
 800b6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6cc:	4906      	ldr	r1, [pc, #24]	; (800b6e8 <__assert_func+0x34>)
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f000 f80e 	bl	800b6f0 <fiprintf>
 800b6d4:	f000 fa80 	bl	800bbd8 <abort>
 800b6d8:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <__assert_func+0x38>)
 800b6da:	461c      	mov	r4, r3
 800b6dc:	e7f3      	b.n	800b6c6 <__assert_func+0x12>
 800b6de:	bf00      	nop
 800b6e0:	20000010 	.word	0x20000010
 800b6e4:	0800c315 	.word	0x0800c315
 800b6e8:	0800c322 	.word	0x0800c322
 800b6ec:	0800c350 	.word	0x0800c350

0800b6f0 <fiprintf>:
 800b6f0:	b40e      	push	{r1, r2, r3}
 800b6f2:	b503      	push	{r0, r1, lr}
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	4805      	ldr	r0, [pc, #20]	; (800b710 <fiprintf+0x20>)
 800b6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fe:	6800      	ldr	r0, [r0, #0]
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	f000 f879 	bl	800b7f8 <_vfiprintf_r>
 800b706:	b002      	add	sp, #8
 800b708:	f85d eb04 	ldr.w	lr, [sp], #4
 800b70c:	b003      	add	sp, #12
 800b70e:	4770      	bx	lr
 800b710:	20000010 	.word	0x20000010

0800b714 <memmove>:
 800b714:	4288      	cmp	r0, r1
 800b716:	b510      	push	{r4, lr}
 800b718:	eb01 0402 	add.w	r4, r1, r2
 800b71c:	d902      	bls.n	800b724 <memmove+0x10>
 800b71e:	4284      	cmp	r4, r0
 800b720:	4623      	mov	r3, r4
 800b722:	d807      	bhi.n	800b734 <memmove+0x20>
 800b724:	1e43      	subs	r3, r0, #1
 800b726:	42a1      	cmp	r1, r4
 800b728:	d008      	beq.n	800b73c <memmove+0x28>
 800b72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b732:	e7f8      	b.n	800b726 <memmove+0x12>
 800b734:	4402      	add	r2, r0
 800b736:	4601      	mov	r1, r0
 800b738:	428a      	cmp	r2, r1
 800b73a:	d100      	bne.n	800b73e <memmove+0x2a>
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b746:	e7f7      	b.n	800b738 <memmove+0x24>

0800b748 <_realloc_r>:
 800b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74c:	4680      	mov	r8, r0
 800b74e:	4614      	mov	r4, r2
 800b750:	460e      	mov	r6, r1
 800b752:	b921      	cbnz	r1, 800b75e <_realloc_r+0x16>
 800b754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	4611      	mov	r1, r2
 800b75a:	f7fc b869 	b.w	8007830 <_malloc_r>
 800b75e:	b92a      	cbnz	r2, 800b76c <_realloc_r+0x24>
 800b760:	f7ff fdc2 	bl	800b2e8 <_free_r>
 800b764:	4625      	mov	r5, r4
 800b766:	4628      	mov	r0, r5
 800b768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b76c:	f000 faa0 	bl	800bcb0 <_malloc_usable_size_r>
 800b770:	4284      	cmp	r4, r0
 800b772:	4607      	mov	r7, r0
 800b774:	d802      	bhi.n	800b77c <_realloc_r+0x34>
 800b776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b77a:	d812      	bhi.n	800b7a2 <_realloc_r+0x5a>
 800b77c:	4621      	mov	r1, r4
 800b77e:	4640      	mov	r0, r8
 800b780:	f7fc f856 	bl	8007830 <_malloc_r>
 800b784:	4605      	mov	r5, r0
 800b786:	2800      	cmp	r0, #0
 800b788:	d0ed      	beq.n	800b766 <_realloc_r+0x1e>
 800b78a:	42bc      	cmp	r4, r7
 800b78c:	4622      	mov	r2, r4
 800b78e:	4631      	mov	r1, r6
 800b790:	bf28      	it	cs
 800b792:	463a      	movcs	r2, r7
 800b794:	f7fc f815 	bl	80077c2 <memcpy>
 800b798:	4631      	mov	r1, r6
 800b79a:	4640      	mov	r0, r8
 800b79c:	f7ff fda4 	bl	800b2e8 <_free_r>
 800b7a0:	e7e1      	b.n	800b766 <_realloc_r+0x1e>
 800b7a2:	4635      	mov	r5, r6
 800b7a4:	e7df      	b.n	800b766 <_realloc_r+0x1e>

0800b7a6 <__sfputc_r>:
 800b7a6:	6893      	ldr	r3, [r2, #8]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	b410      	push	{r4}
 800b7ae:	6093      	str	r3, [r2, #8]
 800b7b0:	da08      	bge.n	800b7c4 <__sfputc_r+0x1e>
 800b7b2:	6994      	ldr	r4, [r2, #24]
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	db01      	blt.n	800b7bc <__sfputc_r+0x16>
 800b7b8:	290a      	cmp	r1, #10
 800b7ba:	d103      	bne.n	800b7c4 <__sfputc_r+0x1e>
 800b7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7c0:	f000 b94a 	b.w	800ba58 <__swbuf_r>
 800b7c4:	6813      	ldr	r3, [r2, #0]
 800b7c6:	1c58      	adds	r0, r3, #1
 800b7c8:	6010      	str	r0, [r2, #0]
 800b7ca:	7019      	strb	r1, [r3, #0]
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <__sfputs_r>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	460f      	mov	r7, r1
 800b7da:	4614      	mov	r4, r2
 800b7dc:	18d5      	adds	r5, r2, r3
 800b7de:	42ac      	cmp	r4, r5
 800b7e0:	d101      	bne.n	800b7e6 <__sfputs_r+0x12>
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	e007      	b.n	800b7f6 <__sfputs_r+0x22>
 800b7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ea:	463a      	mov	r2, r7
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f7ff ffda 	bl	800b7a6 <__sfputc_r>
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	d1f3      	bne.n	800b7de <__sfputs_r+0xa>
 800b7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7f8 <_vfiprintf_r>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	460d      	mov	r5, r1
 800b7fe:	b09d      	sub	sp, #116	; 0x74
 800b800:	4614      	mov	r4, r2
 800b802:	4698      	mov	r8, r3
 800b804:	4606      	mov	r6, r0
 800b806:	b118      	cbz	r0, 800b810 <_vfiprintf_r+0x18>
 800b808:	6983      	ldr	r3, [r0, #24]
 800b80a:	b90b      	cbnz	r3, 800b810 <_vfiprintf_r+0x18>
 800b80c:	f7fb ff14 	bl	8007638 <__sinit>
 800b810:	4b89      	ldr	r3, [pc, #548]	; (800ba38 <_vfiprintf_r+0x240>)
 800b812:	429d      	cmp	r5, r3
 800b814:	d11b      	bne.n	800b84e <_vfiprintf_r+0x56>
 800b816:	6875      	ldr	r5, [r6, #4]
 800b818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b81a:	07d9      	lsls	r1, r3, #31
 800b81c:	d405      	bmi.n	800b82a <_vfiprintf_r+0x32>
 800b81e:	89ab      	ldrh	r3, [r5, #12]
 800b820:	059a      	lsls	r2, r3, #22
 800b822:	d402      	bmi.n	800b82a <_vfiprintf_r+0x32>
 800b824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b826:	f7fb ffca 	bl	80077be <__retarget_lock_acquire_recursive>
 800b82a:	89ab      	ldrh	r3, [r5, #12]
 800b82c:	071b      	lsls	r3, r3, #28
 800b82e:	d501      	bpl.n	800b834 <_vfiprintf_r+0x3c>
 800b830:	692b      	ldr	r3, [r5, #16]
 800b832:	b9eb      	cbnz	r3, 800b870 <_vfiprintf_r+0x78>
 800b834:	4629      	mov	r1, r5
 800b836:	4630      	mov	r0, r6
 800b838:	f000 f960 	bl	800bafc <__swsetup_r>
 800b83c:	b1c0      	cbz	r0, 800b870 <_vfiprintf_r+0x78>
 800b83e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b840:	07dc      	lsls	r4, r3, #31
 800b842:	d50e      	bpl.n	800b862 <_vfiprintf_r+0x6a>
 800b844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b848:	b01d      	add	sp, #116	; 0x74
 800b84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84e:	4b7b      	ldr	r3, [pc, #492]	; (800ba3c <_vfiprintf_r+0x244>)
 800b850:	429d      	cmp	r5, r3
 800b852:	d101      	bne.n	800b858 <_vfiprintf_r+0x60>
 800b854:	68b5      	ldr	r5, [r6, #8]
 800b856:	e7df      	b.n	800b818 <_vfiprintf_r+0x20>
 800b858:	4b79      	ldr	r3, [pc, #484]	; (800ba40 <_vfiprintf_r+0x248>)
 800b85a:	429d      	cmp	r5, r3
 800b85c:	bf08      	it	eq
 800b85e:	68f5      	ldreq	r5, [r6, #12]
 800b860:	e7da      	b.n	800b818 <_vfiprintf_r+0x20>
 800b862:	89ab      	ldrh	r3, [r5, #12]
 800b864:	0598      	lsls	r0, r3, #22
 800b866:	d4ed      	bmi.n	800b844 <_vfiprintf_r+0x4c>
 800b868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b86a:	f7fb ffa9 	bl	80077c0 <__retarget_lock_release_recursive>
 800b86e:	e7e9      	b.n	800b844 <_vfiprintf_r+0x4c>
 800b870:	2300      	movs	r3, #0
 800b872:	9309      	str	r3, [sp, #36]	; 0x24
 800b874:	2320      	movs	r3, #32
 800b876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b87a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b87e:	2330      	movs	r3, #48	; 0x30
 800b880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba44 <_vfiprintf_r+0x24c>
 800b884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b888:	f04f 0901 	mov.w	r9, #1
 800b88c:	4623      	mov	r3, r4
 800b88e:	469a      	mov	sl, r3
 800b890:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b894:	b10a      	cbz	r2, 800b89a <_vfiprintf_r+0xa2>
 800b896:	2a25      	cmp	r2, #37	; 0x25
 800b898:	d1f9      	bne.n	800b88e <_vfiprintf_r+0x96>
 800b89a:	ebba 0b04 	subs.w	fp, sl, r4
 800b89e:	d00b      	beq.n	800b8b8 <_vfiprintf_r+0xc0>
 800b8a0:	465b      	mov	r3, fp
 800b8a2:	4622      	mov	r2, r4
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff ff94 	bl	800b7d4 <__sfputs_r>
 800b8ac:	3001      	adds	r0, #1
 800b8ae:	f000 80aa 	beq.w	800ba06 <_vfiprintf_r+0x20e>
 800b8b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8b4:	445a      	add	r2, fp
 800b8b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 80a2 	beq.w	800ba06 <_vfiprintf_r+0x20e>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8cc:	f10a 0a01 	add.w	sl, sl, #1
 800b8d0:	9304      	str	r3, [sp, #16]
 800b8d2:	9307      	str	r3, [sp, #28]
 800b8d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b8da:	4654      	mov	r4, sl
 800b8dc:	2205      	movs	r2, #5
 800b8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e2:	4858      	ldr	r0, [pc, #352]	; (800ba44 <_vfiprintf_r+0x24c>)
 800b8e4:	f7f4 fcb4 	bl	8000250 <memchr>
 800b8e8:	9a04      	ldr	r2, [sp, #16]
 800b8ea:	b9d8      	cbnz	r0, 800b924 <_vfiprintf_r+0x12c>
 800b8ec:	06d1      	lsls	r1, r2, #27
 800b8ee:	bf44      	itt	mi
 800b8f0:	2320      	movmi	r3, #32
 800b8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8f6:	0713      	lsls	r3, r2, #28
 800b8f8:	bf44      	itt	mi
 800b8fa:	232b      	movmi	r3, #43	; 0x2b
 800b8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b900:	f89a 3000 	ldrb.w	r3, [sl]
 800b904:	2b2a      	cmp	r3, #42	; 0x2a
 800b906:	d015      	beq.n	800b934 <_vfiprintf_r+0x13c>
 800b908:	9a07      	ldr	r2, [sp, #28]
 800b90a:	4654      	mov	r4, sl
 800b90c:	2000      	movs	r0, #0
 800b90e:	f04f 0c0a 	mov.w	ip, #10
 800b912:	4621      	mov	r1, r4
 800b914:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b918:	3b30      	subs	r3, #48	; 0x30
 800b91a:	2b09      	cmp	r3, #9
 800b91c:	d94e      	bls.n	800b9bc <_vfiprintf_r+0x1c4>
 800b91e:	b1b0      	cbz	r0, 800b94e <_vfiprintf_r+0x156>
 800b920:	9207      	str	r2, [sp, #28]
 800b922:	e014      	b.n	800b94e <_vfiprintf_r+0x156>
 800b924:	eba0 0308 	sub.w	r3, r0, r8
 800b928:	fa09 f303 	lsl.w	r3, r9, r3
 800b92c:	4313      	orrs	r3, r2
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	46a2      	mov	sl, r4
 800b932:	e7d2      	b.n	800b8da <_vfiprintf_r+0xe2>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	1d19      	adds	r1, r3, #4
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	9103      	str	r1, [sp, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bfbb      	ittet	lt
 800b940:	425b      	neglt	r3, r3
 800b942:	f042 0202 	orrlt.w	r2, r2, #2
 800b946:	9307      	strge	r3, [sp, #28]
 800b948:	9307      	strlt	r3, [sp, #28]
 800b94a:	bfb8      	it	lt
 800b94c:	9204      	strlt	r2, [sp, #16]
 800b94e:	7823      	ldrb	r3, [r4, #0]
 800b950:	2b2e      	cmp	r3, #46	; 0x2e
 800b952:	d10c      	bne.n	800b96e <_vfiprintf_r+0x176>
 800b954:	7863      	ldrb	r3, [r4, #1]
 800b956:	2b2a      	cmp	r3, #42	; 0x2a
 800b958:	d135      	bne.n	800b9c6 <_vfiprintf_r+0x1ce>
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	1d1a      	adds	r2, r3, #4
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	9203      	str	r2, [sp, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	bfb8      	it	lt
 800b966:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b96a:	3402      	adds	r4, #2
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba54 <_vfiprintf_r+0x25c>
 800b972:	7821      	ldrb	r1, [r4, #0]
 800b974:	2203      	movs	r2, #3
 800b976:	4650      	mov	r0, sl
 800b978:	f7f4 fc6a 	bl	8000250 <memchr>
 800b97c:	b140      	cbz	r0, 800b990 <_vfiprintf_r+0x198>
 800b97e:	2340      	movs	r3, #64	; 0x40
 800b980:	eba0 000a 	sub.w	r0, r0, sl
 800b984:	fa03 f000 	lsl.w	r0, r3, r0
 800b988:	9b04      	ldr	r3, [sp, #16]
 800b98a:	4303      	orrs	r3, r0
 800b98c:	3401      	adds	r4, #1
 800b98e:	9304      	str	r3, [sp, #16]
 800b990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b994:	482c      	ldr	r0, [pc, #176]	; (800ba48 <_vfiprintf_r+0x250>)
 800b996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b99a:	2206      	movs	r2, #6
 800b99c:	f7f4 fc58 	bl	8000250 <memchr>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d03f      	beq.n	800ba24 <_vfiprintf_r+0x22c>
 800b9a4:	4b29      	ldr	r3, [pc, #164]	; (800ba4c <_vfiprintf_r+0x254>)
 800b9a6:	bb1b      	cbnz	r3, 800b9f0 <_vfiprintf_r+0x1f8>
 800b9a8:	9b03      	ldr	r3, [sp, #12]
 800b9aa:	3307      	adds	r3, #7
 800b9ac:	f023 0307 	bic.w	r3, r3, #7
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	9303      	str	r3, [sp, #12]
 800b9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b6:	443b      	add	r3, r7
 800b9b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ba:	e767      	b.n	800b88c <_vfiprintf_r+0x94>
 800b9bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	2001      	movs	r0, #1
 800b9c4:	e7a5      	b.n	800b912 <_vfiprintf_r+0x11a>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	3401      	adds	r4, #1
 800b9ca:	9305      	str	r3, [sp, #20]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	f04f 0c0a 	mov.w	ip, #10
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9d8:	3a30      	subs	r2, #48	; 0x30
 800b9da:	2a09      	cmp	r2, #9
 800b9dc:	d903      	bls.n	800b9e6 <_vfiprintf_r+0x1ee>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0c5      	beq.n	800b96e <_vfiprintf_r+0x176>
 800b9e2:	9105      	str	r1, [sp, #20]
 800b9e4:	e7c3      	b.n	800b96e <_vfiprintf_r+0x176>
 800b9e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e7f0      	b.n	800b9d2 <_vfiprintf_r+0x1da>
 800b9f0:	ab03      	add	r3, sp, #12
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <_vfiprintf_r+0x258>)
 800b9f8:	a904      	add	r1, sp, #16
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7fc f81c 	bl	8007a38 <_printf_float>
 800ba00:	4607      	mov	r7, r0
 800ba02:	1c78      	adds	r0, r7, #1
 800ba04:	d1d6      	bne.n	800b9b4 <_vfiprintf_r+0x1bc>
 800ba06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba08:	07d9      	lsls	r1, r3, #31
 800ba0a:	d405      	bmi.n	800ba18 <_vfiprintf_r+0x220>
 800ba0c:	89ab      	ldrh	r3, [r5, #12]
 800ba0e:	059a      	lsls	r2, r3, #22
 800ba10:	d402      	bmi.n	800ba18 <_vfiprintf_r+0x220>
 800ba12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba14:	f7fb fed4 	bl	80077c0 <__retarget_lock_release_recursive>
 800ba18:	89ab      	ldrh	r3, [r5, #12]
 800ba1a:	065b      	lsls	r3, r3, #25
 800ba1c:	f53f af12 	bmi.w	800b844 <_vfiprintf_r+0x4c>
 800ba20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba22:	e711      	b.n	800b848 <_vfiprintf_r+0x50>
 800ba24:	ab03      	add	r3, sp, #12
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	462a      	mov	r2, r5
 800ba2a:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <_vfiprintf_r+0x258>)
 800ba2c:	a904      	add	r1, sp, #16
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7fc fa8e 	bl	8007f50 <_printf_i>
 800ba34:	e7e4      	b.n	800ba00 <_vfiprintf_r+0x208>
 800ba36:	bf00      	nop
 800ba38:	0800bed0 	.word	0x0800bed0
 800ba3c:	0800bef0 	.word	0x0800bef0
 800ba40:	0800beb0 	.word	0x0800beb0
 800ba44:	0800c304 	.word	0x0800c304
 800ba48:	0800c30e 	.word	0x0800c30e
 800ba4c:	08007a39 	.word	0x08007a39
 800ba50:	0800b7d5 	.word	0x0800b7d5
 800ba54:	0800c30a 	.word	0x0800c30a

0800ba58 <__swbuf_r>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	460e      	mov	r6, r1
 800ba5c:	4614      	mov	r4, r2
 800ba5e:	4605      	mov	r5, r0
 800ba60:	b118      	cbz	r0, 800ba6a <__swbuf_r+0x12>
 800ba62:	6983      	ldr	r3, [r0, #24]
 800ba64:	b90b      	cbnz	r3, 800ba6a <__swbuf_r+0x12>
 800ba66:	f7fb fde7 	bl	8007638 <__sinit>
 800ba6a:	4b21      	ldr	r3, [pc, #132]	; (800baf0 <__swbuf_r+0x98>)
 800ba6c:	429c      	cmp	r4, r3
 800ba6e:	d12b      	bne.n	800bac8 <__swbuf_r+0x70>
 800ba70:	686c      	ldr	r4, [r5, #4]
 800ba72:	69a3      	ldr	r3, [r4, #24]
 800ba74:	60a3      	str	r3, [r4, #8]
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	071a      	lsls	r2, r3, #28
 800ba7a:	d52f      	bpl.n	800badc <__swbuf_r+0x84>
 800ba7c:	6923      	ldr	r3, [r4, #16]
 800ba7e:	b36b      	cbz	r3, 800badc <__swbuf_r+0x84>
 800ba80:	6923      	ldr	r3, [r4, #16]
 800ba82:	6820      	ldr	r0, [r4, #0]
 800ba84:	1ac0      	subs	r0, r0, r3
 800ba86:	6963      	ldr	r3, [r4, #20]
 800ba88:	b2f6      	uxtb	r6, r6
 800ba8a:	4283      	cmp	r3, r0
 800ba8c:	4637      	mov	r7, r6
 800ba8e:	dc04      	bgt.n	800ba9a <__swbuf_r+0x42>
 800ba90:	4621      	mov	r1, r4
 800ba92:	4628      	mov	r0, r5
 800ba94:	f7fe fb6c 	bl	800a170 <_fflush_r>
 800ba98:	bb30      	cbnz	r0, 800bae8 <__swbuf_r+0x90>
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	60a3      	str	r3, [r4, #8]
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	6022      	str	r2, [r4, #0]
 800baa6:	701e      	strb	r6, [r3, #0]
 800baa8:	6963      	ldr	r3, [r4, #20]
 800baaa:	3001      	adds	r0, #1
 800baac:	4283      	cmp	r3, r0
 800baae:	d004      	beq.n	800baba <__swbuf_r+0x62>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	07db      	lsls	r3, r3, #31
 800bab4:	d506      	bpl.n	800bac4 <__swbuf_r+0x6c>
 800bab6:	2e0a      	cmp	r6, #10
 800bab8:	d104      	bne.n	800bac4 <__swbuf_r+0x6c>
 800baba:	4621      	mov	r1, r4
 800babc:	4628      	mov	r0, r5
 800babe:	f7fe fb57 	bl	800a170 <_fflush_r>
 800bac2:	b988      	cbnz	r0, 800bae8 <__swbuf_r+0x90>
 800bac4:	4638      	mov	r0, r7
 800bac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bac8:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <__swbuf_r+0x9c>)
 800baca:	429c      	cmp	r4, r3
 800bacc:	d101      	bne.n	800bad2 <__swbuf_r+0x7a>
 800bace:	68ac      	ldr	r4, [r5, #8]
 800bad0:	e7cf      	b.n	800ba72 <__swbuf_r+0x1a>
 800bad2:	4b09      	ldr	r3, [pc, #36]	; (800baf8 <__swbuf_r+0xa0>)
 800bad4:	429c      	cmp	r4, r3
 800bad6:	bf08      	it	eq
 800bad8:	68ec      	ldreq	r4, [r5, #12]
 800bada:	e7ca      	b.n	800ba72 <__swbuf_r+0x1a>
 800badc:	4621      	mov	r1, r4
 800bade:	4628      	mov	r0, r5
 800bae0:	f000 f80c 	bl	800bafc <__swsetup_r>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d0cb      	beq.n	800ba80 <__swbuf_r+0x28>
 800bae8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800baec:	e7ea      	b.n	800bac4 <__swbuf_r+0x6c>
 800baee:	bf00      	nop
 800baf0:	0800bed0 	.word	0x0800bed0
 800baf4:	0800bef0 	.word	0x0800bef0
 800baf8:	0800beb0 	.word	0x0800beb0

0800bafc <__swsetup_r>:
 800bafc:	4b32      	ldr	r3, [pc, #200]	; (800bbc8 <__swsetup_r+0xcc>)
 800bafe:	b570      	push	{r4, r5, r6, lr}
 800bb00:	681d      	ldr	r5, [r3, #0]
 800bb02:	4606      	mov	r6, r0
 800bb04:	460c      	mov	r4, r1
 800bb06:	b125      	cbz	r5, 800bb12 <__swsetup_r+0x16>
 800bb08:	69ab      	ldr	r3, [r5, #24]
 800bb0a:	b913      	cbnz	r3, 800bb12 <__swsetup_r+0x16>
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f7fb fd93 	bl	8007638 <__sinit>
 800bb12:	4b2e      	ldr	r3, [pc, #184]	; (800bbcc <__swsetup_r+0xd0>)
 800bb14:	429c      	cmp	r4, r3
 800bb16:	d10f      	bne.n	800bb38 <__swsetup_r+0x3c>
 800bb18:	686c      	ldr	r4, [r5, #4]
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb20:	0719      	lsls	r1, r3, #28
 800bb22:	d42c      	bmi.n	800bb7e <__swsetup_r+0x82>
 800bb24:	06dd      	lsls	r5, r3, #27
 800bb26:	d411      	bmi.n	800bb4c <__swsetup_r+0x50>
 800bb28:	2309      	movs	r3, #9
 800bb2a:	6033      	str	r3, [r6, #0]
 800bb2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb36:	e03e      	b.n	800bbb6 <__swsetup_r+0xba>
 800bb38:	4b25      	ldr	r3, [pc, #148]	; (800bbd0 <__swsetup_r+0xd4>)
 800bb3a:	429c      	cmp	r4, r3
 800bb3c:	d101      	bne.n	800bb42 <__swsetup_r+0x46>
 800bb3e:	68ac      	ldr	r4, [r5, #8]
 800bb40:	e7eb      	b.n	800bb1a <__swsetup_r+0x1e>
 800bb42:	4b24      	ldr	r3, [pc, #144]	; (800bbd4 <__swsetup_r+0xd8>)
 800bb44:	429c      	cmp	r4, r3
 800bb46:	bf08      	it	eq
 800bb48:	68ec      	ldreq	r4, [r5, #12]
 800bb4a:	e7e6      	b.n	800bb1a <__swsetup_r+0x1e>
 800bb4c:	0758      	lsls	r0, r3, #29
 800bb4e:	d512      	bpl.n	800bb76 <__swsetup_r+0x7a>
 800bb50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb52:	b141      	cbz	r1, 800bb66 <__swsetup_r+0x6a>
 800bb54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb58:	4299      	cmp	r1, r3
 800bb5a:	d002      	beq.n	800bb62 <__swsetup_r+0x66>
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7ff fbc3 	bl	800b2e8 <_free_r>
 800bb62:	2300      	movs	r3, #0
 800bb64:	6363      	str	r3, [r4, #52]	; 0x34
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb6c:	81a3      	strh	r3, [r4, #12]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6063      	str	r3, [r4, #4]
 800bb72:	6923      	ldr	r3, [r4, #16]
 800bb74:	6023      	str	r3, [r4, #0]
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	f043 0308 	orr.w	r3, r3, #8
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	b94b      	cbnz	r3, 800bb96 <__swsetup_r+0x9a>
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb8c:	d003      	beq.n	800bb96 <__swsetup_r+0x9a>
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4630      	mov	r0, r6
 800bb92:	f000 f84d 	bl	800bc30 <__smakebuf_r>
 800bb96:	89a0      	ldrh	r0, [r4, #12]
 800bb98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb9c:	f010 0301 	ands.w	r3, r0, #1
 800bba0:	d00a      	beq.n	800bbb8 <__swsetup_r+0xbc>
 800bba2:	2300      	movs	r3, #0
 800bba4:	60a3      	str	r3, [r4, #8]
 800bba6:	6963      	ldr	r3, [r4, #20]
 800bba8:	425b      	negs	r3, r3
 800bbaa:	61a3      	str	r3, [r4, #24]
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	b943      	cbnz	r3, 800bbc2 <__swsetup_r+0xc6>
 800bbb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbb4:	d1ba      	bne.n	800bb2c <__swsetup_r+0x30>
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	0781      	lsls	r1, r0, #30
 800bbba:	bf58      	it	pl
 800bbbc:	6963      	ldrpl	r3, [r4, #20]
 800bbbe:	60a3      	str	r3, [r4, #8]
 800bbc0:	e7f4      	b.n	800bbac <__swsetup_r+0xb0>
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	e7f7      	b.n	800bbb6 <__swsetup_r+0xba>
 800bbc6:	bf00      	nop
 800bbc8:	20000010 	.word	0x20000010
 800bbcc:	0800bed0 	.word	0x0800bed0
 800bbd0:	0800bef0 	.word	0x0800bef0
 800bbd4:	0800beb0 	.word	0x0800beb0

0800bbd8 <abort>:
 800bbd8:	b508      	push	{r3, lr}
 800bbda:	2006      	movs	r0, #6
 800bbdc:	f000 f898 	bl	800bd10 <raise>
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	f7f5 fc7f 	bl	80014e4 <_exit>

0800bbe6 <__swhatbuf_r>:
 800bbe6:	b570      	push	{r4, r5, r6, lr}
 800bbe8:	460e      	mov	r6, r1
 800bbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	b096      	sub	sp, #88	; 0x58
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	461d      	mov	r5, r3
 800bbf6:	da08      	bge.n	800bc0a <__swhatbuf_r+0x24>
 800bbf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	602a      	str	r2, [r5, #0]
 800bc00:	061a      	lsls	r2, r3, #24
 800bc02:	d410      	bmi.n	800bc26 <__swhatbuf_r+0x40>
 800bc04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc08:	e00e      	b.n	800bc28 <__swhatbuf_r+0x42>
 800bc0a:	466a      	mov	r2, sp
 800bc0c:	f000 f89c 	bl	800bd48 <_fstat_r>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	dbf1      	blt.n	800bbf8 <__swhatbuf_r+0x12>
 800bc14:	9a01      	ldr	r2, [sp, #4]
 800bc16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc1e:	425a      	negs	r2, r3
 800bc20:	415a      	adcs	r2, r3
 800bc22:	602a      	str	r2, [r5, #0]
 800bc24:	e7ee      	b.n	800bc04 <__swhatbuf_r+0x1e>
 800bc26:	2340      	movs	r3, #64	; 0x40
 800bc28:	2000      	movs	r0, #0
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	b016      	add	sp, #88	; 0x58
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}

0800bc30 <__smakebuf_r>:
 800bc30:	898b      	ldrh	r3, [r1, #12]
 800bc32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc34:	079d      	lsls	r5, r3, #30
 800bc36:	4606      	mov	r6, r0
 800bc38:	460c      	mov	r4, r1
 800bc3a:	d507      	bpl.n	800bc4c <__smakebuf_r+0x1c>
 800bc3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	6123      	str	r3, [r4, #16]
 800bc44:	2301      	movs	r3, #1
 800bc46:	6163      	str	r3, [r4, #20]
 800bc48:	b002      	add	sp, #8
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	ab01      	add	r3, sp, #4
 800bc4e:	466a      	mov	r2, sp
 800bc50:	f7ff ffc9 	bl	800bbe6 <__swhatbuf_r>
 800bc54:	9900      	ldr	r1, [sp, #0]
 800bc56:	4605      	mov	r5, r0
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7fb fde9 	bl	8007830 <_malloc_r>
 800bc5e:	b948      	cbnz	r0, 800bc74 <__smakebuf_r+0x44>
 800bc60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc64:	059a      	lsls	r2, r3, #22
 800bc66:	d4ef      	bmi.n	800bc48 <__smakebuf_r+0x18>
 800bc68:	f023 0303 	bic.w	r3, r3, #3
 800bc6c:	f043 0302 	orr.w	r3, r3, #2
 800bc70:	81a3      	strh	r3, [r4, #12]
 800bc72:	e7e3      	b.n	800bc3c <__smakebuf_r+0xc>
 800bc74:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <__smakebuf_r+0x7c>)
 800bc76:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc78:	89a3      	ldrh	r3, [r4, #12]
 800bc7a:	6020      	str	r0, [r4, #0]
 800bc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	9b00      	ldr	r3, [sp, #0]
 800bc84:	6163      	str	r3, [r4, #20]
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	6120      	str	r0, [r4, #16]
 800bc8a:	b15b      	cbz	r3, 800bca4 <__smakebuf_r+0x74>
 800bc8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc90:	4630      	mov	r0, r6
 800bc92:	f000 f86b 	bl	800bd6c <_isatty_r>
 800bc96:	b128      	cbz	r0, 800bca4 <__smakebuf_r+0x74>
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	f043 0301 	orr.w	r3, r3, #1
 800bca2:	81a3      	strh	r3, [r4, #12]
 800bca4:	89a0      	ldrh	r0, [r4, #12]
 800bca6:	4305      	orrs	r5, r0
 800bca8:	81a5      	strh	r5, [r4, #12]
 800bcaa:	e7cd      	b.n	800bc48 <__smakebuf_r+0x18>
 800bcac:	080075d1 	.word	0x080075d1

0800bcb0 <_malloc_usable_size_r>:
 800bcb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcb4:	1f18      	subs	r0, r3, #4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	bfbc      	itt	lt
 800bcba:	580b      	ldrlt	r3, [r1, r0]
 800bcbc:	18c0      	addlt	r0, r0, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_raise_r>:
 800bcc0:	291f      	cmp	r1, #31
 800bcc2:	b538      	push	{r3, r4, r5, lr}
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	d904      	bls.n	800bcd4 <_raise_r+0x14>
 800bcca:	2316      	movs	r3, #22
 800bccc:	6003      	str	r3, [r0, #0]
 800bcce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcd6:	b112      	cbz	r2, 800bcde <_raise_r+0x1e>
 800bcd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcdc:	b94b      	cbnz	r3, 800bcf2 <_raise_r+0x32>
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 f830 	bl	800bd44 <_getpid_r>
 800bce4:	462a      	mov	r2, r5
 800bce6:	4601      	mov	r1, r0
 800bce8:	4620      	mov	r0, r4
 800bcea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcee:	f000 b817 	b.w	800bd20 <_kill_r>
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d00a      	beq.n	800bd0c <_raise_r+0x4c>
 800bcf6:	1c59      	adds	r1, r3, #1
 800bcf8:	d103      	bne.n	800bd02 <_raise_r+0x42>
 800bcfa:	2316      	movs	r3, #22
 800bcfc:	6003      	str	r3, [r0, #0]
 800bcfe:	2001      	movs	r0, #1
 800bd00:	e7e7      	b.n	800bcd2 <_raise_r+0x12>
 800bd02:	2400      	movs	r4, #0
 800bd04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd08:	4628      	mov	r0, r5
 800bd0a:	4798      	blx	r3
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	e7e0      	b.n	800bcd2 <_raise_r+0x12>

0800bd10 <raise>:
 800bd10:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <raise+0xc>)
 800bd12:	4601      	mov	r1, r0
 800bd14:	6818      	ldr	r0, [r3, #0]
 800bd16:	f7ff bfd3 	b.w	800bcc0 <_raise_r>
 800bd1a:	bf00      	nop
 800bd1c:	20000010 	.word	0x20000010

0800bd20 <_kill_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4d07      	ldr	r5, [pc, #28]	; (800bd40 <_kill_r+0x20>)
 800bd24:	2300      	movs	r3, #0
 800bd26:	4604      	mov	r4, r0
 800bd28:	4608      	mov	r0, r1
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	602b      	str	r3, [r5, #0]
 800bd2e:	f7f5 fbc9 	bl	80014c4 <_kill>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	d102      	bne.n	800bd3c <_kill_r+0x1c>
 800bd36:	682b      	ldr	r3, [r5, #0]
 800bd38:	b103      	cbz	r3, 800bd3c <_kill_r+0x1c>
 800bd3a:	6023      	str	r3, [r4, #0]
 800bd3c:	bd38      	pop	{r3, r4, r5, pc}
 800bd3e:	bf00      	nop
 800bd40:	20004d84 	.word	0x20004d84

0800bd44 <_getpid_r>:
 800bd44:	f7f5 bbb6 	b.w	80014b4 <_getpid>

0800bd48 <_fstat_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	; (800bd68 <_fstat_r+0x20>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	f7f5 fc14 	bl	8001582 <_fstat>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d102      	bne.n	800bd64 <_fstat_r+0x1c>
 800bd5e:	682b      	ldr	r3, [r5, #0]
 800bd60:	b103      	cbz	r3, 800bd64 <_fstat_r+0x1c>
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	bd38      	pop	{r3, r4, r5, pc}
 800bd66:	bf00      	nop
 800bd68:	20004d84 	.word	0x20004d84

0800bd6c <_isatty_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d06      	ldr	r5, [pc, #24]	; (800bd88 <_isatty_r+0x1c>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	f7f5 fc13 	bl	80015a2 <_isatty>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_isatty_r+0x1a>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_isatty_r+0x1a>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	20004d84 	.word	0x20004d84

0800bd8c <_init>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr

0800bd98 <_fini>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr
