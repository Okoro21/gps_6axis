
imu_gps_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbe4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800bde8  0800bde8  0001bde8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c35c  0800c35c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c35c  0800c35c  0001c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c364  0800c364  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c364  0800c364  0001c364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c368  0800c368  0001c368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba4  200001e4  0800c550  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d88  0800c550  00024d88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f702  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f7  00000000  00000000  0003f914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00043310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00044af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6ea  00000000  00000000  00046178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c65c  00000000  00000000  00070862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001087d4  00000000  00000000  0008cebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007914  00000000  00000000  001956e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bdcc 	.word	0x0800bdcc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800bdcc 	.word	0x0800bdcc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <init_MPU_6050>:

	return i2c_success;
}

void init_MPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	/* create a parameter that determines the size of each array */
	uint8_t i2cTxBuffer[6] = {0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	2300      	movs	r3, #0
 80009ec:	82bb      	strh	r3, [r7, #20]
	uint8_t i2cRxBuffer[6] = {0};
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	2300      	movs	r3, #0
 80009f4:	81bb      	strh	r3, [r7, #12]

	my_mpu_6050->i2c_handle = i2c;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	601a      	str	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff = i2cTxBuffer;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f107 0210 	add.w	r2, r7, #16
 8000a02:	605a      	str	r2, [r3, #4]
	my_mpu_6050->i2c_rx_buff = i2cRxBuffer;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f107 0208 	add.w	r2, r7, #8
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <accel_Gyro_Config>:

/* Create another parameter that will allow user to
 * configure the full scale range of the accelerometer
 */
uint8_t accel_Gyro_Config(mpu_6050_t *my_mpu_6050)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t configSuccess = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
	uint8_t dlpfSet = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]

	/* Selecting the 8g full range scale for the accelerometer
	 * by writing AFS_SEL_8 to ACCEL_CONFIG register
	 */
	my_mpu_6050->i2c_tx_buff[0] = ACCEL_CONFIG;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	221c      	movs	r2, #28
 8000a2e:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = AFS_SEL_8;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	2210      	movs	r2, #16
 8000a38:	701a      	strb	r2, [r3, #0]

	/* Selecting the 250 degree/seconds full range scale for the gyro
	 * by writing FS_SEL_250 to GYRO_CONFIG register
	 */

	my_mpu_6050->i2c_tx_buff[2] = GYRO_CONFIG;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	221b      	movs	r2, #27
 8000a42:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[3] = FS_SEL_250;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	3303      	adds	r3, #3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]


	configSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 4, 100);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	21d0      	movs	r1, #208	; 0xd0
 8000a5e:	f001 f9cb 	bl	8001df8 <HAL_I2C_Master_Transmit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]

/* Enabling the digital low pass filter */

	my_mpu_6050->i2c_tx_buff[0] = CONFIG;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	221a      	movs	r2, #26
 8000a6c:	701a      	strb	r2, [r3, #0]
	my_mpu_6050->i2c_tx_buff[1] = (0x05U);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	2205      	movs	r2, #5
 8000a76:	701a      	strb	r2, [r3, #0]

	dlpfSet = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	21d0      	movs	r1, #208	; 0xd0
 8000a88:	f001 f9b6 	bl	8001df8 <HAL_I2C_Master_Transmit>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73bb      	strb	r3, [r7, #14]

return configSuccess;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <get_Accel>:

	return enableSuccess;
}

uint8_t get_Accel(mpu_6050_t *my_mpu_6050)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af02      	add	r7, sp, #8
 8000aa0:	6078      	str	r0, [r7, #4]
	/* flags that check if communication between i2c master and slave was successful */
	uint8_t i2c_Tx_flag = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = ACCEL_XOUT_H;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	223b      	movs	r2, #59	; 0x3b
 8000ab4:	701a      	strb	r2, [r3, #0]

	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 1000);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	21d0      	movs	r1, #208	; 0xd0
 8000ac8:	f001 f996 	bl	8001df8 <HAL_I2C_Master_Transmit>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73bb      	strb	r3, [r7, #14]


	/* Retrieve the acceleration values from 6 registers
	 * ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ACCEL_YOUT_L, ACCEL_ZOUT_H, ACCEL_ZOUT_L respectively
	 */
	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 1000);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2306      	movs	r3, #6
 8000ae0:	21d1      	movs	r1, #209	; 0xd1
 8000ae2:	f001 fa7d 	bl	8001fe0 <HAL_I2C_Master_Receive>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d104      	bne.n	8000afa <get_Accel+0x60>
 8000af0:	7b7b      	ldrb	r3, [r7, #13]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <get_Accel+0x60>
		i2c_success = HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]

	/* You are also supposed to check A0 Pin on MPU_6050 */

	return i2c_success;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	0000      	movs	r0, r0
	...

08000b08 <formatAccel>:

void formatAccel(mpu_6050_t *my_mpu_6050)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	my_mpu_6050->accelX = (int16_t)((my_mpu_6050->i2c_rx_buff[0] << 8) | my_mpu_6050->i2c_rx_buff[1]);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	819a      	strh	r2, [r3, #12]
	my_mpu_6050->aX =  ((float)(my_mpu_6050->accelX))/4096;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b3a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000bf0 <formatAccel+0xe8>
 8000b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Calibration value for acceleration in the x direction */
	//my_mpu_6050->aX-= 0.089;

	my_mpu_6050->accelY = (int16_t)((my_mpu_6050->i2c_rx_buff[2] << 8) | my_mpu_6050->i2c_rx_buff[3]);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	3303      	adds	r3, #3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	81da      	strh	r2, [r3, #14]
	my_mpu_6050->aY =  ((float)my_mpu_6050->accelY)/4096;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b74:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000bf0 <formatAccel+0xe8>
 8000b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Calibration value for acceleration in the y direction */
	//my_mpu_6050->aY += 1.05;

	my_mpu_6050->accelZ = (int16_t)((my_mpu_6050->i2c_rx_buff[4] << 8) | my_mpu_6050->i2c_rx_buff[5]);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	3304      	adds	r3, #4
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	3305      	adds	r3, #5
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	821a      	strh	r2, [r3, #16]
	my_mpu_6050->aZ =  ((float)my_mpu_6050->accelZ)/4096;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bae:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000bf0 <formatAccel+0xe8>
 8000bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Calibration value for acceleration in the z direction */
	my_mpu_6050->aZ += 0.1;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000be8 <formatAccel+0xe0>
 8000bca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	f3af 8000 	nop.w
 8000be8:	9999999a 	.word	0x9999999a
 8000bec:	3fb99999 	.word	0x3fb99999
 8000bf0:	45800000 	.word	0x45800000

08000bf4 <Tx_Accel>:

	return uart_tx_success;
}

void Tx_Accel(mpu_6050_t *my_mpu_6050, UART_HandleTypeDef *uartHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0a0      	sub	sp, #128	; 0x80
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	uint8_t uart_buff[100];
	uint8_t uart_len = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	uart_len = sprintf((char *)uart_buff, "aX: %.2f , aY: %.2f, aZ: %.2f\r\n", my_mpu_6050->aX, my_mpu_6050->aY, my_mpu_6050->aZ);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	edd3 6a07 	vldr	s13, [r3, #28]
 8000c1e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c22:	f107 0008 	add.w	r0, r7, #8
 8000c26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c2a:	ed8d 7b00 	vstr	d7, [sp]
 8000c2e:	ec53 2b15 	vmov	r2, r3, d5
 8000c32:	490b      	ldr	r1, [pc, #44]	; (8000c60 <Tx_Accel+0x6c>)
 8000c34:	f007 fd58 	bl	80086e8 <siprintf>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	HAL_UART_Transmit(uartHandle, uart_buff, uart_len, 100);
 8000c3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f107 0108 	add.w	r1, r7, #8
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f003 fa1c 	bl	8004088 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c54:	f000 fd5a 	bl	800170c <HAL_Delay>
}
 8000c58:	bf00      	nop
 8000c5a:	3770      	adds	r7, #112	; 0x70
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	0800bdf0 	.word	0x0800bdf0

08000c64 <set_Sample_Rt>:
//
//}


uint8_t set_Sample_Rt(mpu_6050_t *my_mpu_6050)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	6078      	str	r0, [r7, #4]
	uint8_t sampleSuccess = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = SMPRT_DIV;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2219      	movs	r2, #25
 8000c76:	701a      	strb	r2, [r3, #0]

	/* Divider == 8 therefore sampleRate of accelerometer and gryo = 8kHz/8 == 1kHz */
	my_mpu_6050->i2c_tx_buff[1] = 0x08U;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	2208      	movs	r2, #8
 8000c80:	701a      	strb	r2, [r3, #0]

	sampleSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2302      	movs	r3, #2
 8000c90:	21d0      	movs	r1, #208	; 0xd0
 8000c92:	f001 f8b1 	bl	8001df8 <HAL_I2C_Master_Transmit>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]

	return sampleSuccess;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <wake>:

uint8_t wake(mpu_6050_t *my_mpu_6050)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
	uint8_t wakeSuccess = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = PWR_MGMT_1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	226b      	movs	r2, #107	; 0x6b
 8000cb6:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = 0x00U;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]

	wakeSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2302      	movs	r3, #2
 8000cd0:	21d0      	movs	r1, #208	; 0xd0
 8000cd2:	f001 f891 	bl	8001df8 <HAL_I2C_Master_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]

	return wakeSuccess;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce8:	f000 fce3 	bl	80016b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cec:	f000 f838 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f000 f900 	bl	8000ef4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf4:	f000 f890 	bl	8000e18 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cf8:	f000 f8cc 	bl	8000e94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //init_MPU_6050(&my_mpu, &hi2c1);
  init_MPU_6050(&my_imu, &hi2c1);
 8000cfc:	4910      	ldr	r1, [pc, #64]	; (8000d40 <main+0x5c>)
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <main+0x60>)
 8000d00:	f7ff fe6c 	bl	80009dc <init_MPU_6050>

  wake(&my_imu);
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <main+0x60>)
 8000d06:	f7ff ffcd 	bl	8000ca4 <wake>

  set_Sample_Rt(&my_imu);
 8000d0a:	480e      	ldr	r0, [pc, #56]	; (8000d44 <main+0x60>)
 8000d0c:	f7ff ffaa 	bl	8000c64 <set_Sample_Rt>

  accel_Gyro_Config(&my_imu);
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <main+0x60>)
 8000d12:	f7ff fe81 	bl	8000a18 <accel_Gyro_Config>
//  fifo_Enable(&my_imu);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d16:	f003 fe5b 	bl	80049d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tx_Data */
  Tx_DataHandle = osThreadNew(Tx_A_G_Data, NULL, &Tx_Data_attributes);
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <main+0x64>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <main+0x68>)
 8000d20:	f003 fec0 	bl	8004aa4 <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <main+0x6c>)
 8000d28:	6013      	str	r3, [r2, #0]

  /* creation of getData */
  getDataHandle = osThreadNew(getA_G_Data, NULL, &getData_attributes);
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <main+0x70>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	480a      	ldr	r0, [pc, #40]	; (8000d58 <main+0x74>)
 8000d30:	f003 feb8 	bl	8004aa4 <osThreadNew>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <main+0x78>)
 8000d38:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d3a:	f003 fe7d 	bl	8004a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <main+0x5a>
 8000d40:	20000200 	.word	0x20000200
 8000d44:	200002e4 	.word	0x200002e4
 8000d48:	0800be58 	.word	0x0800be58
 8000d4c:	080010fd 	.word	0x080010fd
 8000d50:	200002dc 	.word	0x200002dc
 8000d54:	0800be7c 	.word	0x0800be7c
 8000d58:	08001145 	.word	0x08001145
 8000d5c:	200002e0 	.word	0x200002e0

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2234      	movs	r2, #52	; 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 fd55 	bl	800781e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <SystemClock_Config+0xb0>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <SystemClock_Config+0xb0>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <SystemClock_Config+0xb0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <SystemClock_Config+0xb4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <SystemClock_Config+0xb4>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <SystemClock_Config+0xb4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fd01 	bl	80027d4 <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000dd8:	f000 f9e2 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ddc:	230f      	movs	r3, #15
 8000dde:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 ff99 	bl	8002d30 <HAL_RCC_ClockConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e04:	f000 f9cc 	bl	80011a0 <Error_Handler>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3750      	adds	r7, #80	; 0x50
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40007000 	.word	0x40007000

08000e18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_I2C1_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e24:	f240 220b 	movw	r2, #523	; 0x20b
 8000e28:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e56:	f000 ff3f 	bl	8001cd8 <HAL_I2C_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e60:	f000 f99e 	bl	80011a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e68:	f001 fc1c 	bl	80026a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e72:	f000 f995 	bl	80011a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e7a:	f001 fc5e 	bl	800273a <HAL_I2CEx_ConfigDigitalFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e84:	f000 f98c 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000200 	.word	0x20000200
 8000e90:	40005400 	.word	0x40005400

08000e94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000e9a:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <MX_USART3_UART_Init+0x5c>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USART3_UART_Init+0x58>)
 8000ed8:	f003 f888 	bl	8003fec <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ee2:	f000 f95d 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000254 	.word	0x20000254
 8000ef0:	40004800 	.word	0x40004800

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b77      	ldr	r3, [pc, #476]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a76      	ldr	r2, [pc, #472]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b74      	ldr	r3, [pc, #464]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	4b71      	ldr	r3, [pc, #452]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a70      	ldr	r2, [pc, #448]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b6e      	ldr	r3, [pc, #440]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b6b      	ldr	r3, [pc, #428]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a6a      	ldr	r2, [pc, #424]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b65      	ldr	r3, [pc, #404]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a64      	ldr	r2, [pc, #400]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a5e      	ldr	r2, [pc, #376]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f82:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <MX_GPIO_Init+0x1f4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fa0:	4852      	ldr	r0, [pc, #328]	; (80010ec <MX_GPIO_Init+0x1f8>)
 8000fa2:	f000 fe65 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4851      	ldr	r0, [pc, #324]	; (80010f0 <MX_GPIO_Init+0x1fc>)
 8000fac:	f000 fe60 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	484b      	ldr	r0, [pc, #300]	; (80010f4 <MX_GPIO_Init+0x200>)
 8000fc8:	f000 fca6 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fcc:	2332      	movs	r3, #50	; 0x32
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fdc:	230b      	movs	r3, #11
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4843      	ldr	r0, [pc, #268]	; (80010f4 <MX_GPIO_Init+0x200>)
 8000fe8:	f000 fc96 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fec:	2386      	movs	r3, #134	; 0x86
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	483c      	ldr	r0, [pc, #240]	; (80010f8 <MX_GPIO_Init+0x204>)
 8001008:	f000 fc86 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800100c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4831      	ldr	r0, [pc, #196]	; (80010ec <MX_GPIO_Init+0x1f8>)
 8001026:	f000 fc77 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800102a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103c:	230b      	movs	r3, #11
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4829      	ldr	r0, [pc, #164]	; (80010ec <MX_GPIO_Init+0x1f8>)
 8001048:	f000 fc66 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800104c:	2340      	movs	r3, #64	; 0x40
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4823      	ldr	r0, [pc, #140]	; (80010f0 <MX_GPIO_Init+0x1fc>)
 8001064:	f000 fc58 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	481d      	ldr	r0, [pc, #116]	; (80010f0 <MX_GPIO_Init+0x1fc>)
 800107c:	f000 fc4c 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001080:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001092:	230a      	movs	r3, #10
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4816      	ldr	r0, [pc, #88]	; (80010f8 <MX_GPIO_Init+0x204>)
 800109e:	f000 fc3b 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <MX_GPIO_Init+0x204>)
 80010b8:	f000 fc2e 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ce:	230b      	movs	r3, #11
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_GPIO_Init+0x1fc>)
 80010da:	f000 fc1d 	bl	8001918 <HAL_GPIO_Init>

}
 80010de:	bf00      	nop
 80010e0:	3730      	adds	r7, #48	; 0x30
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40021800 	.word	0x40021800
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020000 	.word	0x40020000

080010fc <Tx_A_G_Data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tx_A_G_Data */
void Tx_A_G_Data(void *argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  if(TX_DATA)
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <Tx_A_G_Data+0x38>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <Tx_A_G_Data+0x1e>
	  {
		  formatAccel(&my_imu);
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <Tx_A_G_Data+0x3c>)
 800110e:	f7ff fcfb 	bl	8000b08 <formatAccel>

		  Tx_Accel(&my_imu, &huart3);
 8001112:	490a      	ldr	r1, [pc, #40]	; (800113c <Tx_A_G_Data+0x40>)
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <Tx_A_G_Data+0x3c>)
 8001116:	f7ff fd6d 	bl	8000bf4 <Tx_Accel>


	  }

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800111a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <Tx_A_G_Data+0x44>)
 8001120:	f000 fdbf 	bl	8001ca2 <HAL_GPIO_TogglePin>

	  TX_DATA = NOT_SEND_DATA;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <Tx_A_G_Data+0x38>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]

	  osDelay(100);
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f003 fd60 	bl	8004bf0 <osDelay>
	  if(TX_DATA)
 8001130:	e7e8      	b.n	8001104 <Tx_A_G_Data+0x8>
 8001132:	bf00      	nop
 8001134:	20000318 	.word	0x20000318
 8001138:	200002e4 	.word	0x200002e4
 800113c:	20000254 	.word	0x20000254
 8001140:	40020400 	.word	0x40020400

08001144 <getA_G_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getA_G_Data */
void getA_G_Data(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getA_G_Data */
  /* Infinite loop */
  for(;;)
  {
	  if (get_Accel(&my_imu) != HAL_OK)
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <getA_G_Data+0x2c>)
 800114e:	f7ff fca4 	bl	8000a9a <get_Accel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <getA_G_Data+0x1e>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001158:	2101      	movs	r1, #1
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <getA_G_Data+0x30>)
 800115c:	f000 fda1 	bl	8001ca2 <HAL_GPIO_TogglePin>
 8001160:	e002      	b.n	8001168 <getA_G_Data+0x24>
	  else
		  TX_DATA = SEND_DATA;
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <getA_G_Data+0x34>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]

    osDelay(25);
 8001168:	2019      	movs	r0, #25
 800116a:	f003 fd41 	bl	8004bf0 <osDelay>
	  if (get_Accel(&my_imu) != HAL_OK)
 800116e:	e7ed      	b.n	800114c <getA_G_Data+0x8>
 8001170:	200002e4 	.word	0x200002e4
 8001174:	40020400 	.word	0x40020400
 8001178:	20000318 	.word	0x20000318

0800117c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800118e:	f000 fa9d 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40001000 	.word	0x40001000

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	210f      	movs	r1, #15
 80011e6:	f06f 0001 	mvn.w	r0, #1
 80011ea:	f000 fb6b 	bl	80018c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ae      	sub	sp, #184	; 0xb8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2290      	movs	r2, #144	; 0x90
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f006 fafe 	bl	800781e <memset>
  if(hi2c->Instance==I2C1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_I2C_MspInit+0xb4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d13c      	bne.n	80012a6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800122c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001230:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001232:	2300      	movs	r3, #0
 8001234:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4618      	mov	r0, r3
 800123c:	f001 ffce 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001246:	f7ff ffab 	bl	80011a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_I2C_MspInit+0xb8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_I2C_MspInit+0xb8>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_I2C_MspInit+0xb8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001262:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800127c:	2304      	movs	r3, #4
 800127e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001286:	4619      	mov	r1, r3
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <HAL_I2C_MspInit+0xbc>)
 800128a:	f000 fb45 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_I2C_MspInit+0xb8>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_I2C_MspInit+0xb8>)
 8001294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_I2C_MspInit+0xb8>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	37b8      	adds	r7, #184	; 0xb8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020400 	.word	0x40020400

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ae      	sub	sp, #184	; 0xb8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2290      	movs	r2, #144	; 0x90
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 fa9e 	bl	800781e <memset>
  if(huart->Instance==USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_UART_MspInit+0xb4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d13c      	bne.n	8001366 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 ff6e 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001306:	f7ff ff4b 	bl	80011a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_UART_MspInit+0xb8>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800133a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001354:	2307      	movs	r3, #7
 8001356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_UART_MspInit+0xbc>)
 8001362:	f000 fad9 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	37b8      	adds	r7, #184	; 0xb8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40004800 	.word	0x40004800
 8001374:	40023800 	.word	0x40023800
 8001378:	40020c00 	.word	0x40020c00

0800137c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_InitTick+0xe0>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_InitTick+0xe0>)
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_InitTick+0xe0>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a4:	f107 0210 	add.w	r2, r7, #16
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fee2 	bl	8003178 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013be:	f001 feb3 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 80013c2:	6378      	str	r0, [r7, #52]	; 0x34
 80013c4:	e004      	b.n	80013d0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c6:	f001 feaf 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 80013ca:	4603      	mov	r3, r0
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_InitTick+0xe4>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9b      	lsrs	r3, r3, #18
 80013da:	3b01      	subs	r3, #1
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_InitTick+0xe8>)
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <HAL_InitTick+0xec>)
 80013e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_InitTick+0xe8>)
 80013e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_InitTick+0xe8>)
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_InitTick+0xe8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_InitTick+0xe8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_InitTick+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <HAL_InitTick+0xe8>)
 8001406:	f002 fb11 	bl	8003a2c <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001414:	2b00      	cmp	r3, #0
 8001416:	d11b      	bne.n	8001450 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <HAL_InitTick+0xe8>)
 800141a:	f002 fb69 	bl	8003af0 <HAL_TIM_Base_Start_IT>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800142c:	2036      	movs	r0, #54	; 0x36
 800142e:	f000 fa65 	bl	80018fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d808      	bhi.n	800144a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	2036      	movs	r0, #54	; 0x36
 800143e:	f000 fa41 	bl	80018c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_InitTick+0xf0>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e002      	b.n	8001450 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001454:	4618      	mov	r0, r3
 8001456:	3738      	adds	r7, #56	; 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	431bde83 	.word	0x431bde83
 8001464:	2000031c 	.word	0x2000031c
 8001468:	40001000 	.word	0x40001000
 800146c:	20000004 	.word	0x20000004

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM6_DAC_IRQHandler+0x10>)
 80014a2:	f002 fb9d 	bl	8003be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000031c 	.word	0x2000031c

080014b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_kill>:

int _kill(int pid, int sig)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ca:	f006 f877 	bl	80075bc <__errno>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2216      	movs	r2, #22
 80014d2:	601a      	str	r2, [r3, #0]
  return -1;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_exit>:

void _exit (int status)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ffe7 	bl	80014c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014f2:	e7fe      	b.n	80014f2 <_exit+0x12>

080014f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00a      	b.n	800151c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001506:	f3af 8000 	nop.w
 800150a:	4601      	mov	r1, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf0      	blt.n	8001506 <_read+0x12>
  }

  return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e009      	b.n	8001554 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf1      	blt.n	8001540 <_write+0x12>
  }
  return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	605a      	str	r2, [r3, #4]
  return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f005 ffdc 	bl	80075bc <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20080000 	.word	0x20080000
 8001630:	00000400 	.word	0x00000400
 8001634:	20000368 	.word	0x20000368
 8001638:	20004d88 	.word	0x20004d88

0800163c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800167c:	4c0b      	ldr	r4, [pc, #44]	; (80016ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168a:	f7ff ffd7 	bl	800163c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f006 f891 	bl	80077b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff fb27 	bl	8000ce4 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80016a4:	0800c36c 	.word	0x0800c36c
  ldr r2, =_sbss
 80016a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80016ac:	20004d88 	.word	0x20004d88

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>

080016b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b6:	2003      	movs	r0, #3
 80016b8:	f000 f8f9 	bl	80018ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016bc:	200f      	movs	r0, #15
 80016be:	f7ff fe5d 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c2:	f7ff fd73 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	2000036c 	.word	0x2000036c

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000036c 	.word	0x2000036c

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <__NVIC_SetPriorityGrouping+0x40>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	4313      	orrs	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x40>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	05fa0000 	.word	0x05fa0000

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff4c 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d6:	f7ff ff61 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	6978      	ldr	r0, [r7, #20]
 80018e2:	f7ff ffb1 	bl	8001848 <NVIC_EncodePriority>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff80 	bl	80017f4 <__NVIC_SetPriority>
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff54 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e175      	b.n	8001c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	429a      	cmp	r2, r3
 8001952:	f040 8164 	bne.w	8001c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d005      	beq.n	800196e <HAL_GPIO_Init+0x56>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d130      	bne.n	80019d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 0201 	and.w	r2, r3, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d017      	beq.n	8001a0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d123      	bne.n	8001a60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	08da      	lsrs	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3208      	adds	r2, #8
 8001a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80be 	beq.w	8001c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a65      	ldr	r2, [pc, #404]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aba:	4a61      	ldr	r2, [pc, #388]	; (8001c40 <HAL_GPIO_Init+0x328>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_GPIO_Init+0x32c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d037      	beq.n	8001b56 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_GPIO_Init+0x330>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d031      	beq.n	8001b52 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a56      	ldr	r2, [pc, #344]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a55      	ldr	r2, [pc, #340]	; (8001c50 <HAL_GPIO_Init+0x338>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a54      	ldr	r2, [pc, #336]	; (8001c54 <HAL_GPIO_Init+0x33c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a53      	ldr	r2, [pc, #332]	; (8001c58 <HAL_GPIO_Init+0x340>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x22a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_GPIO_Init+0x344>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_GPIO_Init+0x348>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a50      	ldr	r2, [pc, #320]	; (8001c64 <HAL_GPIO_Init+0x34c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4f      	ldr	r2, [pc, #316]	; (8001c68 <HAL_GPIO_Init+0x350>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x21a>
 8001b2e:	2309      	movs	r3, #9
 8001b30:	e012      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b32:	230a      	movs	r3, #10
 8001b34:	e010      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b36:	2308      	movs	r3, #8
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	; (8001c40 <HAL_GPIO_Init+0x328>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae86 	bls.w	8001938 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40022400 	.word	0x40022400
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb4:	887a      	ldrh	r2, [r7, #2]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	041a      	lsls	r2, r3, #16
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	400b      	ands	r3, r1
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fa7c 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2224      	movs	r2, #36	; 0x24
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e006      	b.n	8001d60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d104      	bne.n	8001d72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_I2C_Init+0x11c>)
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69d9      	ldr	r1, [r3, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	02008000 	.word	0x02008000

08001df8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	460b      	mov	r3, r1
 8001e06:	817b      	strh	r3, [r7, #10]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	f040 80da 	bne.w	8001fce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2C_Master_Transmit+0x30>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0d3      	b.n	8001fd0 <HAL_I2C_Master_Transmit+0x1d8>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e30:	f7ff fc60 	bl	80016f4 <HAL_GetTick>
 8001e34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2319      	movs	r3, #25
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f9e6 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0be      	b.n	8001fd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2221      	movs	r2, #33	; 0x21
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	893a      	ldrh	r2, [r7, #8]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	d90e      	bls.n	8001ea2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	22ff      	movs	r2, #255	; 0xff
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	8979      	ldrh	r1, [r7, #10]
 8001e92:	4b51      	ldr	r3, [pc, #324]	; (8001fd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fbd0 	bl	8002640 <I2C_TransferConfig>
 8001ea0:	e06c      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	8979      	ldrh	r1, [r7, #10]
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fbbf 	bl	8002640 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ec2:	e05b      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	6a39      	ldr	r1, [r7, #32]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f9e3 	bl	8002294 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e07b      	b.n	8001fd0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d034      	beq.n	8001f7c <HAL_I2C_Master_Transmit+0x184>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d130      	bne.n	8001f7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f975 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e04d      	b.n	8001fd0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d90e      	bls.n	8001f5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	8979      	ldrh	r1, [r7, #10]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fb73 	bl	8002640 <I2C_TransferConfig>
 8001f5a:	e00f      	b.n	8001f7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fb62 	bl	8002640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d19e      	bne.n	8001ec4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	6a39      	ldr	r1, [r7, #32]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f9c2 	bl	8002314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e01a      	b.n	8001fd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_I2C_Master_Transmit+0x1e4>)
 8001fae:	400b      	ands	r3, r1
 8001fb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	80002000 	.word	0x80002000
 8001fdc:	fe00e800 	.word	0xfe00e800

08001fe0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	461a      	mov	r2, r3
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 80db 	bne.w	80021b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_I2C_Master_Receive+0x30>
 800200c:	2302      	movs	r3, #2
 800200e:	e0d4      	b.n	80021ba <HAL_I2C_Master_Receive+0x1da>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002018:	f7ff fb6c 	bl	80016f4 <HAL_GetTick>
 800201c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2319      	movs	r3, #25
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f8f2 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0bf      	b.n	80021ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2222      	movs	r2, #34	; 0x22
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2210      	movs	r2, #16
 8002046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	893a      	ldrh	r2, [r7, #8]
 800205a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	2bff      	cmp	r3, #255	; 0xff
 800206a:	d90e      	bls.n	800208a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	22ff      	movs	r2, #255	; 0xff
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	b2da      	uxtb	r2, r3
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <HAL_I2C_Master_Receive+0x1e4>)
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fadc 	bl	8002640 <I2C_TransferConfig>
 8002088:	e06d      	b.n	8002166 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	b2da      	uxtb	r2, r3
 800209a:	8979      	ldrh	r1, [r7, #10]
 800209c:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <HAL_I2C_Master_Receive+0x1e4>)
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 facb 	bl	8002640 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80020aa:	e05c      	b.n	8002166 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	6a39      	ldr	r1, [r7, #32]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f96b 	bl	800238c <I2C_WaitOnRXNEFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e07c      	b.n	80021ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d034      	beq.n	8002166 <HAL_I2C_Master_Receive+0x186>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d130      	bne.n	8002166 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2200      	movs	r2, #0
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f880 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e04d      	b.n	80021ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	2bff      	cmp	r3, #255	; 0xff
 8002126:	d90e      	bls.n	8002146 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	22ff      	movs	r2, #255	; 0xff
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	b2da      	uxtb	r2, r3
 8002134:	8979      	ldrh	r1, [r7, #10]
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fa7e 	bl	8002640 <I2C_TransferConfig>
 8002144:	e00f      	b.n	8002166 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	b2da      	uxtb	r2, r3
 8002156:	8979      	ldrh	r1, [r7, #10]
 8002158:	2300      	movs	r3, #0
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fa6d 	bl	8002640 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d19d      	bne.n	80020ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	6a39      	ldr	r1, [r7, #32]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f8cd 	bl	8002314 <I2C_WaitOnSTOPFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e01a      	b.n	80021ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2220      	movs	r2, #32
 800218a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_I2C_Master_Receive+0x1e8>)
 8002198:	400b      	ands	r3, r1
 800219a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	80002400 	.word	0x80002400
 80021c8:	fe00e800 	.word	0xfe00e800

080021cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d103      	bne.n	80021ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d007      	beq.n	8002208 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	619a      	str	r2, [r3, #24]
  }
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002224:	e022      	b.n	800226c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800222c:	d01e      	beq.n	800226c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7ff fa61 	bl	80016f4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d113      	bne.n	800226c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e00f      	b.n	800228c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	429a      	cmp	r2, r3
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	429a      	cmp	r2, r3
 8002288:	d0cd      	beq.n	8002226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a0:	e02c      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8ea 	bl	8002480 <I2C_IsErrorOccurred>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e02a      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022bc:	d01e      	beq.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff fa19 	bl	80016f4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d113      	bne.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d1cb      	bne.n	80022a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002320:	e028      	b.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f8aa 	bl	8002480 <I2C_IsErrorOccurred>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e026      	b.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7ff f9dd 	bl	80016f4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d113      	bne.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e007      	b.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b20      	cmp	r3, #32
 8002380:	d1cf      	bne.n	8002322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002398:	e064      	b.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f86e 	bl	8002480 <I2C_IsErrorOccurred>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e062      	b.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d138      	bne.n	800242e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d105      	bne.n	80023d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e04e      	b.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d107      	bne.n	80023f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2210      	movs	r2, #16
 80023ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2204      	movs	r2, #4
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
 80023f2:	e002      	b.n	80023fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2220      	movs	r2, #32
 8002400:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800240e:	400b      	ands	r3, r1
 8002410:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7ff f961 	bl	80016f4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d193      	bne.n	800239a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d068      	beq.n	800257e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2210      	movs	r2, #16
 80024b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024b4:	e049      	b.n	800254a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024bc:	d045      	beq.n	800254a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024be:	f7ff f919 	bl	80016f4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <I2C_IsErrorOccurred+0x54>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d13a      	bne.n	800254a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f6:	d121      	bne.n	800253c <I2C_IsErrorOccurred+0xbc>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024fe:	d01d      	beq.n	800253c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b20      	cmp	r3, #32
 8002504:	d01a      	beq.n	800253c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002514:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002516:	f7ff f8ed 	bl	80016f4 <HAL_GetTick>
 800251a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800251c:	e00e      	b.n	800253c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800251e:	f7ff f8e9 	bl	80016f4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b19      	cmp	r3, #25
 800252a:	d907      	bls.n	800253c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f043 0320 	orr.w	r3, r3, #32
 8002532:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800253a:	e006      	b.n	800254a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b20      	cmp	r3, #32
 8002548:	d1e9      	bne.n	800251e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b20      	cmp	r3, #32
 8002556:	d003      	beq.n	8002560 <I2C_IsErrorOccurred+0xe0>
 8002558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0aa      	beq.n	80024b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002564:	2b00      	cmp	r3, #0
 8002566:	d103      	bne.n	8002570 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01c      	beq.n	800262e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fde9 	bl	80021cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <I2C_IsErrorOccurred+0x1bc>)
 8002606:	400b      	ands	r3, r1
 8002608:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002632:	4618      	mov	r0, r3
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	fe00e800 	.word	0xfe00e800

08002640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	817b      	strh	r3, [r7, #10]
 800264e:	4613      	mov	r3, r2
 8002650:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002658:	7a7b      	ldrb	r3, [r7, #9]
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002660:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	4313      	orrs	r3, r2
 800266a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800266e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	0d5b      	lsrs	r3, r3, #21
 800267a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <I2C_TransferConfig+0x60>)
 8002680:	430b      	orrs	r3, r1
 8002682:	43db      	mvns	r3, r3
 8002684:	ea02 0103 	and.w	r1, r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	03ff63ff 	.word	0x03ff63ff

080026a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d138      	bne.n	800272c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e032      	b.n	800272e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	d139      	bne.n	80027c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275a:	2302      	movs	r3, #2
 800275c:	e033      	b.n	80027c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2224      	movs	r2, #36	; 0x24
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800278c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e29b      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f8:	4b96      	ldr	r3, [pc, #600]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d00c      	beq.n	800281e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002804:	4b93      	ldr	r3, [pc, #588]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d112      	bne.n	8002836 <HAL_RCC_OscConfig+0x62>
 8002810:	4b90      	ldr	r3, [pc, #576]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281c:	d10b      	bne.n	8002836 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d06c      	beq.n	8002904 <HAL_RCC_OscConfig+0x130>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d168      	bne.n	8002904 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e275      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x7a>
 8002840:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a83      	ldr	r2, [pc, #524]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e02e      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x9c>
 8002856:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a7e      	ldr	r2, [pc, #504]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b7c      	ldr	r3, [pc, #496]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7b      	ldr	r2, [pc, #492]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0xc0>
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a75      	ldr	r2, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a72      	ldr	r2, [pc, #456]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xd8>
 8002894:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe ff1e 	bl	80016f4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe ff1a 	bl	80016f4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e229      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe ff0a 	bl	80016f4 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe ff06 	bl	80016f4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e215      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	4b57      	ldr	r3, [pc, #348]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x110>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d069      	beq.n	80029e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002912:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11c      	bne.n	8002964 <HAL_RCC_OscConfig+0x190>
 800292a:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x17a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e1e9      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	493d      	ldr	r1, [pc, #244]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e040      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe febc 	bl	80016f4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe feb8 	bl	80016f4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1c7      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4929      	ldr	r1, [pc, #164]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
 80029b2:	e018      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fe98 	bl	80016f4 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fe fe94 	bl	80016f4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1a3      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d038      	beq.n	8002a64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d019      	beq.n	8002a2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 80029fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7fe fe75 	bl	80016f4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7fe fe71 	bl	80016f4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e180      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x23a>
 8002a2c:	e01a      	b.n	8002a64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a32:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fe5b 	bl	80016f4 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe fe57 	bl	80016f4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d903      	bls.n	8002a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e166      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
 8002a54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b92      	ldr	r3, [pc, #584]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ee      	bne.n	8002a42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a4 	beq.w	8002bba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b8c      	ldr	r3, [pc, #560]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10d      	bne.n	8002a9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a88      	ldr	r2, [pc, #544]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b86      	ldr	r3, [pc, #536]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9a:	4b83      	ldr	r3, [pc, #524]	; (8002ca8 <HAL_RCC_OscConfig+0x4d4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d118      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aa6:	4b80      	ldr	r3, [pc, #512]	; (8002ca8 <HAL_RCC_OscConfig+0x4d4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7f      	ldr	r2, [pc, #508]	; (8002ca8 <HAL_RCC_OscConfig+0x4d4>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fe1f 	bl	80016f4 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe fe1b 	bl	80016f4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	; 0x64
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e12a      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002acc:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_RCC_OscConfig+0x4d4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x31a>
 8002ae0:	4b70      	ldr	r3, [pc, #448]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a6f      	ldr	r2, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e02d      	b.n	8002b4a <HAL_RCC_OscConfig+0x376>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x33c>
 8002af6:	4b6b      	ldr	r3, [pc, #428]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	e01c      	b.n	8002b4a <HAL_RCC_OscConfig+0x376>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x35e>
 8002b18:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a61      	ldr	r2, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	e00b      	b.n	8002b4a <HAL_RCC_OscConfig+0x376>
 8002b32:	4b5c      	ldr	r3, [pc, #368]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d015      	beq.n	8002b7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe fdcf 	bl	80016f4 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fdcb 	bl	80016f4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e0d8      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ee      	beq.n	8002b5a <HAL_RCC_OscConfig+0x386>
 8002b7c:	e014      	b.n	8002ba8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fdb9 	bl	80016f4 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fdb5 	bl	80016f4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0c2      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9c:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ee      	bne.n	8002b86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80ae 	beq.w	8002d20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc4:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d06d      	beq.n	8002cac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d14b      	bne.n	8002c70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a31      	ldr	r2, [pc, #196]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fd86 	bl	80016f4 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe fd82 	bl	80016f4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e091      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	019b      	lsls	r3, r3, #6
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	071b      	lsls	r3, r3, #28
 8002c36:	491b      	ldr	r1, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fd54 	bl	80016f4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fd50 	bl	80016f4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e05f      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x47c>
 8002c6e:	e057      	b.n	8002d20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fd3a 	bl	80016f4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fd36 	bl	80016f4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e045      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4b0>
 8002ca2:	e03d      	b.n	8002d20 <HAL_RCC_OscConfig+0x54c>
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <HAL_RCC_OscConfig+0x558>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d030      	beq.n	8002d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d129      	bne.n	8002d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d122      	bne.n	8002d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d119      	bne.n	8002d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d10f      	bne.n	8002d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0d0      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d910      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 020f 	bic.w	r2, r3, #15
 8002d5e:	4965      	ldr	r1, [pc, #404]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b8      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002db2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d040      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e073      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06b      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4936      	ldr	r1, [pc, #216]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe fc66 	bl	80016f4 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe fc62 	bl	80016f4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e053      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d210      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	4922      	ldr	r1, [pc, #136]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e032      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec2:	f000 f821 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490a      	ldr	r1, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1cc>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1d0>)
 8002edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1d4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fa4a 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	0800bea0 	.word	0x0800bea0
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000004 	.word	0x20000004

08002f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b094      	sub	sp, #80	; 0x50
 8002f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	647b      	str	r3, [r7, #68]	; 0x44
 8002f14:	2300      	movs	r3, #0
 8002f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f18:	2300      	movs	r3, #0
 8002f1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f20:	4b79      	ldr	r3, [pc, #484]	; (8003108 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d00d      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x40>
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	f200 80e1 	bhi.w	80030f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x34>
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f3a:	e0db      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f40:	e0db      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f46:	e0d8      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f48:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f52:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d063      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5e:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	2200      	movs	r2, #0
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
 8002f72:	2300      	movs	r3, #0
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
 8002f76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	f04f 0000 	mov.w	r0, #0
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8c:	0150      	lsls	r0, r2, #5
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4621      	mov	r1, r4
 8002f94:	1a51      	subs	r1, r2, r1
 8002f96:	6139      	str	r1, [r7, #16]
 8002f98:	4629      	mov	r1, r5
 8002f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fac:	4659      	mov	r1, fp
 8002fae:	018b      	lsls	r3, r1, #6
 8002fb0:	4651      	mov	r1, sl
 8002fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	018a      	lsls	r2, r1, #6
 8002fba:	4651      	mov	r1, sl
 8002fbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fda:	4690      	mov	r8, r2
 8002fdc:	4699      	mov	r9, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	eb18 0303 	adds.w	r3, r8, r3
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	462b      	mov	r3, r5
 8002fe8:	eb49 0303 	adc.w	r3, r9, r3
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	028b      	lsls	r3, r1, #10
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003004:	4621      	mov	r1, r4
 8003006:	028a      	lsls	r2, r1, #10
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	2200      	movs	r2, #0
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 8003012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003018:	f7fd fb26 	bl	8000668 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	e058      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <HAL_RCC_GetSysClockFreq+0x200>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	2200      	movs	r2, #0
 800302e:	4618      	mov	r0, r3
 8003030:	4611      	mov	r1, r2
 8003032:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003040:	4642      	mov	r2, r8
 8003042:	464b      	mov	r3, r9
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	0159      	lsls	r1, r3, #5
 800304e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003052:	0150      	lsls	r0, r2, #5
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4641      	mov	r1, r8
 800305a:	ebb2 0a01 	subs.w	sl, r2, r1
 800305e:	4649      	mov	r1, r9
 8003060:	eb63 0b01 	sbc.w	fp, r3, r1
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003070:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003074:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003078:	ebb2 040a 	subs.w	r4, r2, sl
 800307c:	eb63 050b 	sbc.w	r5, r3, fp
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	00eb      	lsls	r3, r5, #3
 800308a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308e:	00e2      	lsls	r2, r4, #3
 8003090:	4614      	mov	r4, r2
 8003092:	461d      	mov	r5, r3
 8003094:	4643      	mov	r3, r8
 8003096:	18e3      	adds	r3, r4, r3
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	464b      	mov	r3, r9
 800309c:	eb45 0303 	adc.w	r3, r5, r3
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ae:	4629      	mov	r1, r5
 80030b0:	028b      	lsls	r3, r1, #10
 80030b2:	4621      	mov	r1, r4
 80030b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b8:	4621      	mov	r1, r4
 80030ba:	028a      	lsls	r2, r1, #10
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c2:	2200      	movs	r2, #0
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	61fa      	str	r2, [r7, #28]
 80030c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030cc:	f7fd facc 	bl	8000668 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_GetSysClockFreq+0x200>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	3301      	adds	r3, #1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80030e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030f2:	e002      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetSysClockFreq+0x204>)
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3750      	adds	r7, #80	; 0x50
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400

08003110 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	0800beb0 	.word	0x0800beb0

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	0800beb0 	.word	0x0800beb0

08003178 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	220f      	movs	r2, #15
 8003186:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_RCC_GetClockConfig+0x60>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40023c00 	.word	0x40023c00

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d012      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003204:	4b69      	ldr	r3, [pc, #420]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800320e:	6093      	str	r3, [r2, #8]
 8003210:	4b66      	ldr	r3, [pc, #408]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	4964      	ldr	r1, [pc, #400]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d017      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	4959      	ldr	r1, [pc, #356]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003254:	d101      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003272:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003278:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	494a      	ldr	r1, [pc, #296]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 808b 	beq.w	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4a39      	ldr	r2, [pc, #228]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6413      	str	r3, [r2, #64]	; 0x40
 80032cc:	4b37      	ldr	r3, [pc, #220]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e4:	f7fe fa06 	bl	80016f4 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fe fa02 	bl	80016f4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e38f      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800330a:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003312:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d035      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d02e      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d114      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe f9ca 	bl	80016f4 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	e00a      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fe f9c6 	bl	80016f4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e351      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ee      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003392:	d111      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033a2:	400b      	ands	r3, r1
 80033a4:	4901      	ldr	r1, [pc, #4]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000
 80033b4:	0ffffcff 	.word	0x0ffffcff
 80033b8:	4bac      	ldr	r3, [pc, #688]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4aab      	ldr	r2, [pc, #684]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033c2:	6093      	str	r3, [r2, #8]
 80033c4:	4ba9      	ldr	r3, [pc, #676]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	49a6      	ldr	r1, [pc, #664]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d010      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033e2:	4ba2      	ldr	r3, [pc, #648]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e8:	4aa0      	ldr	r2, [pc, #640]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033f2:	4b9e      	ldr	r3, [pc, #632]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	499b      	ldr	r1, [pc, #620]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003410:	4b96      	ldr	r3, [pc, #600]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341e:	4993      	ldr	r1, [pc, #588]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003432:	4b8e      	ldr	r3, [pc, #568]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003440:	498a      	ldr	r1, [pc, #552]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003454:	4b85      	ldr	r3, [pc, #532]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003462:	4982      	ldr	r1, [pc, #520]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003476:	4b7d      	ldr	r3, [pc, #500]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4979      	ldr	r1, [pc, #484]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003498:	4b74      	ldr	r3, [pc, #464]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4971      	ldr	r1, [pc, #452]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ba:	4b6c      	ldr	r3, [pc, #432]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f023 020c 	bic.w	r2, r3, #12
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c8:	4968      	ldr	r1, [pc, #416]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034dc:	4b63      	ldr	r3, [pc, #396]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	4960      	ldr	r1, [pc, #384]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	4957      	ldr	r1, [pc, #348]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003520:	4b52      	ldr	r3, [pc, #328]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	494f      	ldr	r1, [pc, #316]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003542:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4946      	ldr	r1, [pc, #280]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	493e      	ldr	r1, [pc, #248]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	4935      	ldr	r1, [pc, #212]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b6:	492d      	ldr	r1, [pc, #180]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035ca:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d8:	4924      	ldr	r1, [pc, #144]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360a:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003618:	4914      	ldr	r1, [pc, #80]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363c:	490b      	ldr	r1, [pc, #44]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00f      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	4902      	ldr	r1, [pc, #8]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800367c:	4b8a      	ldr	r3, [pc, #552]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003682:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	4986      	ldr	r1, [pc, #536]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036a0:	4b81      	ldr	r3, [pc, #516]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	497d      	ldr	r1, [pc, #500]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d006      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80d6 	beq.w	8003878 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036cc:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d8:	f7fe f80c 	bl	80016f4 <HAL_GetTick>
 80036dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036e0:	f7fe f808 	bl	80016f4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e195      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036f2:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d021      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11d      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003720:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003726:	0e1b      	lsrs	r3, r3, #24
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	019a      	lsls	r2, r3, #6
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	061b      	lsls	r3, r3, #24
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	071b      	lsls	r3, r3, #28
 8003746:	4958      	ldr	r1, [pc, #352]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003778:	d129      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800377a:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003788:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378e:	0f1b      	lsrs	r3, r3, #28
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	019a      	lsls	r2, r3, #6
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	071b      	lsls	r3, r3, #28
 80037ae:	493e      	ldr	r1, [pc, #248]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037b6:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037bc:	f023 021f 	bic.w	r2, r3, #31
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	3b01      	subs	r3, #1
 80037c6:	4938      	ldr	r1, [pc, #224]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01d      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037da:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e0:	0e1b      	lsrs	r3, r3, #24
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	0f1b      	lsrs	r3, r3, #28
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	019a      	lsls	r2, r3, #6
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	071b      	lsls	r3, r3, #28
 800380e:	4926      	ldr	r1, [pc, #152]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	019a      	lsls	r2, r3, #6
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	071b      	lsls	r3, r3, #28
 800383e:	491a      	ldr	r1, [pc, #104]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003852:	f7fd ff4f 	bl	80016f4 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800385a:	f7fd ff4b 	bl	80016f4 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	; 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0d8      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 80ce 	bne.w	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fd ff32 	bl	80016f4 <HAL_GetTick>
 8003890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003892:	e00b      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003894:	f7fd ff2e 	bl	80016f4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d904      	bls.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0bb      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038ac:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b8:	d0ec      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02e      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038e2:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038f0:	4b4d      	ldr	r3, [pc, #308]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	0f1b      	lsrs	r3, r3, #28
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	019a      	lsls	r2, r3, #6
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	431a      	orrs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	071b      	lsls	r3, r3, #28
 8003916:	4944      	ldr	r1, [pc, #272]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800391e:	4b42      	ldr	r3, [pc, #264]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	493d      	ldr	r1, [pc, #244]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394c:	d11d      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800394e:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	0e1b      	lsrs	r3, r3, #24
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	019a      	lsls	r2, r3, #6
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	431a      	orrs	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	4929      	ldr	r1, [pc, #164]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d028      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	0e1b      	lsrs	r3, r3, #24
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	019a      	lsls	r2, r3, #6
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	431a      	orrs	r2, r3
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	071b      	lsls	r3, r3, #28
 80039ca:	4917      	ldr	r1, [pc, #92]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039d2:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4911      	ldr	r1, [pc, #68]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fd fe7e 	bl	80016f4 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039fc:	f7fd fe7a 	bl	80016f4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e007      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1a:	d1ef      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800

08003a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e049      	b.n	8003ad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f841 	bl	8003ada <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f000 fa00 	bl	8003e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d001      	beq.n	8003b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e054      	b.n	8003bb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d022      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x80>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d01d      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x80>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x80>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x80>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x80>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x80>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d115      	bne.n	8003b9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_TIM_Base_Start_IT+0xec>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d015      	beq.n	8003bae <HAL_TIM_Base_Start_IT+0xbe>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b88:	d011      	beq.n	8003bae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9a:	e008      	b.n	8003bae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e000      	b.n	8003bb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00
 8003bd0:	40010400 	.word	0x40010400
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40001800 	.word	0x40001800
 8003bdc:	00010007 	.word	0x00010007

08003be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d122      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11b      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0202 	mvn.w	r2, #2
 8003c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f905 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8f7 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f908 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d122      	bne.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d11b      	bne.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0204 	mvn.w	r2, #4
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8db 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8cd 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8de 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d122      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d11b      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0208 	mvn.w	r2, #8
 8003cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8b1 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003cd0:	e005      	b.n	8003cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8a3 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f8b4 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d122      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d11b      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0210 	mvn.w	r2, #16
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f887 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f879 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f88a 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0201 	mvn.w	r2, #1
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fa0c 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7c:	2b80      	cmp	r3, #128	; 0x80
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f91a 	bl	8003fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f90d 	bl	8003fd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d10e      	bne.n	8003dea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f838 	bl	8003e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d10e      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d107      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0220 	mvn.w	r2, #32
 8003e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8cd 	bl	8003fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a40      	ldr	r2, [pc, #256]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3c      	ldr	r2, [pc, #240]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3b      	ldr	r2, [pc, #236]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3a      	ldr	r2, [pc, #232]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d108      	bne.n	8003ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d027      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2c      	ldr	r2, [pc, #176]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d023      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d017      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <TIM_Base_SetConfig+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <TIM_Base_SetConfig+0x12c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <TIM_Base_SetConfig+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <TIM_Base_SetConfig+0x134>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <TIM_Base_SetConfig+0x138>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <TIM_Base_SetConfig+0x13c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d108      	bne.n	8003f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d103      	bne.n	8003f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	615a      	str	r2, [r3, #20]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800
 8003fa4:	40001800 	.word	0x40001800
 8003fa8:	40001c00 	.word	0x40001c00
 8003fac:	40002000 	.word	0x40002000

08003fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e040      	b.n	8004080 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd f954 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8b0 	bl	8004190 <UART_SetConfig>
 8004030:	4603      	mov	r3, r0
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e022      	b.n	8004080 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fb08 	bl	8004658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fb8f 	bl	800479c <UART_CheckIdleState>
 800407e:	4603      	mov	r3, r0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800409c:	2b20      	cmp	r3, #32
 800409e:	d171      	bne.n	8004184 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Transmit+0x24>
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e06a      	b.n	8004186 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2221      	movs	r2, #33	; 0x21
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040be:	f7fd fb19 	bl	80016f4 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d108      	bne.n	80040f0 <HAL_UART_Transmit+0x68>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f8:	e02c      	b.n	8004154 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fb96 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e038      	b.n	8004186 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	3302      	adds	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e007      	b.n	8004142 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1cc      	bne.n	80040fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fb63 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e005      	b.n	8004186 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4ba6      	ldr	r3, [pc, #664]	; (8004454 <UART_SetConfig+0x2c4>)
 80041bc:	4013      	ands	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	6979      	ldr	r1, [r7, #20]
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a94      	ldr	r2, [pc, #592]	; (8004458 <UART_SetConfig+0x2c8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d120      	bne.n	800424e <UART_SetConfig+0xbe>
 800420c:	4b93      	ldr	r3, [pc, #588]	; (800445c <UART_SetConfig+0x2cc>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b03      	cmp	r3, #3
 8004218:	d816      	bhi.n	8004248 <UART_SetConfig+0xb8>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0x90>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004231 	.word	0x08004231
 8004224:	0800423d 	.word	0x0800423d
 8004228:	08004237 	.word	0x08004237
 800422c:	08004243 	.word	0x08004243
 8004230:	2301      	movs	r3, #1
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e150      	b.n	80044d8 <UART_SetConfig+0x348>
 8004236:	2302      	movs	r3, #2
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e14d      	b.n	80044d8 <UART_SetConfig+0x348>
 800423c:	2304      	movs	r3, #4
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e14a      	b.n	80044d8 <UART_SetConfig+0x348>
 8004242:	2308      	movs	r3, #8
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e147      	b.n	80044d8 <UART_SetConfig+0x348>
 8004248:	2310      	movs	r3, #16
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e144      	b.n	80044d8 <UART_SetConfig+0x348>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a83      	ldr	r2, [pc, #524]	; (8004460 <UART_SetConfig+0x2d0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d132      	bne.n	80042be <UART_SetConfig+0x12e>
 8004258:	4b80      	ldr	r3, [pc, #512]	; (800445c <UART_SetConfig+0x2cc>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d828      	bhi.n	80042b8 <UART_SetConfig+0x128>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0xdc>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042b9 	.word	0x080042b9
 8004274:	080042b9 	.word	0x080042b9
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042ad 	.word	0x080042ad
 8004280:	080042b9 	.word	0x080042b9
 8004284:	080042b9 	.word	0x080042b9
 8004288:	080042b9 	.word	0x080042b9
 800428c:	080042a7 	.word	0x080042a7
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042b9 	.word	0x080042b9
 800429c:	080042b3 	.word	0x080042b3
 80042a0:	2300      	movs	r3, #0
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e118      	b.n	80044d8 <UART_SetConfig+0x348>
 80042a6:	2302      	movs	r3, #2
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e115      	b.n	80044d8 <UART_SetConfig+0x348>
 80042ac:	2304      	movs	r3, #4
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e112      	b.n	80044d8 <UART_SetConfig+0x348>
 80042b2:	2308      	movs	r3, #8
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e10f      	b.n	80044d8 <UART_SetConfig+0x348>
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e10c      	b.n	80044d8 <UART_SetConfig+0x348>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a68      	ldr	r2, [pc, #416]	; (8004464 <UART_SetConfig+0x2d4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d120      	bne.n	800430a <UART_SetConfig+0x17a>
 80042c8:	4b64      	ldr	r3, [pc, #400]	; (800445c <UART_SetConfig+0x2cc>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042d2:	2b30      	cmp	r3, #48	; 0x30
 80042d4:	d013      	beq.n	80042fe <UART_SetConfig+0x16e>
 80042d6:	2b30      	cmp	r3, #48	; 0x30
 80042d8:	d814      	bhi.n	8004304 <UART_SetConfig+0x174>
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d009      	beq.n	80042f2 <UART_SetConfig+0x162>
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d810      	bhi.n	8004304 <UART_SetConfig+0x174>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <UART_SetConfig+0x15c>
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d006      	beq.n	80042f8 <UART_SetConfig+0x168>
 80042ea:	e00b      	b.n	8004304 <UART_SetConfig+0x174>
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e0f2      	b.n	80044d8 <UART_SetConfig+0x348>
 80042f2:	2302      	movs	r3, #2
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e0ef      	b.n	80044d8 <UART_SetConfig+0x348>
 80042f8:	2304      	movs	r3, #4
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e0ec      	b.n	80044d8 <UART_SetConfig+0x348>
 80042fe:	2308      	movs	r3, #8
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e0e9      	b.n	80044d8 <UART_SetConfig+0x348>
 8004304:	2310      	movs	r3, #16
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e0e6      	b.n	80044d8 <UART_SetConfig+0x348>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a56      	ldr	r2, [pc, #344]	; (8004468 <UART_SetConfig+0x2d8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d120      	bne.n	8004356 <UART_SetConfig+0x1c6>
 8004314:	4b51      	ldr	r3, [pc, #324]	; (800445c <UART_SetConfig+0x2cc>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800431e:	2bc0      	cmp	r3, #192	; 0xc0
 8004320:	d013      	beq.n	800434a <UART_SetConfig+0x1ba>
 8004322:	2bc0      	cmp	r3, #192	; 0xc0
 8004324:	d814      	bhi.n	8004350 <UART_SetConfig+0x1c0>
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d009      	beq.n	800433e <UART_SetConfig+0x1ae>
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d810      	bhi.n	8004350 <UART_SetConfig+0x1c0>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x1a8>
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d006      	beq.n	8004344 <UART_SetConfig+0x1b4>
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x1c0>
 8004338:	2300      	movs	r3, #0
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e0cc      	b.n	80044d8 <UART_SetConfig+0x348>
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e0c9      	b.n	80044d8 <UART_SetConfig+0x348>
 8004344:	2304      	movs	r3, #4
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e0c6      	b.n	80044d8 <UART_SetConfig+0x348>
 800434a:	2308      	movs	r3, #8
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e0c3      	b.n	80044d8 <UART_SetConfig+0x348>
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e0c0      	b.n	80044d8 <UART_SetConfig+0x348>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a44      	ldr	r2, [pc, #272]	; (800446c <UART_SetConfig+0x2dc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d125      	bne.n	80043ac <UART_SetConfig+0x21c>
 8004360:	4b3e      	ldr	r3, [pc, #248]	; (800445c <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436e:	d017      	beq.n	80043a0 <UART_SetConfig+0x210>
 8004370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004374:	d817      	bhi.n	80043a6 <UART_SetConfig+0x216>
 8004376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437a:	d00b      	beq.n	8004394 <UART_SetConfig+0x204>
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d811      	bhi.n	80043a6 <UART_SetConfig+0x216>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <UART_SetConfig+0x1fe>
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d006      	beq.n	800439a <UART_SetConfig+0x20a>
 800438c:	e00b      	b.n	80043a6 <UART_SetConfig+0x216>
 800438e:	2300      	movs	r3, #0
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e0a1      	b.n	80044d8 <UART_SetConfig+0x348>
 8004394:	2302      	movs	r3, #2
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e09e      	b.n	80044d8 <UART_SetConfig+0x348>
 800439a:	2304      	movs	r3, #4
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e09b      	b.n	80044d8 <UART_SetConfig+0x348>
 80043a0:	2308      	movs	r3, #8
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e098      	b.n	80044d8 <UART_SetConfig+0x348>
 80043a6:	2310      	movs	r3, #16
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e095      	b.n	80044d8 <UART_SetConfig+0x348>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2f      	ldr	r2, [pc, #188]	; (8004470 <UART_SetConfig+0x2e0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d125      	bne.n	8004402 <UART_SetConfig+0x272>
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <UART_SetConfig+0x2cc>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c4:	d017      	beq.n	80043f6 <UART_SetConfig+0x266>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ca:	d817      	bhi.n	80043fc <UART_SetConfig+0x26c>
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d0:	d00b      	beq.n	80043ea <UART_SetConfig+0x25a>
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d6:	d811      	bhi.n	80043fc <UART_SetConfig+0x26c>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x254>
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d006      	beq.n	80043f0 <UART_SetConfig+0x260>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x26c>
 80043e4:	2301      	movs	r3, #1
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e076      	b.n	80044d8 <UART_SetConfig+0x348>
 80043ea:	2302      	movs	r3, #2
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e073      	b.n	80044d8 <UART_SetConfig+0x348>
 80043f0:	2304      	movs	r3, #4
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e070      	b.n	80044d8 <UART_SetConfig+0x348>
 80043f6:	2308      	movs	r3, #8
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e06d      	b.n	80044d8 <UART_SetConfig+0x348>
 80043fc:	2310      	movs	r3, #16
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e06a      	b.n	80044d8 <UART_SetConfig+0x348>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1b      	ldr	r2, [pc, #108]	; (8004474 <UART_SetConfig+0x2e4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d138      	bne.n	800447e <UART_SetConfig+0x2ee>
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <UART_SetConfig+0x2cc>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800441a:	d017      	beq.n	800444c <UART_SetConfig+0x2bc>
 800441c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004420:	d82a      	bhi.n	8004478 <UART_SetConfig+0x2e8>
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004426:	d00b      	beq.n	8004440 <UART_SetConfig+0x2b0>
 8004428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442c:	d824      	bhi.n	8004478 <UART_SetConfig+0x2e8>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <UART_SetConfig+0x2aa>
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d006      	beq.n	8004446 <UART_SetConfig+0x2b6>
 8004438:	e01e      	b.n	8004478 <UART_SetConfig+0x2e8>
 800443a:	2300      	movs	r3, #0
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e04b      	b.n	80044d8 <UART_SetConfig+0x348>
 8004440:	2302      	movs	r3, #2
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e048      	b.n	80044d8 <UART_SetConfig+0x348>
 8004446:	2304      	movs	r3, #4
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e045      	b.n	80044d8 <UART_SetConfig+0x348>
 800444c:	2308      	movs	r3, #8
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e042      	b.n	80044d8 <UART_SetConfig+0x348>
 8004452:	bf00      	nop
 8004454:	efff69f3 	.word	0xefff69f3
 8004458:	40011000 	.word	0x40011000
 800445c:	40023800 	.word	0x40023800
 8004460:	40004400 	.word	0x40004400
 8004464:	40004800 	.word	0x40004800
 8004468:	40004c00 	.word	0x40004c00
 800446c:	40005000 	.word	0x40005000
 8004470:	40011400 	.word	0x40011400
 8004474:	40007800 	.word	0x40007800
 8004478:	2310      	movs	r3, #16
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e02c      	b.n	80044d8 <UART_SetConfig+0x348>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a72      	ldr	r2, [pc, #456]	; (800464c <UART_SetConfig+0x4bc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d125      	bne.n	80044d4 <UART_SetConfig+0x344>
 8004488:	4b71      	ldr	r3, [pc, #452]	; (8004650 <UART_SetConfig+0x4c0>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004492:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004496:	d017      	beq.n	80044c8 <UART_SetConfig+0x338>
 8004498:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800449c:	d817      	bhi.n	80044ce <UART_SetConfig+0x33e>
 800449e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a2:	d00b      	beq.n	80044bc <UART_SetConfig+0x32c>
 80044a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a8:	d811      	bhi.n	80044ce <UART_SetConfig+0x33e>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <UART_SetConfig+0x326>
 80044ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b2:	d006      	beq.n	80044c2 <UART_SetConfig+0x332>
 80044b4:	e00b      	b.n	80044ce <UART_SetConfig+0x33e>
 80044b6:	2300      	movs	r3, #0
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e00d      	b.n	80044d8 <UART_SetConfig+0x348>
 80044bc:	2302      	movs	r3, #2
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e00a      	b.n	80044d8 <UART_SetConfig+0x348>
 80044c2:	2304      	movs	r3, #4
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e007      	b.n	80044d8 <UART_SetConfig+0x348>
 80044c8:	2308      	movs	r3, #8
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e004      	b.n	80044d8 <UART_SetConfig+0x348>
 80044ce:	2310      	movs	r3, #16
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e001      	b.n	80044d8 <UART_SetConfig+0x348>
 80044d4:	2310      	movs	r3, #16
 80044d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e0:	d15b      	bne.n	800459a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80044e2:	7ffb      	ldrb	r3, [r7, #31]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d828      	bhi.n	800453a <UART_SetConfig+0x3aa>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <UART_SetConfig+0x360>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800451d 	.word	0x0800451d
 80044f8:	08004525 	.word	0x08004525
 80044fc:	0800453b 	.word	0x0800453b
 8004500:	0800452b 	.word	0x0800452b
 8004504:	0800453b 	.word	0x0800453b
 8004508:	0800453b 	.word	0x0800453b
 800450c:	0800453b 	.word	0x0800453b
 8004510:	08004533 	.word	0x08004533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe fe08 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004518:	61b8      	str	r0, [r7, #24]
        break;
 800451a:	e013      	b.n	8004544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800451c:	f7fe fe18 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004520:	61b8      	str	r0, [r7, #24]
        break;
 8004522:	e00f      	b.n	8004544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <UART_SetConfig+0x4c4>)
 8004526:	61bb      	str	r3, [r7, #24]
        break;
 8004528:	e00c      	b.n	8004544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452a:	f7fe fced 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 800452e:	61b8      	str	r0, [r7, #24]
        break;
 8004530:	e008      	b.n	8004544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004536:	61bb      	str	r3, [r7, #24]
        break;
 8004538:	e004      	b.n	8004544 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	77bb      	strb	r3, [r7, #30]
        break;
 8004542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d074      	beq.n	8004634 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	005a      	lsls	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b0f      	cmp	r3, #15
 8004564:	d916      	bls.n	8004594 <UART_SetConfig+0x404>
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456c:	d212      	bcs.n	8004594 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f023 030f 	bic.w	r3, r3, #15
 8004576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	b29b      	uxth	r3, r3
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	b29a      	uxth	r2, r3
 8004584:	89fb      	ldrh	r3, [r7, #14]
 8004586:	4313      	orrs	r3, r2
 8004588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	89fa      	ldrh	r2, [r7, #14]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	e04f      	b.n	8004634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	77bb      	strb	r3, [r7, #30]
 8004598:	e04c      	b.n	8004634 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800459a:	7ffb      	ldrb	r3, [r7, #31]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d828      	bhi.n	80045f2 <UART_SetConfig+0x462>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x418>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045dd 	.word	0x080045dd
 80045b4:	080045f3 	.word	0x080045f3
 80045b8:	080045e3 	.word	0x080045e3
 80045bc:	080045f3 	.word	0x080045f3
 80045c0:	080045f3 	.word	0x080045f3
 80045c4:	080045f3 	.word	0x080045f3
 80045c8:	080045eb 	.word	0x080045eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7fe fdac 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 80045d0:	61b8      	str	r0, [r7, #24]
        break;
 80045d2:	e013      	b.n	80045fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d4:	f7fe fdbc 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 80045d8:	61b8      	str	r0, [r7, #24]
        break;
 80045da:	e00f      	b.n	80045fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045dc:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <UART_SetConfig+0x4c4>)
 80045de:	61bb      	str	r3, [r7, #24]
        break;
 80045e0:	e00c      	b.n	80045fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e2:	f7fe fc91 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 80045e6:	61b8      	str	r0, [r7, #24]
        break;
 80045e8:	e008      	b.n	80045fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ee:	61bb      	str	r3, [r7, #24]
        break;
 80045f0:	e004      	b.n	80045fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	77bb      	strb	r3, [r7, #30]
        break;
 80045fa:	bf00      	nop
    }

    if (pclk != 0U)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d018      	beq.n	8004634 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	085a      	lsrs	r2, r3, #1
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	441a      	add	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b0f      	cmp	r3, #15
 800461a:	d909      	bls.n	8004630 <UART_SetConfig+0x4a0>
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004622:	d205      	bcs.n	8004630 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	b29a      	uxth	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	e001      	b.n	8004634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004640:	7fbb      	ldrb	r3, [r7, #30]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40007c00 	.word	0x40007c00
 8004650:	40023800 	.word	0x40023800
 8004654:	00f42400 	.word	0x00f42400

08004658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01a      	beq.n	800476e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d10a      	bne.n	800476e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047ac:	f7fc ffa2 	bl	80016f4 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d10e      	bne.n	80047de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f831 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e027      	b.n	800482e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d10e      	bne.n	800480a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f81b 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e011      	b.n	800482e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b09c      	sub	sp, #112	; 0x70
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004846:	e0a7      	b.n	8004998 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484e:	f000 80a3 	beq.w	8004998 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004852:	f7fc ff4f 	bl	80016f4 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800485e:	429a      	cmp	r2, r3
 8004860:	d302      	bcc.n	8004868 <UART_WaitOnFlagUntilTimeout+0x32>
 8004862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004864:	2b00      	cmp	r3, #0
 8004866:	d13f      	bne.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800487c:	667b      	str	r3, [r7, #100]	; 0x64
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004888:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800488c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e6      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3308      	adds	r3, #8
 80048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	663b      	str	r3, [r7, #96]	; 0x60
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e068      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d050      	beq.n	8004998 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004904:	d148      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800490e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
 8004930:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e6      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	66bb      	str	r3, [r7, #104]	; 0x68
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3308      	adds	r3, #8
 8004960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004962:	623a      	str	r2, [r7, #32]
 8004964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	69f9      	ldr	r1, [r7, #28]
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e010      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	f43f af48 	beq.w	8004848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3770      	adds	r7, #112	; 0x70
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80049c2:	b480      	push	{r7}
 80049c4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d6:	f3ef 8305 	mrs	r3, IPSR
 80049da:	60bb      	str	r3, [r7, #8]
  return(result);
 80049dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e2:	f3ef 8310 	mrs	r3, PRIMASK
 80049e6:	607b      	str	r3, [r7, #4]
  return(result);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d105      	bne.n	80049fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049ee:	f3ef 8311 	mrs	r3, BASEPRI
 80049f2:	603b      	str	r3, [r7, #0]
  return(result);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <osKernelInitialize+0x3a>
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <osKernelInitialize+0x64>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d103      	bne.n	8004a0a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a02:	f06f 0305 	mvn.w	r3, #5
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e00c      	b.n	8004a24 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <osKernelInitialize+0x64>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d105      	bne.n	8004a1e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <osKernelInitialize+0x64>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e002      	b.n	8004a24 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000370 	.word	0x20000370

08004a38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a3e:	f3ef 8305 	mrs	r3, IPSR
 8004a42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4e:	607b      	str	r3, [r7, #4]
  return(result);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a56:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <osKernelStart+0x3a>
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <osKernelStart+0x68>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d103      	bne.n	8004a72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004a6a:	f06f 0305 	mvn.w	r3, #5
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e010      	b.n	8004a94 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <osKernelStart+0x68>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d109      	bne.n	8004a8e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a7a:	f7ff ffa2 	bl	80049c2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <osKernelStart+0x68>)
 8004a80:	2202      	movs	r2, #2
 8004a82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a84:	f001 f8ca 	bl	8005c1c <vTaskStartScheduler>
      stat = osOK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e002      	b.n	8004a94 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a94:	68fb      	ldr	r3, [r7, #12]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000370 	.word	0x20000370

08004aa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b090      	sub	sp, #64	; 0x40
 8004aa8:	af04      	add	r7, sp, #16
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ab4:	f3ef 8305 	mrs	r3, IPSR
 8004ab8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004aba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 808f 	bne.w	8004be0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d105      	bne.n	8004ada <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ace:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <osThreadNew+0x3e>
 8004ada:	4b44      	ldr	r3, [pc, #272]	; (8004bec <osThreadNew+0x148>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d07e      	beq.n	8004be0 <osThreadNew+0x13c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d07b      	beq.n	8004be0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004aec:	2318      	movs	r3, #24
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d045      	beq.n	8004b8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <osThreadNew+0x6a>
        name = attr->name;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <osThreadNew+0x90>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	2b38      	cmp	r3, #56	; 0x38
 8004b26:	d805      	bhi.n	8004b34 <osThreadNew+0x90>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <osThreadNew+0x94>
        return (NULL);
 8004b34:	2300      	movs	r3, #0
 8004b36:	e054      	b.n	8004be2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00e      	beq.n	8004b6e <osThreadNew+0xca>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2bbb      	cmp	r3, #187	; 0xbb
 8004b56:	d90a      	bls.n	8004b6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <osThreadNew+0xca>
        mem = 1;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	e010      	b.n	8004b90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <osThreadNew+0xec>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <osThreadNew+0xec>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <osThreadNew+0xec>
          mem = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	e001      	b.n	8004b90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d110      	bne.n	8004bb8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b9e:	9202      	str	r2, [sp, #8]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fe3f 	bl	8005830 <xTaskCreateStatic>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	e013      	b.n	8004be0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d110      	bne.n	8004be0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f107 0310 	add.w	r3, r7, #16
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fe90 	bl	80058f6 <xTaskCreate>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d001      	beq.n	8004be0 <osThreadNew+0x13c>
          hTask = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004be0:	693b      	ldr	r3, [r7, #16]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3730      	adds	r7, #48	; 0x30
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000370 	.word	0x20000370

08004bf0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf8:	f3ef 8305 	mrs	r3, IPSR
 8004bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8004bfe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10f      	bne.n	8004c24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c04:	f3ef 8310 	mrs	r3, PRIMASK
 8004c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c10:	f3ef 8311 	mrs	r3, BASEPRI
 8004c14:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <osDelay+0x3c>
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <osDelay+0x58>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d103      	bne.n	8004c2c <osDelay+0x3c>
    stat = osErrorISR;
 8004c24:	f06f 0305 	mvn.w	r3, #5
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e007      	b.n	8004c3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 ffba 	bl	8005bb0 <vTaskDelay>
    }
  }

  return (stat);
 8004c3c:	697b      	ldr	r3, [r7, #20]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000370 	.word	0x20000370

08004c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a06      	ldr	r2, [pc, #24]	; (8004c7c <vApplicationGetIdleTaskMemory+0x30>)
 8004c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000374 	.word	0x20000374
 8004c7c:	20000430 	.word	0x20000430

08004c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a07      	ldr	r2, [pc, #28]	; (8004cac <vApplicationGetTimerTaskMemory+0x2c>)
 8004c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8004c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000630 	.word	0x20000630
 8004cb0:	200006ec 	.word	0x200006ec

08004cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f103 0208 	add.w	r2, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f103 0208 	add.w	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f103 0208 	add.w	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	601a      	str	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6c:	d103      	bne.n	8004d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e00c      	b.n	8004d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e002      	b.n	8004d84 <vListInsert+0x2e>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d2f6      	bcs.n	8004d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6892      	ldr	r2, [r2, #8]
 8004dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6852      	ldr	r2, [r2, #4]
 8004de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d103      	bne.n	8004dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1e5a      	subs	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10c      	bne.n	8004e4a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	b672      	cpsid	i
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	b662      	cpsie	i
 8004e44:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004e4a:	f002 f8a7 	bl	8006f9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	441a      	add	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	22ff      	movs	r2, #255	; 0xff
 8004e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d114      	bne.n	8004eca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01a      	beq.n	8004ede <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3310      	adds	r3, #16
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 f95d 	bl	800616c <xTaskRemoveFromEventList>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d012      	beq.n	8004ede <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <xQueueGenericReset+0xd0>)
 8004eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	e009      	b.n	8004ede <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3310      	adds	r3, #16
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fef0 	bl	8004cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3324      	adds	r3, #36	; 0x24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff feeb 	bl	8004cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ede:	f002 f891 	bl	8007004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ee2:	2301      	movs	r3, #1
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08e      	sub	sp, #56	; 0x38
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10c      	bne.n	8004f1e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	b672      	cpsid	i
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	b662      	cpsie	i
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10c      	bne.n	8004f3e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	b672      	cpsid	i
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	b662      	cpsie	i
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <xQueueGenericCreateStatic+0x5a>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <xQueueGenericCreateStatic+0x5e>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <xQueueGenericCreateStatic+0x60>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10c      	bne.n	8004f6e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	b672      	cpsid	i
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	b662      	cpsie	i
 8004f68:	623b      	str	r3, [r7, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <xQueueGenericCreateStatic+0x8a>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <xQueueGenericCreateStatic+0x8e>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <xQueueGenericCreateStatic+0x90>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10c      	bne.n	8004f9e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	b672      	cpsid	i
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	b662      	cpsie	i
 8004f98:	61fb      	str	r3, [r7, #28]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f9e:	2350      	movs	r3, #80	; 0x50
 8004fa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b50      	cmp	r3, #80	; 0x50
 8004fa6:	d00c      	beq.n	8004fc2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	b672      	cpsid	i
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	b662      	cpsie	i
 8004fbc:	61bb      	str	r3, [r7, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f805 	bl	8004ff4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3730      	adds	r7, #48	; 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e002      	b.n	8005016 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005022:	2101      	movs	r1, #1
 8005024:	69b8      	ldr	r0, [r7, #24]
 8005026:	f7ff fef9 	bl	8004e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	; 0x38
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800504a:	2300      	movs	r3, #0
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10c      	bne.n	8005072 <xQueueGenericSend+0x36>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	b672      	cpsid	i
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	b662      	cpsie	i
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d103      	bne.n	8005080 <xQueueGenericSend+0x44>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <xQueueGenericSend+0x48>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <xQueueGenericSend+0x4a>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10c      	bne.n	80050a4 <xQueueGenericSend+0x68>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	b672      	cpsid	i
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	b662      	cpsie	i
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSend+0x76>
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <xQueueGenericSend+0x7a>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericSend+0x7c>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10c      	bne.n	80050d6 <xQueueGenericSend+0x9a>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	b672      	cpsid	i
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	b662      	cpsie	i
 80050d0:	623b      	str	r3, [r7, #32]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050d6:	f001 fa13 	bl	8006500 <xTaskGetSchedulerState>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <xQueueGenericSend+0xaa>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <xQueueGenericSend+0xae>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <xQueueGenericSend+0xb0>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <xQueueGenericSend+0xce>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	b672      	cpsid	i
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	b662      	cpsie	i
 8005104:	61fb      	str	r3, [r7, #28]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800510a:	f001 ff47 	bl	8006f9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <xQueueGenericSend+0xe4>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d129      	bne.n	8005174 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005126:	f000 fa15 	bl	8005554 <prvCopyDataToQueue>
 800512a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d010      	beq.n	8005156 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	4618      	mov	r0, r3
 800513a:	f001 f817 	bl	800616c <xTaskRemoveFromEventList>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005144:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <xQueueGenericSend+0x208>)
 8005146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	e00a      	b.n	800516c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800515c:	4b39      	ldr	r3, [pc, #228]	; (8005244 <xQueueGenericSend+0x208>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800516c:	f001 ff4a 	bl	8007004 <vPortExitCritical>
				return pdPASS;
 8005170:	2301      	movs	r3, #1
 8005172:	e063      	b.n	800523c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800517a:	f001 ff43 	bl	8007004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800517e:	2300      	movs	r3, #0
 8005180:	e05c      	b.n	800523c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005188:	f107 0314 	add.w	r3, r7, #20
 800518c:	4618      	mov	r0, r3
 800518e:	f001 f853 	bl	8006238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005196:	f001 ff35 	bl	8007004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800519a:	f000 fdb3 	bl	8005d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800519e:	f001 fefd 	bl	8006f9c <vPortEnterCritical>
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a8:	b25b      	sxtb	r3, r3
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ae:	d103      	bne.n	80051b8 <xQueueGenericSend+0x17c>
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c4:	d103      	bne.n	80051ce <xQueueGenericSend+0x192>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ce:	f001 ff19 	bl	8007004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d2:	1d3a      	adds	r2, r7, #4
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	4611      	mov	r1, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 f842 	bl	8006264 <xTaskCheckForTimeOut>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d124      	bne.n	8005230 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051e8:	f000 faac 	bl	8005744 <prvIsQueueFull>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d018      	beq.n	8005224 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	3310      	adds	r3, #16
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 ff62 	bl	80060c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005202:	f000 fa37 	bl	8005674 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005206:	f000 fd8b 	bl	8005d20 <xTaskResumeAll>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f af7c 	bne.w	800510a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <xQueueGenericSend+0x208>)
 8005214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	e772      	b.n	800510a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005226:	f000 fa25 	bl	8005674 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800522a:	f000 fd79 	bl	8005d20 <xTaskResumeAll>
 800522e:	e76c      	b.n	800510a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005232:	f000 fa1f 	bl	8005674 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005236:	f000 fd73 	bl	8005d20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800523a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800523c:	4618      	mov	r0, r3
 800523e:	3738      	adds	r7, #56	; 0x38
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08e      	sub	sp, #56	; 0x38
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10c      	bne.n	800527a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	b672      	cpsid	i
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	b662      	cpsie	i
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <xQueueGenericSendFromISR+0x40>
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <xQueueGenericSendFromISR+0x44>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <xQueueGenericSendFromISR+0x46>
 800528c:	2300      	movs	r3, #0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	b672      	cpsid	i
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	b662      	cpsie	i
 80052a6:	623b      	str	r3, [r7, #32]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSendFromISR+0x72>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <xQueueGenericSendFromISR+0x76>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericSendFromISR+0x78>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10c      	bne.n	80052de <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	b672      	cpsid	i
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	b662      	cpsie	i
 80052d8:	61fb      	str	r3, [r7, #28]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052de:	f001 ff45 	bl	800716c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052e2:	f3ef 8211 	mrs	r2, BASEPRI
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	b672      	cpsid	i
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	b662      	cpsie	i
 80052fa:	61ba      	str	r2, [r7, #24]
 80052fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <xQueueGenericSendFromISR+0xcc>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d12c      	bne.n	800536e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005324:	f000 f916 	bl	8005554 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005328:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005330:	d112      	bne.n	8005358 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d016      	beq.n	8005368 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	4618      	mov	r0, r3
 8005340:	f000 ff14 	bl	800616c <xTaskRemoveFromEventList>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e007      	b.n	8005368 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800535c:	3301      	adds	r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	b25a      	sxtb	r2, r3
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005368:	2301      	movs	r3, #1
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800536c:	e001      	b.n	8005372 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800537c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005380:	4618      	mov	r0, r3
 8005382:	3738      	adds	r7, #56	; 0x38
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	; 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <xQueueReceive+0x34>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	b672      	cpsid	i
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	b662      	cpsie	i
 80053b6:	623b      	str	r3, [r7, #32]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <xQueueReceive+0x42>
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <xQueueReceive+0x46>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <xQueueReceive+0x48>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10c      	bne.n	80053ee <xQueueReceive+0x66>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	b672      	cpsid	i
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	b662      	cpsie	i
 80053e8:	61fb      	str	r3, [r7, #28]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ee:	f001 f887 	bl	8006500 <xTaskGetSchedulerState>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <xQueueReceive+0x76>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <xQueueReceive+0x7a>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueReceive+0x7c>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10c      	bne.n	8005422 <xQueueReceive+0x9a>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	b672      	cpsid	i
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	b662      	cpsie	i
 800541c:	61bb      	str	r3, [r7, #24]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005422:	f001 fdbb 	bl	8006f9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01f      	beq.n	8005472 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005436:	f000 f8f7 	bl	8005628 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	1e5a      	subs	r2, r3, #1
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00f      	beq.n	800546a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	3310      	adds	r3, #16
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fe8c 	bl	800616c <xTaskRemoveFromEventList>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800545a:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <xQueueReceive+0x1c8>)
 800545c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800546a:	f001 fdcb 	bl	8007004 <vPortExitCritical>
				return pdPASS;
 800546e:	2301      	movs	r3, #1
 8005470:	e069      	b.n	8005546 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005478:	f001 fdc4 	bl	8007004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800547c:	2300      	movs	r3, #0
 800547e:	e062      	b.n	8005546 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005486:	f107 0310 	add.w	r3, r7, #16
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fed4 	bl	8006238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005494:	f001 fdb6 	bl	8007004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005498:	f000 fc34 	bl	8005d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800549c:	f001 fd7e 	bl	8006f9c <vPortEnterCritical>
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054a6:	b25b      	sxtb	r3, r3
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ac:	d103      	bne.n	80054b6 <xQueueReceive+0x12e>
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054bc:	b25b      	sxtb	r3, r3
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c2:	d103      	bne.n	80054cc <xQueueReceive+0x144>
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054cc:	f001 fd9a 	bl	8007004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054d0:	1d3a      	adds	r2, r7, #4
 80054d2:	f107 0310 	add.w	r3, r7, #16
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fec3 	bl	8006264 <xTaskCheckForTimeOut>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d123      	bne.n	800552c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e6:	f000 f917 	bl	8005718 <prvIsQueueEmpty>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d017      	beq.n	8005520 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	3324      	adds	r3, #36	; 0x24
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fde3 	bl	80060c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005500:	f000 f8b8 	bl	8005674 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005504:	f000 fc0c 	bl	8005d20 <xTaskResumeAll>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d189      	bne.n	8005422 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <xQueueReceive+0x1c8>)
 8005510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	e780      	b.n	8005422 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005522:	f000 f8a7 	bl	8005674 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005526:	f000 fbfb 	bl	8005d20 <xTaskResumeAll>
 800552a:	e77a      	b.n	8005422 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800552c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552e:	f000 f8a1 	bl	8005674 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005532:	f000 fbf5 	bl	8005d20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005538:	f000 f8ee 	bl	8005718 <prvIsQueueEmpty>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	f43f af6f 	beq.w	8005422 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005544:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005546:	4618      	mov	r0, r3
 8005548:	3730      	adds	r7, #48	; 0x30
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10d      	bne.n	800558e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d14d      	bne.n	8005616 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 ffdc 	bl	800653c <xTaskPriorityDisinherit>
 8005584:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	e043      	b.n	8005616 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d119      	bne.n	80055c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6858      	ldr	r0, [r3, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	461a      	mov	r2, r3
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	f002 f92f 	bl	8007802 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d32b      	bcc.n	8005616 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	e026      	b.n	8005616 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68d8      	ldr	r0, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	461a      	mov	r2, r3
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	f002 f915 	bl	8007802 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	425b      	negs	r3, r3
 80055e2:	441a      	add	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d207      	bcs.n	8005604 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	425b      	negs	r3, r3
 80055fe:	441a      	add	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d105      	bne.n	8005616 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3b01      	subs	r3, #1
 8005614:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800561e:	697b      	ldr	r3, [r7, #20]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d018      	beq.n	800566c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	441a      	add	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	d303      	bcc.n	800565c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68d9      	ldr	r1, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	461a      	mov	r2, r3
 8005666:	6838      	ldr	r0, [r7, #0]
 8005668:	f002 f8cb 	bl	8007802 <memcpy>
	}
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800567c:	f001 fc8e 	bl	8006f9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005686:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005688:	e011      	b.n	80056ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d012      	beq.n	80056b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3324      	adds	r3, #36	; 0x24
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fd68 	bl	800616c <xTaskRemoveFromEventList>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056a2:	f000 fe45 	bl	8006330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	dce9      	bgt.n	800568a <prvUnlockQueue+0x16>
 80056b6:	e000      	b.n	80056ba <prvUnlockQueue+0x46>
					break;
 80056b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	22ff      	movs	r2, #255	; 0xff
 80056be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056c2:	f001 fc9f 	bl	8007004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056c6:	f001 fc69 	bl	8006f9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056d2:	e011      	b.n	80056f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3310      	adds	r3, #16
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd43 	bl	800616c <xTaskRemoveFromEventList>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056ec:	f000 fe20 	bl	8006330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dce9      	bgt.n	80056d4 <prvUnlockQueue+0x60>
 8005700:	e000      	b.n	8005704 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005702:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	22ff      	movs	r2, #255	; 0xff
 8005708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800570c:	f001 fc7a 	bl	8007004 <vPortExitCritical>
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005720:	f001 fc3c 	bl	8006f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e001      	b.n	8005736 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005736:	f001 fc65 	bl	8007004 <vPortExitCritical>

	return xReturn;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800574c:	f001 fc26 	bl	8006f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005758:	429a      	cmp	r2, r3
 800575a:	d102      	bne.n	8005762 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e001      	b.n	8005766 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005766:	f001 fc4d 	bl	8007004 <vPortExitCritical>

	return xReturn;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e014      	b.n	80057ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005784:	4a0f      	ldr	r2, [pc, #60]	; (80057c4 <vQueueAddToRegistry+0x50>)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005790:	490c      	ldr	r1, [pc, #48]	; (80057c4 <vQueueAddToRegistry+0x50>)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <vQueueAddToRegistry+0x50>)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057a6:	e006      	b.n	80057b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b07      	cmp	r3, #7
 80057b2:	d9e7      	bls.n	8005784 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000aec 	.word	0x20000aec

080057c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057d8:	f001 fbe0 	bl	8006f9c <vPortEnterCritical>
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e8:	d103      	bne.n	80057f2 <vQueueWaitForMessageRestricted+0x2a>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f8:	b25b      	sxtb	r3, r3
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fe:	d103      	bne.n	8005808 <vQueueWaitForMessageRestricted+0x40>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005808:	f001 fbfc 	bl	8007004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3324      	adds	r3, #36	; 0x24
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fc77 	bl	8006110 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005822:	6978      	ldr	r0, [r7, #20]
 8005824:	f7ff ff26 	bl	8005674 <prvUnlockQueue>
	}
 8005828:	bf00      	nop
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	; 0x38
 8005834:	af04      	add	r7, sp, #16
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10c      	bne.n	800585e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	b672      	cpsid	i
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	b662      	cpsie	i
 8005858:	623b      	str	r3, [r7, #32]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10c      	bne.n	800587e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	b672      	cpsid	i
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	b662      	cpsie	i
 8005878:	61fb      	str	r3, [r7, #28]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800587e:	23bc      	movs	r3, #188	; 0xbc
 8005880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2bbc      	cmp	r3, #188	; 0xbc
 8005886:	d00c      	beq.n	80058a2 <xTaskCreateStatic+0x72>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	b672      	cpsid	i
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	b662      	cpsie	i
 800589c:	61bb      	str	r3, [r7, #24]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01e      	beq.n	80058e8 <xTaskCreateStatic+0xb8>
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01b      	beq.n	80058e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058c2:	2300      	movs	r3, #0
 80058c4:	9303      	str	r3, [sp, #12]
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	f107 0314 	add.w	r3, r7, #20
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f850 	bl	8005980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058e2:	f000 f8f5 	bl	8005ad0 <prvAddNewTaskToReadyList>
 80058e6:	e001      	b.n	80058ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058ec:	697b      	ldr	r3, [r7, #20]
	}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3728      	adds	r7, #40	; 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b08c      	sub	sp, #48	; 0x30
 80058fa:	af04      	add	r7, sp, #16
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	603b      	str	r3, [r7, #0]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4618      	mov	r0, r3
 800590c:	f001 fc72 	bl	80071f4 <pvPortMalloc>
 8005910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00e      	beq.n	8005936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005918:	20bc      	movs	r0, #188	; 0xbc
 800591a:	f001 fc6b 	bl	80071f4 <pvPortMalloc>
 800591e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
 800592c:	e005      	b.n	800593a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800592e:	6978      	ldr	r0, [r7, #20]
 8005930:	f001 fd2a 	bl	8007388 <vPortFree>
 8005934:	e001      	b.n	800593a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d017      	beq.n	8005970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	2300      	movs	r3, #0
 800594c:	9303      	str	r3, [sp, #12]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f80e 	bl	8005980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005964:	69f8      	ldr	r0, [r7, #28]
 8005966:	f000 f8b3 	bl	8005ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800596a:	2301      	movs	r3, #1
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	e002      	b.n	8005976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005976:	69bb      	ldr	r3, [r7, #24]
	}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	461a      	mov	r2, r3
 8005998:	21a5      	movs	r1, #165	; 0xa5
 800599a:	f001 ff40 	bl	800781e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80059a8:	440b      	add	r3, r1
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f023 0307 	bic.w	r3, r3, #7
 80059b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	b672      	cpsid	i
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	b662      	cpsie	i
 80059d6:	617b      	str	r3, [r7, #20]
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01f      	beq.n	8005a22 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	e012      	b.n	8005a0e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	7819      	ldrb	r1, [r3, #0]
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	3334      	adds	r3, #52	; 0x34
 80059f8:	460a      	mov	r2, r1
 80059fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	2b0f      	cmp	r3, #15
 8005a12:	d9e9      	bls.n	80059e8 <prvInitialiseNewTask+0x68>
 8005a14:	e000      	b.n	8005a18 <prvInitialiseNewTask+0x98>
			{
				break;
 8005a16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a20:	e003      	b.n	8005a2a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b37      	cmp	r3, #55	; 0x37
 8005a2e:	d901      	bls.n	8005a34 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a30:	2337      	movs	r3, #55	; 0x37
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff f952 	bl	8004cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	3318      	adds	r3, #24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff f94d 	bl	8004cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	3354      	adds	r3, #84	; 0x54
 8005a84:	2260      	movs	r2, #96	; 0x60
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 fec8 	bl	800781e <memset>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	4a0c      	ldr	r2, [pc, #48]	; (8005ac4 <prvInitialiseNewTask+0x144>)
 8005a92:	659a      	str	r2, [r3, #88]	; 0x58
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <prvInitialiseNewTask+0x148>)
 8005a98:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <prvInitialiseNewTask+0x14c>)
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	69b8      	ldr	r0, [r7, #24]
 8005aa6:	f001 f96b 	bl	8006d80 <pxPortInitialiseStack>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005abc:	bf00      	nop
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	0800bed8 	.word	0x0800bed8
 8005ac8:	0800bef8 	.word	0x0800bef8
 8005acc:	0800beb8 	.word	0x0800beb8

08005ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ad8:	f001 fa60 	bl	8006f9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d110      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005afc:	f000 fc3c 	bl	8006378 <prvInitialiseTaskLists>
 8005b00:	e00d      	b.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d802      	bhi.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b1e:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <prvAddNewTaskToReadyList+0xd4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <prvAddNewTaskToReadyList+0x74>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <prvAddNewTaskToReadyList+0xd4>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <prvAddNewTaskToReadyList+0xd8>)
 8005b52:	441a      	add	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7ff f8d7 	bl	8004d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b60:	f001 fa50 	bl	8007004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d207      	bcs.n	8005b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <prvAddNewTaskToReadyList+0xdc>)
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20001000 	.word	0x20001000
 8005b98:	20000b2c 	.word	0x20000b2c
 8005b9c:	2000100c 	.word	0x2000100c
 8005ba0:	2000101c 	.word	0x2000101c
 8005ba4:	20001008 	.word	0x20001008
 8005ba8:	20000b30 	.word	0x20000b30
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d019      	beq.n	8005bf6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <vTaskDelay+0x64>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00c      	beq.n	8005be4 <vTaskDelay+0x34>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	b672      	cpsid	i
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	b662      	cpsie	i
 8005bde:	60bb      	str	r3, [r7, #8]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005be4:	f000 f88e 	bl	8005d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005be8:	2100      	movs	r1, #0
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fd18 	bl	8006620 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bf0:	f000 f896 	bl	8005d20 <xTaskResumeAll>
 8005bf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d107      	bne.n	8005c0c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <vTaskDelay+0x68>)
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20001028 	.word	0x20001028
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	; 0x28
 8005c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	1d39      	adds	r1, r7, #4
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f80a 	bl	8004c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	9202      	str	r2, [sp, #8]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	2300      	movs	r3, #0
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2300      	movs	r3, #0
 8005c48:	460a      	mov	r2, r1
 8005c4a:	4926      	ldr	r1, [pc, #152]	; (8005ce4 <vTaskStartScheduler+0xc8>)
 8005c4c:	4826      	ldr	r0, [pc, #152]	; (8005ce8 <vTaskStartScheduler+0xcc>)
 8005c4e:	f7ff fdef 	bl	8005830 <xTaskCreateStatic>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4a25      	ldr	r2, [pc, #148]	; (8005cec <vTaskStartScheduler+0xd0>)
 8005c56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c58:	4b24      	ldr	r3, [pc, #144]	; (8005cec <vTaskStartScheduler+0xd0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e001      	b.n	8005c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d102      	bne.n	8005c76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c70:	f000 fd2a 	bl	80066c8 <xTimerCreateTimerTask>
 8005c74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d11d      	bne.n	8005cb8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	b672      	cpsid	i
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	b662      	cpsie	i
 8005c90:	613b      	str	r3, [r7, #16]
}
 8005c92:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <vTaskStartScheduler+0xd4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3354      	adds	r3, #84	; 0x54
 8005c9a:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <vTaskStartScheduler+0xd8>)
 8005c9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c9e:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <vTaskStartScheduler+0xdc>)
 8005ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <vTaskStartScheduler+0xe0>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cac:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <vTaskStartScheduler+0xe4>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cb2:	f001 f8f5 	bl	8006ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cb6:	e010      	b.n	8005cda <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cbe:	d10c      	bne.n	8005cda <vTaskStartScheduler+0xbe>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	b672      	cpsid	i
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	b662      	cpsie	i
 8005cd4:	60fb      	str	r3, [r7, #12]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <vTaskStartScheduler+0xbc>
}
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	0800be40 	.word	0x0800be40
 8005ce8:	08006349 	.word	0x08006349
 8005cec:	20001024 	.word	0x20001024
 8005cf0:	20000b2c 	.word	0x20000b2c
 8005cf4:	20000010 	.word	0x20000010
 8005cf8:	20001020 	.word	0x20001020
 8005cfc:	2000100c 	.word	0x2000100c
 8005d00:	20001004 	.word	0x20001004

08005d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d08:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	4a03      	ldr	r2, [pc, #12]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20001028 	.word	0x20001028

08005d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d2e:	4b43      	ldr	r3, [pc, #268]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <xTaskResumeAll+0x30>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	b672      	cpsid	i
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	b662      	cpsie	i
 8005d4a:	603b      	str	r3, [r7, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d50:	f001 f924 	bl	8006f9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d54:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005d5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5e:	4b37      	ldr	r3, [pc, #220]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d162      	bne.n	8005e2c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d66:	4b36      	ldr	r3, [pc, #216]	; (8005e40 <xTaskResumeAll+0x120>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d05e      	beq.n	8005e2c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6e:	e02f      	b.n	8005dd0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d70:	4b34      	ldr	r3, [pc, #208]	; (8005e44 <xTaskResumeAll+0x124>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff f823 	bl	8004dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff f81e 	bl	8004dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d90:	4b2d      	ldr	r3, [pc, #180]	; (8005e48 <xTaskResumeAll+0x128>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d903      	bls.n	8005da0 <xTaskResumeAll+0x80>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <xTaskResumeAll+0x128>)
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005dae:	441a      	add	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fe ffa9 	bl	8004d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <xTaskResumeAll+0x130>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005dca:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <xTaskResumeAll+0x134>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dd0:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <xTaskResumeAll+0x124>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1cb      	bne.n	8005d70 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dde:	f000 fb6f 	bl	80064c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <xTaskResumeAll+0x138>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d010      	beq.n	8005e10 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dee:	f000 f847 	bl	8005e80 <xTaskIncrementTick>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005df8:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <xTaskResumeAll+0x134>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f1      	bne.n	8005dee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <xTaskResumeAll+0x138>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e10:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <xTaskResumeAll+0x134>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTaskResumeAll+0x13c>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e2c:	f001 f8ea 	bl	8007004 <vPortExitCritical>

	return xAlreadyYielded;
 8005e30:	68bb      	ldr	r3, [r7, #8]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20001028 	.word	0x20001028
 8005e40:	20001000 	.word	0x20001000
 8005e44:	20000fc0 	.word	0x20000fc0
 8005e48:	20001008 	.word	0x20001008
 8005e4c:	20000b30 	.word	0x20000b30
 8005e50:	20000b2c 	.word	0x20000b2c
 8005e54:	20001014 	.word	0x20001014
 8005e58:	20001010 	.word	0x20001010
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e66:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <xTaskGetTickCount+0x1c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e6c:	687b      	ldr	r3, [r7, #4]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20001004 	.word	0x20001004

08005e80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e8a:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <xTaskIncrementTick+0x14c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 808b 	bne.w	8005faa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e94:	4b4e      	ldr	r3, [pc, #312]	; (8005fd0 <xTaskIncrementTick+0x150>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e9c:	4a4c      	ldr	r2, [pc, #304]	; (8005fd0 <xTaskIncrementTick+0x150>)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d122      	bne.n	8005eee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ea8:	4b4a      	ldr	r3, [pc, #296]	; (8005fd4 <xTaskIncrementTick+0x154>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <xTaskIncrementTick+0x4c>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	b672      	cpsid	i
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	b662      	cpsie	i
 8005ec6:	603b      	str	r3, [r7, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <xTaskIncrementTick+0x4a>
 8005ecc:	4b41      	ldr	r3, [pc, #260]	; (8005fd4 <xTaskIncrementTick+0x154>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <xTaskIncrementTick+0x158>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a3f      	ldr	r2, [pc, #252]	; (8005fd4 <xTaskIncrementTick+0x154>)
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	4a3f      	ldr	r2, [pc, #252]	; (8005fd8 <xTaskIncrementTick+0x158>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4b3e      	ldr	r3, [pc, #248]	; (8005fdc <xTaskIncrementTick+0x15c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	4a3d      	ldr	r2, [pc, #244]	; (8005fdc <xTaskIncrementTick+0x15c>)
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	f000 fae9 	bl	80064c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eee:	4b3c      	ldr	r3, [pc, #240]	; (8005fe0 <xTaskIncrementTick+0x160>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d349      	bcc.n	8005f8c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ef8:	4b36      	ldr	r3, [pc, #216]	; (8005fd4 <xTaskIncrementTick+0x154>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f02:	4b37      	ldr	r3, [pc, #220]	; (8005fe0 <xTaskIncrementTick+0x160>)
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f08:	601a      	str	r2, [r3, #0]
					break;
 8005f0a:	e03f      	b.n	8005f8c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b31      	ldr	r3, [pc, #196]	; (8005fd4 <xTaskIncrementTick+0x154>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d203      	bcs.n	8005f2c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f24:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <xTaskIncrementTick+0x160>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f2a:	e02f      	b.n	8005f8c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe ff49 	bl	8004dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	3318      	adds	r3, #24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe ff40 	bl	8004dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <xTaskIncrementTick+0x164>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <xTaskIncrementTick+0xdc>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	4a22      	ldr	r2, [pc, #136]	; (8005fe4 <xTaskIncrementTick+0x164>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <xTaskIncrementTick+0x168>)
 8005f6a:	441a      	add	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7fe fecb 	bl	8004d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <xTaskIncrementTick+0x16c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d3b8      	bcc.n	8005ef8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005f86:	2301      	movs	r3, #1
 8005f88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f8a:	e7b5      	b.n	8005ef8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <xTaskIncrementTick+0x16c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f92:	4915      	ldr	r1, [pc, #84]	; (8005fe8 <xTaskIncrementTick+0x168>)
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d907      	bls.n	8005fb4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e004      	b.n	8005fb4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <xTaskIncrementTick+0x170>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ff0 <xTaskIncrementTick+0x170>)
 8005fb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <xTaskIncrementTick+0x174>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fc0:	697b      	ldr	r3, [r7, #20]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20001028 	.word	0x20001028
 8005fd0:	20001004 	.word	0x20001004
 8005fd4:	20000fb8 	.word	0x20000fb8
 8005fd8:	20000fbc 	.word	0x20000fbc
 8005fdc:	20001018 	.word	0x20001018
 8005fe0:	20001020 	.word	0x20001020
 8005fe4:	20001008 	.word	0x20001008
 8005fe8:	20000b30 	.word	0x20000b30
 8005fec:	20000b2c 	.word	0x20000b2c
 8005ff0:	20001010 	.word	0x20001010
 8005ff4:	20001014 	.word	0x20001014

08005ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ffe:	4b2b      	ldr	r3, [pc, #172]	; (80060ac <vTaskSwitchContext+0xb4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <vTaskSwitchContext+0xb8>)
 8006008:	2201      	movs	r2, #1
 800600a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800600c:	e048      	b.n	80060a0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800600e:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <vTaskSwitchContext+0xb8>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006014:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <vTaskSwitchContext+0xbc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	e012      	b.n	8006042 <vTaskSwitchContext+0x4a>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10c      	bne.n	800603c <vTaskSwitchContext+0x44>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	b672      	cpsid	i
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	b662      	cpsie	i
 8006036:	607b      	str	r3, [r7, #4]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <vTaskSwitchContext+0x42>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3b01      	subs	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	491d      	ldr	r1, [pc, #116]	; (80060b8 <vTaskSwitchContext+0xc0>)
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0e2      	beq.n	800601c <vTaskSwitchContext+0x24>
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <vTaskSwitchContext+0xc0>)
 8006062:	4413      	add	r3, r2
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	605a      	str	r2, [r3, #4]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	3308      	adds	r3, #8
 8006078:	429a      	cmp	r2, r3
 800607a:	d104      	bne.n	8006086 <vTaskSwitchContext+0x8e>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	605a      	str	r2, [r3, #4]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4a0b      	ldr	r2, [pc, #44]	; (80060bc <vTaskSwitchContext+0xc4>)
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	4a08      	ldr	r2, [pc, #32]	; (80060b4 <vTaskSwitchContext+0xbc>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006096:	4b09      	ldr	r3, [pc, #36]	; (80060bc <vTaskSwitchContext+0xc4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3354      	adds	r3, #84	; 0x54
 800609c:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <vTaskSwitchContext+0xc8>)
 800609e:	6013      	str	r3, [r2, #0]
}
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20001028 	.word	0x20001028
 80060b0:	20001014 	.word	0x20001014
 80060b4:	20001008 	.word	0x20001008
 80060b8:	20000b30 	.word	0x20000b30
 80060bc:	20000b2c 	.word	0x20000b2c
 80060c0:	20000010 	.word	0x20000010

080060c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10c      	bne.n	80060ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	b672      	cpsid	i
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	b662      	cpsie	i
 80060e8:	60fb      	str	r3, [r7, #12]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <vTaskPlaceOnEventList+0x48>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3318      	adds	r3, #24
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fe fe2d 	bl	8004d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060fc:	2101      	movs	r1, #1
 80060fe:	6838      	ldr	r0, [r7, #0]
 8006100:	f000 fa8e 	bl	8006620 <prvAddCurrentTaskToDelayedList>
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000b2c 	.word	0x20000b2c

08006110 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10c      	bne.n	800613c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	b672      	cpsid	i
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	b662      	cpsie	i
 8006136:	617b      	str	r3, [r7, #20]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <vTaskPlaceOnEventListRestricted+0x58>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3318      	adds	r3, #24
 8006142:	4619      	mov	r1, r3
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7fe fde2 	bl	8004d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006154:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	68b8      	ldr	r0, [r7, #8]
 800615a:	f000 fa61 	bl	8006620 <prvAddCurrentTaskToDelayedList>
	}
 800615e:	bf00      	nop
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000b2c 	.word	0x20000b2c

0800616c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10c      	bne.n	800619c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	b672      	cpsid	i
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	b662      	cpsie	i
 8006196:	60fb      	str	r3, [r7, #12]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3318      	adds	r3, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fe11 	bl	8004dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a6:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <xTaskRemoveFromEventList+0xb4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d11d      	bne.n	80061ea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fe08 	bl	8004dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	4b19      	ldr	r3, [pc, #100]	; (8006224 <xTaskRemoveFromEventList+0xb8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d903      	bls.n	80061cc <xTaskRemoveFromEventList+0x60>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	4a16      	ldr	r2, [pc, #88]	; (8006224 <xTaskRemoveFromEventList+0xb8>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4a13      	ldr	r2, [pc, #76]	; (8006228 <xTaskRemoveFromEventList+0xbc>)
 80061da:	441a      	add	r2, r3
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7fe fd93 	bl	8004d0e <vListInsertEnd>
 80061e8:	e005      	b.n	80061f6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3318      	adds	r3, #24
 80061ee:	4619      	mov	r1, r3
 80061f0:	480e      	ldr	r0, [pc, #56]	; (800622c <xTaskRemoveFromEventList+0xc0>)
 80061f2:	f7fe fd8c 	bl	8004d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <xTaskRemoveFromEventList+0xc4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	429a      	cmp	r2, r3
 8006202:	d905      	bls.n	8006210 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <xTaskRemoveFromEventList+0xc8>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e001      	b.n	8006214 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006214:	697b      	ldr	r3, [r7, #20]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20001028 	.word	0x20001028
 8006224:	20001008 	.word	0x20001008
 8006228:	20000b30 	.word	0x20000b30
 800622c:	20000fc0 	.word	0x20000fc0
 8006230:	20000b2c 	.word	0x20000b2c
 8006234:	20001014 	.word	0x20001014

08006238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <vTaskInternalSetTimeOutState+0x24>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <vTaskInternalSetTimeOutState+0x28>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	605a      	str	r2, [r3, #4]
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20001018 	.word	0x20001018
 8006260:	20001004 	.word	0x20001004

08006264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10c      	bne.n	800628e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	b672      	cpsid	i
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	b662      	cpsie	i
 8006288:	613b      	str	r3, [r7, #16]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10c      	bne.n	80062ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	b672      	cpsid	i
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	b662      	cpsie	i
 80062a8:	60fb      	str	r3, [r7, #12]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80062ae:	f000 fe75 	bl	8006f9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <xTaskCheckForTimeOut+0xc4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ca:	d102      	bne.n	80062d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e023      	b.n	800631a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <xTaskCheckForTimeOut+0xc8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d007      	beq.n	80062ee <xTaskCheckForTimeOut+0x8a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e015      	b.n	800631a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d20b      	bcs.n	8006310 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff97 	bl	8006238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e004      	b.n	800631a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800631a:	f000 fe73 	bl	8007004 <vPortExitCritical>

	return xReturn;
 800631e:	69fb      	ldr	r3, [r7, #28]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20001004 	.word	0x20001004
 800632c:	20001018 	.word	0x20001018

08006330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <vTaskMissedYield+0x14>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20001014 	.word	0x20001014

08006348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006350:	f000 f852 	bl	80063f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <prvIdleTask+0x28>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d9f9      	bls.n	8006350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <prvIdleTask+0x2c>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800636c:	e7f0      	b.n	8006350 <prvIdleTask+0x8>
 800636e:	bf00      	nop
 8006370:	20000b30 	.word	0x20000b30
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800637e:	2300      	movs	r3, #0
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e00c      	b.n	800639e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4a12      	ldr	r2, [pc, #72]	; (80063d8 <prvInitialiseTaskLists+0x60>)
 8006390:	4413      	add	r3, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fc8e 	bl	8004cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3301      	adds	r3, #1
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b37      	cmp	r3, #55	; 0x37
 80063a2:	d9ef      	bls.n	8006384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063a4:	480d      	ldr	r0, [pc, #52]	; (80063dc <prvInitialiseTaskLists+0x64>)
 80063a6:	f7fe fc85 	bl	8004cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063aa:	480d      	ldr	r0, [pc, #52]	; (80063e0 <prvInitialiseTaskLists+0x68>)
 80063ac:	f7fe fc82 	bl	8004cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063b0:	480c      	ldr	r0, [pc, #48]	; (80063e4 <prvInitialiseTaskLists+0x6c>)
 80063b2:	f7fe fc7f 	bl	8004cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063b6:	480c      	ldr	r0, [pc, #48]	; (80063e8 <prvInitialiseTaskLists+0x70>)
 80063b8:	f7fe fc7c 	bl	8004cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063bc:	480b      	ldr	r0, [pc, #44]	; (80063ec <prvInitialiseTaskLists+0x74>)
 80063be:	f7fe fc79 	bl	8004cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <prvInitialiseTaskLists+0x78>)
 80063c4:	4a05      	ldr	r2, [pc, #20]	; (80063dc <prvInitialiseTaskLists+0x64>)
 80063c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <prvInitialiseTaskLists+0x7c>)
 80063ca:	4a05      	ldr	r2, [pc, #20]	; (80063e0 <prvInitialiseTaskLists+0x68>)
 80063cc:	601a      	str	r2, [r3, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000b30 	.word	0x20000b30
 80063dc:	20000f90 	.word	0x20000f90
 80063e0:	20000fa4 	.word	0x20000fa4
 80063e4:	20000fc0 	.word	0x20000fc0
 80063e8:	20000fd4 	.word	0x20000fd4
 80063ec:	20000fec 	.word	0x20000fec
 80063f0:	20000fb8 	.word	0x20000fb8
 80063f4:	20000fbc 	.word	0x20000fbc

080063f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063fe:	e019      	b.n	8006434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006400:	f000 fdcc 	bl	8006f9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006404:	4b10      	ldr	r3, [pc, #64]	; (8006448 <prvCheckTasksWaitingTermination+0x50>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fcd9 	bl	8004dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <prvCheckTasksWaitingTermination+0x54>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a0b      	ldr	r2, [pc, #44]	; (800644c <prvCheckTasksWaitingTermination+0x54>)
 800641e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3b01      	subs	r3, #1
 8006426:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800642a:	f000 fdeb 	bl	8007004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f810 	bl	8006454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e1      	bne.n	8006400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000fd4 	.word	0x20000fd4
 800644c:	20001000 	.word	0x20001000
 8006450:	20000fe8 	.word	0x20000fe8

08006454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3354      	adds	r3, #84	; 0x54
 8006460:	4618      	mov	r0, r3
 8006462:	f002 f8cf 	bl	8008604 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	4618      	mov	r0, r3
 8006476:	f000 ff87 	bl	8007388 <vPortFree>
				vPortFree( pxTCB );
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 ff84 	bl	8007388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006480:	e01a      	b.n	80064b8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006488:	2b01      	cmp	r3, #1
 800648a:	d103      	bne.n	8006494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 ff7b 	bl	8007388 <vPortFree>
	}
 8006492:	e011      	b.n	80064b8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800649a:	2b02      	cmp	r3, #2
 800649c:	d00c      	beq.n	80064b8 <prvDeleteTCB+0x64>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	b672      	cpsid	i
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	b662      	cpsie	i
 80064b2:	60fb      	str	r3, [r7, #12]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <prvDeleteTCB+0x62>
	}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <prvResetNextTaskUnblockTime+0x38>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <prvResetNextTaskUnblockTime+0x3c>)
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064d8:	e008      	b.n	80064ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <prvResetNextTaskUnblockTime+0x38>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4a04      	ldr	r2, [pc, #16]	; (80064fc <prvResetNextTaskUnblockTime+0x3c>)
 80064ea:	6013      	str	r3, [r2, #0]
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	20000fb8 	.word	0x20000fb8
 80064fc:	20001020 	.word	0x20001020

08006500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <xTaskGetSchedulerState+0x34>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800650e:	2301      	movs	r3, #1
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	e008      	b.n	8006526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006514:	4b08      	ldr	r3, [pc, #32]	; (8006538 <xTaskGetSchedulerState+0x38>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800651c:	2302      	movs	r3, #2
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	e001      	b.n	8006526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006526:	687b      	ldr	r3, [r7, #4]
	}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	2000100c 	.word	0x2000100c
 8006538:	20001028 	.word	0x20001028

0800653c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d05a      	beq.n	8006608 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006552:	4b30      	ldr	r3, [pc, #192]	; (8006614 <xTaskPriorityDisinherit+0xd8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	429a      	cmp	r2, r3
 800655a:	d00c      	beq.n	8006576 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	b672      	cpsid	i
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	b662      	cpsie	i
 8006570:	60fb      	str	r3, [r7, #12]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10c      	bne.n	8006598 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	60bb      	str	r3, [r7, #8]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659c:	1e5a      	subs	r2, r3, #1
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d02c      	beq.n	8006608 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d128      	bne.n	8006608 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fc04 	bl	8004dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <xTaskPriorityDisinherit+0xdc>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d903      	bls.n	80065e8 <xTaskPriorityDisinherit+0xac>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <xTaskPriorityDisinherit+0xdc>)
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4a09      	ldr	r2, [pc, #36]	; (800661c <xTaskPriorityDisinherit+0xe0>)
 80065f6:	441a      	add	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f7fe fb85 	bl	8004d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006608:	697b      	ldr	r3, [r7, #20]
	}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000b2c 	.word	0x20000b2c
 8006618:	20001008 	.word	0x20001008
 800661c:	20000b30 	.word	0x20000b30

08006620 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800662a:	4b21      	ldr	r3, [pc, #132]	; (80066b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006630:	4b20      	ldr	r3, [pc, #128]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3304      	adds	r3, #4
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fbc6 	bl	8004dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006642:	d10a      	bne.n	800665a <prvAddCurrentTaskToDelayedList+0x3a>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800664a:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4819      	ldr	r0, [pc, #100]	; (80066b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006654:	f7fe fb5b 	bl	8004d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006658:	e026      	b.n	80066a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006662:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	429a      	cmp	r2, r3
 8006670:	d209      	bcs.n	8006686 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe fb69 	bl	8004d56 <vListInsert>
}
 8006684:	e010      	b.n	80066a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7fe fb5f 	bl	8004d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d202      	bcs.n	80066a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066a2:	4a08      	ldr	r2, [pc, #32]	; (80066c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6013      	str	r3, [r2, #0]
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20001004 	.word	0x20001004
 80066b4:	20000b2c 	.word	0x20000b2c
 80066b8:	20000fec 	.word	0x20000fec
 80066bc:	20000fbc 	.word	0x20000fbc
 80066c0:	20000fb8 	.word	0x20000fb8
 80066c4:	20001020 	.word	0x20001020

080066c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066d2:	f000 fb15 	bl	8006d00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066d6:	4b1d      	ldr	r3, [pc, #116]	; (800674c <xTimerCreateTimerTask+0x84>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d021      	beq.n	8006722 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066e6:	1d3a      	adds	r2, r7, #4
 80066e8:	f107 0108 	add.w	r1, r7, #8
 80066ec:	f107 030c 	add.w	r3, r7, #12
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fac5 	bl	8004c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	9202      	str	r2, [sp, #8]
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	2302      	movs	r3, #2
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	460a      	mov	r2, r1
 8006708:	4911      	ldr	r1, [pc, #68]	; (8006750 <xTimerCreateTimerTask+0x88>)
 800670a:	4812      	ldr	r0, [pc, #72]	; (8006754 <xTimerCreateTimerTask+0x8c>)
 800670c:	f7ff f890 	bl	8005830 <xTaskCreateStatic>
 8006710:	4603      	mov	r3, r0
 8006712:	4a11      	ldr	r2, [pc, #68]	; (8006758 <xTimerCreateTimerTask+0x90>)
 8006714:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <xTimerCreateTimerTask+0x90>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800671e:	2301      	movs	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10c      	bne.n	8006742 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	b672      	cpsid	i
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	b662      	cpsie	i
 800673c:	613b      	str	r3, [r7, #16]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006742:	697b      	ldr	r3, [r7, #20]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	2000105c 	.word	0x2000105c
 8006750:	0800be48 	.word	0x0800be48
 8006754:	08006899 	.word	0x08006899
 8006758:	20001060 	.word	0x20001060

0800675c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800676a:	2300      	movs	r3, #0
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10c      	bne.n	800678e <xTimerGenericCommand+0x32>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	b672      	cpsid	i
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	b662      	cpsie	i
 8006788:	623b      	str	r3, [r7, #32]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800678e:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <xTimerGenericCommand+0x9c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d02a      	beq.n	80067ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	dc18      	bgt.n	80067da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067a8:	f7ff feaa 	bl	8006500 <xTaskGetSchedulerState>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d109      	bne.n	80067c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <xTimerGenericCommand+0x9c>)
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	f107 0110 	add.w	r1, r7, #16
 80067ba:	2300      	movs	r3, #0
 80067bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067be:	f7fe fc3d 	bl	800503c <xQueueGenericSend>
 80067c2:	6278      	str	r0, [r7, #36]	; 0x24
 80067c4:	e012      	b.n	80067ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <xTimerGenericCommand+0x9c>)
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f107 0110 	add.w	r1, r7, #16
 80067ce:	2300      	movs	r3, #0
 80067d0:	2200      	movs	r2, #0
 80067d2:	f7fe fc33 	bl	800503c <xQueueGenericSend>
 80067d6:	6278      	str	r0, [r7, #36]	; 0x24
 80067d8:	e008      	b.n	80067ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067da:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <xTimerGenericCommand+0x9c>)
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	f107 0110 	add.w	r1, r7, #16
 80067e2:	2300      	movs	r3, #0
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	f7fe fd2f 	bl	8005248 <xQueueGenericSendFromISR>
 80067ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3728      	adds	r7, #40	; 0x28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	2000105c 	.word	0x2000105c

080067fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af02      	add	r7, sp, #8
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006806:	4b23      	ldr	r3, [pc, #140]	; (8006894 <prvProcessExpiredTimer+0x98>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	3304      	adds	r3, #4
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe fad7 	bl	8004dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d024      	beq.n	8006872 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	18d1      	adds	r1, r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	6978      	ldr	r0, [r7, #20]
 8006836:	f000 f8d3 	bl	80069e0 <prvInsertTimerInActiveList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d021      	beq.n	8006884 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006840:	2300      	movs	r3, #0
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	2100      	movs	r1, #0
 800684a:	6978      	ldr	r0, [r7, #20]
 800684c:	f7ff ff86 	bl	800675c <xTimerGenericCommand>
 8006850:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d115      	bne.n	8006884 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	b672      	cpsid	i
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	b662      	cpsie	i
 800686c:	60fb      	str	r3, [r7, #12]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	b2da      	uxtb	r2, r3
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	6978      	ldr	r0, [r7, #20]
 800688a:	4798      	blx	r3
}
 800688c:	bf00      	nop
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20001054 	.word	0x20001054

08006898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068a0:	f107 0308 	add.w	r3, r7, #8
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 f857 	bl	8006958 <prvGetNextExpireTime>
 80068aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4619      	mov	r1, r3
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f803 	bl	80068bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068b6:	f000 f8d5 	bl	8006a64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068ba:	e7f1      	b.n	80068a0 <prvTimerTask+0x8>

080068bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068c6:	f7ff fa1d 	bl	8005d04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f866 	bl	80069a0 <prvSampleTimeNow>
 80068d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d130      	bne.n	800693e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <prvProcessTimerOrBlockTask+0x3c>
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d806      	bhi.n	80068f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068ea:	f7ff fa19 	bl	8005d20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff ff83 	bl	80067fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068f6:	e024      	b.n	8006942 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <prvProcessTimerOrBlockTask+0x90>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <prvProcessTimerOrBlockTask+0x50>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <prvProcessTimerOrBlockTask+0x52>
 800690c:	2300      	movs	r3, #0
 800690e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006910:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <prvProcessTimerOrBlockTask+0x94>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	4619      	mov	r1, r3
 800691e:	f7fe ff53 	bl	80057c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006922:	f7ff f9fd 	bl	8005d20 <xTaskResumeAll>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800692c:	4b09      	ldr	r3, [pc, #36]	; (8006954 <prvProcessTimerOrBlockTask+0x98>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
}
 800693c:	e001      	b.n	8006942 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800693e:	f7ff f9ef 	bl	8005d20 <xTaskResumeAll>
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20001058 	.word	0x20001058
 8006950:	2000105c 	.word	0x2000105c
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006960:	4b0e      	ldr	r3, [pc, #56]	; (800699c <prvGetNextExpireTime+0x44>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <prvGetNextExpireTime+0x16>
 800696a:	2201      	movs	r2, #1
 800696c:	e000      	b.n	8006970 <prvGetNextExpireTime+0x18>
 800696e:	2200      	movs	r2, #0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800697c:	4b07      	ldr	r3, [pc, #28]	; (800699c <prvGetNextExpireTime+0x44>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	e001      	b.n	800698c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20001054 	.word	0x20001054

080069a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069a8:	f7ff fa5a 	bl	8005e60 <xTaskGetTickCount>
 80069ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <prvSampleTimeNow+0x3c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d205      	bcs.n	80069c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069b8:	f000 f93c 	bl	8006c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e002      	b.n	80069ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069ca:	4a04      	ldr	r2, [pc, #16]	; (80069dc <prvSampleTimeNow+0x3c>)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069d0:	68fb      	ldr	r3, [r7, #12]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20001064 	.word	0x20001064

080069e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d812      	bhi.n	8006a2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	1ad2      	subs	r2, r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e01b      	b.n	8006a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a1a:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <prvInsertTimerInActiveList+0x7c>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fe f996 	bl	8004d56 <vListInsert>
 8006a2a:	e012      	b.n	8006a52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d206      	bcs.n	8006a42 <prvInsertTimerInActiveList+0x62>
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e007      	b.n	8006a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <prvInsertTimerInActiveList+0x80>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7fe f982 	bl	8004d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a52:	697b      	ldr	r3, [r7, #20]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20001058 	.word	0x20001058
 8006a60:	20001054 	.word	0x20001054

08006a64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08e      	sub	sp, #56	; 0x38
 8006a68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a6a:	e0d0      	b.n	8006c0e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	da1a      	bge.n	8006aa8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	3304      	adds	r3, #4
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	b672      	cpsid	i
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	b662      	cpsie	i
 8006a92:	61fb      	str	r3, [r7, #28]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a9e:	6850      	ldr	r0, [r2, #4]
 8006aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa2:	6892      	ldr	r2, [r2, #8]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f2c0 80ae 	blt.w	8006c0c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe f981 	bl	8004dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff ff69 	bl	80069a0 <prvSampleTimeNow>
 8006ace:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b09      	cmp	r3, #9
 8006ad4:	f200 809b 	bhi.w	8006c0e <prvProcessReceivedCommands+0x1aa>
 8006ad8:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <prvProcessReceivedCommands+0x7c>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b09 	.word	0x08006b09
 8006ae8:	08006b09 	.word	0x08006b09
 8006aec:	08006b81 	.word	0x08006b81
 8006af0:	08006b95 	.word	0x08006b95
 8006af4:	08006be3 	.word	0x08006be3
 8006af8:	08006b09 	.word	0x08006b09
 8006afc:	08006b09 	.word	0x08006b09
 8006b00:	08006b81 	.word	0x08006b81
 8006b04:	08006b95 	.word	0x08006b95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	18d1      	adds	r1, r2, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b28:	f7ff ff5a 	bl	80069e0 <prvInsertTimerInActiveList>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d06d      	beq.n	8006c0e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d062      	beq.n	8006c0e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	441a      	add	r2, r3
 8006b50:	2300      	movs	r3, #0
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	2100      	movs	r1, #0
 8006b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b5a:	f7ff fdff 	bl	800675c <xTimerGenericCommand>
 8006b5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d153      	bne.n	8006c0e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	b672      	cpsid	i
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	b662      	cpsie	i
 8006b7a:	61bb      	str	r3, [r7, #24]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b86:	f023 0301 	bic.w	r3, r3, #1
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b92:	e03c      	b.n	8006c0e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10c      	bne.n	8006bce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	b672      	cpsid	i
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	b662      	cpsie	i
 8006bc8:	617b      	str	r3, [r7, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	18d1      	adds	r1, r2, r3
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bdc:	f7ff ff00 	bl	80069e0 <prvInsertTimerInActiveList>
					break;
 8006be0:	e015      	b.n	8006c0e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d103      	bne.n	8006bf8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf2:	f000 fbc9 	bl	8007388 <vPortFree>
 8006bf6:	e00a      	b.n	8006c0e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfe:	f023 0301 	bic.w	r3, r3, #1
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c0a:	e000      	b.n	8006c0e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c0e:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <prvProcessReceivedCommands+0x1cc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	1d39      	adds	r1, r7, #4
 8006c14:	2200      	movs	r2, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fbb6 	bl	8005388 <xQueueReceive>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f af24 	bne.w	8006a6c <prvProcessReceivedCommands+0x8>
	}
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	3730      	adds	r7, #48	; 0x30
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	2000105c 	.word	0x2000105c

08006c34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c3a:	e04a      	b.n	8006cd2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c3c:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c46:	4b2c      	ldr	r3, [pc, #176]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe f8b7 	bl	8004dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d030      	beq.n	8006cd2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d90e      	bls.n	8006ca0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f7fe f85c 	bl	8004d56 <vListInsert>
 8006c9e:	e018      	b.n	8006cd2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff fd56 	bl	800675c <xTimerGenericCommand>
 8006cb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10c      	bne.n	8006cd2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	b672      	cpsid	i
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	b662      	cpsie	i
 8006ccc:	603b      	str	r3, [r7, #0]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1af      	bne.n	8006c3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <prvSwitchTimerLists+0xc8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <prvSwitchTimerLists+0xc4>)
 8006ce8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006cea:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <prvSwitchTimerLists+0xc8>)
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	6013      	str	r3, [r2, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20001054 	.word	0x20001054
 8006cfc:	20001058 	.word	0x20001058

08006d00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d06:	f000 f949 	bl	8006f9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d0a:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d120      	bne.n	8006d54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d12:	4814      	ldr	r0, [pc, #80]	; (8006d64 <prvCheckForValidListAndQueue+0x64>)
 8006d14:	f7fd ffce 	bl	8004cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d18:	4813      	ldr	r0, [pc, #76]	; (8006d68 <prvCheckForValidListAndQueue+0x68>)
 8006d1a:	f7fd ffcb 	bl	8004cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <prvCheckForValidListAndQueue+0x6c>)
 8006d20:	4a10      	ldr	r2, [pc, #64]	; (8006d64 <prvCheckForValidListAndQueue+0x64>)
 8006d22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d24:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <prvCheckForValidListAndQueue+0x70>)
 8006d26:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <prvCheckForValidListAndQueue+0x68>)
 8006d28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <prvCheckForValidListAndQueue+0x74>)
 8006d30:	4a11      	ldr	r2, [pc, #68]	; (8006d78 <prvCheckForValidListAndQueue+0x78>)
 8006d32:	2110      	movs	r1, #16
 8006d34:	200a      	movs	r0, #10
 8006d36:	f7fe f8db 	bl	8004ef0 <xQueueGenericCreateStatic>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <prvCheckForValidListAndQueue+0x60>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	490b      	ldr	r1, [pc, #44]	; (8006d7c <prvCheckForValidListAndQueue+0x7c>)
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fd10 	bl	8005774 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d54:	f000 f956 	bl	8007004 <vPortExitCritical>
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000105c 	.word	0x2000105c
 8006d64:	2000102c 	.word	0x2000102c
 8006d68:	20001040 	.word	0x20001040
 8006d6c:	20001054 	.word	0x20001054
 8006d70:	20001058 	.word	0x20001058
 8006d74:	20001108 	.word	0x20001108
 8006d78:	20001068 	.word	0x20001068
 8006d7c:	0800be50 	.word	0x0800be50

08006d80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3b04      	subs	r3, #4
 8006d90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3b04      	subs	r3, #4
 8006d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f023 0201 	bic.w	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3b04      	subs	r3, #4
 8006dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006db0:	4a0c      	ldr	r2, [pc, #48]	; (8006de4 <pxPortInitialiseStack+0x64>)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3b14      	subs	r3, #20
 8006dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f06f 0202 	mvn.w	r2, #2
 8006dce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3b20      	subs	r3, #32
 8006dd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	08006de9 	.word	0x08006de9

08006de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006df2:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <prvTaskExitError+0x5c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dfa:	d00c      	beq.n	8006e16 <prvTaskExitError+0x2e>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	b672      	cpsid	i
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	b662      	cpsie	i
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <prvTaskExitError+0x2c>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	b672      	cpsid	i
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	b662      	cpsie	i
 8006e2a:	60bb      	str	r3, [r7, #8]
}
 8006e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e2e:	bf00      	nop
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0fc      	beq.n	8006e30 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	2000000c 	.word	0x2000000c
	...

08006e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <pxCurrentTCBConst2>)
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	6808      	ldr	r0, [r1, #0]
 8006e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5a:	f380 8809 	msr	PSP, r0
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f380 8811 	msr	BASEPRI, r0
 8006e6a:	4770      	bx	lr
 8006e6c:	f3af 8000 	nop.w

08006e70 <pxCurrentTCBConst2>:
 8006e70:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop

08006e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e78:	4808      	ldr	r0, [pc, #32]	; (8006e9c <prvPortStartFirstTask+0x24>)
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	6800      	ldr	r0, [r0, #0]
 8006e7e:	f380 8808 	msr	MSP, r0
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8814 	msr	CONTROL, r0
 8006e8a:	b662      	cpsie	i
 8006e8c:	b661      	cpsie	f
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	df00      	svc	0
 8006e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e9a:	bf00      	nop
 8006e9c:	e000ed08 	.word	0xe000ed08

08006ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ea6:	4b37      	ldr	r3, [pc, #220]	; (8006f84 <xPortStartScheduler+0xe4>)
 8006ea8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	22ff      	movs	r2, #255	; 0xff
 8006eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <xPortStartScheduler+0xe8>)
 8006ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ece:	4b2f      	ldr	r3, [pc, #188]	; (8006f8c <xPortStartScheduler+0xec>)
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ed4:	e009      	b.n	8006eea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006ed6:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <xPortStartScheduler+0xec>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <xPortStartScheduler+0xec>)
 8006ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d0ef      	beq.n	8006ed6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ef6:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <xPortStartScheduler+0xec>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1c3 0307 	rsb	r3, r3, #7
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d00c      	beq.n	8006f1c <xPortStartScheduler+0x7c>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	b672      	cpsid	i
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	b662      	cpsie	i
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f1c:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <xPortStartScheduler+0xec>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	4a1a      	ldr	r2, [pc, #104]	; (8006f8c <xPortStartScheduler+0xec>)
 8006f24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f26:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <xPortStartScheduler+0xec>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f2e:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <xPortStartScheduler+0xec>)
 8006f30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f3a:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <xPortStartScheduler+0xf0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a14      	ldr	r2, [pc, #80]	; (8006f90 <xPortStartScheduler+0xf0>)
 8006f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <xPortStartScheduler+0xf0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a11      	ldr	r2, [pc, #68]	; (8006f90 <xPortStartScheduler+0xf0>)
 8006f4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f52:	f000 f8dd 	bl	8007110 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f56:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <xPortStartScheduler+0xf4>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f5c:	f000 f8fc 	bl	8007158 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f60:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <xPortStartScheduler+0xf8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a0c      	ldr	r2, [pc, #48]	; (8006f98 <xPortStartScheduler+0xf8>)
 8006f66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f6c:	f7ff ff84 	bl	8006e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f70:	f7ff f842 	bl	8005ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8006f74:	f7ff ff38 	bl	8006de8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	e000e400 	.word	0xe000e400
 8006f88:	20001158 	.word	0x20001158
 8006f8c:	2000115c 	.word	0x2000115c
 8006f90:	e000ed20 	.word	0xe000ed20
 8006f94:	2000000c 	.word	0x2000000c
 8006f98:	e000ef34 	.word	0xe000ef34

08006f9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	b672      	cpsid	i
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	b662      	cpsie	i
 8006fb6:	607b      	str	r3, [r7, #4]
}
 8006fb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <vPortEnterCritical+0x60>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	4a0e      	ldr	r2, [pc, #56]	; (8006ffc <vPortEnterCritical+0x60>)
 8006fc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <vPortEnterCritical+0x60>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d111      	bne.n	8006ff0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <vPortEnterCritical+0x64>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <vPortEnterCritical+0x54>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	b672      	cpsid	i
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	b662      	cpsie	i
 8006fea:	603b      	str	r3, [r7, #0]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <vPortEnterCritical+0x52>
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	2000000c 	.word	0x2000000c
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800700a:	4b13      	ldr	r3, [pc, #76]	; (8007058 <vPortExitCritical+0x54>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10c      	bne.n	800702c <vPortExitCritical+0x28>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	b672      	cpsid	i
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	b662      	cpsie	i
 8007026:	607b      	str	r3, [r7, #4]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <vPortExitCritical+0x54>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3b01      	subs	r3, #1
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <vPortExitCritical+0x54>)
 8007034:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007036:	4b08      	ldr	r3, [pc, #32]	; (8007058 <vPortExitCritical+0x54>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d105      	bne.n	800704a <vPortExitCritical+0x46>
 800703e:	2300      	movs	r3, #0
 8007040:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	f383 8811 	msr	BASEPRI, r3
}
 8007048:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	2000000c 	.word	0x2000000c
 800705c:	00000000 	.word	0x00000000

08007060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007060:	f3ef 8009 	mrs	r0, PSP
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <pxCurrentTCBConst>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	f01e 0f10 	tst.w	lr, #16
 8007070:	bf08      	it	eq
 8007072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	6010      	str	r0, [r2, #0]
 800707c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007084:	b672      	cpsid	i
 8007086:	f380 8811 	msr	BASEPRI, r0
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	b662      	cpsie	i
 8007094:	f7fe ffb0 	bl	8005ff8 <vTaskSwitchContext>
 8007098:	f04f 0000 	mov.w	r0, #0
 800709c:	f380 8811 	msr	BASEPRI, r0
 80070a0:	bc09      	pop	{r0, r3}
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	6808      	ldr	r0, [r1, #0]
 80070a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	f01e 0f10 	tst.w	lr, #16
 80070ae:	bf08      	it	eq
 80070b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070b4:	f380 8809 	msr	PSP, r0
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop

080070c0 <pxCurrentTCBConst>:
 80070c0:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	b672      	cpsid	i
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	b662      	cpsie	i
 80070e2:	607b      	str	r3, [r7, #4]
}
 80070e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070e6:	f7fe fecb 	bl	8005e80 <xTaskIncrementTick>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070f0:	4b06      	ldr	r3, [pc, #24]	; (800710c <SysTick_Handler+0x44>)
 80070f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	2300      	movs	r3, #0
 80070fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f383 8811 	msr	BASEPRI, r3
}
 8007102:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <vPortSetupTimerInterrupt+0x34>)
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <vPortSetupTimerInterrupt+0x38>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <vPortSetupTimerInterrupt+0x3c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <vPortSetupTimerInterrupt+0x40>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	099b      	lsrs	r3, r3, #6
 800712c:	4a09      	ldr	r2, [pc, #36]	; (8007154 <vPortSetupTimerInterrupt+0x44>)
 800712e:	3b01      	subs	r3, #1
 8007130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007132:	4b04      	ldr	r3, [pc, #16]	; (8007144 <vPortSetupTimerInterrupt+0x34>)
 8007134:	2207      	movs	r2, #7
 8007136:	601a      	str	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	e000e010 	.word	0xe000e010
 8007148:	e000e018 	.word	0xe000e018
 800714c:	20000000 	.word	0x20000000
 8007150:	10624dd3 	.word	0x10624dd3
 8007154:	e000e014 	.word	0xe000e014

08007158 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007158:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007168 <vPortEnableVFP+0x10>
 800715c:	6801      	ldr	r1, [r0, #0]
 800715e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007162:	6001      	str	r1, [r0, #0]
 8007164:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007166:	bf00      	nop
 8007168:	e000ed88 	.word	0xe000ed88

0800716c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007172:	f3ef 8305 	mrs	r3, IPSR
 8007176:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d916      	bls.n	80071ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800717e:	4a19      	ldr	r2, [pc, #100]	; (80071e4 <vPortValidateInterruptPriority+0x78>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007188:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <vPortValidateInterruptPriority+0x7c>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	7afa      	ldrb	r2, [r7, #11]
 800718e:	429a      	cmp	r2, r3
 8007190:	d20c      	bcs.n	80071ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	b672      	cpsid	i
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	b662      	cpsie	i
 80071a6:	607b      	str	r3, [r7, #4]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071ac:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <vPortValidateInterruptPriority+0x80>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071b4:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <vPortValidateInterruptPriority+0x84>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d90c      	bls.n	80071d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	b672      	cpsid	i
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	b662      	cpsie	i
 80071d0:	603b      	str	r3, [r7, #0]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <vPortValidateInterruptPriority+0x68>
	}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	e000e3f0 	.word	0xe000e3f0
 80071e8:	20001158 	.word	0x20001158
 80071ec:	e000ed0c 	.word	0xe000ed0c
 80071f0:	2000115c 	.word	0x2000115c

080071f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	; 0x28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007200:	f7fe fd80 	bl	8005d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007204:	4b5b      	ldr	r3, [pc, #364]	; (8007374 <pvPortMalloc+0x180>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800720c:	f000 f91a 	bl	8007444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007210:	4b59      	ldr	r3, [pc, #356]	; (8007378 <pvPortMalloc+0x184>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4013      	ands	r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 8092 	bne.w	8007342 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01f      	beq.n	8007264 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007224:	2208      	movs	r2, #8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4413      	add	r3, r2
 800722a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	2b00      	cmp	r3, #0
 8007234:	d016      	beq.n	8007264 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f023 0307 	bic.w	r3, r3, #7
 800723c:	3308      	adds	r3, #8
 800723e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00c      	beq.n	8007264 <pvPortMalloc+0x70>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	b672      	cpsid	i
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	b662      	cpsie	i
 800725e:	617b      	str	r3, [r7, #20]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d06b      	beq.n	8007342 <pvPortMalloc+0x14e>
 800726a:	4b44      	ldr	r3, [pc, #272]	; (800737c <pvPortMalloc+0x188>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d866      	bhi.n	8007342 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007274:	4b42      	ldr	r3, [pc, #264]	; (8007380 <pvPortMalloc+0x18c>)
 8007276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007278:	4b41      	ldr	r3, [pc, #260]	; (8007380 <pvPortMalloc+0x18c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800727e:	e004      	b.n	800728a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d903      	bls.n	800729c <pvPortMalloc+0xa8>
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f1      	bne.n	8007280 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800729c:	4b35      	ldr	r3, [pc, #212]	; (8007374 <pvPortMalloc+0x180>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d04d      	beq.n	8007342 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2208      	movs	r2, #8
 80072ac:	4413      	add	r3, r2
 80072ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	1ad2      	subs	r2, r2, r3
 80072c0:	2308      	movs	r3, #8
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d921      	bls.n	800730c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00c      	beq.n	80072f4 <pvPortMalloc+0x100>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	613b      	str	r3, [r7, #16]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007306:	69b8      	ldr	r0, [r7, #24]
 8007308:	f000 f8fe 	bl	8007508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800730c:	4b1b      	ldr	r3, [pc, #108]	; (800737c <pvPortMalloc+0x188>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	4a19      	ldr	r2, [pc, #100]	; (800737c <pvPortMalloc+0x188>)
 8007318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800731a:	4b18      	ldr	r3, [pc, #96]	; (800737c <pvPortMalloc+0x188>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b19      	ldr	r3, [pc, #100]	; (8007384 <pvPortMalloc+0x190>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d203      	bcs.n	800732e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <pvPortMalloc+0x188>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <pvPortMalloc+0x190>)
 800732c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	4b11      	ldr	r3, [pc, #68]	; (8007378 <pvPortMalloc+0x184>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	431a      	orrs	r2, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007342:	f7fe fced 	bl	8005d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00c      	beq.n	800736a <pvPortMalloc+0x176>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	b672      	cpsid	i
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	b662      	cpsie	i
 8007364:	60fb      	str	r3, [r7, #12]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <pvPortMalloc+0x174>
	return pvReturn;
 800736a:	69fb      	ldr	r3, [r7, #28]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3728      	adds	r7, #40	; 0x28
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20004d68 	.word	0x20004d68
 8007378:	20004d74 	.word	0x20004d74
 800737c:	20004d6c 	.word	0x20004d6c
 8007380:	20004d60 	.word	0x20004d60
 8007384:	20004d70 	.word	0x20004d70

08007388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d04c      	beq.n	8007434 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800739a:	2308      	movs	r3, #8
 800739c:	425b      	negs	r3, r3
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	4b23      	ldr	r3, [pc, #140]	; (800743c <vPortFree+0xb4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10c      	bne.n	80073d0 <vPortFree+0x48>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	b672      	cpsid	i
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	b662      	cpsie	i
 80073ca:	60fb      	str	r3, [r7, #12]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00c      	beq.n	80073f2 <vPortFree+0x6a>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	b672      	cpsid	i
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	b662      	cpsie	i
 80073ec:	60bb      	str	r3, [r7, #8]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <vPortFree+0xb4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d019      	beq.n	8007434 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d115      	bne.n	8007434 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <vPortFree+0xb4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	43db      	mvns	r3, r3
 8007412:	401a      	ands	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007418:	f7fe fc74 	bl	8005d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <vPortFree+0xb8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4413      	add	r3, r2
 8007426:	4a06      	ldr	r2, [pc, #24]	; (8007440 <vPortFree+0xb8>)
 8007428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800742a:	6938      	ldr	r0, [r7, #16]
 800742c:	f000 f86c 	bl	8007508 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007430:	f7fe fc76 	bl	8005d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007434:	bf00      	nop
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20004d74 	.word	0x20004d74
 8007440:	20004d6c 	.word	0x20004d6c

08007444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800744a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800744e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007450:	4b27      	ldr	r3, [pc, #156]	; (80074f0 <prvHeapInit+0xac>)
 8007452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3307      	adds	r3, #7
 8007462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <prvHeapInit+0xac>)
 8007474:	4413      	add	r3, r2
 8007476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800747c:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <prvHeapInit+0xb0>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007482:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <prvHeapInit+0xb0>)
 8007484:	2200      	movs	r2, #0
 8007486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007490:	2208      	movs	r2, #8
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0307 	bic.w	r3, r3, #7
 800749e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <prvHeapInit+0xb4>)
 80074a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <prvHeapInit+0xb4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2200      	movs	r2, #0
 80074ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <prvHeapInit+0xb4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074c4:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvHeapInit+0xb4>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <prvHeapInit+0xb8>)
 80074d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <prvHeapInit+0xbc>)
 80074da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <prvHeapInit+0xc0>)
 80074de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	20001160 	.word	0x20001160
 80074f4:	20004d60 	.word	0x20004d60
 80074f8:	20004d68 	.word	0x20004d68
 80074fc:	20004d70 	.word	0x20004d70
 8007500:	20004d6c 	.word	0x20004d6c
 8007504:	20004d74 	.word	0x20004d74

08007508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007510:	4b28      	ldr	r3, [pc, #160]	; (80075b4 <prvInsertBlockIntoFreeList+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e002      	b.n	800751c <prvInsertBlockIntoFreeList+0x14>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d8f7      	bhi.n	8007516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d108      	bne.n	800754a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d118      	bne.n	8007590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d00d      	beq.n	8007586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	441a      	add	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e008      	b.n	8007598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e003      	b.n	8007598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d002      	beq.n	80075a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20004d60 	.word	0x20004d60
 80075b8:	20004d68 	.word	0x20004d68

080075bc <__errno>:
 80075bc:	4b01      	ldr	r3, [pc, #4]	; (80075c4 <__errno+0x8>)
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000010 	.word	0x20000010

080075c8 <std>:
 80075c8:	2300      	movs	r3, #0
 80075ca:	b510      	push	{r4, lr}
 80075cc:	4604      	mov	r4, r0
 80075ce:	e9c0 3300 	strd	r3, r3, [r0]
 80075d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d6:	6083      	str	r3, [r0, #8]
 80075d8:	8181      	strh	r1, [r0, #12]
 80075da:	6643      	str	r3, [r0, #100]	; 0x64
 80075dc:	81c2      	strh	r2, [r0, #14]
 80075de:	6183      	str	r3, [r0, #24]
 80075e0:	4619      	mov	r1, r3
 80075e2:	2208      	movs	r2, #8
 80075e4:	305c      	adds	r0, #92	; 0x5c
 80075e6:	f000 f91a 	bl	800781e <memset>
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <std+0x38>)
 80075ec:	6263      	str	r3, [r4, #36]	; 0x24
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <std+0x3c>)
 80075f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x40>)
 80075f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <std+0x44>)
 80075f8:	6224      	str	r4, [r4, #32]
 80075fa:	6323      	str	r3, [r4, #48]	; 0x30
 80075fc:	bd10      	pop	{r4, pc}
 80075fe:	bf00      	nop
 8007600:	08008729 	.word	0x08008729
 8007604:	0800874b 	.word	0x0800874b
 8007608:	08008783 	.word	0x08008783
 800760c:	080087a7 	.word	0x080087a7

08007610 <_cleanup_r>:
 8007610:	4901      	ldr	r1, [pc, #4]	; (8007618 <_cleanup_r+0x8>)
 8007612:	f000 b8af 	b.w	8007774 <_fwalk_reent>
 8007616:	bf00      	nop
 8007618:	0800a1b1 	.word	0x0800a1b1

0800761c <__sfmoreglue>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	2268      	movs	r2, #104	; 0x68
 8007620:	1e4d      	subs	r5, r1, #1
 8007622:	4355      	muls	r5, r2
 8007624:	460e      	mov	r6, r1
 8007626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800762a:	f000 f921 	bl	8007870 <_malloc_r>
 800762e:	4604      	mov	r4, r0
 8007630:	b140      	cbz	r0, 8007644 <__sfmoreglue+0x28>
 8007632:	2100      	movs	r1, #0
 8007634:	e9c0 1600 	strd	r1, r6, [r0]
 8007638:	300c      	adds	r0, #12
 800763a:	60a0      	str	r0, [r4, #8]
 800763c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007640:	f000 f8ed 	bl	800781e <memset>
 8007644:	4620      	mov	r0, r4
 8007646:	bd70      	pop	{r4, r5, r6, pc}

08007648 <__sfp_lock_acquire>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sfp_lock_acquire+0x8>)
 800764a:	f000 b8d8 	b.w	80077fe <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	20004d79 	.word	0x20004d79

08007654 <__sfp_lock_release>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__sfp_lock_release+0x8>)
 8007656:	f000 b8d3 	b.w	8007800 <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	20004d79 	.word	0x20004d79

08007660 <__sinit_lock_acquire>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__sinit_lock_acquire+0x8>)
 8007662:	f000 b8cc 	b.w	80077fe <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	20004d7a 	.word	0x20004d7a

0800766c <__sinit_lock_release>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__sinit_lock_release+0x8>)
 800766e:	f000 b8c7 	b.w	8007800 <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	20004d7a 	.word	0x20004d7a

08007678 <__sinit>:
 8007678:	b510      	push	{r4, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	f7ff fff0 	bl	8007660 <__sinit_lock_acquire>
 8007680:	69a3      	ldr	r3, [r4, #24]
 8007682:	b11b      	cbz	r3, 800768c <__sinit+0x14>
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	f7ff bff0 	b.w	800766c <__sinit_lock_release>
 800768c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007690:	6523      	str	r3, [r4, #80]	; 0x50
 8007692:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <__sinit+0x68>)
 8007694:	4a13      	ldr	r2, [pc, #76]	; (80076e4 <__sinit+0x6c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	62a2      	str	r2, [r4, #40]	; 0x28
 800769a:	42a3      	cmp	r3, r4
 800769c:	bf04      	itt	eq
 800769e:	2301      	moveq	r3, #1
 80076a0:	61a3      	streq	r3, [r4, #24]
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 f820 	bl	80076e8 <__sfp>
 80076a8:	6060      	str	r0, [r4, #4]
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 f81c 	bl	80076e8 <__sfp>
 80076b0:	60a0      	str	r0, [r4, #8]
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f818 	bl	80076e8 <__sfp>
 80076b8:	2200      	movs	r2, #0
 80076ba:	60e0      	str	r0, [r4, #12]
 80076bc:	2104      	movs	r1, #4
 80076be:	6860      	ldr	r0, [r4, #4]
 80076c0:	f7ff ff82 	bl	80075c8 <std>
 80076c4:	68a0      	ldr	r0, [r4, #8]
 80076c6:	2201      	movs	r2, #1
 80076c8:	2109      	movs	r1, #9
 80076ca:	f7ff ff7d 	bl	80075c8 <std>
 80076ce:	68e0      	ldr	r0, [r4, #12]
 80076d0:	2202      	movs	r2, #2
 80076d2:	2112      	movs	r1, #18
 80076d4:	f7ff ff78 	bl	80075c8 <std>
 80076d8:	2301      	movs	r3, #1
 80076da:	61a3      	str	r3, [r4, #24]
 80076dc:	e7d2      	b.n	8007684 <__sinit+0xc>
 80076de:	bf00      	nop
 80076e0:	0800bf18 	.word	0x0800bf18
 80076e4:	08007611 	.word	0x08007611

080076e8 <__sfp>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	4607      	mov	r7, r0
 80076ec:	f7ff ffac 	bl	8007648 <__sfp_lock_acquire>
 80076f0:	4b1e      	ldr	r3, [pc, #120]	; (800776c <__sfp+0x84>)
 80076f2:	681e      	ldr	r6, [r3, #0]
 80076f4:	69b3      	ldr	r3, [r6, #24]
 80076f6:	b913      	cbnz	r3, 80076fe <__sfp+0x16>
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7ff ffbd 	bl	8007678 <__sinit>
 80076fe:	3648      	adds	r6, #72	; 0x48
 8007700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007704:	3b01      	subs	r3, #1
 8007706:	d503      	bpl.n	8007710 <__sfp+0x28>
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	b30b      	cbz	r3, 8007750 <__sfp+0x68>
 800770c:	6836      	ldr	r6, [r6, #0]
 800770e:	e7f7      	b.n	8007700 <__sfp+0x18>
 8007710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007714:	b9d5      	cbnz	r5, 800774c <__sfp+0x64>
 8007716:	4b16      	ldr	r3, [pc, #88]	; (8007770 <__sfp+0x88>)
 8007718:	60e3      	str	r3, [r4, #12]
 800771a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800771e:	6665      	str	r5, [r4, #100]	; 0x64
 8007720:	f000 f86c 	bl	80077fc <__retarget_lock_init_recursive>
 8007724:	f7ff ff96 	bl	8007654 <__sfp_lock_release>
 8007728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800772c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007730:	6025      	str	r5, [r4, #0]
 8007732:	61a5      	str	r5, [r4, #24]
 8007734:	2208      	movs	r2, #8
 8007736:	4629      	mov	r1, r5
 8007738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800773c:	f000 f86f 	bl	800781e <memset>
 8007740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007748:	4620      	mov	r0, r4
 800774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800774c:	3468      	adds	r4, #104	; 0x68
 800774e:	e7d9      	b.n	8007704 <__sfp+0x1c>
 8007750:	2104      	movs	r1, #4
 8007752:	4638      	mov	r0, r7
 8007754:	f7ff ff62 	bl	800761c <__sfmoreglue>
 8007758:	4604      	mov	r4, r0
 800775a:	6030      	str	r0, [r6, #0]
 800775c:	2800      	cmp	r0, #0
 800775e:	d1d5      	bne.n	800770c <__sfp+0x24>
 8007760:	f7ff ff78 	bl	8007654 <__sfp_lock_release>
 8007764:	230c      	movs	r3, #12
 8007766:	603b      	str	r3, [r7, #0]
 8007768:	e7ee      	b.n	8007748 <__sfp+0x60>
 800776a:	bf00      	nop
 800776c:	0800bf18 	.word	0x0800bf18
 8007770:	ffff0001 	.word	0xffff0001

08007774 <_fwalk_reent>:
 8007774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007778:	4606      	mov	r6, r0
 800777a:	4688      	mov	r8, r1
 800777c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007780:	2700      	movs	r7, #0
 8007782:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007786:	f1b9 0901 	subs.w	r9, r9, #1
 800778a:	d505      	bpl.n	8007798 <_fwalk_reent+0x24>
 800778c:	6824      	ldr	r4, [r4, #0]
 800778e:	2c00      	cmp	r4, #0
 8007790:	d1f7      	bne.n	8007782 <_fwalk_reent+0xe>
 8007792:	4638      	mov	r0, r7
 8007794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007798:	89ab      	ldrh	r3, [r5, #12]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d907      	bls.n	80077ae <_fwalk_reent+0x3a>
 800779e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077a2:	3301      	adds	r3, #1
 80077a4:	d003      	beq.n	80077ae <_fwalk_reent+0x3a>
 80077a6:	4629      	mov	r1, r5
 80077a8:	4630      	mov	r0, r6
 80077aa:	47c0      	blx	r8
 80077ac:	4307      	orrs	r7, r0
 80077ae:	3568      	adds	r5, #104	; 0x68
 80077b0:	e7e9      	b.n	8007786 <_fwalk_reent+0x12>
	...

080077b4 <__libc_init_array>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4d0d      	ldr	r5, [pc, #52]	; (80077ec <__libc_init_array+0x38>)
 80077b8:	4c0d      	ldr	r4, [pc, #52]	; (80077f0 <__libc_init_array+0x3c>)
 80077ba:	1b64      	subs	r4, r4, r5
 80077bc:	10a4      	asrs	r4, r4, #2
 80077be:	2600      	movs	r6, #0
 80077c0:	42a6      	cmp	r6, r4
 80077c2:	d109      	bne.n	80077d8 <__libc_init_array+0x24>
 80077c4:	4d0b      	ldr	r5, [pc, #44]	; (80077f4 <__libc_init_array+0x40>)
 80077c6:	4c0c      	ldr	r4, [pc, #48]	; (80077f8 <__libc_init_array+0x44>)
 80077c8:	f004 fb00 	bl	800bdcc <_init>
 80077cc:	1b64      	subs	r4, r4, r5
 80077ce:	10a4      	asrs	r4, r4, #2
 80077d0:	2600      	movs	r6, #0
 80077d2:	42a6      	cmp	r6, r4
 80077d4:	d105      	bne.n	80077e2 <__libc_init_array+0x2e>
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077dc:	4798      	blx	r3
 80077de:	3601      	adds	r6, #1
 80077e0:	e7ee      	b.n	80077c0 <__libc_init_array+0xc>
 80077e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e6:	4798      	blx	r3
 80077e8:	3601      	adds	r6, #1
 80077ea:	e7f2      	b.n	80077d2 <__libc_init_array+0x1e>
 80077ec:	0800c364 	.word	0x0800c364
 80077f0:	0800c364 	.word	0x0800c364
 80077f4:	0800c364 	.word	0x0800c364
 80077f8:	0800c368 	.word	0x0800c368

080077fc <__retarget_lock_init_recursive>:
 80077fc:	4770      	bx	lr

080077fe <__retarget_lock_acquire_recursive>:
 80077fe:	4770      	bx	lr

08007800 <__retarget_lock_release_recursive>:
 8007800:	4770      	bx	lr

08007802 <memcpy>:
 8007802:	440a      	add	r2, r1
 8007804:	4291      	cmp	r1, r2
 8007806:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800780a:	d100      	bne.n	800780e <memcpy+0xc>
 800780c:	4770      	bx	lr
 800780e:	b510      	push	{r4, lr}
 8007810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007818:	4291      	cmp	r1, r2
 800781a:	d1f9      	bne.n	8007810 <memcpy+0xe>
 800781c:	bd10      	pop	{r4, pc}

0800781e <memset>:
 800781e:	4402      	add	r2, r0
 8007820:	4603      	mov	r3, r0
 8007822:	4293      	cmp	r3, r2
 8007824:	d100      	bne.n	8007828 <memset+0xa>
 8007826:	4770      	bx	lr
 8007828:	f803 1b01 	strb.w	r1, [r3], #1
 800782c:	e7f9      	b.n	8007822 <memset+0x4>
	...

08007830 <sbrk_aligned>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0e      	ldr	r6, [pc, #56]	; (800786c <sbrk_aligned+0x3c>)
 8007834:	460c      	mov	r4, r1
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	4605      	mov	r5, r0
 800783a:	b911      	cbnz	r1, 8007842 <sbrk_aligned+0x12>
 800783c:	f000 ff3e 	bl	80086bc <_sbrk_r>
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 ff39 	bl	80086bc <_sbrk_r>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d00a      	beq.n	8007864 <sbrk_aligned+0x34>
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	f024 0403 	bic.w	r4, r4, #3
 8007854:	42a0      	cmp	r0, r4
 8007856:	d007      	beq.n	8007868 <sbrk_aligned+0x38>
 8007858:	1a21      	subs	r1, r4, r0
 800785a:	4628      	mov	r0, r5
 800785c:	f000 ff2e 	bl	80086bc <_sbrk_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d101      	bne.n	8007868 <sbrk_aligned+0x38>
 8007864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007868:	4620      	mov	r0, r4
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	20004d80 	.word	0x20004d80

08007870 <_malloc_r>:
 8007870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007874:	1ccd      	adds	r5, r1, #3
 8007876:	f025 0503 	bic.w	r5, r5, #3
 800787a:	3508      	adds	r5, #8
 800787c:	2d0c      	cmp	r5, #12
 800787e:	bf38      	it	cc
 8007880:	250c      	movcc	r5, #12
 8007882:	2d00      	cmp	r5, #0
 8007884:	4607      	mov	r7, r0
 8007886:	db01      	blt.n	800788c <_malloc_r+0x1c>
 8007888:	42a9      	cmp	r1, r5
 800788a:	d905      	bls.n	8007898 <_malloc_r+0x28>
 800788c:	230c      	movs	r3, #12
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	2600      	movs	r6, #0
 8007892:	4630      	mov	r0, r6
 8007894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007898:	4e2e      	ldr	r6, [pc, #184]	; (8007954 <_malloc_r+0xe4>)
 800789a:	f003 f865 	bl	800a968 <__malloc_lock>
 800789e:	6833      	ldr	r3, [r6, #0]
 80078a0:	461c      	mov	r4, r3
 80078a2:	bb34      	cbnz	r4, 80078f2 <_malloc_r+0x82>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4638      	mov	r0, r7
 80078a8:	f7ff ffc2 	bl	8007830 <sbrk_aligned>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	4604      	mov	r4, r0
 80078b0:	d14d      	bne.n	800794e <_malloc_r+0xde>
 80078b2:	6834      	ldr	r4, [r6, #0]
 80078b4:	4626      	mov	r6, r4
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d140      	bne.n	800793c <_malloc_r+0xcc>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	4631      	mov	r1, r6
 80078be:	4638      	mov	r0, r7
 80078c0:	eb04 0803 	add.w	r8, r4, r3
 80078c4:	f000 fefa 	bl	80086bc <_sbrk_r>
 80078c8:	4580      	cmp	r8, r0
 80078ca:	d13a      	bne.n	8007942 <_malloc_r+0xd2>
 80078cc:	6821      	ldr	r1, [r4, #0]
 80078ce:	3503      	adds	r5, #3
 80078d0:	1a6d      	subs	r5, r5, r1
 80078d2:	f025 0503 	bic.w	r5, r5, #3
 80078d6:	3508      	adds	r5, #8
 80078d8:	2d0c      	cmp	r5, #12
 80078da:	bf38      	it	cc
 80078dc:	250c      	movcc	r5, #12
 80078de:	4629      	mov	r1, r5
 80078e0:	4638      	mov	r0, r7
 80078e2:	f7ff ffa5 	bl	8007830 <sbrk_aligned>
 80078e6:	3001      	adds	r0, #1
 80078e8:	d02b      	beq.n	8007942 <_malloc_r+0xd2>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	442b      	add	r3, r5
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	e00e      	b.n	8007910 <_malloc_r+0xa0>
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	1b52      	subs	r2, r2, r5
 80078f6:	d41e      	bmi.n	8007936 <_malloc_r+0xc6>
 80078f8:	2a0b      	cmp	r2, #11
 80078fa:	d916      	bls.n	800792a <_malloc_r+0xba>
 80078fc:	1961      	adds	r1, r4, r5
 80078fe:	42a3      	cmp	r3, r4
 8007900:	6025      	str	r5, [r4, #0]
 8007902:	bf18      	it	ne
 8007904:	6059      	strne	r1, [r3, #4]
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	bf08      	it	eq
 800790a:	6031      	streq	r1, [r6, #0]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4638      	mov	r0, r7
 8007912:	f104 060b 	add.w	r6, r4, #11
 8007916:	f003 f82d 	bl	800a974 <__malloc_unlock>
 800791a:	f026 0607 	bic.w	r6, r6, #7
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	1af2      	subs	r2, r6, r3
 8007922:	d0b6      	beq.n	8007892 <_malloc_r+0x22>
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	50a3      	str	r3, [r4, r2]
 8007928:	e7b3      	b.n	8007892 <_malloc_r+0x22>
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	42a3      	cmp	r3, r4
 800792e:	bf0c      	ite	eq
 8007930:	6032      	streq	r2, [r6, #0]
 8007932:	605a      	strne	r2, [r3, #4]
 8007934:	e7ec      	b.n	8007910 <_malloc_r+0xa0>
 8007936:	4623      	mov	r3, r4
 8007938:	6864      	ldr	r4, [r4, #4]
 800793a:	e7b2      	b.n	80078a2 <_malloc_r+0x32>
 800793c:	4634      	mov	r4, r6
 800793e:	6876      	ldr	r6, [r6, #4]
 8007940:	e7b9      	b.n	80078b6 <_malloc_r+0x46>
 8007942:	230c      	movs	r3, #12
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	4638      	mov	r0, r7
 8007948:	f003 f814 	bl	800a974 <__malloc_unlock>
 800794c:	e7a1      	b.n	8007892 <_malloc_r+0x22>
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	e7de      	b.n	8007910 <_malloc_r+0xa0>
 8007952:	bf00      	nop
 8007954:	20004d7c 	.word	0x20004d7c

08007958 <__cvt>:
 8007958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800795a:	ed2d 8b02 	vpush	{d8}
 800795e:	eeb0 8b40 	vmov.f64	d8, d0
 8007962:	b085      	sub	sp, #20
 8007964:	4617      	mov	r7, r2
 8007966:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007968:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800796a:	ee18 2a90 	vmov	r2, s17
 800796e:	f025 0520 	bic.w	r5, r5, #32
 8007972:	2a00      	cmp	r2, #0
 8007974:	bfb6      	itet	lt
 8007976:	222d      	movlt	r2, #45	; 0x2d
 8007978:	2200      	movge	r2, #0
 800797a:	eeb1 8b40 	vneglt.f64	d8, d0
 800797e:	2d46      	cmp	r5, #70	; 0x46
 8007980:	460c      	mov	r4, r1
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	d004      	beq.n	8007990 <__cvt+0x38>
 8007986:	2d45      	cmp	r5, #69	; 0x45
 8007988:	d100      	bne.n	800798c <__cvt+0x34>
 800798a:	3401      	adds	r4, #1
 800798c:	2102      	movs	r1, #2
 800798e:	e000      	b.n	8007992 <__cvt+0x3a>
 8007990:	2103      	movs	r1, #3
 8007992:	ab03      	add	r3, sp, #12
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	ab02      	add	r3, sp, #8
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	4622      	mov	r2, r4
 800799c:	4633      	mov	r3, r6
 800799e:	eeb0 0b48 	vmov.f64	d0, d8
 80079a2:	f001 fe11 	bl	80095c8 <_dtoa_r>
 80079a6:	2d47      	cmp	r5, #71	; 0x47
 80079a8:	d101      	bne.n	80079ae <__cvt+0x56>
 80079aa:	07fb      	lsls	r3, r7, #31
 80079ac:	d51a      	bpl.n	80079e4 <__cvt+0x8c>
 80079ae:	2d46      	cmp	r5, #70	; 0x46
 80079b0:	eb00 0204 	add.w	r2, r0, r4
 80079b4:	d10c      	bne.n	80079d0 <__cvt+0x78>
 80079b6:	7803      	ldrb	r3, [r0, #0]
 80079b8:	2b30      	cmp	r3, #48	; 0x30
 80079ba:	d107      	bne.n	80079cc <__cvt+0x74>
 80079bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	bf1c      	itt	ne
 80079c6:	f1c4 0401 	rsbne	r4, r4, #1
 80079ca:	6034      	strne	r4, [r6, #0]
 80079cc:	6833      	ldr	r3, [r6, #0]
 80079ce:	441a      	add	r2, r3
 80079d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80079d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d8:	bf08      	it	eq
 80079da:	9203      	streq	r2, [sp, #12]
 80079dc:	2130      	movs	r1, #48	; 0x30
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d307      	bcc.n	80079f4 <__cvt+0x9c>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079e8:	1a1b      	subs	r3, r3, r0
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	b005      	add	sp, #20
 80079ee:	ecbd 8b02 	vpop	{d8}
 80079f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f4:	1c5c      	adds	r4, r3, #1
 80079f6:	9403      	str	r4, [sp, #12]
 80079f8:	7019      	strb	r1, [r3, #0]
 80079fa:	e7f0      	b.n	80079de <__cvt+0x86>

080079fc <__exponent>:
 80079fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079fe:	4603      	mov	r3, r0
 8007a00:	2900      	cmp	r1, #0
 8007a02:	bfb8      	it	lt
 8007a04:	4249      	neglt	r1, r1
 8007a06:	f803 2b02 	strb.w	r2, [r3], #2
 8007a0a:	bfb4      	ite	lt
 8007a0c:	222d      	movlt	r2, #45	; 0x2d
 8007a0e:	222b      	movge	r2, #43	; 0x2b
 8007a10:	2909      	cmp	r1, #9
 8007a12:	7042      	strb	r2, [r0, #1]
 8007a14:	dd2a      	ble.n	8007a6c <__exponent+0x70>
 8007a16:	f10d 0407 	add.w	r4, sp, #7
 8007a1a:	46a4      	mov	ip, r4
 8007a1c:	270a      	movs	r7, #10
 8007a1e:	46a6      	mov	lr, r4
 8007a20:	460a      	mov	r2, r1
 8007a22:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a26:	fb07 1516 	mls	r5, r7, r6, r1
 8007a2a:	3530      	adds	r5, #48	; 0x30
 8007a2c:	2a63      	cmp	r2, #99	; 0x63
 8007a2e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007a32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a36:	4631      	mov	r1, r6
 8007a38:	dcf1      	bgt.n	8007a1e <__exponent+0x22>
 8007a3a:	3130      	adds	r1, #48	; 0x30
 8007a3c:	f1ae 0502 	sub.w	r5, lr, #2
 8007a40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a44:	1c44      	adds	r4, r0, #1
 8007a46:	4629      	mov	r1, r5
 8007a48:	4561      	cmp	r1, ip
 8007a4a:	d30a      	bcc.n	8007a62 <__exponent+0x66>
 8007a4c:	f10d 0209 	add.w	r2, sp, #9
 8007a50:	eba2 020e 	sub.w	r2, r2, lr
 8007a54:	4565      	cmp	r5, ip
 8007a56:	bf88      	it	hi
 8007a58:	2200      	movhi	r2, #0
 8007a5a:	4413      	add	r3, r2
 8007a5c:	1a18      	subs	r0, r3, r0
 8007a5e:	b003      	add	sp, #12
 8007a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a6a:	e7ed      	b.n	8007a48 <__exponent+0x4c>
 8007a6c:	2330      	movs	r3, #48	; 0x30
 8007a6e:	3130      	adds	r1, #48	; 0x30
 8007a70:	7083      	strb	r3, [r0, #2]
 8007a72:	70c1      	strb	r1, [r0, #3]
 8007a74:	1d03      	adds	r3, r0, #4
 8007a76:	e7f1      	b.n	8007a5c <__exponent+0x60>

08007a78 <_printf_float>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	b08b      	sub	sp, #44	; 0x2c
 8007a7e:	460c      	mov	r4, r1
 8007a80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007a84:	4616      	mov	r6, r2
 8007a86:	461f      	mov	r7, r3
 8007a88:	4605      	mov	r5, r0
 8007a8a:	f002 ff3d 	bl	800a908 <_localeconv_r>
 8007a8e:	f8d0 b000 	ldr.w	fp, [r0]
 8007a92:	4658      	mov	r0, fp
 8007a94:	f7f8 fbd4 	bl	8000240 <strlen>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9308      	str	r3, [sp, #32]
 8007a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007aa4:	6822      	ldr	r2, [r4, #0]
 8007aa6:	3307      	adds	r3, #7
 8007aa8:	f023 0307 	bic.w	r3, r3, #7
 8007aac:	f103 0108 	add.w	r1, r3, #8
 8007ab0:	f8c8 1000 	str.w	r1, [r8]
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007aba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007abe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007d20 <_printf_float+0x2a8>
 8007ac2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007ac6:	eeb0 6bc0 	vabs.f64	d6, d0
 8007aca:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad2:	dd24      	ble.n	8007b1e <_printf_float+0xa6>
 8007ad4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007adc:	d502      	bpl.n	8007ae4 <_printf_float+0x6c>
 8007ade:	232d      	movs	r3, #45	; 0x2d
 8007ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae4:	4b90      	ldr	r3, [pc, #576]	; (8007d28 <_printf_float+0x2b0>)
 8007ae6:	4891      	ldr	r0, [pc, #580]	; (8007d2c <_printf_float+0x2b4>)
 8007ae8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007aec:	bf94      	ite	ls
 8007aee:	4698      	movls	r8, r3
 8007af0:	4680      	movhi	r8, r0
 8007af2:	2303      	movs	r3, #3
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	f022 0204 	bic.w	r2, r2, #4
 8007afa:	2300      	movs	r3, #0
 8007afc:	6022      	str	r2, [r4, #0]
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	9700      	str	r7, [sp, #0]
 8007b02:	4633      	mov	r3, r6
 8007b04:	aa09      	add	r2, sp, #36	; 0x24
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 f9d3 	bl	8007eb4 <_printf_common>
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f040 808a 	bne.w	8007c28 <_printf_float+0x1b0>
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b18:	b00b      	add	sp, #44	; 0x2c
 8007b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b26:	d709      	bvc.n	8007b3c <_printf_float+0xc4>
 8007b28:	ee10 3a90 	vmov	r3, s1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfbc      	itt	lt
 8007b30:	232d      	movlt	r3, #45	; 0x2d
 8007b32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b36:	487e      	ldr	r0, [pc, #504]	; (8007d30 <_printf_float+0x2b8>)
 8007b38:	4b7e      	ldr	r3, [pc, #504]	; (8007d34 <_printf_float+0x2bc>)
 8007b3a:	e7d5      	b.n	8007ae8 <_printf_float+0x70>
 8007b3c:	6863      	ldr	r3, [r4, #4]
 8007b3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007b42:	9104      	str	r1, [sp, #16]
 8007b44:	1c59      	adds	r1, r3, #1
 8007b46:	d13c      	bne.n	8007bc2 <_printf_float+0x14a>
 8007b48:	2306      	movs	r3, #6
 8007b4a:	6063      	str	r3, [r4, #4]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9303      	str	r3, [sp, #12]
 8007b50:	ab08      	add	r3, sp, #32
 8007b52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007b56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b5a:	ab07      	add	r3, sp, #28
 8007b5c:	6861      	ldr	r1, [r4, #4]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	6022      	str	r2, [r4, #0]
 8007b62:	f10d 031b 	add.w	r3, sp, #27
 8007b66:	4628      	mov	r0, r5
 8007b68:	f7ff fef6 	bl	8007958 <__cvt>
 8007b6c:	9b04      	ldr	r3, [sp, #16]
 8007b6e:	9907      	ldr	r1, [sp, #28]
 8007b70:	2b47      	cmp	r3, #71	; 0x47
 8007b72:	4680      	mov	r8, r0
 8007b74:	d108      	bne.n	8007b88 <_printf_float+0x110>
 8007b76:	1cc8      	adds	r0, r1, #3
 8007b78:	db02      	blt.n	8007b80 <_printf_float+0x108>
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	dd41      	ble.n	8007c04 <_printf_float+0x18c>
 8007b80:	f1a9 0902 	sub.w	r9, r9, #2
 8007b84:	fa5f f989 	uxtb.w	r9, r9
 8007b88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b8c:	d820      	bhi.n	8007bd0 <_printf_float+0x158>
 8007b8e:	3901      	subs	r1, #1
 8007b90:	464a      	mov	r2, r9
 8007b92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b96:	9107      	str	r1, [sp, #28]
 8007b98:	f7ff ff30 	bl	80079fc <__exponent>
 8007b9c:	9a08      	ldr	r2, [sp, #32]
 8007b9e:	9004      	str	r0, [sp, #16]
 8007ba0:	1813      	adds	r3, r2, r0
 8007ba2:	2a01      	cmp	r2, #1
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	dc02      	bgt.n	8007bae <_printf_float+0x136>
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	07d2      	lsls	r2, r2, #31
 8007bac:	d501      	bpl.n	8007bb2 <_printf_float+0x13a>
 8007bae:	3301      	adds	r3, #1
 8007bb0:	6123      	str	r3, [r4, #16]
 8007bb2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0a2      	beq.n	8007b00 <_printf_float+0x88>
 8007bba:	232d      	movs	r3, #45	; 0x2d
 8007bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc0:	e79e      	b.n	8007b00 <_printf_float+0x88>
 8007bc2:	9904      	ldr	r1, [sp, #16]
 8007bc4:	2947      	cmp	r1, #71	; 0x47
 8007bc6:	d1c1      	bne.n	8007b4c <_printf_float+0xd4>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1bf      	bne.n	8007b4c <_printf_float+0xd4>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e7bc      	b.n	8007b4a <_printf_float+0xd2>
 8007bd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007bd4:	d118      	bne.n	8007c08 <_printf_float+0x190>
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	dd0b      	ble.n	8007bf4 <_printf_float+0x17c>
 8007bdc:	6121      	str	r1, [r4, #16]
 8007bde:	b913      	cbnz	r3, 8007be6 <_printf_float+0x16e>
 8007be0:	6822      	ldr	r2, [r4, #0]
 8007be2:	07d0      	lsls	r0, r2, #31
 8007be4:	d502      	bpl.n	8007bec <_printf_float+0x174>
 8007be6:	3301      	adds	r3, #1
 8007be8:	440b      	add	r3, r1
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	2300      	movs	r3, #0
 8007bee:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	e7de      	b.n	8007bb2 <_printf_float+0x13a>
 8007bf4:	b913      	cbnz	r3, 8007bfc <_printf_float+0x184>
 8007bf6:	6822      	ldr	r2, [r4, #0]
 8007bf8:	07d2      	lsls	r2, r2, #31
 8007bfa:	d501      	bpl.n	8007c00 <_printf_float+0x188>
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	e7f4      	b.n	8007bea <_printf_float+0x172>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e7f2      	b.n	8007bea <_printf_float+0x172>
 8007c04:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007c08:	9b08      	ldr	r3, [sp, #32]
 8007c0a:	4299      	cmp	r1, r3
 8007c0c:	db05      	blt.n	8007c1a <_printf_float+0x1a2>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	6121      	str	r1, [r4, #16]
 8007c12:	07d8      	lsls	r0, r3, #31
 8007c14:	d5ea      	bpl.n	8007bec <_printf_float+0x174>
 8007c16:	1c4b      	adds	r3, r1, #1
 8007c18:	e7e7      	b.n	8007bea <_printf_float+0x172>
 8007c1a:	2900      	cmp	r1, #0
 8007c1c:	bfd4      	ite	le
 8007c1e:	f1c1 0202 	rsble	r2, r1, #2
 8007c22:	2201      	movgt	r2, #1
 8007c24:	4413      	add	r3, r2
 8007c26:	e7e0      	b.n	8007bea <_printf_float+0x172>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	055a      	lsls	r2, r3, #21
 8007c2c:	d407      	bmi.n	8007c3e <_printf_float+0x1c6>
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	4642      	mov	r2, r8
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d12a      	bne.n	8007c92 <_printf_float+0x21a>
 8007c3c:	e76a      	b.n	8007b14 <_printf_float+0x9c>
 8007c3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c42:	f240 80e2 	bls.w	8007e0a <_printf_float+0x392>
 8007c46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	d133      	bne.n	8007cbc <_printf_float+0x244>
 8007c54:	4a38      	ldr	r2, [pc, #224]	; (8007d38 <_printf_float+0x2c0>)
 8007c56:	2301      	movs	r3, #1
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b8      	blx	r7
 8007c5e:	3001      	adds	r0, #1
 8007c60:	f43f af58 	beq.w	8007b14 <_printf_float+0x9c>
 8007c64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	db02      	blt.n	8007c72 <_printf_float+0x1fa>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	07d8      	lsls	r0, r3, #31
 8007c70:	d50f      	bpl.n	8007c92 <_printf_float+0x21a>
 8007c72:	4653      	mov	r3, sl
 8007c74:	465a      	mov	r2, fp
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	f43f af49 	beq.w	8007b14 <_printf_float+0x9c>
 8007c82:	f04f 0800 	mov.w	r8, #0
 8007c86:	f104 091a 	add.w	r9, r4, #26
 8007c8a:	9b08      	ldr	r3, [sp, #32]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	4543      	cmp	r3, r8
 8007c90:	dc09      	bgt.n	8007ca6 <_printf_float+0x22e>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	079b      	lsls	r3, r3, #30
 8007c96:	f100 8108 	bmi.w	8007eaa <_printf_float+0x432>
 8007c9a:	68e0      	ldr	r0, [r4, #12]
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	4298      	cmp	r0, r3
 8007ca0:	bfb8      	it	lt
 8007ca2:	4618      	movlt	r0, r3
 8007ca4:	e738      	b.n	8007b18 <_printf_float+0xa0>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	464a      	mov	r2, r9
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b8      	blx	r7
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	f43f af2f 	beq.w	8007b14 <_printf_float+0x9c>
 8007cb6:	f108 0801 	add.w	r8, r8, #1
 8007cba:	e7e6      	b.n	8007c8a <_printf_float+0x212>
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dc3c      	bgt.n	8007d3c <_printf_float+0x2c4>
 8007cc2:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <_printf_float+0x2c0>)
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f af21 	beq.w	8007b14 <_printf_float+0x9c>
 8007cd2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	d102      	bne.n	8007ce0 <_printf_float+0x268>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	07d9      	lsls	r1, r3, #31
 8007cde:	d5d8      	bpl.n	8007c92 <_printf_float+0x21a>
 8007ce0:	4653      	mov	r3, sl
 8007ce2:	465a      	mov	r2, fp
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	f43f af12 	beq.w	8007b14 <_printf_float+0x9c>
 8007cf0:	f04f 0900 	mov.w	r9, #0
 8007cf4:	f104 0a1a 	add.w	sl, r4, #26
 8007cf8:	9b07      	ldr	r3, [sp, #28]
 8007cfa:	425b      	negs	r3, r3
 8007cfc:	454b      	cmp	r3, r9
 8007cfe:	dc01      	bgt.n	8007d04 <_printf_float+0x28c>
 8007d00:	9b08      	ldr	r3, [sp, #32]
 8007d02:	e795      	b.n	8007c30 <_printf_float+0x1b8>
 8007d04:	2301      	movs	r3, #1
 8007d06:	4652      	mov	r2, sl
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af00 	beq.w	8007b14 <_printf_float+0x9c>
 8007d14:	f109 0901 	add.w	r9, r9, #1
 8007d18:	e7ee      	b.n	8007cf8 <_printf_float+0x280>
 8007d1a:	bf00      	nop
 8007d1c:	f3af 8000 	nop.w
 8007d20:	ffffffff 	.word	0xffffffff
 8007d24:	7fefffff 	.word	0x7fefffff
 8007d28:	0800bf1c 	.word	0x0800bf1c
 8007d2c:	0800bf20 	.word	0x0800bf20
 8007d30:	0800bf28 	.word	0x0800bf28
 8007d34:	0800bf24 	.word	0x0800bf24
 8007d38:	0800bf2c 	.word	0x0800bf2c
 8007d3c:	9a08      	ldr	r2, [sp, #32]
 8007d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d40:	429a      	cmp	r2, r3
 8007d42:	bfa8      	it	ge
 8007d44:	461a      	movge	r2, r3
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	4691      	mov	r9, r2
 8007d4a:	dc38      	bgt.n	8007dbe <_printf_float+0x346>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9305      	str	r3, [sp, #20]
 8007d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d54:	f104 021a 	add.w	r2, r4, #26
 8007d58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d5a:	9905      	ldr	r1, [sp, #20]
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	eba3 0309 	sub.w	r3, r3, r9
 8007d62:	428b      	cmp	r3, r1
 8007d64:	dc33      	bgt.n	8007dce <_printf_float+0x356>
 8007d66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	db3c      	blt.n	8007de8 <_printf_float+0x370>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	07da      	lsls	r2, r3, #31
 8007d72:	d439      	bmi.n	8007de8 <_printf_float+0x370>
 8007d74:	9b08      	ldr	r3, [sp, #32]
 8007d76:	9a04      	ldr	r2, [sp, #16]
 8007d78:	9907      	ldr	r1, [sp, #28]
 8007d7a:	1a9a      	subs	r2, r3, r2
 8007d7c:	eba3 0901 	sub.w	r9, r3, r1
 8007d80:	4591      	cmp	r9, r2
 8007d82:	bfa8      	it	ge
 8007d84:	4691      	movge	r9, r2
 8007d86:	f1b9 0f00 	cmp.w	r9, #0
 8007d8a:	dc35      	bgt.n	8007df8 <_printf_float+0x380>
 8007d8c:	f04f 0800 	mov.w	r8, #0
 8007d90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d94:	f104 0a1a 	add.w	sl, r4, #26
 8007d98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	eba3 0309 	sub.w	r3, r3, r9
 8007da2:	4543      	cmp	r3, r8
 8007da4:	f77f af75 	ble.w	8007c92 <_printf_float+0x21a>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4652      	mov	r2, sl
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f aeae 	beq.w	8007b14 <_printf_float+0x9c>
 8007db8:	f108 0801 	add.w	r8, r8, #1
 8007dbc:	e7ec      	b.n	8007d98 <_printf_float+0x320>
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d1bf      	bne.n	8007d4c <_printf_float+0x2d4>
 8007dcc:	e6a2      	b.n	8007b14 <_printf_float+0x9c>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	9204      	str	r2, [sp, #16]
 8007dd6:	47b8      	blx	r7
 8007dd8:	3001      	adds	r0, #1
 8007dda:	f43f ae9b 	beq.w	8007b14 <_printf_float+0x9c>
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	9a04      	ldr	r2, [sp, #16]
 8007de2:	3301      	adds	r3, #1
 8007de4:	9305      	str	r3, [sp, #20]
 8007de6:	e7b7      	b.n	8007d58 <_printf_float+0x2e0>
 8007de8:	4653      	mov	r3, sl
 8007dea:	465a      	mov	r2, fp
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	d1be      	bne.n	8007d74 <_printf_float+0x2fc>
 8007df6:	e68d      	b.n	8007b14 <_printf_float+0x9c>
 8007df8:	9a04      	ldr	r2, [sp, #16]
 8007dfa:	464b      	mov	r3, r9
 8007dfc:	4442      	add	r2, r8
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b8      	blx	r7
 8007e04:	3001      	adds	r0, #1
 8007e06:	d1c1      	bne.n	8007d8c <_printf_float+0x314>
 8007e08:	e684      	b.n	8007b14 <_printf_float+0x9c>
 8007e0a:	9a08      	ldr	r2, [sp, #32]
 8007e0c:	2a01      	cmp	r2, #1
 8007e0e:	dc01      	bgt.n	8007e14 <_printf_float+0x39c>
 8007e10:	07db      	lsls	r3, r3, #31
 8007e12:	d537      	bpl.n	8007e84 <_printf_float+0x40c>
 8007e14:	2301      	movs	r3, #1
 8007e16:	4642      	mov	r2, r8
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f43f ae78 	beq.w	8007b14 <_printf_float+0x9c>
 8007e24:	4653      	mov	r3, sl
 8007e26:	465a      	mov	r2, fp
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f ae70 	beq.w	8007b14 <_printf_float+0x9c>
 8007e34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e40:	d01b      	beq.n	8007e7a <_printf_float+0x402>
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	f108 0201 	add.w	r2, r8, #1
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	d10e      	bne.n	8007e72 <_printf_float+0x3fa>
 8007e54:	e65e      	b.n	8007b14 <_printf_float+0x9c>
 8007e56:	2301      	movs	r3, #1
 8007e58:	464a      	mov	r2, r9
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae57 	beq.w	8007b14 <_printf_float+0x9c>
 8007e66:	f108 0801 	add.w	r8, r8, #1
 8007e6a:	9b08      	ldr	r3, [sp, #32]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	4543      	cmp	r3, r8
 8007e70:	dcf1      	bgt.n	8007e56 <_printf_float+0x3de>
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e78:	e6db      	b.n	8007c32 <_printf_float+0x1ba>
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	f104 091a 	add.w	r9, r4, #26
 8007e82:	e7f2      	b.n	8007e6a <_printf_float+0x3f2>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4642      	mov	r2, r8
 8007e88:	e7df      	b.n	8007e4a <_printf_float+0x3d2>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	464a      	mov	r2, r9
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	f43f ae3d 	beq.w	8007b14 <_printf_float+0x9c>
 8007e9a:	f108 0801 	add.w	r8, r8, #1
 8007e9e:	68e3      	ldr	r3, [r4, #12]
 8007ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ea2:	1a5b      	subs	r3, r3, r1
 8007ea4:	4543      	cmp	r3, r8
 8007ea6:	dcf0      	bgt.n	8007e8a <_printf_float+0x412>
 8007ea8:	e6f7      	b.n	8007c9a <_printf_float+0x222>
 8007eaa:	f04f 0800 	mov.w	r8, #0
 8007eae:	f104 0919 	add.w	r9, r4, #25
 8007eb2:	e7f4      	b.n	8007e9e <_printf_float+0x426>

08007eb4 <_printf_common>:
 8007eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	4616      	mov	r6, r2
 8007eba:	4699      	mov	r9, r3
 8007ebc:	688a      	ldr	r2, [r1, #8]
 8007ebe:	690b      	ldr	r3, [r1, #16]
 8007ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bfb8      	it	lt
 8007ec8:	4613      	movlt	r3, r2
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b10a      	cbz	r2, 8007eda <_printf_common+0x26>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	0699      	lsls	r1, r3, #26
 8007ede:	bf42      	ittt	mi
 8007ee0:	6833      	ldrmi	r3, [r6, #0]
 8007ee2:	3302      	addmi	r3, #2
 8007ee4:	6033      	strmi	r3, [r6, #0]
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	f015 0506 	ands.w	r5, r5, #6
 8007eec:	d106      	bne.n	8007efc <_printf_common+0x48>
 8007eee:	f104 0a19 	add.w	sl, r4, #25
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	6832      	ldr	r2, [r6, #0]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dc26      	bgt.n	8007f4a <_printf_common+0x96>
 8007efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f00:	1e13      	subs	r3, r2, #0
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	bf18      	it	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	0692      	lsls	r2, r2, #26
 8007f0a:	d42b      	bmi.n	8007f64 <_printf_common+0xb0>
 8007f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d01e      	beq.n	8007f58 <_printf_common+0xa4>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	68e5      	ldr	r5, [r4, #12]
 8007f1e:	6832      	ldr	r2, [r6, #0]
 8007f20:	f003 0306 	and.w	r3, r3, #6
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	bf08      	it	eq
 8007f28:	1aad      	subeq	r5, r5, r2
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	6922      	ldr	r2, [r4, #16]
 8007f2e:	bf0c      	ite	eq
 8007f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f34:	2500      	movne	r5, #0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bfc4      	itt	gt
 8007f3a:	1a9b      	subgt	r3, r3, r2
 8007f3c:	18ed      	addgt	r5, r5, r3
 8007f3e:	2600      	movs	r6, #0
 8007f40:	341a      	adds	r4, #26
 8007f42:	42b5      	cmp	r5, r6
 8007f44:	d11a      	bne.n	8007f7c <_printf_common+0xc8>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e008      	b.n	8007f5c <_printf_common+0xa8>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4638      	mov	r0, r7
 8007f52:	47c0      	blx	r8
 8007f54:	3001      	adds	r0, #1
 8007f56:	d103      	bne.n	8007f60 <_printf_common+0xac>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7c6      	b.n	8007ef2 <_printf_common+0x3e>
 8007f64:	18e1      	adds	r1, r4, r3
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	2030      	movs	r0, #48	; 0x30
 8007f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f6e:	4422      	add	r2, r4
 8007f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f78:	3302      	adds	r3, #2
 8007f7a:	e7c7      	b.n	8007f0c <_printf_common+0x58>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4649      	mov	r1, r9
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c0      	blx	r8
 8007f86:	3001      	adds	r0, #1
 8007f88:	d0e6      	beq.n	8007f58 <_printf_common+0xa4>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7d9      	b.n	8007f42 <_printf_common+0x8e>
	...

08007f90 <_printf_i>:
 8007f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	7e0f      	ldrb	r7, [r1, #24]
 8007f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f98:	2f78      	cmp	r7, #120	; 0x78
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fa6:	d807      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fa8:	2f62      	cmp	r7, #98	; 0x62
 8007faa:	d80a      	bhi.n	8007fc2 <_printf_i+0x32>
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	f000 80d8 	beq.w	8008162 <_printf_i+0x1d2>
 8007fb2:	2f58      	cmp	r7, #88	; 0x58
 8007fb4:	f000 80a3 	beq.w	80080fe <_printf_i+0x16e>
 8007fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc0:	e03a      	b.n	8008038 <_printf_i+0xa8>
 8007fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fc6:	2b15      	cmp	r3, #21
 8007fc8:	d8f6      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fca:	a101      	add	r1, pc, #4	; (adr r1, 8007fd0 <_printf_i+0x40>)
 8007fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd0:	08008029 	.word	0x08008029
 8007fd4:	0800803d 	.word	0x0800803d
 8007fd8:	08007fb9 	.word	0x08007fb9
 8007fdc:	08007fb9 	.word	0x08007fb9
 8007fe0:	08007fb9 	.word	0x08007fb9
 8007fe4:	08007fb9 	.word	0x08007fb9
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	08007fb9 	.word	0x08007fb9
 8007ff0:	08007fb9 	.word	0x08007fb9
 8007ff4:	08007fb9 	.word	0x08007fb9
 8007ff8:	08007fb9 	.word	0x08007fb9
 8007ffc:	08008149 	.word	0x08008149
 8008000:	0800806d 	.word	0x0800806d
 8008004:	0800812b 	.word	0x0800812b
 8008008:	08007fb9 	.word	0x08007fb9
 800800c:	08007fb9 	.word	0x08007fb9
 8008010:	0800816b 	.word	0x0800816b
 8008014:	08007fb9 	.word	0x08007fb9
 8008018:	0800806d 	.word	0x0800806d
 800801c:	08007fb9 	.word	0x08007fb9
 8008020:	08007fb9 	.word	0x08007fb9
 8008024:	08008133 	.word	0x08008133
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	602a      	str	r2, [r5, #0]
 8008030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008038:	2301      	movs	r3, #1
 800803a:	e0a3      	b.n	8008184 <_printf_i+0x1f4>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	6829      	ldr	r1, [r5, #0]
 8008040:	0606      	lsls	r6, r0, #24
 8008042:	f101 0304 	add.w	r3, r1, #4
 8008046:	d50a      	bpl.n	800805e <_printf_i+0xce>
 8008048:	680e      	ldr	r6, [r1, #0]
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	2e00      	cmp	r6, #0
 800804e:	da03      	bge.n	8008058 <_printf_i+0xc8>
 8008050:	232d      	movs	r3, #45	; 0x2d
 8008052:	4276      	negs	r6, r6
 8008054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008058:	485e      	ldr	r0, [pc, #376]	; (80081d4 <_printf_i+0x244>)
 800805a:	230a      	movs	r3, #10
 800805c:	e019      	b.n	8008092 <_printf_i+0x102>
 800805e:	680e      	ldr	r6, [r1, #0]
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008066:	bf18      	it	ne
 8008068:	b236      	sxthne	r6, r6
 800806a:	e7ef      	b.n	800804c <_printf_i+0xbc>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	6029      	str	r1, [r5, #0]
 8008074:	0601      	lsls	r1, r0, #24
 8008076:	d501      	bpl.n	800807c <_printf_i+0xec>
 8008078:	681e      	ldr	r6, [r3, #0]
 800807a:	e002      	b.n	8008082 <_printf_i+0xf2>
 800807c:	0646      	lsls	r6, r0, #25
 800807e:	d5fb      	bpl.n	8008078 <_printf_i+0xe8>
 8008080:	881e      	ldrh	r6, [r3, #0]
 8008082:	4854      	ldr	r0, [pc, #336]	; (80081d4 <_printf_i+0x244>)
 8008084:	2f6f      	cmp	r7, #111	; 0x6f
 8008086:	bf0c      	ite	eq
 8008088:	2308      	moveq	r3, #8
 800808a:	230a      	movne	r3, #10
 800808c:	2100      	movs	r1, #0
 800808e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008092:	6865      	ldr	r5, [r4, #4]
 8008094:	60a5      	str	r5, [r4, #8]
 8008096:	2d00      	cmp	r5, #0
 8008098:	bfa2      	ittt	ge
 800809a:	6821      	ldrge	r1, [r4, #0]
 800809c:	f021 0104 	bicge.w	r1, r1, #4
 80080a0:	6021      	strge	r1, [r4, #0]
 80080a2:	b90e      	cbnz	r6, 80080a8 <_printf_i+0x118>
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	d04d      	beq.n	8008144 <_printf_i+0x1b4>
 80080a8:	4615      	mov	r5, r2
 80080aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ae:	fb03 6711 	mls	r7, r3, r1, r6
 80080b2:	5dc7      	ldrb	r7, [r0, r7]
 80080b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080b8:	4637      	mov	r7, r6
 80080ba:	42bb      	cmp	r3, r7
 80080bc:	460e      	mov	r6, r1
 80080be:	d9f4      	bls.n	80080aa <_printf_i+0x11a>
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10b      	bne.n	80080dc <_printf_i+0x14c>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07de      	lsls	r6, r3, #31
 80080c8:	d508      	bpl.n	80080dc <_printf_i+0x14c>
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4299      	cmp	r1, r3
 80080d0:	bfde      	ittt	le
 80080d2:	2330      	movle	r3, #48	; 0x30
 80080d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80080dc:	1b52      	subs	r2, r2, r5
 80080de:	6122      	str	r2, [r4, #16]
 80080e0:	f8cd a000 	str.w	sl, [sp]
 80080e4:	464b      	mov	r3, r9
 80080e6:	aa03      	add	r2, sp, #12
 80080e8:	4621      	mov	r1, r4
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fee2 	bl	8007eb4 <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d14c      	bne.n	800818e <_printf_i+0x1fe>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080f8:	b004      	add	sp, #16
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	4835      	ldr	r0, [pc, #212]	; (80081d4 <_printf_i+0x244>)
 8008100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008104:	6829      	ldr	r1, [r5, #0]
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	f851 6b04 	ldr.w	r6, [r1], #4
 800810c:	6029      	str	r1, [r5, #0]
 800810e:	061d      	lsls	r5, r3, #24
 8008110:	d514      	bpl.n	800813c <_printf_i+0x1ac>
 8008112:	07df      	lsls	r7, r3, #31
 8008114:	bf44      	itt	mi
 8008116:	f043 0320 	orrmi.w	r3, r3, #32
 800811a:	6023      	strmi	r3, [r4, #0]
 800811c:	b91e      	cbnz	r6, 8008126 <_printf_i+0x196>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f023 0320 	bic.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	2310      	movs	r3, #16
 8008128:	e7b0      	b.n	800808c <_printf_i+0xfc>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	f043 0320 	orr.w	r3, r3, #32
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	2378      	movs	r3, #120	; 0x78
 8008134:	4828      	ldr	r0, [pc, #160]	; (80081d8 <_printf_i+0x248>)
 8008136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800813a:	e7e3      	b.n	8008104 <_printf_i+0x174>
 800813c:	0659      	lsls	r1, r3, #25
 800813e:	bf48      	it	mi
 8008140:	b2b6      	uxthmi	r6, r6
 8008142:	e7e6      	b.n	8008112 <_printf_i+0x182>
 8008144:	4615      	mov	r5, r2
 8008146:	e7bb      	b.n	80080c0 <_printf_i+0x130>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	6826      	ldr	r6, [r4, #0]
 800814c:	6961      	ldr	r1, [r4, #20]
 800814e:	1d18      	adds	r0, r3, #4
 8008150:	6028      	str	r0, [r5, #0]
 8008152:	0635      	lsls	r5, r6, #24
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	d501      	bpl.n	800815c <_printf_i+0x1cc>
 8008158:	6019      	str	r1, [r3, #0]
 800815a:	e002      	b.n	8008162 <_printf_i+0x1d2>
 800815c:	0670      	lsls	r0, r6, #25
 800815e:	d5fb      	bpl.n	8008158 <_printf_i+0x1c8>
 8008160:	8019      	strh	r1, [r3, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	4615      	mov	r5, r2
 8008168:	e7ba      	b.n	80080e0 <_printf_i+0x150>
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	1d1a      	adds	r2, r3, #4
 800816e:	602a      	str	r2, [r5, #0]
 8008170:	681d      	ldr	r5, [r3, #0]
 8008172:	6862      	ldr	r2, [r4, #4]
 8008174:	2100      	movs	r1, #0
 8008176:	4628      	mov	r0, r5
 8008178:	f7f8 f86a 	bl	8000250 <memchr>
 800817c:	b108      	cbz	r0, 8008182 <_printf_i+0x1f2>
 800817e:	1b40      	subs	r0, r0, r5
 8008180:	6060      	str	r0, [r4, #4]
 8008182:	6863      	ldr	r3, [r4, #4]
 8008184:	6123      	str	r3, [r4, #16]
 8008186:	2300      	movs	r3, #0
 8008188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800818c:	e7a8      	b.n	80080e0 <_printf_i+0x150>
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	462a      	mov	r2, r5
 8008192:	4649      	mov	r1, r9
 8008194:	4640      	mov	r0, r8
 8008196:	47d0      	blx	sl
 8008198:	3001      	adds	r0, #1
 800819a:	d0ab      	beq.n	80080f4 <_printf_i+0x164>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	079b      	lsls	r3, r3, #30
 80081a0:	d413      	bmi.n	80081ca <_printf_i+0x23a>
 80081a2:	68e0      	ldr	r0, [r4, #12]
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	4298      	cmp	r0, r3
 80081a8:	bfb8      	it	lt
 80081aa:	4618      	movlt	r0, r3
 80081ac:	e7a4      	b.n	80080f8 <_printf_i+0x168>
 80081ae:	2301      	movs	r3, #1
 80081b0:	4632      	mov	r2, r6
 80081b2:	4649      	mov	r1, r9
 80081b4:	4640      	mov	r0, r8
 80081b6:	47d0      	blx	sl
 80081b8:	3001      	adds	r0, #1
 80081ba:	d09b      	beq.n	80080f4 <_printf_i+0x164>
 80081bc:	3501      	adds	r5, #1
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	9903      	ldr	r1, [sp, #12]
 80081c2:	1a5b      	subs	r3, r3, r1
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dcf2      	bgt.n	80081ae <_printf_i+0x21e>
 80081c8:	e7eb      	b.n	80081a2 <_printf_i+0x212>
 80081ca:	2500      	movs	r5, #0
 80081cc:	f104 0619 	add.w	r6, r4, #25
 80081d0:	e7f5      	b.n	80081be <_printf_i+0x22e>
 80081d2:	bf00      	nop
 80081d4:	0800bf2e 	.word	0x0800bf2e
 80081d8:	0800bf3f 	.word	0x0800bf3f

080081dc <_scanf_float>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	b087      	sub	sp, #28
 80081e2:	4617      	mov	r7, r2
 80081e4:	9303      	str	r3, [sp, #12]
 80081e6:	688b      	ldr	r3, [r1, #8]
 80081e8:	1e5a      	subs	r2, r3, #1
 80081ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80081ee:	bf83      	ittte	hi
 80081f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80081f4:	195b      	addhi	r3, r3, r5
 80081f6:	9302      	strhi	r3, [sp, #8]
 80081f8:	2300      	movls	r3, #0
 80081fa:	bf86      	itte	hi
 80081fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008200:	608b      	strhi	r3, [r1, #8]
 8008202:	9302      	strls	r3, [sp, #8]
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	468b      	mov	fp, r1
 8008208:	2500      	movs	r5, #0
 800820a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800820e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008212:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008216:	4680      	mov	r8, r0
 8008218:	460c      	mov	r4, r1
 800821a:	465e      	mov	r6, fp
 800821c:	46aa      	mov	sl, r5
 800821e:	46a9      	mov	r9, r5
 8008220:	9501      	str	r5, [sp, #4]
 8008222:	68a2      	ldr	r2, [r4, #8]
 8008224:	b152      	cbz	r2, 800823c <_scanf_float+0x60>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b4e      	cmp	r3, #78	; 0x4e
 800822c:	d864      	bhi.n	80082f8 <_scanf_float+0x11c>
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d83c      	bhi.n	80082ac <_scanf_float+0xd0>
 8008232:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008236:	b2c8      	uxtb	r0, r1
 8008238:	280e      	cmp	r0, #14
 800823a:	d93a      	bls.n	80082b2 <_scanf_float+0xd6>
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	d003      	beq.n	800824a <_scanf_float+0x6e>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800824e:	f1ba 0f01 	cmp.w	sl, #1
 8008252:	f200 8113 	bhi.w	800847c <_scanf_float+0x2a0>
 8008256:	455e      	cmp	r6, fp
 8008258:	f200 8105 	bhi.w	8008466 <_scanf_float+0x28a>
 800825c:	2501      	movs	r5, #1
 800825e:	4628      	mov	r0, r5
 8008260:	b007      	add	sp, #28
 8008262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008266:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800826a:	2a0d      	cmp	r2, #13
 800826c:	d8e6      	bhi.n	800823c <_scanf_float+0x60>
 800826e:	a101      	add	r1, pc, #4	; (adr r1, 8008274 <_scanf_float+0x98>)
 8008270:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008274:	080083b3 	.word	0x080083b3
 8008278:	0800823d 	.word	0x0800823d
 800827c:	0800823d 	.word	0x0800823d
 8008280:	0800823d 	.word	0x0800823d
 8008284:	08008413 	.word	0x08008413
 8008288:	080083eb 	.word	0x080083eb
 800828c:	0800823d 	.word	0x0800823d
 8008290:	0800823d 	.word	0x0800823d
 8008294:	080083c1 	.word	0x080083c1
 8008298:	0800823d 	.word	0x0800823d
 800829c:	0800823d 	.word	0x0800823d
 80082a0:	0800823d 	.word	0x0800823d
 80082a4:	0800823d 	.word	0x0800823d
 80082a8:	08008379 	.word	0x08008379
 80082ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80082b0:	e7db      	b.n	800826a <_scanf_float+0x8e>
 80082b2:	290e      	cmp	r1, #14
 80082b4:	d8c2      	bhi.n	800823c <_scanf_float+0x60>
 80082b6:	a001      	add	r0, pc, #4	; (adr r0, 80082bc <_scanf_float+0xe0>)
 80082b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082bc:	0800836b 	.word	0x0800836b
 80082c0:	0800823d 	.word	0x0800823d
 80082c4:	0800836b 	.word	0x0800836b
 80082c8:	080083ff 	.word	0x080083ff
 80082cc:	0800823d 	.word	0x0800823d
 80082d0:	08008319 	.word	0x08008319
 80082d4:	08008355 	.word	0x08008355
 80082d8:	08008355 	.word	0x08008355
 80082dc:	08008355 	.word	0x08008355
 80082e0:	08008355 	.word	0x08008355
 80082e4:	08008355 	.word	0x08008355
 80082e8:	08008355 	.word	0x08008355
 80082ec:	08008355 	.word	0x08008355
 80082f0:	08008355 	.word	0x08008355
 80082f4:	08008355 	.word	0x08008355
 80082f8:	2b6e      	cmp	r3, #110	; 0x6e
 80082fa:	d809      	bhi.n	8008310 <_scanf_float+0x134>
 80082fc:	2b60      	cmp	r3, #96	; 0x60
 80082fe:	d8b2      	bhi.n	8008266 <_scanf_float+0x8a>
 8008300:	2b54      	cmp	r3, #84	; 0x54
 8008302:	d077      	beq.n	80083f4 <_scanf_float+0x218>
 8008304:	2b59      	cmp	r3, #89	; 0x59
 8008306:	d199      	bne.n	800823c <_scanf_float+0x60>
 8008308:	2d07      	cmp	r5, #7
 800830a:	d197      	bne.n	800823c <_scanf_float+0x60>
 800830c:	2508      	movs	r5, #8
 800830e:	e029      	b.n	8008364 <_scanf_float+0x188>
 8008310:	2b74      	cmp	r3, #116	; 0x74
 8008312:	d06f      	beq.n	80083f4 <_scanf_float+0x218>
 8008314:	2b79      	cmp	r3, #121	; 0x79
 8008316:	e7f6      	b.n	8008306 <_scanf_float+0x12a>
 8008318:	6821      	ldr	r1, [r4, #0]
 800831a:	05c8      	lsls	r0, r1, #23
 800831c:	d51a      	bpl.n	8008354 <_scanf_float+0x178>
 800831e:	9b02      	ldr	r3, [sp, #8]
 8008320:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008324:	6021      	str	r1, [r4, #0]
 8008326:	f109 0901 	add.w	r9, r9, #1
 800832a:	b11b      	cbz	r3, 8008334 <_scanf_float+0x158>
 800832c:	3b01      	subs	r3, #1
 800832e:	3201      	adds	r2, #1
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	60a2      	str	r2, [r4, #8]
 8008334:	68a3      	ldr	r3, [r4, #8]
 8008336:	3b01      	subs	r3, #1
 8008338:	60a3      	str	r3, [r4, #8]
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	3301      	adds	r3, #1
 800833e:	6123      	str	r3, [r4, #16]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3b01      	subs	r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	607b      	str	r3, [r7, #4]
 8008348:	f340 8084 	ble.w	8008454 <_scanf_float+0x278>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	3301      	adds	r3, #1
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	e766      	b.n	8008222 <_scanf_float+0x46>
 8008354:	eb1a 0f05 	cmn.w	sl, r5
 8008358:	f47f af70 	bne.w	800823c <_scanf_float+0x60>
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008362:	6022      	str	r2, [r4, #0]
 8008364:	f806 3b01 	strb.w	r3, [r6], #1
 8008368:	e7e4      	b.n	8008334 <_scanf_float+0x158>
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	0610      	lsls	r0, r2, #24
 800836e:	f57f af65 	bpl.w	800823c <_scanf_float+0x60>
 8008372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008376:	e7f4      	b.n	8008362 <_scanf_float+0x186>
 8008378:	f1ba 0f00 	cmp.w	sl, #0
 800837c:	d10e      	bne.n	800839c <_scanf_float+0x1c0>
 800837e:	f1b9 0f00 	cmp.w	r9, #0
 8008382:	d10e      	bne.n	80083a2 <_scanf_float+0x1c6>
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800838a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800838e:	d108      	bne.n	80083a2 <_scanf_float+0x1c6>
 8008390:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008394:	6022      	str	r2, [r4, #0]
 8008396:	f04f 0a01 	mov.w	sl, #1
 800839a:	e7e3      	b.n	8008364 <_scanf_float+0x188>
 800839c:	f1ba 0f02 	cmp.w	sl, #2
 80083a0:	d055      	beq.n	800844e <_scanf_float+0x272>
 80083a2:	2d01      	cmp	r5, #1
 80083a4:	d002      	beq.n	80083ac <_scanf_float+0x1d0>
 80083a6:	2d04      	cmp	r5, #4
 80083a8:	f47f af48 	bne.w	800823c <_scanf_float+0x60>
 80083ac:	3501      	adds	r5, #1
 80083ae:	b2ed      	uxtb	r5, r5
 80083b0:	e7d8      	b.n	8008364 <_scanf_float+0x188>
 80083b2:	f1ba 0f01 	cmp.w	sl, #1
 80083b6:	f47f af41 	bne.w	800823c <_scanf_float+0x60>
 80083ba:	f04f 0a02 	mov.w	sl, #2
 80083be:	e7d1      	b.n	8008364 <_scanf_float+0x188>
 80083c0:	b97d      	cbnz	r5, 80083e2 <_scanf_float+0x206>
 80083c2:	f1b9 0f00 	cmp.w	r9, #0
 80083c6:	f47f af3c 	bne.w	8008242 <_scanf_float+0x66>
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80083d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80083d4:	f47f af39 	bne.w	800824a <_scanf_float+0x6e>
 80083d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083dc:	6022      	str	r2, [r4, #0]
 80083de:	2501      	movs	r5, #1
 80083e0:	e7c0      	b.n	8008364 <_scanf_float+0x188>
 80083e2:	2d03      	cmp	r5, #3
 80083e4:	d0e2      	beq.n	80083ac <_scanf_float+0x1d0>
 80083e6:	2d05      	cmp	r5, #5
 80083e8:	e7de      	b.n	80083a8 <_scanf_float+0x1cc>
 80083ea:	2d02      	cmp	r5, #2
 80083ec:	f47f af26 	bne.w	800823c <_scanf_float+0x60>
 80083f0:	2503      	movs	r5, #3
 80083f2:	e7b7      	b.n	8008364 <_scanf_float+0x188>
 80083f4:	2d06      	cmp	r5, #6
 80083f6:	f47f af21 	bne.w	800823c <_scanf_float+0x60>
 80083fa:	2507      	movs	r5, #7
 80083fc:	e7b2      	b.n	8008364 <_scanf_float+0x188>
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	0591      	lsls	r1, r2, #22
 8008402:	f57f af1b 	bpl.w	800823c <_scanf_float+0x60>
 8008406:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800840a:	6022      	str	r2, [r4, #0]
 800840c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008410:	e7a8      	b.n	8008364 <_scanf_float+0x188>
 8008412:	6822      	ldr	r2, [r4, #0]
 8008414:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008418:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800841c:	d006      	beq.n	800842c <_scanf_float+0x250>
 800841e:	0550      	lsls	r0, r2, #21
 8008420:	f57f af0c 	bpl.w	800823c <_scanf_float+0x60>
 8008424:	f1b9 0f00 	cmp.w	r9, #0
 8008428:	f43f af0f 	beq.w	800824a <_scanf_float+0x6e>
 800842c:	0591      	lsls	r1, r2, #22
 800842e:	bf58      	it	pl
 8008430:	9901      	ldrpl	r1, [sp, #4]
 8008432:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008436:	bf58      	it	pl
 8008438:	eba9 0101 	subpl.w	r1, r9, r1
 800843c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008440:	bf58      	it	pl
 8008442:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	f04f 0900 	mov.w	r9, #0
 800844c:	e78a      	b.n	8008364 <_scanf_float+0x188>
 800844e:	f04f 0a03 	mov.w	sl, #3
 8008452:	e787      	b.n	8008364 <_scanf_float+0x188>
 8008454:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008458:	4639      	mov	r1, r7
 800845a:	4640      	mov	r0, r8
 800845c:	4798      	blx	r3
 800845e:	2800      	cmp	r0, #0
 8008460:	f43f aedf 	beq.w	8008222 <_scanf_float+0x46>
 8008464:	e6ea      	b.n	800823c <_scanf_float+0x60>
 8008466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800846a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800846e:	463a      	mov	r2, r7
 8008470:	4640      	mov	r0, r8
 8008472:	4798      	blx	r3
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	3b01      	subs	r3, #1
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	e6ec      	b.n	8008256 <_scanf_float+0x7a>
 800847c:	1e6b      	subs	r3, r5, #1
 800847e:	2b06      	cmp	r3, #6
 8008480:	d825      	bhi.n	80084ce <_scanf_float+0x2f2>
 8008482:	2d02      	cmp	r5, #2
 8008484:	d836      	bhi.n	80084f4 <_scanf_float+0x318>
 8008486:	455e      	cmp	r6, fp
 8008488:	f67f aee8 	bls.w	800825c <_scanf_float+0x80>
 800848c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008490:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008494:	463a      	mov	r2, r7
 8008496:	4640      	mov	r0, r8
 8008498:	4798      	blx	r3
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	3b01      	subs	r3, #1
 800849e:	6123      	str	r3, [r4, #16]
 80084a0:	e7f1      	b.n	8008486 <_scanf_float+0x2aa>
 80084a2:	9802      	ldr	r0, [sp, #8]
 80084a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80084ac:	9002      	str	r0, [sp, #8]
 80084ae:	463a      	mov	r2, r7
 80084b0:	4640      	mov	r0, r8
 80084b2:	4798      	blx	r3
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80084be:	fa5f fa8a 	uxtb.w	sl, sl
 80084c2:	f1ba 0f02 	cmp.w	sl, #2
 80084c6:	d1ec      	bne.n	80084a2 <_scanf_float+0x2c6>
 80084c8:	3d03      	subs	r5, #3
 80084ca:	b2ed      	uxtb	r5, r5
 80084cc:	1b76      	subs	r6, r6, r5
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	05da      	lsls	r2, r3, #23
 80084d2:	d52f      	bpl.n	8008534 <_scanf_float+0x358>
 80084d4:	055b      	lsls	r3, r3, #21
 80084d6:	d510      	bpl.n	80084fa <_scanf_float+0x31e>
 80084d8:	455e      	cmp	r6, fp
 80084da:	f67f aebf 	bls.w	800825c <_scanf_float+0x80>
 80084de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084e6:	463a      	mov	r2, r7
 80084e8:	4640      	mov	r0, r8
 80084ea:	4798      	blx	r3
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	6123      	str	r3, [r4, #16]
 80084f2:	e7f1      	b.n	80084d8 <_scanf_float+0x2fc>
 80084f4:	46aa      	mov	sl, r5
 80084f6:	9602      	str	r6, [sp, #8]
 80084f8:	e7df      	b.n	80084ba <_scanf_float+0x2de>
 80084fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	2965      	cmp	r1, #101	; 0x65
 8008502:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008506:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	d00c      	beq.n	8008528 <_scanf_float+0x34c>
 800850e:	2945      	cmp	r1, #69	; 0x45
 8008510:	d00a      	beq.n	8008528 <_scanf_float+0x34c>
 8008512:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008516:	463a      	mov	r2, r7
 8008518:	4640      	mov	r0, r8
 800851a:	4798      	blx	r3
 800851c:	6923      	ldr	r3, [r4, #16]
 800851e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008522:	3b01      	subs	r3, #1
 8008524:	1eb5      	subs	r5, r6, #2
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800852c:	463a      	mov	r2, r7
 800852e:	4640      	mov	r0, r8
 8008530:	4798      	blx	r3
 8008532:	462e      	mov	r6, r5
 8008534:	6825      	ldr	r5, [r4, #0]
 8008536:	f015 0510 	ands.w	r5, r5, #16
 800853a:	d14e      	bne.n	80085da <_scanf_float+0x3fe>
 800853c:	7035      	strb	r5, [r6, #0]
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008548:	d119      	bne.n	800857e <_scanf_float+0x3a2>
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	454b      	cmp	r3, r9
 800854e:	eba3 0209 	sub.w	r2, r3, r9
 8008552:	d121      	bne.n	8008598 <_scanf_float+0x3bc>
 8008554:	2200      	movs	r2, #0
 8008556:	4659      	mov	r1, fp
 8008558:	4640      	mov	r0, r8
 800855a:	f000 fefb 	bl	8009354 <_strtod_r>
 800855e:	6822      	ldr	r2, [r4, #0]
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	f012 0f02 	tst.w	r2, #2
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	d021      	beq.n	80085ae <_scanf_float+0x3d2>
 800856a:	9903      	ldr	r1, [sp, #12]
 800856c:	1d1a      	adds	r2, r3, #4
 800856e:	600a      	str	r2, [r1, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	ed83 0b00 	vstr	d0, [r3]
 8008576:	68e3      	ldr	r3, [r4, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60e3      	str	r3, [r4, #12]
 800857c:	e66f      	b.n	800825e <_scanf_float+0x82>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0e7      	beq.n	8008554 <_scanf_float+0x378>
 8008584:	9905      	ldr	r1, [sp, #20]
 8008586:	230a      	movs	r3, #10
 8008588:	462a      	mov	r2, r5
 800858a:	3101      	adds	r1, #1
 800858c:	4640      	mov	r0, r8
 800858e:	f000 ff69 	bl	8009464 <_strtol_r>
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	9e05      	ldr	r6, [sp, #20]
 8008596:	1ac2      	subs	r2, r0, r3
 8008598:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800859c:	429e      	cmp	r6, r3
 800859e:	bf28      	it	cs
 80085a0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80085a4:	490e      	ldr	r1, [pc, #56]	; (80085e0 <_scanf_float+0x404>)
 80085a6:	4630      	mov	r0, r6
 80085a8:	f000 f89e 	bl	80086e8 <siprintf>
 80085ac:	e7d2      	b.n	8008554 <_scanf_float+0x378>
 80085ae:	9903      	ldr	r1, [sp, #12]
 80085b0:	f012 0f04 	tst.w	r2, #4
 80085b4:	f103 0204 	add.w	r2, r3, #4
 80085b8:	600a      	str	r2, [r1, #0]
 80085ba:	d1d9      	bne.n	8008570 <_scanf_float+0x394>
 80085bc:	eeb4 0b40 	vcmp.f64	d0, d0
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	681e      	ldr	r6, [r3, #0]
 80085c6:	d705      	bvc.n	80085d4 <_scanf_float+0x3f8>
 80085c8:	4806      	ldr	r0, [pc, #24]	; (80085e4 <_scanf_float+0x408>)
 80085ca:	f000 f887 	bl	80086dc <nanf>
 80085ce:	ed86 0a00 	vstr	s0, [r6]
 80085d2:	e7d0      	b.n	8008576 <_scanf_float+0x39a>
 80085d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80085d8:	e7f9      	b.n	80085ce <_scanf_float+0x3f2>
 80085da:	2500      	movs	r5, #0
 80085dc:	e63f      	b.n	800825e <_scanf_float+0x82>
 80085de:	bf00      	nop
 80085e0:	0800bf50 	.word	0x0800bf50
 80085e4:	0800c358 	.word	0x0800c358

080085e8 <cleanup_glue>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	460c      	mov	r4, r1
 80085ec:	6809      	ldr	r1, [r1, #0]
 80085ee:	4605      	mov	r5, r0
 80085f0:	b109      	cbz	r1, 80085f6 <cleanup_glue+0xe>
 80085f2:	f7ff fff9 	bl	80085e8 <cleanup_glue>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085fe:	f002 be93 	b.w	800b328 <_free_r>
	...

08008604 <_reclaim_reent>:
 8008604:	4b2c      	ldr	r3, [pc, #176]	; (80086b8 <_reclaim_reent+0xb4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4283      	cmp	r3, r0
 800860a:	b570      	push	{r4, r5, r6, lr}
 800860c:	4604      	mov	r4, r0
 800860e:	d051      	beq.n	80086b4 <_reclaim_reent+0xb0>
 8008610:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008612:	b143      	cbz	r3, 8008626 <_reclaim_reent+0x22>
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d14a      	bne.n	80086b0 <_reclaim_reent+0xac>
 800861a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861c:	6819      	ldr	r1, [r3, #0]
 800861e:	b111      	cbz	r1, 8008626 <_reclaim_reent+0x22>
 8008620:	4620      	mov	r0, r4
 8008622:	f002 fe81 	bl	800b328 <_free_r>
 8008626:	6961      	ldr	r1, [r4, #20]
 8008628:	b111      	cbz	r1, 8008630 <_reclaim_reent+0x2c>
 800862a:	4620      	mov	r0, r4
 800862c:	f002 fe7c 	bl	800b328 <_free_r>
 8008630:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008632:	b111      	cbz	r1, 800863a <_reclaim_reent+0x36>
 8008634:	4620      	mov	r0, r4
 8008636:	f002 fe77 	bl	800b328 <_free_r>
 800863a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800863c:	b111      	cbz	r1, 8008644 <_reclaim_reent+0x40>
 800863e:	4620      	mov	r0, r4
 8008640:	f002 fe72 	bl	800b328 <_free_r>
 8008644:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008646:	b111      	cbz	r1, 800864e <_reclaim_reent+0x4a>
 8008648:	4620      	mov	r0, r4
 800864a:	f002 fe6d 	bl	800b328 <_free_r>
 800864e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008650:	b111      	cbz	r1, 8008658 <_reclaim_reent+0x54>
 8008652:	4620      	mov	r0, r4
 8008654:	f002 fe68 	bl	800b328 <_free_r>
 8008658:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800865a:	b111      	cbz	r1, 8008662 <_reclaim_reent+0x5e>
 800865c:	4620      	mov	r0, r4
 800865e:	f002 fe63 	bl	800b328 <_free_r>
 8008662:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008664:	b111      	cbz	r1, 800866c <_reclaim_reent+0x68>
 8008666:	4620      	mov	r0, r4
 8008668:	f002 fe5e 	bl	800b328 <_free_r>
 800866c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800866e:	b111      	cbz	r1, 8008676 <_reclaim_reent+0x72>
 8008670:	4620      	mov	r0, r4
 8008672:	f002 fe59 	bl	800b328 <_free_r>
 8008676:	69a3      	ldr	r3, [r4, #24]
 8008678:	b1e3      	cbz	r3, 80086b4 <_reclaim_reent+0xb0>
 800867a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800867c:	4620      	mov	r0, r4
 800867e:	4798      	blx	r3
 8008680:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008682:	b1b9      	cbz	r1, 80086b4 <_reclaim_reent+0xb0>
 8008684:	4620      	mov	r0, r4
 8008686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800868a:	f7ff bfad 	b.w	80085e8 <cleanup_glue>
 800868e:	5949      	ldr	r1, [r1, r5]
 8008690:	b941      	cbnz	r1, 80086a4 <_reclaim_reent+0xa0>
 8008692:	3504      	adds	r5, #4
 8008694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008696:	2d80      	cmp	r5, #128	; 0x80
 8008698:	68d9      	ldr	r1, [r3, #12]
 800869a:	d1f8      	bne.n	800868e <_reclaim_reent+0x8a>
 800869c:	4620      	mov	r0, r4
 800869e:	f002 fe43 	bl	800b328 <_free_r>
 80086a2:	e7ba      	b.n	800861a <_reclaim_reent+0x16>
 80086a4:	680e      	ldr	r6, [r1, #0]
 80086a6:	4620      	mov	r0, r4
 80086a8:	f002 fe3e 	bl	800b328 <_free_r>
 80086ac:	4631      	mov	r1, r6
 80086ae:	e7ef      	b.n	8008690 <_reclaim_reent+0x8c>
 80086b0:	2500      	movs	r5, #0
 80086b2:	e7ef      	b.n	8008694 <_reclaim_reent+0x90>
 80086b4:	bd70      	pop	{r4, r5, r6, pc}
 80086b6:	bf00      	nop
 80086b8:	20000010 	.word	0x20000010

080086bc <_sbrk_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_sbrk_r+0x1c>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7f8 ff82 	bl	80015d0 <_sbrk>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_sbrk_r+0x1a>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_sbrk_r+0x1a>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	20004d84 	.word	0x20004d84

080086dc <nanf>:
 80086dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086e4 <nanf+0x8>
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	7fc00000 	.word	0x7fc00000

080086e8 <siprintf>:
 80086e8:	b40e      	push	{r1, r2, r3}
 80086ea:	b500      	push	{lr}
 80086ec:	b09c      	sub	sp, #112	; 0x70
 80086ee:	ab1d      	add	r3, sp, #116	; 0x74
 80086f0:	9002      	str	r0, [sp, #8]
 80086f2:	9006      	str	r0, [sp, #24]
 80086f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086f8:	4809      	ldr	r0, [pc, #36]	; (8008720 <siprintf+0x38>)
 80086fa:	9107      	str	r1, [sp, #28]
 80086fc:	9104      	str	r1, [sp, #16]
 80086fe:	4909      	ldr	r1, [pc, #36]	; (8008724 <siprintf+0x3c>)
 8008700:	f853 2b04 	ldr.w	r2, [r3], #4
 8008704:	9105      	str	r1, [sp, #20]
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	a902      	add	r1, sp, #8
 800870c:	f002 feb4 	bl	800b478 <_svfiprintf_r>
 8008710:	9b02      	ldr	r3, [sp, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	b01c      	add	sp, #112	; 0x70
 8008718:	f85d eb04 	ldr.w	lr, [sp], #4
 800871c:	b003      	add	sp, #12
 800871e:	4770      	bx	lr
 8008720:	20000010 	.word	0x20000010
 8008724:	ffff0208 	.word	0xffff0208

08008728 <__sread>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	f002 ffa2 	bl	800b678 <_read_r>
 8008734:	2800      	cmp	r0, #0
 8008736:	bfab      	itete	ge
 8008738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800873a:	89a3      	ldrhlt	r3, [r4, #12]
 800873c:	181b      	addge	r3, r3, r0
 800873e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008742:	bfac      	ite	ge
 8008744:	6563      	strge	r3, [r4, #84]	; 0x54
 8008746:	81a3      	strhlt	r3, [r4, #12]
 8008748:	bd10      	pop	{r4, pc}

0800874a <__swrite>:
 800874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	461f      	mov	r7, r3
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	05db      	lsls	r3, r3, #23
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4616      	mov	r6, r2
 800875a:	d505      	bpl.n	8008768 <__swrite+0x1e>
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	2302      	movs	r3, #2
 8008762:	2200      	movs	r2, #0
 8008764:	f002 f8d4 	bl	800a910 <_lseek_r>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	4628      	mov	r0, r5
 800877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	f000 be73 	b.w	8009468 <_write_r>

08008782 <__sseek>:
 8008782:	b510      	push	{r4, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f002 f8c1 	bl	800a910 <_lseek_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	bf15      	itete	ne
 8008794:	6560      	strne	r0, [r4, #84]	; 0x54
 8008796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800879a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800879e:	81a3      	strheq	r3, [r4, #12]
 80087a0:	bf18      	it	ne
 80087a2:	81a3      	strhne	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__sclose>:
 80087a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087aa:	f000 be6f 	b.w	800948c <_close_r>

080087ae <sulp>:
 80087ae:	b570      	push	{r4, r5, r6, lr}
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
 80087b4:	4616      	mov	r6, r2
 80087b6:	ec45 4b10 	vmov	d0, r4, r5
 80087ba:	f002 fc53 	bl	800b064 <__ulp>
 80087be:	b17e      	cbz	r6, 80087e0 <sulp+0x32>
 80087c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80087c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dd09      	ble.n	80087e0 <sulp+0x32>
 80087cc:	051b      	lsls	r3, r3, #20
 80087ce:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80087d2:	2000      	movs	r0, #0
 80087d4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80087d8:	ec41 0b17 	vmov	d7, r0, r1
 80087dc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80087e0:	bd70      	pop	{r4, r5, r6, pc}
 80087e2:	0000      	movs	r0, r0
 80087e4:	0000      	movs	r0, r0
	...

080087e8 <_strtod_l>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	ed2d 8b0e 	vpush	{d8-d14}
 80087f0:	b097      	sub	sp, #92	; 0x5c
 80087f2:	461f      	mov	r7, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	9312      	str	r3, [sp, #72]	; 0x48
 80087f8:	4ba1      	ldr	r3, [pc, #644]	; (8008a80 <_strtod_l+0x298>)
 80087fa:	920d      	str	r2, [sp, #52]	; 0x34
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	9307      	str	r3, [sp, #28]
 8008800:	4604      	mov	r4, r0
 8008802:	4618      	mov	r0, r3
 8008804:	468b      	mov	fp, r1
 8008806:	f7f7 fd1b 	bl	8000240 <strlen>
 800880a:	f04f 0800 	mov.w	r8, #0
 800880e:	4605      	mov	r5, r0
 8008810:	f04f 0900 	mov.w	r9, #0
 8008814:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800881a:	7813      	ldrb	r3, [r2, #0]
 800881c:	2b2b      	cmp	r3, #43	; 0x2b
 800881e:	d04d      	beq.n	80088bc <_strtod_l+0xd4>
 8008820:	d83a      	bhi.n	8008898 <_strtod_l+0xb0>
 8008822:	2b0d      	cmp	r3, #13
 8008824:	d833      	bhi.n	800888e <_strtod_l+0xa6>
 8008826:	2b08      	cmp	r3, #8
 8008828:	d833      	bhi.n	8008892 <_strtod_l+0xaa>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d03d      	beq.n	80088aa <_strtod_l+0xc2>
 800882e:	2300      	movs	r3, #0
 8008830:	9308      	str	r3, [sp, #32]
 8008832:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008834:	7833      	ldrb	r3, [r6, #0]
 8008836:	2b30      	cmp	r3, #48	; 0x30
 8008838:	f040 80b0 	bne.w	800899c <_strtod_l+0x1b4>
 800883c:	7873      	ldrb	r3, [r6, #1]
 800883e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008842:	2b58      	cmp	r3, #88	; 0x58
 8008844:	d167      	bne.n	8008916 <_strtod_l+0x12e>
 8008846:	9b08      	ldr	r3, [sp, #32]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	ab12      	add	r3, sp, #72	; 0x48
 800884c:	9702      	str	r7, [sp, #8]
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	4a8c      	ldr	r2, [pc, #560]	; (8008a84 <_strtod_l+0x29c>)
 8008852:	ab13      	add	r3, sp, #76	; 0x4c
 8008854:	a911      	add	r1, sp, #68	; 0x44
 8008856:	4620      	mov	r0, r4
 8008858:	f001 fd4e 	bl	800a2f8 <__gethex>
 800885c:	f010 0507 	ands.w	r5, r0, #7
 8008860:	4607      	mov	r7, r0
 8008862:	d005      	beq.n	8008870 <_strtod_l+0x88>
 8008864:	2d06      	cmp	r5, #6
 8008866:	d12b      	bne.n	80088c0 <_strtod_l+0xd8>
 8008868:	3601      	adds	r6, #1
 800886a:	2300      	movs	r3, #0
 800886c:	9611      	str	r6, [sp, #68]	; 0x44
 800886e:	9308      	str	r3, [sp, #32]
 8008870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008872:	2b00      	cmp	r3, #0
 8008874:	f040 854e 	bne.w	8009314 <_strtod_l+0xb2c>
 8008878:	9b08      	ldr	r3, [sp, #32]
 800887a:	b1e3      	cbz	r3, 80088b6 <_strtod_l+0xce>
 800887c:	ec49 8b17 	vmov	d7, r8, r9
 8008880:	eeb1 0b47 	vneg.f64	d0, d7
 8008884:	b017      	add	sp, #92	; 0x5c
 8008886:	ecbd 8b0e 	vpop	{d8-d14}
 800888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888e:	2b20      	cmp	r3, #32
 8008890:	d1cd      	bne.n	800882e <_strtod_l+0x46>
 8008892:	3201      	adds	r2, #1
 8008894:	9211      	str	r2, [sp, #68]	; 0x44
 8008896:	e7bf      	b.n	8008818 <_strtod_l+0x30>
 8008898:	2b2d      	cmp	r3, #45	; 0x2d
 800889a:	d1c8      	bne.n	800882e <_strtod_l+0x46>
 800889c:	2301      	movs	r3, #1
 800889e:	9308      	str	r3, [sp, #32]
 80088a0:	1c53      	adds	r3, r2, #1
 80088a2:	9311      	str	r3, [sp, #68]	; 0x44
 80088a4:	7853      	ldrb	r3, [r2, #1]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1c3      	bne.n	8008832 <_strtod_l+0x4a>
 80088aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f040 852d 	bne.w	8009310 <_strtod_l+0xb28>
 80088b6:	ec49 8b10 	vmov	d0, r8, r9
 80088ba:	e7e3      	b.n	8008884 <_strtod_l+0x9c>
 80088bc:	2300      	movs	r3, #0
 80088be:	e7ee      	b.n	800889e <_strtod_l+0xb6>
 80088c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088c2:	b13a      	cbz	r2, 80088d4 <_strtod_l+0xec>
 80088c4:	2135      	movs	r1, #53	; 0x35
 80088c6:	a814      	add	r0, sp, #80	; 0x50
 80088c8:	f002 fcd4 	bl	800b274 <__copybits>
 80088cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80088ce:	4620      	mov	r0, r4
 80088d0:	f002 f896 	bl	800aa00 <_Bfree>
 80088d4:	3d01      	subs	r5, #1
 80088d6:	2d04      	cmp	r5, #4
 80088d8:	d806      	bhi.n	80088e8 <_strtod_l+0x100>
 80088da:	e8df f005 	tbb	[pc, r5]
 80088de:	030a      	.short	0x030a
 80088e0:	1714      	.short	0x1714
 80088e2:	0a          	.byte	0x0a
 80088e3:	00          	.byte	0x00
 80088e4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80088e8:	073f      	lsls	r7, r7, #28
 80088ea:	d5c1      	bpl.n	8008870 <_strtod_l+0x88>
 80088ec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80088f0:	e7be      	b.n	8008870 <_strtod_l+0x88>
 80088f2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80088f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80088fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008900:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008904:	e7f0      	b.n	80088e8 <_strtod_l+0x100>
 8008906:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008a88 <_strtod_l+0x2a0>
 800890a:	e7ed      	b.n	80088e8 <_strtod_l+0x100>
 800890c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008910:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008914:	e7e8      	b.n	80088e8 <_strtod_l+0x100>
 8008916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	9211      	str	r2, [sp, #68]	; 0x44
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	2b30      	cmp	r3, #48	; 0x30
 8008920:	d0f9      	beq.n	8008916 <_strtod_l+0x12e>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0a4      	beq.n	8008870 <_strtod_l+0x88>
 8008926:	2301      	movs	r3, #1
 8008928:	f04f 0a00 	mov.w	sl, #0
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008930:	930a      	str	r3, [sp, #40]	; 0x28
 8008932:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008936:	f8cd a018 	str.w	sl, [sp, #24]
 800893a:	220a      	movs	r2, #10
 800893c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800893e:	7807      	ldrb	r7, [r0, #0]
 8008940:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008944:	b2d9      	uxtb	r1, r3
 8008946:	2909      	cmp	r1, #9
 8008948:	d92a      	bls.n	80089a0 <_strtod_l+0x1b8>
 800894a:	9907      	ldr	r1, [sp, #28]
 800894c:	462a      	mov	r2, r5
 800894e:	f002 feaf 	bl	800b6b0 <strncmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	d033      	beq.n	80089be <_strtod_l+0x1d6>
 8008956:	2000      	movs	r0, #0
 8008958:	9b06      	ldr	r3, [sp, #24]
 800895a:	463a      	mov	r2, r7
 800895c:	4601      	mov	r1, r0
 800895e:	4607      	mov	r7, r0
 8008960:	2a65      	cmp	r2, #101	; 0x65
 8008962:	d001      	beq.n	8008968 <_strtod_l+0x180>
 8008964:	2a45      	cmp	r2, #69	; 0x45
 8008966:	d117      	bne.n	8008998 <_strtod_l+0x1b0>
 8008968:	b91b      	cbnz	r3, 8008972 <_strtod_l+0x18a>
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	4303      	orrs	r3, r0
 800896e:	d09c      	beq.n	80088aa <_strtod_l+0xc2>
 8008970:	2300      	movs	r3, #0
 8008972:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008976:	f10b 0201 	add.w	r2, fp, #1
 800897a:	9211      	str	r2, [sp, #68]	; 0x44
 800897c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008980:	2a2b      	cmp	r2, #43	; 0x2b
 8008982:	d071      	beq.n	8008a68 <_strtod_l+0x280>
 8008984:	2a2d      	cmp	r2, #45	; 0x2d
 8008986:	d077      	beq.n	8008a78 <_strtod_l+0x290>
 8008988:	f04f 0e00 	mov.w	lr, #0
 800898c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008990:	2d09      	cmp	r5, #9
 8008992:	d97f      	bls.n	8008a94 <_strtod_l+0x2ac>
 8008994:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008998:	2500      	movs	r5, #0
 800899a:	e09b      	b.n	8008ad4 <_strtod_l+0x2ec>
 800899c:	2300      	movs	r3, #0
 800899e:	e7c3      	b.n	8008928 <_strtod_l+0x140>
 80089a0:	9906      	ldr	r1, [sp, #24]
 80089a2:	2908      	cmp	r1, #8
 80089a4:	bfdd      	ittte	le
 80089a6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80089a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80089ac:	9309      	strle	r3, [sp, #36]	; 0x24
 80089ae:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80089b2:	9b06      	ldr	r3, [sp, #24]
 80089b4:	3001      	adds	r0, #1
 80089b6:	3301      	adds	r3, #1
 80089b8:	9306      	str	r3, [sp, #24]
 80089ba:	9011      	str	r0, [sp, #68]	; 0x44
 80089bc:	e7be      	b.n	800893c <_strtod_l+0x154>
 80089be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089c0:	195a      	adds	r2, r3, r5
 80089c2:	9211      	str	r2, [sp, #68]	; 0x44
 80089c4:	5d5a      	ldrb	r2, [r3, r5]
 80089c6:	9b06      	ldr	r3, [sp, #24]
 80089c8:	b3a3      	cbz	r3, 8008a34 <_strtod_l+0x24c>
 80089ca:	4607      	mov	r7, r0
 80089cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80089d0:	2909      	cmp	r1, #9
 80089d2:	d912      	bls.n	80089fa <_strtod_l+0x212>
 80089d4:	2101      	movs	r1, #1
 80089d6:	e7c3      	b.n	8008960 <_strtod_l+0x178>
 80089d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	9211      	str	r2, [sp, #68]	; 0x44
 80089de:	785a      	ldrb	r2, [r3, #1]
 80089e0:	3001      	adds	r0, #1
 80089e2:	2a30      	cmp	r2, #48	; 0x30
 80089e4:	d0f8      	beq.n	80089d8 <_strtod_l+0x1f0>
 80089e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80089ea:	2b08      	cmp	r3, #8
 80089ec:	f200 8497 	bhi.w	800931e <_strtod_l+0xb36>
 80089f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089f2:	930a      	str	r3, [sp, #40]	; 0x28
 80089f4:	4607      	mov	r7, r0
 80089f6:	2000      	movs	r0, #0
 80089f8:	4603      	mov	r3, r0
 80089fa:	3a30      	subs	r2, #48	; 0x30
 80089fc:	f100 0101 	add.w	r1, r0, #1
 8008a00:	d012      	beq.n	8008a28 <_strtod_l+0x240>
 8008a02:	440f      	add	r7, r1
 8008a04:	eb00 0c03 	add.w	ip, r0, r3
 8008a08:	4619      	mov	r1, r3
 8008a0a:	250a      	movs	r5, #10
 8008a0c:	4561      	cmp	r1, ip
 8008a0e:	d113      	bne.n	8008a38 <_strtod_l+0x250>
 8008a10:	1819      	adds	r1, r3, r0
 8008a12:	2908      	cmp	r1, #8
 8008a14:	f103 0301 	add.w	r3, r3, #1
 8008a18:	4403      	add	r3, r0
 8008a1a:	dc1c      	bgt.n	8008a56 <_strtod_l+0x26e>
 8008a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a1e:	210a      	movs	r1, #10
 8008a20:	fb01 2200 	mla	r2, r1, r0, r2
 8008a24:	9209      	str	r2, [sp, #36]	; 0x24
 8008a26:	2100      	movs	r1, #0
 8008a28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a2a:	1c50      	adds	r0, r2, #1
 8008a2c:	9011      	str	r0, [sp, #68]	; 0x44
 8008a2e:	7852      	ldrb	r2, [r2, #1]
 8008a30:	4608      	mov	r0, r1
 8008a32:	e7cb      	b.n	80089cc <_strtod_l+0x1e4>
 8008a34:	9806      	ldr	r0, [sp, #24]
 8008a36:	e7d4      	b.n	80089e2 <_strtod_l+0x1fa>
 8008a38:	2908      	cmp	r1, #8
 8008a3a:	dc04      	bgt.n	8008a46 <_strtod_l+0x25e>
 8008a3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a3e:	436e      	muls	r6, r5
 8008a40:	9609      	str	r6, [sp, #36]	; 0x24
 8008a42:	3101      	adds	r1, #1
 8008a44:	e7e2      	b.n	8008a0c <_strtod_l+0x224>
 8008a46:	f101 0e01 	add.w	lr, r1, #1
 8008a4a:	f1be 0f10 	cmp.w	lr, #16
 8008a4e:	bfd8      	it	le
 8008a50:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008a54:	e7f5      	b.n	8008a42 <_strtod_l+0x25a>
 8008a56:	2b10      	cmp	r3, #16
 8008a58:	bfdc      	itt	le
 8008a5a:	210a      	movle	r1, #10
 8008a5c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008a60:	e7e1      	b.n	8008a26 <_strtod_l+0x23e>
 8008a62:	2700      	movs	r7, #0
 8008a64:	2101      	movs	r1, #1
 8008a66:	e780      	b.n	800896a <_strtod_l+0x182>
 8008a68:	f04f 0e00 	mov.w	lr, #0
 8008a6c:	f10b 0202 	add.w	r2, fp, #2
 8008a70:	9211      	str	r2, [sp, #68]	; 0x44
 8008a72:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008a76:	e789      	b.n	800898c <_strtod_l+0x1a4>
 8008a78:	f04f 0e01 	mov.w	lr, #1
 8008a7c:	e7f6      	b.n	8008a6c <_strtod_l+0x284>
 8008a7e:	bf00      	nop
 8008a80:	0800c1a0 	.word	0x0800c1a0
 8008a84:	0800bf58 	.word	0x0800bf58
 8008a88:	7ff00000 	.word	0x7ff00000
 8008a8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a8e:	1c55      	adds	r5, r2, #1
 8008a90:	9511      	str	r5, [sp, #68]	; 0x44
 8008a92:	7852      	ldrb	r2, [r2, #1]
 8008a94:	2a30      	cmp	r2, #48	; 0x30
 8008a96:	d0f9      	beq.n	8008a8c <_strtod_l+0x2a4>
 8008a98:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008a9c:	2d08      	cmp	r5, #8
 8008a9e:	f63f af7b 	bhi.w	8008998 <_strtod_l+0x1b0>
 8008aa2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008aa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008aa8:	9207      	str	r2, [sp, #28]
 8008aaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008aac:	1c55      	adds	r5, r2, #1
 8008aae:	9511      	str	r5, [sp, #68]	; 0x44
 8008ab0:	7852      	ldrb	r2, [r2, #1]
 8008ab2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008ab6:	2e09      	cmp	r6, #9
 8008ab8:	d937      	bls.n	8008b2a <_strtod_l+0x342>
 8008aba:	9e07      	ldr	r6, [sp, #28]
 8008abc:	1bad      	subs	r5, r5, r6
 8008abe:	2d08      	cmp	r5, #8
 8008ac0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008ac4:	dc02      	bgt.n	8008acc <_strtod_l+0x2e4>
 8008ac6:	4565      	cmp	r5, ip
 8008ac8:	bfa8      	it	ge
 8008aca:	4665      	movge	r5, ip
 8008acc:	f1be 0f00 	cmp.w	lr, #0
 8008ad0:	d000      	beq.n	8008ad4 <_strtod_l+0x2ec>
 8008ad2:	426d      	negs	r5, r5
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d14d      	bne.n	8008b74 <_strtod_l+0x38c>
 8008ad8:	9b04      	ldr	r3, [sp, #16]
 8008ada:	4303      	orrs	r3, r0
 8008adc:	f47f aec8 	bne.w	8008870 <_strtod_l+0x88>
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	f47f aee2 	bne.w	80088aa <_strtod_l+0xc2>
 8008ae6:	2a69      	cmp	r2, #105	; 0x69
 8008ae8:	d027      	beq.n	8008b3a <_strtod_l+0x352>
 8008aea:	dc24      	bgt.n	8008b36 <_strtod_l+0x34e>
 8008aec:	2a49      	cmp	r2, #73	; 0x49
 8008aee:	d024      	beq.n	8008b3a <_strtod_l+0x352>
 8008af0:	2a4e      	cmp	r2, #78	; 0x4e
 8008af2:	f47f aeda 	bne.w	80088aa <_strtod_l+0xc2>
 8008af6:	4996      	ldr	r1, [pc, #600]	; (8008d50 <_strtod_l+0x568>)
 8008af8:	a811      	add	r0, sp, #68	; 0x44
 8008afa:	f001 fe55 	bl	800a7a8 <__match>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f43f aed3 	beq.w	80088aa <_strtod_l+0xc2>
 8008b04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b28      	cmp	r3, #40	; 0x28
 8008b0a:	d12d      	bne.n	8008b68 <_strtod_l+0x380>
 8008b0c:	4991      	ldr	r1, [pc, #580]	; (8008d54 <_strtod_l+0x56c>)
 8008b0e:	aa14      	add	r2, sp, #80	; 0x50
 8008b10:	a811      	add	r0, sp, #68	; 0x44
 8008b12:	f001 fe5d 	bl	800a7d0 <__hexnan>
 8008b16:	2805      	cmp	r0, #5
 8008b18:	d126      	bne.n	8008b68 <_strtod_l+0x380>
 8008b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b1c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008b20:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008b24:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008b28:	e6a2      	b.n	8008870 <_strtod_l+0x88>
 8008b2a:	250a      	movs	r5, #10
 8008b2c:	fb05 250c 	mla	r5, r5, ip, r2
 8008b30:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008b34:	e7b9      	b.n	8008aaa <_strtod_l+0x2c2>
 8008b36:	2a6e      	cmp	r2, #110	; 0x6e
 8008b38:	e7db      	b.n	8008af2 <_strtod_l+0x30a>
 8008b3a:	4987      	ldr	r1, [pc, #540]	; (8008d58 <_strtod_l+0x570>)
 8008b3c:	a811      	add	r0, sp, #68	; 0x44
 8008b3e:	f001 fe33 	bl	800a7a8 <__match>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	f43f aeb1 	beq.w	80088aa <_strtod_l+0xc2>
 8008b48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b4a:	4984      	ldr	r1, [pc, #528]	; (8008d5c <_strtod_l+0x574>)
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	a811      	add	r0, sp, #68	; 0x44
 8008b50:	9311      	str	r3, [sp, #68]	; 0x44
 8008b52:	f001 fe29 	bl	800a7a8 <__match>
 8008b56:	b910      	cbnz	r0, 8008b5e <_strtod_l+0x376>
 8008b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	9311      	str	r3, [sp, #68]	; 0x44
 8008b5e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008d70 <_strtod_l+0x588>
 8008b62:	f04f 0800 	mov.w	r8, #0
 8008b66:	e683      	b.n	8008870 <_strtod_l+0x88>
 8008b68:	487d      	ldr	r0, [pc, #500]	; (8008d60 <_strtod_l+0x578>)
 8008b6a:	f002 fd99 	bl	800b6a0 <nan>
 8008b6e:	ec59 8b10 	vmov	r8, r9, d0
 8008b72:	e67d      	b.n	8008870 <_strtod_l+0x88>
 8008b74:	1bea      	subs	r2, r5, r7
 8008b76:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008b7a:	9207      	str	r2, [sp, #28]
 8008b7c:	9a06      	ldr	r2, [sp, #24]
 8008b7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	bf08      	it	eq
 8008b86:	461a      	moveq	r2, r3
 8008b88:	2b10      	cmp	r3, #16
 8008b8a:	9206      	str	r2, [sp, #24]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	bfa8      	it	ge
 8008b90:	2210      	movge	r2, #16
 8008b92:	2b09      	cmp	r3, #9
 8008b94:	ec59 8b17 	vmov	r8, r9, d7
 8008b98:	dd0c      	ble.n	8008bb4 <_strtod_l+0x3cc>
 8008b9a:	4972      	ldr	r1, [pc, #456]	; (8008d64 <_strtod_l+0x57c>)
 8008b9c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008ba0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008ba4:	ee06 aa90 	vmov	s13, sl
 8008ba8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008bac:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008bb0:	ec59 8b16 	vmov	r8, r9, d6
 8008bb4:	2b0f      	cmp	r3, #15
 8008bb6:	dc36      	bgt.n	8008c26 <_strtod_l+0x43e>
 8008bb8:	9907      	ldr	r1, [sp, #28]
 8008bba:	2900      	cmp	r1, #0
 8008bbc:	f43f ae58 	beq.w	8008870 <_strtod_l+0x88>
 8008bc0:	dd23      	ble.n	8008c0a <_strtod_l+0x422>
 8008bc2:	2916      	cmp	r1, #22
 8008bc4:	dc0b      	bgt.n	8008bde <_strtod_l+0x3f6>
 8008bc6:	4b67      	ldr	r3, [pc, #412]	; (8008d64 <_strtod_l+0x57c>)
 8008bc8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008bcc:	ed93 7b00 	vldr	d7, [r3]
 8008bd0:	ec49 8b16 	vmov	d6, r8, r9
 8008bd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008bd8:	ec59 8b17 	vmov	r8, r9, d7
 8008bdc:	e648      	b.n	8008870 <_strtod_l+0x88>
 8008bde:	9807      	ldr	r0, [sp, #28]
 8008be0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008be4:	4281      	cmp	r1, r0
 8008be6:	db1e      	blt.n	8008c26 <_strtod_l+0x43e>
 8008be8:	4a5e      	ldr	r2, [pc, #376]	; (8008d64 <_strtod_l+0x57c>)
 8008bea:	f1c3 030f 	rsb	r3, r3, #15
 8008bee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008bf2:	ed91 7b00 	vldr	d7, [r1]
 8008bf6:	ec49 8b16 	vmov	d6, r8, r9
 8008bfa:	1ac3      	subs	r3, r0, r3
 8008bfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c04:	ed92 6b00 	vldr	d6, [r2]
 8008c08:	e7e4      	b.n	8008bd4 <_strtod_l+0x3ec>
 8008c0a:	9907      	ldr	r1, [sp, #28]
 8008c0c:	3116      	adds	r1, #22
 8008c0e:	db0a      	blt.n	8008c26 <_strtod_l+0x43e>
 8008c10:	4b54      	ldr	r3, [pc, #336]	; (8008d64 <_strtod_l+0x57c>)
 8008c12:	1b7d      	subs	r5, r7, r5
 8008c14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008c18:	ed95 7b00 	vldr	d7, [r5]
 8008c1c:	ec49 8b16 	vmov	d6, r8, r9
 8008c20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008c24:	e7d8      	b.n	8008bd8 <_strtod_l+0x3f0>
 8008c26:	9907      	ldr	r1, [sp, #28]
 8008c28:	1a9a      	subs	r2, r3, r2
 8008c2a:	440a      	add	r2, r1
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	dd6f      	ble.n	8008d10 <_strtod_l+0x528>
 8008c30:	f012 000f 	ands.w	r0, r2, #15
 8008c34:	d00a      	beq.n	8008c4c <_strtod_l+0x464>
 8008c36:	494b      	ldr	r1, [pc, #300]	; (8008d64 <_strtod_l+0x57c>)
 8008c38:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008c3c:	ed91 7b00 	vldr	d7, [r1]
 8008c40:	ec49 8b16 	vmov	d6, r8, r9
 8008c44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c48:	ec59 8b17 	vmov	r8, r9, d7
 8008c4c:	f032 020f 	bics.w	r2, r2, #15
 8008c50:	d04f      	beq.n	8008cf2 <_strtod_l+0x50a>
 8008c52:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008c56:	dd22      	ble.n	8008c9e <_strtod_l+0x4b6>
 8008c58:	2500      	movs	r5, #0
 8008c5a:	462e      	mov	r6, r5
 8008c5c:	9506      	str	r5, [sp, #24]
 8008c5e:	462f      	mov	r7, r5
 8008c60:	2322      	movs	r3, #34	; 0x22
 8008c62:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008d70 <_strtod_l+0x588>
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	f04f 0800 	mov.w	r8, #0
 8008c6c:	9b06      	ldr	r3, [sp, #24]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f43f adfe 	beq.w	8008870 <_strtod_l+0x88>
 8008c74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008c76:	4620      	mov	r0, r4
 8008c78:	f001 fec2 	bl	800aa00 <_Bfree>
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f001 febe 	bl	800aa00 <_Bfree>
 8008c84:	4631      	mov	r1, r6
 8008c86:	4620      	mov	r0, r4
 8008c88:	f001 feba 	bl	800aa00 <_Bfree>
 8008c8c:	9906      	ldr	r1, [sp, #24]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f001 feb6 	bl	800aa00 <_Bfree>
 8008c94:	4629      	mov	r1, r5
 8008c96:	4620      	mov	r0, r4
 8008c98:	f001 feb2 	bl	800aa00 <_Bfree>
 8008c9c:	e5e8      	b.n	8008870 <_strtod_l+0x88>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	ec49 8b17 	vmov	d7, r8, r9
 8008ca4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008d68 <_strtod_l+0x580>
 8008ca8:	1112      	asrs	r2, r2, #4
 8008caa:	4601      	mov	r1, r0
 8008cac:	2a01      	cmp	r2, #1
 8008cae:	dc23      	bgt.n	8008cf8 <_strtod_l+0x510>
 8008cb0:	b108      	cbz	r0, 8008cb6 <_strtod_l+0x4ce>
 8008cb2:	ec59 8b17 	vmov	r8, r9, d7
 8008cb6:	4a2c      	ldr	r2, [pc, #176]	; (8008d68 <_strtod_l+0x580>)
 8008cb8:	482c      	ldr	r0, [pc, #176]	; (8008d6c <_strtod_l+0x584>)
 8008cba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008cbe:	ed92 7b00 	vldr	d7, [r2]
 8008cc2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008cc6:	ec49 8b16 	vmov	d6, r8, r9
 8008cca:	4a29      	ldr	r2, [pc, #164]	; (8008d70 <_strtod_l+0x588>)
 8008ccc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cd0:	ee17 1a90 	vmov	r1, s15
 8008cd4:	400a      	ands	r2, r1
 8008cd6:	4282      	cmp	r2, r0
 8008cd8:	ec59 8b17 	vmov	r8, r9, d7
 8008cdc:	d8bc      	bhi.n	8008c58 <_strtod_l+0x470>
 8008cde:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008ce2:	4282      	cmp	r2, r0
 8008ce4:	bf86      	itte	hi
 8008ce6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008d74 <_strtod_l+0x58c>
 8008cea:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8008cee:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	9204      	str	r2, [sp, #16]
 8008cf6:	e078      	b.n	8008dea <_strtod_l+0x602>
 8008cf8:	07d6      	lsls	r6, r2, #31
 8008cfa:	d504      	bpl.n	8008d06 <_strtod_l+0x51e>
 8008cfc:	ed9c 6b00 	vldr	d6, [ip]
 8008d00:	2001      	movs	r0, #1
 8008d02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d06:	3101      	adds	r1, #1
 8008d08:	1052      	asrs	r2, r2, #1
 8008d0a:	f10c 0c08 	add.w	ip, ip, #8
 8008d0e:	e7cd      	b.n	8008cac <_strtod_l+0x4c4>
 8008d10:	d0ef      	beq.n	8008cf2 <_strtod_l+0x50a>
 8008d12:	4252      	negs	r2, r2
 8008d14:	f012 000f 	ands.w	r0, r2, #15
 8008d18:	d00a      	beq.n	8008d30 <_strtod_l+0x548>
 8008d1a:	4912      	ldr	r1, [pc, #72]	; (8008d64 <_strtod_l+0x57c>)
 8008d1c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008d20:	ed91 7b00 	vldr	d7, [r1]
 8008d24:	ec49 8b16 	vmov	d6, r8, r9
 8008d28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008d2c:	ec59 8b17 	vmov	r8, r9, d7
 8008d30:	1112      	asrs	r2, r2, #4
 8008d32:	d0de      	beq.n	8008cf2 <_strtod_l+0x50a>
 8008d34:	2a1f      	cmp	r2, #31
 8008d36:	dd1f      	ble.n	8008d78 <_strtod_l+0x590>
 8008d38:	2500      	movs	r5, #0
 8008d3a:	462e      	mov	r6, r5
 8008d3c:	9506      	str	r5, [sp, #24]
 8008d3e:	462f      	mov	r7, r5
 8008d40:	2322      	movs	r3, #34	; 0x22
 8008d42:	f04f 0800 	mov.w	r8, #0
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	e78e      	b.n	8008c6c <_strtod_l+0x484>
 8008d4e:	bf00      	nop
 8008d50:	0800bf29 	.word	0x0800bf29
 8008d54:	0800bf6c 	.word	0x0800bf6c
 8008d58:	0800bf21 	.word	0x0800bf21
 8008d5c:	0800c0ac 	.word	0x0800c0ac
 8008d60:	0800c358 	.word	0x0800c358
 8008d64:	0800c238 	.word	0x0800c238
 8008d68:	0800c210 	.word	0x0800c210
 8008d6c:	7ca00000 	.word	0x7ca00000
 8008d70:	7ff00000 	.word	0x7ff00000
 8008d74:	7fefffff 	.word	0x7fefffff
 8008d78:	f012 0110 	ands.w	r1, r2, #16
 8008d7c:	bf18      	it	ne
 8008d7e:	216a      	movne	r1, #106	; 0x6a
 8008d80:	9104      	str	r1, [sp, #16]
 8008d82:	ec49 8b17 	vmov	d7, r8, r9
 8008d86:	49be      	ldr	r1, [pc, #760]	; (8009080 <_strtod_l+0x898>)
 8008d88:	2000      	movs	r0, #0
 8008d8a:	07d6      	lsls	r6, r2, #31
 8008d8c:	d504      	bpl.n	8008d98 <_strtod_l+0x5b0>
 8008d8e:	ed91 6b00 	vldr	d6, [r1]
 8008d92:	2001      	movs	r0, #1
 8008d94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d98:	1052      	asrs	r2, r2, #1
 8008d9a:	f101 0108 	add.w	r1, r1, #8
 8008d9e:	d1f4      	bne.n	8008d8a <_strtod_l+0x5a2>
 8008da0:	b108      	cbz	r0, 8008da6 <_strtod_l+0x5be>
 8008da2:	ec59 8b17 	vmov	r8, r9, d7
 8008da6:	9a04      	ldr	r2, [sp, #16]
 8008da8:	b1c2      	cbz	r2, 8008ddc <_strtod_l+0x5f4>
 8008daa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008dae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	4648      	mov	r0, r9
 8008db6:	dd11      	ble.n	8008ddc <_strtod_l+0x5f4>
 8008db8:	2a1f      	cmp	r2, #31
 8008dba:	f340 812e 	ble.w	800901a <_strtod_l+0x832>
 8008dbe:	2a34      	cmp	r2, #52	; 0x34
 8008dc0:	bfde      	ittt	le
 8008dc2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008dc6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008dca:	fa02 f101 	lslle.w	r1, r2, r1
 8008dce:	f04f 0800 	mov.w	r8, #0
 8008dd2:	bfcc      	ite	gt
 8008dd4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008dd8:	ea01 0900 	andle.w	r9, r1, r0
 8008ddc:	ec49 8b17 	vmov	d7, r8, r9
 8008de0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	d0a6      	beq.n	8008d38 <_strtod_l+0x550>
 8008dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dec:	9200      	str	r2, [sp, #0]
 8008dee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008df0:	9a06      	ldr	r2, [sp, #24]
 8008df2:	4620      	mov	r0, r4
 8008df4:	f001 fe6c 	bl	800aad0 <__s2b>
 8008df8:	9006      	str	r0, [sp, #24]
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f43f af2c 	beq.w	8008c58 <_strtod_l+0x470>
 8008e00:	9b07      	ldr	r3, [sp, #28]
 8008e02:	1b7d      	subs	r5, r7, r5
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bfb4      	ite	lt
 8008e08:	462b      	movlt	r3, r5
 8008e0a:	2300      	movge	r3, #0
 8008e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009060 <_strtod_l+0x878>
 8008e14:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009068 <_strtod_l+0x880>
 8008e18:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009070 <_strtod_l+0x888>
 8008e1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008e20:	2500      	movs	r5, #0
 8008e22:	930c      	str	r3, [sp, #48]	; 0x30
 8008e24:	462e      	mov	r6, r5
 8008e26:	9b06      	ldr	r3, [sp, #24]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	6859      	ldr	r1, [r3, #4]
 8008e2c:	f001 fda8 	bl	800a980 <_Balloc>
 8008e30:	4607      	mov	r7, r0
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f43f af14 	beq.w	8008c60 <_strtod_l+0x478>
 8008e38:	9b06      	ldr	r3, [sp, #24]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	3202      	adds	r2, #2
 8008e3e:	f103 010c 	add.w	r1, r3, #12
 8008e42:	0092      	lsls	r2, r2, #2
 8008e44:	300c      	adds	r0, #12
 8008e46:	f7fe fcdc 	bl	8007802 <memcpy>
 8008e4a:	ec49 8b10 	vmov	d0, r8, r9
 8008e4e:	aa14      	add	r2, sp, #80	; 0x50
 8008e50:	a913      	add	r1, sp, #76	; 0x4c
 8008e52:	4620      	mov	r0, r4
 8008e54:	f002 f982 	bl	800b15c <__d2b>
 8008e58:	ec49 8b18 	vmov	d8, r8, r9
 8008e5c:	9012      	str	r0, [sp, #72]	; 0x48
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f43f aefe 	beq.w	8008c60 <_strtod_l+0x478>
 8008e64:	2101      	movs	r1, #1
 8008e66:	4620      	mov	r0, r4
 8008e68:	f001 fecc 	bl	800ac04 <__i2b>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f43f aef6 	beq.w	8008c60 <_strtod_l+0x478>
 8008e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e76:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	bfab      	itete	ge
 8008e7c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008e7e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008e80:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008e84:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008e88:	bfac      	ite	ge
 8008e8a:	eb03 0b02 	addge.w	fp, r3, r2
 8008e8e:	eba2 0a03 	sublt.w	sl, r2, r3
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	440b      	add	r3, r1
 8008e98:	4a7a      	ldr	r2, [pc, #488]	; (8009084 <_strtod_l+0x89c>)
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008ea2:	f280 80cd 	bge.w	8009040 <_strtod_l+0x858>
 8008ea6:	1ad2      	subs	r2, r2, r3
 8008ea8:	2a1f      	cmp	r2, #31
 8008eaa:	eba1 0102 	sub.w	r1, r1, r2
 8008eae:	f04f 0001 	mov.w	r0, #1
 8008eb2:	f300 80b9 	bgt.w	8009028 <_strtod_l+0x840>
 8008eb6:	fa00 f302 	lsl.w	r3, r0, r2
 8008eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec0:	eb0b 0301 	add.w	r3, fp, r1
 8008ec4:	9a04      	ldr	r2, [sp, #16]
 8008ec6:	459b      	cmp	fp, r3
 8008ec8:	448a      	add	sl, r1
 8008eca:	4492      	add	sl, r2
 8008ecc:	465a      	mov	r2, fp
 8008ece:	bfa8      	it	ge
 8008ed0:	461a      	movge	r2, r3
 8008ed2:	4552      	cmp	r2, sl
 8008ed4:	bfa8      	it	ge
 8008ed6:	4652      	movge	r2, sl
 8008ed8:	2a00      	cmp	r2, #0
 8008eda:	bfc2      	ittt	gt
 8008edc:	1a9b      	subgt	r3, r3, r2
 8008ede:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008ee2:	ebab 0b02 	subgt.w	fp, fp, r2
 8008ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	dd18      	ble.n	8008f1e <_strtod_l+0x736>
 8008eec:	4631      	mov	r1, r6
 8008eee:	4620      	mov	r0, r4
 8008ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ef2:	f001 ff47 	bl	800ad84 <__pow5mult>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	f43f aeb1 	beq.w	8008c60 <_strtod_l+0x478>
 8008efe:	4601      	mov	r1, r0
 8008f00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f02:	4620      	mov	r0, r4
 8008f04:	f001 fe94 	bl	800ac30 <__multiply>
 8008f08:	900e      	str	r0, [sp, #56]	; 0x38
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f43f aea8 	beq.w	8008c60 <_strtod_l+0x478>
 8008f10:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f12:	4620      	mov	r0, r4
 8008f14:	f001 fd74 	bl	800aa00 <_Bfree>
 8008f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f1c:	9212      	str	r2, [sp, #72]	; 0x48
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f300 8093 	bgt.w	800904a <_strtod_l+0x862>
 8008f24:	9b07      	ldr	r3, [sp, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dd08      	ble.n	8008f3c <_strtod_l+0x754>
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f001 ff28 	bl	800ad84 <__pow5mult>
 8008f34:	4607      	mov	r7, r0
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f43f ae92 	beq.w	8008c60 <_strtod_l+0x478>
 8008f3c:	f1ba 0f00 	cmp.w	sl, #0
 8008f40:	dd08      	ble.n	8008f54 <_strtod_l+0x76c>
 8008f42:	4639      	mov	r1, r7
 8008f44:	4652      	mov	r2, sl
 8008f46:	4620      	mov	r0, r4
 8008f48:	f001 ff76 	bl	800ae38 <__lshift>
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f ae86 	beq.w	8008c60 <_strtod_l+0x478>
 8008f54:	f1bb 0f00 	cmp.w	fp, #0
 8008f58:	dd08      	ble.n	8008f6c <_strtod_l+0x784>
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	465a      	mov	r2, fp
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f001 ff6a 	bl	800ae38 <__lshift>
 8008f64:	4606      	mov	r6, r0
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f ae7a 	beq.w	8008c60 <_strtod_l+0x478>
 8008f6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f6e:	463a      	mov	r2, r7
 8008f70:	4620      	mov	r0, r4
 8008f72:	f001 ffed 	bl	800af50 <__mdiff>
 8008f76:	4605      	mov	r5, r0
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	f43f ae71 	beq.w	8008c60 <_strtod_l+0x478>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008f84:	60c3      	str	r3, [r0, #12]
 8008f86:	4631      	mov	r1, r6
 8008f88:	f001 ffc6 	bl	800af18 <__mcmp>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	da7d      	bge.n	800908c <_strtod_l+0x8a4>
 8008f90:	ea5a 0308 	orrs.w	r3, sl, r8
 8008f94:	f040 80a3 	bne.w	80090de <_strtod_l+0x8f6>
 8008f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 809e 	bne.w	80090de <_strtod_l+0x8f6>
 8008fa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fa6:	0d1b      	lsrs	r3, r3, #20
 8008fa8:	051b      	lsls	r3, r3, #20
 8008faa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008fae:	f240 8096 	bls.w	80090de <_strtod_l+0x8f6>
 8008fb2:	696b      	ldr	r3, [r5, #20]
 8008fb4:	b91b      	cbnz	r3, 8008fbe <_strtod_l+0x7d6>
 8008fb6:	692b      	ldr	r3, [r5, #16]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	f340 8090 	ble.w	80090de <_strtod_l+0x8f6>
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f001 ff38 	bl	800ae38 <__lshift>
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4605      	mov	r5, r0
 8008fcc:	f001 ffa4 	bl	800af18 <__mcmp>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f340 8084 	ble.w	80090de <_strtod_l+0x8f6>
 8008fd6:	9904      	ldr	r1, [sp, #16]
 8008fd8:	4a2b      	ldr	r2, [pc, #172]	; (8009088 <_strtod_l+0x8a0>)
 8008fda:	464b      	mov	r3, r9
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	f000 809d 	beq.w	800911c <_strtod_l+0x934>
 8008fe2:	ea02 0109 	and.w	r1, r2, r9
 8008fe6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008fea:	f300 8097 	bgt.w	800911c <_strtod_l+0x934>
 8008fee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008ff2:	f77f aea5 	ble.w	8008d40 <_strtod_l+0x558>
 8008ff6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009078 <_strtod_l+0x890>
 8008ffa:	ec49 8b16 	vmov	d6, r8, r9
 8008ffe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009002:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009006:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800900a:	4313      	orrs	r3, r2
 800900c:	bf08      	it	eq
 800900e:	2322      	moveq	r3, #34	; 0x22
 8009010:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009014:	bf08      	it	eq
 8009016:	6023      	streq	r3, [r4, #0]
 8009018:	e62c      	b.n	8008c74 <_strtod_l+0x48c>
 800901a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800901e:	fa01 f202 	lsl.w	r2, r1, r2
 8009022:	ea02 0808 	and.w	r8, r2, r8
 8009026:	e6d9      	b.n	8008ddc <_strtod_l+0x5f4>
 8009028:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800902c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009030:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009034:	33e2      	adds	r3, #226	; 0xe2
 8009036:	fa00 f303 	lsl.w	r3, r0, r3
 800903a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800903e:	e73f      	b.n	8008ec0 <_strtod_l+0x6d8>
 8009040:	2200      	movs	r2, #0
 8009042:	2301      	movs	r3, #1
 8009044:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009048:	e73a      	b.n	8008ec0 <_strtod_l+0x6d8>
 800904a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800904c:	461a      	mov	r2, r3
 800904e:	4620      	mov	r0, r4
 8009050:	f001 fef2 	bl	800ae38 <__lshift>
 8009054:	9012      	str	r0, [sp, #72]	; 0x48
 8009056:	2800      	cmp	r0, #0
 8009058:	f47f af64 	bne.w	8008f24 <_strtod_l+0x73c>
 800905c:	e600      	b.n	8008c60 <_strtod_l+0x478>
 800905e:	bf00      	nop
 8009060:	94a03595 	.word	0x94a03595
 8009064:	3fcfffff 	.word	0x3fcfffff
 8009068:	94a03595 	.word	0x94a03595
 800906c:	3fdfffff 	.word	0x3fdfffff
 8009070:	35afe535 	.word	0x35afe535
 8009074:	3fe00000 	.word	0x3fe00000
 8009078:	00000000 	.word	0x00000000
 800907c:	39500000 	.word	0x39500000
 8009080:	0800bf80 	.word	0x0800bf80
 8009084:	fffffc02 	.word	0xfffffc02
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	46cb      	mov	fp, r9
 800908e:	d15f      	bne.n	8009150 <_strtod_l+0x968>
 8009090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009094:	f1ba 0f00 	cmp.w	sl, #0
 8009098:	d02a      	beq.n	80090f0 <_strtod_l+0x908>
 800909a:	4aa7      	ldr	r2, [pc, #668]	; (8009338 <_strtod_l+0xb50>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d12b      	bne.n	80090f8 <_strtod_l+0x910>
 80090a0:	9b04      	ldr	r3, [sp, #16]
 80090a2:	4642      	mov	r2, r8
 80090a4:	b1fb      	cbz	r3, 80090e6 <_strtod_l+0x8fe>
 80090a6:	4ba5      	ldr	r3, [pc, #660]	; (800933c <_strtod_l+0xb54>)
 80090a8:	ea09 0303 	and.w	r3, r9, r3
 80090ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80090b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80090b4:	d81a      	bhi.n	80090ec <_strtod_l+0x904>
 80090b6:	0d1b      	lsrs	r3, r3, #20
 80090b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80090bc:	fa01 f303 	lsl.w	r3, r1, r3
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d119      	bne.n	80090f8 <_strtod_l+0x910>
 80090c4:	4b9e      	ldr	r3, [pc, #632]	; (8009340 <_strtod_l+0xb58>)
 80090c6:	459b      	cmp	fp, r3
 80090c8:	d102      	bne.n	80090d0 <_strtod_l+0x8e8>
 80090ca:	3201      	adds	r2, #1
 80090cc:	f43f adc8 	beq.w	8008c60 <_strtod_l+0x478>
 80090d0:	4b9a      	ldr	r3, [pc, #616]	; (800933c <_strtod_l+0xb54>)
 80090d2:	ea0b 0303 	and.w	r3, fp, r3
 80090d6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d188      	bne.n	8008ff6 <_strtod_l+0x80e>
 80090e4:	e5c6      	b.n	8008c74 <_strtod_l+0x48c>
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090ea:	e7e9      	b.n	80090c0 <_strtod_l+0x8d8>
 80090ec:	460b      	mov	r3, r1
 80090ee:	e7e7      	b.n	80090c0 <_strtod_l+0x8d8>
 80090f0:	ea53 0308 	orrs.w	r3, r3, r8
 80090f4:	f43f af6f 	beq.w	8008fd6 <_strtod_l+0x7ee>
 80090f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fa:	b1cb      	cbz	r3, 8009130 <_strtod_l+0x948>
 80090fc:	ea13 0f0b 	tst.w	r3, fp
 8009100:	d0ed      	beq.n	80090de <_strtod_l+0x8f6>
 8009102:	9a04      	ldr	r2, [sp, #16]
 8009104:	4640      	mov	r0, r8
 8009106:	4649      	mov	r1, r9
 8009108:	f1ba 0f00 	cmp.w	sl, #0
 800910c:	d014      	beq.n	8009138 <_strtod_l+0x950>
 800910e:	f7ff fb4e 	bl	80087ae <sulp>
 8009112:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009116:	ec59 8b17 	vmov	r8, r9, d7
 800911a:	e7e0      	b.n	80090de <_strtod_l+0x8f6>
 800911c:	4013      	ands	r3, r2
 800911e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009122:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009126:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800912a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800912e:	e7d6      	b.n	80090de <_strtod_l+0x8f6>
 8009130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009132:	ea13 0f08 	tst.w	r3, r8
 8009136:	e7e3      	b.n	8009100 <_strtod_l+0x918>
 8009138:	f7ff fb39 	bl	80087ae <sulp>
 800913c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009140:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009148:	ec59 8b10 	vmov	r8, r9, d0
 800914c:	d1c7      	bne.n	80090de <_strtod_l+0x8f6>
 800914e:	e5f7      	b.n	8008d40 <_strtod_l+0x558>
 8009150:	4631      	mov	r1, r6
 8009152:	4628      	mov	r0, r5
 8009154:	f002 f85e 	bl	800b214 <__ratio>
 8009158:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800915c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009164:	d865      	bhi.n	8009232 <_strtod_l+0xa4a>
 8009166:	f1ba 0f00 	cmp.w	sl, #0
 800916a:	d042      	beq.n	80091f2 <_strtod_l+0xa0a>
 800916c:	4b75      	ldr	r3, [pc, #468]	; (8009344 <_strtod_l+0xb5c>)
 800916e:	2200      	movs	r2, #0
 8009170:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009174:	4871      	ldr	r0, [pc, #452]	; (800933c <_strtod_l+0xb54>)
 8009176:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009350 <_strtod_l+0xb68>
 800917a:	ea0b 0100 	and.w	r1, fp, r0
 800917e:	4561      	cmp	r1, ip
 8009180:	f040 808e 	bne.w	80092a0 <_strtod_l+0xab8>
 8009184:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009188:	ec49 8b10 	vmov	d0, r8, r9
 800918c:	ec43 2b1c 	vmov	d12, r2, r3
 8009190:	910a      	str	r1, [sp, #40]	; 0x28
 8009192:	f001 ff67 	bl	800b064 <__ulp>
 8009196:	ec49 8b1e 	vmov	d14, r8, r9
 800919a:	4868      	ldr	r0, [pc, #416]	; (800933c <_strtod_l+0xb54>)
 800919c:	eeac eb00 	vfma.f64	d14, d12, d0
 80091a0:	ee1e 3a90 	vmov	r3, s29
 80091a4:	4a68      	ldr	r2, [pc, #416]	; (8009348 <_strtod_l+0xb60>)
 80091a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091a8:	4018      	ands	r0, r3
 80091aa:	4290      	cmp	r0, r2
 80091ac:	ec59 8b1e 	vmov	r8, r9, d14
 80091b0:	d94e      	bls.n	8009250 <_strtod_l+0xa68>
 80091b2:	ee18 3a90 	vmov	r3, s17
 80091b6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d104      	bne.n	80091c8 <_strtod_l+0x9e0>
 80091be:	ee18 3a10 	vmov	r3, s16
 80091c2:	3301      	adds	r3, #1
 80091c4:	f43f ad4c 	beq.w	8008c60 <_strtod_l+0x478>
 80091c8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009340 <_strtod_l+0xb58>
 80091cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80091d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80091d2:	4620      	mov	r0, r4
 80091d4:	f001 fc14 	bl	800aa00 <_Bfree>
 80091d8:	4639      	mov	r1, r7
 80091da:	4620      	mov	r0, r4
 80091dc:	f001 fc10 	bl	800aa00 <_Bfree>
 80091e0:	4631      	mov	r1, r6
 80091e2:	4620      	mov	r0, r4
 80091e4:	f001 fc0c 	bl	800aa00 <_Bfree>
 80091e8:	4629      	mov	r1, r5
 80091ea:	4620      	mov	r0, r4
 80091ec:	f001 fc08 	bl	800aa00 <_Bfree>
 80091f0:	e619      	b.n	8008e26 <_strtod_l+0x63e>
 80091f2:	f1b8 0f00 	cmp.w	r8, #0
 80091f6:	d112      	bne.n	800921e <_strtod_l+0xa36>
 80091f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091fc:	b9b3      	cbnz	r3, 800922c <_strtod_l+0xa44>
 80091fe:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009202:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800920e:	bf58      	it	pl
 8009210:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009214:	eeb1 7b4d 	vneg.f64	d7, d13
 8009218:	ec53 2b17 	vmov	r2, r3, d7
 800921c:	e7aa      	b.n	8009174 <_strtod_l+0x98c>
 800921e:	f1b8 0f01 	cmp.w	r8, #1
 8009222:	d103      	bne.n	800922c <_strtod_l+0xa44>
 8009224:	f1b9 0f00 	cmp.w	r9, #0
 8009228:	f43f ad8a 	beq.w	8008d40 <_strtod_l+0x558>
 800922c:	4b47      	ldr	r3, [pc, #284]	; (800934c <_strtod_l+0xb64>)
 800922e:	2200      	movs	r2, #0
 8009230:	e79e      	b.n	8009170 <_strtod_l+0x988>
 8009232:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009236:	ee20 db0d 	vmul.f64	d13, d0, d13
 800923a:	f1ba 0f00 	cmp.w	sl, #0
 800923e:	d104      	bne.n	800924a <_strtod_l+0xa62>
 8009240:	eeb1 7b4d 	vneg.f64	d7, d13
 8009244:	ec53 2b17 	vmov	r2, r3, d7
 8009248:	e794      	b.n	8009174 <_strtod_l+0x98c>
 800924a:	eeb0 7b4d 	vmov.f64	d7, d13
 800924e:	e7f9      	b.n	8009244 <_strtod_l+0xa5c>
 8009250:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1ba      	bne.n	80091d0 <_strtod_l+0x9e8>
 800925a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800925e:	0d1b      	lsrs	r3, r3, #20
 8009260:	051b      	lsls	r3, r3, #20
 8009262:	4299      	cmp	r1, r3
 8009264:	d1b4      	bne.n	80091d0 <_strtod_l+0x9e8>
 8009266:	ec51 0b1d 	vmov	r0, r1, d13
 800926a:	f7f7 fa15 	bl	8000698 <__aeabi_d2lz>
 800926e:	f7f7 f9cd 	bl	800060c <__aeabi_l2d>
 8009272:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009276:	ec41 0b17 	vmov	d7, r0, r1
 800927a:	ea43 0308 	orr.w	r3, r3, r8
 800927e:	ea53 030a 	orrs.w	r3, r3, sl
 8009282:	ee3d db47 	vsub.f64	d13, d13, d7
 8009286:	d03c      	beq.n	8009302 <_strtod_l+0xb1a>
 8009288:	eeb4 dbca 	vcmpe.f64	d13, d10
 800928c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009290:	f53f acf0 	bmi.w	8008c74 <_strtod_l+0x48c>
 8009294:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	dd98      	ble.n	80091d0 <_strtod_l+0x9e8>
 800929e:	e4e9      	b.n	8008c74 <_strtod_l+0x48c>
 80092a0:	9804      	ldr	r0, [sp, #16]
 80092a2:	b1f0      	cbz	r0, 80092e2 <_strtod_l+0xafa>
 80092a4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80092a8:	d81b      	bhi.n	80092e2 <_strtod_l+0xafa>
 80092aa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009330 <_strtod_l+0xb48>
 80092ae:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80092b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b6:	d811      	bhi.n	80092dc <_strtod_l+0xaf4>
 80092b8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80092bc:	ee1d 3a10 	vmov	r3, s26
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	bf38      	it	cc
 80092c4:	2301      	movcc	r3, #1
 80092c6:	ee0d 3a10 	vmov	s26, r3
 80092ca:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80092ce:	f1ba 0f00 	cmp.w	sl, #0
 80092d2:	d113      	bne.n	80092fc <_strtod_l+0xb14>
 80092d4:	eeb1 7b4d 	vneg.f64	d7, d13
 80092d8:	ec53 2b17 	vmov	r2, r3, d7
 80092dc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80092e0:	1a43      	subs	r3, r0, r1
 80092e2:	eeb0 0b48 	vmov.f64	d0, d8
 80092e6:	ec43 2b1c 	vmov	d12, r2, r3
 80092ea:	910a      	str	r1, [sp, #40]	; 0x28
 80092ec:	f001 feba 	bl	800b064 <__ulp>
 80092f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092f2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80092f6:	ec59 8b18 	vmov	r8, r9, d8
 80092fa:	e7ab      	b.n	8009254 <_strtod_l+0xa6c>
 80092fc:	eeb0 7b4d 	vmov.f64	d7, d13
 8009300:	e7ea      	b.n	80092d8 <_strtod_l+0xaf0>
 8009302:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930a:	f57f af61 	bpl.w	80091d0 <_strtod_l+0x9e8>
 800930e:	e4b1      	b.n	8008c74 <_strtod_l+0x48c>
 8009310:	2300      	movs	r3, #0
 8009312:	9308      	str	r3, [sp, #32]
 8009314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009318:	6013      	str	r3, [r2, #0]
 800931a:	f7ff baad 	b.w	8008878 <_strtod_l+0x90>
 800931e:	2a65      	cmp	r2, #101	; 0x65
 8009320:	f43f ab9f 	beq.w	8008a62 <_strtod_l+0x27a>
 8009324:	2a45      	cmp	r2, #69	; 0x45
 8009326:	f43f ab9c 	beq.w	8008a62 <_strtod_l+0x27a>
 800932a:	2101      	movs	r1, #1
 800932c:	f7ff bbd4 	b.w	8008ad8 <_strtod_l+0x2f0>
 8009330:	ffc00000 	.word	0xffc00000
 8009334:	41dfffff 	.word	0x41dfffff
 8009338:	000fffff 	.word	0x000fffff
 800933c:	7ff00000 	.word	0x7ff00000
 8009340:	7fefffff 	.word	0x7fefffff
 8009344:	3ff00000 	.word	0x3ff00000
 8009348:	7c9fffff 	.word	0x7c9fffff
 800934c:	bff00000 	.word	0xbff00000
 8009350:	7fe00000 	.word	0x7fe00000

08009354 <_strtod_r>:
 8009354:	4b01      	ldr	r3, [pc, #4]	; (800935c <_strtod_r+0x8>)
 8009356:	f7ff ba47 	b.w	80087e8 <_strtod_l>
 800935a:	bf00      	nop
 800935c:	20000078 	.word	0x20000078

08009360 <_strtol_l.constprop.0>:
 8009360:	2b01      	cmp	r3, #1
 8009362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009366:	d001      	beq.n	800936c <_strtol_l.constprop.0+0xc>
 8009368:	2b24      	cmp	r3, #36	; 0x24
 800936a:	d906      	bls.n	800937a <_strtol_l.constprop.0+0x1a>
 800936c:	f7fe f926 	bl	80075bc <__errno>
 8009370:	2316      	movs	r3, #22
 8009372:	6003      	str	r3, [r0, #0]
 8009374:	2000      	movs	r0, #0
 8009376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800937a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009460 <_strtol_l.constprop.0+0x100>
 800937e:	460d      	mov	r5, r1
 8009380:	462e      	mov	r6, r5
 8009382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009386:	f814 700c 	ldrb.w	r7, [r4, ip]
 800938a:	f017 0708 	ands.w	r7, r7, #8
 800938e:	d1f7      	bne.n	8009380 <_strtol_l.constprop.0+0x20>
 8009390:	2c2d      	cmp	r4, #45	; 0x2d
 8009392:	d132      	bne.n	80093fa <_strtol_l.constprop.0+0x9a>
 8009394:	782c      	ldrb	r4, [r5, #0]
 8009396:	2701      	movs	r7, #1
 8009398:	1cb5      	adds	r5, r6, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d05b      	beq.n	8009456 <_strtol_l.constprop.0+0xf6>
 800939e:	2b10      	cmp	r3, #16
 80093a0:	d109      	bne.n	80093b6 <_strtol_l.constprop.0+0x56>
 80093a2:	2c30      	cmp	r4, #48	; 0x30
 80093a4:	d107      	bne.n	80093b6 <_strtol_l.constprop.0+0x56>
 80093a6:	782c      	ldrb	r4, [r5, #0]
 80093a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80093ac:	2c58      	cmp	r4, #88	; 0x58
 80093ae:	d14d      	bne.n	800944c <_strtol_l.constprop.0+0xec>
 80093b0:	786c      	ldrb	r4, [r5, #1]
 80093b2:	2310      	movs	r3, #16
 80093b4:	3502      	adds	r5, #2
 80093b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80093ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80093be:	f04f 0c00 	mov.w	ip, #0
 80093c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80093c6:	4666      	mov	r6, ip
 80093c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80093cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80093d0:	f1be 0f09 	cmp.w	lr, #9
 80093d4:	d816      	bhi.n	8009404 <_strtol_l.constprop.0+0xa4>
 80093d6:	4674      	mov	r4, lr
 80093d8:	42a3      	cmp	r3, r4
 80093da:	dd24      	ble.n	8009426 <_strtol_l.constprop.0+0xc6>
 80093dc:	f1bc 0f00 	cmp.w	ip, #0
 80093e0:	db1e      	blt.n	8009420 <_strtol_l.constprop.0+0xc0>
 80093e2:	45b1      	cmp	r9, r6
 80093e4:	d31c      	bcc.n	8009420 <_strtol_l.constprop.0+0xc0>
 80093e6:	d101      	bne.n	80093ec <_strtol_l.constprop.0+0x8c>
 80093e8:	45a2      	cmp	sl, r4
 80093ea:	db19      	blt.n	8009420 <_strtol_l.constprop.0+0xc0>
 80093ec:	fb06 4603 	mla	r6, r6, r3, r4
 80093f0:	f04f 0c01 	mov.w	ip, #1
 80093f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093f8:	e7e8      	b.n	80093cc <_strtol_l.constprop.0+0x6c>
 80093fa:	2c2b      	cmp	r4, #43	; 0x2b
 80093fc:	bf04      	itt	eq
 80093fe:	782c      	ldrbeq	r4, [r5, #0]
 8009400:	1cb5      	addeq	r5, r6, #2
 8009402:	e7ca      	b.n	800939a <_strtol_l.constprop.0+0x3a>
 8009404:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009408:	f1be 0f19 	cmp.w	lr, #25
 800940c:	d801      	bhi.n	8009412 <_strtol_l.constprop.0+0xb2>
 800940e:	3c37      	subs	r4, #55	; 0x37
 8009410:	e7e2      	b.n	80093d8 <_strtol_l.constprop.0+0x78>
 8009412:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009416:	f1be 0f19 	cmp.w	lr, #25
 800941a:	d804      	bhi.n	8009426 <_strtol_l.constprop.0+0xc6>
 800941c:	3c57      	subs	r4, #87	; 0x57
 800941e:	e7db      	b.n	80093d8 <_strtol_l.constprop.0+0x78>
 8009420:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009424:	e7e6      	b.n	80093f4 <_strtol_l.constprop.0+0x94>
 8009426:	f1bc 0f00 	cmp.w	ip, #0
 800942a:	da05      	bge.n	8009438 <_strtol_l.constprop.0+0xd8>
 800942c:	2322      	movs	r3, #34	; 0x22
 800942e:	6003      	str	r3, [r0, #0]
 8009430:	4646      	mov	r6, r8
 8009432:	b942      	cbnz	r2, 8009446 <_strtol_l.constprop.0+0xe6>
 8009434:	4630      	mov	r0, r6
 8009436:	e79e      	b.n	8009376 <_strtol_l.constprop.0+0x16>
 8009438:	b107      	cbz	r7, 800943c <_strtol_l.constprop.0+0xdc>
 800943a:	4276      	negs	r6, r6
 800943c:	2a00      	cmp	r2, #0
 800943e:	d0f9      	beq.n	8009434 <_strtol_l.constprop.0+0xd4>
 8009440:	f1bc 0f00 	cmp.w	ip, #0
 8009444:	d000      	beq.n	8009448 <_strtol_l.constprop.0+0xe8>
 8009446:	1e69      	subs	r1, r5, #1
 8009448:	6011      	str	r1, [r2, #0]
 800944a:	e7f3      	b.n	8009434 <_strtol_l.constprop.0+0xd4>
 800944c:	2430      	movs	r4, #48	; 0x30
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1b1      	bne.n	80093b6 <_strtol_l.constprop.0+0x56>
 8009452:	2308      	movs	r3, #8
 8009454:	e7af      	b.n	80093b6 <_strtol_l.constprop.0+0x56>
 8009456:	2c30      	cmp	r4, #48	; 0x30
 8009458:	d0a5      	beq.n	80093a6 <_strtol_l.constprop.0+0x46>
 800945a:	230a      	movs	r3, #10
 800945c:	e7ab      	b.n	80093b6 <_strtol_l.constprop.0+0x56>
 800945e:	bf00      	nop
 8009460:	0800bfa9 	.word	0x0800bfa9

08009464 <_strtol_r>:
 8009464:	f7ff bf7c 	b.w	8009360 <_strtol_l.constprop.0>

08009468 <_write_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_write_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f8 f859 	bl	800152e <_write>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_write_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_write_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20004d84 	.word	0x20004d84

0800948c <_close_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	; (80094a8 <_close_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f8 f865 	bl	8001566 <_close>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_close_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_close_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20004d84 	.word	0x20004d84

080094ac <quorem>:
 80094ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	6903      	ldr	r3, [r0, #16]
 80094b2:	690c      	ldr	r4, [r1, #16]
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	4607      	mov	r7, r0
 80094b8:	f2c0 8081 	blt.w	80095be <quorem+0x112>
 80094bc:	3c01      	subs	r4, #1
 80094be:	f101 0814 	add.w	r8, r1, #20
 80094c2:	f100 0514 	add.w	r5, r0, #20
 80094c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094d4:	3301      	adds	r3, #1
 80094d6:	429a      	cmp	r2, r3
 80094d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80094e4:	d331      	bcc.n	800954a <quorem+0x9e>
 80094e6:	f04f 0e00 	mov.w	lr, #0
 80094ea:	4640      	mov	r0, r8
 80094ec:	46ac      	mov	ip, r5
 80094ee:	46f2      	mov	sl, lr
 80094f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80094f4:	b293      	uxth	r3, r2
 80094f6:	fb06 e303 	mla	r3, r6, r3, lr
 80094fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094fe:	b29b      	uxth	r3, r3
 8009500:	ebaa 0303 	sub.w	r3, sl, r3
 8009504:	f8dc a000 	ldr.w	sl, [ip]
 8009508:	0c12      	lsrs	r2, r2, #16
 800950a:	fa13 f38a 	uxtah	r3, r3, sl
 800950e:	fb06 e202 	mla	r2, r6, r2, lr
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	9b00      	ldr	r3, [sp, #0]
 8009516:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800951a:	b292      	uxth	r2, r2
 800951c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009524:	f8bd 3000 	ldrh.w	r3, [sp]
 8009528:	4581      	cmp	r9, r0
 800952a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800952e:	f84c 3b04 	str.w	r3, [ip], #4
 8009532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009536:	d2db      	bcs.n	80094f0 <quorem+0x44>
 8009538:	f855 300b 	ldr.w	r3, [r5, fp]
 800953c:	b92b      	cbnz	r3, 800954a <quorem+0x9e>
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	3b04      	subs	r3, #4
 8009542:	429d      	cmp	r5, r3
 8009544:	461a      	mov	r2, r3
 8009546:	d32e      	bcc.n	80095a6 <quorem+0xfa>
 8009548:	613c      	str	r4, [r7, #16]
 800954a:	4638      	mov	r0, r7
 800954c:	f001 fce4 	bl	800af18 <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	db24      	blt.n	800959e <quorem+0xf2>
 8009554:	3601      	adds	r6, #1
 8009556:	4628      	mov	r0, r5
 8009558:	f04f 0c00 	mov.w	ip, #0
 800955c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009560:	f8d0 e000 	ldr.w	lr, [r0]
 8009564:	b293      	uxth	r3, r2
 8009566:	ebac 0303 	sub.w	r3, ip, r3
 800956a:	0c12      	lsrs	r2, r2, #16
 800956c:	fa13 f38e 	uxtah	r3, r3, lr
 8009570:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009578:	b29b      	uxth	r3, r3
 800957a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800957e:	45c1      	cmp	r9, r8
 8009580:	f840 3b04 	str.w	r3, [r0], #4
 8009584:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009588:	d2e8      	bcs.n	800955c <quorem+0xb0>
 800958a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800958e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009592:	b922      	cbnz	r2, 800959e <quorem+0xf2>
 8009594:	3b04      	subs	r3, #4
 8009596:	429d      	cmp	r5, r3
 8009598:	461a      	mov	r2, r3
 800959a:	d30a      	bcc.n	80095b2 <quorem+0x106>
 800959c:	613c      	str	r4, [r7, #16]
 800959e:	4630      	mov	r0, r6
 80095a0:	b003      	add	sp, #12
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	3b04      	subs	r3, #4
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	d1cc      	bne.n	8009548 <quorem+0x9c>
 80095ae:	3c01      	subs	r4, #1
 80095b0:	e7c7      	b.n	8009542 <quorem+0x96>
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	3b04      	subs	r3, #4
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	d1f0      	bne.n	800959c <quorem+0xf0>
 80095ba:	3c01      	subs	r4, #1
 80095bc:	e7eb      	b.n	8009596 <quorem+0xea>
 80095be:	2000      	movs	r0, #0
 80095c0:	e7ee      	b.n	80095a0 <quorem+0xf4>
 80095c2:	0000      	movs	r0, r0
 80095c4:	0000      	movs	r0, r0
	...

080095c8 <_dtoa_r>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	ed2d 8b02 	vpush	{d8}
 80095d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095d2:	b091      	sub	sp, #68	; 0x44
 80095d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095d8:	ec59 8b10 	vmov	r8, r9, d0
 80095dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80095de:	9106      	str	r1, [sp, #24]
 80095e0:	4606      	mov	r6, r0
 80095e2:	9208      	str	r2, [sp, #32]
 80095e4:	930c      	str	r3, [sp, #48]	; 0x30
 80095e6:	b975      	cbnz	r5, 8009606 <_dtoa_r+0x3e>
 80095e8:	2010      	movs	r0, #16
 80095ea:	f001 f9a3 	bl	800a934 <malloc>
 80095ee:	4602      	mov	r2, r0
 80095f0:	6270      	str	r0, [r6, #36]	; 0x24
 80095f2:	b920      	cbnz	r0, 80095fe <_dtoa_r+0x36>
 80095f4:	4baa      	ldr	r3, [pc, #680]	; (80098a0 <_dtoa_r+0x2d8>)
 80095f6:	21ea      	movs	r1, #234	; 0xea
 80095f8:	48aa      	ldr	r0, [pc, #680]	; (80098a4 <_dtoa_r+0x2dc>)
 80095fa:	f002 f87b 	bl	800b6f4 <__assert_func>
 80095fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009602:	6005      	str	r5, [r0, #0]
 8009604:	60c5      	str	r5, [r0, #12]
 8009606:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009608:	6819      	ldr	r1, [r3, #0]
 800960a:	b151      	cbz	r1, 8009622 <_dtoa_r+0x5a>
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	604a      	str	r2, [r1, #4]
 8009610:	2301      	movs	r3, #1
 8009612:	4093      	lsls	r3, r2
 8009614:	608b      	str	r3, [r1, #8]
 8009616:	4630      	mov	r0, r6
 8009618:	f001 f9f2 	bl	800aa00 <_Bfree>
 800961c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	f1b9 0300 	subs.w	r3, r9, #0
 8009626:	bfbb      	ittet	lt
 8009628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800962c:	9303      	strlt	r3, [sp, #12]
 800962e:	2300      	movge	r3, #0
 8009630:	2201      	movlt	r2, #1
 8009632:	bfac      	ite	ge
 8009634:	6023      	strge	r3, [r4, #0]
 8009636:	6022      	strlt	r2, [r4, #0]
 8009638:	4b9b      	ldr	r3, [pc, #620]	; (80098a8 <_dtoa_r+0x2e0>)
 800963a:	9c03      	ldr	r4, [sp, #12]
 800963c:	43a3      	bics	r3, r4
 800963e:	d11c      	bne.n	800967a <_dtoa_r+0xb2>
 8009640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009642:	f242 730f 	movw	r3, #9999	; 0x270f
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800964c:	ea53 0308 	orrs.w	r3, r3, r8
 8009650:	f000 84fd 	beq.w	800a04e <_dtoa_r+0xa86>
 8009654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009656:	b963      	cbnz	r3, 8009672 <_dtoa_r+0xaa>
 8009658:	4b94      	ldr	r3, [pc, #592]	; (80098ac <_dtoa_r+0x2e4>)
 800965a:	e01f      	b.n	800969c <_dtoa_r+0xd4>
 800965c:	4b94      	ldr	r3, [pc, #592]	; (80098b0 <_dtoa_r+0x2e8>)
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	3308      	adds	r3, #8
 8009662:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	9801      	ldr	r0, [sp, #4]
 8009668:	b011      	add	sp, #68	; 0x44
 800966a:	ecbd 8b02 	vpop	{d8}
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	4b8e      	ldr	r3, [pc, #568]	; (80098ac <_dtoa_r+0x2e4>)
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	3303      	adds	r3, #3
 8009678:	e7f3      	b.n	8009662 <_dtoa_r+0x9a>
 800967a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800967e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009686:	d10b      	bne.n	80096a0 <_dtoa_r+0xd8>
 8009688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800968a:	2301      	movs	r3, #1
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 84d9 	beq.w	800a048 <_dtoa_r+0xa80>
 8009696:	4887      	ldr	r0, [pc, #540]	; (80098b4 <_dtoa_r+0x2ec>)
 8009698:	6018      	str	r0, [r3, #0]
 800969a:	1e43      	subs	r3, r0, #1
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	e7e2      	b.n	8009666 <_dtoa_r+0x9e>
 80096a0:	a90f      	add	r1, sp, #60	; 0x3c
 80096a2:	aa0e      	add	r2, sp, #56	; 0x38
 80096a4:	4630      	mov	r0, r6
 80096a6:	eeb0 0b48 	vmov.f64	d0, d8
 80096aa:	f001 fd57 	bl	800b15c <__d2b>
 80096ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80096b2:	4605      	mov	r5, r0
 80096b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80096b6:	2900      	cmp	r1, #0
 80096b8:	d046      	beq.n	8009748 <_dtoa_r+0x180>
 80096ba:	ee18 4a90 	vmov	r4, s17
 80096be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80096c2:	ec53 2b18 	vmov	r2, r3, d8
 80096c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80096ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80096d2:	2400      	movs	r4, #0
 80096d4:	ec43 2b16 	vmov	d6, r2, r3
 80096d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80096dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009888 <_dtoa_r+0x2c0>
 80096e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009890 <_dtoa_r+0x2c8>
 80096e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80096ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009898 <_dtoa_r+0x2d0>
 80096f0:	ee07 1a90 	vmov	s15, r1
 80096f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80096f8:	eeb0 7b46 	vmov.f64	d7, d6
 80096fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009700:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009704:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970c:	ee16 ba90 	vmov	fp, s13
 8009710:	940a      	str	r4, [sp, #40]	; 0x28
 8009712:	d508      	bpl.n	8009726 <_dtoa_r+0x15e>
 8009714:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009718:	eeb4 6b47 	vcmp.f64	d6, d7
 800971c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009720:	bf18      	it	ne
 8009722:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8009726:	f1bb 0f16 	cmp.w	fp, #22
 800972a:	d82f      	bhi.n	800978c <_dtoa_r+0x1c4>
 800972c:	4b62      	ldr	r3, [pc, #392]	; (80098b8 <_dtoa_r+0x2f0>)
 800972e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009732:	ed93 7b00 	vldr	d7, [r3]
 8009736:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800973a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973e:	d501      	bpl.n	8009744 <_dtoa_r+0x17c>
 8009740:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009744:	2300      	movs	r3, #0
 8009746:	e022      	b.n	800978e <_dtoa_r+0x1c6>
 8009748:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800974a:	4401      	add	r1, r0
 800974c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009750:	2b20      	cmp	r3, #32
 8009752:	bfc1      	itttt	gt
 8009754:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009758:	fa04 f303 	lslgt.w	r3, r4, r3
 800975c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009760:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009764:	bfd6      	itet	le
 8009766:	f1c3 0320 	rsble	r3, r3, #32
 800976a:	ea43 0808 	orrgt.w	r8, r3, r8
 800976e:	fa08 f803 	lslle.w	r8, r8, r3
 8009772:	ee07 8a90 	vmov	s15, r8
 8009776:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800977a:	3901      	subs	r1, #1
 800977c:	ee17 4a90 	vmov	r4, s15
 8009780:	ec53 2b17 	vmov	r2, r3, d7
 8009784:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009788:	2401      	movs	r4, #1
 800978a:	e7a3      	b.n	80096d4 <_dtoa_r+0x10c>
 800978c:	2301      	movs	r3, #1
 800978e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009790:	1a43      	subs	r3, r0, r1
 8009792:	1e5a      	subs	r2, r3, #1
 8009794:	bf45      	ittet	mi
 8009796:	f1c3 0301 	rsbmi	r3, r3, #1
 800979a:	9304      	strmi	r3, [sp, #16]
 800979c:	2300      	movpl	r3, #0
 800979e:	2300      	movmi	r3, #0
 80097a0:	9205      	str	r2, [sp, #20]
 80097a2:	bf54      	ite	pl
 80097a4:	9304      	strpl	r3, [sp, #16]
 80097a6:	9305      	strmi	r3, [sp, #20]
 80097a8:	f1bb 0f00 	cmp.w	fp, #0
 80097ac:	db18      	blt.n	80097e0 <_dtoa_r+0x218>
 80097ae:	9b05      	ldr	r3, [sp, #20]
 80097b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80097b4:	445b      	add	r3, fp
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	2300      	movs	r3, #0
 80097ba:	9a06      	ldr	r2, [sp, #24]
 80097bc:	2a09      	cmp	r2, #9
 80097be:	d849      	bhi.n	8009854 <_dtoa_r+0x28c>
 80097c0:	2a05      	cmp	r2, #5
 80097c2:	bfc4      	itt	gt
 80097c4:	3a04      	subgt	r2, #4
 80097c6:	9206      	strgt	r2, [sp, #24]
 80097c8:	9a06      	ldr	r2, [sp, #24]
 80097ca:	f1a2 0202 	sub.w	r2, r2, #2
 80097ce:	bfcc      	ite	gt
 80097d0:	2400      	movgt	r4, #0
 80097d2:	2401      	movle	r4, #1
 80097d4:	2a03      	cmp	r2, #3
 80097d6:	d848      	bhi.n	800986a <_dtoa_r+0x2a2>
 80097d8:	e8df f002 	tbb	[pc, r2]
 80097dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80097e0:	9b04      	ldr	r3, [sp, #16]
 80097e2:	2200      	movs	r2, #0
 80097e4:	eba3 030b 	sub.w	r3, r3, fp
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	9209      	str	r2, [sp, #36]	; 0x24
 80097ec:	f1cb 0300 	rsb	r3, fp, #0
 80097f0:	e7e3      	b.n	80097ba <_dtoa_r+0x1f2>
 80097f2:	2200      	movs	r2, #0
 80097f4:	9207      	str	r2, [sp, #28]
 80097f6:	9a08      	ldr	r2, [sp, #32]
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	dc39      	bgt.n	8009870 <_dtoa_r+0x2a8>
 80097fc:	f04f 0a01 	mov.w	sl, #1
 8009800:	46d1      	mov	r9, sl
 8009802:	4652      	mov	r2, sl
 8009804:	f8cd a020 	str.w	sl, [sp, #32]
 8009808:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800980a:	2100      	movs	r1, #0
 800980c:	6079      	str	r1, [r7, #4]
 800980e:	2004      	movs	r0, #4
 8009810:	f100 0c14 	add.w	ip, r0, #20
 8009814:	4594      	cmp	ip, r2
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	d92f      	bls.n	800987a <_dtoa_r+0x2b2>
 800981a:	4630      	mov	r0, r6
 800981c:	930d      	str	r3, [sp, #52]	; 0x34
 800981e:	f001 f8af 	bl	800a980 <_Balloc>
 8009822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009824:	9001      	str	r0, [sp, #4]
 8009826:	4602      	mov	r2, r0
 8009828:	2800      	cmp	r0, #0
 800982a:	d149      	bne.n	80098c0 <_dtoa_r+0x2f8>
 800982c:	4b23      	ldr	r3, [pc, #140]	; (80098bc <_dtoa_r+0x2f4>)
 800982e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009832:	e6e1      	b.n	80095f8 <_dtoa_r+0x30>
 8009834:	2201      	movs	r2, #1
 8009836:	e7dd      	b.n	80097f4 <_dtoa_r+0x22c>
 8009838:	2200      	movs	r2, #0
 800983a:	9207      	str	r2, [sp, #28]
 800983c:	9a08      	ldr	r2, [sp, #32]
 800983e:	eb0b 0a02 	add.w	sl, fp, r2
 8009842:	f10a 0901 	add.w	r9, sl, #1
 8009846:	464a      	mov	r2, r9
 8009848:	2a01      	cmp	r2, #1
 800984a:	bfb8      	it	lt
 800984c:	2201      	movlt	r2, #1
 800984e:	e7db      	b.n	8009808 <_dtoa_r+0x240>
 8009850:	2201      	movs	r2, #1
 8009852:	e7f2      	b.n	800983a <_dtoa_r+0x272>
 8009854:	2401      	movs	r4, #1
 8009856:	2200      	movs	r2, #0
 8009858:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800985c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009860:	2100      	movs	r1, #0
 8009862:	46d1      	mov	r9, sl
 8009864:	2212      	movs	r2, #18
 8009866:	9108      	str	r1, [sp, #32]
 8009868:	e7ce      	b.n	8009808 <_dtoa_r+0x240>
 800986a:	2201      	movs	r2, #1
 800986c:	9207      	str	r2, [sp, #28]
 800986e:	e7f5      	b.n	800985c <_dtoa_r+0x294>
 8009870:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009874:	46d1      	mov	r9, sl
 8009876:	4652      	mov	r2, sl
 8009878:	e7c6      	b.n	8009808 <_dtoa_r+0x240>
 800987a:	3101      	adds	r1, #1
 800987c:	6079      	str	r1, [r7, #4]
 800987e:	0040      	lsls	r0, r0, #1
 8009880:	e7c6      	b.n	8009810 <_dtoa_r+0x248>
 8009882:	bf00      	nop
 8009884:	f3af 8000 	nop.w
 8009888:	636f4361 	.word	0x636f4361
 800988c:	3fd287a7 	.word	0x3fd287a7
 8009890:	8b60c8b3 	.word	0x8b60c8b3
 8009894:	3fc68a28 	.word	0x3fc68a28
 8009898:	509f79fb 	.word	0x509f79fb
 800989c:	3fd34413 	.word	0x3fd34413
 80098a0:	0800c0b6 	.word	0x0800c0b6
 80098a4:	0800c0cd 	.word	0x0800c0cd
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	0800c0b2 	.word	0x0800c0b2
 80098b0:	0800c0a9 	.word	0x0800c0a9
 80098b4:	0800bf2d 	.word	0x0800bf2d
 80098b8:	0800c238 	.word	0x0800c238
 80098bc:	0800c128 	.word	0x0800c128
 80098c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80098c2:	9901      	ldr	r1, [sp, #4]
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	f1b9 0f0e 	cmp.w	r9, #14
 80098ca:	d86c      	bhi.n	80099a6 <_dtoa_r+0x3de>
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	d06a      	beq.n	80099a6 <_dtoa_r+0x3de>
 80098d0:	f1bb 0f00 	cmp.w	fp, #0
 80098d4:	f340 80a0 	ble.w	8009a18 <_dtoa_r+0x450>
 80098d8:	49c1      	ldr	r1, [pc, #772]	; (8009be0 <_dtoa_r+0x618>)
 80098da:	f00b 020f 	and.w	r2, fp, #15
 80098de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80098e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80098e6:	ed92 7b00 	vldr	d7, [r2]
 80098ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80098ee:	f000 8087 	beq.w	8009a00 <_dtoa_r+0x438>
 80098f2:	4abc      	ldr	r2, [pc, #752]	; (8009be4 <_dtoa_r+0x61c>)
 80098f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80098f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80098fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009900:	f001 010f 	and.w	r1, r1, #15
 8009904:	2203      	movs	r2, #3
 8009906:	48b7      	ldr	r0, [pc, #732]	; (8009be4 <_dtoa_r+0x61c>)
 8009908:	2900      	cmp	r1, #0
 800990a:	d17b      	bne.n	8009a04 <_dtoa_r+0x43c>
 800990c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009910:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009914:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009918:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800991a:	2900      	cmp	r1, #0
 800991c:	f000 80a2 	beq.w	8009a64 <_dtoa_r+0x49c>
 8009920:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009924:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009928:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800992c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009930:	f140 8098 	bpl.w	8009a64 <_dtoa_r+0x49c>
 8009934:	f1b9 0f00 	cmp.w	r9, #0
 8009938:	f000 8094 	beq.w	8009a64 <_dtoa_r+0x49c>
 800993c:	f1ba 0f00 	cmp.w	sl, #0
 8009940:	dd2f      	ble.n	80099a2 <_dtoa_r+0x3da>
 8009942:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009946:	ee27 7b06 	vmul.f64	d7, d7, d6
 800994a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800994e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009952:	3201      	adds	r2, #1
 8009954:	4650      	mov	r0, sl
 8009956:	ed9d 6b02 	vldr	d6, [sp, #8]
 800995a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800995e:	ee07 2a90 	vmov	s15, r2
 8009962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009966:	eea7 5b06 	vfma.f64	d5, d7, d6
 800996a:	ee15 4a90 	vmov	r4, s11
 800996e:	ec52 1b15 	vmov	r1, r2, d5
 8009972:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009976:	2800      	cmp	r0, #0
 8009978:	d177      	bne.n	8009a6a <_dtoa_r+0x4a2>
 800997a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800997e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009982:	ec42 1b17 	vmov	d7, r1, r2
 8009986:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800998a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998e:	f300 8263 	bgt.w	8009e58 <_dtoa_r+0x890>
 8009992:	eeb1 7b47 	vneg.f64	d7, d7
 8009996:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800999a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999e:	f100 8258 	bmi.w	8009e52 <_dtoa_r+0x88a>
 80099a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	f2c0 811d 	blt.w	8009be8 <_dtoa_r+0x620>
 80099ae:	f1bb 0f0e 	cmp.w	fp, #14
 80099b2:	f300 8119 	bgt.w	8009be8 <_dtoa_r+0x620>
 80099b6:	4b8a      	ldr	r3, [pc, #552]	; (8009be0 <_dtoa_r+0x618>)
 80099b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099bc:	ed93 6b00 	vldr	d6, [r3]
 80099c0:	9b08      	ldr	r3, [sp, #32]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f280 80b7 	bge.w	8009b36 <_dtoa_r+0x56e>
 80099c8:	f1b9 0f00 	cmp.w	r9, #0
 80099cc:	f300 80b3 	bgt.w	8009b36 <_dtoa_r+0x56e>
 80099d0:	f040 823f 	bne.w	8009e52 <_dtoa_r+0x88a>
 80099d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80099d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80099dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e8:	464c      	mov	r4, r9
 80099ea:	464f      	mov	r7, r9
 80099ec:	f280 8215 	bge.w	8009e1a <_dtoa_r+0x852>
 80099f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099f4:	2331      	movs	r3, #49	; 0x31
 80099f6:	f808 3b01 	strb.w	r3, [r8], #1
 80099fa:	f10b 0b01 	add.w	fp, fp, #1
 80099fe:	e211      	b.n	8009e24 <_dtoa_r+0x85c>
 8009a00:	2202      	movs	r2, #2
 8009a02:	e780      	b.n	8009906 <_dtoa_r+0x33e>
 8009a04:	07cc      	lsls	r4, r1, #31
 8009a06:	d504      	bpl.n	8009a12 <_dtoa_r+0x44a>
 8009a08:	ed90 6b00 	vldr	d6, [r0]
 8009a0c:	3201      	adds	r2, #1
 8009a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a12:	1049      	asrs	r1, r1, #1
 8009a14:	3008      	adds	r0, #8
 8009a16:	e777      	b.n	8009908 <_dtoa_r+0x340>
 8009a18:	d022      	beq.n	8009a60 <_dtoa_r+0x498>
 8009a1a:	f1cb 0100 	rsb	r1, fp, #0
 8009a1e:	4a70      	ldr	r2, [pc, #448]	; (8009be0 <_dtoa_r+0x618>)
 8009a20:	f001 000f 	and.w	r0, r1, #15
 8009a24:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a28:	ed92 7b00 	vldr	d7, [r2]
 8009a2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a34:	486b      	ldr	r0, [pc, #428]	; (8009be4 <_dtoa_r+0x61c>)
 8009a36:	1109      	asrs	r1, r1, #4
 8009a38:	2400      	movs	r4, #0
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	b929      	cbnz	r1, 8009a4a <_dtoa_r+0x482>
 8009a3e:	2c00      	cmp	r4, #0
 8009a40:	f43f af6a 	beq.w	8009918 <_dtoa_r+0x350>
 8009a44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a48:	e766      	b.n	8009918 <_dtoa_r+0x350>
 8009a4a:	07cf      	lsls	r7, r1, #31
 8009a4c:	d505      	bpl.n	8009a5a <_dtoa_r+0x492>
 8009a4e:	ed90 6b00 	vldr	d6, [r0]
 8009a52:	3201      	adds	r2, #1
 8009a54:	2401      	movs	r4, #1
 8009a56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a5a:	1049      	asrs	r1, r1, #1
 8009a5c:	3008      	adds	r0, #8
 8009a5e:	e7ed      	b.n	8009a3c <_dtoa_r+0x474>
 8009a60:	2202      	movs	r2, #2
 8009a62:	e759      	b.n	8009918 <_dtoa_r+0x350>
 8009a64:	465f      	mov	r7, fp
 8009a66:	4648      	mov	r0, r9
 8009a68:	e775      	b.n	8009956 <_dtoa_r+0x38e>
 8009a6a:	ec42 1b17 	vmov	d7, r1, r2
 8009a6e:	4a5c      	ldr	r2, [pc, #368]	; (8009be0 <_dtoa_r+0x618>)
 8009a70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a74:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009a78:	9a01      	ldr	r2, [sp, #4]
 8009a7a:	1814      	adds	r4, r2, r0
 8009a7c:	9a07      	ldr	r2, [sp, #28]
 8009a7e:	b352      	cbz	r2, 8009ad6 <_dtoa_r+0x50e>
 8009a80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009a84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009a88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009a90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009a94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009a98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009a9c:	ee14 2a90 	vmov	r2, s9
 8009aa0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009aa4:	3230      	adds	r2, #48	; 0x30
 8009aa6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009aaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab2:	f808 2b01 	strb.w	r2, [r8], #1
 8009ab6:	d439      	bmi.n	8009b2c <_dtoa_r+0x564>
 8009ab8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009abc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac4:	d472      	bmi.n	8009bac <_dtoa_r+0x5e4>
 8009ac6:	45a0      	cmp	r8, r4
 8009ac8:	f43f af6b 	beq.w	80099a2 <_dtoa_r+0x3da>
 8009acc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009ad0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ad4:	e7e0      	b.n	8009a98 <_dtoa_r+0x4d0>
 8009ad6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ada:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ade:	4621      	mov	r1, r4
 8009ae0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009ae4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ae8:	ee14 2a90 	vmov	r2, s9
 8009aec:	3230      	adds	r2, #48	; 0x30
 8009aee:	f808 2b01 	strb.w	r2, [r8], #1
 8009af2:	45a0      	cmp	r8, r4
 8009af4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009af8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009afc:	d118      	bne.n	8009b30 <_dtoa_r+0x568>
 8009afe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009b02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009b06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0e:	dc4d      	bgt.n	8009bac <_dtoa_r+0x5e4>
 8009b10:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009b14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1c:	f57f af41 	bpl.w	80099a2 <_dtoa_r+0x3da>
 8009b20:	4688      	mov	r8, r1
 8009b22:	3901      	subs	r1, #1
 8009b24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009b28:	2b30      	cmp	r3, #48	; 0x30
 8009b2a:	d0f9      	beq.n	8009b20 <_dtoa_r+0x558>
 8009b2c:	46bb      	mov	fp, r7
 8009b2e:	e02a      	b.n	8009b86 <_dtoa_r+0x5be>
 8009b30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b34:	e7d6      	b.n	8009ae4 <_dtoa_r+0x51c>
 8009b36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009b3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b4a:	ee15 3a10 	vmov	r3, s10
 8009b4e:	3330      	adds	r3, #48	; 0x30
 8009b50:	f808 3b01 	strb.w	r3, [r8], #1
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	eba8 0303 	sub.w	r3, r8, r3
 8009b5a:	4599      	cmp	r9, r3
 8009b5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b64:	d133      	bne.n	8009bce <_dtoa_r+0x606>
 8009b66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b72:	dc1a      	bgt.n	8009baa <_dtoa_r+0x5e2>
 8009b74:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7c:	d103      	bne.n	8009b86 <_dtoa_r+0x5be>
 8009b7e:	ee15 3a10 	vmov	r3, s10
 8009b82:	07d9      	lsls	r1, r3, #31
 8009b84:	d411      	bmi.n	8009baa <_dtoa_r+0x5e2>
 8009b86:	4629      	mov	r1, r5
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 ff39 	bl	800aa00 <_Bfree>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b92:	f888 3000 	strb.w	r3, [r8]
 8009b96:	f10b 0301 	add.w	r3, fp, #1
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f43f ad61 	beq.w	8009666 <_dtoa_r+0x9e>
 8009ba4:	f8c3 8000 	str.w	r8, [r3]
 8009ba8:	e55d      	b.n	8009666 <_dtoa_r+0x9e>
 8009baa:	465f      	mov	r7, fp
 8009bac:	4643      	mov	r3, r8
 8009bae:	4698      	mov	r8, r3
 8009bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bb4:	2a39      	cmp	r2, #57	; 0x39
 8009bb6:	d106      	bne.n	8009bc6 <_dtoa_r+0x5fe>
 8009bb8:	9a01      	ldr	r2, [sp, #4]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d1f7      	bne.n	8009bae <_dtoa_r+0x5e6>
 8009bbe:	9901      	ldr	r1, [sp, #4]
 8009bc0:	2230      	movs	r2, #48	; 0x30
 8009bc2:	3701      	adds	r7, #1
 8009bc4:	700a      	strb	r2, [r1, #0]
 8009bc6:	781a      	ldrb	r2, [r3, #0]
 8009bc8:	3201      	adds	r2, #1
 8009bca:	701a      	strb	r2, [r3, #0]
 8009bcc:	e7ae      	b.n	8009b2c <_dtoa_r+0x564>
 8009bce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bda:	d1b2      	bne.n	8009b42 <_dtoa_r+0x57a>
 8009bdc:	e7d3      	b.n	8009b86 <_dtoa_r+0x5be>
 8009bde:	bf00      	nop
 8009be0:	0800c238 	.word	0x0800c238
 8009be4:	0800c210 	.word	0x0800c210
 8009be8:	9907      	ldr	r1, [sp, #28]
 8009bea:	2900      	cmp	r1, #0
 8009bec:	f000 80d0 	beq.w	8009d90 <_dtoa_r+0x7c8>
 8009bf0:	9906      	ldr	r1, [sp, #24]
 8009bf2:	2901      	cmp	r1, #1
 8009bf4:	f300 80b4 	bgt.w	8009d60 <_dtoa_r+0x798>
 8009bf8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	f000 80ac 	beq.w	8009d58 <_dtoa_r+0x790>
 8009c00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c08:	461c      	mov	r4, r3
 8009c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	4413      	add	r3, r2
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	2101      	movs	r1, #1
 8009c16:	4413      	add	r3, r2
 8009c18:	4630      	mov	r0, r6
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	f000 fff2 	bl	800ac04 <__i2b>
 8009c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c22:	4607      	mov	r7, r0
 8009c24:	f1b8 0f00 	cmp.w	r8, #0
 8009c28:	dd0d      	ble.n	8009c46 <_dtoa_r+0x67e>
 8009c2a:	9a05      	ldr	r2, [sp, #20]
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	dd0a      	ble.n	8009c46 <_dtoa_r+0x67e>
 8009c30:	4542      	cmp	r2, r8
 8009c32:	9904      	ldr	r1, [sp, #16]
 8009c34:	bfa8      	it	ge
 8009c36:	4642      	movge	r2, r8
 8009c38:	1a89      	subs	r1, r1, r2
 8009c3a:	9104      	str	r1, [sp, #16]
 8009c3c:	9905      	ldr	r1, [sp, #20]
 8009c3e:	eba8 0802 	sub.w	r8, r8, r2
 8009c42:	1a8a      	subs	r2, r1, r2
 8009c44:	9205      	str	r2, [sp, #20]
 8009c46:	b303      	cbz	r3, 8009c8a <_dtoa_r+0x6c2>
 8009c48:	9a07      	ldr	r2, [sp, #28]
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	f000 80a5 	beq.w	8009d9a <_dtoa_r+0x7d2>
 8009c50:	2c00      	cmp	r4, #0
 8009c52:	dd13      	ble.n	8009c7c <_dtoa_r+0x6b4>
 8009c54:	4639      	mov	r1, r7
 8009c56:	4622      	mov	r2, r4
 8009c58:	4630      	mov	r0, r6
 8009c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c5c:	f001 f892 	bl	800ad84 <__pow5mult>
 8009c60:	462a      	mov	r2, r5
 8009c62:	4601      	mov	r1, r0
 8009c64:	4607      	mov	r7, r0
 8009c66:	4630      	mov	r0, r6
 8009c68:	f000 ffe2 	bl	800ac30 <__multiply>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	900a      	str	r0, [sp, #40]	; 0x28
 8009c70:	4630      	mov	r0, r6
 8009c72:	f000 fec5 	bl	800aa00 <_Bfree>
 8009c76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c7a:	4615      	mov	r5, r2
 8009c7c:	1b1a      	subs	r2, r3, r4
 8009c7e:	d004      	beq.n	8009c8a <_dtoa_r+0x6c2>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4630      	mov	r0, r6
 8009c84:	f001 f87e 	bl	800ad84 <__pow5mult>
 8009c88:	4605      	mov	r5, r0
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f000 ffb9 	bl	800ac04 <__i2b>
 8009c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	f340 8081 	ble.w	8009d9e <_dtoa_r+0x7d6>
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f001 f86f 	bl	800ad84 <__pow5mult>
 8009ca6:	9b06      	ldr	r3, [sp, #24]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	4604      	mov	r4, r0
 8009cac:	dd7a      	ble.n	8009da4 <_dtoa_r+0x7dc>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb2:	6922      	ldr	r2, [r4, #16]
 8009cb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009cb8:	6910      	ldr	r0, [r2, #16]
 8009cba:	f000 ff53 	bl	800ab64 <__hi0bits>
 8009cbe:	f1c0 0020 	rsb	r0, r0, #32
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	4418      	add	r0, r3
 8009cc6:	f010 001f 	ands.w	r0, r0, #31
 8009cca:	f000 808c 	beq.w	8009de6 <_dtoa_r+0x81e>
 8009cce:	f1c0 0220 	rsb	r2, r0, #32
 8009cd2:	2a04      	cmp	r2, #4
 8009cd4:	f340 8085 	ble.w	8009de2 <_dtoa_r+0x81a>
 8009cd8:	f1c0 001c 	rsb	r0, r0, #28
 8009cdc:	9b04      	ldr	r3, [sp, #16]
 8009cde:	4403      	add	r3, r0
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	9b05      	ldr	r3, [sp, #20]
 8009ce4:	4403      	add	r3, r0
 8009ce6:	4480      	add	r8, r0
 8009ce8:	9305      	str	r3, [sp, #20]
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd05      	ble.n	8009cfc <_dtoa_r+0x734>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f001 f89f 	bl	800ae38 <__lshift>
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	9b05      	ldr	r3, [sp, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd05      	ble.n	8009d0e <_dtoa_r+0x746>
 8009d02:	4621      	mov	r1, r4
 8009d04:	461a      	mov	r2, r3
 8009d06:	4630      	mov	r0, r6
 8009d08:	f001 f896 	bl	800ae38 <__lshift>
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d06a      	beq.n	8009dea <_dtoa_r+0x822>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f001 f8fe 	bl	800af18 <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	da64      	bge.n	8009dea <_dtoa_r+0x822>
 8009d20:	2300      	movs	r3, #0
 8009d22:	4629      	mov	r1, r5
 8009d24:	220a      	movs	r2, #10
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 fe8c 	bl	800aa44 <__multadd>
 8009d2c:	9b07      	ldr	r3, [sp, #28]
 8009d2e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009d32:	4605      	mov	r5, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8191 	beq.w	800a05c <_dtoa_r+0xa94>
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	220a      	movs	r2, #10
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 fe7f 	bl	800aa44 <__multadd>
 8009d46:	f1ba 0f00 	cmp.w	sl, #0
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	f300 808d 	bgt.w	8009e6a <_dtoa_r+0x8a2>
 8009d50:	9b06      	ldr	r3, [sp, #24]
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	dc50      	bgt.n	8009df8 <_dtoa_r+0x830>
 8009d56:	e088      	b.n	8009e6a <_dtoa_r+0x8a2>
 8009d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d5e:	e751      	b.n	8009c04 <_dtoa_r+0x63c>
 8009d60:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	bfbf      	itttt	lt
 8009d68:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009d6a:	1ae3      	sublt	r3, r4, r3
 8009d6c:	18d2      	addlt	r2, r2, r3
 8009d6e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009d70:	bfb6      	itet	lt
 8009d72:	4623      	movlt	r3, r4
 8009d74:	1b1c      	subge	r4, r3, r4
 8009d76:	2400      	movlt	r4, #0
 8009d78:	f1b9 0f00 	cmp.w	r9, #0
 8009d7c:	bfb5      	itete	lt
 8009d7e:	9a04      	ldrlt	r2, [sp, #16]
 8009d80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009d84:	eba2 0809 	sublt.w	r8, r2, r9
 8009d88:	464a      	movge	r2, r9
 8009d8a:	bfb8      	it	lt
 8009d8c:	2200      	movlt	r2, #0
 8009d8e:	e73c      	b.n	8009c0a <_dtoa_r+0x642>
 8009d90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d94:	9f07      	ldr	r7, [sp, #28]
 8009d96:	461c      	mov	r4, r3
 8009d98:	e744      	b.n	8009c24 <_dtoa_r+0x65c>
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	e770      	b.n	8009c80 <_dtoa_r+0x6b8>
 8009d9e:	9b06      	ldr	r3, [sp, #24]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	dc18      	bgt.n	8009dd6 <_dtoa_r+0x80e>
 8009da4:	9b02      	ldr	r3, [sp, #8]
 8009da6:	b9b3      	cbnz	r3, 8009dd6 <_dtoa_r+0x80e>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009dae:	b9a2      	cbnz	r2, 8009dda <_dtoa_r+0x812>
 8009db0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009db4:	0d12      	lsrs	r2, r2, #20
 8009db6:	0512      	lsls	r2, r2, #20
 8009db8:	b18a      	cbz	r2, 8009dde <_dtoa_r+0x816>
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	9304      	str	r3, [sp, #16]
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	930a      	str	r3, [sp, #40]	; 0x28
 8009dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f47f af70 	bne.w	8009cb2 <_dtoa_r+0x6ea>
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	e775      	b.n	8009cc2 <_dtoa_r+0x6fa>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e7f6      	b.n	8009dc8 <_dtoa_r+0x800>
 8009dda:	9b02      	ldr	r3, [sp, #8]
 8009ddc:	e7f4      	b.n	8009dc8 <_dtoa_r+0x800>
 8009dde:	920a      	str	r2, [sp, #40]	; 0x28
 8009de0:	e7f3      	b.n	8009dca <_dtoa_r+0x802>
 8009de2:	d082      	beq.n	8009cea <_dtoa_r+0x722>
 8009de4:	4610      	mov	r0, r2
 8009de6:	301c      	adds	r0, #28
 8009de8:	e778      	b.n	8009cdc <_dtoa_r+0x714>
 8009dea:	f1b9 0f00 	cmp.w	r9, #0
 8009dee:	dc37      	bgt.n	8009e60 <_dtoa_r+0x898>
 8009df0:	9b06      	ldr	r3, [sp, #24]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	dd34      	ble.n	8009e60 <_dtoa_r+0x898>
 8009df6:	46ca      	mov	sl, r9
 8009df8:	f1ba 0f00 	cmp.w	sl, #0
 8009dfc:	d10d      	bne.n	8009e1a <_dtoa_r+0x852>
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4653      	mov	r3, sl
 8009e02:	2205      	movs	r2, #5
 8009e04:	4630      	mov	r0, r6
 8009e06:	f000 fe1d 	bl	800aa44 <__multadd>
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f001 f882 	bl	800af18 <__mcmp>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	f73f adeb 	bgt.w	80099f0 <_dtoa_r+0x428>
 8009e1a:	9b08      	ldr	r3, [sp, #32]
 8009e1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e20:	ea6f 0b03 	mvn.w	fp, r3
 8009e24:	f04f 0900 	mov.w	r9, #0
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f000 fde8 	bl	800aa00 <_Bfree>
 8009e30:	2f00      	cmp	r7, #0
 8009e32:	f43f aea8 	beq.w	8009b86 <_dtoa_r+0x5be>
 8009e36:	f1b9 0f00 	cmp.w	r9, #0
 8009e3a:	d005      	beq.n	8009e48 <_dtoa_r+0x880>
 8009e3c:	45b9      	cmp	r9, r7
 8009e3e:	d003      	beq.n	8009e48 <_dtoa_r+0x880>
 8009e40:	4649      	mov	r1, r9
 8009e42:	4630      	mov	r0, r6
 8009e44:	f000 fddc 	bl	800aa00 <_Bfree>
 8009e48:	4639      	mov	r1, r7
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 fdd8 	bl	800aa00 <_Bfree>
 8009e50:	e699      	b.n	8009b86 <_dtoa_r+0x5be>
 8009e52:	2400      	movs	r4, #0
 8009e54:	4627      	mov	r7, r4
 8009e56:	e7e0      	b.n	8009e1a <_dtoa_r+0x852>
 8009e58:	46bb      	mov	fp, r7
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	e5c7      	b.n	80099f0 <_dtoa_r+0x428>
 8009e60:	9b07      	ldr	r3, [sp, #28]
 8009e62:	46ca      	mov	sl, r9
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 8100 	beq.w	800a06a <_dtoa_r+0xaa2>
 8009e6a:	f1b8 0f00 	cmp.w	r8, #0
 8009e6e:	dd05      	ble.n	8009e7c <_dtoa_r+0x8b4>
 8009e70:	4639      	mov	r1, r7
 8009e72:	4642      	mov	r2, r8
 8009e74:	4630      	mov	r0, r6
 8009e76:	f000 ffdf 	bl	800ae38 <__lshift>
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d05d      	beq.n	8009f3e <_dtoa_r+0x976>
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4630      	mov	r0, r6
 8009e86:	f000 fd7b 	bl	800a980 <_Balloc>
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	b928      	cbnz	r0, 8009e9a <_dtoa_r+0x8d2>
 8009e8e:	4b82      	ldr	r3, [pc, #520]	; (800a098 <_dtoa_r+0xad0>)
 8009e90:	4602      	mov	r2, r0
 8009e92:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e96:	f7ff bbaf 	b.w	80095f8 <_dtoa_r+0x30>
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	3202      	adds	r2, #2
 8009e9e:	0092      	lsls	r2, r2, #2
 8009ea0:	f107 010c 	add.w	r1, r7, #12
 8009ea4:	300c      	adds	r0, #12
 8009ea6:	f7fd fcac 	bl	8007802 <memcpy>
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4641      	mov	r1, r8
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f000 ffc2 	bl	800ae38 <__lshift>
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	4453      	add	r3, sl
 8009ebe:	9308      	str	r3, [sp, #32]
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	46b9      	mov	r9, r7
 8009ec8:	9307      	str	r3, [sp, #28]
 8009eca:	4607      	mov	r7, r0
 8009ecc:	9b04      	ldr	r3, [sp, #16]
 8009ece:	4621      	mov	r1, r4
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	9302      	str	r3, [sp, #8]
 8009ed6:	f7ff fae9 	bl	80094ac <quorem>
 8009eda:	4603      	mov	r3, r0
 8009edc:	3330      	adds	r3, #48	; 0x30
 8009ede:	9005      	str	r0, [sp, #20]
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee6:	f001 f817 	bl	800af18 <__mcmp>
 8009eea:	463a      	mov	r2, r7
 8009eec:	4682      	mov	sl, r0
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f001 f82d 	bl	800af50 <__mdiff>
 8009ef6:	68c2      	ldr	r2, [r0, #12]
 8009ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efa:	4680      	mov	r8, r0
 8009efc:	bb0a      	cbnz	r2, 8009f42 <_dtoa_r+0x97a>
 8009efe:	4601      	mov	r1, r0
 8009f00:	4628      	mov	r0, r5
 8009f02:	f001 f809 	bl	800af18 <__mcmp>
 8009f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f08:	4602      	mov	r2, r0
 8009f0a:	4641      	mov	r1, r8
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009f12:	f000 fd75 	bl	800aa00 <_Bfree>
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f1e:	ea43 0102 	orr.w	r1, r3, r2
 8009f22:	9b07      	ldr	r3, [sp, #28]
 8009f24:	430b      	orrs	r3, r1
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	d10d      	bne.n	8009f46 <_dtoa_r+0x97e>
 8009f2a:	2b39      	cmp	r3, #57	; 0x39
 8009f2c:	d029      	beq.n	8009f82 <_dtoa_r+0x9ba>
 8009f2e:	f1ba 0f00 	cmp.w	sl, #0
 8009f32:	dd01      	ble.n	8009f38 <_dtoa_r+0x970>
 8009f34:	9b05      	ldr	r3, [sp, #20]
 8009f36:	3331      	adds	r3, #49	; 0x31
 8009f38:	9a02      	ldr	r2, [sp, #8]
 8009f3a:	7013      	strb	r3, [r2, #0]
 8009f3c:	e774      	b.n	8009e28 <_dtoa_r+0x860>
 8009f3e:	4638      	mov	r0, r7
 8009f40:	e7b8      	b.n	8009eb4 <_dtoa_r+0x8ec>
 8009f42:	2201      	movs	r2, #1
 8009f44:	e7e1      	b.n	8009f0a <_dtoa_r+0x942>
 8009f46:	f1ba 0f00 	cmp.w	sl, #0
 8009f4a:	db06      	blt.n	8009f5a <_dtoa_r+0x992>
 8009f4c:	9906      	ldr	r1, [sp, #24]
 8009f4e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009f52:	9907      	ldr	r1, [sp, #28]
 8009f54:	ea5a 0101 	orrs.w	r1, sl, r1
 8009f58:	d120      	bne.n	8009f9c <_dtoa_r+0x9d4>
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	ddec      	ble.n	8009f38 <_dtoa_r+0x970>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	2201      	movs	r2, #1
 8009f62:	4630      	mov	r0, r6
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	f000 ff67 	bl	800ae38 <__lshift>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	f000 ffd3 	bl	800af18 <__mcmp>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	9b04      	ldr	r3, [sp, #16]
 8009f76:	dc02      	bgt.n	8009f7e <_dtoa_r+0x9b6>
 8009f78:	d1de      	bne.n	8009f38 <_dtoa_r+0x970>
 8009f7a:	07da      	lsls	r2, r3, #31
 8009f7c:	d5dc      	bpl.n	8009f38 <_dtoa_r+0x970>
 8009f7e:	2b39      	cmp	r3, #57	; 0x39
 8009f80:	d1d8      	bne.n	8009f34 <_dtoa_r+0x96c>
 8009f82:	9a02      	ldr	r2, [sp, #8]
 8009f84:	2339      	movs	r3, #57	; 0x39
 8009f86:	7013      	strb	r3, [r2, #0]
 8009f88:	4643      	mov	r3, r8
 8009f8a:	4698      	mov	r8, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009f92:	2a39      	cmp	r2, #57	; 0x39
 8009f94:	d051      	beq.n	800a03a <_dtoa_r+0xa72>
 8009f96:	3201      	adds	r2, #1
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	e745      	b.n	8009e28 <_dtoa_r+0x860>
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	dd03      	ble.n	8009fa8 <_dtoa_r+0x9e0>
 8009fa0:	2b39      	cmp	r3, #57	; 0x39
 8009fa2:	d0ee      	beq.n	8009f82 <_dtoa_r+0x9ba>
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	e7c7      	b.n	8009f38 <_dtoa_r+0x970>
 8009fa8:	9a04      	ldr	r2, [sp, #16]
 8009faa:	9908      	ldr	r1, [sp, #32]
 8009fac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009fb0:	428a      	cmp	r2, r1
 8009fb2:	d02b      	beq.n	800a00c <_dtoa_r+0xa44>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	220a      	movs	r2, #10
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f000 fd42 	bl	800aa44 <__multadd>
 8009fc0:	45b9      	cmp	r9, r7
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	f04f 020a 	mov.w	r2, #10
 8009fcc:	4649      	mov	r1, r9
 8009fce:	4630      	mov	r0, r6
 8009fd0:	d107      	bne.n	8009fe2 <_dtoa_r+0xa1a>
 8009fd2:	f000 fd37 	bl	800aa44 <__multadd>
 8009fd6:	4681      	mov	r9, r0
 8009fd8:	4607      	mov	r7, r0
 8009fda:	9b04      	ldr	r3, [sp, #16]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	e774      	b.n	8009ecc <_dtoa_r+0x904>
 8009fe2:	f000 fd2f 	bl	800aa44 <__multadd>
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4681      	mov	r9, r0
 8009fea:	2300      	movs	r3, #0
 8009fec:	220a      	movs	r2, #10
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f000 fd28 	bl	800aa44 <__multadd>
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	e7f0      	b.n	8009fda <_dtoa_r+0xa12>
 8009ff8:	f1ba 0f00 	cmp.w	sl, #0
 8009ffc:	9a01      	ldr	r2, [sp, #4]
 8009ffe:	bfcc      	ite	gt
 800a000:	46d0      	movgt	r8, sl
 800a002:	f04f 0801 	movle.w	r8, #1
 800a006:	4490      	add	r8, r2
 800a008:	f04f 0900 	mov.w	r9, #0
 800a00c:	4629      	mov	r1, r5
 800a00e:	2201      	movs	r2, #1
 800a010:	4630      	mov	r0, r6
 800a012:	9302      	str	r3, [sp, #8]
 800a014:	f000 ff10 	bl	800ae38 <__lshift>
 800a018:	4621      	mov	r1, r4
 800a01a:	4605      	mov	r5, r0
 800a01c:	f000 ff7c 	bl	800af18 <__mcmp>
 800a020:	2800      	cmp	r0, #0
 800a022:	dcb1      	bgt.n	8009f88 <_dtoa_r+0x9c0>
 800a024:	d102      	bne.n	800a02c <_dtoa_r+0xa64>
 800a026:	9b02      	ldr	r3, [sp, #8]
 800a028:	07db      	lsls	r3, r3, #31
 800a02a:	d4ad      	bmi.n	8009f88 <_dtoa_r+0x9c0>
 800a02c:	4643      	mov	r3, r8
 800a02e:	4698      	mov	r8, r3
 800a030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a034:	2a30      	cmp	r2, #48	; 0x30
 800a036:	d0fa      	beq.n	800a02e <_dtoa_r+0xa66>
 800a038:	e6f6      	b.n	8009e28 <_dtoa_r+0x860>
 800a03a:	9a01      	ldr	r2, [sp, #4]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d1a4      	bne.n	8009f8a <_dtoa_r+0x9c2>
 800a040:	f10b 0b01 	add.w	fp, fp, #1
 800a044:	2331      	movs	r3, #49	; 0x31
 800a046:	e778      	b.n	8009f3a <_dtoa_r+0x972>
 800a048:	4b14      	ldr	r3, [pc, #80]	; (800a09c <_dtoa_r+0xad4>)
 800a04a:	f7ff bb27 	b.w	800969c <_dtoa_r+0xd4>
 800a04e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a050:	2b00      	cmp	r3, #0
 800a052:	f47f ab03 	bne.w	800965c <_dtoa_r+0x94>
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <_dtoa_r+0xad8>)
 800a058:	f7ff bb20 	b.w	800969c <_dtoa_r+0xd4>
 800a05c:	f1ba 0f00 	cmp.w	sl, #0
 800a060:	dc03      	bgt.n	800a06a <_dtoa_r+0xaa2>
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	2b02      	cmp	r3, #2
 800a066:	f73f aec7 	bgt.w	8009df8 <_dtoa_r+0x830>
 800a06a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a06e:	4621      	mov	r1, r4
 800a070:	4628      	mov	r0, r5
 800a072:	f7ff fa1b 	bl	80094ac <quorem>
 800a076:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a07a:	f808 3b01 	strb.w	r3, [r8], #1
 800a07e:	9a01      	ldr	r2, [sp, #4]
 800a080:	eba8 0202 	sub.w	r2, r8, r2
 800a084:	4592      	cmp	sl, r2
 800a086:	ddb7      	ble.n	8009ff8 <_dtoa_r+0xa30>
 800a088:	4629      	mov	r1, r5
 800a08a:	2300      	movs	r3, #0
 800a08c:	220a      	movs	r2, #10
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 fcd8 	bl	800aa44 <__multadd>
 800a094:	4605      	mov	r5, r0
 800a096:	e7ea      	b.n	800a06e <_dtoa_r+0xaa6>
 800a098:	0800c128 	.word	0x0800c128
 800a09c:	0800bf2c 	.word	0x0800bf2c
 800a0a0:	0800c0a9 	.word	0x0800c0a9

0800a0a4 <__sflush_r>:
 800a0a4:	898a      	ldrh	r2, [r1, #12]
 800a0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	0710      	lsls	r0, r2, #28
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	d458      	bmi.n	800a164 <__sflush_r+0xc0>
 800a0b2:	684b      	ldr	r3, [r1, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dc05      	bgt.n	800a0c4 <__sflush_r+0x20>
 800a0b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dc02      	bgt.n	800a0c4 <__sflush_r+0x20>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0c6:	2e00      	cmp	r6, #0
 800a0c8:	d0f9      	beq.n	800a0be <__sflush_r+0x1a>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0d0:	682f      	ldr	r7, [r5, #0]
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	d032      	beq.n	800a13c <__sflush_r+0x98>
 800a0d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	075a      	lsls	r2, r3, #29
 800a0dc:	d505      	bpl.n	800a0ea <__sflush_r+0x46>
 800a0de:	6863      	ldr	r3, [r4, #4]
 800a0e0:	1ac0      	subs	r0, r0, r3
 800a0e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0e4:	b10b      	cbz	r3, 800a0ea <__sflush_r+0x46>
 800a0e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e8:	1ac0      	subs	r0, r0, r3
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0f0:	6a21      	ldr	r1, [r4, #32]
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	47b0      	blx	r6
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	d106      	bne.n	800a10a <__sflush_r+0x66>
 800a0fc:	6829      	ldr	r1, [r5, #0]
 800a0fe:	291d      	cmp	r1, #29
 800a100:	d82c      	bhi.n	800a15c <__sflush_r+0xb8>
 800a102:	4a2a      	ldr	r2, [pc, #168]	; (800a1ac <__sflush_r+0x108>)
 800a104:	40ca      	lsrs	r2, r1
 800a106:	07d6      	lsls	r6, r2, #31
 800a108:	d528      	bpl.n	800a15c <__sflush_r+0xb8>
 800a10a:	2200      	movs	r2, #0
 800a10c:	6062      	str	r2, [r4, #4]
 800a10e:	04d9      	lsls	r1, r3, #19
 800a110:	6922      	ldr	r2, [r4, #16]
 800a112:	6022      	str	r2, [r4, #0]
 800a114:	d504      	bpl.n	800a120 <__sflush_r+0x7c>
 800a116:	1c42      	adds	r2, r0, #1
 800a118:	d101      	bne.n	800a11e <__sflush_r+0x7a>
 800a11a:	682b      	ldr	r3, [r5, #0]
 800a11c:	b903      	cbnz	r3, 800a120 <__sflush_r+0x7c>
 800a11e:	6560      	str	r0, [r4, #84]	; 0x54
 800a120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a122:	602f      	str	r7, [r5, #0]
 800a124:	2900      	cmp	r1, #0
 800a126:	d0ca      	beq.n	800a0be <__sflush_r+0x1a>
 800a128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a12c:	4299      	cmp	r1, r3
 800a12e:	d002      	beq.n	800a136 <__sflush_r+0x92>
 800a130:	4628      	mov	r0, r5
 800a132:	f001 f8f9 	bl	800b328 <_free_r>
 800a136:	2000      	movs	r0, #0
 800a138:	6360      	str	r0, [r4, #52]	; 0x34
 800a13a:	e7c1      	b.n	800a0c0 <__sflush_r+0x1c>
 800a13c:	6a21      	ldr	r1, [r4, #32]
 800a13e:	2301      	movs	r3, #1
 800a140:	4628      	mov	r0, r5
 800a142:	47b0      	blx	r6
 800a144:	1c41      	adds	r1, r0, #1
 800a146:	d1c7      	bne.n	800a0d8 <__sflush_r+0x34>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0c4      	beq.n	800a0d8 <__sflush_r+0x34>
 800a14e:	2b1d      	cmp	r3, #29
 800a150:	d001      	beq.n	800a156 <__sflush_r+0xb2>
 800a152:	2b16      	cmp	r3, #22
 800a154:	d101      	bne.n	800a15a <__sflush_r+0xb6>
 800a156:	602f      	str	r7, [r5, #0]
 800a158:	e7b1      	b.n	800a0be <__sflush_r+0x1a>
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	e7ad      	b.n	800a0c0 <__sflush_r+0x1c>
 800a164:	690f      	ldr	r7, [r1, #16]
 800a166:	2f00      	cmp	r7, #0
 800a168:	d0a9      	beq.n	800a0be <__sflush_r+0x1a>
 800a16a:	0793      	lsls	r3, r2, #30
 800a16c:	680e      	ldr	r6, [r1, #0]
 800a16e:	bf08      	it	eq
 800a170:	694b      	ldreq	r3, [r1, #20]
 800a172:	600f      	str	r7, [r1, #0]
 800a174:	bf18      	it	ne
 800a176:	2300      	movne	r3, #0
 800a178:	eba6 0807 	sub.w	r8, r6, r7
 800a17c:	608b      	str	r3, [r1, #8]
 800a17e:	f1b8 0f00 	cmp.w	r8, #0
 800a182:	dd9c      	ble.n	800a0be <__sflush_r+0x1a>
 800a184:	6a21      	ldr	r1, [r4, #32]
 800a186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a188:	4643      	mov	r3, r8
 800a18a:	463a      	mov	r2, r7
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b0      	blx	r6
 800a190:	2800      	cmp	r0, #0
 800a192:	dc06      	bgt.n	800a1a2 <__sflush_r+0xfe>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a0:	e78e      	b.n	800a0c0 <__sflush_r+0x1c>
 800a1a2:	4407      	add	r7, r0
 800a1a4:	eba8 0800 	sub.w	r8, r8, r0
 800a1a8:	e7e9      	b.n	800a17e <__sflush_r+0xda>
 800a1aa:	bf00      	nop
 800a1ac:	20400001 	.word	0x20400001

0800a1b0 <_fflush_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	690b      	ldr	r3, [r1, #16]
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	b913      	cbnz	r3, 800a1c0 <_fflush_r+0x10>
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	4628      	mov	r0, r5
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	b118      	cbz	r0, 800a1ca <_fflush_r+0x1a>
 800a1c2:	6983      	ldr	r3, [r0, #24]
 800a1c4:	b90b      	cbnz	r3, 800a1ca <_fflush_r+0x1a>
 800a1c6:	f7fd fa57 	bl	8007678 <__sinit>
 800a1ca:	4b14      	ldr	r3, [pc, #80]	; (800a21c <_fflush_r+0x6c>)
 800a1cc:	429c      	cmp	r4, r3
 800a1ce:	d11b      	bne.n	800a208 <_fflush_r+0x58>
 800a1d0:	686c      	ldr	r4, [r5, #4]
 800a1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0ef      	beq.n	800a1ba <_fflush_r+0xa>
 800a1da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1dc:	07d0      	lsls	r0, r2, #31
 800a1de:	d404      	bmi.n	800a1ea <_fflush_r+0x3a>
 800a1e0:	0599      	lsls	r1, r3, #22
 800a1e2:	d402      	bmi.n	800a1ea <_fflush_r+0x3a>
 800a1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e6:	f7fd fb0a 	bl	80077fe <__retarget_lock_acquire_recursive>
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f7ff ff59 	bl	800a0a4 <__sflush_r>
 800a1f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1f4:	07da      	lsls	r2, r3, #31
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	d4e0      	bmi.n	800a1bc <_fflush_r+0xc>
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	059b      	lsls	r3, r3, #22
 800a1fe:	d4dd      	bmi.n	800a1bc <_fflush_r+0xc>
 800a200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a202:	f7fd fafd 	bl	8007800 <__retarget_lock_release_recursive>
 800a206:	e7d9      	b.n	800a1bc <_fflush_r+0xc>
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <_fflush_r+0x70>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d101      	bne.n	800a212 <_fflush_r+0x62>
 800a20e:	68ac      	ldr	r4, [r5, #8]
 800a210:	e7df      	b.n	800a1d2 <_fflush_r+0x22>
 800a212:	4b04      	ldr	r3, [pc, #16]	; (800a224 <_fflush_r+0x74>)
 800a214:	429c      	cmp	r4, r3
 800a216:	bf08      	it	eq
 800a218:	68ec      	ldreq	r4, [r5, #12]
 800a21a:	e7da      	b.n	800a1d2 <_fflush_r+0x22>
 800a21c:	0800bed8 	.word	0x0800bed8
 800a220:	0800bef8 	.word	0x0800bef8
 800a224:	0800beb8 	.word	0x0800beb8

0800a228 <rshift>:
 800a228:	6903      	ldr	r3, [r0, #16]
 800a22a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a22e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a232:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a236:	f100 0414 	add.w	r4, r0, #20
 800a23a:	dd45      	ble.n	800a2c8 <rshift+0xa0>
 800a23c:	f011 011f 	ands.w	r1, r1, #31
 800a240:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a244:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a248:	d10c      	bne.n	800a264 <rshift+0x3c>
 800a24a:	f100 0710 	add.w	r7, r0, #16
 800a24e:	4629      	mov	r1, r5
 800a250:	42b1      	cmp	r1, r6
 800a252:	d334      	bcc.n	800a2be <rshift+0x96>
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	1eea      	subs	r2, r5, #3
 800a25a:	4296      	cmp	r6, r2
 800a25c:	bf38      	it	cc
 800a25e:	2300      	movcc	r3, #0
 800a260:	4423      	add	r3, r4
 800a262:	e015      	b.n	800a290 <rshift+0x68>
 800a264:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a268:	f1c1 0820 	rsb	r8, r1, #32
 800a26c:	40cf      	lsrs	r7, r1
 800a26e:	f105 0e04 	add.w	lr, r5, #4
 800a272:	46a1      	mov	r9, r4
 800a274:	4576      	cmp	r6, lr
 800a276:	46f4      	mov	ip, lr
 800a278:	d815      	bhi.n	800a2a6 <rshift+0x7e>
 800a27a:	1a9a      	subs	r2, r3, r2
 800a27c:	0092      	lsls	r2, r2, #2
 800a27e:	3a04      	subs	r2, #4
 800a280:	3501      	adds	r5, #1
 800a282:	42ae      	cmp	r6, r5
 800a284:	bf38      	it	cc
 800a286:	2200      	movcc	r2, #0
 800a288:	18a3      	adds	r3, r4, r2
 800a28a:	50a7      	str	r7, [r4, r2]
 800a28c:	b107      	cbz	r7, 800a290 <rshift+0x68>
 800a28e:	3304      	adds	r3, #4
 800a290:	1b1a      	subs	r2, r3, r4
 800a292:	42a3      	cmp	r3, r4
 800a294:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a298:	bf08      	it	eq
 800a29a:	2300      	moveq	r3, #0
 800a29c:	6102      	str	r2, [r0, #16]
 800a29e:	bf08      	it	eq
 800a2a0:	6143      	streq	r3, [r0, #20]
 800a2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2a6:	f8dc c000 	ldr.w	ip, [ip]
 800a2aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800a2ae:	ea4c 0707 	orr.w	r7, ip, r7
 800a2b2:	f849 7b04 	str.w	r7, [r9], #4
 800a2b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a2ba:	40cf      	lsrs	r7, r1
 800a2bc:	e7da      	b.n	800a274 <rshift+0x4c>
 800a2be:	f851 cb04 	ldr.w	ip, [r1], #4
 800a2c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a2c6:	e7c3      	b.n	800a250 <rshift+0x28>
 800a2c8:	4623      	mov	r3, r4
 800a2ca:	e7e1      	b.n	800a290 <rshift+0x68>

0800a2cc <__hexdig_fun>:
 800a2cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	d802      	bhi.n	800a2da <__hexdig_fun+0xe>
 800a2d4:	3820      	subs	r0, #32
 800a2d6:	b2c0      	uxtb	r0, r0
 800a2d8:	4770      	bx	lr
 800a2da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d801      	bhi.n	800a2e6 <__hexdig_fun+0x1a>
 800a2e2:	3847      	subs	r0, #71	; 0x47
 800a2e4:	e7f7      	b.n	800a2d6 <__hexdig_fun+0xa>
 800a2e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a2ea:	2b05      	cmp	r3, #5
 800a2ec:	d801      	bhi.n	800a2f2 <__hexdig_fun+0x26>
 800a2ee:	3827      	subs	r0, #39	; 0x27
 800a2f0:	e7f1      	b.n	800a2d6 <__hexdig_fun+0xa>
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	4770      	bx	lr
	...

0800a2f8 <__gethex>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	ed2d 8b02 	vpush	{d8}
 800a300:	b089      	sub	sp, #36	; 0x24
 800a302:	ee08 0a10 	vmov	s16, r0
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	4bb4      	ldr	r3, [pc, #720]	; (800a5dc <__gethex+0x2e4>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	4618      	mov	r0, r3
 800a310:	468b      	mov	fp, r1
 800a312:	4690      	mov	r8, r2
 800a314:	f7f5 ff94 	bl	8000240 <strlen>
 800a318:	9b01      	ldr	r3, [sp, #4]
 800a31a:	f8db 2000 	ldr.w	r2, [fp]
 800a31e:	4403      	add	r3, r0
 800a320:	4682      	mov	sl, r0
 800a322:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a326:	9305      	str	r3, [sp, #20]
 800a328:	1c93      	adds	r3, r2, #2
 800a32a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a32e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a332:	32fe      	adds	r2, #254	; 0xfe
 800a334:	18d1      	adds	r1, r2, r3
 800a336:	461f      	mov	r7, r3
 800a338:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a33c:	9100      	str	r1, [sp, #0]
 800a33e:	2830      	cmp	r0, #48	; 0x30
 800a340:	d0f8      	beq.n	800a334 <__gethex+0x3c>
 800a342:	f7ff ffc3 	bl	800a2cc <__hexdig_fun>
 800a346:	4604      	mov	r4, r0
 800a348:	2800      	cmp	r0, #0
 800a34a:	d13a      	bne.n	800a3c2 <__gethex+0xca>
 800a34c:	9901      	ldr	r1, [sp, #4]
 800a34e:	4652      	mov	r2, sl
 800a350:	4638      	mov	r0, r7
 800a352:	f001 f9ad 	bl	800b6b0 <strncmp>
 800a356:	4605      	mov	r5, r0
 800a358:	2800      	cmp	r0, #0
 800a35a:	d168      	bne.n	800a42e <__gethex+0x136>
 800a35c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a360:	eb07 060a 	add.w	r6, r7, sl
 800a364:	f7ff ffb2 	bl	800a2cc <__hexdig_fun>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d062      	beq.n	800a432 <__gethex+0x13a>
 800a36c:	4633      	mov	r3, r6
 800a36e:	7818      	ldrb	r0, [r3, #0]
 800a370:	2830      	cmp	r0, #48	; 0x30
 800a372:	461f      	mov	r7, r3
 800a374:	f103 0301 	add.w	r3, r3, #1
 800a378:	d0f9      	beq.n	800a36e <__gethex+0x76>
 800a37a:	f7ff ffa7 	bl	800a2cc <__hexdig_fun>
 800a37e:	2301      	movs	r3, #1
 800a380:	fab0 f480 	clz	r4, r0
 800a384:	0964      	lsrs	r4, r4, #5
 800a386:	4635      	mov	r5, r6
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	463a      	mov	r2, r7
 800a38c:	4616      	mov	r6, r2
 800a38e:	3201      	adds	r2, #1
 800a390:	7830      	ldrb	r0, [r6, #0]
 800a392:	f7ff ff9b 	bl	800a2cc <__hexdig_fun>
 800a396:	2800      	cmp	r0, #0
 800a398:	d1f8      	bne.n	800a38c <__gethex+0x94>
 800a39a:	9901      	ldr	r1, [sp, #4]
 800a39c:	4652      	mov	r2, sl
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f001 f986 	bl	800b6b0 <strncmp>
 800a3a4:	b980      	cbnz	r0, 800a3c8 <__gethex+0xd0>
 800a3a6:	b94d      	cbnz	r5, 800a3bc <__gethex+0xc4>
 800a3a8:	eb06 050a 	add.w	r5, r6, sl
 800a3ac:	462a      	mov	r2, r5
 800a3ae:	4616      	mov	r6, r2
 800a3b0:	3201      	adds	r2, #1
 800a3b2:	7830      	ldrb	r0, [r6, #0]
 800a3b4:	f7ff ff8a 	bl	800a2cc <__hexdig_fun>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d1f8      	bne.n	800a3ae <__gethex+0xb6>
 800a3bc:	1bad      	subs	r5, r5, r6
 800a3be:	00ad      	lsls	r5, r5, #2
 800a3c0:	e004      	b.n	800a3cc <__gethex+0xd4>
 800a3c2:	2400      	movs	r4, #0
 800a3c4:	4625      	mov	r5, r4
 800a3c6:	e7e0      	b.n	800a38a <__gethex+0x92>
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	d1f7      	bne.n	800a3bc <__gethex+0xc4>
 800a3cc:	7833      	ldrb	r3, [r6, #0]
 800a3ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a3d2:	2b50      	cmp	r3, #80	; 0x50
 800a3d4:	d13b      	bne.n	800a44e <__gethex+0x156>
 800a3d6:	7873      	ldrb	r3, [r6, #1]
 800a3d8:	2b2b      	cmp	r3, #43	; 0x2b
 800a3da:	d02c      	beq.n	800a436 <__gethex+0x13e>
 800a3dc:	2b2d      	cmp	r3, #45	; 0x2d
 800a3de:	d02e      	beq.n	800a43e <__gethex+0x146>
 800a3e0:	1c71      	adds	r1, r6, #1
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	7808      	ldrb	r0, [r1, #0]
 800a3e8:	f7ff ff70 	bl	800a2cc <__hexdig_fun>
 800a3ec:	1e43      	subs	r3, r0, #1
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b18      	cmp	r3, #24
 800a3f2:	d82c      	bhi.n	800a44e <__gethex+0x156>
 800a3f4:	f1a0 0210 	sub.w	r2, r0, #16
 800a3f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3fc:	f7ff ff66 	bl	800a2cc <__hexdig_fun>
 800a400:	1e43      	subs	r3, r0, #1
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b18      	cmp	r3, #24
 800a406:	d91d      	bls.n	800a444 <__gethex+0x14c>
 800a408:	f1b9 0f00 	cmp.w	r9, #0
 800a40c:	d000      	beq.n	800a410 <__gethex+0x118>
 800a40e:	4252      	negs	r2, r2
 800a410:	4415      	add	r5, r2
 800a412:	f8cb 1000 	str.w	r1, [fp]
 800a416:	b1e4      	cbz	r4, 800a452 <__gethex+0x15a>
 800a418:	9b00      	ldr	r3, [sp, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2700      	movne	r7, #0
 800a420:	2706      	moveq	r7, #6
 800a422:	4638      	mov	r0, r7
 800a424:	b009      	add	sp, #36	; 0x24
 800a426:	ecbd 8b02 	vpop	{d8}
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	463e      	mov	r6, r7
 800a430:	4625      	mov	r5, r4
 800a432:	2401      	movs	r4, #1
 800a434:	e7ca      	b.n	800a3cc <__gethex+0xd4>
 800a436:	f04f 0900 	mov.w	r9, #0
 800a43a:	1cb1      	adds	r1, r6, #2
 800a43c:	e7d3      	b.n	800a3e6 <__gethex+0xee>
 800a43e:	f04f 0901 	mov.w	r9, #1
 800a442:	e7fa      	b.n	800a43a <__gethex+0x142>
 800a444:	230a      	movs	r3, #10
 800a446:	fb03 0202 	mla	r2, r3, r2, r0
 800a44a:	3a10      	subs	r2, #16
 800a44c:	e7d4      	b.n	800a3f8 <__gethex+0x100>
 800a44e:	4631      	mov	r1, r6
 800a450:	e7df      	b.n	800a412 <__gethex+0x11a>
 800a452:	1bf3      	subs	r3, r6, r7
 800a454:	3b01      	subs	r3, #1
 800a456:	4621      	mov	r1, r4
 800a458:	2b07      	cmp	r3, #7
 800a45a:	dc0b      	bgt.n	800a474 <__gethex+0x17c>
 800a45c:	ee18 0a10 	vmov	r0, s16
 800a460:	f000 fa8e 	bl	800a980 <_Balloc>
 800a464:	4604      	mov	r4, r0
 800a466:	b940      	cbnz	r0, 800a47a <__gethex+0x182>
 800a468:	4b5d      	ldr	r3, [pc, #372]	; (800a5e0 <__gethex+0x2e8>)
 800a46a:	4602      	mov	r2, r0
 800a46c:	21de      	movs	r1, #222	; 0xde
 800a46e:	485d      	ldr	r0, [pc, #372]	; (800a5e4 <__gethex+0x2ec>)
 800a470:	f001 f940 	bl	800b6f4 <__assert_func>
 800a474:	3101      	adds	r1, #1
 800a476:	105b      	asrs	r3, r3, #1
 800a478:	e7ee      	b.n	800a458 <__gethex+0x160>
 800a47a:	f100 0914 	add.w	r9, r0, #20
 800a47e:	f04f 0b00 	mov.w	fp, #0
 800a482:	f1ca 0301 	rsb	r3, sl, #1
 800a486:	f8cd 9008 	str.w	r9, [sp, #8]
 800a48a:	f8cd b000 	str.w	fp, [sp]
 800a48e:	9306      	str	r3, [sp, #24]
 800a490:	42b7      	cmp	r7, r6
 800a492:	d340      	bcc.n	800a516 <__gethex+0x21e>
 800a494:	9802      	ldr	r0, [sp, #8]
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	f840 3b04 	str.w	r3, [r0], #4
 800a49c:	eba0 0009 	sub.w	r0, r0, r9
 800a4a0:	1080      	asrs	r0, r0, #2
 800a4a2:	0146      	lsls	r6, r0, #5
 800a4a4:	6120      	str	r0, [r4, #16]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 fb5c 	bl	800ab64 <__hi0bits>
 800a4ac:	1a30      	subs	r0, r6, r0
 800a4ae:	f8d8 6000 	ldr.w	r6, [r8]
 800a4b2:	42b0      	cmp	r0, r6
 800a4b4:	dd63      	ble.n	800a57e <__gethex+0x286>
 800a4b6:	1b87      	subs	r7, r0, r6
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 fefd 	bl	800b2ba <__any_on>
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	b1a8      	cbz	r0, 800a4f0 <__gethex+0x1f8>
 800a4c4:	1e7b      	subs	r3, r7, #1
 800a4c6:	1159      	asrs	r1, r3, #5
 800a4c8:	f003 021f 	and.w	r2, r3, #31
 800a4cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a4d0:	f04f 0a01 	mov.w	sl, #1
 800a4d4:	fa0a f202 	lsl.w	r2, sl, r2
 800a4d8:	420a      	tst	r2, r1
 800a4da:	d009      	beq.n	800a4f0 <__gethex+0x1f8>
 800a4dc:	4553      	cmp	r3, sl
 800a4de:	dd05      	ble.n	800a4ec <__gethex+0x1f4>
 800a4e0:	1eb9      	subs	r1, r7, #2
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fee9 	bl	800b2ba <__any_on>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d145      	bne.n	800a578 <__gethex+0x280>
 800a4ec:	f04f 0a02 	mov.w	sl, #2
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7ff fe98 	bl	800a228 <rshift>
 800a4f8:	443d      	add	r5, r7
 800a4fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4fe:	42ab      	cmp	r3, r5
 800a500:	da4c      	bge.n	800a59c <__gethex+0x2a4>
 800a502:	ee18 0a10 	vmov	r0, s16
 800a506:	4621      	mov	r1, r4
 800a508:	f000 fa7a 	bl	800aa00 <_Bfree>
 800a50c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a50e:	2300      	movs	r3, #0
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	27a3      	movs	r7, #163	; 0xa3
 800a514:	e785      	b.n	800a422 <__gethex+0x12a>
 800a516:	1e73      	subs	r3, r6, #1
 800a518:	9a05      	ldr	r2, [sp, #20]
 800a51a:	9303      	str	r3, [sp, #12]
 800a51c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a520:	4293      	cmp	r3, r2
 800a522:	d019      	beq.n	800a558 <__gethex+0x260>
 800a524:	f1bb 0f20 	cmp.w	fp, #32
 800a528:	d107      	bne.n	800a53a <__gethex+0x242>
 800a52a:	9b02      	ldr	r3, [sp, #8]
 800a52c:	9a00      	ldr	r2, [sp, #0]
 800a52e:	f843 2b04 	str.w	r2, [r3], #4
 800a532:	9302      	str	r3, [sp, #8]
 800a534:	2300      	movs	r3, #0
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	469b      	mov	fp, r3
 800a53a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a53e:	f7ff fec5 	bl	800a2cc <__hexdig_fun>
 800a542:	9b00      	ldr	r3, [sp, #0]
 800a544:	f000 000f 	and.w	r0, r0, #15
 800a548:	fa00 f00b 	lsl.w	r0, r0, fp
 800a54c:	4303      	orrs	r3, r0
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	f10b 0b04 	add.w	fp, fp, #4
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	e00d      	b.n	800a574 <__gethex+0x27c>
 800a558:	9b03      	ldr	r3, [sp, #12]
 800a55a:	9a06      	ldr	r2, [sp, #24]
 800a55c:	4413      	add	r3, r2
 800a55e:	42bb      	cmp	r3, r7
 800a560:	d3e0      	bcc.n	800a524 <__gethex+0x22c>
 800a562:	4618      	mov	r0, r3
 800a564:	9901      	ldr	r1, [sp, #4]
 800a566:	9307      	str	r3, [sp, #28]
 800a568:	4652      	mov	r2, sl
 800a56a:	f001 f8a1 	bl	800b6b0 <strncmp>
 800a56e:	9b07      	ldr	r3, [sp, #28]
 800a570:	2800      	cmp	r0, #0
 800a572:	d1d7      	bne.n	800a524 <__gethex+0x22c>
 800a574:	461e      	mov	r6, r3
 800a576:	e78b      	b.n	800a490 <__gethex+0x198>
 800a578:	f04f 0a03 	mov.w	sl, #3
 800a57c:	e7b8      	b.n	800a4f0 <__gethex+0x1f8>
 800a57e:	da0a      	bge.n	800a596 <__gethex+0x29e>
 800a580:	1a37      	subs	r7, r6, r0
 800a582:	4621      	mov	r1, r4
 800a584:	ee18 0a10 	vmov	r0, s16
 800a588:	463a      	mov	r2, r7
 800a58a:	f000 fc55 	bl	800ae38 <__lshift>
 800a58e:	1bed      	subs	r5, r5, r7
 800a590:	4604      	mov	r4, r0
 800a592:	f100 0914 	add.w	r9, r0, #20
 800a596:	f04f 0a00 	mov.w	sl, #0
 800a59a:	e7ae      	b.n	800a4fa <__gethex+0x202>
 800a59c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a5a0:	42a8      	cmp	r0, r5
 800a5a2:	dd72      	ble.n	800a68a <__gethex+0x392>
 800a5a4:	1b45      	subs	r5, r0, r5
 800a5a6:	42ae      	cmp	r6, r5
 800a5a8:	dc36      	bgt.n	800a618 <__gethex+0x320>
 800a5aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d02a      	beq.n	800a608 <__gethex+0x310>
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d02c      	beq.n	800a610 <__gethex+0x318>
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d11c      	bne.n	800a5f4 <__gethex+0x2fc>
 800a5ba:	42ae      	cmp	r6, r5
 800a5bc:	d11a      	bne.n	800a5f4 <__gethex+0x2fc>
 800a5be:	2e01      	cmp	r6, #1
 800a5c0:	d112      	bne.n	800a5e8 <__gethex+0x2f0>
 800a5c2:	9a04      	ldr	r2, [sp, #16]
 800a5c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	f8c9 3000 	str.w	r3, [r9]
 800a5d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5d4:	2762      	movs	r7, #98	; 0x62
 800a5d6:	601c      	str	r4, [r3, #0]
 800a5d8:	e723      	b.n	800a422 <__gethex+0x12a>
 800a5da:	bf00      	nop
 800a5dc:	0800c1a0 	.word	0x0800c1a0
 800a5e0:	0800c128 	.word	0x0800c128
 800a5e4:	0800c139 	.word	0x0800c139
 800a5e8:	1e71      	subs	r1, r6, #1
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fe65 	bl	800b2ba <__any_on>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d1e6      	bne.n	800a5c2 <__gethex+0x2ca>
 800a5f4:	ee18 0a10 	vmov	r0, s16
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	f000 fa01 	bl	800aa00 <_Bfree>
 800a5fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a600:	2300      	movs	r3, #0
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	2750      	movs	r7, #80	; 0x50
 800a606:	e70c      	b.n	800a422 <__gethex+0x12a>
 800a608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1f2      	bne.n	800a5f4 <__gethex+0x2fc>
 800a60e:	e7d8      	b.n	800a5c2 <__gethex+0x2ca>
 800a610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1d5      	bne.n	800a5c2 <__gethex+0x2ca>
 800a616:	e7ed      	b.n	800a5f4 <__gethex+0x2fc>
 800a618:	1e6f      	subs	r7, r5, #1
 800a61a:	f1ba 0f00 	cmp.w	sl, #0
 800a61e:	d131      	bne.n	800a684 <__gethex+0x38c>
 800a620:	b127      	cbz	r7, 800a62c <__gethex+0x334>
 800a622:	4639      	mov	r1, r7
 800a624:	4620      	mov	r0, r4
 800a626:	f000 fe48 	bl	800b2ba <__any_on>
 800a62a:	4682      	mov	sl, r0
 800a62c:	117b      	asrs	r3, r7, #5
 800a62e:	2101      	movs	r1, #1
 800a630:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a634:	f007 071f 	and.w	r7, r7, #31
 800a638:	fa01 f707 	lsl.w	r7, r1, r7
 800a63c:	421f      	tst	r7, r3
 800a63e:	4629      	mov	r1, r5
 800a640:	4620      	mov	r0, r4
 800a642:	bf18      	it	ne
 800a644:	f04a 0a02 	orrne.w	sl, sl, #2
 800a648:	1b76      	subs	r6, r6, r5
 800a64a:	f7ff fded 	bl	800a228 <rshift>
 800a64e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a652:	2702      	movs	r7, #2
 800a654:	f1ba 0f00 	cmp.w	sl, #0
 800a658:	d048      	beq.n	800a6ec <__gethex+0x3f4>
 800a65a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d015      	beq.n	800a68e <__gethex+0x396>
 800a662:	2b03      	cmp	r3, #3
 800a664:	d017      	beq.n	800a696 <__gethex+0x39e>
 800a666:	2b01      	cmp	r3, #1
 800a668:	d109      	bne.n	800a67e <__gethex+0x386>
 800a66a:	f01a 0f02 	tst.w	sl, #2
 800a66e:	d006      	beq.n	800a67e <__gethex+0x386>
 800a670:	f8d9 0000 	ldr.w	r0, [r9]
 800a674:	ea4a 0a00 	orr.w	sl, sl, r0
 800a678:	f01a 0f01 	tst.w	sl, #1
 800a67c:	d10e      	bne.n	800a69c <__gethex+0x3a4>
 800a67e:	f047 0710 	orr.w	r7, r7, #16
 800a682:	e033      	b.n	800a6ec <__gethex+0x3f4>
 800a684:	f04f 0a01 	mov.w	sl, #1
 800a688:	e7d0      	b.n	800a62c <__gethex+0x334>
 800a68a:	2701      	movs	r7, #1
 800a68c:	e7e2      	b.n	800a654 <__gethex+0x35c>
 800a68e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a690:	f1c3 0301 	rsb	r3, r3, #1
 800a694:	9315      	str	r3, [sp, #84]	; 0x54
 800a696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0f0      	beq.n	800a67e <__gethex+0x386>
 800a69c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6a0:	f104 0314 	add.w	r3, r4, #20
 800a6a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6ac:	f04f 0c00 	mov.w	ip, #0
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a6ba:	d01c      	beq.n	800a6f6 <__gethex+0x3fe>
 800a6bc:	3201      	adds	r2, #1
 800a6be:	6002      	str	r2, [r0, #0]
 800a6c0:	2f02      	cmp	r7, #2
 800a6c2:	f104 0314 	add.w	r3, r4, #20
 800a6c6:	d13f      	bne.n	800a748 <__gethex+0x450>
 800a6c8:	f8d8 2000 	ldr.w	r2, [r8]
 800a6cc:	3a01      	subs	r2, #1
 800a6ce:	42b2      	cmp	r2, r6
 800a6d0:	d10a      	bne.n	800a6e8 <__gethex+0x3f0>
 800a6d2:	1171      	asrs	r1, r6, #5
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6da:	f006 061f 	and.w	r6, r6, #31
 800a6de:	fa02 f606 	lsl.w	r6, r2, r6
 800a6e2:	421e      	tst	r6, r3
 800a6e4:	bf18      	it	ne
 800a6e6:	4617      	movne	r7, r2
 800a6e8:	f047 0720 	orr.w	r7, r7, #32
 800a6ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6ee:	601c      	str	r4, [r3, #0]
 800a6f0:	9b04      	ldr	r3, [sp, #16]
 800a6f2:	601d      	str	r5, [r3, #0]
 800a6f4:	e695      	b.n	800a422 <__gethex+0x12a>
 800a6f6:	4299      	cmp	r1, r3
 800a6f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a6fc:	d8d8      	bhi.n	800a6b0 <__gethex+0x3b8>
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	459b      	cmp	fp, r3
 800a702:	db19      	blt.n	800a738 <__gethex+0x440>
 800a704:	6861      	ldr	r1, [r4, #4]
 800a706:	ee18 0a10 	vmov	r0, s16
 800a70a:	3101      	adds	r1, #1
 800a70c:	f000 f938 	bl	800a980 <_Balloc>
 800a710:	4681      	mov	r9, r0
 800a712:	b918      	cbnz	r0, 800a71c <__gethex+0x424>
 800a714:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <__gethex+0x488>)
 800a716:	4602      	mov	r2, r0
 800a718:	2184      	movs	r1, #132	; 0x84
 800a71a:	e6a8      	b.n	800a46e <__gethex+0x176>
 800a71c:	6922      	ldr	r2, [r4, #16]
 800a71e:	3202      	adds	r2, #2
 800a720:	f104 010c 	add.w	r1, r4, #12
 800a724:	0092      	lsls	r2, r2, #2
 800a726:	300c      	adds	r0, #12
 800a728:	f7fd f86b 	bl	8007802 <memcpy>
 800a72c:	4621      	mov	r1, r4
 800a72e:	ee18 0a10 	vmov	r0, s16
 800a732:	f000 f965 	bl	800aa00 <_Bfree>
 800a736:	464c      	mov	r4, r9
 800a738:	6923      	ldr	r3, [r4, #16]
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a740:	6122      	str	r2, [r4, #16]
 800a742:	2201      	movs	r2, #1
 800a744:	615a      	str	r2, [r3, #20]
 800a746:	e7bb      	b.n	800a6c0 <__gethex+0x3c8>
 800a748:	6922      	ldr	r2, [r4, #16]
 800a74a:	455a      	cmp	r2, fp
 800a74c:	dd0b      	ble.n	800a766 <__gethex+0x46e>
 800a74e:	2101      	movs	r1, #1
 800a750:	4620      	mov	r0, r4
 800a752:	f7ff fd69 	bl	800a228 <rshift>
 800a756:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a75a:	3501      	adds	r5, #1
 800a75c:	42ab      	cmp	r3, r5
 800a75e:	f6ff aed0 	blt.w	800a502 <__gethex+0x20a>
 800a762:	2701      	movs	r7, #1
 800a764:	e7c0      	b.n	800a6e8 <__gethex+0x3f0>
 800a766:	f016 061f 	ands.w	r6, r6, #31
 800a76a:	d0fa      	beq.n	800a762 <__gethex+0x46a>
 800a76c:	4453      	add	r3, sl
 800a76e:	f1c6 0620 	rsb	r6, r6, #32
 800a772:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a776:	f000 f9f5 	bl	800ab64 <__hi0bits>
 800a77a:	42b0      	cmp	r0, r6
 800a77c:	dbe7      	blt.n	800a74e <__gethex+0x456>
 800a77e:	e7f0      	b.n	800a762 <__gethex+0x46a>
 800a780:	0800c128 	.word	0x0800c128

0800a784 <L_shift>:
 800a784:	f1c2 0208 	rsb	r2, r2, #8
 800a788:	0092      	lsls	r2, r2, #2
 800a78a:	b570      	push	{r4, r5, r6, lr}
 800a78c:	f1c2 0620 	rsb	r6, r2, #32
 800a790:	6843      	ldr	r3, [r0, #4]
 800a792:	6804      	ldr	r4, [r0, #0]
 800a794:	fa03 f506 	lsl.w	r5, r3, r6
 800a798:	432c      	orrs	r4, r5
 800a79a:	40d3      	lsrs	r3, r2
 800a79c:	6004      	str	r4, [r0, #0]
 800a79e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7a2:	4288      	cmp	r0, r1
 800a7a4:	d3f4      	bcc.n	800a790 <L_shift+0xc>
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}

0800a7a8 <__match>:
 800a7a8:	b530      	push	{r4, r5, lr}
 800a7aa:	6803      	ldr	r3, [r0, #0]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b2:	b914      	cbnz	r4, 800a7ba <__match+0x12>
 800a7b4:	6003      	str	r3, [r0, #0]
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	bd30      	pop	{r4, r5, pc}
 800a7ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a7c2:	2d19      	cmp	r5, #25
 800a7c4:	bf98      	it	ls
 800a7c6:	3220      	addls	r2, #32
 800a7c8:	42a2      	cmp	r2, r4
 800a7ca:	d0f0      	beq.n	800a7ae <__match+0x6>
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	e7f3      	b.n	800a7b8 <__match+0x10>

0800a7d0 <__hexnan>:
 800a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	680b      	ldr	r3, [r1, #0]
 800a7d6:	115e      	asrs	r6, r3, #5
 800a7d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7dc:	f013 031f 	ands.w	r3, r3, #31
 800a7e0:	b087      	sub	sp, #28
 800a7e2:	bf18      	it	ne
 800a7e4:	3604      	addne	r6, #4
 800a7e6:	2500      	movs	r5, #0
 800a7e8:	1f37      	subs	r7, r6, #4
 800a7ea:	4690      	mov	r8, r2
 800a7ec:	6802      	ldr	r2, [r0, #0]
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	4682      	mov	sl, r0
 800a7f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a7f6:	46b9      	mov	r9, r7
 800a7f8:	463c      	mov	r4, r7
 800a7fa:	9502      	str	r5, [sp, #8]
 800a7fc:	46ab      	mov	fp, r5
 800a7fe:	7851      	ldrb	r1, [r2, #1]
 800a800:	1c53      	adds	r3, r2, #1
 800a802:	9303      	str	r3, [sp, #12]
 800a804:	b341      	cbz	r1, 800a858 <__hexnan+0x88>
 800a806:	4608      	mov	r0, r1
 800a808:	9205      	str	r2, [sp, #20]
 800a80a:	9104      	str	r1, [sp, #16]
 800a80c:	f7ff fd5e 	bl	800a2cc <__hexdig_fun>
 800a810:	2800      	cmp	r0, #0
 800a812:	d14f      	bne.n	800a8b4 <__hexnan+0xe4>
 800a814:	9904      	ldr	r1, [sp, #16]
 800a816:	9a05      	ldr	r2, [sp, #20]
 800a818:	2920      	cmp	r1, #32
 800a81a:	d818      	bhi.n	800a84e <__hexnan+0x7e>
 800a81c:	9b02      	ldr	r3, [sp, #8]
 800a81e:	459b      	cmp	fp, r3
 800a820:	dd13      	ble.n	800a84a <__hexnan+0x7a>
 800a822:	454c      	cmp	r4, r9
 800a824:	d206      	bcs.n	800a834 <__hexnan+0x64>
 800a826:	2d07      	cmp	r5, #7
 800a828:	dc04      	bgt.n	800a834 <__hexnan+0x64>
 800a82a:	462a      	mov	r2, r5
 800a82c:	4649      	mov	r1, r9
 800a82e:	4620      	mov	r0, r4
 800a830:	f7ff ffa8 	bl	800a784 <L_shift>
 800a834:	4544      	cmp	r4, r8
 800a836:	d950      	bls.n	800a8da <__hexnan+0x10a>
 800a838:	2300      	movs	r3, #0
 800a83a:	f1a4 0904 	sub.w	r9, r4, #4
 800a83e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a842:	f8cd b008 	str.w	fp, [sp, #8]
 800a846:	464c      	mov	r4, r9
 800a848:	461d      	mov	r5, r3
 800a84a:	9a03      	ldr	r2, [sp, #12]
 800a84c:	e7d7      	b.n	800a7fe <__hexnan+0x2e>
 800a84e:	2929      	cmp	r1, #41	; 0x29
 800a850:	d156      	bne.n	800a900 <__hexnan+0x130>
 800a852:	3202      	adds	r2, #2
 800a854:	f8ca 2000 	str.w	r2, [sl]
 800a858:	f1bb 0f00 	cmp.w	fp, #0
 800a85c:	d050      	beq.n	800a900 <__hexnan+0x130>
 800a85e:	454c      	cmp	r4, r9
 800a860:	d206      	bcs.n	800a870 <__hexnan+0xa0>
 800a862:	2d07      	cmp	r5, #7
 800a864:	dc04      	bgt.n	800a870 <__hexnan+0xa0>
 800a866:	462a      	mov	r2, r5
 800a868:	4649      	mov	r1, r9
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7ff ff8a 	bl	800a784 <L_shift>
 800a870:	4544      	cmp	r4, r8
 800a872:	d934      	bls.n	800a8de <__hexnan+0x10e>
 800a874:	f1a8 0204 	sub.w	r2, r8, #4
 800a878:	4623      	mov	r3, r4
 800a87a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a87e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a882:	429f      	cmp	r7, r3
 800a884:	d2f9      	bcs.n	800a87a <__hexnan+0xaa>
 800a886:	1b3b      	subs	r3, r7, r4
 800a888:	f023 0303 	bic.w	r3, r3, #3
 800a88c:	3304      	adds	r3, #4
 800a88e:	3401      	adds	r4, #1
 800a890:	3e03      	subs	r6, #3
 800a892:	42b4      	cmp	r4, r6
 800a894:	bf88      	it	hi
 800a896:	2304      	movhi	r3, #4
 800a898:	4443      	add	r3, r8
 800a89a:	2200      	movs	r2, #0
 800a89c:	f843 2b04 	str.w	r2, [r3], #4
 800a8a0:	429f      	cmp	r7, r3
 800a8a2:	d2fb      	bcs.n	800a89c <__hexnan+0xcc>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	b91b      	cbnz	r3, 800a8b0 <__hexnan+0xe0>
 800a8a8:	4547      	cmp	r7, r8
 800a8aa:	d127      	bne.n	800a8fc <__hexnan+0x12c>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	2005      	movs	r0, #5
 800a8b2:	e026      	b.n	800a902 <__hexnan+0x132>
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	2d08      	cmp	r5, #8
 800a8b8:	f10b 0b01 	add.w	fp, fp, #1
 800a8bc:	dd06      	ble.n	800a8cc <__hexnan+0xfc>
 800a8be:	4544      	cmp	r4, r8
 800a8c0:	d9c3      	bls.n	800a84a <__hexnan+0x7a>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8c8:	2501      	movs	r5, #1
 800a8ca:	3c04      	subs	r4, #4
 800a8cc:	6822      	ldr	r2, [r4, #0]
 800a8ce:	f000 000f 	and.w	r0, r0, #15
 800a8d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a8d6:	6022      	str	r2, [r4, #0]
 800a8d8:	e7b7      	b.n	800a84a <__hexnan+0x7a>
 800a8da:	2508      	movs	r5, #8
 800a8dc:	e7b5      	b.n	800a84a <__hexnan+0x7a>
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0df      	beq.n	800a8a4 <__hexnan+0xd4>
 800a8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8e8:	f1c3 0320 	rsb	r3, r3, #32
 800a8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8f4:	401a      	ands	r2, r3
 800a8f6:	f846 2c04 	str.w	r2, [r6, #-4]
 800a8fa:	e7d3      	b.n	800a8a4 <__hexnan+0xd4>
 800a8fc:	3f04      	subs	r7, #4
 800a8fe:	e7d1      	b.n	800a8a4 <__hexnan+0xd4>
 800a900:	2004      	movs	r0, #4
 800a902:	b007      	add	sp, #28
 800a904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a908 <_localeconv_r>:
 800a908:	4800      	ldr	r0, [pc, #0]	; (800a90c <_localeconv_r+0x4>)
 800a90a:	4770      	bx	lr
 800a90c:	20000168 	.word	0x20000168

0800a910 <_lseek_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	; (800a930 <_lseek_r+0x20>)
 800a914:	4604      	mov	r4, r0
 800a916:	4608      	mov	r0, r1
 800a918:	4611      	mov	r1, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	f7f6 fe48 	bl	80015b4 <_lseek>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_lseek_r+0x1e>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_lseek_r+0x1e>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	20004d84 	.word	0x20004d84

0800a934 <malloc>:
 800a934:	4b02      	ldr	r3, [pc, #8]	; (800a940 <malloc+0xc>)
 800a936:	4601      	mov	r1, r0
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	f7fc bf99 	b.w	8007870 <_malloc_r>
 800a93e:	bf00      	nop
 800a940:	20000010 	.word	0x20000010

0800a944 <__ascii_mbtowc>:
 800a944:	b082      	sub	sp, #8
 800a946:	b901      	cbnz	r1, 800a94a <__ascii_mbtowc+0x6>
 800a948:	a901      	add	r1, sp, #4
 800a94a:	b142      	cbz	r2, 800a95e <__ascii_mbtowc+0x1a>
 800a94c:	b14b      	cbz	r3, 800a962 <__ascii_mbtowc+0x1e>
 800a94e:	7813      	ldrb	r3, [r2, #0]
 800a950:	600b      	str	r3, [r1, #0]
 800a952:	7812      	ldrb	r2, [r2, #0]
 800a954:	1e10      	subs	r0, r2, #0
 800a956:	bf18      	it	ne
 800a958:	2001      	movne	r0, #1
 800a95a:	b002      	add	sp, #8
 800a95c:	4770      	bx	lr
 800a95e:	4610      	mov	r0, r2
 800a960:	e7fb      	b.n	800a95a <__ascii_mbtowc+0x16>
 800a962:	f06f 0001 	mvn.w	r0, #1
 800a966:	e7f8      	b.n	800a95a <__ascii_mbtowc+0x16>

0800a968 <__malloc_lock>:
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__malloc_lock+0x8>)
 800a96a:	f7fc bf48 	b.w	80077fe <__retarget_lock_acquire_recursive>
 800a96e:	bf00      	nop
 800a970:	20004d78 	.word	0x20004d78

0800a974 <__malloc_unlock>:
 800a974:	4801      	ldr	r0, [pc, #4]	; (800a97c <__malloc_unlock+0x8>)
 800a976:	f7fc bf43 	b.w	8007800 <__retarget_lock_release_recursive>
 800a97a:	bf00      	nop
 800a97c:	20004d78 	.word	0x20004d78

0800a980 <_Balloc>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	b976      	cbnz	r6, 800a9a8 <_Balloc+0x28>
 800a98a:	2010      	movs	r0, #16
 800a98c:	f7ff ffd2 	bl	800a934 <malloc>
 800a990:	4602      	mov	r2, r0
 800a992:	6260      	str	r0, [r4, #36]	; 0x24
 800a994:	b920      	cbnz	r0, 800a9a0 <_Balloc+0x20>
 800a996:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <_Balloc+0x78>)
 800a998:	4818      	ldr	r0, [pc, #96]	; (800a9fc <_Balloc+0x7c>)
 800a99a:	2166      	movs	r1, #102	; 0x66
 800a99c:	f000 feaa 	bl	800b6f4 <__assert_func>
 800a9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9a4:	6006      	str	r6, [r0, #0]
 800a9a6:	60c6      	str	r6, [r0, #12]
 800a9a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9aa:	68f3      	ldr	r3, [r6, #12]
 800a9ac:	b183      	cbz	r3, 800a9d0 <_Balloc+0x50>
 800a9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9b6:	b9b8      	cbnz	r0, 800a9e8 <_Balloc+0x68>
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a9be:	1d72      	adds	r2, r6, #5
 800a9c0:	0092      	lsls	r2, r2, #2
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fc9a 	bl	800b2fc <_calloc_r>
 800a9c8:	b160      	cbz	r0, 800a9e4 <_Balloc+0x64>
 800a9ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9ce:	e00e      	b.n	800a9ee <_Balloc+0x6e>
 800a9d0:	2221      	movs	r2, #33	; 0x21
 800a9d2:	2104      	movs	r1, #4
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 fc91 	bl	800b2fc <_calloc_r>
 800a9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9dc:	60f0      	str	r0, [r6, #12]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e4      	bne.n	800a9ae <_Balloc+0x2e>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	6802      	ldr	r2, [r0, #0]
 800a9ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9f4:	e7f7      	b.n	800a9e6 <_Balloc+0x66>
 800a9f6:	bf00      	nop
 800a9f8:	0800c0b6 	.word	0x0800c0b6
 800a9fc:	0800c1b4 	.word	0x0800c1b4

0800aa00 <_Bfree>:
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa04:	4605      	mov	r5, r0
 800aa06:	460c      	mov	r4, r1
 800aa08:	b976      	cbnz	r6, 800aa28 <_Bfree+0x28>
 800aa0a:	2010      	movs	r0, #16
 800aa0c:	f7ff ff92 	bl	800a934 <malloc>
 800aa10:	4602      	mov	r2, r0
 800aa12:	6268      	str	r0, [r5, #36]	; 0x24
 800aa14:	b920      	cbnz	r0, 800aa20 <_Bfree+0x20>
 800aa16:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <_Bfree+0x3c>)
 800aa18:	4809      	ldr	r0, [pc, #36]	; (800aa40 <_Bfree+0x40>)
 800aa1a:	218a      	movs	r1, #138	; 0x8a
 800aa1c:	f000 fe6a 	bl	800b6f4 <__assert_func>
 800aa20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa24:	6006      	str	r6, [r0, #0]
 800aa26:	60c6      	str	r6, [r0, #12]
 800aa28:	b13c      	cbz	r4, 800aa3a <_Bfree+0x3a>
 800aa2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa2c:	6862      	ldr	r2, [r4, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa34:	6021      	str	r1, [r4, #0]
 800aa36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	0800c0b6 	.word	0x0800c0b6
 800aa40:	0800c1b4 	.word	0x0800c1b4

0800aa44 <__multadd>:
 800aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	690d      	ldr	r5, [r1, #16]
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	461e      	mov	r6, r3
 800aa50:	f101 0c14 	add.w	ip, r1, #20
 800aa54:	2000      	movs	r0, #0
 800aa56:	f8dc 3000 	ldr.w	r3, [ip]
 800aa5a:	b299      	uxth	r1, r3
 800aa5c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa60:	0c1e      	lsrs	r6, r3, #16
 800aa62:	0c0b      	lsrs	r3, r1, #16
 800aa64:	fb02 3306 	mla	r3, r2, r6, r3
 800aa68:	b289      	uxth	r1, r1
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa70:	4285      	cmp	r5, r0
 800aa72:	f84c 1b04 	str.w	r1, [ip], #4
 800aa76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa7a:	dcec      	bgt.n	800aa56 <__multadd+0x12>
 800aa7c:	b30e      	cbz	r6, 800aac2 <__multadd+0x7e>
 800aa7e:	68a3      	ldr	r3, [r4, #8]
 800aa80:	42ab      	cmp	r3, r5
 800aa82:	dc19      	bgt.n	800aab8 <__multadd+0x74>
 800aa84:	6861      	ldr	r1, [r4, #4]
 800aa86:	4638      	mov	r0, r7
 800aa88:	3101      	adds	r1, #1
 800aa8a:	f7ff ff79 	bl	800a980 <_Balloc>
 800aa8e:	4680      	mov	r8, r0
 800aa90:	b928      	cbnz	r0, 800aa9e <__multadd+0x5a>
 800aa92:	4602      	mov	r2, r0
 800aa94:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <__multadd+0x84>)
 800aa96:	480d      	ldr	r0, [pc, #52]	; (800aacc <__multadd+0x88>)
 800aa98:	21b5      	movs	r1, #181	; 0xb5
 800aa9a:	f000 fe2b 	bl	800b6f4 <__assert_func>
 800aa9e:	6922      	ldr	r2, [r4, #16]
 800aaa0:	3202      	adds	r2, #2
 800aaa2:	f104 010c 	add.w	r1, r4, #12
 800aaa6:	0092      	lsls	r2, r2, #2
 800aaa8:	300c      	adds	r0, #12
 800aaaa:	f7fc feaa 	bl	8007802 <memcpy>
 800aaae:	4621      	mov	r1, r4
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7ff ffa5 	bl	800aa00 <_Bfree>
 800aab6:	4644      	mov	r4, r8
 800aab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aabc:	3501      	adds	r5, #1
 800aabe:	615e      	str	r6, [r3, #20]
 800aac0:	6125      	str	r5, [r4, #16]
 800aac2:	4620      	mov	r0, r4
 800aac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac8:	0800c128 	.word	0x0800c128
 800aacc:	0800c1b4 	.word	0x0800c1b4

0800aad0 <__s2b>:
 800aad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad4:	460c      	mov	r4, r1
 800aad6:	4615      	mov	r5, r2
 800aad8:	461f      	mov	r7, r3
 800aada:	2209      	movs	r2, #9
 800aadc:	3308      	adds	r3, #8
 800aade:	4606      	mov	r6, r0
 800aae0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aae4:	2100      	movs	r1, #0
 800aae6:	2201      	movs	r2, #1
 800aae8:	429a      	cmp	r2, r3
 800aaea:	db09      	blt.n	800ab00 <__s2b+0x30>
 800aaec:	4630      	mov	r0, r6
 800aaee:	f7ff ff47 	bl	800a980 <_Balloc>
 800aaf2:	b940      	cbnz	r0, 800ab06 <__s2b+0x36>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	4b19      	ldr	r3, [pc, #100]	; (800ab5c <__s2b+0x8c>)
 800aaf8:	4819      	ldr	r0, [pc, #100]	; (800ab60 <__s2b+0x90>)
 800aafa:	21ce      	movs	r1, #206	; 0xce
 800aafc:	f000 fdfa 	bl	800b6f4 <__assert_func>
 800ab00:	0052      	lsls	r2, r2, #1
 800ab02:	3101      	adds	r1, #1
 800ab04:	e7f0      	b.n	800aae8 <__s2b+0x18>
 800ab06:	9b08      	ldr	r3, [sp, #32]
 800ab08:	6143      	str	r3, [r0, #20]
 800ab0a:	2d09      	cmp	r5, #9
 800ab0c:	f04f 0301 	mov.w	r3, #1
 800ab10:	6103      	str	r3, [r0, #16]
 800ab12:	dd16      	ble.n	800ab42 <__s2b+0x72>
 800ab14:	f104 0909 	add.w	r9, r4, #9
 800ab18:	46c8      	mov	r8, r9
 800ab1a:	442c      	add	r4, r5
 800ab1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab20:	4601      	mov	r1, r0
 800ab22:	3b30      	subs	r3, #48	; 0x30
 800ab24:	220a      	movs	r2, #10
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ff8c 	bl	800aa44 <__multadd>
 800ab2c:	45a0      	cmp	r8, r4
 800ab2e:	d1f5      	bne.n	800ab1c <__s2b+0x4c>
 800ab30:	f1a5 0408 	sub.w	r4, r5, #8
 800ab34:	444c      	add	r4, r9
 800ab36:	1b2d      	subs	r5, r5, r4
 800ab38:	1963      	adds	r3, r4, r5
 800ab3a:	42bb      	cmp	r3, r7
 800ab3c:	db04      	blt.n	800ab48 <__s2b+0x78>
 800ab3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab42:	340a      	adds	r4, #10
 800ab44:	2509      	movs	r5, #9
 800ab46:	e7f6      	b.n	800ab36 <__s2b+0x66>
 800ab48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab4c:	4601      	mov	r1, r0
 800ab4e:	3b30      	subs	r3, #48	; 0x30
 800ab50:	220a      	movs	r2, #10
 800ab52:	4630      	mov	r0, r6
 800ab54:	f7ff ff76 	bl	800aa44 <__multadd>
 800ab58:	e7ee      	b.n	800ab38 <__s2b+0x68>
 800ab5a:	bf00      	nop
 800ab5c:	0800c128 	.word	0x0800c128
 800ab60:	0800c1b4 	.word	0x0800c1b4

0800ab64 <__hi0bits>:
 800ab64:	0c03      	lsrs	r3, r0, #16
 800ab66:	041b      	lsls	r3, r3, #16
 800ab68:	b9d3      	cbnz	r3, 800aba0 <__hi0bits+0x3c>
 800ab6a:	0400      	lsls	r0, r0, #16
 800ab6c:	2310      	movs	r3, #16
 800ab6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab72:	bf04      	itt	eq
 800ab74:	0200      	lsleq	r0, r0, #8
 800ab76:	3308      	addeq	r3, #8
 800ab78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab7c:	bf04      	itt	eq
 800ab7e:	0100      	lsleq	r0, r0, #4
 800ab80:	3304      	addeq	r3, #4
 800ab82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab86:	bf04      	itt	eq
 800ab88:	0080      	lsleq	r0, r0, #2
 800ab8a:	3302      	addeq	r3, #2
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	db05      	blt.n	800ab9c <__hi0bits+0x38>
 800ab90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab94:	f103 0301 	add.w	r3, r3, #1
 800ab98:	bf08      	it	eq
 800ab9a:	2320      	moveq	r3, #32
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	4770      	bx	lr
 800aba0:	2300      	movs	r3, #0
 800aba2:	e7e4      	b.n	800ab6e <__hi0bits+0xa>

0800aba4 <__lo0bits>:
 800aba4:	6803      	ldr	r3, [r0, #0]
 800aba6:	f013 0207 	ands.w	r2, r3, #7
 800abaa:	4601      	mov	r1, r0
 800abac:	d00b      	beq.n	800abc6 <__lo0bits+0x22>
 800abae:	07da      	lsls	r2, r3, #31
 800abb0:	d423      	bmi.n	800abfa <__lo0bits+0x56>
 800abb2:	0798      	lsls	r0, r3, #30
 800abb4:	bf49      	itett	mi
 800abb6:	085b      	lsrmi	r3, r3, #1
 800abb8:	089b      	lsrpl	r3, r3, #2
 800abba:	2001      	movmi	r0, #1
 800abbc:	600b      	strmi	r3, [r1, #0]
 800abbe:	bf5c      	itt	pl
 800abc0:	600b      	strpl	r3, [r1, #0]
 800abc2:	2002      	movpl	r0, #2
 800abc4:	4770      	bx	lr
 800abc6:	b298      	uxth	r0, r3
 800abc8:	b9a8      	cbnz	r0, 800abf6 <__lo0bits+0x52>
 800abca:	0c1b      	lsrs	r3, r3, #16
 800abcc:	2010      	movs	r0, #16
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	b90a      	cbnz	r2, 800abd6 <__lo0bits+0x32>
 800abd2:	3008      	adds	r0, #8
 800abd4:	0a1b      	lsrs	r3, r3, #8
 800abd6:	071a      	lsls	r2, r3, #28
 800abd8:	bf04      	itt	eq
 800abda:	091b      	lsreq	r3, r3, #4
 800abdc:	3004      	addeq	r0, #4
 800abde:	079a      	lsls	r2, r3, #30
 800abe0:	bf04      	itt	eq
 800abe2:	089b      	lsreq	r3, r3, #2
 800abe4:	3002      	addeq	r0, #2
 800abe6:	07da      	lsls	r2, r3, #31
 800abe8:	d403      	bmi.n	800abf2 <__lo0bits+0x4e>
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	f100 0001 	add.w	r0, r0, #1
 800abf0:	d005      	beq.n	800abfe <__lo0bits+0x5a>
 800abf2:	600b      	str	r3, [r1, #0]
 800abf4:	4770      	bx	lr
 800abf6:	4610      	mov	r0, r2
 800abf8:	e7e9      	b.n	800abce <__lo0bits+0x2a>
 800abfa:	2000      	movs	r0, #0
 800abfc:	4770      	bx	lr
 800abfe:	2020      	movs	r0, #32
 800ac00:	4770      	bx	lr
	...

0800ac04 <__i2b>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	460c      	mov	r4, r1
 800ac08:	2101      	movs	r1, #1
 800ac0a:	f7ff feb9 	bl	800a980 <_Balloc>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	b928      	cbnz	r0, 800ac1e <__i2b+0x1a>
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <__i2b+0x24>)
 800ac14:	4805      	ldr	r0, [pc, #20]	; (800ac2c <__i2b+0x28>)
 800ac16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac1a:	f000 fd6b 	bl	800b6f4 <__assert_func>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	6144      	str	r4, [r0, #20]
 800ac22:	6103      	str	r3, [r0, #16]
 800ac24:	bd10      	pop	{r4, pc}
 800ac26:	bf00      	nop
 800ac28:	0800c128 	.word	0x0800c128
 800ac2c:	0800c1b4 	.word	0x0800c1b4

0800ac30 <__multiply>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	4691      	mov	r9, r2
 800ac36:	690a      	ldr	r2, [r1, #16]
 800ac38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	bfb8      	it	lt
 800ac40:	460b      	movlt	r3, r1
 800ac42:	460c      	mov	r4, r1
 800ac44:	bfbc      	itt	lt
 800ac46:	464c      	movlt	r4, r9
 800ac48:	4699      	movlt	r9, r3
 800ac4a:	6927      	ldr	r7, [r4, #16]
 800ac4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac50:	68a3      	ldr	r3, [r4, #8]
 800ac52:	6861      	ldr	r1, [r4, #4]
 800ac54:	eb07 060a 	add.w	r6, r7, sl
 800ac58:	42b3      	cmp	r3, r6
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	bfb8      	it	lt
 800ac5e:	3101      	addlt	r1, #1
 800ac60:	f7ff fe8e 	bl	800a980 <_Balloc>
 800ac64:	b930      	cbnz	r0, 800ac74 <__multiply+0x44>
 800ac66:	4602      	mov	r2, r0
 800ac68:	4b44      	ldr	r3, [pc, #272]	; (800ad7c <__multiply+0x14c>)
 800ac6a:	4845      	ldr	r0, [pc, #276]	; (800ad80 <__multiply+0x150>)
 800ac6c:	f240 115d 	movw	r1, #349	; 0x15d
 800ac70:	f000 fd40 	bl	800b6f4 <__assert_func>
 800ac74:	f100 0514 	add.w	r5, r0, #20
 800ac78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	2200      	movs	r2, #0
 800ac80:	4543      	cmp	r3, r8
 800ac82:	d321      	bcc.n	800acc8 <__multiply+0x98>
 800ac84:	f104 0314 	add.w	r3, r4, #20
 800ac88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac8c:	f109 0314 	add.w	r3, r9, #20
 800ac90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac94:	9202      	str	r2, [sp, #8]
 800ac96:	1b3a      	subs	r2, r7, r4
 800ac98:	3a15      	subs	r2, #21
 800ac9a:	f022 0203 	bic.w	r2, r2, #3
 800ac9e:	3204      	adds	r2, #4
 800aca0:	f104 0115 	add.w	r1, r4, #21
 800aca4:	428f      	cmp	r7, r1
 800aca6:	bf38      	it	cc
 800aca8:	2204      	movcc	r2, #4
 800acaa:	9201      	str	r2, [sp, #4]
 800acac:	9a02      	ldr	r2, [sp, #8]
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d80c      	bhi.n	800acce <__multiply+0x9e>
 800acb4:	2e00      	cmp	r6, #0
 800acb6:	dd03      	ble.n	800acc0 <__multiply+0x90>
 800acb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d05a      	beq.n	800ad76 <__multiply+0x146>
 800acc0:	6106      	str	r6, [r0, #16]
 800acc2:	b005      	add	sp, #20
 800acc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc8:	f843 2b04 	str.w	r2, [r3], #4
 800accc:	e7d8      	b.n	800ac80 <__multiply+0x50>
 800acce:	f8b3 a000 	ldrh.w	sl, [r3]
 800acd2:	f1ba 0f00 	cmp.w	sl, #0
 800acd6:	d024      	beq.n	800ad22 <__multiply+0xf2>
 800acd8:	f104 0e14 	add.w	lr, r4, #20
 800acdc:	46a9      	mov	r9, r5
 800acde:	f04f 0c00 	mov.w	ip, #0
 800ace2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ace6:	f8d9 1000 	ldr.w	r1, [r9]
 800acea:	fa1f fb82 	uxth.w	fp, r2
 800acee:	b289      	uxth	r1, r1
 800acf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800acf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acf8:	f8d9 2000 	ldr.w	r2, [r9]
 800acfc:	4461      	add	r1, ip
 800acfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad02:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad0a:	b289      	uxth	r1, r1
 800ad0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad10:	4577      	cmp	r7, lr
 800ad12:	f849 1b04 	str.w	r1, [r9], #4
 800ad16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad1a:	d8e2      	bhi.n	800ace2 <__multiply+0xb2>
 800ad1c:	9a01      	ldr	r2, [sp, #4]
 800ad1e:	f845 c002 	str.w	ip, [r5, r2]
 800ad22:	9a03      	ldr	r2, [sp, #12]
 800ad24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad28:	3304      	adds	r3, #4
 800ad2a:	f1b9 0f00 	cmp.w	r9, #0
 800ad2e:	d020      	beq.n	800ad72 <__multiply+0x142>
 800ad30:	6829      	ldr	r1, [r5, #0]
 800ad32:	f104 0c14 	add.w	ip, r4, #20
 800ad36:	46ae      	mov	lr, r5
 800ad38:	f04f 0a00 	mov.w	sl, #0
 800ad3c:	f8bc b000 	ldrh.w	fp, [ip]
 800ad40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad44:	fb09 220b 	mla	r2, r9, fp, r2
 800ad48:	4492      	add	sl, r2
 800ad4a:	b289      	uxth	r1, r1
 800ad4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad50:	f84e 1b04 	str.w	r1, [lr], #4
 800ad54:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad58:	f8be 1000 	ldrh.w	r1, [lr]
 800ad5c:	0c12      	lsrs	r2, r2, #16
 800ad5e:	fb09 1102 	mla	r1, r9, r2, r1
 800ad62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad66:	4567      	cmp	r7, ip
 800ad68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad6c:	d8e6      	bhi.n	800ad3c <__multiply+0x10c>
 800ad6e:	9a01      	ldr	r2, [sp, #4]
 800ad70:	50a9      	str	r1, [r5, r2]
 800ad72:	3504      	adds	r5, #4
 800ad74:	e79a      	b.n	800acac <__multiply+0x7c>
 800ad76:	3e01      	subs	r6, #1
 800ad78:	e79c      	b.n	800acb4 <__multiply+0x84>
 800ad7a:	bf00      	nop
 800ad7c:	0800c128 	.word	0x0800c128
 800ad80:	0800c1b4 	.word	0x0800c1b4

0800ad84 <__pow5mult>:
 800ad84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad88:	4615      	mov	r5, r2
 800ad8a:	f012 0203 	ands.w	r2, r2, #3
 800ad8e:	4606      	mov	r6, r0
 800ad90:	460f      	mov	r7, r1
 800ad92:	d007      	beq.n	800ada4 <__pow5mult+0x20>
 800ad94:	4c25      	ldr	r4, [pc, #148]	; (800ae2c <__pow5mult+0xa8>)
 800ad96:	3a01      	subs	r2, #1
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad9e:	f7ff fe51 	bl	800aa44 <__multadd>
 800ada2:	4607      	mov	r7, r0
 800ada4:	10ad      	asrs	r5, r5, #2
 800ada6:	d03d      	beq.n	800ae24 <__pow5mult+0xa0>
 800ada8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800adaa:	b97c      	cbnz	r4, 800adcc <__pow5mult+0x48>
 800adac:	2010      	movs	r0, #16
 800adae:	f7ff fdc1 	bl	800a934 <malloc>
 800adb2:	4602      	mov	r2, r0
 800adb4:	6270      	str	r0, [r6, #36]	; 0x24
 800adb6:	b928      	cbnz	r0, 800adc4 <__pow5mult+0x40>
 800adb8:	4b1d      	ldr	r3, [pc, #116]	; (800ae30 <__pow5mult+0xac>)
 800adba:	481e      	ldr	r0, [pc, #120]	; (800ae34 <__pow5mult+0xb0>)
 800adbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800adc0:	f000 fc98 	bl	800b6f4 <__assert_func>
 800adc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adc8:	6004      	str	r4, [r0, #0]
 800adca:	60c4      	str	r4, [r0, #12]
 800adcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800add0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800add4:	b94c      	cbnz	r4, 800adea <__pow5mult+0x66>
 800add6:	f240 2171 	movw	r1, #625	; 0x271
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ff12 	bl	800ac04 <__i2b>
 800ade0:	2300      	movs	r3, #0
 800ade2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ade6:	4604      	mov	r4, r0
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	f04f 0900 	mov.w	r9, #0
 800adee:	07eb      	lsls	r3, r5, #31
 800adf0:	d50a      	bpl.n	800ae08 <__pow5mult+0x84>
 800adf2:	4639      	mov	r1, r7
 800adf4:	4622      	mov	r2, r4
 800adf6:	4630      	mov	r0, r6
 800adf8:	f7ff ff1a 	bl	800ac30 <__multiply>
 800adfc:	4639      	mov	r1, r7
 800adfe:	4680      	mov	r8, r0
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7ff fdfd 	bl	800aa00 <_Bfree>
 800ae06:	4647      	mov	r7, r8
 800ae08:	106d      	asrs	r5, r5, #1
 800ae0a:	d00b      	beq.n	800ae24 <__pow5mult+0xa0>
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	b938      	cbnz	r0, 800ae20 <__pow5mult+0x9c>
 800ae10:	4622      	mov	r2, r4
 800ae12:	4621      	mov	r1, r4
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7ff ff0b 	bl	800ac30 <__multiply>
 800ae1a:	6020      	str	r0, [r4, #0]
 800ae1c:	f8c0 9000 	str.w	r9, [r0]
 800ae20:	4604      	mov	r4, r0
 800ae22:	e7e4      	b.n	800adee <__pow5mult+0x6a>
 800ae24:	4638      	mov	r0, r7
 800ae26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	bf00      	nop
 800ae2c:	0800c300 	.word	0x0800c300
 800ae30:	0800c0b6 	.word	0x0800c0b6
 800ae34:	0800c1b4 	.word	0x0800c1b4

0800ae38 <__lshift>:
 800ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	6849      	ldr	r1, [r1, #4]
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	4607      	mov	r7, r0
 800ae4a:	4691      	mov	r9, r2
 800ae4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae50:	f108 0601 	add.w	r6, r8, #1
 800ae54:	42b3      	cmp	r3, r6
 800ae56:	db0b      	blt.n	800ae70 <__lshift+0x38>
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff fd91 	bl	800a980 <_Balloc>
 800ae5e:	4605      	mov	r5, r0
 800ae60:	b948      	cbnz	r0, 800ae76 <__lshift+0x3e>
 800ae62:	4602      	mov	r2, r0
 800ae64:	4b2a      	ldr	r3, [pc, #168]	; (800af10 <__lshift+0xd8>)
 800ae66:	482b      	ldr	r0, [pc, #172]	; (800af14 <__lshift+0xdc>)
 800ae68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae6c:	f000 fc42 	bl	800b6f4 <__assert_func>
 800ae70:	3101      	adds	r1, #1
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	e7ee      	b.n	800ae54 <__lshift+0x1c>
 800ae76:	2300      	movs	r3, #0
 800ae78:	f100 0114 	add.w	r1, r0, #20
 800ae7c:	f100 0210 	add.w	r2, r0, #16
 800ae80:	4618      	mov	r0, r3
 800ae82:	4553      	cmp	r3, sl
 800ae84:	db37      	blt.n	800aef6 <__lshift+0xbe>
 800ae86:	6920      	ldr	r0, [r4, #16]
 800ae88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae8c:	f104 0314 	add.w	r3, r4, #20
 800ae90:	f019 091f 	ands.w	r9, r9, #31
 800ae94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae9c:	d02f      	beq.n	800aefe <__lshift+0xc6>
 800ae9e:	f1c9 0e20 	rsb	lr, r9, #32
 800aea2:	468a      	mov	sl, r1
 800aea4:	f04f 0c00 	mov.w	ip, #0
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	fa02 f209 	lsl.w	r2, r2, r9
 800aeae:	ea42 020c 	orr.w	r2, r2, ip
 800aeb2:	f84a 2b04 	str.w	r2, [sl], #4
 800aeb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeba:	4298      	cmp	r0, r3
 800aebc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aec0:	d8f2      	bhi.n	800aea8 <__lshift+0x70>
 800aec2:	1b03      	subs	r3, r0, r4
 800aec4:	3b15      	subs	r3, #21
 800aec6:	f023 0303 	bic.w	r3, r3, #3
 800aeca:	3304      	adds	r3, #4
 800aecc:	f104 0215 	add.w	r2, r4, #21
 800aed0:	4290      	cmp	r0, r2
 800aed2:	bf38      	it	cc
 800aed4:	2304      	movcc	r3, #4
 800aed6:	f841 c003 	str.w	ip, [r1, r3]
 800aeda:	f1bc 0f00 	cmp.w	ip, #0
 800aede:	d001      	beq.n	800aee4 <__lshift+0xac>
 800aee0:	f108 0602 	add.w	r6, r8, #2
 800aee4:	3e01      	subs	r6, #1
 800aee6:	4638      	mov	r0, r7
 800aee8:	612e      	str	r6, [r5, #16]
 800aeea:	4621      	mov	r1, r4
 800aeec:	f7ff fd88 	bl	800aa00 <_Bfree>
 800aef0:	4628      	mov	r0, r5
 800aef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aefa:	3301      	adds	r3, #1
 800aefc:	e7c1      	b.n	800ae82 <__lshift+0x4a>
 800aefe:	3904      	subs	r1, #4
 800af00:	f853 2b04 	ldr.w	r2, [r3], #4
 800af04:	f841 2f04 	str.w	r2, [r1, #4]!
 800af08:	4298      	cmp	r0, r3
 800af0a:	d8f9      	bhi.n	800af00 <__lshift+0xc8>
 800af0c:	e7ea      	b.n	800aee4 <__lshift+0xac>
 800af0e:	bf00      	nop
 800af10:	0800c128 	.word	0x0800c128
 800af14:	0800c1b4 	.word	0x0800c1b4

0800af18 <__mcmp>:
 800af18:	b530      	push	{r4, r5, lr}
 800af1a:	6902      	ldr	r2, [r0, #16]
 800af1c:	690c      	ldr	r4, [r1, #16]
 800af1e:	1b12      	subs	r2, r2, r4
 800af20:	d10e      	bne.n	800af40 <__mcmp+0x28>
 800af22:	f100 0314 	add.w	r3, r0, #20
 800af26:	3114      	adds	r1, #20
 800af28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af38:	42a5      	cmp	r5, r4
 800af3a:	d003      	beq.n	800af44 <__mcmp+0x2c>
 800af3c:	d305      	bcc.n	800af4a <__mcmp+0x32>
 800af3e:	2201      	movs	r2, #1
 800af40:	4610      	mov	r0, r2
 800af42:	bd30      	pop	{r4, r5, pc}
 800af44:	4283      	cmp	r3, r0
 800af46:	d3f3      	bcc.n	800af30 <__mcmp+0x18>
 800af48:	e7fa      	b.n	800af40 <__mcmp+0x28>
 800af4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af4e:	e7f7      	b.n	800af40 <__mcmp+0x28>

0800af50 <__mdiff>:
 800af50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	460c      	mov	r4, r1
 800af56:	4606      	mov	r6, r0
 800af58:	4611      	mov	r1, r2
 800af5a:	4620      	mov	r0, r4
 800af5c:	4690      	mov	r8, r2
 800af5e:	f7ff ffdb 	bl	800af18 <__mcmp>
 800af62:	1e05      	subs	r5, r0, #0
 800af64:	d110      	bne.n	800af88 <__mdiff+0x38>
 800af66:	4629      	mov	r1, r5
 800af68:	4630      	mov	r0, r6
 800af6a:	f7ff fd09 	bl	800a980 <_Balloc>
 800af6e:	b930      	cbnz	r0, 800af7e <__mdiff+0x2e>
 800af70:	4b3a      	ldr	r3, [pc, #232]	; (800b05c <__mdiff+0x10c>)
 800af72:	4602      	mov	r2, r0
 800af74:	f240 2132 	movw	r1, #562	; 0x232
 800af78:	4839      	ldr	r0, [pc, #228]	; (800b060 <__mdiff+0x110>)
 800af7a:	f000 fbbb 	bl	800b6f4 <__assert_func>
 800af7e:	2301      	movs	r3, #1
 800af80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af88:	bfa4      	itt	ge
 800af8a:	4643      	movge	r3, r8
 800af8c:	46a0      	movge	r8, r4
 800af8e:	4630      	mov	r0, r6
 800af90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af94:	bfa6      	itte	ge
 800af96:	461c      	movge	r4, r3
 800af98:	2500      	movge	r5, #0
 800af9a:	2501      	movlt	r5, #1
 800af9c:	f7ff fcf0 	bl	800a980 <_Balloc>
 800afa0:	b920      	cbnz	r0, 800afac <__mdiff+0x5c>
 800afa2:	4b2e      	ldr	r3, [pc, #184]	; (800b05c <__mdiff+0x10c>)
 800afa4:	4602      	mov	r2, r0
 800afa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800afaa:	e7e5      	b.n	800af78 <__mdiff+0x28>
 800afac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afb0:	6926      	ldr	r6, [r4, #16]
 800afb2:	60c5      	str	r5, [r0, #12]
 800afb4:	f104 0914 	add.w	r9, r4, #20
 800afb8:	f108 0514 	add.w	r5, r8, #20
 800afbc:	f100 0e14 	add.w	lr, r0, #20
 800afc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afc8:	f108 0210 	add.w	r2, r8, #16
 800afcc:	46f2      	mov	sl, lr
 800afce:	2100      	movs	r1, #0
 800afd0:	f859 3b04 	ldr.w	r3, [r9], #4
 800afd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afd8:	fa1f f883 	uxth.w	r8, r3
 800afdc:	fa11 f18b 	uxtah	r1, r1, fp
 800afe0:	0c1b      	lsrs	r3, r3, #16
 800afe2:	eba1 0808 	sub.w	r8, r1, r8
 800afe6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afee:	fa1f f888 	uxth.w	r8, r8
 800aff2:	1419      	asrs	r1, r3, #16
 800aff4:	454e      	cmp	r6, r9
 800aff6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800affa:	f84a 3b04 	str.w	r3, [sl], #4
 800affe:	d8e7      	bhi.n	800afd0 <__mdiff+0x80>
 800b000:	1b33      	subs	r3, r6, r4
 800b002:	3b15      	subs	r3, #21
 800b004:	f023 0303 	bic.w	r3, r3, #3
 800b008:	3304      	adds	r3, #4
 800b00a:	3415      	adds	r4, #21
 800b00c:	42a6      	cmp	r6, r4
 800b00e:	bf38      	it	cc
 800b010:	2304      	movcc	r3, #4
 800b012:	441d      	add	r5, r3
 800b014:	4473      	add	r3, lr
 800b016:	469e      	mov	lr, r3
 800b018:	462e      	mov	r6, r5
 800b01a:	4566      	cmp	r6, ip
 800b01c:	d30e      	bcc.n	800b03c <__mdiff+0xec>
 800b01e:	f10c 0203 	add.w	r2, ip, #3
 800b022:	1b52      	subs	r2, r2, r5
 800b024:	f022 0203 	bic.w	r2, r2, #3
 800b028:	3d03      	subs	r5, #3
 800b02a:	45ac      	cmp	ip, r5
 800b02c:	bf38      	it	cc
 800b02e:	2200      	movcc	r2, #0
 800b030:	441a      	add	r2, r3
 800b032:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b036:	b17b      	cbz	r3, 800b058 <__mdiff+0x108>
 800b038:	6107      	str	r7, [r0, #16]
 800b03a:	e7a3      	b.n	800af84 <__mdiff+0x34>
 800b03c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b040:	fa11 f288 	uxtah	r2, r1, r8
 800b044:	1414      	asrs	r4, r2, #16
 800b046:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b04a:	b292      	uxth	r2, r2
 800b04c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b050:	f84e 2b04 	str.w	r2, [lr], #4
 800b054:	1421      	asrs	r1, r4, #16
 800b056:	e7e0      	b.n	800b01a <__mdiff+0xca>
 800b058:	3f01      	subs	r7, #1
 800b05a:	e7ea      	b.n	800b032 <__mdiff+0xe2>
 800b05c:	0800c128 	.word	0x0800c128
 800b060:	0800c1b4 	.word	0x0800c1b4

0800b064 <__ulp>:
 800b064:	b082      	sub	sp, #8
 800b066:	ed8d 0b00 	vstr	d0, [sp]
 800b06a:	9b01      	ldr	r3, [sp, #4]
 800b06c:	4912      	ldr	r1, [pc, #72]	; (800b0b8 <__ulp+0x54>)
 800b06e:	4019      	ands	r1, r3
 800b070:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b074:	2900      	cmp	r1, #0
 800b076:	dd05      	ble.n	800b084 <__ulp+0x20>
 800b078:	2200      	movs	r2, #0
 800b07a:	460b      	mov	r3, r1
 800b07c:	ec43 2b10 	vmov	d0, r2, r3
 800b080:	b002      	add	sp, #8
 800b082:	4770      	bx	lr
 800b084:	4249      	negs	r1, r1
 800b086:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b08a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b08e:	f04f 0200 	mov.w	r2, #0
 800b092:	f04f 0300 	mov.w	r3, #0
 800b096:	da04      	bge.n	800b0a2 <__ulp+0x3e>
 800b098:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b09c:	fa41 f300 	asr.w	r3, r1, r0
 800b0a0:	e7ec      	b.n	800b07c <__ulp+0x18>
 800b0a2:	f1a0 0114 	sub.w	r1, r0, #20
 800b0a6:	291e      	cmp	r1, #30
 800b0a8:	bfda      	itte	le
 800b0aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b0ae:	fa20 f101 	lsrle.w	r1, r0, r1
 800b0b2:	2101      	movgt	r1, #1
 800b0b4:	460a      	mov	r2, r1
 800b0b6:	e7e1      	b.n	800b07c <__ulp+0x18>
 800b0b8:	7ff00000 	.word	0x7ff00000

0800b0bc <__b2d>:
 800b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0be:	6905      	ldr	r5, [r0, #16]
 800b0c0:	f100 0714 	add.w	r7, r0, #20
 800b0c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b0c8:	1f2e      	subs	r6, r5, #4
 800b0ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f7ff fd48 	bl	800ab64 <__hi0bits>
 800b0d4:	f1c0 0320 	rsb	r3, r0, #32
 800b0d8:	280a      	cmp	r0, #10
 800b0da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b158 <__b2d+0x9c>
 800b0de:	600b      	str	r3, [r1, #0]
 800b0e0:	dc14      	bgt.n	800b10c <__b2d+0x50>
 800b0e2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b0e6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b0ea:	42b7      	cmp	r7, r6
 800b0ec:	ea41 030c 	orr.w	r3, r1, ip
 800b0f0:	bf34      	ite	cc
 800b0f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0f6:	2100      	movcs	r1, #0
 800b0f8:	3015      	adds	r0, #21
 800b0fa:	fa04 f000 	lsl.w	r0, r4, r0
 800b0fe:	fa21 f10e 	lsr.w	r1, r1, lr
 800b102:	ea40 0201 	orr.w	r2, r0, r1
 800b106:	ec43 2b10 	vmov	d0, r2, r3
 800b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b10c:	42b7      	cmp	r7, r6
 800b10e:	bf3a      	itte	cc
 800b110:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b114:	f1a5 0608 	subcc.w	r6, r5, #8
 800b118:	2100      	movcs	r1, #0
 800b11a:	380b      	subs	r0, #11
 800b11c:	d017      	beq.n	800b14e <__b2d+0x92>
 800b11e:	f1c0 0c20 	rsb	ip, r0, #32
 800b122:	fa04 f500 	lsl.w	r5, r4, r0
 800b126:	42be      	cmp	r6, r7
 800b128:	fa21 f40c 	lsr.w	r4, r1, ip
 800b12c:	ea45 0504 	orr.w	r5, r5, r4
 800b130:	bf8c      	ite	hi
 800b132:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b136:	2400      	movls	r4, #0
 800b138:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b13c:	fa01 f000 	lsl.w	r0, r1, r0
 800b140:	fa24 f40c 	lsr.w	r4, r4, ip
 800b144:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b148:	ea40 0204 	orr.w	r2, r0, r4
 800b14c:	e7db      	b.n	800b106 <__b2d+0x4a>
 800b14e:	ea44 030c 	orr.w	r3, r4, ip
 800b152:	460a      	mov	r2, r1
 800b154:	e7d7      	b.n	800b106 <__b2d+0x4a>
 800b156:	bf00      	nop
 800b158:	3ff00000 	.word	0x3ff00000

0800b15c <__d2b>:
 800b15c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b160:	4689      	mov	r9, r1
 800b162:	2101      	movs	r1, #1
 800b164:	ec57 6b10 	vmov	r6, r7, d0
 800b168:	4690      	mov	r8, r2
 800b16a:	f7ff fc09 	bl	800a980 <_Balloc>
 800b16e:	4604      	mov	r4, r0
 800b170:	b930      	cbnz	r0, 800b180 <__d2b+0x24>
 800b172:	4602      	mov	r2, r0
 800b174:	4b25      	ldr	r3, [pc, #148]	; (800b20c <__d2b+0xb0>)
 800b176:	4826      	ldr	r0, [pc, #152]	; (800b210 <__d2b+0xb4>)
 800b178:	f240 310a 	movw	r1, #778	; 0x30a
 800b17c:	f000 faba 	bl	800b6f4 <__assert_func>
 800b180:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b184:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b188:	bb35      	cbnz	r5, 800b1d8 <__d2b+0x7c>
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	d028      	beq.n	800b1e2 <__d2b+0x86>
 800b190:	4668      	mov	r0, sp
 800b192:	9600      	str	r6, [sp, #0]
 800b194:	f7ff fd06 	bl	800aba4 <__lo0bits>
 800b198:	9900      	ldr	r1, [sp, #0]
 800b19a:	b300      	cbz	r0, 800b1de <__d2b+0x82>
 800b19c:	9a01      	ldr	r2, [sp, #4]
 800b19e:	f1c0 0320 	rsb	r3, r0, #32
 800b1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a6:	430b      	orrs	r3, r1
 800b1a8:	40c2      	lsrs	r2, r0
 800b1aa:	6163      	str	r3, [r4, #20]
 800b1ac:	9201      	str	r2, [sp, #4]
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	61a3      	str	r3, [r4, #24]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bf14      	ite	ne
 800b1b6:	2202      	movne	r2, #2
 800b1b8:	2201      	moveq	r2, #1
 800b1ba:	6122      	str	r2, [r4, #16]
 800b1bc:	b1d5      	cbz	r5, 800b1f4 <__d2b+0x98>
 800b1be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1c2:	4405      	add	r5, r0
 800b1c4:	f8c9 5000 	str.w	r5, [r9]
 800b1c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1cc:	f8c8 0000 	str.w	r0, [r8]
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	b003      	add	sp, #12
 800b1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1dc:	e7d5      	b.n	800b18a <__d2b+0x2e>
 800b1de:	6161      	str	r1, [r4, #20]
 800b1e0:	e7e5      	b.n	800b1ae <__d2b+0x52>
 800b1e2:	a801      	add	r0, sp, #4
 800b1e4:	f7ff fcde 	bl	800aba4 <__lo0bits>
 800b1e8:	9b01      	ldr	r3, [sp, #4]
 800b1ea:	6163      	str	r3, [r4, #20]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	6122      	str	r2, [r4, #16]
 800b1f0:	3020      	adds	r0, #32
 800b1f2:	e7e3      	b.n	800b1bc <__d2b+0x60>
 800b1f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1fc:	f8c9 0000 	str.w	r0, [r9]
 800b200:	6918      	ldr	r0, [r3, #16]
 800b202:	f7ff fcaf 	bl	800ab64 <__hi0bits>
 800b206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b20a:	e7df      	b.n	800b1cc <__d2b+0x70>
 800b20c:	0800c128 	.word	0x0800c128
 800b210:	0800c1b4 	.word	0x0800c1b4

0800b214 <__ratio>:
 800b214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	4688      	mov	r8, r1
 800b21a:	4669      	mov	r1, sp
 800b21c:	4681      	mov	r9, r0
 800b21e:	f7ff ff4d 	bl	800b0bc <__b2d>
 800b222:	a901      	add	r1, sp, #4
 800b224:	4640      	mov	r0, r8
 800b226:	ec55 4b10 	vmov	r4, r5, d0
 800b22a:	ee10 aa10 	vmov	sl, s0
 800b22e:	f7ff ff45 	bl	800b0bc <__b2d>
 800b232:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b236:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b23a:	1a59      	subs	r1, r3, r1
 800b23c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b246:	ec57 6b10 	vmov	r6, r7, d0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfd6      	itet	le
 800b24e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b252:	462a      	movgt	r2, r5
 800b254:	463a      	movle	r2, r7
 800b256:	46ab      	mov	fp, r5
 800b258:	bfd6      	itet	le
 800b25a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b25e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b262:	ee00 3a90 	vmovle	s1, r3
 800b266:	ec4b ab17 	vmov	d7, sl, fp
 800b26a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b26e:	b003      	add	sp, #12
 800b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b274 <__copybits>:
 800b274:	3901      	subs	r1, #1
 800b276:	b570      	push	{r4, r5, r6, lr}
 800b278:	1149      	asrs	r1, r1, #5
 800b27a:	6914      	ldr	r4, [r2, #16]
 800b27c:	3101      	adds	r1, #1
 800b27e:	f102 0314 	add.w	r3, r2, #20
 800b282:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b286:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b28a:	1f05      	subs	r5, r0, #4
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	d30c      	bcc.n	800b2aa <__copybits+0x36>
 800b290:	1aa3      	subs	r3, r4, r2
 800b292:	3b11      	subs	r3, #17
 800b294:	f023 0303 	bic.w	r3, r3, #3
 800b298:	3211      	adds	r2, #17
 800b29a:	42a2      	cmp	r2, r4
 800b29c:	bf88      	it	hi
 800b29e:	2300      	movhi	r3, #0
 800b2a0:	4418      	add	r0, r3
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4288      	cmp	r0, r1
 800b2a6:	d305      	bcc.n	800b2b4 <__copybits+0x40>
 800b2a8:	bd70      	pop	{r4, r5, r6, pc}
 800b2aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b2ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2b2:	e7eb      	b.n	800b28c <__copybits+0x18>
 800b2b4:	f840 3b04 	str.w	r3, [r0], #4
 800b2b8:	e7f4      	b.n	800b2a4 <__copybits+0x30>

0800b2ba <__any_on>:
 800b2ba:	f100 0214 	add.w	r2, r0, #20
 800b2be:	6900      	ldr	r0, [r0, #16]
 800b2c0:	114b      	asrs	r3, r1, #5
 800b2c2:	4298      	cmp	r0, r3
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	db11      	blt.n	800b2ec <__any_on+0x32>
 800b2c8:	dd0a      	ble.n	800b2e0 <__any_on+0x26>
 800b2ca:	f011 011f 	ands.w	r1, r1, #31
 800b2ce:	d007      	beq.n	800b2e0 <__any_on+0x26>
 800b2d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2d4:	fa24 f001 	lsr.w	r0, r4, r1
 800b2d8:	fa00 f101 	lsl.w	r1, r0, r1
 800b2dc:	428c      	cmp	r4, r1
 800b2de:	d10b      	bne.n	800b2f8 <__any_on+0x3e>
 800b2e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d803      	bhi.n	800b2f0 <__any_on+0x36>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	bd10      	pop	{r4, pc}
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	e7f7      	b.n	800b2e0 <__any_on+0x26>
 800b2f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	d0f5      	beq.n	800b2e4 <__any_on+0x2a>
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	e7f6      	b.n	800b2ea <__any_on+0x30>

0800b2fc <_calloc_r>:
 800b2fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2fe:	fba1 2402 	umull	r2, r4, r1, r2
 800b302:	b94c      	cbnz	r4, 800b318 <_calloc_r+0x1c>
 800b304:	4611      	mov	r1, r2
 800b306:	9201      	str	r2, [sp, #4]
 800b308:	f7fc fab2 	bl	8007870 <_malloc_r>
 800b30c:	9a01      	ldr	r2, [sp, #4]
 800b30e:	4605      	mov	r5, r0
 800b310:	b930      	cbnz	r0, 800b320 <_calloc_r+0x24>
 800b312:	4628      	mov	r0, r5
 800b314:	b003      	add	sp, #12
 800b316:	bd30      	pop	{r4, r5, pc}
 800b318:	220c      	movs	r2, #12
 800b31a:	6002      	str	r2, [r0, #0]
 800b31c:	2500      	movs	r5, #0
 800b31e:	e7f8      	b.n	800b312 <_calloc_r+0x16>
 800b320:	4621      	mov	r1, r4
 800b322:	f7fc fa7c 	bl	800781e <memset>
 800b326:	e7f4      	b.n	800b312 <_calloc_r+0x16>

0800b328 <_free_r>:
 800b328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b32a:	2900      	cmp	r1, #0
 800b32c:	d044      	beq.n	800b3b8 <_free_r+0x90>
 800b32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b332:	9001      	str	r0, [sp, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f1a1 0404 	sub.w	r4, r1, #4
 800b33a:	bfb8      	it	lt
 800b33c:	18e4      	addlt	r4, r4, r3
 800b33e:	f7ff fb13 	bl	800a968 <__malloc_lock>
 800b342:	4a1e      	ldr	r2, [pc, #120]	; (800b3bc <_free_r+0x94>)
 800b344:	9801      	ldr	r0, [sp, #4]
 800b346:	6813      	ldr	r3, [r2, #0]
 800b348:	b933      	cbnz	r3, 800b358 <_free_r+0x30>
 800b34a:	6063      	str	r3, [r4, #4]
 800b34c:	6014      	str	r4, [r2, #0]
 800b34e:	b003      	add	sp, #12
 800b350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b354:	f7ff bb0e 	b.w	800a974 <__malloc_unlock>
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d908      	bls.n	800b36e <_free_r+0x46>
 800b35c:	6825      	ldr	r5, [r4, #0]
 800b35e:	1961      	adds	r1, r4, r5
 800b360:	428b      	cmp	r3, r1
 800b362:	bf01      	itttt	eq
 800b364:	6819      	ldreq	r1, [r3, #0]
 800b366:	685b      	ldreq	r3, [r3, #4]
 800b368:	1949      	addeq	r1, r1, r5
 800b36a:	6021      	streq	r1, [r4, #0]
 800b36c:	e7ed      	b.n	800b34a <_free_r+0x22>
 800b36e:	461a      	mov	r2, r3
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	b10b      	cbz	r3, 800b378 <_free_r+0x50>
 800b374:	42a3      	cmp	r3, r4
 800b376:	d9fa      	bls.n	800b36e <_free_r+0x46>
 800b378:	6811      	ldr	r1, [r2, #0]
 800b37a:	1855      	adds	r5, r2, r1
 800b37c:	42a5      	cmp	r5, r4
 800b37e:	d10b      	bne.n	800b398 <_free_r+0x70>
 800b380:	6824      	ldr	r4, [r4, #0]
 800b382:	4421      	add	r1, r4
 800b384:	1854      	adds	r4, r2, r1
 800b386:	42a3      	cmp	r3, r4
 800b388:	6011      	str	r1, [r2, #0]
 800b38a:	d1e0      	bne.n	800b34e <_free_r+0x26>
 800b38c:	681c      	ldr	r4, [r3, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	6053      	str	r3, [r2, #4]
 800b392:	4421      	add	r1, r4
 800b394:	6011      	str	r1, [r2, #0]
 800b396:	e7da      	b.n	800b34e <_free_r+0x26>
 800b398:	d902      	bls.n	800b3a0 <_free_r+0x78>
 800b39a:	230c      	movs	r3, #12
 800b39c:	6003      	str	r3, [r0, #0]
 800b39e:	e7d6      	b.n	800b34e <_free_r+0x26>
 800b3a0:	6825      	ldr	r5, [r4, #0]
 800b3a2:	1961      	adds	r1, r4, r5
 800b3a4:	428b      	cmp	r3, r1
 800b3a6:	bf04      	itt	eq
 800b3a8:	6819      	ldreq	r1, [r3, #0]
 800b3aa:	685b      	ldreq	r3, [r3, #4]
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	bf04      	itt	eq
 800b3b0:	1949      	addeq	r1, r1, r5
 800b3b2:	6021      	streq	r1, [r4, #0]
 800b3b4:	6054      	str	r4, [r2, #4]
 800b3b6:	e7ca      	b.n	800b34e <_free_r+0x26>
 800b3b8:	b003      	add	sp, #12
 800b3ba:	bd30      	pop	{r4, r5, pc}
 800b3bc:	20004d7c 	.word	0x20004d7c

0800b3c0 <__ssputs_r>:
 800b3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c4:	688e      	ldr	r6, [r1, #8]
 800b3c6:	429e      	cmp	r6, r3
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	4690      	mov	r8, r2
 800b3ce:	461f      	mov	r7, r3
 800b3d0:	d838      	bhi.n	800b444 <__ssputs_r+0x84>
 800b3d2:	898a      	ldrh	r2, [r1, #12]
 800b3d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3d8:	d032      	beq.n	800b440 <__ssputs_r+0x80>
 800b3da:	6825      	ldr	r5, [r4, #0]
 800b3dc:	6909      	ldr	r1, [r1, #16]
 800b3de:	eba5 0901 	sub.w	r9, r5, r1
 800b3e2:	6965      	ldr	r5, [r4, #20]
 800b3e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	444b      	add	r3, r9
 800b3f0:	106d      	asrs	r5, r5, #1
 800b3f2:	429d      	cmp	r5, r3
 800b3f4:	bf38      	it	cc
 800b3f6:	461d      	movcc	r5, r3
 800b3f8:	0553      	lsls	r3, r2, #21
 800b3fa:	d531      	bpl.n	800b460 <__ssputs_r+0xa0>
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	f7fc fa37 	bl	8007870 <_malloc_r>
 800b402:	4606      	mov	r6, r0
 800b404:	b950      	cbnz	r0, 800b41c <__ssputs_r+0x5c>
 800b406:	230c      	movs	r3, #12
 800b408:	f8ca 3000 	str.w	r3, [sl]
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41c:	6921      	ldr	r1, [r4, #16]
 800b41e:	464a      	mov	r2, r9
 800b420:	f7fc f9ef 	bl	8007802 <memcpy>
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	6126      	str	r6, [r4, #16]
 800b432:	6165      	str	r5, [r4, #20]
 800b434:	444e      	add	r6, r9
 800b436:	eba5 0509 	sub.w	r5, r5, r9
 800b43a:	6026      	str	r6, [r4, #0]
 800b43c:	60a5      	str	r5, [r4, #8]
 800b43e:	463e      	mov	r6, r7
 800b440:	42be      	cmp	r6, r7
 800b442:	d900      	bls.n	800b446 <__ssputs_r+0x86>
 800b444:	463e      	mov	r6, r7
 800b446:	6820      	ldr	r0, [r4, #0]
 800b448:	4632      	mov	r2, r6
 800b44a:	4641      	mov	r1, r8
 800b44c:	f000 f982 	bl	800b754 <memmove>
 800b450:	68a3      	ldr	r3, [r4, #8]
 800b452:	1b9b      	subs	r3, r3, r6
 800b454:	60a3      	str	r3, [r4, #8]
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	4433      	add	r3, r6
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	2000      	movs	r0, #0
 800b45e:	e7db      	b.n	800b418 <__ssputs_r+0x58>
 800b460:	462a      	mov	r2, r5
 800b462:	f000 f991 	bl	800b788 <_realloc_r>
 800b466:	4606      	mov	r6, r0
 800b468:	2800      	cmp	r0, #0
 800b46a:	d1e1      	bne.n	800b430 <__ssputs_r+0x70>
 800b46c:	6921      	ldr	r1, [r4, #16]
 800b46e:	4650      	mov	r0, sl
 800b470:	f7ff ff5a 	bl	800b328 <_free_r>
 800b474:	e7c7      	b.n	800b406 <__ssputs_r+0x46>
	...

0800b478 <_svfiprintf_r>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	4698      	mov	r8, r3
 800b47e:	898b      	ldrh	r3, [r1, #12]
 800b480:	061b      	lsls	r3, r3, #24
 800b482:	b09d      	sub	sp, #116	; 0x74
 800b484:	4607      	mov	r7, r0
 800b486:	460d      	mov	r5, r1
 800b488:	4614      	mov	r4, r2
 800b48a:	d50e      	bpl.n	800b4aa <_svfiprintf_r+0x32>
 800b48c:	690b      	ldr	r3, [r1, #16]
 800b48e:	b963      	cbnz	r3, 800b4aa <_svfiprintf_r+0x32>
 800b490:	2140      	movs	r1, #64	; 0x40
 800b492:	f7fc f9ed 	bl	8007870 <_malloc_r>
 800b496:	6028      	str	r0, [r5, #0]
 800b498:	6128      	str	r0, [r5, #16]
 800b49a:	b920      	cbnz	r0, 800b4a6 <_svfiprintf_r+0x2e>
 800b49c:	230c      	movs	r3, #12
 800b49e:	603b      	str	r3, [r7, #0]
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4a4:	e0d1      	b.n	800b64a <_svfiprintf_r+0x1d2>
 800b4a6:	2340      	movs	r3, #64	; 0x40
 800b4a8:	616b      	str	r3, [r5, #20]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ae:	2320      	movs	r3, #32
 800b4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4b8:	2330      	movs	r3, #48	; 0x30
 800b4ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b664 <_svfiprintf_r+0x1ec>
 800b4be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4c2:	f04f 0901 	mov.w	r9, #1
 800b4c6:	4623      	mov	r3, r4
 800b4c8:	469a      	mov	sl, r3
 800b4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ce:	b10a      	cbz	r2, 800b4d4 <_svfiprintf_r+0x5c>
 800b4d0:	2a25      	cmp	r2, #37	; 0x25
 800b4d2:	d1f9      	bne.n	800b4c8 <_svfiprintf_r+0x50>
 800b4d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4d8:	d00b      	beq.n	800b4f2 <_svfiprintf_r+0x7a>
 800b4da:	465b      	mov	r3, fp
 800b4dc:	4622      	mov	r2, r4
 800b4de:	4629      	mov	r1, r5
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f7ff ff6d 	bl	800b3c0 <__ssputs_r>
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	f000 80aa 	beq.w	800b640 <_svfiprintf_r+0x1c8>
 800b4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ee:	445a      	add	r2, fp
 800b4f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 80a2 	beq.w	800b640 <_svfiprintf_r+0x1c8>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b506:	f10a 0a01 	add.w	sl, sl, #1
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	9307      	str	r3, [sp, #28]
 800b50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b512:	931a      	str	r3, [sp, #104]	; 0x68
 800b514:	4654      	mov	r4, sl
 800b516:	2205      	movs	r2, #5
 800b518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51c:	4851      	ldr	r0, [pc, #324]	; (800b664 <_svfiprintf_r+0x1ec>)
 800b51e:	f7f4 fe97 	bl	8000250 <memchr>
 800b522:	9a04      	ldr	r2, [sp, #16]
 800b524:	b9d8      	cbnz	r0, 800b55e <_svfiprintf_r+0xe6>
 800b526:	06d0      	lsls	r0, r2, #27
 800b528:	bf44      	itt	mi
 800b52a:	2320      	movmi	r3, #32
 800b52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b530:	0711      	lsls	r1, r2, #28
 800b532:	bf44      	itt	mi
 800b534:	232b      	movmi	r3, #43	; 0x2b
 800b536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b53a:	f89a 3000 	ldrb.w	r3, [sl]
 800b53e:	2b2a      	cmp	r3, #42	; 0x2a
 800b540:	d015      	beq.n	800b56e <_svfiprintf_r+0xf6>
 800b542:	9a07      	ldr	r2, [sp, #28]
 800b544:	4654      	mov	r4, sl
 800b546:	2000      	movs	r0, #0
 800b548:	f04f 0c0a 	mov.w	ip, #10
 800b54c:	4621      	mov	r1, r4
 800b54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b552:	3b30      	subs	r3, #48	; 0x30
 800b554:	2b09      	cmp	r3, #9
 800b556:	d94e      	bls.n	800b5f6 <_svfiprintf_r+0x17e>
 800b558:	b1b0      	cbz	r0, 800b588 <_svfiprintf_r+0x110>
 800b55a:	9207      	str	r2, [sp, #28]
 800b55c:	e014      	b.n	800b588 <_svfiprintf_r+0x110>
 800b55e:	eba0 0308 	sub.w	r3, r0, r8
 800b562:	fa09 f303 	lsl.w	r3, r9, r3
 800b566:	4313      	orrs	r3, r2
 800b568:	9304      	str	r3, [sp, #16]
 800b56a:	46a2      	mov	sl, r4
 800b56c:	e7d2      	b.n	800b514 <_svfiprintf_r+0x9c>
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	1d19      	adds	r1, r3, #4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	9103      	str	r1, [sp, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	bfbb      	ittet	lt
 800b57a:	425b      	neglt	r3, r3
 800b57c:	f042 0202 	orrlt.w	r2, r2, #2
 800b580:	9307      	strge	r3, [sp, #28]
 800b582:	9307      	strlt	r3, [sp, #28]
 800b584:	bfb8      	it	lt
 800b586:	9204      	strlt	r2, [sp, #16]
 800b588:	7823      	ldrb	r3, [r4, #0]
 800b58a:	2b2e      	cmp	r3, #46	; 0x2e
 800b58c:	d10c      	bne.n	800b5a8 <_svfiprintf_r+0x130>
 800b58e:	7863      	ldrb	r3, [r4, #1]
 800b590:	2b2a      	cmp	r3, #42	; 0x2a
 800b592:	d135      	bne.n	800b600 <_svfiprintf_r+0x188>
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	1d1a      	adds	r2, r3, #4
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	9203      	str	r2, [sp, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	bfb8      	it	lt
 800b5a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5a4:	3402      	adds	r4, #2
 800b5a6:	9305      	str	r3, [sp, #20]
 800b5a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b674 <_svfiprintf_r+0x1fc>
 800b5ac:	7821      	ldrb	r1, [r4, #0]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	4650      	mov	r0, sl
 800b5b2:	f7f4 fe4d 	bl	8000250 <memchr>
 800b5b6:	b140      	cbz	r0, 800b5ca <_svfiprintf_r+0x152>
 800b5b8:	2340      	movs	r3, #64	; 0x40
 800b5ba:	eba0 000a 	sub.w	r0, r0, sl
 800b5be:	fa03 f000 	lsl.w	r0, r3, r0
 800b5c2:	9b04      	ldr	r3, [sp, #16]
 800b5c4:	4303      	orrs	r3, r0
 800b5c6:	3401      	adds	r4, #1
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ce:	4826      	ldr	r0, [pc, #152]	; (800b668 <_svfiprintf_r+0x1f0>)
 800b5d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5d4:	2206      	movs	r2, #6
 800b5d6:	f7f4 fe3b 	bl	8000250 <memchr>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d038      	beq.n	800b650 <_svfiprintf_r+0x1d8>
 800b5de:	4b23      	ldr	r3, [pc, #140]	; (800b66c <_svfiprintf_r+0x1f4>)
 800b5e0:	bb1b      	cbnz	r3, 800b62a <_svfiprintf_r+0x1b2>
 800b5e2:	9b03      	ldr	r3, [sp, #12]
 800b5e4:	3307      	adds	r3, #7
 800b5e6:	f023 0307 	bic.w	r3, r3, #7
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	9303      	str	r3, [sp, #12]
 800b5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f0:	4433      	add	r3, r6
 800b5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f4:	e767      	b.n	800b4c6 <_svfiprintf_r+0x4e>
 800b5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	2001      	movs	r0, #1
 800b5fe:	e7a5      	b.n	800b54c <_svfiprintf_r+0xd4>
 800b600:	2300      	movs	r3, #0
 800b602:	3401      	adds	r4, #1
 800b604:	9305      	str	r3, [sp, #20]
 800b606:	4619      	mov	r1, r3
 800b608:	f04f 0c0a 	mov.w	ip, #10
 800b60c:	4620      	mov	r0, r4
 800b60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b612:	3a30      	subs	r2, #48	; 0x30
 800b614:	2a09      	cmp	r2, #9
 800b616:	d903      	bls.n	800b620 <_svfiprintf_r+0x1a8>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d0c5      	beq.n	800b5a8 <_svfiprintf_r+0x130>
 800b61c:	9105      	str	r1, [sp, #20]
 800b61e:	e7c3      	b.n	800b5a8 <_svfiprintf_r+0x130>
 800b620:	fb0c 2101 	mla	r1, ip, r1, r2
 800b624:	4604      	mov	r4, r0
 800b626:	2301      	movs	r3, #1
 800b628:	e7f0      	b.n	800b60c <_svfiprintf_r+0x194>
 800b62a:	ab03      	add	r3, sp, #12
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	462a      	mov	r2, r5
 800b630:	4b0f      	ldr	r3, [pc, #60]	; (800b670 <_svfiprintf_r+0x1f8>)
 800b632:	a904      	add	r1, sp, #16
 800b634:	4638      	mov	r0, r7
 800b636:	f7fc fa1f 	bl	8007a78 <_printf_float>
 800b63a:	1c42      	adds	r2, r0, #1
 800b63c:	4606      	mov	r6, r0
 800b63e:	d1d6      	bne.n	800b5ee <_svfiprintf_r+0x176>
 800b640:	89ab      	ldrh	r3, [r5, #12]
 800b642:	065b      	lsls	r3, r3, #25
 800b644:	f53f af2c 	bmi.w	800b4a0 <_svfiprintf_r+0x28>
 800b648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b64a:	b01d      	add	sp, #116	; 0x74
 800b64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b650:	ab03      	add	r3, sp, #12
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	462a      	mov	r2, r5
 800b656:	4b06      	ldr	r3, [pc, #24]	; (800b670 <_svfiprintf_r+0x1f8>)
 800b658:	a904      	add	r1, sp, #16
 800b65a:	4638      	mov	r0, r7
 800b65c:	f7fc fc98 	bl	8007f90 <_printf_i>
 800b660:	e7eb      	b.n	800b63a <_svfiprintf_r+0x1c2>
 800b662:	bf00      	nop
 800b664:	0800c30c 	.word	0x0800c30c
 800b668:	0800c316 	.word	0x0800c316
 800b66c:	08007a79 	.word	0x08007a79
 800b670:	0800b3c1 	.word	0x0800b3c1
 800b674:	0800c312 	.word	0x0800c312

0800b678 <_read_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_read_r+0x20>)
 800b67c:	4604      	mov	r4, r0
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f7f5 ff34 	bl	80014f4 <_read>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_read_r+0x1e>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_read_r+0x1e>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	20004d84 	.word	0x20004d84
 800b69c:	00000000 	.word	0x00000000

0800b6a0 <nan>:
 800b6a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b6a8 <nan+0x8>
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	00000000 	.word	0x00000000
 800b6ac:	7ff80000 	.word	0x7ff80000

0800b6b0 <strncmp>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	b17a      	cbz	r2, 800b6d4 <strncmp+0x24>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	3901      	subs	r1, #1
 800b6b8:	1884      	adds	r4, r0, r2
 800b6ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6c2:	4290      	cmp	r0, r2
 800b6c4:	d101      	bne.n	800b6ca <strncmp+0x1a>
 800b6c6:	42a3      	cmp	r3, r4
 800b6c8:	d101      	bne.n	800b6ce <strncmp+0x1e>
 800b6ca:	1a80      	subs	r0, r0, r2
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d1f3      	bne.n	800b6ba <strncmp+0xa>
 800b6d2:	e7fa      	b.n	800b6ca <strncmp+0x1a>
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	e7f9      	b.n	800b6cc <strncmp+0x1c>

0800b6d8 <__ascii_wctomb>:
 800b6d8:	b149      	cbz	r1, 800b6ee <__ascii_wctomb+0x16>
 800b6da:	2aff      	cmp	r2, #255	; 0xff
 800b6dc:	bf85      	ittet	hi
 800b6de:	238a      	movhi	r3, #138	; 0x8a
 800b6e0:	6003      	strhi	r3, [r0, #0]
 800b6e2:	700a      	strbls	r2, [r1, #0]
 800b6e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b6e8:	bf98      	it	ls
 800b6ea:	2001      	movls	r0, #1
 800b6ec:	4770      	bx	lr
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <__assert_func>:
 800b6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6f6:	4614      	mov	r4, r2
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <__assert_func+0x2c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4605      	mov	r5, r0
 800b700:	68d8      	ldr	r0, [r3, #12]
 800b702:	b14c      	cbz	r4, 800b718 <__assert_func+0x24>
 800b704:	4b07      	ldr	r3, [pc, #28]	; (800b724 <__assert_func+0x30>)
 800b706:	9100      	str	r1, [sp, #0]
 800b708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b70c:	4906      	ldr	r1, [pc, #24]	; (800b728 <__assert_func+0x34>)
 800b70e:	462b      	mov	r3, r5
 800b710:	f000 f80e 	bl	800b730 <fiprintf>
 800b714:	f000 fa80 	bl	800bc18 <abort>
 800b718:	4b04      	ldr	r3, [pc, #16]	; (800b72c <__assert_func+0x38>)
 800b71a:	461c      	mov	r4, r3
 800b71c:	e7f3      	b.n	800b706 <__assert_func+0x12>
 800b71e:	bf00      	nop
 800b720:	20000010 	.word	0x20000010
 800b724:	0800c31d 	.word	0x0800c31d
 800b728:	0800c32a 	.word	0x0800c32a
 800b72c:	0800c358 	.word	0x0800c358

0800b730 <fiprintf>:
 800b730:	b40e      	push	{r1, r2, r3}
 800b732:	b503      	push	{r0, r1, lr}
 800b734:	4601      	mov	r1, r0
 800b736:	ab03      	add	r3, sp, #12
 800b738:	4805      	ldr	r0, [pc, #20]	; (800b750 <fiprintf+0x20>)
 800b73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73e:	6800      	ldr	r0, [r0, #0]
 800b740:	9301      	str	r3, [sp, #4]
 800b742:	f000 f879 	bl	800b838 <_vfiprintf_r>
 800b746:	b002      	add	sp, #8
 800b748:	f85d eb04 	ldr.w	lr, [sp], #4
 800b74c:	b003      	add	sp, #12
 800b74e:	4770      	bx	lr
 800b750:	20000010 	.word	0x20000010

0800b754 <memmove>:
 800b754:	4288      	cmp	r0, r1
 800b756:	b510      	push	{r4, lr}
 800b758:	eb01 0402 	add.w	r4, r1, r2
 800b75c:	d902      	bls.n	800b764 <memmove+0x10>
 800b75e:	4284      	cmp	r4, r0
 800b760:	4623      	mov	r3, r4
 800b762:	d807      	bhi.n	800b774 <memmove+0x20>
 800b764:	1e43      	subs	r3, r0, #1
 800b766:	42a1      	cmp	r1, r4
 800b768:	d008      	beq.n	800b77c <memmove+0x28>
 800b76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b772:	e7f8      	b.n	800b766 <memmove+0x12>
 800b774:	4402      	add	r2, r0
 800b776:	4601      	mov	r1, r0
 800b778:	428a      	cmp	r2, r1
 800b77a:	d100      	bne.n	800b77e <memmove+0x2a>
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b786:	e7f7      	b.n	800b778 <memmove+0x24>

0800b788 <_realloc_r>:
 800b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78c:	4680      	mov	r8, r0
 800b78e:	4614      	mov	r4, r2
 800b790:	460e      	mov	r6, r1
 800b792:	b921      	cbnz	r1, 800b79e <_realloc_r+0x16>
 800b794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b798:	4611      	mov	r1, r2
 800b79a:	f7fc b869 	b.w	8007870 <_malloc_r>
 800b79e:	b92a      	cbnz	r2, 800b7ac <_realloc_r+0x24>
 800b7a0:	f7ff fdc2 	bl	800b328 <_free_r>
 800b7a4:	4625      	mov	r5, r4
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ac:	f000 faa0 	bl	800bcf0 <_malloc_usable_size_r>
 800b7b0:	4284      	cmp	r4, r0
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	d802      	bhi.n	800b7bc <_realloc_r+0x34>
 800b7b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7ba:	d812      	bhi.n	800b7e2 <_realloc_r+0x5a>
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4640      	mov	r0, r8
 800b7c0:	f7fc f856 	bl	8007870 <_malloc_r>
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0ed      	beq.n	800b7a6 <_realloc_r+0x1e>
 800b7ca:	42bc      	cmp	r4, r7
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	bf28      	it	cs
 800b7d2:	463a      	movcs	r2, r7
 800b7d4:	f7fc f815 	bl	8007802 <memcpy>
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4640      	mov	r0, r8
 800b7dc:	f7ff fda4 	bl	800b328 <_free_r>
 800b7e0:	e7e1      	b.n	800b7a6 <_realloc_r+0x1e>
 800b7e2:	4635      	mov	r5, r6
 800b7e4:	e7df      	b.n	800b7a6 <_realloc_r+0x1e>

0800b7e6 <__sfputc_r>:
 800b7e6:	6893      	ldr	r3, [r2, #8]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	b410      	push	{r4}
 800b7ee:	6093      	str	r3, [r2, #8]
 800b7f0:	da08      	bge.n	800b804 <__sfputc_r+0x1e>
 800b7f2:	6994      	ldr	r4, [r2, #24]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	db01      	blt.n	800b7fc <__sfputc_r+0x16>
 800b7f8:	290a      	cmp	r1, #10
 800b7fa:	d103      	bne.n	800b804 <__sfputc_r+0x1e>
 800b7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b800:	f000 b94a 	b.w	800ba98 <__swbuf_r>
 800b804:	6813      	ldr	r3, [r2, #0]
 800b806:	1c58      	adds	r0, r3, #1
 800b808:	6010      	str	r0, [r2, #0]
 800b80a:	7019      	strb	r1, [r3, #0]
 800b80c:	4608      	mov	r0, r1
 800b80e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <__sfputs_r>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	4606      	mov	r6, r0
 800b818:	460f      	mov	r7, r1
 800b81a:	4614      	mov	r4, r2
 800b81c:	18d5      	adds	r5, r2, r3
 800b81e:	42ac      	cmp	r4, r5
 800b820:	d101      	bne.n	800b826 <__sfputs_r+0x12>
 800b822:	2000      	movs	r0, #0
 800b824:	e007      	b.n	800b836 <__sfputs_r+0x22>
 800b826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82a:	463a      	mov	r2, r7
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7ff ffda 	bl	800b7e6 <__sfputc_r>
 800b832:	1c43      	adds	r3, r0, #1
 800b834:	d1f3      	bne.n	800b81e <__sfputs_r+0xa>
 800b836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b838 <_vfiprintf_r>:
 800b838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83c:	460d      	mov	r5, r1
 800b83e:	b09d      	sub	sp, #116	; 0x74
 800b840:	4614      	mov	r4, r2
 800b842:	4698      	mov	r8, r3
 800b844:	4606      	mov	r6, r0
 800b846:	b118      	cbz	r0, 800b850 <_vfiprintf_r+0x18>
 800b848:	6983      	ldr	r3, [r0, #24]
 800b84a:	b90b      	cbnz	r3, 800b850 <_vfiprintf_r+0x18>
 800b84c:	f7fb ff14 	bl	8007678 <__sinit>
 800b850:	4b89      	ldr	r3, [pc, #548]	; (800ba78 <_vfiprintf_r+0x240>)
 800b852:	429d      	cmp	r5, r3
 800b854:	d11b      	bne.n	800b88e <_vfiprintf_r+0x56>
 800b856:	6875      	ldr	r5, [r6, #4]
 800b858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b85a:	07d9      	lsls	r1, r3, #31
 800b85c:	d405      	bmi.n	800b86a <_vfiprintf_r+0x32>
 800b85e:	89ab      	ldrh	r3, [r5, #12]
 800b860:	059a      	lsls	r2, r3, #22
 800b862:	d402      	bmi.n	800b86a <_vfiprintf_r+0x32>
 800b864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b866:	f7fb ffca 	bl	80077fe <__retarget_lock_acquire_recursive>
 800b86a:	89ab      	ldrh	r3, [r5, #12]
 800b86c:	071b      	lsls	r3, r3, #28
 800b86e:	d501      	bpl.n	800b874 <_vfiprintf_r+0x3c>
 800b870:	692b      	ldr	r3, [r5, #16]
 800b872:	b9eb      	cbnz	r3, 800b8b0 <_vfiprintf_r+0x78>
 800b874:	4629      	mov	r1, r5
 800b876:	4630      	mov	r0, r6
 800b878:	f000 f960 	bl	800bb3c <__swsetup_r>
 800b87c:	b1c0      	cbz	r0, 800b8b0 <_vfiprintf_r+0x78>
 800b87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b880:	07dc      	lsls	r4, r3, #31
 800b882:	d50e      	bpl.n	800b8a2 <_vfiprintf_r+0x6a>
 800b884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b888:	b01d      	add	sp, #116	; 0x74
 800b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88e:	4b7b      	ldr	r3, [pc, #492]	; (800ba7c <_vfiprintf_r+0x244>)
 800b890:	429d      	cmp	r5, r3
 800b892:	d101      	bne.n	800b898 <_vfiprintf_r+0x60>
 800b894:	68b5      	ldr	r5, [r6, #8]
 800b896:	e7df      	b.n	800b858 <_vfiprintf_r+0x20>
 800b898:	4b79      	ldr	r3, [pc, #484]	; (800ba80 <_vfiprintf_r+0x248>)
 800b89a:	429d      	cmp	r5, r3
 800b89c:	bf08      	it	eq
 800b89e:	68f5      	ldreq	r5, [r6, #12]
 800b8a0:	e7da      	b.n	800b858 <_vfiprintf_r+0x20>
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	0598      	lsls	r0, r3, #22
 800b8a6:	d4ed      	bmi.n	800b884 <_vfiprintf_r+0x4c>
 800b8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8aa:	f7fb ffa9 	bl	8007800 <__retarget_lock_release_recursive>
 800b8ae:	e7e9      	b.n	800b884 <_vfiprintf_r+0x4c>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b4:	2320      	movs	r3, #32
 800b8b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8be:	2330      	movs	r3, #48	; 0x30
 800b8c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba84 <_vfiprintf_r+0x24c>
 800b8c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c8:	f04f 0901 	mov.w	r9, #1
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	469a      	mov	sl, r3
 800b8d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8d4:	b10a      	cbz	r2, 800b8da <_vfiprintf_r+0xa2>
 800b8d6:	2a25      	cmp	r2, #37	; 0x25
 800b8d8:	d1f9      	bne.n	800b8ce <_vfiprintf_r+0x96>
 800b8da:	ebba 0b04 	subs.w	fp, sl, r4
 800b8de:	d00b      	beq.n	800b8f8 <_vfiprintf_r+0xc0>
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7ff ff94 	bl	800b814 <__sfputs_r>
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	f000 80aa 	beq.w	800ba46 <_vfiprintf_r+0x20e>
 800b8f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8f4:	445a      	add	r2, fp
 800b8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 80a2 	beq.w	800ba46 <_vfiprintf_r+0x20e>
 800b902:	2300      	movs	r3, #0
 800b904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b90c:	f10a 0a01 	add.w	sl, sl, #1
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	9307      	str	r3, [sp, #28]
 800b914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b918:	931a      	str	r3, [sp, #104]	; 0x68
 800b91a:	4654      	mov	r4, sl
 800b91c:	2205      	movs	r2, #5
 800b91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b922:	4858      	ldr	r0, [pc, #352]	; (800ba84 <_vfiprintf_r+0x24c>)
 800b924:	f7f4 fc94 	bl	8000250 <memchr>
 800b928:	9a04      	ldr	r2, [sp, #16]
 800b92a:	b9d8      	cbnz	r0, 800b964 <_vfiprintf_r+0x12c>
 800b92c:	06d1      	lsls	r1, r2, #27
 800b92e:	bf44      	itt	mi
 800b930:	2320      	movmi	r3, #32
 800b932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b936:	0713      	lsls	r3, r2, #28
 800b938:	bf44      	itt	mi
 800b93a:	232b      	movmi	r3, #43	; 0x2b
 800b93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b940:	f89a 3000 	ldrb.w	r3, [sl]
 800b944:	2b2a      	cmp	r3, #42	; 0x2a
 800b946:	d015      	beq.n	800b974 <_vfiprintf_r+0x13c>
 800b948:	9a07      	ldr	r2, [sp, #28]
 800b94a:	4654      	mov	r4, sl
 800b94c:	2000      	movs	r0, #0
 800b94e:	f04f 0c0a 	mov.w	ip, #10
 800b952:	4621      	mov	r1, r4
 800b954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b958:	3b30      	subs	r3, #48	; 0x30
 800b95a:	2b09      	cmp	r3, #9
 800b95c:	d94e      	bls.n	800b9fc <_vfiprintf_r+0x1c4>
 800b95e:	b1b0      	cbz	r0, 800b98e <_vfiprintf_r+0x156>
 800b960:	9207      	str	r2, [sp, #28]
 800b962:	e014      	b.n	800b98e <_vfiprintf_r+0x156>
 800b964:	eba0 0308 	sub.w	r3, r0, r8
 800b968:	fa09 f303 	lsl.w	r3, r9, r3
 800b96c:	4313      	orrs	r3, r2
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	46a2      	mov	sl, r4
 800b972:	e7d2      	b.n	800b91a <_vfiprintf_r+0xe2>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	1d19      	adds	r1, r3, #4
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	9103      	str	r1, [sp, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	bfbb      	ittet	lt
 800b980:	425b      	neglt	r3, r3
 800b982:	f042 0202 	orrlt.w	r2, r2, #2
 800b986:	9307      	strge	r3, [sp, #28]
 800b988:	9307      	strlt	r3, [sp, #28]
 800b98a:	bfb8      	it	lt
 800b98c:	9204      	strlt	r2, [sp, #16]
 800b98e:	7823      	ldrb	r3, [r4, #0]
 800b990:	2b2e      	cmp	r3, #46	; 0x2e
 800b992:	d10c      	bne.n	800b9ae <_vfiprintf_r+0x176>
 800b994:	7863      	ldrb	r3, [r4, #1]
 800b996:	2b2a      	cmp	r3, #42	; 0x2a
 800b998:	d135      	bne.n	800ba06 <_vfiprintf_r+0x1ce>
 800b99a:	9b03      	ldr	r3, [sp, #12]
 800b99c:	1d1a      	adds	r2, r3, #4
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	9203      	str	r2, [sp, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	bfb8      	it	lt
 800b9a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9aa:	3402      	adds	r4, #2
 800b9ac:	9305      	str	r3, [sp, #20]
 800b9ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba94 <_vfiprintf_r+0x25c>
 800b9b2:	7821      	ldrb	r1, [r4, #0]
 800b9b4:	2203      	movs	r2, #3
 800b9b6:	4650      	mov	r0, sl
 800b9b8:	f7f4 fc4a 	bl	8000250 <memchr>
 800b9bc:	b140      	cbz	r0, 800b9d0 <_vfiprintf_r+0x198>
 800b9be:	2340      	movs	r3, #64	; 0x40
 800b9c0:	eba0 000a 	sub.w	r0, r0, sl
 800b9c4:	fa03 f000 	lsl.w	r0, r3, r0
 800b9c8:	9b04      	ldr	r3, [sp, #16]
 800b9ca:	4303      	orrs	r3, r0
 800b9cc:	3401      	adds	r4, #1
 800b9ce:	9304      	str	r3, [sp, #16]
 800b9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d4:	482c      	ldr	r0, [pc, #176]	; (800ba88 <_vfiprintf_r+0x250>)
 800b9d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9da:	2206      	movs	r2, #6
 800b9dc:	f7f4 fc38 	bl	8000250 <memchr>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d03f      	beq.n	800ba64 <_vfiprintf_r+0x22c>
 800b9e4:	4b29      	ldr	r3, [pc, #164]	; (800ba8c <_vfiprintf_r+0x254>)
 800b9e6:	bb1b      	cbnz	r3, 800ba30 <_vfiprintf_r+0x1f8>
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	3307      	adds	r3, #7
 800b9ec:	f023 0307 	bic.w	r3, r3, #7
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f6:	443b      	add	r3, r7
 800b9f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9fa:	e767      	b.n	800b8cc <_vfiprintf_r+0x94>
 800b9fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba00:	460c      	mov	r4, r1
 800ba02:	2001      	movs	r0, #1
 800ba04:	e7a5      	b.n	800b952 <_vfiprintf_r+0x11a>
 800ba06:	2300      	movs	r3, #0
 800ba08:	3401      	adds	r4, #1
 800ba0a:	9305      	str	r3, [sp, #20]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	f04f 0c0a 	mov.w	ip, #10
 800ba12:	4620      	mov	r0, r4
 800ba14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba18:	3a30      	subs	r2, #48	; 0x30
 800ba1a:	2a09      	cmp	r2, #9
 800ba1c:	d903      	bls.n	800ba26 <_vfiprintf_r+0x1ee>
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0c5      	beq.n	800b9ae <_vfiprintf_r+0x176>
 800ba22:	9105      	str	r1, [sp, #20]
 800ba24:	e7c3      	b.n	800b9ae <_vfiprintf_r+0x176>
 800ba26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e7f0      	b.n	800ba12 <_vfiprintf_r+0x1da>
 800ba30:	ab03      	add	r3, sp, #12
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	462a      	mov	r2, r5
 800ba36:	4b16      	ldr	r3, [pc, #88]	; (800ba90 <_vfiprintf_r+0x258>)
 800ba38:	a904      	add	r1, sp, #16
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7fc f81c 	bl	8007a78 <_printf_float>
 800ba40:	4607      	mov	r7, r0
 800ba42:	1c78      	adds	r0, r7, #1
 800ba44:	d1d6      	bne.n	800b9f4 <_vfiprintf_r+0x1bc>
 800ba46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba48:	07d9      	lsls	r1, r3, #31
 800ba4a:	d405      	bmi.n	800ba58 <_vfiprintf_r+0x220>
 800ba4c:	89ab      	ldrh	r3, [r5, #12]
 800ba4e:	059a      	lsls	r2, r3, #22
 800ba50:	d402      	bmi.n	800ba58 <_vfiprintf_r+0x220>
 800ba52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba54:	f7fb fed4 	bl	8007800 <__retarget_lock_release_recursive>
 800ba58:	89ab      	ldrh	r3, [r5, #12]
 800ba5a:	065b      	lsls	r3, r3, #25
 800ba5c:	f53f af12 	bmi.w	800b884 <_vfiprintf_r+0x4c>
 800ba60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba62:	e711      	b.n	800b888 <_vfiprintf_r+0x50>
 800ba64:	ab03      	add	r3, sp, #12
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	462a      	mov	r2, r5
 800ba6a:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <_vfiprintf_r+0x258>)
 800ba6c:	a904      	add	r1, sp, #16
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7fc fa8e 	bl	8007f90 <_printf_i>
 800ba74:	e7e4      	b.n	800ba40 <_vfiprintf_r+0x208>
 800ba76:	bf00      	nop
 800ba78:	0800bed8 	.word	0x0800bed8
 800ba7c:	0800bef8 	.word	0x0800bef8
 800ba80:	0800beb8 	.word	0x0800beb8
 800ba84:	0800c30c 	.word	0x0800c30c
 800ba88:	0800c316 	.word	0x0800c316
 800ba8c:	08007a79 	.word	0x08007a79
 800ba90:	0800b815 	.word	0x0800b815
 800ba94:	0800c312 	.word	0x0800c312

0800ba98 <__swbuf_r>:
 800ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9a:	460e      	mov	r6, r1
 800ba9c:	4614      	mov	r4, r2
 800ba9e:	4605      	mov	r5, r0
 800baa0:	b118      	cbz	r0, 800baaa <__swbuf_r+0x12>
 800baa2:	6983      	ldr	r3, [r0, #24]
 800baa4:	b90b      	cbnz	r3, 800baaa <__swbuf_r+0x12>
 800baa6:	f7fb fde7 	bl	8007678 <__sinit>
 800baaa:	4b21      	ldr	r3, [pc, #132]	; (800bb30 <__swbuf_r+0x98>)
 800baac:	429c      	cmp	r4, r3
 800baae:	d12b      	bne.n	800bb08 <__swbuf_r+0x70>
 800bab0:	686c      	ldr	r4, [r5, #4]
 800bab2:	69a3      	ldr	r3, [r4, #24]
 800bab4:	60a3      	str	r3, [r4, #8]
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	071a      	lsls	r2, r3, #28
 800baba:	d52f      	bpl.n	800bb1c <__swbuf_r+0x84>
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	b36b      	cbz	r3, 800bb1c <__swbuf_r+0x84>
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	6820      	ldr	r0, [r4, #0]
 800bac4:	1ac0      	subs	r0, r0, r3
 800bac6:	6963      	ldr	r3, [r4, #20]
 800bac8:	b2f6      	uxtb	r6, r6
 800baca:	4283      	cmp	r3, r0
 800bacc:	4637      	mov	r7, r6
 800bace:	dc04      	bgt.n	800bada <__swbuf_r+0x42>
 800bad0:	4621      	mov	r1, r4
 800bad2:	4628      	mov	r0, r5
 800bad4:	f7fe fb6c 	bl	800a1b0 <_fflush_r>
 800bad8:	bb30      	cbnz	r0, 800bb28 <__swbuf_r+0x90>
 800bada:	68a3      	ldr	r3, [r4, #8]
 800badc:	3b01      	subs	r3, #1
 800bade:	60a3      	str	r3, [r4, #8]
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	1c5a      	adds	r2, r3, #1
 800bae4:	6022      	str	r2, [r4, #0]
 800bae6:	701e      	strb	r6, [r3, #0]
 800bae8:	6963      	ldr	r3, [r4, #20]
 800baea:	3001      	adds	r0, #1
 800baec:	4283      	cmp	r3, r0
 800baee:	d004      	beq.n	800bafa <__swbuf_r+0x62>
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	07db      	lsls	r3, r3, #31
 800baf4:	d506      	bpl.n	800bb04 <__swbuf_r+0x6c>
 800baf6:	2e0a      	cmp	r6, #10
 800baf8:	d104      	bne.n	800bb04 <__swbuf_r+0x6c>
 800bafa:	4621      	mov	r1, r4
 800bafc:	4628      	mov	r0, r5
 800bafe:	f7fe fb57 	bl	800a1b0 <_fflush_r>
 800bb02:	b988      	cbnz	r0, 800bb28 <__swbuf_r+0x90>
 800bb04:	4638      	mov	r0, r7
 800bb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb08:	4b0a      	ldr	r3, [pc, #40]	; (800bb34 <__swbuf_r+0x9c>)
 800bb0a:	429c      	cmp	r4, r3
 800bb0c:	d101      	bne.n	800bb12 <__swbuf_r+0x7a>
 800bb0e:	68ac      	ldr	r4, [r5, #8]
 800bb10:	e7cf      	b.n	800bab2 <__swbuf_r+0x1a>
 800bb12:	4b09      	ldr	r3, [pc, #36]	; (800bb38 <__swbuf_r+0xa0>)
 800bb14:	429c      	cmp	r4, r3
 800bb16:	bf08      	it	eq
 800bb18:	68ec      	ldreq	r4, [r5, #12]
 800bb1a:	e7ca      	b.n	800bab2 <__swbuf_r+0x1a>
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 f80c 	bl	800bb3c <__swsetup_r>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d0cb      	beq.n	800bac0 <__swbuf_r+0x28>
 800bb28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bb2c:	e7ea      	b.n	800bb04 <__swbuf_r+0x6c>
 800bb2e:	bf00      	nop
 800bb30:	0800bed8 	.word	0x0800bed8
 800bb34:	0800bef8 	.word	0x0800bef8
 800bb38:	0800beb8 	.word	0x0800beb8

0800bb3c <__swsetup_r>:
 800bb3c:	4b32      	ldr	r3, [pc, #200]	; (800bc08 <__swsetup_r+0xcc>)
 800bb3e:	b570      	push	{r4, r5, r6, lr}
 800bb40:	681d      	ldr	r5, [r3, #0]
 800bb42:	4606      	mov	r6, r0
 800bb44:	460c      	mov	r4, r1
 800bb46:	b125      	cbz	r5, 800bb52 <__swsetup_r+0x16>
 800bb48:	69ab      	ldr	r3, [r5, #24]
 800bb4a:	b913      	cbnz	r3, 800bb52 <__swsetup_r+0x16>
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	f7fb fd93 	bl	8007678 <__sinit>
 800bb52:	4b2e      	ldr	r3, [pc, #184]	; (800bc0c <__swsetup_r+0xd0>)
 800bb54:	429c      	cmp	r4, r3
 800bb56:	d10f      	bne.n	800bb78 <__swsetup_r+0x3c>
 800bb58:	686c      	ldr	r4, [r5, #4]
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb60:	0719      	lsls	r1, r3, #28
 800bb62:	d42c      	bmi.n	800bbbe <__swsetup_r+0x82>
 800bb64:	06dd      	lsls	r5, r3, #27
 800bb66:	d411      	bmi.n	800bb8c <__swsetup_r+0x50>
 800bb68:	2309      	movs	r3, #9
 800bb6a:	6033      	str	r3, [r6, #0]
 800bb6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb76:	e03e      	b.n	800bbf6 <__swsetup_r+0xba>
 800bb78:	4b25      	ldr	r3, [pc, #148]	; (800bc10 <__swsetup_r+0xd4>)
 800bb7a:	429c      	cmp	r4, r3
 800bb7c:	d101      	bne.n	800bb82 <__swsetup_r+0x46>
 800bb7e:	68ac      	ldr	r4, [r5, #8]
 800bb80:	e7eb      	b.n	800bb5a <__swsetup_r+0x1e>
 800bb82:	4b24      	ldr	r3, [pc, #144]	; (800bc14 <__swsetup_r+0xd8>)
 800bb84:	429c      	cmp	r4, r3
 800bb86:	bf08      	it	eq
 800bb88:	68ec      	ldreq	r4, [r5, #12]
 800bb8a:	e7e6      	b.n	800bb5a <__swsetup_r+0x1e>
 800bb8c:	0758      	lsls	r0, r3, #29
 800bb8e:	d512      	bpl.n	800bbb6 <__swsetup_r+0x7a>
 800bb90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb92:	b141      	cbz	r1, 800bba6 <__swsetup_r+0x6a>
 800bb94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb98:	4299      	cmp	r1, r3
 800bb9a:	d002      	beq.n	800bba2 <__swsetup_r+0x66>
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7ff fbc3 	bl	800b328 <_free_r>
 800bba2:	2300      	movs	r3, #0
 800bba4:	6363      	str	r3, [r4, #52]	; 0x34
 800bba6:	89a3      	ldrh	r3, [r4, #12]
 800bba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbac:	81a3      	strh	r3, [r4, #12]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	6063      	str	r3, [r4, #4]
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	f043 0308 	orr.w	r3, r3, #8
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	b94b      	cbnz	r3, 800bbd6 <__swsetup_r+0x9a>
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbcc:	d003      	beq.n	800bbd6 <__swsetup_r+0x9a>
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f000 f84d 	bl	800bc70 <__smakebuf_r>
 800bbd6:	89a0      	ldrh	r0, [r4, #12]
 800bbd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbdc:	f010 0301 	ands.w	r3, r0, #1
 800bbe0:	d00a      	beq.n	800bbf8 <__swsetup_r+0xbc>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60a3      	str	r3, [r4, #8]
 800bbe6:	6963      	ldr	r3, [r4, #20]
 800bbe8:	425b      	negs	r3, r3
 800bbea:	61a3      	str	r3, [r4, #24]
 800bbec:	6923      	ldr	r3, [r4, #16]
 800bbee:	b943      	cbnz	r3, 800bc02 <__swsetup_r+0xc6>
 800bbf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbf4:	d1ba      	bne.n	800bb6c <__swsetup_r+0x30>
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	0781      	lsls	r1, r0, #30
 800bbfa:	bf58      	it	pl
 800bbfc:	6963      	ldrpl	r3, [r4, #20]
 800bbfe:	60a3      	str	r3, [r4, #8]
 800bc00:	e7f4      	b.n	800bbec <__swsetup_r+0xb0>
 800bc02:	2000      	movs	r0, #0
 800bc04:	e7f7      	b.n	800bbf6 <__swsetup_r+0xba>
 800bc06:	bf00      	nop
 800bc08:	20000010 	.word	0x20000010
 800bc0c:	0800bed8 	.word	0x0800bed8
 800bc10:	0800bef8 	.word	0x0800bef8
 800bc14:	0800beb8 	.word	0x0800beb8

0800bc18 <abort>:
 800bc18:	b508      	push	{r3, lr}
 800bc1a:	2006      	movs	r0, #6
 800bc1c:	f000 f898 	bl	800bd50 <raise>
 800bc20:	2001      	movs	r0, #1
 800bc22:	f7f5 fc5d 	bl	80014e0 <_exit>

0800bc26 <__swhatbuf_r>:
 800bc26:	b570      	push	{r4, r5, r6, lr}
 800bc28:	460e      	mov	r6, r1
 800bc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2e:	2900      	cmp	r1, #0
 800bc30:	b096      	sub	sp, #88	; 0x58
 800bc32:	4614      	mov	r4, r2
 800bc34:	461d      	mov	r5, r3
 800bc36:	da08      	bge.n	800bc4a <__swhatbuf_r+0x24>
 800bc38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	602a      	str	r2, [r5, #0]
 800bc40:	061a      	lsls	r2, r3, #24
 800bc42:	d410      	bmi.n	800bc66 <__swhatbuf_r+0x40>
 800bc44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc48:	e00e      	b.n	800bc68 <__swhatbuf_r+0x42>
 800bc4a:	466a      	mov	r2, sp
 800bc4c:	f000 f89c 	bl	800bd88 <_fstat_r>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	dbf1      	blt.n	800bc38 <__swhatbuf_r+0x12>
 800bc54:	9a01      	ldr	r2, [sp, #4]
 800bc56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc5e:	425a      	negs	r2, r3
 800bc60:	415a      	adcs	r2, r3
 800bc62:	602a      	str	r2, [r5, #0]
 800bc64:	e7ee      	b.n	800bc44 <__swhatbuf_r+0x1e>
 800bc66:	2340      	movs	r3, #64	; 0x40
 800bc68:	2000      	movs	r0, #0
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	b016      	add	sp, #88	; 0x58
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}

0800bc70 <__smakebuf_r>:
 800bc70:	898b      	ldrh	r3, [r1, #12]
 800bc72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc74:	079d      	lsls	r5, r3, #30
 800bc76:	4606      	mov	r6, r0
 800bc78:	460c      	mov	r4, r1
 800bc7a:	d507      	bpl.n	800bc8c <__smakebuf_r+0x1c>
 800bc7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	6123      	str	r3, [r4, #16]
 800bc84:	2301      	movs	r3, #1
 800bc86:	6163      	str	r3, [r4, #20]
 800bc88:	b002      	add	sp, #8
 800bc8a:	bd70      	pop	{r4, r5, r6, pc}
 800bc8c:	ab01      	add	r3, sp, #4
 800bc8e:	466a      	mov	r2, sp
 800bc90:	f7ff ffc9 	bl	800bc26 <__swhatbuf_r>
 800bc94:	9900      	ldr	r1, [sp, #0]
 800bc96:	4605      	mov	r5, r0
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f7fb fde9 	bl	8007870 <_malloc_r>
 800bc9e:	b948      	cbnz	r0, 800bcb4 <__smakebuf_r+0x44>
 800bca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca4:	059a      	lsls	r2, r3, #22
 800bca6:	d4ef      	bmi.n	800bc88 <__smakebuf_r+0x18>
 800bca8:	f023 0303 	bic.w	r3, r3, #3
 800bcac:	f043 0302 	orr.w	r3, r3, #2
 800bcb0:	81a3      	strh	r3, [r4, #12]
 800bcb2:	e7e3      	b.n	800bc7c <__smakebuf_r+0xc>
 800bcb4:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <__smakebuf_r+0x7c>)
 800bcb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	6020      	str	r0, [r4, #0]
 800bcbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	9b00      	ldr	r3, [sp, #0]
 800bcc4:	6163      	str	r3, [r4, #20]
 800bcc6:	9b01      	ldr	r3, [sp, #4]
 800bcc8:	6120      	str	r0, [r4, #16]
 800bcca:	b15b      	cbz	r3, 800bce4 <__smakebuf_r+0x74>
 800bccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f000 f86b 	bl	800bdac <_isatty_r>
 800bcd6:	b128      	cbz	r0, 800bce4 <__smakebuf_r+0x74>
 800bcd8:	89a3      	ldrh	r3, [r4, #12]
 800bcda:	f023 0303 	bic.w	r3, r3, #3
 800bcde:	f043 0301 	orr.w	r3, r3, #1
 800bce2:	81a3      	strh	r3, [r4, #12]
 800bce4:	89a0      	ldrh	r0, [r4, #12]
 800bce6:	4305      	orrs	r5, r0
 800bce8:	81a5      	strh	r5, [r4, #12]
 800bcea:	e7cd      	b.n	800bc88 <__smakebuf_r+0x18>
 800bcec:	08007611 	.word	0x08007611

0800bcf0 <_malloc_usable_size_r>:
 800bcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcf4:	1f18      	subs	r0, r3, #4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	bfbc      	itt	lt
 800bcfa:	580b      	ldrlt	r3, [r1, r0]
 800bcfc:	18c0      	addlt	r0, r0, r3
 800bcfe:	4770      	bx	lr

0800bd00 <_raise_r>:
 800bd00:	291f      	cmp	r1, #31
 800bd02:	b538      	push	{r3, r4, r5, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	d904      	bls.n	800bd14 <_raise_r+0x14>
 800bd0a:	2316      	movs	r3, #22
 800bd0c:	6003      	str	r3, [r0, #0]
 800bd0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd16:	b112      	cbz	r2, 800bd1e <_raise_r+0x1e>
 800bd18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd1c:	b94b      	cbnz	r3, 800bd32 <_raise_r+0x32>
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 f830 	bl	800bd84 <_getpid_r>
 800bd24:	462a      	mov	r2, r5
 800bd26:	4601      	mov	r1, r0
 800bd28:	4620      	mov	r0, r4
 800bd2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd2e:	f000 b817 	b.w	800bd60 <_kill_r>
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d00a      	beq.n	800bd4c <_raise_r+0x4c>
 800bd36:	1c59      	adds	r1, r3, #1
 800bd38:	d103      	bne.n	800bd42 <_raise_r+0x42>
 800bd3a:	2316      	movs	r3, #22
 800bd3c:	6003      	str	r3, [r0, #0]
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7e7      	b.n	800bd12 <_raise_r+0x12>
 800bd42:	2400      	movs	r4, #0
 800bd44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd48:	4628      	mov	r0, r5
 800bd4a:	4798      	blx	r3
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	e7e0      	b.n	800bd12 <_raise_r+0x12>

0800bd50 <raise>:
 800bd50:	4b02      	ldr	r3, [pc, #8]	; (800bd5c <raise+0xc>)
 800bd52:	4601      	mov	r1, r0
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	f7ff bfd3 	b.w	800bd00 <_raise_r>
 800bd5a:	bf00      	nop
 800bd5c:	20000010 	.word	0x20000010

0800bd60 <_kill_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d07      	ldr	r5, [pc, #28]	; (800bd80 <_kill_r+0x20>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	602b      	str	r3, [r5, #0]
 800bd6e:	f7f5 fba7 	bl	80014c0 <_kill>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	d102      	bne.n	800bd7c <_kill_r+0x1c>
 800bd76:	682b      	ldr	r3, [r5, #0]
 800bd78:	b103      	cbz	r3, 800bd7c <_kill_r+0x1c>
 800bd7a:	6023      	str	r3, [r4, #0]
 800bd7c:	bd38      	pop	{r3, r4, r5, pc}
 800bd7e:	bf00      	nop
 800bd80:	20004d84 	.word	0x20004d84

0800bd84 <_getpid_r>:
 800bd84:	f7f5 bb94 	b.w	80014b0 <_getpid>

0800bd88 <_fstat_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4d07      	ldr	r5, [pc, #28]	; (800bda8 <_fstat_r+0x20>)
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4604      	mov	r4, r0
 800bd90:	4608      	mov	r0, r1
 800bd92:	4611      	mov	r1, r2
 800bd94:	602b      	str	r3, [r5, #0]
 800bd96:	f7f5 fbf2 	bl	800157e <_fstat>
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	d102      	bne.n	800bda4 <_fstat_r+0x1c>
 800bd9e:	682b      	ldr	r3, [r5, #0]
 800bda0:	b103      	cbz	r3, 800bda4 <_fstat_r+0x1c>
 800bda2:	6023      	str	r3, [r4, #0]
 800bda4:	bd38      	pop	{r3, r4, r5, pc}
 800bda6:	bf00      	nop
 800bda8:	20004d84 	.word	0x20004d84

0800bdac <_isatty_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d06      	ldr	r5, [pc, #24]	; (800bdc8 <_isatty_r+0x1c>)
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	f7f5 fbf1 	bl	800159e <_isatty>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_isatty_r+0x1a>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_isatty_r+0x1a>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	20004d84 	.word	0x20004d84

0800bdcc <_init>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	bf00      	nop
 800bdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd2:	bc08      	pop	{r3}
 800bdd4:	469e      	mov	lr, r3
 800bdd6:	4770      	bx	lr

0800bdd8 <_fini>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	bf00      	nop
 800bddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdde:	bc08      	pop	{r3}
 800bde0:	469e      	mov	lr, r3
 800bde2:	4770      	bx	lr
