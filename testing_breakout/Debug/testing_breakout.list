
testing_breakout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008810  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008a10  08008a10  00018a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f1c  08008f1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f24  08008f24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e0  0800910c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  0800910c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e14a  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc2  00000000  00000000  0002e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  00030af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002802e  00000000  00000000  00031508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4fc  00000000  00000000  00059536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3ee4  00000000  00000000  00067a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  0015b968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080089f8 	.word	0x080089f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080089f8 	.word	0x080089f8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <init_MPU_6050>:

	return i2c_success;
}

void init_MPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	/* create a parameter that determines the size of each array */
	uint8_t i2cTxBuffer[6] = {0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	2300      	movs	r3, #0
 80009ec:	82bb      	strh	r3, [r7, #20]
	uint8_t i2cRxBuffer[6] = {0};
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	2300      	movs	r3, #0
 80009f4:	81bb      	strh	r3, [r7, #12]

	my_mpu_6050->i2c_handle = i2c;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	601a      	str	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff = i2cTxBuffer;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f107 0210 	add.w	r2, r7, #16
 8000a02:	605a      	str	r2, [r3, #4]
	my_mpu_6050->i2c_rx_buff = i2cRxBuffer;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f107 0208 	add.w	r2, r7, #8
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <accel_Gyro_Config>:

/* Create another parameter that will allow user to
 * configure the full scale range of the accelerometer
 */
uint8_t accel_Gyro_Config(mpu_6050_t *my_mpu_6050)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t configSuccess = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
	uint8_t dlpfSet = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]

	/* Selecting the 8g full range scale for the accelerometer
	 * by writing AFS_SEL_8 to ACCEL_CONFIG register
	 */
	my_mpu_6050->i2c_tx_buff[0] = ACCEL_CONFIG;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	221c      	movs	r2, #28
 8000a2e:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = AFS_SEL_8;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	2210      	movs	r2, #16
 8000a38:	701a      	strb	r2, [r3, #0]

	/* Selecting the 250 degree/seconds full range scale for the gyro
	 * by writing FS_SEL_250 to GYRO_CONFIG register
	 */

	my_mpu_6050->i2c_tx_buff[2] = GYRO_CONFIG;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	221b      	movs	r2, #27
 8000a42:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[3] = FS_SEL_250;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	3303      	adds	r3, #3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]


	configSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 4, 100);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	21d0      	movs	r1, #208	; 0xd0
 8000a5e:	f001 f95d 	bl	8001d1c <HAL_I2C_Master_Transmit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]

/* Enabling the digital low pass filter */

	my_mpu_6050->i2c_tx_buff[0] = CONFIG;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	221a      	movs	r2, #26
 8000a6c:	701a      	strb	r2, [r3, #0]
	my_mpu_6050->i2c_tx_buff[1] = (0x05U);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	2205      	movs	r2, #5
 8000a76:	701a      	strb	r2, [r3, #0]

	dlpfSet = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	21d0      	movs	r1, #208	; 0xd0
 8000a88:	f001 f948 	bl	8001d1c <HAL_I2C_Master_Transmit>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73bb      	strb	r3, [r7, #14]

return configSuccess;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <fifo_Enable>:

uint8_t fifo_Enable(mpu_6050_t *my_mpu_6050)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af02      	add	r7, sp, #8
 8000aa0:	6078      	str	r0, [r7, #4]
	uint8_t enableSuccess = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = FIFO_EN;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2223      	movs	r2, #35	; 0x23
 8000aac:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = FIFO_ACCEL_EN;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	701a      	strb	r2, [r3, #0]

	enableSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	21d0      	movs	r1, #208	; 0xd0
 8000ac8:	f001 f928 	bl	8001d1c <HAL_I2C_Master_Transmit>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73fb      	strb	r3, [r7, #15]

	return enableSuccess;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <get_Gyro>:
	HAL_UART_Transmit(uartHandle, uart_buff, uart_len, 100);
	HAL_Delay(500);
}

uint8_t get_Gyro(mpu_6050_t *my_mpu_6050)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af02      	add	r7, sp, #8
 8000ae0:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Tx_flag = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = GYRO_XOUT_H;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2243      	movs	r2, #67	; 0x43
 8000af4:	701a      	strb	r2, [r3, #0]

	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 1000);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	21d0      	movs	r1, #208	; 0xd0
 8000b08:	f001 f908 	bl	8001d1c <HAL_I2C_Master_Transmit>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73bb      	strb	r3, [r7, #14]

	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 1000);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2306      	movs	r3, #6
 8000b20:	21d1      	movs	r1, #209	; 0xd1
 8000b22:	f001 f9ef 	bl	8001f04 <HAL_I2C_Master_Receive>
 8000b26:	4603      	mov	r3, r0
 8000b28:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d104      	bne.n	8000b3a <get_Gyro+0x60>
 8000b30:	7b7b      	ldrb	r3, [r7, #13]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <get_Gyro+0x60>
		i2c_success = HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]

	return i2c_success;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	0000      	movs	r0, r0
	...

08000b48 <formatGyro>:

void formatGyro(mpu_6050_t *my_mpu_6050)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	my_mpu_6050->gyroX = (int16_t)((my_mpu_6050->i2c_rx_buff[0] << 8) | my_mpu_6050->i2c_rx_buff[1]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	841a      	strh	r2, [r3, #32]
	my_mpu_6050->gX = (my_mpu_6050->gyroX)/131.0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b7a:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8000c18 <formatGyro+0xd0>
 8000b7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	my_mpu_6050->gyroY = (int16_t)((my_mpu_6050->i2c_rx_buff[2] << 8) | my_mpu_6050->i2c_rx_buff[3]);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	3302      	adds	r3, #2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	845a      	strh	r2, [r3, #34]	; 0x22
	my_mpu_6050->gY = (my_mpu_6050->gyroY)/131.0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bb8:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8000c18 <formatGyro+0xd0>
 8000bbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	my_mpu_6050->gyroZ = (int16_t)((my_mpu_6050->i2c_rx_buff[4] << 8) | my_mpu_6050->i2c_rx_buff[5]);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	3305      	adds	r3, #5
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	849a      	strh	r2, [r3, #36]	; 0x24
	my_mpu_6050->gZ = (my_mpu_6050->gyroZ)/131.0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bf6:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000c18 <formatGyro+0xd0>
 8000bfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	f3af 8000 	nop.w
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	40606000 	.word	0x40606000

08000c20 <print_Gyro>:

void print_Gyro(mpu_6050_t *my_mpu_6050, UART_HandleTypeDef *uartHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000c26:	af04      	add	r7, sp, #16
 8000c28:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000c2c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000c30:	6018      	str	r0, [r3, #0]
 8000c32:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000c36:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000c3a:	6019      	str	r1, [r3, #0]
	uint8_t uart_buff[1024];
	uint8_t uart_len = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f

	//uart_len = sprintf((char *)uart_buff, "gyroX: %hd , gyroY: %hd, gyroZ: %hd\r\n", my_mpu_6050->gyroX, my_mpu_6050->gyroY, my_mpu_6050->gyroZ);
	uart_len = sprintf((char *)uart_buff, "gX: %.2f , gY: %.2f, gZ: %.2f\r\n", my_mpu_6050->gX, my_mpu_6050->gY, my_mpu_6050->gZ);
 8000c42:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000c46:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000c50:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c54:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000c58:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000c62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c66:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000c6a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8000c74:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c78:	f107 000c 	add.w	r0, r7, #12
 8000c7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c80:	ed8d 7b00 	vstr	d7, [sp]
 8000c84:	ec53 2b15 	vmov	r2, r3, d5
 8000c88:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <print_Gyro+0xa0>)
 8000c8a:	f004 f99b 	bl	8004fc4 <siprintf>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	HAL_UART_Transmit(uartHandle, uart_buff, uart_len, 100);
 8000c94:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f107 010c 	add.w	r1, r7, #12
 8000c9e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000ca2:	f5a3 6082 	sub.w	r0, r3, #1040	; 0x410
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	6800      	ldr	r0, [r0, #0]
 8000caa:	f002 fe6d 	bl	8003988 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000cae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb2:	f000 fcd3 	bl	800165c <HAL_Delay>
}
 8000cb6:	bf00      	nop
 8000cb8:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08008a3c 	.word	0x08008a3c

08000cc4 <set_Sample_Rt>:


uint8_t set_Sample_Rt(mpu_6050_t *my_mpu_6050)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	uint8_t sampleSuccess = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = SMPRT_DIV;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2219      	movs	r2, #25
 8000cd6:	701a      	strb	r2, [r3, #0]

	/* Divider == 8 therefore sampleRate of accelerometer and gryo = 8MHz/8 == 1MHz */
	my_mpu_6050->i2c_tx_buff[1] = 0x08U;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	2208      	movs	r2, #8
 8000ce0:	701a      	strb	r2, [r3, #0]

//	/* Divider == 200 therefore sampleRate of accelerometer and gryo = 8kHz/200 == 40kHz */
//	my_mpu_6050->i2c_tx_buff[1] = 0xC8U;


	sampleSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2302      	movs	r3, #2
 8000cf0:	21d0      	movs	r1, #208	; 0xd0
 8000cf2:	f001 f813 	bl	8001d1c <HAL_I2C_Master_Transmit>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	73fb      	strb	r3, [r7, #15]

	return sampleSuccess;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <wake>:

uint8_t wake(mpu_6050_t *my_mpu_6050)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
	uint8_t wakeSuccess = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = PWR_MGMT_1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	226b      	movs	r2, #107	; 0x6b
 8000d16:	701a      	strb	r2, [r3, #0]

//	/* Selecting 8MHz internal oscillator as clock source for MPU-6050 */
//	my_mpu_6050->i2c_tx_buff[1] = 0x00U;

	my_mpu_6050->i2c_tx_buff[1] = 0x01U;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]

	wakeSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2302      	movs	r3, #2
 8000d30:	21d0      	movs	r1, #208	; 0xd0
 8000d32:	f000 fff3 	bl	8001d1c <HAL_I2C_Master_Transmit>
 8000d36:	4603      	mov	r3, r0
 8000d38:	73fb      	strb	r3, [r7, #15]

	return wakeSuccess;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 fc2b 	bl	80015a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f838 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 f902 	bl	8000f58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d54:	f000 f890 	bl	8000e78 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000d58:	f000 f8ce 	bl	8000ef8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  init_MPU_6050(&my_imu, &hi2c1);
 8000d5c:	4914      	ldr	r1, [pc, #80]	; (8000db0 <main+0x6c>)
 8000d5e:	4815      	ldr	r0, [pc, #84]	; (8000db4 <main+0x70>)
 8000d60:	f7ff fe3c 	bl	80009dc <init_MPU_6050>

  wake(&my_imu);
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <main+0x70>)
 8000d66:	f7ff ffcd 	bl	8000d04 <wake>

  set_Sample_Rt(&my_imu);
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <main+0x70>)
 8000d6c:	f7ff ffaa 	bl	8000cc4 <set_Sample_Rt>

  accel_Gyro_Config(&my_imu);
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <main+0x70>)
 8000d72:	f7ff fe51 	bl	8000a18 <accel_Gyro_Config>

  fifo_Enable(&my_imu);
 8000d76:	480f      	ldr	r0, [pc, #60]	; (8000db4 <main+0x70>)
 8000d78:	f7ff fe8f 	bl	8000a9a <fifo_Enable>

//	  formatAccel(&my_imu);

	  //print_Accel(&my_imu, &huart3);

	  if (get_Gyro(&my_imu) == HAL_OK)
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <main+0x70>)
 8000d7e:	f7ff feac 	bl	8000ada <get_Gyro>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <main+0x50>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <main+0x74>)
 8000d8e:	f000 ff1b 	bl	8001bc8 <HAL_GPIO_WritePin>
 8000d92:	e004      	b.n	8000d9e <main+0x5a>
      else
      {
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2101      	movs	r1, #1
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <main+0x74>)
 8000d9a:	f000 ff15 	bl	8001bc8 <HAL_GPIO_WritePin>
      }

	  formatGyro(&my_imu);
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <main+0x70>)
 8000da0:	f7ff fed2 	bl	8000b48 <formatGyro>

	  print_Gyro(&my_imu, &huart3);
 8000da4:	4905      	ldr	r1, [pc, #20]	; (8000dbc <main+0x78>)
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <main+0x70>)
 8000da8:	f7ff ff3a 	bl	8000c20 <print_Gyro>
  {
 8000dac:	e7e6      	b.n	8000d7c <main+0x38>
 8000dae:	bf00      	nop
 8000db0:	200001fc 	.word	0x200001fc
 8000db4:	200002d8 	.word	0x200002d8
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	20000250 	.word	0x20000250

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2234      	movs	r2, #52	; 0x34
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 faa2 	bl	8004318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <SystemClock_Config+0xb0>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <SystemClock_Config+0xb0>)
 8000dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <SystemClock_Config+0xb0>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <SystemClock_Config+0xb4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <SystemClock_Config+0xb4>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <SystemClock_Config+0xb4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fc63 	bl	80026f8 <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000e38:	f000 f99e 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fefb 	bl	8002c54 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e64:	f000 f988 	bl	8001178 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3750      	adds	r7, #80	; 0x50
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_I2C1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <MX_I2C1_Init+0x7c>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 208;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e8a:	22d0      	movs	r2, #208	; 0xd0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eb4:	f000 fea2 	bl	8001bfc <HAL_I2C_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ebe:	f000 f95b 	bl	8001178 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ec6:	f001 fb7f 	bl	80025c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 f952 	bl	8001178 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ed8:	f001 fbc1 	bl	800265e <HAL_I2CEx_ConfigDigitalFilter>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 f949 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001fc 	.word	0x200001fc
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	00300208 	.word	0x00300208

08000ef8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <MX_USART3_UART_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_USART3_UART_Init+0x58>)
 8000f3c:	f002 fcd6 	bl	80038ec <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f46:	f000 f917 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000250 	.word	0x20000250
 8000f54:	40004800 	.word	0x40004800

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b7d      	ldr	r3, [pc, #500]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a7c      	ldr	r2, [pc, #496]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b7a      	ldr	r3, [pc, #488]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	4b77      	ldr	r3, [pc, #476]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a76      	ldr	r2, [pc, #472]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b74      	ldr	r3, [pc, #464]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b71      	ldr	r3, [pc, #452]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a70      	ldr	r2, [pc, #448]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b6e      	ldr	r3, [pc, #440]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b68      	ldr	r3, [pc, #416]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	4b65      	ldr	r3, [pc, #404]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a64      	ldr	r2, [pc, #400]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b62      	ldr	r3, [pc, #392]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a5e      	ldr	r2, [pc, #376]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <MX_GPIO_Init+0x20c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f244 0181 	movw	r1, #16513	; 0x4081
 8001004:	4858      	ldr	r0, [pc, #352]	; (8001168 <MX_GPIO_Init+0x210>)
 8001006:	f000 fddf 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	4857      	ldr	r0, [pc, #348]	; (800116c <MX_GPIO_Init+0x214>)
 8001010:	f000 fdda 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4851      	ldr	r0, [pc, #324]	; (8001170 <MX_GPIO_Init+0x218>)
 800102c:	f000 fc20 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001030:	2332      	movs	r3, #50	; 0x32
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001040:	230b      	movs	r3, #11
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4849      	ldr	r0, [pc, #292]	; (8001170 <MX_GPIO_Init+0x218>)
 800104c:	f000 fc10 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001050:	2386      	movs	r3, #134	; 0x86
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001060:	230b      	movs	r3, #11
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4842      	ldr	r0, [pc, #264]	; (8001174 <MX_GPIO_Init+0x21c>)
 800106c:	f000 fc00 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001070:	f244 0381 	movw	r3, #16513	; 0x4081
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4837      	ldr	r0, [pc, #220]	; (8001168 <MX_GPIO_Init+0x210>)
 800108a:	f000 fbf1 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	482f      	ldr	r0, [pc, #188]	; (8001168 <MX_GPIO_Init+0x210>)
 80010ac:	f000 fbe0 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010b0:	2340      	movs	r3, #64	; 0x40
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <MX_GPIO_Init+0x214>)
 80010c8:	f000 fbd2 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4823      	ldr	r0, [pc, #140]	; (800116c <MX_GPIO_Init+0x214>)
 80010e0:	f000 fbc6 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010e4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f6:	230a      	movs	r3, #10
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_GPIO_Init+0x21c>)
 8001102:	f000 fbb5 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_GPIO_Init+0x21c>)
 800111c:	f000 fba8 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001120:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001132:	230b      	movs	r3, #11
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <MX_GPIO_Init+0x214>)
 800113e:	f000 fb97 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_GPIO_Init+0x210>)
 8001158:	f000 fb8a 	bl	8001870 <HAL_GPIO_Init>

}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	; 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400
 800116c:	40021800 	.word	0x40021800
 8001170:	40020800 	.word	0x40020800
 8001174:	40020000 	.word	0x40020000

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x44>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x44>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x44>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_MspInit+0x44>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_MspInit+0x44>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_MspInit+0x44>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ae      	sub	sp, #184	; 0xb8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2290      	movs	r2, #144	; 0x90
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 f893 	bl	8004318 <memset>
  if(hi2c->Instance==I2C1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a22      	ldr	r2, [pc, #136]	; (8001280 <HAL_I2C_MspInit+0xb4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d13c      	bne.n	8001276 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001200:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001202:	2300      	movs	r3, #0
 8001204:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4618      	mov	r0, r3
 800120c:	f001 ff46 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001216:	f7ff ffaf 	bl	8001178 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_I2C_MspInit+0xb8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_I2C_MspInit+0xb8>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_I2C_MspInit+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001232:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123a:	2312      	movs	r3, #18
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800124c:	2304      	movs	r3, #4
 800124e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <HAL_I2C_MspInit+0xbc>)
 800125a:	f000 fb09 	bl	8001870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_I2C_MspInit+0xb8>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_I2C_MspInit+0xb8>)
 8001264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_I2C_MspInit+0xb8>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	37b8      	adds	r7, #184	; 0xb8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40005400 	.word	0x40005400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020400 	.word	0x40020400

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ae      	sub	sp, #184	; 0xb8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2290      	movs	r2, #144	; 0x90
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 f833 	bl	8004318 <memset>
  if(huart->Instance==USART3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <HAL_UART_MspInit+0xb4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d13c      	bne.n	8001336 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fee6 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012d6:	f7ff ff4f 	bl	8001178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_UART_MspInit+0xb8>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_UART_MspInit+0xb8>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_UART_MspInit+0xb8>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_UART_MspInit+0xb8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_UART_MspInit+0xb8>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_UART_MspInit+0xb8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800130a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001324:	2307      	movs	r3, #7
 8001326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_UART_MspInit+0xbc>)
 8001332:	f000 fa9d 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	37b8      	adds	r7, #184	; 0xb8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004800 	.word	0x40004800
 8001344:	40023800 	.word	0x40023800
 8001348:	40020c00 	.word	0x40020c00

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f940 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_kill>:

int _kill(int pid, int sig)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ba:	f002 ff83 	bl	80042c4 <__errno>
 80013be:	4603      	mov	r3, r0
 80013c0:	2216      	movs	r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
  return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_exit>:

void _exit (int status)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe7 	bl	80013b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013e2:	e7fe      	b.n	80013e2 <_exit+0x12>

080013e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
  }

  return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf1      	blt.n	8001430 <_write+0x12>
  }
  return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_close>:

int _close(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
  return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f002 fee8 	bl	80042c4 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20080000 	.word	0x20080000
 8001520:	00000400 	.word	0x00000400
 8001524:	2000030c 	.word	0x2000030c
 8001528:	20000328 	.word	0x20000328

0800152c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800156c:	4c0b      	ldr	r4, [pc, #44]	; (800159c <LoopFillZerobss+0x26>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157a:	f7ff ffd7 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f002 fea7 	bl	80042d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fbdf 	bl	8000d44 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001594:	08008f2c 	.word	0x08008f2c
  ldr r2, =_sbss
 8001598:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800159c:	20000324 	.word	0x20000324

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>

080015a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a6:	2003      	movs	r0, #3
 80015a8:	f000 f92e 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 f805 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b2:	f7ff fde7 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x54>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x58>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f93b 	bl	8001856 <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f8:	f000 f911 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_InitTick+0x5c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	20000008 	.word	0x20000008
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	20000310 	.word	0x20000310

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000310 	.word	0x20000310

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffde 	bl	8001644 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	05fa0000 	.word	0x05fa0000

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff47 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff5c 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffb0 	bl	80017c4 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e175      	b.n	8001b7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 8164 	bne.w	8001b76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <HAL_GPIO_Init+0x56>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80be 	beq.w	8001b76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_GPIO_Init+0x324>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a12:	4a61      	ldr	r2, [pc, #388]	; (8001b98 <HAL_GPIO_Init+0x328>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a58      	ldr	r2, [pc, #352]	; (8001b9c <HAL_GPIO_Init+0x32c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d037      	beq.n	8001aae <HAL_GPIO_Init+0x23e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a57      	ldr	r2, [pc, #348]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d031      	beq.n	8001aaa <HAL_GPIO_Init+0x23a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d02b      	beq.n	8001aa6 <HAL_GPIO_Init+0x236>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_GPIO_Init+0x338>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d025      	beq.n	8001aa2 <HAL_GPIO_Init+0x232>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a54      	ldr	r2, [pc, #336]	; (8001bac <HAL_GPIO_Init+0x33c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01f      	beq.n	8001a9e <HAL_GPIO_Init+0x22e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a53      	ldr	r2, [pc, #332]	; (8001bb0 <HAL_GPIO_Init+0x340>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x22a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x344>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x348>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x222>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_GPIO_Init+0x34c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x21e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x21a>
 8001a86:	2309      	movs	r3, #9
 8001a88:	e012      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	e010      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a8e:	2308      	movs	r3, #8
 8001a90:	e00e      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00c      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a96:	2306      	movs	r3, #6
 8001a98:	e00a      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	e008      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ac0:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_GPIO_Init+0x328>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b1c:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b46:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b0f      	cmp	r3, #15
 8001b80:	f67f ae86 	bls.w	8001890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40021c00 	.word	0x40021c00
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40022400 	.word	0x40022400
 8001bc4:	40013c00 	.word	0x40013c00

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07f      	b.n	8001d0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fad2 	bl	80011cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e006      	b.n	8001c84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d104      	bne.n	8001c96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_I2C_Init+0x11c>)
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69d9      	ldr	r1, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	02008000 	.word	0x02008000

08001d1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	461a      	mov	r2, r3
 8001d28:	460b      	mov	r3, r1
 8001d2a:	817b      	strh	r3, [r7, #10]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	f040 80da 	bne.w	8001ef2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2C_Master_Transmit+0x30>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0d3      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x1d8>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d54:	f7ff fc76 	bl	8001644 <HAL_GetTick>
 8001d58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2319      	movs	r3, #25
 8001d60:	2201      	movs	r2, #1
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f9e6 	bl	8002138 <I2C_WaitOnFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0be      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2221      	movs	r2, #33	; 0x21
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2210      	movs	r2, #16
 8001d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	893a      	ldrh	r2, [r7, #8]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2bff      	cmp	r3, #255	; 0xff
 8001da6:	d90e      	bls.n	8001dc6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	22ff      	movs	r2, #255	; 0xff
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	8979      	ldrh	r1, [r7, #10]
 8001db6:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_I2C_Master_Transmit+0x1e0>)
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 fbd0 	bl	8002564 <I2C_TransferConfig>
 8001dc4:	e06c      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	8979      	ldrh	r1, [r7, #10]
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <HAL_I2C_Master_Transmit+0x1e0>)
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 fbbf 	bl	8002564 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001de6:	e05b      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	6a39      	ldr	r1, [r7, #32]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f9e3 	bl	80021b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e07b      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d034      	beq.n	8001ea0 <HAL_I2C_Master_Transmit+0x184>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d130      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	2200      	movs	r2, #0
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f975 	bl	8002138 <I2C_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e04d      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d90e      	bls.n	8001e80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	8979      	ldrh	r1, [r7, #10]
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fb73 	bl	8002564 <I2C_TransferConfig>
 8001e7e:	e00f      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	8979      	ldrh	r1, [r7, #10]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fb62 	bl	8002564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d19e      	bne.n	8001de8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f9c2 	bl	8002238 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01a      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_I2C_Master_Transmit+0x1e4>)
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	80002000 	.word	0x80002000
 8001f00:	fe00e800 	.word	0xfe00e800

08001f04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	460b      	mov	r3, r1
 8001f12:	817b      	strh	r3, [r7, #10]
 8001f14:	4613      	mov	r3, r2
 8001f16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	f040 80db 	bne.w	80020dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2C_Master_Receive+0x30>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e0d4      	b.n	80020de <HAL_I2C_Master_Receive+0x1da>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f3c:	f7ff fb82 	bl	8001644 <HAL_GetTick>
 8001f40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2319      	movs	r3, #25
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f8f2 	bl	8002138 <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0bf      	b.n	80020de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2222      	movs	r2, #34	; 0x22
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	893a      	ldrh	r2, [r7, #8]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d90e      	bls.n	8001fae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	22ff      	movs	r2, #255	; 0xff
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	4b52      	ldr	r3, [pc, #328]	; (80020e8 <HAL_I2C_Master_Receive+0x1e4>)
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fadc 	bl	8002564 <I2C_TransferConfig>
 8001fac:	e06d      	b.n	800208a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	8979      	ldrh	r1, [r7, #10]
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <HAL_I2C_Master_Receive+0x1e4>)
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 facb 	bl	8002564 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001fce:	e05c      	b.n	800208a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	6a39      	ldr	r1, [r7, #32]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f96b 	bl	80022b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e07c      	b.n	80020de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d034      	beq.n	800208a <HAL_I2C_Master_Receive+0x186>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	2b00      	cmp	r3, #0
 8002026:	d130      	bne.n	800208a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	2200      	movs	r2, #0
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f880 	bl	8002138 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e04d      	b.n	80020de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	2bff      	cmp	r3, #255	; 0xff
 800204a:	d90e      	bls.n	800206a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	22ff      	movs	r2, #255	; 0xff
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	b2da      	uxtb	r2, r3
 8002058:	8979      	ldrh	r1, [r7, #10]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fa7e 	bl	8002564 <I2C_TransferConfig>
 8002068:	e00f      	b.n	800208a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	b2da      	uxtb	r2, r3
 800207a:	8979      	ldrh	r1, [r7, #10]
 800207c:	2300      	movs	r3, #0
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fa6d 	bl	8002564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d19d      	bne.n	8001fd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	6a39      	ldr	r1, [r7, #32]
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f8cd 	bl	8002238 <I2C_WaitOnSTOPFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e01a      	b.n	80020de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2220      	movs	r2, #32
 80020ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_I2C_Master_Receive+0x1e8>)
 80020bc:	400b      	ands	r3, r1
 80020be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e000      	b.n	80020de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	80002400 	.word	0x80002400
 80020ec:	fe00e800 	.word	0xfe00e800

080020f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d103      	bne.n	800210e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d007      	beq.n	800212c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	619a      	str	r2, [r3, #24]
  }
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002148:	e022      	b.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002150:	d01e      	beq.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff fa77 	bl	8001644 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e00f      	b.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4013      	ands	r3, r2
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	429a      	cmp	r2, r3
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d0cd      	beq.n	800214a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021c4:	e02c      	b.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8ea 	bl	80023a4 <I2C_IsErrorOccurred>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e02a      	b.n	8002230 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e0:	d01e      	beq.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e2:	f7ff fa2f 	bl	8001644 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d302      	bcc.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d113      	bne.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e007      	b.n	8002230 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d1cb      	bne.n	80021c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002244:	e028      	b.n	8002298 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f8aa 	bl	80023a4 <I2C_IsErrorOccurred>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e026      	b.n	80022a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225a:	f7ff f9f3 	bl	8001644 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	429a      	cmp	r2, r3
 8002268:	d302      	bcc.n	8002270 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d113      	bne.n	8002298 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e007      	b.n	80022a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d1cf      	bne.n	8002246 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022bc:	e064      	b.n	8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f86e 	bl	80023a4 <I2C_IsErrorOccurred>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e062      	b.n	8002398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d138      	bne.n	8002352 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d105      	bne.n	80022fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e04e      	b.n	8002398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b10      	cmp	r3, #16
 8002306:	d107      	bne.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2210      	movs	r2, #16
 800230e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2204      	movs	r2, #4
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
 8002316:	e002      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2220      	movs	r2, #32
 8002324:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002332:	400b      	ands	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7ff f977 	bl	8001644 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10f      	bne.n	8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e007      	b.n	8002398 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b04      	cmp	r3, #4
 8002394:	d193      	bne.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	fe00e800 	.word	0xfe00e800

080023a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d068      	beq.n	80024a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2210      	movs	r2, #16
 80023d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d8:	e049      	b.n	800246e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e0:	d045      	beq.n	800246e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7ff f92f 	bl	8001644 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_IsErrorOccurred+0x54>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d13a      	bne.n	800246e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002402:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800240a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800241a:	d121      	bne.n	8002460 <I2C_IsErrorOccurred+0xbc>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002422:	d01d      	beq.n	8002460 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b20      	cmp	r3, #32
 8002428:	d01a      	beq.n	8002460 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002438:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800243a:	f7ff f903 	bl	8001644 <HAL_GetTick>
 800243e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002440:	e00e      	b.n	8002460 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002442:	f7ff f8ff 	bl	8001644 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b19      	cmp	r3, #25
 800244e:	d907      	bls.n	8002460 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f043 0320 	orr.w	r3, r3, #32
 8002456:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800245e:	e006      	b.n	800246e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b20      	cmp	r3, #32
 800246c:	d1e9      	bne.n	8002442 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d003      	beq.n	8002484 <I2C_IsErrorOccurred+0xe0>
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0aa      	beq.n	80023da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01c      	beq.n	8002552 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fde9 	bl	80020f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <I2C_IsErrorOccurred+0x1bc>)
 800252a:	400b      	ands	r3, r1
 800252c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	431a      	orrs	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002556:	4618      	mov	r0, r3
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	4613      	mov	r3, r2
 8002574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800257c:	7a7b      	ldrb	r3, [r7, #9]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002584:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	4313      	orrs	r3, r2
 800258e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002592:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <I2C_TransferConfig+0x60>)
 80025a4:	430b      	orrs	r3, r1
 80025a6:	43db      	mvns	r3, r3
 80025a8:	ea02 0103 	and.w	r1, r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	03ff63ff 	.word	0x03ff63ff

080025c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d138      	bne.n	8002650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e032      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800261a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	d139      	bne.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800267e:	2302      	movs	r3, #2
 8002680:	e033      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2224      	movs	r2, #36	; 0x24
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e29b      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8087 	beq.w	800282a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800271c:	4b96      	ldr	r3, [pc, #600]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b04      	cmp	r3, #4
 8002726:	d00c      	beq.n	8002742 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002728:	4b93      	ldr	r3, [pc, #588]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d112      	bne.n	800275a <HAL_RCC_OscConfig+0x62>
 8002734:	4b90      	ldr	r3, [pc, #576]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002740:	d10b      	bne.n	800275a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002742:	4b8d      	ldr	r3, [pc, #564]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d06c      	beq.n	8002828 <HAL_RCC_OscConfig+0x130>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d168      	bne.n	8002828 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e275      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x7a>
 8002764:	4b84      	ldr	r3, [pc, #528]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a83      	ldr	r2, [pc, #524]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e02e      	b.n	80027d0 <HAL_RCC_OscConfig+0xd8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x9c>
 800277a:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7e      	ldr	r2, [pc, #504]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7b      	ldr	r2, [pc, #492]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xd8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0xc0>
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a75      	ldr	r2, [pc, #468]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xd8>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6e      	ldr	r2, [pc, #440]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6b      	ldr	r2, [pc, #428]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff34 	bl	8001644 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7fe ff30 	bl	8001644 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e229      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b61      	ldr	r3, [pc, #388]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xe8>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe ff20 	bl	8001644 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe ff1c 	bl	8001644 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e215      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	4b57      	ldr	r3, [pc, #348]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x110>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d069      	beq.n	800290a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002836:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x190>
 800284e:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x17a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1e9      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	493d      	ldr	r1, [pc, #244]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e040      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d023      	beq.n	80028d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a38      	ldr	r2, [pc, #224]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fed2 	bl	8001644 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fe fece 	bl	8001644 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1c7      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4929      	ldr	r1, [pc, #164]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
 80028d6:	e018      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe feae 	bl	8001644 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fe feaa 	bl	8001644 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1a3      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d038      	beq.n	8002988 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d019      	beq.n	8002952 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe fe8b 	bl	8001644 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002932:	f7fe fe87 	bl	8001644 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e180      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x23a>
 8002950:	e01a      	b.n	8002988 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe fe71 	bl	8001644 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002966:	f7fe fe6d 	bl	8001644 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d903      	bls.n	800297c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e166      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
 8002978:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ee      	bne.n	8002966 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a4 	beq.w	8002ade <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002996:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a88      	ldr	r2, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b86      	ldr	r3, [pc, #536]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	4b83      	ldr	r3, [pc, #524]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029ca:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fe35 	bl	8001644 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe fe31 	bl	8001644 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b64      	cmp	r3, #100	; 0x64
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e12a      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f0:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x31a>
 8002a04:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	4a6f      	ldr	r2, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a10:	e02d      	b.n	8002a6e <HAL_RCC_OscConfig+0x376>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x33c>
 8002a1a:	4b6b      	ldr	r3, [pc, #428]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
 8002a26:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a67      	ldr	r2, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	e01c      	b.n	8002a6e <HAL_RCC_OscConfig+0x376>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCC_OscConfig+0x35e>
 8002a3c:	4b62      	ldr	r3, [pc, #392]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
 8002a48:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	; 0x70
 8002a54:	e00b      	b.n	8002a6e <HAL_RCC_OscConfig+0x376>
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d015      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7fe fde5 	bl	8001644 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fde1 	bl	8001644 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0d8      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ee      	beq.n	8002a7e <HAL_RCC_OscConfig+0x386>
 8002aa0:	e014      	b.n	8002acc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fdcf 	bl	8001644 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fdcb 	bl	8001644 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0c2      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ee      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80ae 	beq.w	8002c44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d06d      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d14b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a31      	ldr	r2, [pc, #196]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fd9c 	bl	8001644 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fd98 	bl	8001644 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e091      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	3b01      	subs	r3, #1
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	491b      	ldr	r1, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fd6a 	bl	8001644 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fd66 	bl	8001644 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e05f      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x47c>
 8002b92:	e057      	b.n	8002c44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fd50 	bl	8001644 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fd4c 	bl	8001644 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e045      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4b0>
 8002bc6:	e03d      	b.n	8002c44 <HAL_RCC_OscConfig+0x54c>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <HAL_RCC_OscConfig+0x558>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d030      	beq.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d129      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d122      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d119      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d10f      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0d0      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d910      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 020f 	bic.w	r2, r3, #15
 8002c82:	4965      	ldr	r1, [pc, #404]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	494d      	ldr	r1, [pc, #308]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d040      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d115      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e073      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06b      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 0203 	bic.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4936      	ldr	r1, [pc, #216]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fc7c 	bl	8001644 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fe fc78 	bl	8001644 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e053      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 020c 	and.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1eb      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d210      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 020f 	bic.w	r2, r3, #15
 8002d8e:	4922      	ldr	r1, [pc, #136]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e032      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4916      	ldr	r1, [pc, #88]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	490e      	ldr	r1, [pc, #56]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de6:	f000 f821 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	490a      	ldr	r1, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x1cc>)
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1d0>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x1d4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fbd8 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08008a5c 	.word	0x08008a5c
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b094      	sub	sp, #80	; 0x50
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	647b      	str	r3, [r7, #68]	; 0x44
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e44:	4b79      	ldr	r3, [pc, #484]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x40>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f200 80e1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5e:	e0db      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e64:	e0db      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e66:	4b72      	ldr	r3, [pc, #456]	; (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6a:	e0d8      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e76:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6139      	str	r1, [r7, #16]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4651      	mov	r1, sl
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	eb49 0303 	adc.w	r3, r9, r3
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	028b      	lsls	r3, r1, #10
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f28:	4621      	mov	r1, r4
 8002f2a:	028a      	lsls	r2, r1, #10
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f3c:	f7fd fb94 	bl	8000668 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f48:	e058      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	2200      	movs	r2, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	4611      	mov	r1, r2
 8002f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f76:	0150      	lsls	r0, r2, #5
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f82:	4649      	mov	r1, r9
 8002f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	00eb      	lsls	r3, r5, #3
 8002fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	eb45 0303 	adc.w	r3, r5, r3
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	028b      	lsls	r3, r1, #10
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fdc:	4621      	mov	r1, r4
 8002fde:	028a      	lsls	r2, r1, #10
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff0:	f7fd fb3a 	bl	8000668 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800300c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003020:	4618      	mov	r0, r3
 8003022:	3750      	adds	r7, #80	; 0x50
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	00f42400 	.word	0x00f42400

08003034 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	08008a6c 	.word	0x08008a6c

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08008a6c 	.word	0x08008a6c

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030c4:	4b69      	ldr	r3, [pc, #420]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a68      	ldr	r2, [pc, #416]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030ce:	6093      	str	r3, [r2, #8]
 80030d0:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	4964      	ldr	r1, [pc, #400]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d017      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f6:	4b5d      	ldr	r3, [pc, #372]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	4959      	ldr	r1, [pc, #356]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003114:	d101      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003122:	2301      	movs	r3, #1
 8003124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003132:	4b4e      	ldr	r3, [pc, #312]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003138:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	494a      	ldr	r1, [pc, #296]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003150:	d101      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 808b 	beq.w	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4a39      	ldr	r2, [pc, #228]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	; 0x40
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a34      	ldr	r2, [pc, #208]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a4:	f7fe fa4e 	bl	8001644 <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7fe fa4a 	bl	8001644 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e38f      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d035      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d02e      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a1a      	ldr	r2, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d114      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fa12 	bl	8001644 <HAL_GetTick>
 8003220:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe fa0e 	bl	8001644 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e351      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003252:	d111      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003262:	400b      	ands	r3, r1
 8003264:	4901      	ldr	r1, [pc, #4]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
 800326a:	e00b      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800326c:	40023800 	.word	0x40023800
 8003270:	40007000 	.word	0x40007000
 8003274:	0ffffcff 	.word	0x0ffffcff
 8003278:	4bac      	ldr	r3, [pc, #688]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4aab      	ldr	r2, [pc, #684]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003282:	6093      	str	r3, [r2, #8]
 8003284:	4ba9      	ldr	r3, [pc, #676]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003290:	49a6      	ldr	r1, [pc, #664]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003292:	4313      	orrs	r3, r2
 8003294:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032a2:	4ba2      	ldr	r3, [pc, #648]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a8:	4aa0      	ldr	r2, [pc, #640]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032b2:	4b9e      	ldr	r3, [pc, #632]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	499b      	ldr	r1, [pc, #620]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d0:	4b96      	ldr	r3, [pc, #600]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032de:	4993      	ldr	r1, [pc, #588]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f2:	4b8e      	ldr	r3, [pc, #568]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	498a      	ldr	r1, [pc, #552]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003314:	4b85      	ldr	r3, [pc, #532]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003322:	4982      	ldr	r1, [pc, #520]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003336:	4b7d      	ldr	r3, [pc, #500]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4979      	ldr	r1, [pc, #484]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003358:	4b74      	ldr	r3, [pc, #464]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f023 0203 	bic.w	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4971      	ldr	r1, [pc, #452]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337a:	4b6c      	ldr	r3, [pc, #432]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f023 020c 	bic.w	r2, r3, #12
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	4968      	ldr	r1, [pc, #416]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800339c:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	4960      	ldr	r1, [pc, #384]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033be:	4b5b      	ldr	r3, [pc, #364]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033cc:	4957      	ldr	r1, [pc, #348]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e0:	4b52      	ldr	r3, [pc, #328]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	494f      	ldr	r1, [pc, #316]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	4946      	ldr	r1, [pc, #280]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003424:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	493e      	ldr	r1, [pc, #248]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003446:	4b39      	ldr	r3, [pc, #228]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003454:	4935      	ldr	r1, [pc, #212]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003468:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003476:	492d      	ldr	r1, [pc, #180]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d011      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	4924      	ldr	r1, [pc, #144]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d8:	4914      	ldr	r1, [pc, #80]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fc:	490b      	ldr	r1, [pc, #44]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00f      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	4902      	ldr	r1, [pc, #8]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003528:	e002      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800353c:	4b8a      	ldr	r3, [pc, #552]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800353e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003542:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	4986      	ldr	r1, [pc, #536]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003560:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003566:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	497d      	ldr	r1, [pc, #500]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d006      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80d6 	beq.w	8003738 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800358c:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a75      	ldr	r2, [pc, #468]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003598:	f7fe f854 	bl	8001644 <HAL_GetTick>
 800359c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a0:	f7fe f850 	bl	8001644 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e195      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d021      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11d      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035d2:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e0:	4b61      	ldr	r3, [pc, #388]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e6:	0e1b      	lsrs	r3, r3, #24
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	019a      	lsls	r2, r3, #6
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	4958      	ldr	r1, [pc, #352]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d129      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800363a:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003648:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	0f1b      	lsrs	r3, r3, #28
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	019a      	lsls	r2, r3, #6
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	061b      	lsls	r3, r3, #24
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	071b      	lsls	r3, r3, #28
 800366e:	493e      	ldr	r1, [pc, #248]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003676:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367c:	f023 021f 	bic.w	r2, r3, #31
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	3b01      	subs	r3, #1
 8003686:	4938      	ldr	r1, [pc, #224]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01d      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800369a:	4b33      	ldr	r3, [pc, #204]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a0:	0e1b      	lsrs	r3, r3, #24
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	0f1b      	lsrs	r3, r3, #28
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	431a      	orrs	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4926      	ldr	r1, [pc, #152]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d011      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	019a      	lsls	r2, r3, #6
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	491a      	ldr	r1, [pc, #104]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003712:	f7fd ff97 	bl	8001644 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371a:	f7fd ff93 	bl	8001644 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	; 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0d8      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b01      	cmp	r3, #1
 800373c:	f040 80ce 	bne.w	80038dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fd ff7a 	bl	8001644 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003752:	e00b      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003754:	f7fd ff76 	bl	8001644 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d904      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0bb      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800376c:	4b5e      	ldr	r3, [pc, #376]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003778:	d0ec      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02e      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d12a      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037a2:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037b0:	4b4d      	ldr	r3, [pc, #308]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	0f1b      	lsrs	r3, r3, #28
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	019a      	lsls	r2, r3, #6
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	071b      	lsls	r3, r3, #28
 80037d6:	4944      	ldr	r1, [pc, #272]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037de:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	493d      	ldr	r1, [pc, #244]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d022      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800380c:	d11d      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800380e:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	0e1b      	lsrs	r3, r3, #24
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	0f1b      	lsrs	r3, r3, #28
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	019a      	lsls	r2, r3, #6
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	431a      	orrs	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	071b      	lsls	r3, r3, #28
 8003842:	4929      	ldr	r1, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d028      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	0e1b      	lsrs	r3, r3, #24
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003864:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	019a      	lsls	r2, r3, #6
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	4917      	ldr	r1, [pc, #92]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4911      	ldr	r1, [pc, #68]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fd fec6 	bl	8001644 <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038bc:	f7fd fec2 	bl	8001644 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e007      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038da:	d1ef      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800

080038ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e040      	b.n	8003980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fcbc 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8b0 	bl	8003a90 <UART_SetConfig>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e022      	b.n	8003980 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fb08 	bl	8003f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fb8f 	bl	800409c <UART_CheckIdleState>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399c:	2b20      	cmp	r3, #32
 800399e:	d171      	bne.n	8003a84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_UART_Transmit+0x24>
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e06a      	b.n	8003a86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2221      	movs	r2, #33	; 0x21
 80039bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039be:	f7fd fe41 	bl	8001644 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d108      	bne.n	80039f0 <HAL_UART_Transmit+0x68>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	e003      	b.n	80039f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039f8:	e02c      	b.n	8003a54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fb96 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e038      	b.n	8003a86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e007      	b.n	8003a42 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1cc      	bne.n	80039fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fb63 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e005      	b.n	8003a86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4ba6      	ldr	r3, [pc, #664]	; (8003d54 <UART_SetConfig+0x2c4>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a94      	ldr	r2, [pc, #592]	; (8003d58 <UART_SetConfig+0x2c8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d120      	bne.n	8003b4e <UART_SetConfig+0xbe>
 8003b0c:	4b93      	ldr	r3, [pc, #588]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d816      	bhi.n	8003b48 <UART_SetConfig+0xb8>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <UART_SetConfig+0x90>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b3d 	.word	0x08003b3d
 8003b28:	08003b37 	.word	0x08003b37
 8003b2c:	08003b43 	.word	0x08003b43
 8003b30:	2301      	movs	r3, #1
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e150      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003b36:	2302      	movs	r3, #2
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e14d      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e14a      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003b42:	2308      	movs	r3, #8
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e147      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e144      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a83      	ldr	r2, [pc, #524]	; (8003d60 <UART_SetConfig+0x2d0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d132      	bne.n	8003bbe <UART_SetConfig+0x12e>
 8003b58:	4b80      	ldr	r3, [pc, #512]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d828      	bhi.n	8003bb8 <UART_SetConfig+0x128>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0xdc>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003bb9 	.word	0x08003bb9
 8003b78:	08003bb9 	.word	0x08003bb9
 8003b7c:	08003bad 	.word	0x08003bad
 8003b80:	08003bb9 	.word	0x08003bb9
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003bb9 	.word	0x08003bb9
 8003b8c:	08003ba7 	.word	0x08003ba7
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bb9 	.word	0x08003bb9
 8003b9c:	08003bb3 	.word	0x08003bb3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e118      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e115      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003bac:	2304      	movs	r3, #4
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e112      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e10f      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e10c      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a68      	ldr	r2, [pc, #416]	; (8003d64 <UART_SetConfig+0x2d4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d120      	bne.n	8003c0a <UART_SetConfig+0x17a>
 8003bc8:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bd2:	2b30      	cmp	r3, #48	; 0x30
 8003bd4:	d013      	beq.n	8003bfe <UART_SetConfig+0x16e>
 8003bd6:	2b30      	cmp	r3, #48	; 0x30
 8003bd8:	d814      	bhi.n	8003c04 <UART_SetConfig+0x174>
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d009      	beq.n	8003bf2 <UART_SetConfig+0x162>
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d810      	bhi.n	8003c04 <UART_SetConfig+0x174>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <UART_SetConfig+0x15c>
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d006      	beq.n	8003bf8 <UART_SetConfig+0x168>
 8003bea:	e00b      	b.n	8003c04 <UART_SetConfig+0x174>
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e0f2      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e0ef      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e0ec      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e0e9      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c04:	2310      	movs	r3, #16
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e0e6      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a56      	ldr	r2, [pc, #344]	; (8003d68 <UART_SetConfig+0x2d8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d120      	bne.n	8003c56 <UART_SetConfig+0x1c6>
 8003c14:	4b51      	ldr	r3, [pc, #324]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c20:	d013      	beq.n	8003c4a <UART_SetConfig+0x1ba>
 8003c22:	2bc0      	cmp	r3, #192	; 0xc0
 8003c24:	d814      	bhi.n	8003c50 <UART_SetConfig+0x1c0>
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d009      	beq.n	8003c3e <UART_SetConfig+0x1ae>
 8003c2a:	2b80      	cmp	r3, #128	; 0x80
 8003c2c:	d810      	bhi.n	8003c50 <UART_SetConfig+0x1c0>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <UART_SetConfig+0x1a8>
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d006      	beq.n	8003c44 <UART_SetConfig+0x1b4>
 8003c36:	e00b      	b.n	8003c50 <UART_SetConfig+0x1c0>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e0cc      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e0c9      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c44:	2304      	movs	r3, #4
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e0c6      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e0c3      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c50:	2310      	movs	r3, #16
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e0c0      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a44      	ldr	r2, [pc, #272]	; (8003d6c <UART_SetConfig+0x2dc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d125      	bne.n	8003cac <UART_SetConfig+0x21c>
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6e:	d017      	beq.n	8003ca0 <UART_SetConfig+0x210>
 8003c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c74:	d817      	bhi.n	8003ca6 <UART_SetConfig+0x216>
 8003c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7a:	d00b      	beq.n	8003c94 <UART_SetConfig+0x204>
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d811      	bhi.n	8003ca6 <UART_SetConfig+0x216>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <UART_SetConfig+0x1fe>
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8a:	d006      	beq.n	8003c9a <UART_SetConfig+0x20a>
 8003c8c:	e00b      	b.n	8003ca6 <UART_SetConfig+0x216>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e0a1      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c94:	2302      	movs	r3, #2
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e09e      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e09b      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e098      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003ca6:	2310      	movs	r3, #16
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e095      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2f      	ldr	r2, [pc, #188]	; (8003d70 <UART_SetConfig+0x2e0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d125      	bne.n	8003d02 <UART_SetConfig+0x272>
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc4:	d017      	beq.n	8003cf6 <UART_SetConfig+0x266>
 8003cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cca:	d817      	bhi.n	8003cfc <UART_SetConfig+0x26c>
 8003ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd0:	d00b      	beq.n	8003cea <UART_SetConfig+0x25a>
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d811      	bhi.n	8003cfc <UART_SetConfig+0x26c>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <UART_SetConfig+0x254>
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce0:	d006      	beq.n	8003cf0 <UART_SetConfig+0x260>
 8003ce2:	e00b      	b.n	8003cfc <UART_SetConfig+0x26c>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e076      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e073      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e070      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e06d      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e06a      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <UART_SetConfig+0x2e4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d138      	bne.n	8003d7e <UART_SetConfig+0x2ee>
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <UART_SetConfig+0x2cc>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d1a:	d017      	beq.n	8003d4c <UART_SetConfig+0x2bc>
 8003d1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d20:	d82a      	bhi.n	8003d78 <UART_SetConfig+0x2e8>
 8003d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d26:	d00b      	beq.n	8003d40 <UART_SetConfig+0x2b0>
 8003d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2c:	d824      	bhi.n	8003d78 <UART_SetConfig+0x2e8>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <UART_SetConfig+0x2aa>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d006      	beq.n	8003d46 <UART_SetConfig+0x2b6>
 8003d38:	e01e      	b.n	8003d78 <UART_SetConfig+0x2e8>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e04b      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003d40:	2302      	movs	r3, #2
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e048      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003d46:	2304      	movs	r3, #4
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e045      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e042      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003d52:	bf00      	nop
 8003d54:	efff69f3 	.word	0xefff69f3
 8003d58:	40011000 	.word	0x40011000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40004400 	.word	0x40004400
 8003d64:	40004800 	.word	0x40004800
 8003d68:	40004c00 	.word	0x40004c00
 8003d6c:	40005000 	.word	0x40005000
 8003d70:	40011400 	.word	0x40011400
 8003d74:	40007800 	.word	0x40007800
 8003d78:	2310      	movs	r3, #16
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e02c      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <UART_SetConfig+0x4bc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d125      	bne.n	8003dd4 <UART_SetConfig+0x344>
 8003d88:	4b71      	ldr	r3, [pc, #452]	; (8003f50 <UART_SetConfig+0x4c0>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d96:	d017      	beq.n	8003dc8 <UART_SetConfig+0x338>
 8003d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d9c:	d817      	bhi.n	8003dce <UART_SetConfig+0x33e>
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d00b      	beq.n	8003dbc <UART_SetConfig+0x32c>
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da8:	d811      	bhi.n	8003dce <UART_SetConfig+0x33e>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <UART_SetConfig+0x326>
 8003dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db2:	d006      	beq.n	8003dc2 <UART_SetConfig+0x332>
 8003db4:	e00b      	b.n	8003dce <UART_SetConfig+0x33e>
 8003db6:	2300      	movs	r3, #0
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e00d      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e00a      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e007      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e004      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e001      	b.n	8003dd8 <UART_SetConfig+0x348>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d15b      	bne.n	8003e9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003de2:	7ffb      	ldrb	r3, [r7, #31]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d828      	bhi.n	8003e3a <UART_SetConfig+0x3aa>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x360>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7ff f91a 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8003e18:	61b8      	str	r0, [r7, #24]
        break;
 8003e1a:	e013      	b.n	8003e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7ff f92a 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8003e20:	61b8      	str	r0, [r7, #24]
        break;
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b4b      	ldr	r3, [pc, #300]	; (8003f54 <UART_SetConfig+0x4c4>)
 8003e26:	61bb      	str	r3, [r7, #24]
        break;
 8003e28:	e00c      	b.n	8003e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe ffff 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8003e2e:	61b8      	str	r0, [r7, #24]
        break;
 8003e30:	e008      	b.n	8003e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	61bb      	str	r3, [r7, #24]
        break;
 8003e38:	e004      	b.n	8003e44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	77bb      	strb	r3, [r7, #30]
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d074      	beq.n	8003f34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	d916      	bls.n	8003e94 <UART_SetConfig+0x404>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d212      	bcs.n	8003e94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f023 030f 	bic.w	r3, r3, #15
 8003e76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	89fb      	ldrh	r3, [r7, #14]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	89fa      	ldrh	r2, [r7, #14]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e04f      	b.n	8003f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	77bb      	strb	r3, [r7, #30]
 8003e98:	e04c      	b.n	8003f34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d828      	bhi.n	8003ef2 <UART_SetConfig+0x462>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x418>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7ff f8be 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8003ed0:	61b8      	str	r0, [r7, #24]
        break;
 8003ed2:	e013      	b.n	8003efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7ff f8ce 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	61b8      	str	r0, [r7, #24]
        break;
 8003eda:	e00f      	b.n	8003efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <UART_SetConfig+0x4c4>)
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e00c      	b.n	8003efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe ffa3 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8003ee6:	61b8      	str	r0, [r7, #24]
        break;
 8003ee8:	e008      	b.n	8003efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	61bb      	str	r3, [r7, #24]
        break;
 8003ef0:	e004      	b.n	8003efc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8003efa:	bf00      	nop
    }

    if (pclk != 0U)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d018      	beq.n	8003f34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085a      	lsrs	r2, r3, #1
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b0f      	cmp	r3, #15
 8003f1a:	d909      	bls.n	8003f30 <UART_SetConfig+0x4a0>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f22:	d205      	bcs.n	8003f30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	e001      	b.n	8003f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f40:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40007c00 	.word	0x40007c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	00f42400 	.word	0x00f42400

08003f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004056:	d10a      	bne.n	800406e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
  }
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040ac:	f7fd faca 	bl	8001644 <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d10e      	bne.n	80040de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f831 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e027      	b.n	800412e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d10e      	bne.n	800410a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f81b 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e011      	b.n	800412e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b09c      	sub	sp, #112	; 0x70
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004146:	e0a7      	b.n	8004298 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800414e:	f000 80a3 	beq.w	8004298 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fd fa77 	bl	8001644 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <UART_WaitOnFlagUntilTimeout+0x32>
 8004162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004164:	2b00      	cmp	r3, #0
 8004166:	d13f      	bne.n	80041e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800417c:	667b      	str	r3, [r7, #100]	; 0x64
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004188:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800418c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e6      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	663b      	str	r3, [r7, #96]	; 0x60
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e068      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d050      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	d148      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800420e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
 8004230:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e6      	bne.n	8004210 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	66bb      	str	r3, [r7, #104]	; 0x68
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3308      	adds	r3, #8
 8004260:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004262:	623a      	str	r2, [r7, #32]
 8004264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	69f9      	ldr	r1, [r7, #28]
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e010      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f43f af48 	beq.w	8004148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3770      	adds	r7, #112	; 0x70
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <__errno>:
 80042c4:	4b01      	ldr	r3, [pc, #4]	; (80042cc <__errno+0x8>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	2000000c 	.word	0x2000000c

080042d0 <__libc_init_array>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	4d0d      	ldr	r5, [pc, #52]	; (8004308 <__libc_init_array+0x38>)
 80042d4:	4c0d      	ldr	r4, [pc, #52]	; (800430c <__libc_init_array+0x3c>)
 80042d6:	1b64      	subs	r4, r4, r5
 80042d8:	10a4      	asrs	r4, r4, #2
 80042da:	2600      	movs	r6, #0
 80042dc:	42a6      	cmp	r6, r4
 80042de:	d109      	bne.n	80042f4 <__libc_init_array+0x24>
 80042e0:	4d0b      	ldr	r5, [pc, #44]	; (8004310 <__libc_init_array+0x40>)
 80042e2:	4c0c      	ldr	r4, [pc, #48]	; (8004314 <__libc_init_array+0x44>)
 80042e4:	f004 fb88 	bl	80089f8 <_init>
 80042e8:	1b64      	subs	r4, r4, r5
 80042ea:	10a4      	asrs	r4, r4, #2
 80042ec:	2600      	movs	r6, #0
 80042ee:	42a6      	cmp	r6, r4
 80042f0:	d105      	bne.n	80042fe <__libc_init_array+0x2e>
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f8:	4798      	blx	r3
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7ee      	b.n	80042dc <__libc_init_array+0xc>
 80042fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004302:	4798      	blx	r3
 8004304:	3601      	adds	r6, #1
 8004306:	e7f2      	b.n	80042ee <__libc_init_array+0x1e>
 8004308:	08008f24 	.word	0x08008f24
 800430c:	08008f24 	.word	0x08008f24
 8004310:	08008f24 	.word	0x08008f24
 8004314:	08008f28 	.word	0x08008f28

08004318 <memset>:
 8004318:	4402      	add	r2, r0
 800431a:	4603      	mov	r3, r0
 800431c:	4293      	cmp	r3, r2
 800431e:	d100      	bne.n	8004322 <memset+0xa>
 8004320:	4770      	bx	lr
 8004322:	f803 1b01 	strb.w	r1, [r3], #1
 8004326:	e7f9      	b.n	800431c <memset+0x4>

08004328 <__cvt>:
 8004328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432a:	ed2d 8b02 	vpush	{d8}
 800432e:	eeb0 8b40 	vmov.f64	d8, d0
 8004332:	b085      	sub	sp, #20
 8004334:	4617      	mov	r7, r2
 8004336:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004338:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800433a:	ee18 2a90 	vmov	r2, s17
 800433e:	f025 0520 	bic.w	r5, r5, #32
 8004342:	2a00      	cmp	r2, #0
 8004344:	bfb6      	itet	lt
 8004346:	222d      	movlt	r2, #45	; 0x2d
 8004348:	2200      	movge	r2, #0
 800434a:	eeb1 8b40 	vneglt.f64	d8, d0
 800434e:	2d46      	cmp	r5, #70	; 0x46
 8004350:	460c      	mov	r4, r1
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	d004      	beq.n	8004360 <__cvt+0x38>
 8004356:	2d45      	cmp	r5, #69	; 0x45
 8004358:	d100      	bne.n	800435c <__cvt+0x34>
 800435a:	3401      	adds	r4, #1
 800435c:	2102      	movs	r1, #2
 800435e:	e000      	b.n	8004362 <__cvt+0x3a>
 8004360:	2103      	movs	r1, #3
 8004362:	ab03      	add	r3, sp, #12
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	ab02      	add	r3, sp, #8
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4622      	mov	r2, r4
 800436c:	4633      	mov	r3, r6
 800436e:	eeb0 0b48 	vmov.f64	d0, d8
 8004372:	f001 fd2d 	bl	8005dd0 <_dtoa_r>
 8004376:	2d47      	cmp	r5, #71	; 0x47
 8004378:	d101      	bne.n	800437e <__cvt+0x56>
 800437a:	07fb      	lsls	r3, r7, #31
 800437c:	d51a      	bpl.n	80043b4 <__cvt+0x8c>
 800437e:	2d46      	cmp	r5, #70	; 0x46
 8004380:	eb00 0204 	add.w	r2, r0, r4
 8004384:	d10c      	bne.n	80043a0 <__cvt+0x78>
 8004386:	7803      	ldrb	r3, [r0, #0]
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	d107      	bne.n	800439c <__cvt+0x74>
 800438c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	bf1c      	itt	ne
 8004396:	f1c4 0401 	rsbne	r4, r4, #1
 800439a:	6034      	strne	r4, [r6, #0]
 800439c:	6833      	ldr	r3, [r6, #0]
 800439e:	441a      	add	r2, r3
 80043a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80043a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a8:	bf08      	it	eq
 80043aa:	9203      	streq	r2, [sp, #12]
 80043ac:	2130      	movs	r1, #48	; 0x30
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d307      	bcc.n	80043c4 <__cvt+0x9c>
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b8:	1a1b      	subs	r3, r3, r0
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	b005      	add	sp, #20
 80043be:	ecbd 8b02 	vpop	{d8}
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c4:	1c5c      	adds	r4, r3, #1
 80043c6:	9403      	str	r4, [sp, #12]
 80043c8:	7019      	strb	r1, [r3, #0]
 80043ca:	e7f0      	b.n	80043ae <__cvt+0x86>

080043cc <__exponent>:
 80043cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ce:	4603      	mov	r3, r0
 80043d0:	2900      	cmp	r1, #0
 80043d2:	bfb8      	it	lt
 80043d4:	4249      	neglt	r1, r1
 80043d6:	f803 2b02 	strb.w	r2, [r3], #2
 80043da:	bfb4      	ite	lt
 80043dc:	222d      	movlt	r2, #45	; 0x2d
 80043de:	222b      	movge	r2, #43	; 0x2b
 80043e0:	2909      	cmp	r1, #9
 80043e2:	7042      	strb	r2, [r0, #1]
 80043e4:	dd2a      	ble.n	800443c <__exponent+0x70>
 80043e6:	f10d 0407 	add.w	r4, sp, #7
 80043ea:	46a4      	mov	ip, r4
 80043ec:	270a      	movs	r7, #10
 80043ee:	46a6      	mov	lr, r4
 80043f0:	460a      	mov	r2, r1
 80043f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80043f6:	fb07 1516 	mls	r5, r7, r6, r1
 80043fa:	3530      	adds	r5, #48	; 0x30
 80043fc:	2a63      	cmp	r2, #99	; 0x63
 80043fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004402:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004406:	4631      	mov	r1, r6
 8004408:	dcf1      	bgt.n	80043ee <__exponent+0x22>
 800440a:	3130      	adds	r1, #48	; 0x30
 800440c:	f1ae 0502 	sub.w	r5, lr, #2
 8004410:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004414:	1c44      	adds	r4, r0, #1
 8004416:	4629      	mov	r1, r5
 8004418:	4561      	cmp	r1, ip
 800441a:	d30a      	bcc.n	8004432 <__exponent+0x66>
 800441c:	f10d 0209 	add.w	r2, sp, #9
 8004420:	eba2 020e 	sub.w	r2, r2, lr
 8004424:	4565      	cmp	r5, ip
 8004426:	bf88      	it	hi
 8004428:	2200      	movhi	r2, #0
 800442a:	4413      	add	r3, r2
 800442c:	1a18      	subs	r0, r3, r0
 800442e:	b003      	add	sp, #12
 8004430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004436:	f804 2f01 	strb.w	r2, [r4, #1]!
 800443a:	e7ed      	b.n	8004418 <__exponent+0x4c>
 800443c:	2330      	movs	r3, #48	; 0x30
 800443e:	3130      	adds	r1, #48	; 0x30
 8004440:	7083      	strb	r3, [r0, #2]
 8004442:	70c1      	strb	r1, [r0, #3]
 8004444:	1d03      	adds	r3, r0, #4
 8004446:	e7f1      	b.n	800442c <__exponent+0x60>

08004448 <_printf_float>:
 8004448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	b08b      	sub	sp, #44	; 0x2c
 800444e:	460c      	mov	r4, r1
 8004450:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004454:	4616      	mov	r6, r2
 8004456:	461f      	mov	r7, r3
 8004458:	4605      	mov	r5, r0
 800445a:	f002 fd97 	bl	8006f8c <_localeconv_r>
 800445e:	f8d0 b000 	ldr.w	fp, [r0]
 8004462:	4658      	mov	r0, fp
 8004464:	f7fb feec 	bl	8000240 <strlen>
 8004468:	2300      	movs	r3, #0
 800446a:	9308      	str	r3, [sp, #32]
 800446c:	f8d8 3000 	ldr.w	r3, [r8]
 8004470:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	3307      	adds	r3, #7
 8004478:	f023 0307 	bic.w	r3, r3, #7
 800447c:	f103 0108 	add.w	r1, r3, #8
 8004480:	f8c8 1000 	str.w	r1, [r8]
 8004484:	4682      	mov	sl, r0
 8004486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800448a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800448e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80046f0 <_printf_float+0x2a8>
 8004492:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004496:	eeb0 6bc0 	vabs.f64	d6, d0
 800449a:	eeb4 6b47 	vcmp.f64	d6, d7
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	dd24      	ble.n	80044ee <_printf_float+0xa6>
 80044a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80044a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ac:	d502      	bpl.n	80044b4 <_printf_float+0x6c>
 80044ae:	232d      	movs	r3, #45	; 0x2d
 80044b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b4:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <_printf_float+0x2b0>)
 80044b6:	4891      	ldr	r0, [pc, #580]	; (80046fc <_printf_float+0x2b4>)
 80044b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044bc:	bf94      	ite	ls
 80044be:	4698      	movls	r8, r3
 80044c0:	4680      	movhi	r8, r0
 80044c2:	2303      	movs	r3, #3
 80044c4:	6123      	str	r3, [r4, #16]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	2300      	movs	r3, #0
 80044cc:	6022      	str	r2, [r4, #0]
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	9700      	str	r7, [sp, #0]
 80044d2:	4633      	mov	r3, r6
 80044d4:	aa09      	add	r2, sp, #36	; 0x24
 80044d6:	4621      	mov	r1, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 f9d3 	bl	8004884 <_printf_common>
 80044de:	3001      	adds	r0, #1
 80044e0:	f040 808a 	bne.w	80045f8 <_printf_float+0x1b0>
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e8:	b00b      	add	sp, #44	; 0x2c
 80044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ee:	eeb4 0b40 	vcmp.f64	d0, d0
 80044f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f6:	d709      	bvc.n	800450c <_printf_float+0xc4>
 80044f8:	ee10 3a90 	vmov	r3, s1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bfbc      	itt	lt
 8004500:	232d      	movlt	r3, #45	; 0x2d
 8004502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004506:	487e      	ldr	r0, [pc, #504]	; (8004700 <_printf_float+0x2b8>)
 8004508:	4b7e      	ldr	r3, [pc, #504]	; (8004704 <_printf_float+0x2bc>)
 800450a:	e7d5      	b.n	80044b8 <_printf_float+0x70>
 800450c:	6863      	ldr	r3, [r4, #4]
 800450e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004512:	9104      	str	r1, [sp, #16]
 8004514:	1c59      	adds	r1, r3, #1
 8004516:	d13c      	bne.n	8004592 <_printf_float+0x14a>
 8004518:	2306      	movs	r3, #6
 800451a:	6063      	str	r3, [r4, #4]
 800451c:	2300      	movs	r3, #0
 800451e:	9303      	str	r3, [sp, #12]
 8004520:	ab08      	add	r3, sp, #32
 8004522:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004526:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800452a:	ab07      	add	r3, sp, #28
 800452c:	6861      	ldr	r1, [r4, #4]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	f10d 031b 	add.w	r3, sp, #27
 8004536:	4628      	mov	r0, r5
 8004538:	f7ff fef6 	bl	8004328 <__cvt>
 800453c:	9b04      	ldr	r3, [sp, #16]
 800453e:	9907      	ldr	r1, [sp, #28]
 8004540:	2b47      	cmp	r3, #71	; 0x47
 8004542:	4680      	mov	r8, r0
 8004544:	d108      	bne.n	8004558 <_printf_float+0x110>
 8004546:	1cc8      	adds	r0, r1, #3
 8004548:	db02      	blt.n	8004550 <_printf_float+0x108>
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	4299      	cmp	r1, r3
 800454e:	dd41      	ble.n	80045d4 <_printf_float+0x18c>
 8004550:	f1a9 0902 	sub.w	r9, r9, #2
 8004554:	fa5f f989 	uxtb.w	r9, r9
 8004558:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800455c:	d820      	bhi.n	80045a0 <_printf_float+0x158>
 800455e:	3901      	subs	r1, #1
 8004560:	464a      	mov	r2, r9
 8004562:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004566:	9107      	str	r1, [sp, #28]
 8004568:	f7ff ff30 	bl	80043cc <__exponent>
 800456c:	9a08      	ldr	r2, [sp, #32]
 800456e:	9004      	str	r0, [sp, #16]
 8004570:	1813      	adds	r3, r2, r0
 8004572:	2a01      	cmp	r2, #1
 8004574:	6123      	str	r3, [r4, #16]
 8004576:	dc02      	bgt.n	800457e <_printf_float+0x136>
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	07d2      	lsls	r2, r2, #31
 800457c:	d501      	bpl.n	8004582 <_printf_float+0x13a>
 800457e:	3301      	adds	r3, #1
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0a2      	beq.n	80044d0 <_printf_float+0x88>
 800458a:	232d      	movs	r3, #45	; 0x2d
 800458c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004590:	e79e      	b.n	80044d0 <_printf_float+0x88>
 8004592:	9904      	ldr	r1, [sp, #16]
 8004594:	2947      	cmp	r1, #71	; 0x47
 8004596:	d1c1      	bne.n	800451c <_printf_float+0xd4>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1bf      	bne.n	800451c <_printf_float+0xd4>
 800459c:	2301      	movs	r3, #1
 800459e:	e7bc      	b.n	800451a <_printf_float+0xd2>
 80045a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045a4:	d118      	bne.n	80045d8 <_printf_float+0x190>
 80045a6:	2900      	cmp	r1, #0
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	dd0b      	ble.n	80045c4 <_printf_float+0x17c>
 80045ac:	6121      	str	r1, [r4, #16]
 80045ae:	b913      	cbnz	r3, 80045b6 <_printf_float+0x16e>
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	07d0      	lsls	r0, r2, #31
 80045b4:	d502      	bpl.n	80045bc <_printf_float+0x174>
 80045b6:	3301      	adds	r3, #1
 80045b8:	440b      	add	r3, r1
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	2300      	movs	r3, #0
 80045be:	65a1      	str	r1, [r4, #88]	; 0x58
 80045c0:	9304      	str	r3, [sp, #16]
 80045c2:	e7de      	b.n	8004582 <_printf_float+0x13a>
 80045c4:	b913      	cbnz	r3, 80045cc <_printf_float+0x184>
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	07d2      	lsls	r2, r2, #31
 80045ca:	d501      	bpl.n	80045d0 <_printf_float+0x188>
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7f4      	b.n	80045ba <_printf_float+0x172>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e7f2      	b.n	80045ba <_printf_float+0x172>
 80045d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045d8:	9b08      	ldr	r3, [sp, #32]
 80045da:	4299      	cmp	r1, r3
 80045dc:	db05      	blt.n	80045ea <_printf_float+0x1a2>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	6121      	str	r1, [r4, #16]
 80045e2:	07d8      	lsls	r0, r3, #31
 80045e4:	d5ea      	bpl.n	80045bc <_printf_float+0x174>
 80045e6:	1c4b      	adds	r3, r1, #1
 80045e8:	e7e7      	b.n	80045ba <_printf_float+0x172>
 80045ea:	2900      	cmp	r1, #0
 80045ec:	bfd4      	ite	le
 80045ee:	f1c1 0202 	rsble	r2, r1, #2
 80045f2:	2201      	movgt	r2, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	e7e0      	b.n	80045ba <_printf_float+0x172>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	055a      	lsls	r2, r3, #21
 80045fc:	d407      	bmi.n	800460e <_printf_float+0x1c6>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	4642      	mov	r2, r8
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	d12a      	bne.n	8004662 <_printf_float+0x21a>
 800460c:	e76a      	b.n	80044e4 <_printf_float+0x9c>
 800460e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004612:	f240 80e2 	bls.w	80047da <_printf_float+0x392>
 8004616:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800461a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	d133      	bne.n	800468c <_printf_float+0x244>
 8004624:	4a38      	ldr	r2, [pc, #224]	; (8004708 <_printf_float+0x2c0>)
 8004626:	2301      	movs	r3, #1
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f af58 	beq.w	80044e4 <_printf_float+0x9c>
 8004634:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004638:	429a      	cmp	r2, r3
 800463a:	db02      	blt.n	8004642 <_printf_float+0x1fa>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	07d8      	lsls	r0, r3, #31
 8004640:	d50f      	bpl.n	8004662 <_printf_float+0x21a>
 8004642:	4653      	mov	r3, sl
 8004644:	465a      	mov	r2, fp
 8004646:	4631      	mov	r1, r6
 8004648:	4628      	mov	r0, r5
 800464a:	47b8      	blx	r7
 800464c:	3001      	adds	r0, #1
 800464e:	f43f af49 	beq.w	80044e4 <_printf_float+0x9c>
 8004652:	f04f 0800 	mov.w	r8, #0
 8004656:	f104 091a 	add.w	r9, r4, #26
 800465a:	9b08      	ldr	r3, [sp, #32]
 800465c:	3b01      	subs	r3, #1
 800465e:	4543      	cmp	r3, r8
 8004660:	dc09      	bgt.n	8004676 <_printf_float+0x22e>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	079b      	lsls	r3, r3, #30
 8004666:	f100 8108 	bmi.w	800487a <_printf_float+0x432>
 800466a:	68e0      	ldr	r0, [r4, #12]
 800466c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466e:	4298      	cmp	r0, r3
 8004670:	bfb8      	it	lt
 8004672:	4618      	movlt	r0, r3
 8004674:	e738      	b.n	80044e8 <_printf_float+0xa0>
 8004676:	2301      	movs	r3, #1
 8004678:	464a      	mov	r2, r9
 800467a:	4631      	mov	r1, r6
 800467c:	4628      	mov	r0, r5
 800467e:	47b8      	blx	r7
 8004680:	3001      	adds	r0, #1
 8004682:	f43f af2f 	beq.w	80044e4 <_printf_float+0x9c>
 8004686:	f108 0801 	add.w	r8, r8, #1
 800468a:	e7e6      	b.n	800465a <_printf_float+0x212>
 800468c:	9b07      	ldr	r3, [sp, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	dc3c      	bgt.n	800470c <_printf_float+0x2c4>
 8004692:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <_printf_float+0x2c0>)
 8004694:	2301      	movs	r3, #1
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	f43f af21 	beq.w	80044e4 <_printf_float+0x9c>
 80046a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d102      	bne.n	80046b0 <_printf_float+0x268>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	07d9      	lsls	r1, r3, #31
 80046ae:	d5d8      	bpl.n	8004662 <_printf_float+0x21a>
 80046b0:	4653      	mov	r3, sl
 80046b2:	465a      	mov	r2, fp
 80046b4:	4631      	mov	r1, r6
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	f43f af12 	beq.w	80044e4 <_printf_float+0x9c>
 80046c0:	f04f 0900 	mov.w	r9, #0
 80046c4:	f104 0a1a 	add.w	sl, r4, #26
 80046c8:	9b07      	ldr	r3, [sp, #28]
 80046ca:	425b      	negs	r3, r3
 80046cc:	454b      	cmp	r3, r9
 80046ce:	dc01      	bgt.n	80046d4 <_printf_float+0x28c>
 80046d0:	9b08      	ldr	r3, [sp, #32]
 80046d2:	e795      	b.n	8004600 <_printf_float+0x1b8>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4652      	mov	r2, sl
 80046d8:	4631      	mov	r1, r6
 80046da:	4628      	mov	r0, r5
 80046dc:	47b8      	blx	r7
 80046de:	3001      	adds	r0, #1
 80046e0:	f43f af00 	beq.w	80044e4 <_printf_float+0x9c>
 80046e4:	f109 0901 	add.w	r9, r9, #1
 80046e8:	e7ee      	b.n	80046c8 <_printf_float+0x280>
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w
 80046f0:	ffffffff 	.word	0xffffffff
 80046f4:	7fefffff 	.word	0x7fefffff
 80046f8:	08008a78 	.word	0x08008a78
 80046fc:	08008a7c 	.word	0x08008a7c
 8004700:	08008a84 	.word	0x08008a84
 8004704:	08008a80 	.word	0x08008a80
 8004708:	08008a88 	.word	0x08008a88
 800470c:	9a08      	ldr	r2, [sp, #32]
 800470e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004710:	429a      	cmp	r2, r3
 8004712:	bfa8      	it	ge
 8004714:	461a      	movge	r2, r3
 8004716:	2a00      	cmp	r2, #0
 8004718:	4691      	mov	r9, r2
 800471a:	dc38      	bgt.n	800478e <_printf_float+0x346>
 800471c:	2300      	movs	r3, #0
 800471e:	9305      	str	r3, [sp, #20]
 8004720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004724:	f104 021a 	add.w	r2, r4, #26
 8004728:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800472a:	9905      	ldr	r1, [sp, #20]
 800472c:	9304      	str	r3, [sp, #16]
 800472e:	eba3 0309 	sub.w	r3, r3, r9
 8004732:	428b      	cmp	r3, r1
 8004734:	dc33      	bgt.n	800479e <_printf_float+0x356>
 8004736:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800473a:	429a      	cmp	r2, r3
 800473c:	db3c      	blt.n	80047b8 <_printf_float+0x370>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	07da      	lsls	r2, r3, #31
 8004742:	d439      	bmi.n	80047b8 <_printf_float+0x370>
 8004744:	9b08      	ldr	r3, [sp, #32]
 8004746:	9a04      	ldr	r2, [sp, #16]
 8004748:	9907      	ldr	r1, [sp, #28]
 800474a:	1a9a      	subs	r2, r3, r2
 800474c:	eba3 0901 	sub.w	r9, r3, r1
 8004750:	4591      	cmp	r9, r2
 8004752:	bfa8      	it	ge
 8004754:	4691      	movge	r9, r2
 8004756:	f1b9 0f00 	cmp.w	r9, #0
 800475a:	dc35      	bgt.n	80047c8 <_printf_float+0x380>
 800475c:	f04f 0800 	mov.w	r8, #0
 8004760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004764:	f104 0a1a 	add.w	sl, r4, #26
 8004768:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	eba3 0309 	sub.w	r3, r3, r9
 8004772:	4543      	cmp	r3, r8
 8004774:	f77f af75 	ble.w	8004662 <_printf_float+0x21a>
 8004778:	2301      	movs	r3, #1
 800477a:	4652      	mov	r2, sl
 800477c:	4631      	mov	r1, r6
 800477e:	4628      	mov	r0, r5
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	f43f aeae 	beq.w	80044e4 <_printf_float+0x9c>
 8004788:	f108 0801 	add.w	r8, r8, #1
 800478c:	e7ec      	b.n	8004768 <_printf_float+0x320>
 800478e:	4613      	mov	r3, r2
 8004790:	4631      	mov	r1, r6
 8004792:	4642      	mov	r2, r8
 8004794:	4628      	mov	r0, r5
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	d1bf      	bne.n	800471c <_printf_float+0x2d4>
 800479c:	e6a2      	b.n	80044e4 <_printf_float+0x9c>
 800479e:	2301      	movs	r3, #1
 80047a0:	4631      	mov	r1, r6
 80047a2:	4628      	mov	r0, r5
 80047a4:	9204      	str	r2, [sp, #16]
 80047a6:	47b8      	blx	r7
 80047a8:	3001      	adds	r0, #1
 80047aa:	f43f ae9b 	beq.w	80044e4 <_printf_float+0x9c>
 80047ae:	9b05      	ldr	r3, [sp, #20]
 80047b0:	9a04      	ldr	r2, [sp, #16]
 80047b2:	3301      	adds	r3, #1
 80047b4:	9305      	str	r3, [sp, #20]
 80047b6:	e7b7      	b.n	8004728 <_printf_float+0x2e0>
 80047b8:	4653      	mov	r3, sl
 80047ba:	465a      	mov	r2, fp
 80047bc:	4631      	mov	r1, r6
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	d1be      	bne.n	8004744 <_printf_float+0x2fc>
 80047c6:	e68d      	b.n	80044e4 <_printf_float+0x9c>
 80047c8:	9a04      	ldr	r2, [sp, #16]
 80047ca:	464b      	mov	r3, r9
 80047cc:	4442      	add	r2, r8
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b8      	blx	r7
 80047d4:	3001      	adds	r0, #1
 80047d6:	d1c1      	bne.n	800475c <_printf_float+0x314>
 80047d8:	e684      	b.n	80044e4 <_printf_float+0x9c>
 80047da:	9a08      	ldr	r2, [sp, #32]
 80047dc:	2a01      	cmp	r2, #1
 80047de:	dc01      	bgt.n	80047e4 <_printf_float+0x39c>
 80047e0:	07db      	lsls	r3, r3, #31
 80047e2:	d537      	bpl.n	8004854 <_printf_float+0x40c>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4642      	mov	r2, r8
 80047e8:	4631      	mov	r1, r6
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b8      	blx	r7
 80047ee:	3001      	adds	r0, #1
 80047f0:	f43f ae78 	beq.w	80044e4 <_printf_float+0x9c>
 80047f4:	4653      	mov	r3, sl
 80047f6:	465a      	mov	r2, fp
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	f43f ae70 	beq.w	80044e4 <_printf_float+0x9c>
 8004804:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004808:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004810:	d01b      	beq.n	800484a <_printf_float+0x402>
 8004812:	9b08      	ldr	r3, [sp, #32]
 8004814:	f108 0201 	add.w	r2, r8, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	4631      	mov	r1, r6
 800481c:	4628      	mov	r0, r5
 800481e:	47b8      	blx	r7
 8004820:	3001      	adds	r0, #1
 8004822:	d10e      	bne.n	8004842 <_printf_float+0x3fa>
 8004824:	e65e      	b.n	80044e4 <_printf_float+0x9c>
 8004826:	2301      	movs	r3, #1
 8004828:	464a      	mov	r2, r9
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	f43f ae57 	beq.w	80044e4 <_printf_float+0x9c>
 8004836:	f108 0801 	add.w	r8, r8, #1
 800483a:	9b08      	ldr	r3, [sp, #32]
 800483c:	3b01      	subs	r3, #1
 800483e:	4543      	cmp	r3, r8
 8004840:	dcf1      	bgt.n	8004826 <_printf_float+0x3de>
 8004842:	9b04      	ldr	r3, [sp, #16]
 8004844:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004848:	e6db      	b.n	8004602 <_printf_float+0x1ba>
 800484a:	f04f 0800 	mov.w	r8, #0
 800484e:	f104 091a 	add.w	r9, r4, #26
 8004852:	e7f2      	b.n	800483a <_printf_float+0x3f2>
 8004854:	2301      	movs	r3, #1
 8004856:	4642      	mov	r2, r8
 8004858:	e7df      	b.n	800481a <_printf_float+0x3d2>
 800485a:	2301      	movs	r3, #1
 800485c:	464a      	mov	r2, r9
 800485e:	4631      	mov	r1, r6
 8004860:	4628      	mov	r0, r5
 8004862:	47b8      	blx	r7
 8004864:	3001      	adds	r0, #1
 8004866:	f43f ae3d 	beq.w	80044e4 <_printf_float+0x9c>
 800486a:	f108 0801 	add.w	r8, r8, #1
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004872:	1a5b      	subs	r3, r3, r1
 8004874:	4543      	cmp	r3, r8
 8004876:	dcf0      	bgt.n	800485a <_printf_float+0x412>
 8004878:	e6f7      	b.n	800466a <_printf_float+0x222>
 800487a:	f04f 0800 	mov.w	r8, #0
 800487e:	f104 0919 	add.w	r9, r4, #25
 8004882:	e7f4      	b.n	800486e <_printf_float+0x426>

08004884 <_printf_common>:
 8004884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004888:	4616      	mov	r6, r2
 800488a:	4699      	mov	r9, r3
 800488c:	688a      	ldr	r2, [r1, #8]
 800488e:	690b      	ldr	r3, [r1, #16]
 8004890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004894:	4293      	cmp	r3, r2
 8004896:	bfb8      	it	lt
 8004898:	4613      	movlt	r3, r2
 800489a:	6033      	str	r3, [r6, #0]
 800489c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048a0:	4607      	mov	r7, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	b10a      	cbz	r2, 80048aa <_printf_common+0x26>
 80048a6:	3301      	adds	r3, #1
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	0699      	lsls	r1, r3, #26
 80048ae:	bf42      	ittt	mi
 80048b0:	6833      	ldrmi	r3, [r6, #0]
 80048b2:	3302      	addmi	r3, #2
 80048b4:	6033      	strmi	r3, [r6, #0]
 80048b6:	6825      	ldr	r5, [r4, #0]
 80048b8:	f015 0506 	ands.w	r5, r5, #6
 80048bc:	d106      	bne.n	80048cc <_printf_common+0x48>
 80048be:	f104 0a19 	add.w	sl, r4, #25
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	6832      	ldr	r2, [r6, #0]
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dc26      	bgt.n	800491a <_printf_common+0x96>
 80048cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d0:	1e13      	subs	r3, r2, #0
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	bf18      	it	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	0692      	lsls	r2, r2, #26
 80048da:	d42b      	bmi.n	8004934 <_printf_common+0xb0>
 80048dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e0:	4649      	mov	r1, r9
 80048e2:	4638      	mov	r0, r7
 80048e4:	47c0      	blx	r8
 80048e6:	3001      	adds	r0, #1
 80048e8:	d01e      	beq.n	8004928 <_printf_common+0xa4>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	68e5      	ldr	r5, [r4, #12]
 80048ee:	6832      	ldr	r2, [r6, #0]
 80048f0:	f003 0306 	and.w	r3, r3, #6
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	bf08      	it	eq
 80048f8:	1aad      	subeq	r5, r5, r2
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	6922      	ldr	r2, [r4, #16]
 80048fe:	bf0c      	ite	eq
 8004900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004904:	2500      	movne	r5, #0
 8004906:	4293      	cmp	r3, r2
 8004908:	bfc4      	itt	gt
 800490a:	1a9b      	subgt	r3, r3, r2
 800490c:	18ed      	addgt	r5, r5, r3
 800490e:	2600      	movs	r6, #0
 8004910:	341a      	adds	r4, #26
 8004912:	42b5      	cmp	r5, r6
 8004914:	d11a      	bne.n	800494c <_printf_common+0xc8>
 8004916:	2000      	movs	r0, #0
 8004918:	e008      	b.n	800492c <_printf_common+0xa8>
 800491a:	2301      	movs	r3, #1
 800491c:	4652      	mov	r2, sl
 800491e:	4649      	mov	r1, r9
 8004920:	4638      	mov	r0, r7
 8004922:	47c0      	blx	r8
 8004924:	3001      	adds	r0, #1
 8004926:	d103      	bne.n	8004930 <_printf_common+0xac>
 8004928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004930:	3501      	adds	r5, #1
 8004932:	e7c6      	b.n	80048c2 <_printf_common+0x3e>
 8004934:	18e1      	adds	r1, r4, r3
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	2030      	movs	r0, #48	; 0x30
 800493a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800493e:	4422      	add	r2, r4
 8004940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004948:	3302      	adds	r3, #2
 800494a:	e7c7      	b.n	80048dc <_printf_common+0x58>
 800494c:	2301      	movs	r3, #1
 800494e:	4622      	mov	r2, r4
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d0e6      	beq.n	8004928 <_printf_common+0xa4>
 800495a:	3601      	adds	r6, #1
 800495c:	e7d9      	b.n	8004912 <_printf_common+0x8e>
	...

08004960 <_printf_i>:
 8004960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	7e0f      	ldrb	r7, [r1, #24]
 8004966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004968:	2f78      	cmp	r7, #120	; 0x78
 800496a:	4691      	mov	r9, r2
 800496c:	4680      	mov	r8, r0
 800496e:	460c      	mov	r4, r1
 8004970:	469a      	mov	sl, r3
 8004972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004976:	d807      	bhi.n	8004988 <_printf_i+0x28>
 8004978:	2f62      	cmp	r7, #98	; 0x62
 800497a:	d80a      	bhi.n	8004992 <_printf_i+0x32>
 800497c:	2f00      	cmp	r7, #0
 800497e:	f000 80d8 	beq.w	8004b32 <_printf_i+0x1d2>
 8004982:	2f58      	cmp	r7, #88	; 0x58
 8004984:	f000 80a3 	beq.w	8004ace <_printf_i+0x16e>
 8004988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004990:	e03a      	b.n	8004a08 <_printf_i+0xa8>
 8004992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004996:	2b15      	cmp	r3, #21
 8004998:	d8f6      	bhi.n	8004988 <_printf_i+0x28>
 800499a:	a101      	add	r1, pc, #4	; (adr r1, 80049a0 <_printf_i+0x40>)
 800499c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	08004a0d 	.word	0x08004a0d
 80049a8:	08004989 	.word	0x08004989
 80049ac:	08004989 	.word	0x08004989
 80049b0:	08004989 	.word	0x08004989
 80049b4:	08004989 	.word	0x08004989
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004989 	.word	0x08004989
 80049c0:	08004989 	.word	0x08004989
 80049c4:	08004989 	.word	0x08004989
 80049c8:	08004989 	.word	0x08004989
 80049cc:	08004b19 	.word	0x08004b19
 80049d0:	08004a3d 	.word	0x08004a3d
 80049d4:	08004afb 	.word	0x08004afb
 80049d8:	08004989 	.word	0x08004989
 80049dc:	08004989 	.word	0x08004989
 80049e0:	08004b3b 	.word	0x08004b3b
 80049e4:	08004989 	.word	0x08004989
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	08004989 	.word	0x08004989
 80049f0:	08004989 	.word	0x08004989
 80049f4:	08004b03 	.word	0x08004b03
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	602a      	str	r2, [r5, #0]
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0a3      	b.n	8004b54 <_printf_i+0x1f4>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	6829      	ldr	r1, [r5, #0]
 8004a10:	0606      	lsls	r6, r0, #24
 8004a12:	f101 0304 	add.w	r3, r1, #4
 8004a16:	d50a      	bpl.n	8004a2e <_printf_i+0xce>
 8004a18:	680e      	ldr	r6, [r1, #0]
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	2e00      	cmp	r6, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xc8>
 8004a20:	232d      	movs	r3, #45	; 0x2d
 8004a22:	4276      	negs	r6, r6
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a28:	485e      	ldr	r0, [pc, #376]	; (8004ba4 <_printf_i+0x244>)
 8004a2a:	230a      	movs	r3, #10
 8004a2c:	e019      	b.n	8004a62 <_printf_i+0x102>
 8004a2e:	680e      	ldr	r6, [r1, #0]
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a36:	bf18      	it	ne
 8004a38:	b236      	sxthne	r6, r6
 8004a3a:	e7ef      	b.n	8004a1c <_printf_i+0xbc>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	6029      	str	r1, [r5, #0]
 8004a44:	0601      	lsls	r1, r0, #24
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0xec>
 8004a48:	681e      	ldr	r6, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <_printf_i+0xf2>
 8004a4c:	0646      	lsls	r6, r0, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0xe8>
 8004a50:	881e      	ldrh	r6, [r3, #0]
 8004a52:	4854      	ldr	r0, [pc, #336]	; (8004ba4 <_printf_i+0x244>)
 8004a54:	2f6f      	cmp	r7, #111	; 0x6f
 8004a56:	bf0c      	ite	eq
 8004a58:	2308      	moveq	r3, #8
 8004a5a:	230a      	movne	r3, #10
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a62:	6865      	ldr	r5, [r4, #4]
 8004a64:	60a5      	str	r5, [r4, #8]
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	bfa2      	ittt	ge
 8004a6a:	6821      	ldrge	r1, [r4, #0]
 8004a6c:	f021 0104 	bicge.w	r1, r1, #4
 8004a70:	6021      	strge	r1, [r4, #0]
 8004a72:	b90e      	cbnz	r6, 8004a78 <_printf_i+0x118>
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	d04d      	beq.n	8004b14 <_printf_i+0x1b4>
 8004a78:	4615      	mov	r5, r2
 8004a7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a82:	5dc7      	ldrb	r7, [r0, r7]
 8004a84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a88:	4637      	mov	r7, r6
 8004a8a:	42bb      	cmp	r3, r7
 8004a8c:	460e      	mov	r6, r1
 8004a8e:	d9f4      	bls.n	8004a7a <_printf_i+0x11a>
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d10b      	bne.n	8004aac <_printf_i+0x14c>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	07de      	lsls	r6, r3, #31
 8004a98:	d508      	bpl.n	8004aac <_printf_i+0x14c>
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	6861      	ldr	r1, [r4, #4]
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	bfde      	ittt	le
 8004aa2:	2330      	movle	r3, #48	; 0x30
 8004aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004aac:	1b52      	subs	r2, r2, r5
 8004aae:	6122      	str	r2, [r4, #16]
 8004ab0:	f8cd a000 	str.w	sl, [sp]
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	aa03      	add	r2, sp, #12
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4640      	mov	r0, r8
 8004abc:	f7ff fee2 	bl	8004884 <_printf_common>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d14c      	bne.n	8004b5e <_printf_i+0x1fe>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac8:	b004      	add	sp, #16
 8004aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ace:	4835      	ldr	r0, [pc, #212]	; (8004ba4 <_printf_i+0x244>)
 8004ad0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ad4:	6829      	ldr	r1, [r5, #0]
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004adc:	6029      	str	r1, [r5, #0]
 8004ade:	061d      	lsls	r5, r3, #24
 8004ae0:	d514      	bpl.n	8004b0c <_printf_i+0x1ac>
 8004ae2:	07df      	lsls	r7, r3, #31
 8004ae4:	bf44      	itt	mi
 8004ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8004aea:	6023      	strmi	r3, [r4, #0]
 8004aec:	b91e      	cbnz	r6, 8004af6 <_printf_i+0x196>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f023 0320 	bic.w	r3, r3, #32
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	2310      	movs	r3, #16
 8004af8:	e7b0      	b.n	8004a5c <_printf_i+0xfc>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f043 0320 	orr.w	r3, r3, #32
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	2378      	movs	r3, #120	; 0x78
 8004b04:	4828      	ldr	r0, [pc, #160]	; (8004ba8 <_printf_i+0x248>)
 8004b06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b0a:	e7e3      	b.n	8004ad4 <_printf_i+0x174>
 8004b0c:	0659      	lsls	r1, r3, #25
 8004b0e:	bf48      	it	mi
 8004b10:	b2b6      	uxthmi	r6, r6
 8004b12:	e7e6      	b.n	8004ae2 <_printf_i+0x182>
 8004b14:	4615      	mov	r5, r2
 8004b16:	e7bb      	b.n	8004a90 <_printf_i+0x130>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	6826      	ldr	r6, [r4, #0]
 8004b1c:	6961      	ldr	r1, [r4, #20]
 8004b1e:	1d18      	adds	r0, r3, #4
 8004b20:	6028      	str	r0, [r5, #0]
 8004b22:	0635      	lsls	r5, r6, #24
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	d501      	bpl.n	8004b2c <_printf_i+0x1cc>
 8004b28:	6019      	str	r1, [r3, #0]
 8004b2a:	e002      	b.n	8004b32 <_printf_i+0x1d2>
 8004b2c:	0670      	lsls	r0, r6, #25
 8004b2e:	d5fb      	bpl.n	8004b28 <_printf_i+0x1c8>
 8004b30:	8019      	strh	r1, [r3, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	4615      	mov	r5, r2
 8004b38:	e7ba      	b.n	8004ab0 <_printf_i+0x150>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	1d1a      	adds	r2, r3, #4
 8004b3e:	602a      	str	r2, [r5, #0]
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	6862      	ldr	r2, [r4, #4]
 8004b44:	2100      	movs	r1, #0
 8004b46:	4628      	mov	r0, r5
 8004b48:	f7fb fb82 	bl	8000250 <memchr>
 8004b4c:	b108      	cbz	r0, 8004b52 <_printf_i+0x1f2>
 8004b4e:	1b40      	subs	r0, r0, r5
 8004b50:	6060      	str	r0, [r4, #4]
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	6123      	str	r3, [r4, #16]
 8004b56:	2300      	movs	r3, #0
 8004b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5c:	e7a8      	b.n	8004ab0 <_printf_i+0x150>
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	462a      	mov	r2, r5
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	47d0      	blx	sl
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d0ab      	beq.n	8004ac4 <_printf_i+0x164>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	079b      	lsls	r3, r3, #30
 8004b70:	d413      	bmi.n	8004b9a <_printf_i+0x23a>
 8004b72:	68e0      	ldr	r0, [r4, #12]
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	4298      	cmp	r0, r3
 8004b78:	bfb8      	it	lt
 8004b7a:	4618      	movlt	r0, r3
 8004b7c:	e7a4      	b.n	8004ac8 <_printf_i+0x168>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4632      	mov	r2, r6
 8004b82:	4649      	mov	r1, r9
 8004b84:	4640      	mov	r0, r8
 8004b86:	47d0      	blx	sl
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d09b      	beq.n	8004ac4 <_printf_i+0x164>
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	68e3      	ldr	r3, [r4, #12]
 8004b90:	9903      	ldr	r1, [sp, #12]
 8004b92:	1a5b      	subs	r3, r3, r1
 8004b94:	42ab      	cmp	r3, r5
 8004b96:	dcf2      	bgt.n	8004b7e <_printf_i+0x21e>
 8004b98:	e7eb      	b.n	8004b72 <_printf_i+0x212>
 8004b9a:	2500      	movs	r5, #0
 8004b9c:	f104 0619 	add.w	r6, r4, #25
 8004ba0:	e7f5      	b.n	8004b8e <_printf_i+0x22e>
 8004ba2:	bf00      	nop
 8004ba4:	08008a8a 	.word	0x08008a8a
 8004ba8:	08008a9b 	.word	0x08008a9b

08004bac <_scanf_float>:
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	b087      	sub	sp, #28
 8004bb2:	4617      	mov	r7, r2
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	688b      	ldr	r3, [r1, #8]
 8004bb8:	1e5a      	subs	r2, r3, #1
 8004bba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004bbe:	bf83      	ittte	hi
 8004bc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004bc4:	195b      	addhi	r3, r3, r5
 8004bc6:	9302      	strhi	r3, [sp, #8]
 8004bc8:	2300      	movls	r3, #0
 8004bca:	bf86      	itte	hi
 8004bcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bd0:	608b      	strhi	r3, [r1, #8]
 8004bd2:	9302      	strls	r3, [sp, #8]
 8004bd4:	680b      	ldr	r3, [r1, #0]
 8004bd6:	468b      	mov	fp, r1
 8004bd8:	2500      	movs	r5, #0
 8004bda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004bde:	f84b 3b1c 	str.w	r3, [fp], #28
 8004be2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004be6:	4680      	mov	r8, r0
 8004be8:	460c      	mov	r4, r1
 8004bea:	465e      	mov	r6, fp
 8004bec:	46aa      	mov	sl, r5
 8004bee:	46a9      	mov	r9, r5
 8004bf0:	9501      	str	r5, [sp, #4]
 8004bf2:	68a2      	ldr	r2, [r4, #8]
 8004bf4:	b152      	cbz	r2, 8004c0c <_scanf_float+0x60>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b4e      	cmp	r3, #78	; 0x4e
 8004bfc:	d864      	bhi.n	8004cc8 <_scanf_float+0x11c>
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d83c      	bhi.n	8004c7c <_scanf_float+0xd0>
 8004c02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004c06:	b2c8      	uxtb	r0, r1
 8004c08:	280e      	cmp	r0, #14
 8004c0a:	d93a      	bls.n	8004c82 <_scanf_float+0xd6>
 8004c0c:	f1b9 0f00 	cmp.w	r9, #0
 8004c10:	d003      	beq.n	8004c1a <_scanf_float+0x6e>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c1e:	f1ba 0f01 	cmp.w	sl, #1
 8004c22:	f200 8113 	bhi.w	8004e4c <_scanf_float+0x2a0>
 8004c26:	455e      	cmp	r6, fp
 8004c28:	f200 8105 	bhi.w	8004e36 <_scanf_float+0x28a>
 8004c2c:	2501      	movs	r5, #1
 8004c2e:	4628      	mov	r0, r5
 8004c30:	b007      	add	sp, #28
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c3a:	2a0d      	cmp	r2, #13
 8004c3c:	d8e6      	bhi.n	8004c0c <_scanf_float+0x60>
 8004c3e:	a101      	add	r1, pc, #4	; (adr r1, 8004c44 <_scanf_float+0x98>)
 8004c40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c44:	08004d83 	.word	0x08004d83
 8004c48:	08004c0d 	.word	0x08004c0d
 8004c4c:	08004c0d 	.word	0x08004c0d
 8004c50:	08004c0d 	.word	0x08004c0d
 8004c54:	08004de3 	.word	0x08004de3
 8004c58:	08004dbb 	.word	0x08004dbb
 8004c5c:	08004c0d 	.word	0x08004c0d
 8004c60:	08004c0d 	.word	0x08004c0d
 8004c64:	08004d91 	.word	0x08004d91
 8004c68:	08004c0d 	.word	0x08004c0d
 8004c6c:	08004c0d 	.word	0x08004c0d
 8004c70:	08004c0d 	.word	0x08004c0d
 8004c74:	08004c0d 	.word	0x08004c0d
 8004c78:	08004d49 	.word	0x08004d49
 8004c7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004c80:	e7db      	b.n	8004c3a <_scanf_float+0x8e>
 8004c82:	290e      	cmp	r1, #14
 8004c84:	d8c2      	bhi.n	8004c0c <_scanf_float+0x60>
 8004c86:	a001      	add	r0, pc, #4	; (adr r0, 8004c8c <_scanf_float+0xe0>)
 8004c88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c8c:	08004d3b 	.word	0x08004d3b
 8004c90:	08004c0d 	.word	0x08004c0d
 8004c94:	08004d3b 	.word	0x08004d3b
 8004c98:	08004dcf 	.word	0x08004dcf
 8004c9c:	08004c0d 	.word	0x08004c0d
 8004ca0:	08004ce9 	.word	0x08004ce9
 8004ca4:	08004d25 	.word	0x08004d25
 8004ca8:	08004d25 	.word	0x08004d25
 8004cac:	08004d25 	.word	0x08004d25
 8004cb0:	08004d25 	.word	0x08004d25
 8004cb4:	08004d25 	.word	0x08004d25
 8004cb8:	08004d25 	.word	0x08004d25
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004d25 	.word	0x08004d25
 8004cc4:	08004d25 	.word	0x08004d25
 8004cc8:	2b6e      	cmp	r3, #110	; 0x6e
 8004cca:	d809      	bhi.n	8004ce0 <_scanf_float+0x134>
 8004ccc:	2b60      	cmp	r3, #96	; 0x60
 8004cce:	d8b2      	bhi.n	8004c36 <_scanf_float+0x8a>
 8004cd0:	2b54      	cmp	r3, #84	; 0x54
 8004cd2:	d077      	beq.n	8004dc4 <_scanf_float+0x218>
 8004cd4:	2b59      	cmp	r3, #89	; 0x59
 8004cd6:	d199      	bne.n	8004c0c <_scanf_float+0x60>
 8004cd8:	2d07      	cmp	r5, #7
 8004cda:	d197      	bne.n	8004c0c <_scanf_float+0x60>
 8004cdc:	2508      	movs	r5, #8
 8004cde:	e029      	b.n	8004d34 <_scanf_float+0x188>
 8004ce0:	2b74      	cmp	r3, #116	; 0x74
 8004ce2:	d06f      	beq.n	8004dc4 <_scanf_float+0x218>
 8004ce4:	2b79      	cmp	r3, #121	; 0x79
 8004ce6:	e7f6      	b.n	8004cd6 <_scanf_float+0x12a>
 8004ce8:	6821      	ldr	r1, [r4, #0]
 8004cea:	05c8      	lsls	r0, r1, #23
 8004cec:	d51a      	bpl.n	8004d24 <_scanf_float+0x178>
 8004cee:	9b02      	ldr	r3, [sp, #8]
 8004cf0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004cf4:	6021      	str	r1, [r4, #0]
 8004cf6:	f109 0901 	add.w	r9, r9, #1
 8004cfa:	b11b      	cbz	r3, 8004d04 <_scanf_float+0x158>
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	3201      	adds	r2, #1
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	60a2      	str	r2, [r4, #8]
 8004d04:	68a3      	ldr	r3, [r4, #8]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	60a3      	str	r3, [r4, #8]
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	6123      	str	r3, [r4, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	f340 8084 	ble.w	8004e24 <_scanf_float+0x278>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	e766      	b.n	8004bf2 <_scanf_float+0x46>
 8004d24:	eb1a 0f05 	cmn.w	sl, r5
 8004d28:	f47f af70 	bne.w	8004c0c <_scanf_float+0x60>
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d32:	6022      	str	r2, [r4, #0]
 8004d34:	f806 3b01 	strb.w	r3, [r6], #1
 8004d38:	e7e4      	b.n	8004d04 <_scanf_float+0x158>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	0610      	lsls	r0, r2, #24
 8004d3e:	f57f af65 	bpl.w	8004c0c <_scanf_float+0x60>
 8004d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d46:	e7f4      	b.n	8004d32 <_scanf_float+0x186>
 8004d48:	f1ba 0f00 	cmp.w	sl, #0
 8004d4c:	d10e      	bne.n	8004d6c <_scanf_float+0x1c0>
 8004d4e:	f1b9 0f00 	cmp.w	r9, #0
 8004d52:	d10e      	bne.n	8004d72 <_scanf_float+0x1c6>
 8004d54:	6822      	ldr	r2, [r4, #0]
 8004d56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d5e:	d108      	bne.n	8004d72 <_scanf_float+0x1c6>
 8004d60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d64:	6022      	str	r2, [r4, #0]
 8004d66:	f04f 0a01 	mov.w	sl, #1
 8004d6a:	e7e3      	b.n	8004d34 <_scanf_float+0x188>
 8004d6c:	f1ba 0f02 	cmp.w	sl, #2
 8004d70:	d055      	beq.n	8004e1e <_scanf_float+0x272>
 8004d72:	2d01      	cmp	r5, #1
 8004d74:	d002      	beq.n	8004d7c <_scanf_float+0x1d0>
 8004d76:	2d04      	cmp	r5, #4
 8004d78:	f47f af48 	bne.w	8004c0c <_scanf_float+0x60>
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	b2ed      	uxtb	r5, r5
 8004d80:	e7d8      	b.n	8004d34 <_scanf_float+0x188>
 8004d82:	f1ba 0f01 	cmp.w	sl, #1
 8004d86:	f47f af41 	bne.w	8004c0c <_scanf_float+0x60>
 8004d8a:	f04f 0a02 	mov.w	sl, #2
 8004d8e:	e7d1      	b.n	8004d34 <_scanf_float+0x188>
 8004d90:	b97d      	cbnz	r5, 8004db2 <_scanf_float+0x206>
 8004d92:	f1b9 0f00 	cmp.w	r9, #0
 8004d96:	f47f af3c 	bne.w	8004c12 <_scanf_float+0x66>
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004da0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004da4:	f47f af39 	bne.w	8004c1a <_scanf_float+0x6e>
 8004da8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004dac:	6022      	str	r2, [r4, #0]
 8004dae:	2501      	movs	r5, #1
 8004db0:	e7c0      	b.n	8004d34 <_scanf_float+0x188>
 8004db2:	2d03      	cmp	r5, #3
 8004db4:	d0e2      	beq.n	8004d7c <_scanf_float+0x1d0>
 8004db6:	2d05      	cmp	r5, #5
 8004db8:	e7de      	b.n	8004d78 <_scanf_float+0x1cc>
 8004dba:	2d02      	cmp	r5, #2
 8004dbc:	f47f af26 	bne.w	8004c0c <_scanf_float+0x60>
 8004dc0:	2503      	movs	r5, #3
 8004dc2:	e7b7      	b.n	8004d34 <_scanf_float+0x188>
 8004dc4:	2d06      	cmp	r5, #6
 8004dc6:	f47f af21 	bne.w	8004c0c <_scanf_float+0x60>
 8004dca:	2507      	movs	r5, #7
 8004dcc:	e7b2      	b.n	8004d34 <_scanf_float+0x188>
 8004dce:	6822      	ldr	r2, [r4, #0]
 8004dd0:	0591      	lsls	r1, r2, #22
 8004dd2:	f57f af1b 	bpl.w	8004c0c <_scanf_float+0x60>
 8004dd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004dda:	6022      	str	r2, [r4, #0]
 8004ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004de0:	e7a8      	b.n	8004d34 <_scanf_float+0x188>
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004de8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004dec:	d006      	beq.n	8004dfc <_scanf_float+0x250>
 8004dee:	0550      	lsls	r0, r2, #21
 8004df0:	f57f af0c 	bpl.w	8004c0c <_scanf_float+0x60>
 8004df4:	f1b9 0f00 	cmp.w	r9, #0
 8004df8:	f43f af0f 	beq.w	8004c1a <_scanf_float+0x6e>
 8004dfc:	0591      	lsls	r1, r2, #22
 8004dfe:	bf58      	it	pl
 8004e00:	9901      	ldrpl	r1, [sp, #4]
 8004e02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e06:	bf58      	it	pl
 8004e08:	eba9 0101 	subpl.w	r1, r9, r1
 8004e0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e10:	bf58      	it	pl
 8004e12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e16:	6022      	str	r2, [r4, #0]
 8004e18:	f04f 0900 	mov.w	r9, #0
 8004e1c:	e78a      	b.n	8004d34 <_scanf_float+0x188>
 8004e1e:	f04f 0a03 	mov.w	sl, #3
 8004e22:	e787      	b.n	8004d34 <_scanf_float+0x188>
 8004e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e28:	4639      	mov	r1, r7
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	4798      	blx	r3
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	f43f aedf 	beq.w	8004bf2 <_scanf_float+0x46>
 8004e34:	e6ea      	b.n	8004c0c <_scanf_float+0x60>
 8004e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e3e:	463a      	mov	r2, r7
 8004e40:	4640      	mov	r0, r8
 8004e42:	4798      	blx	r3
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	e6ec      	b.n	8004c26 <_scanf_float+0x7a>
 8004e4c:	1e6b      	subs	r3, r5, #1
 8004e4e:	2b06      	cmp	r3, #6
 8004e50:	d825      	bhi.n	8004e9e <_scanf_float+0x2f2>
 8004e52:	2d02      	cmp	r5, #2
 8004e54:	d836      	bhi.n	8004ec4 <_scanf_float+0x318>
 8004e56:	455e      	cmp	r6, fp
 8004e58:	f67f aee8 	bls.w	8004c2c <_scanf_float+0x80>
 8004e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e64:	463a      	mov	r2, r7
 8004e66:	4640      	mov	r0, r8
 8004e68:	4798      	blx	r3
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	6123      	str	r3, [r4, #16]
 8004e70:	e7f1      	b.n	8004e56 <_scanf_float+0x2aa>
 8004e72:	9802      	ldr	r0, [sp, #8]
 8004e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004e7c:	9002      	str	r0, [sp, #8]
 8004e7e:	463a      	mov	r2, r7
 8004e80:	4640      	mov	r0, r8
 8004e82:	4798      	blx	r3
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e8e:	fa5f fa8a 	uxtb.w	sl, sl
 8004e92:	f1ba 0f02 	cmp.w	sl, #2
 8004e96:	d1ec      	bne.n	8004e72 <_scanf_float+0x2c6>
 8004e98:	3d03      	subs	r5, #3
 8004e9a:	b2ed      	uxtb	r5, r5
 8004e9c:	1b76      	subs	r6, r6, r5
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	05da      	lsls	r2, r3, #23
 8004ea2:	d52f      	bpl.n	8004f04 <_scanf_float+0x358>
 8004ea4:	055b      	lsls	r3, r3, #21
 8004ea6:	d510      	bpl.n	8004eca <_scanf_float+0x31e>
 8004ea8:	455e      	cmp	r6, fp
 8004eaa:	f67f aebf 	bls.w	8004c2c <_scanf_float+0x80>
 8004eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004eb6:	463a      	mov	r2, r7
 8004eb8:	4640      	mov	r0, r8
 8004eba:	4798      	blx	r3
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	6123      	str	r3, [r4, #16]
 8004ec2:	e7f1      	b.n	8004ea8 <_scanf_float+0x2fc>
 8004ec4:	46aa      	mov	sl, r5
 8004ec6:	9602      	str	r6, [sp, #8]
 8004ec8:	e7df      	b.n	8004e8a <_scanf_float+0x2de>
 8004eca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	2965      	cmp	r1, #101	; 0x65
 8004ed2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004ed6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	d00c      	beq.n	8004ef8 <_scanf_float+0x34c>
 8004ede:	2945      	cmp	r1, #69	; 0x45
 8004ee0:	d00a      	beq.n	8004ef8 <_scanf_float+0x34c>
 8004ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ee6:	463a      	mov	r2, r7
 8004ee8:	4640      	mov	r0, r8
 8004eea:	4798      	blx	r3
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	1eb5      	subs	r5, r6, #2
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004efc:	463a      	mov	r2, r7
 8004efe:	4640      	mov	r0, r8
 8004f00:	4798      	blx	r3
 8004f02:	462e      	mov	r6, r5
 8004f04:	6825      	ldr	r5, [r4, #0]
 8004f06:	f015 0510 	ands.w	r5, r5, #16
 8004f0a:	d14e      	bne.n	8004faa <_scanf_float+0x3fe>
 8004f0c:	7035      	strb	r5, [r6, #0]
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f18:	d119      	bne.n	8004f4e <_scanf_float+0x3a2>
 8004f1a:	9b01      	ldr	r3, [sp, #4]
 8004f1c:	454b      	cmp	r3, r9
 8004f1e:	eba3 0209 	sub.w	r2, r3, r9
 8004f22:	d121      	bne.n	8004f68 <_scanf_float+0x3bc>
 8004f24:	2200      	movs	r2, #0
 8004f26:	4659      	mov	r1, fp
 8004f28:	4640      	mov	r0, r8
 8004f2a:	f000 fe3b 	bl	8005ba4 <_strtod_r>
 8004f2e:	6822      	ldr	r2, [r4, #0]
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	f012 0f02 	tst.w	r2, #2
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	d021      	beq.n	8004f7e <_scanf_float+0x3d2>
 8004f3a:	9903      	ldr	r1, [sp, #12]
 8004f3c:	1d1a      	adds	r2, r3, #4
 8004f3e:	600a      	str	r2, [r1, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	ed83 0b00 	vstr	d0, [r3]
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	60e3      	str	r3, [r4, #12]
 8004f4c:	e66f      	b.n	8004c2e <_scanf_float+0x82>
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0e7      	beq.n	8004f24 <_scanf_float+0x378>
 8004f54:	9905      	ldr	r1, [sp, #20]
 8004f56:	230a      	movs	r3, #10
 8004f58:	462a      	mov	r2, r5
 8004f5a:	3101      	adds	r1, #1
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	f000 fea9 	bl	8005cb4 <_strtol_r>
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	9e05      	ldr	r6, [sp, #20]
 8004f66:	1ac2      	subs	r2, r0, r3
 8004f68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004f6c:	429e      	cmp	r6, r3
 8004f6e:	bf28      	it	cs
 8004f70:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <_scanf_float+0x404>)
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 f824 	bl	8004fc4 <siprintf>
 8004f7c:	e7d2      	b.n	8004f24 <_scanf_float+0x378>
 8004f7e:	9903      	ldr	r1, [sp, #12]
 8004f80:	f012 0f04 	tst.w	r2, #4
 8004f84:	f103 0204 	add.w	r2, r3, #4
 8004f88:	600a      	str	r2, [r1, #0]
 8004f8a:	d1d9      	bne.n	8004f40 <_scanf_float+0x394>
 8004f8c:	eeb4 0b40 	vcmp.f64	d0, d0
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	681e      	ldr	r6, [r3, #0]
 8004f96:	d705      	bvc.n	8004fa4 <_scanf_float+0x3f8>
 8004f98:	4806      	ldr	r0, [pc, #24]	; (8004fb4 <_scanf_float+0x408>)
 8004f9a:	f000 f80d 	bl	8004fb8 <nanf>
 8004f9e:	ed86 0a00 	vstr	s0, [r6]
 8004fa2:	e7d0      	b.n	8004f46 <_scanf_float+0x39a>
 8004fa4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004fa8:	e7f9      	b.n	8004f9e <_scanf_float+0x3f2>
 8004faa:	2500      	movs	r5, #0
 8004fac:	e63f      	b.n	8004c2e <_scanf_float+0x82>
 8004fae:	bf00      	nop
 8004fb0:	08008aac 	.word	0x08008aac
 8004fb4:	08008eb8 	.word	0x08008eb8

08004fb8 <nanf>:
 8004fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004fc0 <nanf+0x8>
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	7fc00000 	.word	0x7fc00000

08004fc4 <siprintf>:
 8004fc4:	b40e      	push	{r1, r2, r3}
 8004fc6:	b500      	push	{lr}
 8004fc8:	b09c      	sub	sp, #112	; 0x70
 8004fca:	ab1d      	add	r3, sp, #116	; 0x74
 8004fcc:	9002      	str	r0, [sp, #8]
 8004fce:	9006      	str	r0, [sp, #24]
 8004fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd4:	4809      	ldr	r0, [pc, #36]	; (8004ffc <siprintf+0x38>)
 8004fd6:	9107      	str	r1, [sp, #28]
 8004fd8:	9104      	str	r1, [sp, #16]
 8004fda:	4909      	ldr	r1, [pc, #36]	; (8005000 <siprintf+0x3c>)
 8004fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe0:	9105      	str	r1, [sp, #20]
 8004fe2:	6800      	ldr	r0, [r0, #0]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	a902      	add	r1, sp, #8
 8004fe8:	f002 fe0c 	bl	8007c04 <_svfiprintf_r>
 8004fec:	9b02      	ldr	r3, [sp, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	b01c      	add	sp, #112	; 0x70
 8004ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff8:	b003      	add	sp, #12
 8004ffa:	4770      	bx	lr
 8004ffc:	2000000c 	.word	0x2000000c
 8005000:	ffff0208 	.word	0xffff0208

08005004 <sulp>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4604      	mov	r4, r0
 8005008:	460d      	mov	r5, r1
 800500a:	4616      	mov	r6, r2
 800500c:	ec45 4b10 	vmov	d0, r4, r5
 8005010:	f002 fb5a 	bl	80076c8 <__ulp>
 8005014:	b17e      	cbz	r6, 8005036 <sulp+0x32>
 8005016:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800501a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd09      	ble.n	8005036 <sulp+0x32>
 8005022:	051b      	lsls	r3, r3, #20
 8005024:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8005028:	2000      	movs	r0, #0
 800502a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800502e:	ec41 0b17 	vmov	d7, r0, r1
 8005032:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005036:	bd70      	pop	{r4, r5, r6, pc}

08005038 <_strtod_l>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	ed2d 8b0e 	vpush	{d8-d14}
 8005040:	b097      	sub	sp, #92	; 0x5c
 8005042:	461f      	mov	r7, r3
 8005044:	2300      	movs	r3, #0
 8005046:	9312      	str	r3, [sp, #72]	; 0x48
 8005048:	4ba1      	ldr	r3, [pc, #644]	; (80052d0 <_strtod_l+0x298>)
 800504a:	920d      	str	r2, [sp, #52]	; 0x34
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	9307      	str	r3, [sp, #28]
 8005050:	4604      	mov	r4, r0
 8005052:	4618      	mov	r0, r3
 8005054:	468b      	mov	fp, r1
 8005056:	f7fb f8f3 	bl	8000240 <strlen>
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	4605      	mov	r5, r0
 8005060:	f04f 0900 	mov.w	r9, #0
 8005064:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8005068:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800506a:	7813      	ldrb	r3, [r2, #0]
 800506c:	2b2b      	cmp	r3, #43	; 0x2b
 800506e:	d04d      	beq.n	800510c <_strtod_l+0xd4>
 8005070:	d83a      	bhi.n	80050e8 <_strtod_l+0xb0>
 8005072:	2b0d      	cmp	r3, #13
 8005074:	d833      	bhi.n	80050de <_strtod_l+0xa6>
 8005076:	2b08      	cmp	r3, #8
 8005078:	d833      	bhi.n	80050e2 <_strtod_l+0xaa>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d03d      	beq.n	80050fa <_strtod_l+0xc2>
 800507e:	2300      	movs	r3, #0
 8005080:	9308      	str	r3, [sp, #32]
 8005082:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005084:	7833      	ldrb	r3, [r6, #0]
 8005086:	2b30      	cmp	r3, #48	; 0x30
 8005088:	f040 80b0 	bne.w	80051ec <_strtod_l+0x1b4>
 800508c:	7873      	ldrb	r3, [r6, #1]
 800508e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005092:	2b58      	cmp	r3, #88	; 0x58
 8005094:	d167      	bne.n	8005166 <_strtod_l+0x12e>
 8005096:	9b08      	ldr	r3, [sp, #32]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	ab12      	add	r3, sp, #72	; 0x48
 800509c:	9702      	str	r7, [sp, #8]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	4a8c      	ldr	r2, [pc, #560]	; (80052d4 <_strtod_l+0x29c>)
 80050a2:	ab13      	add	r3, sp, #76	; 0x4c
 80050a4:	a911      	add	r1, sp, #68	; 0x44
 80050a6:	4620      	mov	r0, r4
 80050a8:	f001 fc68 	bl	800697c <__gethex>
 80050ac:	f010 0507 	ands.w	r5, r0, #7
 80050b0:	4607      	mov	r7, r0
 80050b2:	d005      	beq.n	80050c0 <_strtod_l+0x88>
 80050b4:	2d06      	cmp	r5, #6
 80050b6:	d12b      	bne.n	8005110 <_strtod_l+0xd8>
 80050b8:	3601      	adds	r6, #1
 80050ba:	2300      	movs	r3, #0
 80050bc:	9611      	str	r6, [sp, #68]	; 0x44
 80050be:	9308      	str	r3, [sp, #32]
 80050c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 854e 	bne.w	8005b64 <_strtod_l+0xb2c>
 80050c8:	9b08      	ldr	r3, [sp, #32]
 80050ca:	b1e3      	cbz	r3, 8005106 <_strtod_l+0xce>
 80050cc:	ec49 8b17 	vmov	d7, r8, r9
 80050d0:	eeb1 0b47 	vneg.f64	d0, d7
 80050d4:	b017      	add	sp, #92	; 0x5c
 80050d6:	ecbd 8b0e 	vpop	{d8-d14}
 80050da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d1cd      	bne.n	800507e <_strtod_l+0x46>
 80050e2:	3201      	adds	r2, #1
 80050e4:	9211      	str	r2, [sp, #68]	; 0x44
 80050e6:	e7bf      	b.n	8005068 <_strtod_l+0x30>
 80050e8:	2b2d      	cmp	r3, #45	; 0x2d
 80050ea:	d1c8      	bne.n	800507e <_strtod_l+0x46>
 80050ec:	2301      	movs	r3, #1
 80050ee:	9308      	str	r3, [sp, #32]
 80050f0:	1c53      	adds	r3, r2, #1
 80050f2:	9311      	str	r3, [sp, #68]	; 0x44
 80050f4:	7853      	ldrb	r3, [r2, #1]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1c3      	bne.n	8005082 <_strtod_l+0x4a>
 80050fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 852d 	bne.w	8005b60 <_strtod_l+0xb28>
 8005106:	ec49 8b10 	vmov	d0, r8, r9
 800510a:	e7e3      	b.n	80050d4 <_strtod_l+0x9c>
 800510c:	2300      	movs	r3, #0
 800510e:	e7ee      	b.n	80050ee <_strtod_l+0xb6>
 8005110:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005112:	b13a      	cbz	r2, 8005124 <_strtod_l+0xec>
 8005114:	2135      	movs	r1, #53	; 0x35
 8005116:	a814      	add	r0, sp, #80	; 0x50
 8005118:	f002 fbde 	bl	80078d8 <__copybits>
 800511c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800511e:	4620      	mov	r0, r4
 8005120:	f001 ffa0 	bl	8007064 <_Bfree>
 8005124:	3d01      	subs	r5, #1
 8005126:	2d04      	cmp	r5, #4
 8005128:	d806      	bhi.n	8005138 <_strtod_l+0x100>
 800512a:	e8df f005 	tbb	[pc, r5]
 800512e:	030a      	.short	0x030a
 8005130:	1714      	.short	0x1714
 8005132:	0a          	.byte	0x0a
 8005133:	00          	.byte	0x00
 8005134:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8005138:	073f      	lsls	r7, r7, #28
 800513a:	d5c1      	bpl.n	80050c0 <_strtod_l+0x88>
 800513c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005140:	e7be      	b.n	80050c0 <_strtod_l+0x88>
 8005142:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8005146:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005148:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800514c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005150:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005154:	e7f0      	b.n	8005138 <_strtod_l+0x100>
 8005156:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80052d8 <_strtod_l+0x2a0>
 800515a:	e7ed      	b.n	8005138 <_strtod_l+0x100>
 800515c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005160:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005164:	e7e8      	b.n	8005138 <_strtod_l+0x100>
 8005166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	9211      	str	r2, [sp, #68]	; 0x44
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	2b30      	cmp	r3, #48	; 0x30
 8005170:	d0f9      	beq.n	8005166 <_strtod_l+0x12e>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0a4      	beq.n	80050c0 <_strtod_l+0x88>
 8005176:	2301      	movs	r3, #1
 8005178:	f04f 0a00 	mov.w	sl, #0
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005180:	930a      	str	r3, [sp, #40]	; 0x28
 8005182:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005186:	f8cd a018 	str.w	sl, [sp, #24]
 800518a:	220a      	movs	r2, #10
 800518c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800518e:	7807      	ldrb	r7, [r0, #0]
 8005190:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005194:	b2d9      	uxtb	r1, r3
 8005196:	2909      	cmp	r1, #9
 8005198:	d92a      	bls.n	80051f0 <_strtod_l+0x1b8>
 800519a:	9907      	ldr	r1, [sp, #28]
 800519c:	462a      	mov	r2, r5
 800519e:	f002 fe4b 	bl	8007e38 <strncmp>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d033      	beq.n	800520e <_strtod_l+0x1d6>
 80051a6:	2000      	movs	r0, #0
 80051a8:	9b06      	ldr	r3, [sp, #24]
 80051aa:	463a      	mov	r2, r7
 80051ac:	4601      	mov	r1, r0
 80051ae:	4607      	mov	r7, r0
 80051b0:	2a65      	cmp	r2, #101	; 0x65
 80051b2:	d001      	beq.n	80051b8 <_strtod_l+0x180>
 80051b4:	2a45      	cmp	r2, #69	; 0x45
 80051b6:	d117      	bne.n	80051e8 <_strtod_l+0x1b0>
 80051b8:	b91b      	cbnz	r3, 80051c2 <_strtod_l+0x18a>
 80051ba:	9b04      	ldr	r3, [sp, #16]
 80051bc:	4303      	orrs	r3, r0
 80051be:	d09c      	beq.n	80050fa <_strtod_l+0xc2>
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80051c6:	f10b 0201 	add.w	r2, fp, #1
 80051ca:	9211      	str	r2, [sp, #68]	; 0x44
 80051cc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80051d0:	2a2b      	cmp	r2, #43	; 0x2b
 80051d2:	d071      	beq.n	80052b8 <_strtod_l+0x280>
 80051d4:	2a2d      	cmp	r2, #45	; 0x2d
 80051d6:	d077      	beq.n	80052c8 <_strtod_l+0x290>
 80051d8:	f04f 0e00 	mov.w	lr, #0
 80051dc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80051e0:	2d09      	cmp	r5, #9
 80051e2:	d97f      	bls.n	80052e4 <_strtod_l+0x2ac>
 80051e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80051e8:	2500      	movs	r5, #0
 80051ea:	e09b      	b.n	8005324 <_strtod_l+0x2ec>
 80051ec:	2300      	movs	r3, #0
 80051ee:	e7c3      	b.n	8005178 <_strtod_l+0x140>
 80051f0:	9906      	ldr	r1, [sp, #24]
 80051f2:	2908      	cmp	r1, #8
 80051f4:	bfdd      	ittte	le
 80051f6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80051f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80051fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80051fe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005202:	9b06      	ldr	r3, [sp, #24]
 8005204:	3001      	adds	r0, #1
 8005206:	3301      	adds	r3, #1
 8005208:	9306      	str	r3, [sp, #24]
 800520a:	9011      	str	r0, [sp, #68]	; 0x44
 800520c:	e7be      	b.n	800518c <_strtod_l+0x154>
 800520e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005210:	195a      	adds	r2, r3, r5
 8005212:	9211      	str	r2, [sp, #68]	; 0x44
 8005214:	5d5a      	ldrb	r2, [r3, r5]
 8005216:	9b06      	ldr	r3, [sp, #24]
 8005218:	b3a3      	cbz	r3, 8005284 <_strtod_l+0x24c>
 800521a:	4607      	mov	r7, r0
 800521c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005220:	2909      	cmp	r1, #9
 8005222:	d912      	bls.n	800524a <_strtod_l+0x212>
 8005224:	2101      	movs	r1, #1
 8005226:	e7c3      	b.n	80051b0 <_strtod_l+0x178>
 8005228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	9211      	str	r2, [sp, #68]	; 0x44
 800522e:	785a      	ldrb	r2, [r3, #1]
 8005230:	3001      	adds	r0, #1
 8005232:	2a30      	cmp	r2, #48	; 0x30
 8005234:	d0f8      	beq.n	8005228 <_strtod_l+0x1f0>
 8005236:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800523a:	2b08      	cmp	r3, #8
 800523c:	f200 8497 	bhi.w	8005b6e <_strtod_l+0xb36>
 8005240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005242:	930a      	str	r3, [sp, #40]	; 0x28
 8005244:	4607      	mov	r7, r0
 8005246:	2000      	movs	r0, #0
 8005248:	4603      	mov	r3, r0
 800524a:	3a30      	subs	r2, #48	; 0x30
 800524c:	f100 0101 	add.w	r1, r0, #1
 8005250:	d012      	beq.n	8005278 <_strtod_l+0x240>
 8005252:	440f      	add	r7, r1
 8005254:	eb00 0c03 	add.w	ip, r0, r3
 8005258:	4619      	mov	r1, r3
 800525a:	250a      	movs	r5, #10
 800525c:	4561      	cmp	r1, ip
 800525e:	d113      	bne.n	8005288 <_strtod_l+0x250>
 8005260:	1819      	adds	r1, r3, r0
 8005262:	2908      	cmp	r1, #8
 8005264:	f103 0301 	add.w	r3, r3, #1
 8005268:	4403      	add	r3, r0
 800526a:	dc1c      	bgt.n	80052a6 <_strtod_l+0x26e>
 800526c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800526e:	210a      	movs	r1, #10
 8005270:	fb01 2200 	mla	r2, r1, r0, r2
 8005274:	9209      	str	r2, [sp, #36]	; 0x24
 8005276:	2100      	movs	r1, #0
 8005278:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800527a:	1c50      	adds	r0, r2, #1
 800527c:	9011      	str	r0, [sp, #68]	; 0x44
 800527e:	7852      	ldrb	r2, [r2, #1]
 8005280:	4608      	mov	r0, r1
 8005282:	e7cb      	b.n	800521c <_strtod_l+0x1e4>
 8005284:	9806      	ldr	r0, [sp, #24]
 8005286:	e7d4      	b.n	8005232 <_strtod_l+0x1fa>
 8005288:	2908      	cmp	r1, #8
 800528a:	dc04      	bgt.n	8005296 <_strtod_l+0x25e>
 800528c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800528e:	436e      	muls	r6, r5
 8005290:	9609      	str	r6, [sp, #36]	; 0x24
 8005292:	3101      	adds	r1, #1
 8005294:	e7e2      	b.n	800525c <_strtod_l+0x224>
 8005296:	f101 0e01 	add.w	lr, r1, #1
 800529a:	f1be 0f10 	cmp.w	lr, #16
 800529e:	bfd8      	it	le
 80052a0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80052a4:	e7f5      	b.n	8005292 <_strtod_l+0x25a>
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	bfdc      	itt	le
 80052aa:	210a      	movle	r1, #10
 80052ac:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80052b0:	e7e1      	b.n	8005276 <_strtod_l+0x23e>
 80052b2:	2700      	movs	r7, #0
 80052b4:	2101      	movs	r1, #1
 80052b6:	e780      	b.n	80051ba <_strtod_l+0x182>
 80052b8:	f04f 0e00 	mov.w	lr, #0
 80052bc:	f10b 0202 	add.w	r2, fp, #2
 80052c0:	9211      	str	r2, [sp, #68]	; 0x44
 80052c2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80052c6:	e789      	b.n	80051dc <_strtod_l+0x1a4>
 80052c8:	f04f 0e01 	mov.w	lr, #1
 80052cc:	e7f6      	b.n	80052bc <_strtod_l+0x284>
 80052ce:	bf00      	nop
 80052d0:	08008d00 	.word	0x08008d00
 80052d4:	08008ab4 	.word	0x08008ab4
 80052d8:	7ff00000 	.word	0x7ff00000
 80052dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80052de:	1c55      	adds	r5, r2, #1
 80052e0:	9511      	str	r5, [sp, #68]	; 0x44
 80052e2:	7852      	ldrb	r2, [r2, #1]
 80052e4:	2a30      	cmp	r2, #48	; 0x30
 80052e6:	d0f9      	beq.n	80052dc <_strtod_l+0x2a4>
 80052e8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80052ec:	2d08      	cmp	r5, #8
 80052ee:	f63f af7b 	bhi.w	80051e8 <_strtod_l+0x1b0>
 80052f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80052f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80052f8:	9207      	str	r2, [sp, #28]
 80052fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80052fc:	1c55      	adds	r5, r2, #1
 80052fe:	9511      	str	r5, [sp, #68]	; 0x44
 8005300:	7852      	ldrb	r2, [r2, #1]
 8005302:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005306:	2e09      	cmp	r6, #9
 8005308:	d937      	bls.n	800537a <_strtod_l+0x342>
 800530a:	9e07      	ldr	r6, [sp, #28]
 800530c:	1bad      	subs	r5, r5, r6
 800530e:	2d08      	cmp	r5, #8
 8005310:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005314:	dc02      	bgt.n	800531c <_strtod_l+0x2e4>
 8005316:	4565      	cmp	r5, ip
 8005318:	bfa8      	it	ge
 800531a:	4665      	movge	r5, ip
 800531c:	f1be 0f00 	cmp.w	lr, #0
 8005320:	d000      	beq.n	8005324 <_strtod_l+0x2ec>
 8005322:	426d      	negs	r5, r5
 8005324:	2b00      	cmp	r3, #0
 8005326:	d14d      	bne.n	80053c4 <_strtod_l+0x38c>
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	4303      	orrs	r3, r0
 800532c:	f47f aec8 	bne.w	80050c0 <_strtod_l+0x88>
 8005330:	2900      	cmp	r1, #0
 8005332:	f47f aee2 	bne.w	80050fa <_strtod_l+0xc2>
 8005336:	2a69      	cmp	r2, #105	; 0x69
 8005338:	d027      	beq.n	800538a <_strtod_l+0x352>
 800533a:	dc24      	bgt.n	8005386 <_strtod_l+0x34e>
 800533c:	2a49      	cmp	r2, #73	; 0x49
 800533e:	d024      	beq.n	800538a <_strtod_l+0x352>
 8005340:	2a4e      	cmp	r2, #78	; 0x4e
 8005342:	f47f aeda 	bne.w	80050fa <_strtod_l+0xc2>
 8005346:	4996      	ldr	r1, [pc, #600]	; (80055a0 <_strtod_l+0x568>)
 8005348:	a811      	add	r0, sp, #68	; 0x44
 800534a:	f001 fd6f 	bl	8006e2c <__match>
 800534e:	2800      	cmp	r0, #0
 8005350:	f43f aed3 	beq.w	80050fa <_strtod_l+0xc2>
 8005354:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b28      	cmp	r3, #40	; 0x28
 800535a:	d12d      	bne.n	80053b8 <_strtod_l+0x380>
 800535c:	4991      	ldr	r1, [pc, #580]	; (80055a4 <_strtod_l+0x56c>)
 800535e:	aa14      	add	r2, sp, #80	; 0x50
 8005360:	a811      	add	r0, sp, #68	; 0x44
 8005362:	f001 fd77 	bl	8006e54 <__hexnan>
 8005366:	2805      	cmp	r0, #5
 8005368:	d126      	bne.n	80053b8 <_strtod_l+0x380>
 800536a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800536c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005370:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005374:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005378:	e6a2      	b.n	80050c0 <_strtod_l+0x88>
 800537a:	250a      	movs	r5, #10
 800537c:	fb05 250c 	mla	r5, r5, ip, r2
 8005380:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8005384:	e7b9      	b.n	80052fa <_strtod_l+0x2c2>
 8005386:	2a6e      	cmp	r2, #110	; 0x6e
 8005388:	e7db      	b.n	8005342 <_strtod_l+0x30a>
 800538a:	4987      	ldr	r1, [pc, #540]	; (80055a8 <_strtod_l+0x570>)
 800538c:	a811      	add	r0, sp, #68	; 0x44
 800538e:	f001 fd4d 	bl	8006e2c <__match>
 8005392:	2800      	cmp	r0, #0
 8005394:	f43f aeb1 	beq.w	80050fa <_strtod_l+0xc2>
 8005398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800539a:	4984      	ldr	r1, [pc, #528]	; (80055ac <_strtod_l+0x574>)
 800539c:	3b01      	subs	r3, #1
 800539e:	a811      	add	r0, sp, #68	; 0x44
 80053a0:	9311      	str	r3, [sp, #68]	; 0x44
 80053a2:	f001 fd43 	bl	8006e2c <__match>
 80053a6:	b910      	cbnz	r0, 80053ae <_strtod_l+0x376>
 80053a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053aa:	3301      	adds	r3, #1
 80053ac:	9311      	str	r3, [sp, #68]	; 0x44
 80053ae:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80055c0 <_strtod_l+0x588>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	e683      	b.n	80050c0 <_strtod_l+0x88>
 80053b8:	487d      	ldr	r0, [pc, #500]	; (80055b0 <_strtod_l+0x578>)
 80053ba:	f002 fd25 	bl	8007e08 <nan>
 80053be:	ec59 8b10 	vmov	r8, r9, d0
 80053c2:	e67d      	b.n	80050c0 <_strtod_l+0x88>
 80053c4:	1bea      	subs	r2, r5, r7
 80053c6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80053ca:	9207      	str	r2, [sp, #28]
 80053cc:	9a06      	ldr	r2, [sp, #24]
 80053ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80053d2:	2a00      	cmp	r2, #0
 80053d4:	bf08      	it	eq
 80053d6:	461a      	moveq	r2, r3
 80053d8:	2b10      	cmp	r3, #16
 80053da:	9206      	str	r2, [sp, #24]
 80053dc:	461a      	mov	r2, r3
 80053de:	bfa8      	it	ge
 80053e0:	2210      	movge	r2, #16
 80053e2:	2b09      	cmp	r3, #9
 80053e4:	ec59 8b17 	vmov	r8, r9, d7
 80053e8:	dd0c      	ble.n	8005404 <_strtod_l+0x3cc>
 80053ea:	4972      	ldr	r1, [pc, #456]	; (80055b4 <_strtod_l+0x57c>)
 80053ec:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80053f0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80053f4:	ee06 aa90 	vmov	s13, sl
 80053f8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80053fc:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005400:	ec59 8b16 	vmov	r8, r9, d6
 8005404:	2b0f      	cmp	r3, #15
 8005406:	dc36      	bgt.n	8005476 <_strtod_l+0x43e>
 8005408:	9907      	ldr	r1, [sp, #28]
 800540a:	2900      	cmp	r1, #0
 800540c:	f43f ae58 	beq.w	80050c0 <_strtod_l+0x88>
 8005410:	dd23      	ble.n	800545a <_strtod_l+0x422>
 8005412:	2916      	cmp	r1, #22
 8005414:	dc0b      	bgt.n	800542e <_strtod_l+0x3f6>
 8005416:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <_strtod_l+0x57c>)
 8005418:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800541c:	ed93 7b00 	vldr	d7, [r3]
 8005420:	ec49 8b16 	vmov	d6, r8, r9
 8005424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005428:	ec59 8b17 	vmov	r8, r9, d7
 800542c:	e648      	b.n	80050c0 <_strtod_l+0x88>
 800542e:	9807      	ldr	r0, [sp, #28]
 8005430:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8005434:	4281      	cmp	r1, r0
 8005436:	db1e      	blt.n	8005476 <_strtod_l+0x43e>
 8005438:	4a5e      	ldr	r2, [pc, #376]	; (80055b4 <_strtod_l+0x57c>)
 800543a:	f1c3 030f 	rsb	r3, r3, #15
 800543e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005442:	ed91 7b00 	vldr	d7, [r1]
 8005446:	ec49 8b16 	vmov	d6, r8, r9
 800544a:	1ac3      	subs	r3, r0, r3
 800544c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8005450:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005454:	ed92 6b00 	vldr	d6, [r2]
 8005458:	e7e4      	b.n	8005424 <_strtod_l+0x3ec>
 800545a:	9907      	ldr	r1, [sp, #28]
 800545c:	3116      	adds	r1, #22
 800545e:	db0a      	blt.n	8005476 <_strtod_l+0x43e>
 8005460:	4b54      	ldr	r3, [pc, #336]	; (80055b4 <_strtod_l+0x57c>)
 8005462:	1b7d      	subs	r5, r7, r5
 8005464:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005468:	ed95 7b00 	vldr	d7, [r5]
 800546c:	ec49 8b16 	vmov	d6, r8, r9
 8005470:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005474:	e7d8      	b.n	8005428 <_strtod_l+0x3f0>
 8005476:	9907      	ldr	r1, [sp, #28]
 8005478:	1a9a      	subs	r2, r3, r2
 800547a:	440a      	add	r2, r1
 800547c:	2a00      	cmp	r2, #0
 800547e:	dd6f      	ble.n	8005560 <_strtod_l+0x528>
 8005480:	f012 000f 	ands.w	r0, r2, #15
 8005484:	d00a      	beq.n	800549c <_strtod_l+0x464>
 8005486:	494b      	ldr	r1, [pc, #300]	; (80055b4 <_strtod_l+0x57c>)
 8005488:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800548c:	ed91 7b00 	vldr	d7, [r1]
 8005490:	ec49 8b16 	vmov	d6, r8, r9
 8005494:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005498:	ec59 8b17 	vmov	r8, r9, d7
 800549c:	f032 020f 	bics.w	r2, r2, #15
 80054a0:	d04f      	beq.n	8005542 <_strtod_l+0x50a>
 80054a2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80054a6:	dd22      	ble.n	80054ee <_strtod_l+0x4b6>
 80054a8:	2500      	movs	r5, #0
 80054aa:	462e      	mov	r6, r5
 80054ac:	9506      	str	r5, [sp, #24]
 80054ae:	462f      	mov	r7, r5
 80054b0:	2322      	movs	r3, #34	; 0x22
 80054b2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80055c0 <_strtod_l+0x588>
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	f04f 0800 	mov.w	r8, #0
 80054bc:	9b06      	ldr	r3, [sp, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f43f adfe 	beq.w	80050c0 <_strtod_l+0x88>
 80054c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80054c6:	4620      	mov	r0, r4
 80054c8:	f001 fdcc 	bl	8007064 <_Bfree>
 80054cc:	4639      	mov	r1, r7
 80054ce:	4620      	mov	r0, r4
 80054d0:	f001 fdc8 	bl	8007064 <_Bfree>
 80054d4:	4631      	mov	r1, r6
 80054d6:	4620      	mov	r0, r4
 80054d8:	f001 fdc4 	bl	8007064 <_Bfree>
 80054dc:	9906      	ldr	r1, [sp, #24]
 80054de:	4620      	mov	r0, r4
 80054e0:	f001 fdc0 	bl	8007064 <_Bfree>
 80054e4:	4629      	mov	r1, r5
 80054e6:	4620      	mov	r0, r4
 80054e8:	f001 fdbc 	bl	8007064 <_Bfree>
 80054ec:	e5e8      	b.n	80050c0 <_strtod_l+0x88>
 80054ee:	2000      	movs	r0, #0
 80054f0:	ec49 8b17 	vmov	d7, r8, r9
 80054f4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80055b8 <_strtod_l+0x580>
 80054f8:	1112      	asrs	r2, r2, #4
 80054fa:	4601      	mov	r1, r0
 80054fc:	2a01      	cmp	r2, #1
 80054fe:	dc23      	bgt.n	8005548 <_strtod_l+0x510>
 8005500:	b108      	cbz	r0, 8005506 <_strtod_l+0x4ce>
 8005502:	ec59 8b17 	vmov	r8, r9, d7
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <_strtod_l+0x580>)
 8005508:	482c      	ldr	r0, [pc, #176]	; (80055bc <_strtod_l+0x584>)
 800550a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800550e:	ed92 7b00 	vldr	d7, [r2]
 8005512:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005516:	ec49 8b16 	vmov	d6, r8, r9
 800551a:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <_strtod_l+0x588>)
 800551c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005520:	ee17 1a90 	vmov	r1, s15
 8005524:	400a      	ands	r2, r1
 8005526:	4282      	cmp	r2, r0
 8005528:	ec59 8b17 	vmov	r8, r9, d7
 800552c:	d8bc      	bhi.n	80054a8 <_strtod_l+0x470>
 800552e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8005532:	4282      	cmp	r2, r0
 8005534:	bf86      	itte	hi
 8005536:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80055c4 <_strtod_l+0x58c>
 800553a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800553e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8005542:	2200      	movs	r2, #0
 8005544:	9204      	str	r2, [sp, #16]
 8005546:	e078      	b.n	800563a <_strtod_l+0x602>
 8005548:	07d6      	lsls	r6, r2, #31
 800554a:	d504      	bpl.n	8005556 <_strtod_l+0x51e>
 800554c:	ed9c 6b00 	vldr	d6, [ip]
 8005550:	2001      	movs	r0, #1
 8005552:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005556:	3101      	adds	r1, #1
 8005558:	1052      	asrs	r2, r2, #1
 800555a:	f10c 0c08 	add.w	ip, ip, #8
 800555e:	e7cd      	b.n	80054fc <_strtod_l+0x4c4>
 8005560:	d0ef      	beq.n	8005542 <_strtod_l+0x50a>
 8005562:	4252      	negs	r2, r2
 8005564:	f012 000f 	ands.w	r0, r2, #15
 8005568:	d00a      	beq.n	8005580 <_strtod_l+0x548>
 800556a:	4912      	ldr	r1, [pc, #72]	; (80055b4 <_strtod_l+0x57c>)
 800556c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005570:	ed91 7b00 	vldr	d7, [r1]
 8005574:	ec49 8b16 	vmov	d6, r8, r9
 8005578:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800557c:	ec59 8b17 	vmov	r8, r9, d7
 8005580:	1112      	asrs	r2, r2, #4
 8005582:	d0de      	beq.n	8005542 <_strtod_l+0x50a>
 8005584:	2a1f      	cmp	r2, #31
 8005586:	dd1f      	ble.n	80055c8 <_strtod_l+0x590>
 8005588:	2500      	movs	r5, #0
 800558a:	462e      	mov	r6, r5
 800558c:	9506      	str	r5, [sp, #24]
 800558e:	462f      	mov	r7, r5
 8005590:	2322      	movs	r3, #34	; 0x22
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	f04f 0900 	mov.w	r9, #0
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	e78e      	b.n	80054bc <_strtod_l+0x484>
 800559e:	bf00      	nop
 80055a0:	08008a85 	.word	0x08008a85
 80055a4:	08008ac8 	.word	0x08008ac8
 80055a8:	08008a7d 	.word	0x08008a7d
 80055ac:	08008c0c 	.word	0x08008c0c
 80055b0:	08008eb8 	.word	0x08008eb8
 80055b4:	08008d98 	.word	0x08008d98
 80055b8:	08008d70 	.word	0x08008d70
 80055bc:	7ca00000 	.word	0x7ca00000
 80055c0:	7ff00000 	.word	0x7ff00000
 80055c4:	7fefffff 	.word	0x7fefffff
 80055c8:	f012 0110 	ands.w	r1, r2, #16
 80055cc:	bf18      	it	ne
 80055ce:	216a      	movne	r1, #106	; 0x6a
 80055d0:	9104      	str	r1, [sp, #16]
 80055d2:	ec49 8b17 	vmov	d7, r8, r9
 80055d6:	49be      	ldr	r1, [pc, #760]	; (80058d0 <_strtod_l+0x898>)
 80055d8:	2000      	movs	r0, #0
 80055da:	07d6      	lsls	r6, r2, #31
 80055dc:	d504      	bpl.n	80055e8 <_strtod_l+0x5b0>
 80055de:	ed91 6b00 	vldr	d6, [r1]
 80055e2:	2001      	movs	r0, #1
 80055e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80055e8:	1052      	asrs	r2, r2, #1
 80055ea:	f101 0108 	add.w	r1, r1, #8
 80055ee:	d1f4      	bne.n	80055da <_strtod_l+0x5a2>
 80055f0:	b108      	cbz	r0, 80055f6 <_strtod_l+0x5be>
 80055f2:	ec59 8b17 	vmov	r8, r9, d7
 80055f6:	9a04      	ldr	r2, [sp, #16]
 80055f8:	b1c2      	cbz	r2, 800562c <_strtod_l+0x5f4>
 80055fa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80055fe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8005602:	2a00      	cmp	r2, #0
 8005604:	4648      	mov	r0, r9
 8005606:	dd11      	ble.n	800562c <_strtod_l+0x5f4>
 8005608:	2a1f      	cmp	r2, #31
 800560a:	f340 812e 	ble.w	800586a <_strtod_l+0x832>
 800560e:	2a34      	cmp	r2, #52	; 0x34
 8005610:	bfde      	ittt	le
 8005612:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8005616:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800561a:	fa02 f101 	lslle.w	r1, r2, r1
 800561e:	f04f 0800 	mov.w	r8, #0
 8005622:	bfcc      	ite	gt
 8005624:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005628:	ea01 0900 	andle.w	r9, r1, r0
 800562c:	ec49 8b17 	vmov	d7, r8, r9
 8005630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	d0a6      	beq.n	8005588 <_strtod_l+0x550>
 800563a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800563c:	9200      	str	r2, [sp, #0]
 800563e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005640:	9a06      	ldr	r2, [sp, #24]
 8005642:	4620      	mov	r0, r4
 8005644:	f001 fd76 	bl	8007134 <__s2b>
 8005648:	9006      	str	r0, [sp, #24]
 800564a:	2800      	cmp	r0, #0
 800564c:	f43f af2c 	beq.w	80054a8 <_strtod_l+0x470>
 8005650:	9b07      	ldr	r3, [sp, #28]
 8005652:	1b7d      	subs	r5, r7, r5
 8005654:	2b00      	cmp	r3, #0
 8005656:	bfb4      	ite	lt
 8005658:	462b      	movlt	r3, r5
 800565a:	2300      	movge	r3, #0
 800565c:	9309      	str	r3, [sp, #36]	; 0x24
 800565e:	9b07      	ldr	r3, [sp, #28]
 8005660:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80058b0 <_strtod_l+0x878>
 8005664:	ed9f ab94 	vldr	d10, [pc, #592]	; 80058b8 <_strtod_l+0x880>
 8005668:	ed9f bb95 	vldr	d11, [pc, #596]	; 80058c0 <_strtod_l+0x888>
 800566c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005670:	2500      	movs	r5, #0
 8005672:	930c      	str	r3, [sp, #48]	; 0x30
 8005674:	462e      	mov	r6, r5
 8005676:	9b06      	ldr	r3, [sp, #24]
 8005678:	4620      	mov	r0, r4
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	f001 fcb2 	bl	8006fe4 <_Balloc>
 8005680:	4607      	mov	r7, r0
 8005682:	2800      	cmp	r0, #0
 8005684:	f43f af14 	beq.w	80054b0 <_strtod_l+0x478>
 8005688:	9b06      	ldr	r3, [sp, #24]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	3202      	adds	r2, #2
 800568e:	f103 010c 	add.w	r1, r3, #12
 8005692:	0092      	lsls	r2, r2, #2
 8005694:	300c      	adds	r0, #12
 8005696:	f001 fc97 	bl	8006fc8 <memcpy>
 800569a:	ec49 8b10 	vmov	d0, r8, r9
 800569e:	aa14      	add	r2, sp, #80	; 0x50
 80056a0:	a913      	add	r1, sp, #76	; 0x4c
 80056a2:	4620      	mov	r0, r4
 80056a4:	f002 f88c 	bl	80077c0 <__d2b>
 80056a8:	ec49 8b18 	vmov	d8, r8, r9
 80056ac:	9012      	str	r0, [sp, #72]	; 0x48
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f43f aefe 	beq.w	80054b0 <_strtod_l+0x478>
 80056b4:	2101      	movs	r1, #1
 80056b6:	4620      	mov	r0, r4
 80056b8:	f001 fdd6 	bl	8007268 <__i2b>
 80056bc:	4606      	mov	r6, r0
 80056be:	2800      	cmp	r0, #0
 80056c0:	f43f aef6 	beq.w	80054b0 <_strtod_l+0x478>
 80056c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bfab      	itete	ge
 80056cc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80056ce:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80056d0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80056d4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80056d8:	bfac      	ite	ge
 80056da:	eb03 0b02 	addge.w	fp, r3, r2
 80056de:	eba2 0a03 	sublt.w	sl, r2, r3
 80056e2:	9a04      	ldr	r2, [sp, #16]
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	440b      	add	r3, r1
 80056e8:	4a7a      	ldr	r2, [pc, #488]	; (80058d4 <_strtod_l+0x89c>)
 80056ea:	3b01      	subs	r3, #1
 80056ec:	4293      	cmp	r3, r2
 80056ee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80056f2:	f280 80cd 	bge.w	8005890 <_strtod_l+0x858>
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	2a1f      	cmp	r2, #31
 80056fa:	eba1 0102 	sub.w	r1, r1, r2
 80056fe:	f04f 0001 	mov.w	r0, #1
 8005702:	f300 80b9 	bgt.w	8005878 <_strtod_l+0x840>
 8005706:	fa00 f302 	lsl.w	r3, r0, r2
 800570a:	930b      	str	r3, [sp, #44]	; 0x2c
 800570c:	2300      	movs	r3, #0
 800570e:	930a      	str	r3, [sp, #40]	; 0x28
 8005710:	eb0b 0301 	add.w	r3, fp, r1
 8005714:	9a04      	ldr	r2, [sp, #16]
 8005716:	459b      	cmp	fp, r3
 8005718:	448a      	add	sl, r1
 800571a:	4492      	add	sl, r2
 800571c:	465a      	mov	r2, fp
 800571e:	bfa8      	it	ge
 8005720:	461a      	movge	r2, r3
 8005722:	4552      	cmp	r2, sl
 8005724:	bfa8      	it	ge
 8005726:	4652      	movge	r2, sl
 8005728:	2a00      	cmp	r2, #0
 800572a:	bfc2      	ittt	gt
 800572c:	1a9b      	subgt	r3, r3, r2
 800572e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8005732:	ebab 0b02 	subgt.w	fp, fp, r2
 8005736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005738:	2a00      	cmp	r2, #0
 800573a:	dd18      	ble.n	800576e <_strtod_l+0x736>
 800573c:	4631      	mov	r1, r6
 800573e:	4620      	mov	r0, r4
 8005740:	930f      	str	r3, [sp, #60]	; 0x3c
 8005742:	f001 fe51 	bl	80073e8 <__pow5mult>
 8005746:	4606      	mov	r6, r0
 8005748:	2800      	cmp	r0, #0
 800574a:	f43f aeb1 	beq.w	80054b0 <_strtod_l+0x478>
 800574e:	4601      	mov	r1, r0
 8005750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005752:	4620      	mov	r0, r4
 8005754:	f001 fd9e 	bl	8007294 <__multiply>
 8005758:	900e      	str	r0, [sp, #56]	; 0x38
 800575a:	2800      	cmp	r0, #0
 800575c:	f43f aea8 	beq.w	80054b0 <_strtod_l+0x478>
 8005760:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005762:	4620      	mov	r0, r4
 8005764:	f001 fc7e 	bl	8007064 <_Bfree>
 8005768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800576a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800576c:	9212      	str	r2, [sp, #72]	; 0x48
 800576e:	2b00      	cmp	r3, #0
 8005770:	f300 8093 	bgt.w	800589a <_strtod_l+0x862>
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	dd08      	ble.n	800578c <_strtod_l+0x754>
 800577a:	4639      	mov	r1, r7
 800577c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800577e:	4620      	mov	r0, r4
 8005780:	f001 fe32 	bl	80073e8 <__pow5mult>
 8005784:	4607      	mov	r7, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f ae92 	beq.w	80054b0 <_strtod_l+0x478>
 800578c:	f1ba 0f00 	cmp.w	sl, #0
 8005790:	dd08      	ble.n	80057a4 <_strtod_l+0x76c>
 8005792:	4639      	mov	r1, r7
 8005794:	4652      	mov	r2, sl
 8005796:	4620      	mov	r0, r4
 8005798:	f001 fe80 	bl	800749c <__lshift>
 800579c:	4607      	mov	r7, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	f43f ae86 	beq.w	80054b0 <_strtod_l+0x478>
 80057a4:	f1bb 0f00 	cmp.w	fp, #0
 80057a8:	dd08      	ble.n	80057bc <_strtod_l+0x784>
 80057aa:	4631      	mov	r1, r6
 80057ac:	465a      	mov	r2, fp
 80057ae:	4620      	mov	r0, r4
 80057b0:	f001 fe74 	bl	800749c <__lshift>
 80057b4:	4606      	mov	r6, r0
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f43f ae7a 	beq.w	80054b0 <_strtod_l+0x478>
 80057bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80057be:	463a      	mov	r2, r7
 80057c0:	4620      	mov	r0, r4
 80057c2:	f001 fef7 	bl	80075b4 <__mdiff>
 80057c6:	4605      	mov	r5, r0
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f43f ae71 	beq.w	80054b0 <_strtod_l+0x478>
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80057d4:	60c3      	str	r3, [r0, #12]
 80057d6:	4631      	mov	r1, r6
 80057d8:	f001 fed0 	bl	800757c <__mcmp>
 80057dc:	2800      	cmp	r0, #0
 80057de:	da7d      	bge.n	80058dc <_strtod_l+0x8a4>
 80057e0:	ea5a 0308 	orrs.w	r3, sl, r8
 80057e4:	f040 80a3 	bne.w	800592e <_strtod_l+0x8f6>
 80057e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 809e 	bne.w	800592e <_strtod_l+0x8f6>
 80057f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057f6:	0d1b      	lsrs	r3, r3, #20
 80057f8:	051b      	lsls	r3, r3, #20
 80057fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80057fe:	f240 8096 	bls.w	800592e <_strtod_l+0x8f6>
 8005802:	696b      	ldr	r3, [r5, #20]
 8005804:	b91b      	cbnz	r3, 800580e <_strtod_l+0x7d6>
 8005806:	692b      	ldr	r3, [r5, #16]
 8005808:	2b01      	cmp	r3, #1
 800580a:	f340 8090 	ble.w	800592e <_strtod_l+0x8f6>
 800580e:	4629      	mov	r1, r5
 8005810:	2201      	movs	r2, #1
 8005812:	4620      	mov	r0, r4
 8005814:	f001 fe42 	bl	800749c <__lshift>
 8005818:	4631      	mov	r1, r6
 800581a:	4605      	mov	r5, r0
 800581c:	f001 feae 	bl	800757c <__mcmp>
 8005820:	2800      	cmp	r0, #0
 8005822:	f340 8084 	ble.w	800592e <_strtod_l+0x8f6>
 8005826:	9904      	ldr	r1, [sp, #16]
 8005828:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <_strtod_l+0x8a0>)
 800582a:	464b      	mov	r3, r9
 800582c:	2900      	cmp	r1, #0
 800582e:	f000 809d 	beq.w	800596c <_strtod_l+0x934>
 8005832:	ea02 0109 	and.w	r1, r2, r9
 8005836:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800583a:	f300 8097 	bgt.w	800596c <_strtod_l+0x934>
 800583e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005842:	f77f aea5 	ble.w	8005590 <_strtod_l+0x558>
 8005846:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80058c8 <_strtod_l+0x890>
 800584a:	ec49 8b16 	vmov	d6, r8, r9
 800584e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005852:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005856:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	bf08      	it	eq
 800585e:	2322      	moveq	r3, #34	; 0x22
 8005860:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005864:	bf08      	it	eq
 8005866:	6023      	streq	r3, [r4, #0]
 8005868:	e62c      	b.n	80054c4 <_strtod_l+0x48c>
 800586a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800586e:	fa01 f202 	lsl.w	r2, r1, r2
 8005872:	ea02 0808 	and.w	r8, r2, r8
 8005876:	e6d9      	b.n	800562c <_strtod_l+0x5f4>
 8005878:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800587c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005880:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8005884:	33e2      	adds	r3, #226	; 0xe2
 8005886:	fa00 f303 	lsl.w	r3, r0, r3
 800588a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800588e:	e73f      	b.n	8005710 <_strtod_l+0x6d8>
 8005890:	2200      	movs	r2, #0
 8005892:	2301      	movs	r3, #1
 8005894:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005898:	e73a      	b.n	8005710 <_strtod_l+0x6d8>
 800589a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800589c:	461a      	mov	r2, r3
 800589e:	4620      	mov	r0, r4
 80058a0:	f001 fdfc 	bl	800749c <__lshift>
 80058a4:	9012      	str	r0, [sp, #72]	; 0x48
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f47f af64 	bne.w	8005774 <_strtod_l+0x73c>
 80058ac:	e600      	b.n	80054b0 <_strtod_l+0x478>
 80058ae:	bf00      	nop
 80058b0:	94a03595 	.word	0x94a03595
 80058b4:	3fcfffff 	.word	0x3fcfffff
 80058b8:	94a03595 	.word	0x94a03595
 80058bc:	3fdfffff 	.word	0x3fdfffff
 80058c0:	35afe535 	.word	0x35afe535
 80058c4:	3fe00000 	.word	0x3fe00000
 80058c8:	00000000 	.word	0x00000000
 80058cc:	39500000 	.word	0x39500000
 80058d0:	08008ae0 	.word	0x08008ae0
 80058d4:	fffffc02 	.word	0xfffffc02
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	46cb      	mov	fp, r9
 80058de:	d15f      	bne.n	80059a0 <_strtod_l+0x968>
 80058e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058e4:	f1ba 0f00 	cmp.w	sl, #0
 80058e8:	d02a      	beq.n	8005940 <_strtod_l+0x908>
 80058ea:	4aa7      	ldr	r2, [pc, #668]	; (8005b88 <_strtod_l+0xb50>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d12b      	bne.n	8005948 <_strtod_l+0x910>
 80058f0:	9b04      	ldr	r3, [sp, #16]
 80058f2:	4642      	mov	r2, r8
 80058f4:	b1fb      	cbz	r3, 8005936 <_strtod_l+0x8fe>
 80058f6:	4ba5      	ldr	r3, [pc, #660]	; (8005b8c <_strtod_l+0xb54>)
 80058f8:	ea09 0303 	and.w	r3, r9, r3
 80058fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005904:	d81a      	bhi.n	800593c <_strtod_l+0x904>
 8005906:	0d1b      	lsrs	r3, r3, #20
 8005908:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	429a      	cmp	r2, r3
 8005912:	d119      	bne.n	8005948 <_strtod_l+0x910>
 8005914:	4b9e      	ldr	r3, [pc, #632]	; (8005b90 <_strtod_l+0xb58>)
 8005916:	459b      	cmp	fp, r3
 8005918:	d102      	bne.n	8005920 <_strtod_l+0x8e8>
 800591a:	3201      	adds	r2, #1
 800591c:	f43f adc8 	beq.w	80054b0 <_strtod_l+0x478>
 8005920:	4b9a      	ldr	r3, [pc, #616]	; (8005b8c <_strtod_l+0xb54>)
 8005922:	ea0b 0303 	and.w	r3, fp, r3
 8005926:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800592a:	f04f 0800 	mov.w	r8, #0
 800592e:	9b04      	ldr	r3, [sp, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d188      	bne.n	8005846 <_strtod_l+0x80e>
 8005934:	e5c6      	b.n	80054c4 <_strtod_l+0x48c>
 8005936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800593a:	e7e9      	b.n	8005910 <_strtod_l+0x8d8>
 800593c:	460b      	mov	r3, r1
 800593e:	e7e7      	b.n	8005910 <_strtod_l+0x8d8>
 8005940:	ea53 0308 	orrs.w	r3, r3, r8
 8005944:	f43f af6f 	beq.w	8005826 <_strtod_l+0x7ee>
 8005948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594a:	b1cb      	cbz	r3, 8005980 <_strtod_l+0x948>
 800594c:	ea13 0f0b 	tst.w	r3, fp
 8005950:	d0ed      	beq.n	800592e <_strtod_l+0x8f6>
 8005952:	9a04      	ldr	r2, [sp, #16]
 8005954:	4640      	mov	r0, r8
 8005956:	4649      	mov	r1, r9
 8005958:	f1ba 0f00 	cmp.w	sl, #0
 800595c:	d014      	beq.n	8005988 <_strtod_l+0x950>
 800595e:	f7ff fb51 	bl	8005004 <sulp>
 8005962:	ee38 7b00 	vadd.f64	d7, d8, d0
 8005966:	ec59 8b17 	vmov	r8, r9, d7
 800596a:	e7e0      	b.n	800592e <_strtod_l+0x8f6>
 800596c:	4013      	ands	r3, r2
 800596e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005972:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005976:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800597a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800597e:	e7d6      	b.n	800592e <_strtod_l+0x8f6>
 8005980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005982:	ea13 0f08 	tst.w	r3, r8
 8005986:	e7e3      	b.n	8005950 <_strtod_l+0x918>
 8005988:	f7ff fb3c 	bl	8005004 <sulp>
 800598c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8005990:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005998:	ec59 8b10 	vmov	r8, r9, d0
 800599c:	d1c7      	bne.n	800592e <_strtod_l+0x8f6>
 800599e:	e5f7      	b.n	8005590 <_strtod_l+0x558>
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	f001 ff68 	bl	8007878 <__ratio>
 80059a8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80059ac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80059b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b4:	d865      	bhi.n	8005a82 <_strtod_l+0xa4a>
 80059b6:	f1ba 0f00 	cmp.w	sl, #0
 80059ba:	d042      	beq.n	8005a42 <_strtod_l+0xa0a>
 80059bc:	4b75      	ldr	r3, [pc, #468]	; (8005b94 <_strtod_l+0xb5c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80059c4:	4871      	ldr	r0, [pc, #452]	; (8005b8c <_strtod_l+0xb54>)
 80059c6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8005ba0 <_strtod_l+0xb68>
 80059ca:	ea0b 0100 	and.w	r1, fp, r0
 80059ce:	4561      	cmp	r1, ip
 80059d0:	f040 808e 	bne.w	8005af0 <_strtod_l+0xab8>
 80059d4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80059d8:	ec49 8b10 	vmov	d0, r8, r9
 80059dc:	ec43 2b1c 	vmov	d12, r2, r3
 80059e0:	910a      	str	r1, [sp, #40]	; 0x28
 80059e2:	f001 fe71 	bl	80076c8 <__ulp>
 80059e6:	ec49 8b1e 	vmov	d14, r8, r9
 80059ea:	4868      	ldr	r0, [pc, #416]	; (8005b8c <_strtod_l+0xb54>)
 80059ec:	eeac eb00 	vfma.f64	d14, d12, d0
 80059f0:	ee1e 3a90 	vmov	r3, s29
 80059f4:	4a68      	ldr	r2, [pc, #416]	; (8005b98 <_strtod_l+0xb60>)
 80059f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059f8:	4018      	ands	r0, r3
 80059fa:	4290      	cmp	r0, r2
 80059fc:	ec59 8b1e 	vmov	r8, r9, d14
 8005a00:	d94e      	bls.n	8005aa0 <_strtod_l+0xa68>
 8005a02:	ee18 3a90 	vmov	r3, s17
 8005a06:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d104      	bne.n	8005a18 <_strtod_l+0x9e0>
 8005a0e:	ee18 3a10 	vmov	r3, s16
 8005a12:	3301      	adds	r3, #1
 8005a14:	f43f ad4c 	beq.w	80054b0 <_strtod_l+0x478>
 8005a18:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005b90 <_strtod_l+0xb58>
 8005a1c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005a20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005a22:	4620      	mov	r0, r4
 8005a24:	f001 fb1e 	bl	8007064 <_Bfree>
 8005a28:	4639      	mov	r1, r7
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f001 fb1a 	bl	8007064 <_Bfree>
 8005a30:	4631      	mov	r1, r6
 8005a32:	4620      	mov	r0, r4
 8005a34:	f001 fb16 	bl	8007064 <_Bfree>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f001 fb12 	bl	8007064 <_Bfree>
 8005a40:	e619      	b.n	8005676 <_strtod_l+0x63e>
 8005a42:	f1b8 0f00 	cmp.w	r8, #0
 8005a46:	d112      	bne.n	8005a6e <_strtod_l+0xa36>
 8005a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a4c:	b9b3      	cbnz	r3, 8005a7c <_strtod_l+0xa44>
 8005a4e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8005a52:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8005a5e:	bf58      	it	pl
 8005a60:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8005a64:	eeb1 7b4d 	vneg.f64	d7, d13
 8005a68:	ec53 2b17 	vmov	r2, r3, d7
 8005a6c:	e7aa      	b.n	80059c4 <_strtod_l+0x98c>
 8005a6e:	f1b8 0f01 	cmp.w	r8, #1
 8005a72:	d103      	bne.n	8005a7c <_strtod_l+0xa44>
 8005a74:	f1b9 0f00 	cmp.w	r9, #0
 8005a78:	f43f ad8a 	beq.w	8005590 <_strtod_l+0x558>
 8005a7c:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <_strtod_l+0xb64>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	e79e      	b.n	80059c0 <_strtod_l+0x988>
 8005a82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8005a86:	ee20 db0d 	vmul.f64	d13, d0, d13
 8005a8a:	f1ba 0f00 	cmp.w	sl, #0
 8005a8e:	d104      	bne.n	8005a9a <_strtod_l+0xa62>
 8005a90:	eeb1 7b4d 	vneg.f64	d7, d13
 8005a94:	ec53 2b17 	vmov	r2, r3, d7
 8005a98:	e794      	b.n	80059c4 <_strtod_l+0x98c>
 8005a9a:	eeb0 7b4d 	vmov.f64	d7, d13
 8005a9e:	e7f9      	b.n	8005a94 <_strtod_l+0xa5c>
 8005aa0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005aa4:	9b04      	ldr	r3, [sp, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1ba      	bne.n	8005a20 <_strtod_l+0x9e8>
 8005aaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005aae:	0d1b      	lsrs	r3, r3, #20
 8005ab0:	051b      	lsls	r3, r3, #20
 8005ab2:	4299      	cmp	r1, r3
 8005ab4:	d1b4      	bne.n	8005a20 <_strtod_l+0x9e8>
 8005ab6:	ec51 0b1d 	vmov	r0, r1, d13
 8005aba:	f7fa fded 	bl	8000698 <__aeabi_d2lz>
 8005abe:	f7fa fda5 	bl	800060c <__aeabi_l2d>
 8005ac2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ac6:	ec41 0b17 	vmov	d7, r0, r1
 8005aca:	ea43 0308 	orr.w	r3, r3, r8
 8005ace:	ea53 030a 	orrs.w	r3, r3, sl
 8005ad2:	ee3d db47 	vsub.f64	d13, d13, d7
 8005ad6:	d03c      	beq.n	8005b52 <_strtod_l+0xb1a>
 8005ad8:	eeb4 dbca 	vcmpe.f64	d13, d10
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	f53f acf0 	bmi.w	80054c4 <_strtod_l+0x48c>
 8005ae4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8005ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aec:	dd98      	ble.n	8005a20 <_strtod_l+0x9e8>
 8005aee:	e4e9      	b.n	80054c4 <_strtod_l+0x48c>
 8005af0:	9804      	ldr	r0, [sp, #16]
 8005af2:	b1f0      	cbz	r0, 8005b32 <_strtod_l+0xafa>
 8005af4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8005af8:	d81b      	bhi.n	8005b32 <_strtod_l+0xafa>
 8005afa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005b80 <_strtod_l+0xb48>
 8005afe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8005b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b06:	d811      	bhi.n	8005b2c <_strtod_l+0xaf4>
 8005b08:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8005b0c:	ee1d 3a10 	vmov	r3, s26
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	bf38      	it	cc
 8005b14:	2301      	movcc	r3, #1
 8005b16:	ee0d 3a10 	vmov	s26, r3
 8005b1a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8005b1e:	f1ba 0f00 	cmp.w	sl, #0
 8005b22:	d113      	bne.n	8005b4c <_strtod_l+0xb14>
 8005b24:	eeb1 7b4d 	vneg.f64	d7, d13
 8005b28:	ec53 2b17 	vmov	r2, r3, d7
 8005b2c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8005b30:	1a43      	subs	r3, r0, r1
 8005b32:	eeb0 0b48 	vmov.f64	d0, d8
 8005b36:	ec43 2b1c 	vmov	d12, r2, r3
 8005b3a:	910a      	str	r1, [sp, #40]	; 0x28
 8005b3c:	f001 fdc4 	bl	80076c8 <__ulp>
 8005b40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b42:	eeac 8b00 	vfma.f64	d8, d12, d0
 8005b46:	ec59 8b18 	vmov	r8, r9, d8
 8005b4a:	e7ab      	b.n	8005aa4 <_strtod_l+0xa6c>
 8005b4c:	eeb0 7b4d 	vmov.f64	d7, d13
 8005b50:	e7ea      	b.n	8005b28 <_strtod_l+0xaf0>
 8005b52:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8005b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5a:	f57f af61 	bpl.w	8005a20 <_strtod_l+0x9e8>
 8005b5e:	e4b1      	b.n	80054c4 <_strtod_l+0x48c>
 8005b60:	2300      	movs	r3, #0
 8005b62:	9308      	str	r3, [sp, #32]
 8005b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	f7ff baad 	b.w	80050c8 <_strtod_l+0x90>
 8005b6e:	2a65      	cmp	r2, #101	; 0x65
 8005b70:	f43f ab9f 	beq.w	80052b2 <_strtod_l+0x27a>
 8005b74:	2a45      	cmp	r2, #69	; 0x45
 8005b76:	f43f ab9c 	beq.w	80052b2 <_strtod_l+0x27a>
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	f7ff bbd4 	b.w	8005328 <_strtod_l+0x2f0>
 8005b80:	ffc00000 	.word	0xffc00000
 8005b84:	41dfffff 	.word	0x41dfffff
 8005b88:	000fffff 	.word	0x000fffff
 8005b8c:	7ff00000 	.word	0x7ff00000
 8005b90:	7fefffff 	.word	0x7fefffff
 8005b94:	3ff00000 	.word	0x3ff00000
 8005b98:	7c9fffff 	.word	0x7c9fffff
 8005b9c:	bff00000 	.word	0xbff00000
 8005ba0:	7fe00000 	.word	0x7fe00000

08005ba4 <_strtod_r>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	; (8005bac <_strtod_r+0x8>)
 8005ba6:	f7ff ba47 	b.w	8005038 <_strtod_l>
 8005baa:	bf00      	nop
 8005bac:	20000074 	.word	0x20000074

08005bb0 <_strtol_l.constprop.0>:
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb6:	d001      	beq.n	8005bbc <_strtol_l.constprop.0+0xc>
 8005bb8:	2b24      	cmp	r3, #36	; 0x24
 8005bba:	d906      	bls.n	8005bca <_strtol_l.constprop.0+0x1a>
 8005bbc:	f7fe fb82 	bl	80042c4 <__errno>
 8005bc0:	2316      	movs	r3, #22
 8005bc2:	6003      	str	r3, [r0, #0]
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005cb0 <_strtol_l.constprop.0+0x100>
 8005bce:	460d      	mov	r5, r1
 8005bd0:	462e      	mov	r6, r5
 8005bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005bda:	f017 0708 	ands.w	r7, r7, #8
 8005bde:	d1f7      	bne.n	8005bd0 <_strtol_l.constprop.0+0x20>
 8005be0:	2c2d      	cmp	r4, #45	; 0x2d
 8005be2:	d132      	bne.n	8005c4a <_strtol_l.constprop.0+0x9a>
 8005be4:	782c      	ldrb	r4, [r5, #0]
 8005be6:	2701      	movs	r7, #1
 8005be8:	1cb5      	adds	r5, r6, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d05b      	beq.n	8005ca6 <_strtol_l.constprop.0+0xf6>
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d109      	bne.n	8005c06 <_strtol_l.constprop.0+0x56>
 8005bf2:	2c30      	cmp	r4, #48	; 0x30
 8005bf4:	d107      	bne.n	8005c06 <_strtol_l.constprop.0+0x56>
 8005bf6:	782c      	ldrb	r4, [r5, #0]
 8005bf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005bfc:	2c58      	cmp	r4, #88	; 0x58
 8005bfe:	d14d      	bne.n	8005c9c <_strtol_l.constprop.0+0xec>
 8005c00:	786c      	ldrb	r4, [r5, #1]
 8005c02:	2310      	movs	r3, #16
 8005c04:	3502      	adds	r5, #2
 8005c06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005c0e:	f04f 0c00 	mov.w	ip, #0
 8005c12:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c16:	4666      	mov	r6, ip
 8005c18:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005c20:	f1be 0f09 	cmp.w	lr, #9
 8005c24:	d816      	bhi.n	8005c54 <_strtol_l.constprop.0+0xa4>
 8005c26:	4674      	mov	r4, lr
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	dd24      	ble.n	8005c76 <_strtol_l.constprop.0+0xc6>
 8005c2c:	f1bc 0f00 	cmp.w	ip, #0
 8005c30:	db1e      	blt.n	8005c70 <_strtol_l.constprop.0+0xc0>
 8005c32:	45b1      	cmp	r9, r6
 8005c34:	d31c      	bcc.n	8005c70 <_strtol_l.constprop.0+0xc0>
 8005c36:	d101      	bne.n	8005c3c <_strtol_l.constprop.0+0x8c>
 8005c38:	45a2      	cmp	sl, r4
 8005c3a:	db19      	blt.n	8005c70 <_strtol_l.constprop.0+0xc0>
 8005c3c:	fb06 4603 	mla	r6, r6, r3, r4
 8005c40:	f04f 0c01 	mov.w	ip, #1
 8005c44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c48:	e7e8      	b.n	8005c1c <_strtol_l.constprop.0+0x6c>
 8005c4a:	2c2b      	cmp	r4, #43	; 0x2b
 8005c4c:	bf04      	itt	eq
 8005c4e:	782c      	ldrbeq	r4, [r5, #0]
 8005c50:	1cb5      	addeq	r5, r6, #2
 8005c52:	e7ca      	b.n	8005bea <_strtol_l.constprop.0+0x3a>
 8005c54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005c58:	f1be 0f19 	cmp.w	lr, #25
 8005c5c:	d801      	bhi.n	8005c62 <_strtol_l.constprop.0+0xb2>
 8005c5e:	3c37      	subs	r4, #55	; 0x37
 8005c60:	e7e2      	b.n	8005c28 <_strtol_l.constprop.0+0x78>
 8005c62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005c66:	f1be 0f19 	cmp.w	lr, #25
 8005c6a:	d804      	bhi.n	8005c76 <_strtol_l.constprop.0+0xc6>
 8005c6c:	3c57      	subs	r4, #87	; 0x57
 8005c6e:	e7db      	b.n	8005c28 <_strtol_l.constprop.0+0x78>
 8005c70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005c74:	e7e6      	b.n	8005c44 <_strtol_l.constprop.0+0x94>
 8005c76:	f1bc 0f00 	cmp.w	ip, #0
 8005c7a:	da05      	bge.n	8005c88 <_strtol_l.constprop.0+0xd8>
 8005c7c:	2322      	movs	r3, #34	; 0x22
 8005c7e:	6003      	str	r3, [r0, #0]
 8005c80:	4646      	mov	r6, r8
 8005c82:	b942      	cbnz	r2, 8005c96 <_strtol_l.constprop.0+0xe6>
 8005c84:	4630      	mov	r0, r6
 8005c86:	e79e      	b.n	8005bc6 <_strtol_l.constprop.0+0x16>
 8005c88:	b107      	cbz	r7, 8005c8c <_strtol_l.constprop.0+0xdc>
 8005c8a:	4276      	negs	r6, r6
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d0f9      	beq.n	8005c84 <_strtol_l.constprop.0+0xd4>
 8005c90:	f1bc 0f00 	cmp.w	ip, #0
 8005c94:	d000      	beq.n	8005c98 <_strtol_l.constprop.0+0xe8>
 8005c96:	1e69      	subs	r1, r5, #1
 8005c98:	6011      	str	r1, [r2, #0]
 8005c9a:	e7f3      	b.n	8005c84 <_strtol_l.constprop.0+0xd4>
 8005c9c:	2430      	movs	r4, #48	; 0x30
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1b1      	bne.n	8005c06 <_strtol_l.constprop.0+0x56>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	e7af      	b.n	8005c06 <_strtol_l.constprop.0+0x56>
 8005ca6:	2c30      	cmp	r4, #48	; 0x30
 8005ca8:	d0a5      	beq.n	8005bf6 <_strtol_l.constprop.0+0x46>
 8005caa:	230a      	movs	r3, #10
 8005cac:	e7ab      	b.n	8005c06 <_strtol_l.constprop.0+0x56>
 8005cae:	bf00      	nop
 8005cb0:	08008b09 	.word	0x08008b09

08005cb4 <_strtol_r>:
 8005cb4:	f7ff bf7c 	b.w	8005bb0 <_strtol_l.constprop.0>

08005cb8 <quorem>:
 8005cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	6903      	ldr	r3, [r0, #16]
 8005cbe:	690c      	ldr	r4, [r1, #16]
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	f2c0 8081 	blt.w	8005dca <quorem+0x112>
 8005cc8:	3c01      	subs	r4, #1
 8005cca:	f101 0814 	add.w	r8, r1, #20
 8005cce:	f100 0514 	add.w	r5, r0, #20
 8005cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cf0:	d331      	bcc.n	8005d56 <quorem+0x9e>
 8005cf2:	f04f 0e00 	mov.w	lr, #0
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	46ac      	mov	ip, r5
 8005cfa:	46f2      	mov	sl, lr
 8005cfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d00:	b293      	uxth	r3, r2
 8005d02:	fb06 e303 	mla	r3, r6, r3, lr
 8005d06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	ebaa 0303 	sub.w	r3, sl, r3
 8005d10:	f8dc a000 	ldr.w	sl, [ip]
 8005d14:	0c12      	lsrs	r2, r2, #16
 8005d16:	fa13 f38a 	uxtah	r3, r3, sl
 8005d1a:	fb06 e202 	mla	r2, r6, r2, lr
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	9b00      	ldr	r3, [sp, #0]
 8005d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d26:	b292      	uxth	r2, r2
 8005d28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d30:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d34:	4581      	cmp	r9, r0
 8005d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d3a:	f84c 3b04 	str.w	r3, [ip], #4
 8005d3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d42:	d2db      	bcs.n	8005cfc <quorem+0x44>
 8005d44:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d48:	b92b      	cbnz	r3, 8005d56 <quorem+0x9e>
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	d32e      	bcc.n	8005db2 <quorem+0xfa>
 8005d54:	613c      	str	r4, [r7, #16]
 8005d56:	4638      	mov	r0, r7
 8005d58:	f001 fc10 	bl	800757c <__mcmp>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	db24      	blt.n	8005daa <quorem+0xf2>
 8005d60:	3601      	adds	r6, #1
 8005d62:	4628      	mov	r0, r5
 8005d64:	f04f 0c00 	mov.w	ip, #0
 8005d68:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d6c:	f8d0 e000 	ldr.w	lr, [r0]
 8005d70:	b293      	uxth	r3, r2
 8005d72:	ebac 0303 	sub.w	r3, ip, r3
 8005d76:	0c12      	lsrs	r2, r2, #16
 8005d78:	fa13 f38e 	uxtah	r3, r3, lr
 8005d7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8a:	45c1      	cmp	r9, r8
 8005d8c:	f840 3b04 	str.w	r3, [r0], #4
 8005d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d94:	d2e8      	bcs.n	8005d68 <quorem+0xb0>
 8005d96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d9e:	b922      	cbnz	r2, 8005daa <quorem+0xf2>
 8005da0:	3b04      	subs	r3, #4
 8005da2:	429d      	cmp	r5, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	d30a      	bcc.n	8005dbe <quorem+0x106>
 8005da8:	613c      	str	r4, [r7, #16]
 8005daa:	4630      	mov	r0, r6
 8005dac:	b003      	add	sp, #12
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	3b04      	subs	r3, #4
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	d1cc      	bne.n	8005d54 <quorem+0x9c>
 8005dba:	3c01      	subs	r4, #1
 8005dbc:	e7c7      	b.n	8005d4e <quorem+0x96>
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	d1f0      	bne.n	8005da8 <quorem+0xf0>
 8005dc6:	3c01      	subs	r4, #1
 8005dc8:	e7eb      	b.n	8005da2 <quorem+0xea>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e7ee      	b.n	8005dac <quorem+0xf4>
	...

08005dd0 <_dtoa_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	ed2d 8b02 	vpush	{d8}
 8005dd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dda:	b091      	sub	sp, #68	; 0x44
 8005ddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005de0:	ec59 8b10 	vmov	r8, r9, d0
 8005de4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005de6:	9106      	str	r1, [sp, #24]
 8005de8:	4606      	mov	r6, r0
 8005dea:	9208      	str	r2, [sp, #32]
 8005dec:	930c      	str	r3, [sp, #48]	; 0x30
 8005dee:	b975      	cbnz	r5, 8005e0e <_dtoa_r+0x3e>
 8005df0:	2010      	movs	r0, #16
 8005df2:	f001 f8cf 	bl	8006f94 <malloc>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dfa:	b920      	cbnz	r0, 8005e06 <_dtoa_r+0x36>
 8005dfc:	4baa      	ldr	r3, [pc, #680]	; (80060a8 <_dtoa_r+0x2d8>)
 8005dfe:	21ea      	movs	r1, #234	; 0xea
 8005e00:	48aa      	ldr	r0, [pc, #680]	; (80060ac <_dtoa_r+0x2dc>)
 8005e02:	f002 f83b 	bl	8007e7c <__assert_func>
 8005e06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e0a:	6005      	str	r5, [r0, #0]
 8005e0c:	60c5      	str	r5, [r0, #12]
 8005e0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e10:	6819      	ldr	r1, [r3, #0]
 8005e12:	b151      	cbz	r1, 8005e2a <_dtoa_r+0x5a>
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	604a      	str	r2, [r1, #4]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4093      	lsls	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f001 f920 	bl	8007064 <_Bfree>
 8005e24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f1b9 0300 	subs.w	r3, r9, #0
 8005e2e:	bfbb      	ittet	lt
 8005e30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	9303      	strlt	r3, [sp, #12]
 8005e36:	2300      	movge	r3, #0
 8005e38:	2201      	movlt	r2, #1
 8005e3a:	bfac      	ite	ge
 8005e3c:	6023      	strge	r3, [r4, #0]
 8005e3e:	6022      	strlt	r2, [r4, #0]
 8005e40:	4b9b      	ldr	r3, [pc, #620]	; (80060b0 <_dtoa_r+0x2e0>)
 8005e42:	9c03      	ldr	r4, [sp, #12]
 8005e44:	43a3      	bics	r3, r4
 8005e46:	d11c      	bne.n	8005e82 <_dtoa_r+0xb2>
 8005e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005e54:	ea53 0308 	orrs.w	r3, r3, r8
 8005e58:	f000 84fd 	beq.w	8006856 <_dtoa_r+0xa86>
 8005e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e5e:	b963      	cbnz	r3, 8005e7a <_dtoa_r+0xaa>
 8005e60:	4b94      	ldr	r3, [pc, #592]	; (80060b4 <_dtoa_r+0x2e4>)
 8005e62:	e01f      	b.n	8005ea4 <_dtoa_r+0xd4>
 8005e64:	4b94      	ldr	r3, [pc, #592]	; (80060b8 <_dtoa_r+0x2e8>)
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	9801      	ldr	r0, [sp, #4]
 8005e70:	b011      	add	sp, #68	; 0x44
 8005e72:	ecbd 8b02 	vpop	{d8}
 8005e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7a:	4b8e      	ldr	r3, [pc, #568]	; (80060b4 <_dtoa_r+0x2e4>)
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	3303      	adds	r3, #3
 8005e80:	e7f3      	b.n	8005e6a <_dtoa_r+0x9a>
 8005e82:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005e86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8e:	d10b      	bne.n	8005ea8 <_dtoa_r+0xd8>
 8005e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e92:	2301      	movs	r3, #1
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 84d9 	beq.w	8006850 <_dtoa_r+0xa80>
 8005e9e:	4887      	ldr	r0, [pc, #540]	; (80060bc <_dtoa_r+0x2ec>)
 8005ea0:	6018      	str	r0, [r3, #0]
 8005ea2:	1e43      	subs	r3, r0, #1
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	e7e2      	b.n	8005e6e <_dtoa_r+0x9e>
 8005ea8:	a90f      	add	r1, sp, #60	; 0x3c
 8005eaa:	aa0e      	add	r2, sp, #56	; 0x38
 8005eac:	4630      	mov	r0, r6
 8005eae:	eeb0 0b48 	vmov.f64	d0, d8
 8005eb2:	f001 fc85 	bl	80077c0 <__d2b>
 8005eb6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005eba:	4605      	mov	r5, r0
 8005ebc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d046      	beq.n	8005f50 <_dtoa_r+0x180>
 8005ec2:	ee18 4a90 	vmov	r4, s17
 8005ec6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005eca:	ec53 2b18 	vmov	r2, r3, d8
 8005ece:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005ed2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ed6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005eda:	2400      	movs	r4, #0
 8005edc:	ec43 2b16 	vmov	d6, r2, r3
 8005ee0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005ee4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006090 <_dtoa_r+0x2c0>
 8005ee8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005eec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006098 <_dtoa_r+0x2c8>
 8005ef0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005ef4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80060a0 <_dtoa_r+0x2d0>
 8005ef8:	ee07 1a90 	vmov	s15, r1
 8005efc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005f00:	eeb0 7b46 	vmov.f64	d7, d6
 8005f04:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005f08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005f0c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	ee16 ba90 	vmov	fp, s13
 8005f18:	940a      	str	r4, [sp, #40]	; 0x28
 8005f1a:	d508      	bpl.n	8005f2e <_dtoa_r+0x15e>
 8005f1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005f20:	eeb4 6b47 	vcmp.f64	d6, d7
 8005f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f28:	bf18      	it	ne
 8005f2a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8005f2e:	f1bb 0f16 	cmp.w	fp, #22
 8005f32:	d82f      	bhi.n	8005f94 <_dtoa_r+0x1c4>
 8005f34:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <_dtoa_r+0x2f0>)
 8005f36:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f3a:	ed93 7b00 	vldr	d7, [r3]
 8005f3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f46:	d501      	bpl.n	8005f4c <_dtoa_r+0x17c>
 8005f48:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e022      	b.n	8005f96 <_dtoa_r+0x1c6>
 8005f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f52:	4401      	add	r1, r0
 8005f54:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	bfc1      	itttt	gt
 8005f5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f60:	fa04 f303 	lslgt.w	r3, r4, r3
 8005f64:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005f68:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005f6c:	bfd6      	itet	le
 8005f6e:	f1c3 0320 	rsble	r3, r3, #32
 8005f72:	ea43 0808 	orrgt.w	r8, r3, r8
 8005f76:	fa08 f803 	lslle.w	r8, r8, r3
 8005f7a:	ee07 8a90 	vmov	s15, r8
 8005f7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f82:	3901      	subs	r1, #1
 8005f84:	ee17 4a90 	vmov	r4, s15
 8005f88:	ec53 2b17 	vmov	r2, r3, d7
 8005f8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005f90:	2401      	movs	r4, #1
 8005f92:	e7a3      	b.n	8005edc <_dtoa_r+0x10c>
 8005f94:	2301      	movs	r3, #1
 8005f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f98:	1a43      	subs	r3, r0, r1
 8005f9a:	1e5a      	subs	r2, r3, #1
 8005f9c:	bf45      	ittet	mi
 8005f9e:	f1c3 0301 	rsbmi	r3, r3, #1
 8005fa2:	9304      	strmi	r3, [sp, #16]
 8005fa4:	2300      	movpl	r3, #0
 8005fa6:	2300      	movmi	r3, #0
 8005fa8:	9205      	str	r2, [sp, #20]
 8005faa:	bf54      	ite	pl
 8005fac:	9304      	strpl	r3, [sp, #16]
 8005fae:	9305      	strmi	r3, [sp, #20]
 8005fb0:	f1bb 0f00 	cmp.w	fp, #0
 8005fb4:	db18      	blt.n	8005fe8 <_dtoa_r+0x218>
 8005fb6:	9b05      	ldr	r3, [sp, #20]
 8005fb8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005fbc:	445b      	add	r3, fp
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9a06      	ldr	r2, [sp, #24]
 8005fc4:	2a09      	cmp	r2, #9
 8005fc6:	d849      	bhi.n	800605c <_dtoa_r+0x28c>
 8005fc8:	2a05      	cmp	r2, #5
 8005fca:	bfc4      	itt	gt
 8005fcc:	3a04      	subgt	r2, #4
 8005fce:	9206      	strgt	r2, [sp, #24]
 8005fd0:	9a06      	ldr	r2, [sp, #24]
 8005fd2:	f1a2 0202 	sub.w	r2, r2, #2
 8005fd6:	bfcc      	ite	gt
 8005fd8:	2400      	movgt	r4, #0
 8005fda:	2401      	movle	r4, #1
 8005fdc:	2a03      	cmp	r2, #3
 8005fde:	d848      	bhi.n	8006072 <_dtoa_r+0x2a2>
 8005fe0:	e8df f002 	tbb	[pc, r2]
 8005fe4:	3a2c2e0b 	.word	0x3a2c2e0b
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	2200      	movs	r2, #0
 8005fec:	eba3 030b 	sub.w	r3, r3, fp
 8005ff0:	9304      	str	r3, [sp, #16]
 8005ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff4:	f1cb 0300 	rsb	r3, fp, #0
 8005ff8:	e7e3      	b.n	8005fc2 <_dtoa_r+0x1f2>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	9207      	str	r2, [sp, #28]
 8005ffe:	9a08      	ldr	r2, [sp, #32]
 8006000:	2a00      	cmp	r2, #0
 8006002:	dc39      	bgt.n	8006078 <_dtoa_r+0x2a8>
 8006004:	f04f 0a01 	mov.w	sl, #1
 8006008:	46d1      	mov	r9, sl
 800600a:	4652      	mov	r2, sl
 800600c:	f8cd a020 	str.w	sl, [sp, #32]
 8006010:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006012:	2100      	movs	r1, #0
 8006014:	6079      	str	r1, [r7, #4]
 8006016:	2004      	movs	r0, #4
 8006018:	f100 0c14 	add.w	ip, r0, #20
 800601c:	4594      	cmp	ip, r2
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	d92f      	bls.n	8006082 <_dtoa_r+0x2b2>
 8006022:	4630      	mov	r0, r6
 8006024:	930d      	str	r3, [sp, #52]	; 0x34
 8006026:	f000 ffdd 	bl	8006fe4 <_Balloc>
 800602a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800602c:	9001      	str	r0, [sp, #4]
 800602e:	4602      	mov	r2, r0
 8006030:	2800      	cmp	r0, #0
 8006032:	d149      	bne.n	80060c8 <_dtoa_r+0x2f8>
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <_dtoa_r+0x2f4>)
 8006036:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800603a:	e6e1      	b.n	8005e00 <_dtoa_r+0x30>
 800603c:	2201      	movs	r2, #1
 800603e:	e7dd      	b.n	8005ffc <_dtoa_r+0x22c>
 8006040:	2200      	movs	r2, #0
 8006042:	9207      	str	r2, [sp, #28]
 8006044:	9a08      	ldr	r2, [sp, #32]
 8006046:	eb0b 0a02 	add.w	sl, fp, r2
 800604a:	f10a 0901 	add.w	r9, sl, #1
 800604e:	464a      	mov	r2, r9
 8006050:	2a01      	cmp	r2, #1
 8006052:	bfb8      	it	lt
 8006054:	2201      	movlt	r2, #1
 8006056:	e7db      	b.n	8006010 <_dtoa_r+0x240>
 8006058:	2201      	movs	r2, #1
 800605a:	e7f2      	b.n	8006042 <_dtoa_r+0x272>
 800605c:	2401      	movs	r4, #1
 800605e:	2200      	movs	r2, #0
 8006060:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006064:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006068:	2100      	movs	r1, #0
 800606a:	46d1      	mov	r9, sl
 800606c:	2212      	movs	r2, #18
 800606e:	9108      	str	r1, [sp, #32]
 8006070:	e7ce      	b.n	8006010 <_dtoa_r+0x240>
 8006072:	2201      	movs	r2, #1
 8006074:	9207      	str	r2, [sp, #28]
 8006076:	e7f5      	b.n	8006064 <_dtoa_r+0x294>
 8006078:	f8dd a020 	ldr.w	sl, [sp, #32]
 800607c:	46d1      	mov	r9, sl
 800607e:	4652      	mov	r2, sl
 8006080:	e7c6      	b.n	8006010 <_dtoa_r+0x240>
 8006082:	3101      	adds	r1, #1
 8006084:	6079      	str	r1, [r7, #4]
 8006086:	0040      	lsls	r0, r0, #1
 8006088:	e7c6      	b.n	8006018 <_dtoa_r+0x248>
 800608a:	bf00      	nop
 800608c:	f3af 8000 	nop.w
 8006090:	636f4361 	.word	0x636f4361
 8006094:	3fd287a7 	.word	0x3fd287a7
 8006098:	8b60c8b3 	.word	0x8b60c8b3
 800609c:	3fc68a28 	.word	0x3fc68a28
 80060a0:	509f79fb 	.word	0x509f79fb
 80060a4:	3fd34413 	.word	0x3fd34413
 80060a8:	08008c16 	.word	0x08008c16
 80060ac:	08008c2d 	.word	0x08008c2d
 80060b0:	7ff00000 	.word	0x7ff00000
 80060b4:	08008c12 	.word	0x08008c12
 80060b8:	08008c09 	.word	0x08008c09
 80060bc:	08008a89 	.word	0x08008a89
 80060c0:	08008d98 	.word	0x08008d98
 80060c4:	08008c88 	.word	0x08008c88
 80060c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80060ca:	9901      	ldr	r1, [sp, #4]
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	f1b9 0f0e 	cmp.w	r9, #14
 80060d2:	d86c      	bhi.n	80061ae <_dtoa_r+0x3de>
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	d06a      	beq.n	80061ae <_dtoa_r+0x3de>
 80060d8:	f1bb 0f00 	cmp.w	fp, #0
 80060dc:	f340 80a0 	ble.w	8006220 <_dtoa_r+0x450>
 80060e0:	49c1      	ldr	r1, [pc, #772]	; (80063e8 <_dtoa_r+0x618>)
 80060e2:	f00b 020f 	and.w	r2, fp, #15
 80060e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80060ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060ee:	ed92 7b00 	vldr	d7, [r2]
 80060f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80060f6:	f000 8087 	beq.w	8006208 <_dtoa_r+0x438>
 80060fa:	4abc      	ldr	r2, [pc, #752]	; (80063ec <_dtoa_r+0x61c>)
 80060fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8006100:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006104:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006108:	f001 010f 	and.w	r1, r1, #15
 800610c:	2203      	movs	r2, #3
 800610e:	48b7      	ldr	r0, [pc, #732]	; (80063ec <_dtoa_r+0x61c>)
 8006110:	2900      	cmp	r1, #0
 8006112:	d17b      	bne.n	800620c <_dtoa_r+0x43c>
 8006114:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006118:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800611c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006122:	2900      	cmp	r1, #0
 8006124:	f000 80a2 	beq.w	800626c <_dtoa_r+0x49c>
 8006128:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800612c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006130:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006138:	f140 8098 	bpl.w	800626c <_dtoa_r+0x49c>
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	f000 8094 	beq.w	800626c <_dtoa_r+0x49c>
 8006144:	f1ba 0f00 	cmp.w	sl, #0
 8006148:	dd2f      	ble.n	80061aa <_dtoa_r+0x3da>
 800614a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800614e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006152:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006156:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800615a:	3201      	adds	r2, #1
 800615c:	4650      	mov	r0, sl
 800615e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006162:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006166:	ee07 2a90 	vmov	s15, r2
 800616a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800616e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006172:	ee15 4a90 	vmov	r4, s11
 8006176:	ec52 1b15 	vmov	r1, r2, d5
 800617a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800617e:	2800      	cmp	r0, #0
 8006180:	d177      	bne.n	8006272 <_dtoa_r+0x4a2>
 8006182:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006186:	ee36 6b47 	vsub.f64	d6, d6, d7
 800618a:	ec42 1b17 	vmov	d7, r1, r2
 800618e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	f300 8263 	bgt.w	8006660 <_dtoa_r+0x890>
 800619a:	eeb1 7b47 	vneg.f64	d7, d7
 800619e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a6:	f100 8258 	bmi.w	800665a <_dtoa_r+0x88a>
 80061aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80061ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061b0:	2a00      	cmp	r2, #0
 80061b2:	f2c0 811d 	blt.w	80063f0 <_dtoa_r+0x620>
 80061b6:	f1bb 0f0e 	cmp.w	fp, #14
 80061ba:	f300 8119 	bgt.w	80063f0 <_dtoa_r+0x620>
 80061be:	4b8a      	ldr	r3, [pc, #552]	; (80063e8 <_dtoa_r+0x618>)
 80061c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061c4:	ed93 6b00 	vldr	d6, [r3]
 80061c8:	9b08      	ldr	r3, [sp, #32]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f280 80b7 	bge.w	800633e <_dtoa_r+0x56e>
 80061d0:	f1b9 0f00 	cmp.w	r9, #0
 80061d4:	f300 80b3 	bgt.w	800633e <_dtoa_r+0x56e>
 80061d8:	f040 823f 	bne.w	800665a <_dtoa_r+0x88a>
 80061dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80061e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	464c      	mov	r4, r9
 80061f2:	464f      	mov	r7, r9
 80061f4:	f280 8215 	bge.w	8006622 <_dtoa_r+0x852>
 80061f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061fc:	2331      	movs	r3, #49	; 0x31
 80061fe:	f808 3b01 	strb.w	r3, [r8], #1
 8006202:	f10b 0b01 	add.w	fp, fp, #1
 8006206:	e211      	b.n	800662c <_dtoa_r+0x85c>
 8006208:	2202      	movs	r2, #2
 800620a:	e780      	b.n	800610e <_dtoa_r+0x33e>
 800620c:	07cc      	lsls	r4, r1, #31
 800620e:	d504      	bpl.n	800621a <_dtoa_r+0x44a>
 8006210:	ed90 6b00 	vldr	d6, [r0]
 8006214:	3201      	adds	r2, #1
 8006216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800621a:	1049      	asrs	r1, r1, #1
 800621c:	3008      	adds	r0, #8
 800621e:	e777      	b.n	8006110 <_dtoa_r+0x340>
 8006220:	d022      	beq.n	8006268 <_dtoa_r+0x498>
 8006222:	f1cb 0100 	rsb	r1, fp, #0
 8006226:	4a70      	ldr	r2, [pc, #448]	; (80063e8 <_dtoa_r+0x618>)
 8006228:	f001 000f 	and.w	r0, r1, #15
 800622c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006230:	ed92 7b00 	vldr	d7, [r2]
 8006234:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006238:	ed8d 7b02 	vstr	d7, [sp, #8]
 800623c:	486b      	ldr	r0, [pc, #428]	; (80063ec <_dtoa_r+0x61c>)
 800623e:	1109      	asrs	r1, r1, #4
 8006240:	2400      	movs	r4, #0
 8006242:	2202      	movs	r2, #2
 8006244:	b929      	cbnz	r1, 8006252 <_dtoa_r+0x482>
 8006246:	2c00      	cmp	r4, #0
 8006248:	f43f af6a 	beq.w	8006120 <_dtoa_r+0x350>
 800624c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006250:	e766      	b.n	8006120 <_dtoa_r+0x350>
 8006252:	07cf      	lsls	r7, r1, #31
 8006254:	d505      	bpl.n	8006262 <_dtoa_r+0x492>
 8006256:	ed90 6b00 	vldr	d6, [r0]
 800625a:	3201      	adds	r2, #1
 800625c:	2401      	movs	r4, #1
 800625e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006262:	1049      	asrs	r1, r1, #1
 8006264:	3008      	adds	r0, #8
 8006266:	e7ed      	b.n	8006244 <_dtoa_r+0x474>
 8006268:	2202      	movs	r2, #2
 800626a:	e759      	b.n	8006120 <_dtoa_r+0x350>
 800626c:	465f      	mov	r7, fp
 800626e:	4648      	mov	r0, r9
 8006270:	e775      	b.n	800615e <_dtoa_r+0x38e>
 8006272:	ec42 1b17 	vmov	d7, r1, r2
 8006276:	4a5c      	ldr	r2, [pc, #368]	; (80063e8 <_dtoa_r+0x618>)
 8006278:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800627c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006280:	9a01      	ldr	r2, [sp, #4]
 8006282:	1814      	adds	r4, r2, r0
 8006284:	9a07      	ldr	r2, [sp, #28]
 8006286:	b352      	cbz	r2, 80062de <_dtoa_r+0x50e>
 8006288:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800628c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006294:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006298:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800629c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80062a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062a4:	ee14 2a90 	vmov	r2, s9
 80062a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80062ac:	3230      	adds	r2, #48	; 0x30
 80062ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80062b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	f808 2b01 	strb.w	r2, [r8], #1
 80062be:	d439      	bmi.n	8006334 <_dtoa_r+0x564>
 80062c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80062c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80062c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062cc:	d472      	bmi.n	80063b4 <_dtoa_r+0x5e4>
 80062ce:	45a0      	cmp	r8, r4
 80062d0:	f43f af6b 	beq.w	80061aa <_dtoa_r+0x3da>
 80062d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80062d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80062dc:	e7e0      	b.n	80062a0 <_dtoa_r+0x4d0>
 80062de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80062e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062e6:	4621      	mov	r1, r4
 80062e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80062ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062f0:	ee14 2a90 	vmov	r2, s9
 80062f4:	3230      	adds	r2, #48	; 0x30
 80062f6:	f808 2b01 	strb.w	r2, [r8], #1
 80062fa:	45a0      	cmp	r8, r4
 80062fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006300:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006304:	d118      	bne.n	8006338 <_dtoa_r+0x568>
 8006306:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800630a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800630e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	dc4d      	bgt.n	80063b4 <_dtoa_r+0x5e4>
 8006318:	ee35 7b47 	vsub.f64	d7, d5, d7
 800631c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	f57f af41 	bpl.w	80061aa <_dtoa_r+0x3da>
 8006328:	4688      	mov	r8, r1
 800632a:	3901      	subs	r1, #1
 800632c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d0f9      	beq.n	8006328 <_dtoa_r+0x558>
 8006334:	46bb      	mov	fp, r7
 8006336:	e02a      	b.n	800638e <_dtoa_r+0x5be>
 8006338:	ee26 6b03 	vmul.f64	d6, d6, d3
 800633c:	e7d6      	b.n	80062ec <_dtoa_r+0x51c>
 800633e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006342:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006346:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800634a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800634e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006352:	ee15 3a10 	vmov	r3, s10
 8006356:	3330      	adds	r3, #48	; 0x30
 8006358:	f808 3b01 	strb.w	r3, [r8], #1
 800635c:	9b01      	ldr	r3, [sp, #4]
 800635e:	eba8 0303 	sub.w	r3, r8, r3
 8006362:	4599      	cmp	r9, r3
 8006364:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006368:	eea3 7b46 	vfms.f64	d7, d3, d6
 800636c:	d133      	bne.n	80063d6 <_dtoa_r+0x606>
 800636e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006372:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	dc1a      	bgt.n	80063b2 <_dtoa_r+0x5e2>
 800637c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d103      	bne.n	800638e <_dtoa_r+0x5be>
 8006386:	ee15 3a10 	vmov	r3, s10
 800638a:	07d9      	lsls	r1, r3, #31
 800638c:	d411      	bmi.n	80063b2 <_dtoa_r+0x5e2>
 800638e:	4629      	mov	r1, r5
 8006390:	4630      	mov	r0, r6
 8006392:	f000 fe67 	bl	8007064 <_Bfree>
 8006396:	2300      	movs	r3, #0
 8006398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800639a:	f888 3000 	strb.w	r3, [r8]
 800639e:	f10b 0301 	add.w	r3, fp, #1
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f43f ad61 	beq.w	8005e6e <_dtoa_r+0x9e>
 80063ac:	f8c3 8000 	str.w	r8, [r3]
 80063b0:	e55d      	b.n	8005e6e <_dtoa_r+0x9e>
 80063b2:	465f      	mov	r7, fp
 80063b4:	4643      	mov	r3, r8
 80063b6:	4698      	mov	r8, r3
 80063b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063bc:	2a39      	cmp	r2, #57	; 0x39
 80063be:	d106      	bne.n	80063ce <_dtoa_r+0x5fe>
 80063c0:	9a01      	ldr	r2, [sp, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d1f7      	bne.n	80063b6 <_dtoa_r+0x5e6>
 80063c6:	9901      	ldr	r1, [sp, #4]
 80063c8:	2230      	movs	r2, #48	; 0x30
 80063ca:	3701      	adds	r7, #1
 80063cc:	700a      	strb	r2, [r1, #0]
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	3201      	adds	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	e7ae      	b.n	8006334 <_dtoa_r+0x564>
 80063d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80063da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e2:	d1b2      	bne.n	800634a <_dtoa_r+0x57a>
 80063e4:	e7d3      	b.n	800638e <_dtoa_r+0x5be>
 80063e6:	bf00      	nop
 80063e8:	08008d98 	.word	0x08008d98
 80063ec:	08008d70 	.word	0x08008d70
 80063f0:	9907      	ldr	r1, [sp, #28]
 80063f2:	2900      	cmp	r1, #0
 80063f4:	f000 80d0 	beq.w	8006598 <_dtoa_r+0x7c8>
 80063f8:	9906      	ldr	r1, [sp, #24]
 80063fa:	2901      	cmp	r1, #1
 80063fc:	f300 80b4 	bgt.w	8006568 <_dtoa_r+0x798>
 8006400:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006402:	2900      	cmp	r1, #0
 8006404:	f000 80ac 	beq.w	8006560 <_dtoa_r+0x790>
 8006408:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800640c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006410:	461c      	mov	r4, r3
 8006412:	930a      	str	r3, [sp, #40]	; 0x28
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	4413      	add	r3, r2
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	9b05      	ldr	r3, [sp, #20]
 800641c:	2101      	movs	r1, #1
 800641e:	4413      	add	r3, r2
 8006420:	4630      	mov	r0, r6
 8006422:	9305      	str	r3, [sp, #20]
 8006424:	f000 ff20 	bl	8007268 <__i2b>
 8006428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642a:	4607      	mov	r7, r0
 800642c:	f1b8 0f00 	cmp.w	r8, #0
 8006430:	dd0d      	ble.n	800644e <_dtoa_r+0x67e>
 8006432:	9a05      	ldr	r2, [sp, #20]
 8006434:	2a00      	cmp	r2, #0
 8006436:	dd0a      	ble.n	800644e <_dtoa_r+0x67e>
 8006438:	4542      	cmp	r2, r8
 800643a:	9904      	ldr	r1, [sp, #16]
 800643c:	bfa8      	it	ge
 800643e:	4642      	movge	r2, r8
 8006440:	1a89      	subs	r1, r1, r2
 8006442:	9104      	str	r1, [sp, #16]
 8006444:	9905      	ldr	r1, [sp, #20]
 8006446:	eba8 0802 	sub.w	r8, r8, r2
 800644a:	1a8a      	subs	r2, r1, r2
 800644c:	9205      	str	r2, [sp, #20]
 800644e:	b303      	cbz	r3, 8006492 <_dtoa_r+0x6c2>
 8006450:	9a07      	ldr	r2, [sp, #28]
 8006452:	2a00      	cmp	r2, #0
 8006454:	f000 80a5 	beq.w	80065a2 <_dtoa_r+0x7d2>
 8006458:	2c00      	cmp	r4, #0
 800645a:	dd13      	ble.n	8006484 <_dtoa_r+0x6b4>
 800645c:	4639      	mov	r1, r7
 800645e:	4622      	mov	r2, r4
 8006460:	4630      	mov	r0, r6
 8006462:	930d      	str	r3, [sp, #52]	; 0x34
 8006464:	f000 ffc0 	bl	80073e8 <__pow5mult>
 8006468:	462a      	mov	r2, r5
 800646a:	4601      	mov	r1, r0
 800646c:	4607      	mov	r7, r0
 800646e:	4630      	mov	r0, r6
 8006470:	f000 ff10 	bl	8007294 <__multiply>
 8006474:	4629      	mov	r1, r5
 8006476:	900a      	str	r0, [sp, #40]	; 0x28
 8006478:	4630      	mov	r0, r6
 800647a:	f000 fdf3 	bl	8007064 <_Bfree>
 800647e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006482:	4615      	mov	r5, r2
 8006484:	1b1a      	subs	r2, r3, r4
 8006486:	d004      	beq.n	8006492 <_dtoa_r+0x6c2>
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f000 ffac 	bl	80073e8 <__pow5mult>
 8006490:	4605      	mov	r5, r0
 8006492:	2101      	movs	r1, #1
 8006494:	4630      	mov	r0, r6
 8006496:	f000 fee7 	bl	8007268 <__i2b>
 800649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	f340 8081 	ble.w	80065a6 <_dtoa_r+0x7d6>
 80064a4:	461a      	mov	r2, r3
 80064a6:	4601      	mov	r1, r0
 80064a8:	4630      	mov	r0, r6
 80064aa:	f000 ff9d 	bl	80073e8 <__pow5mult>
 80064ae:	9b06      	ldr	r3, [sp, #24]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	4604      	mov	r4, r0
 80064b4:	dd7a      	ble.n	80065ac <_dtoa_r+0x7dc>
 80064b6:	2300      	movs	r3, #0
 80064b8:	930a      	str	r3, [sp, #40]	; 0x28
 80064ba:	6922      	ldr	r2, [r4, #16]
 80064bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80064c0:	6910      	ldr	r0, [r2, #16]
 80064c2:	f000 fe81 	bl	80071c8 <__hi0bits>
 80064c6:	f1c0 0020 	rsb	r0, r0, #32
 80064ca:	9b05      	ldr	r3, [sp, #20]
 80064cc:	4418      	add	r0, r3
 80064ce:	f010 001f 	ands.w	r0, r0, #31
 80064d2:	f000 808c 	beq.w	80065ee <_dtoa_r+0x81e>
 80064d6:	f1c0 0220 	rsb	r2, r0, #32
 80064da:	2a04      	cmp	r2, #4
 80064dc:	f340 8085 	ble.w	80065ea <_dtoa_r+0x81a>
 80064e0:	f1c0 001c 	rsb	r0, r0, #28
 80064e4:	9b04      	ldr	r3, [sp, #16]
 80064e6:	4403      	add	r3, r0
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	9b05      	ldr	r3, [sp, #20]
 80064ec:	4403      	add	r3, r0
 80064ee:	4480      	add	r8, r0
 80064f0:	9305      	str	r3, [sp, #20]
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dd05      	ble.n	8006504 <_dtoa_r+0x734>
 80064f8:	4629      	mov	r1, r5
 80064fa:	461a      	mov	r2, r3
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 ffcd 	bl	800749c <__lshift>
 8006502:	4605      	mov	r5, r0
 8006504:	9b05      	ldr	r3, [sp, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd05      	ble.n	8006516 <_dtoa_r+0x746>
 800650a:	4621      	mov	r1, r4
 800650c:	461a      	mov	r2, r3
 800650e:	4630      	mov	r0, r6
 8006510:	f000 ffc4 	bl	800749c <__lshift>
 8006514:	4604      	mov	r4, r0
 8006516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d06a      	beq.n	80065f2 <_dtoa_r+0x822>
 800651c:	4621      	mov	r1, r4
 800651e:	4628      	mov	r0, r5
 8006520:	f001 f82c 	bl	800757c <__mcmp>
 8006524:	2800      	cmp	r0, #0
 8006526:	da64      	bge.n	80065f2 <_dtoa_r+0x822>
 8006528:	2300      	movs	r3, #0
 800652a:	4629      	mov	r1, r5
 800652c:	220a      	movs	r2, #10
 800652e:	4630      	mov	r0, r6
 8006530:	f000 fdba 	bl	80070a8 <__multadd>
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800653a:	4605      	mov	r5, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8191 	beq.w	8006864 <_dtoa_r+0xa94>
 8006542:	4639      	mov	r1, r7
 8006544:	2300      	movs	r3, #0
 8006546:	220a      	movs	r2, #10
 8006548:	4630      	mov	r0, r6
 800654a:	f000 fdad 	bl	80070a8 <__multadd>
 800654e:	f1ba 0f00 	cmp.w	sl, #0
 8006552:	4607      	mov	r7, r0
 8006554:	f300 808d 	bgt.w	8006672 <_dtoa_r+0x8a2>
 8006558:	9b06      	ldr	r3, [sp, #24]
 800655a:	2b02      	cmp	r3, #2
 800655c:	dc50      	bgt.n	8006600 <_dtoa_r+0x830>
 800655e:	e088      	b.n	8006672 <_dtoa_r+0x8a2>
 8006560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006562:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006566:	e751      	b.n	800640c <_dtoa_r+0x63c>
 8006568:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800656c:	42a3      	cmp	r3, r4
 800656e:	bfbf      	itttt	lt
 8006570:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006572:	1ae3      	sublt	r3, r4, r3
 8006574:	18d2      	addlt	r2, r2, r3
 8006576:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006578:	bfb6      	itet	lt
 800657a:	4623      	movlt	r3, r4
 800657c:	1b1c      	subge	r4, r3, r4
 800657e:	2400      	movlt	r4, #0
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	bfb5      	itete	lt
 8006586:	9a04      	ldrlt	r2, [sp, #16]
 8006588:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800658c:	eba2 0809 	sublt.w	r8, r2, r9
 8006590:	464a      	movge	r2, r9
 8006592:	bfb8      	it	lt
 8006594:	2200      	movlt	r2, #0
 8006596:	e73c      	b.n	8006412 <_dtoa_r+0x642>
 8006598:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800659c:	9f07      	ldr	r7, [sp, #28]
 800659e:	461c      	mov	r4, r3
 80065a0:	e744      	b.n	800642c <_dtoa_r+0x65c>
 80065a2:	461a      	mov	r2, r3
 80065a4:	e770      	b.n	8006488 <_dtoa_r+0x6b8>
 80065a6:	9b06      	ldr	r3, [sp, #24]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	dc18      	bgt.n	80065de <_dtoa_r+0x80e>
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	b9b3      	cbnz	r3, 80065de <_dtoa_r+0x80e>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80065b6:	b9a2      	cbnz	r2, 80065e2 <_dtoa_r+0x812>
 80065b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065bc:	0d12      	lsrs	r2, r2, #20
 80065be:	0512      	lsls	r2, r2, #20
 80065c0:	b18a      	cbz	r2, 80065e6 <_dtoa_r+0x816>
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	3301      	adds	r3, #1
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	3301      	adds	r3, #1
 80065cc:	9305      	str	r3, [sp, #20]
 80065ce:	2301      	movs	r3, #1
 80065d0:	930a      	str	r3, [sp, #40]	; 0x28
 80065d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f47f af70 	bne.w	80064ba <_dtoa_r+0x6ea>
 80065da:	2001      	movs	r0, #1
 80065dc:	e775      	b.n	80064ca <_dtoa_r+0x6fa>
 80065de:	2300      	movs	r3, #0
 80065e0:	e7f6      	b.n	80065d0 <_dtoa_r+0x800>
 80065e2:	9b02      	ldr	r3, [sp, #8]
 80065e4:	e7f4      	b.n	80065d0 <_dtoa_r+0x800>
 80065e6:	920a      	str	r2, [sp, #40]	; 0x28
 80065e8:	e7f3      	b.n	80065d2 <_dtoa_r+0x802>
 80065ea:	d082      	beq.n	80064f2 <_dtoa_r+0x722>
 80065ec:	4610      	mov	r0, r2
 80065ee:	301c      	adds	r0, #28
 80065f0:	e778      	b.n	80064e4 <_dtoa_r+0x714>
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	dc37      	bgt.n	8006668 <_dtoa_r+0x898>
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	dd34      	ble.n	8006668 <_dtoa_r+0x898>
 80065fe:	46ca      	mov	sl, r9
 8006600:	f1ba 0f00 	cmp.w	sl, #0
 8006604:	d10d      	bne.n	8006622 <_dtoa_r+0x852>
 8006606:	4621      	mov	r1, r4
 8006608:	4653      	mov	r3, sl
 800660a:	2205      	movs	r2, #5
 800660c:	4630      	mov	r0, r6
 800660e:	f000 fd4b 	bl	80070a8 <__multadd>
 8006612:	4601      	mov	r1, r0
 8006614:	4604      	mov	r4, r0
 8006616:	4628      	mov	r0, r5
 8006618:	f000 ffb0 	bl	800757c <__mcmp>
 800661c:	2800      	cmp	r0, #0
 800661e:	f73f adeb 	bgt.w	80061f8 <_dtoa_r+0x428>
 8006622:	9b08      	ldr	r3, [sp, #32]
 8006624:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006628:	ea6f 0b03 	mvn.w	fp, r3
 800662c:	f04f 0900 	mov.w	r9, #0
 8006630:	4621      	mov	r1, r4
 8006632:	4630      	mov	r0, r6
 8006634:	f000 fd16 	bl	8007064 <_Bfree>
 8006638:	2f00      	cmp	r7, #0
 800663a:	f43f aea8 	beq.w	800638e <_dtoa_r+0x5be>
 800663e:	f1b9 0f00 	cmp.w	r9, #0
 8006642:	d005      	beq.n	8006650 <_dtoa_r+0x880>
 8006644:	45b9      	cmp	r9, r7
 8006646:	d003      	beq.n	8006650 <_dtoa_r+0x880>
 8006648:	4649      	mov	r1, r9
 800664a:	4630      	mov	r0, r6
 800664c:	f000 fd0a 	bl	8007064 <_Bfree>
 8006650:	4639      	mov	r1, r7
 8006652:	4630      	mov	r0, r6
 8006654:	f000 fd06 	bl	8007064 <_Bfree>
 8006658:	e699      	b.n	800638e <_dtoa_r+0x5be>
 800665a:	2400      	movs	r4, #0
 800665c:	4627      	mov	r7, r4
 800665e:	e7e0      	b.n	8006622 <_dtoa_r+0x852>
 8006660:	46bb      	mov	fp, r7
 8006662:	4604      	mov	r4, r0
 8006664:	4607      	mov	r7, r0
 8006666:	e5c7      	b.n	80061f8 <_dtoa_r+0x428>
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	46ca      	mov	sl, r9
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8100 	beq.w	8006872 <_dtoa_r+0xaa2>
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	dd05      	ble.n	8006684 <_dtoa_r+0x8b4>
 8006678:	4639      	mov	r1, r7
 800667a:	4642      	mov	r2, r8
 800667c:	4630      	mov	r0, r6
 800667e:	f000 ff0d 	bl	800749c <__lshift>
 8006682:	4607      	mov	r7, r0
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	2b00      	cmp	r3, #0
 8006688:	d05d      	beq.n	8006746 <_dtoa_r+0x976>
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 fca9 	bl	8006fe4 <_Balloc>
 8006692:	4680      	mov	r8, r0
 8006694:	b928      	cbnz	r0, 80066a2 <_dtoa_r+0x8d2>
 8006696:	4b82      	ldr	r3, [pc, #520]	; (80068a0 <_dtoa_r+0xad0>)
 8006698:	4602      	mov	r2, r0
 800669a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800669e:	f7ff bbaf 	b.w	8005e00 <_dtoa_r+0x30>
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	3202      	adds	r2, #2
 80066a6:	0092      	lsls	r2, r2, #2
 80066a8:	f107 010c 	add.w	r1, r7, #12
 80066ac:	300c      	adds	r0, #12
 80066ae:	f000 fc8b 	bl	8006fc8 <memcpy>
 80066b2:	2201      	movs	r2, #1
 80066b4:	4641      	mov	r1, r8
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 fef0 	bl	800749c <__lshift>
 80066bc:	9b01      	ldr	r3, [sp, #4]
 80066be:	3301      	adds	r3, #1
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	4453      	add	r3, sl
 80066c6:	9308      	str	r3, [sp, #32]
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	46b9      	mov	r9, r7
 80066d0:	9307      	str	r3, [sp, #28]
 80066d2:	4607      	mov	r7, r0
 80066d4:	9b04      	ldr	r3, [sp, #16]
 80066d6:	4621      	mov	r1, r4
 80066d8:	3b01      	subs	r3, #1
 80066da:	4628      	mov	r0, r5
 80066dc:	9302      	str	r3, [sp, #8]
 80066de:	f7ff faeb 	bl	8005cb8 <quorem>
 80066e2:	4603      	mov	r3, r0
 80066e4:	3330      	adds	r3, #48	; 0x30
 80066e6:	9005      	str	r0, [sp, #20]
 80066e8:	4649      	mov	r1, r9
 80066ea:	4628      	mov	r0, r5
 80066ec:	9309      	str	r3, [sp, #36]	; 0x24
 80066ee:	f000 ff45 	bl	800757c <__mcmp>
 80066f2:	463a      	mov	r2, r7
 80066f4:	4682      	mov	sl, r0
 80066f6:	4621      	mov	r1, r4
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 ff5b 	bl	80075b4 <__mdiff>
 80066fe:	68c2      	ldr	r2, [r0, #12]
 8006700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006702:	4680      	mov	r8, r0
 8006704:	bb0a      	cbnz	r2, 800674a <_dtoa_r+0x97a>
 8006706:	4601      	mov	r1, r0
 8006708:	4628      	mov	r0, r5
 800670a:	f000 ff37 	bl	800757c <__mcmp>
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	4602      	mov	r2, r0
 8006712:	4641      	mov	r1, r8
 8006714:	4630      	mov	r0, r6
 8006716:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800671a:	f000 fca3 	bl	8007064 <_Bfree>
 800671e:	9b06      	ldr	r3, [sp, #24]
 8006720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006722:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006726:	ea43 0102 	orr.w	r1, r3, r2
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	430b      	orrs	r3, r1
 800672e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006730:	d10d      	bne.n	800674e <_dtoa_r+0x97e>
 8006732:	2b39      	cmp	r3, #57	; 0x39
 8006734:	d029      	beq.n	800678a <_dtoa_r+0x9ba>
 8006736:	f1ba 0f00 	cmp.w	sl, #0
 800673a:	dd01      	ble.n	8006740 <_dtoa_r+0x970>
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	3331      	adds	r3, #49	; 0x31
 8006740:	9a02      	ldr	r2, [sp, #8]
 8006742:	7013      	strb	r3, [r2, #0]
 8006744:	e774      	b.n	8006630 <_dtoa_r+0x860>
 8006746:	4638      	mov	r0, r7
 8006748:	e7b8      	b.n	80066bc <_dtoa_r+0x8ec>
 800674a:	2201      	movs	r2, #1
 800674c:	e7e1      	b.n	8006712 <_dtoa_r+0x942>
 800674e:	f1ba 0f00 	cmp.w	sl, #0
 8006752:	db06      	blt.n	8006762 <_dtoa_r+0x992>
 8006754:	9906      	ldr	r1, [sp, #24]
 8006756:	ea41 0a0a 	orr.w	sl, r1, sl
 800675a:	9907      	ldr	r1, [sp, #28]
 800675c:	ea5a 0101 	orrs.w	r1, sl, r1
 8006760:	d120      	bne.n	80067a4 <_dtoa_r+0x9d4>
 8006762:	2a00      	cmp	r2, #0
 8006764:	ddec      	ble.n	8006740 <_dtoa_r+0x970>
 8006766:	4629      	mov	r1, r5
 8006768:	2201      	movs	r2, #1
 800676a:	4630      	mov	r0, r6
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	f000 fe95 	bl	800749c <__lshift>
 8006772:	4621      	mov	r1, r4
 8006774:	4605      	mov	r5, r0
 8006776:	f000 ff01 	bl	800757c <__mcmp>
 800677a:	2800      	cmp	r0, #0
 800677c:	9b04      	ldr	r3, [sp, #16]
 800677e:	dc02      	bgt.n	8006786 <_dtoa_r+0x9b6>
 8006780:	d1de      	bne.n	8006740 <_dtoa_r+0x970>
 8006782:	07da      	lsls	r2, r3, #31
 8006784:	d5dc      	bpl.n	8006740 <_dtoa_r+0x970>
 8006786:	2b39      	cmp	r3, #57	; 0x39
 8006788:	d1d8      	bne.n	800673c <_dtoa_r+0x96c>
 800678a:	9a02      	ldr	r2, [sp, #8]
 800678c:	2339      	movs	r3, #57	; 0x39
 800678e:	7013      	strb	r3, [r2, #0]
 8006790:	4643      	mov	r3, r8
 8006792:	4698      	mov	r8, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800679a:	2a39      	cmp	r2, #57	; 0x39
 800679c:	d051      	beq.n	8006842 <_dtoa_r+0xa72>
 800679e:	3201      	adds	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e745      	b.n	8006630 <_dtoa_r+0x860>
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	dd03      	ble.n	80067b0 <_dtoa_r+0x9e0>
 80067a8:	2b39      	cmp	r3, #57	; 0x39
 80067aa:	d0ee      	beq.n	800678a <_dtoa_r+0x9ba>
 80067ac:	3301      	adds	r3, #1
 80067ae:	e7c7      	b.n	8006740 <_dtoa_r+0x970>
 80067b0:	9a04      	ldr	r2, [sp, #16]
 80067b2:	9908      	ldr	r1, [sp, #32]
 80067b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067b8:	428a      	cmp	r2, r1
 80067ba:	d02b      	beq.n	8006814 <_dtoa_r+0xa44>
 80067bc:	4629      	mov	r1, r5
 80067be:	2300      	movs	r3, #0
 80067c0:	220a      	movs	r2, #10
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 fc70 	bl	80070a8 <__multadd>
 80067c8:	45b9      	cmp	r9, r7
 80067ca:	4605      	mov	r5, r0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	f04f 020a 	mov.w	r2, #10
 80067d4:	4649      	mov	r1, r9
 80067d6:	4630      	mov	r0, r6
 80067d8:	d107      	bne.n	80067ea <_dtoa_r+0xa1a>
 80067da:	f000 fc65 	bl	80070a8 <__multadd>
 80067de:	4681      	mov	r9, r0
 80067e0:	4607      	mov	r7, r0
 80067e2:	9b04      	ldr	r3, [sp, #16]
 80067e4:	3301      	adds	r3, #1
 80067e6:	9304      	str	r3, [sp, #16]
 80067e8:	e774      	b.n	80066d4 <_dtoa_r+0x904>
 80067ea:	f000 fc5d 	bl	80070a8 <__multadd>
 80067ee:	4639      	mov	r1, r7
 80067f0:	4681      	mov	r9, r0
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 fc56 	bl	80070a8 <__multadd>
 80067fc:	4607      	mov	r7, r0
 80067fe:	e7f0      	b.n	80067e2 <_dtoa_r+0xa12>
 8006800:	f1ba 0f00 	cmp.w	sl, #0
 8006804:	9a01      	ldr	r2, [sp, #4]
 8006806:	bfcc      	ite	gt
 8006808:	46d0      	movgt	r8, sl
 800680a:	f04f 0801 	movle.w	r8, #1
 800680e:	4490      	add	r8, r2
 8006810:	f04f 0900 	mov.w	r9, #0
 8006814:	4629      	mov	r1, r5
 8006816:	2201      	movs	r2, #1
 8006818:	4630      	mov	r0, r6
 800681a:	9302      	str	r3, [sp, #8]
 800681c:	f000 fe3e 	bl	800749c <__lshift>
 8006820:	4621      	mov	r1, r4
 8006822:	4605      	mov	r5, r0
 8006824:	f000 feaa 	bl	800757c <__mcmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	dcb1      	bgt.n	8006790 <_dtoa_r+0x9c0>
 800682c:	d102      	bne.n	8006834 <_dtoa_r+0xa64>
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	07db      	lsls	r3, r3, #31
 8006832:	d4ad      	bmi.n	8006790 <_dtoa_r+0x9c0>
 8006834:	4643      	mov	r3, r8
 8006836:	4698      	mov	r8, r3
 8006838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800683c:	2a30      	cmp	r2, #48	; 0x30
 800683e:	d0fa      	beq.n	8006836 <_dtoa_r+0xa66>
 8006840:	e6f6      	b.n	8006630 <_dtoa_r+0x860>
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d1a4      	bne.n	8006792 <_dtoa_r+0x9c2>
 8006848:	f10b 0b01 	add.w	fp, fp, #1
 800684c:	2331      	movs	r3, #49	; 0x31
 800684e:	e778      	b.n	8006742 <_dtoa_r+0x972>
 8006850:	4b14      	ldr	r3, [pc, #80]	; (80068a4 <_dtoa_r+0xad4>)
 8006852:	f7ff bb27 	b.w	8005ea4 <_dtoa_r+0xd4>
 8006856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006858:	2b00      	cmp	r3, #0
 800685a:	f47f ab03 	bne.w	8005e64 <_dtoa_r+0x94>
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <_dtoa_r+0xad8>)
 8006860:	f7ff bb20 	b.w	8005ea4 <_dtoa_r+0xd4>
 8006864:	f1ba 0f00 	cmp.w	sl, #0
 8006868:	dc03      	bgt.n	8006872 <_dtoa_r+0xaa2>
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	2b02      	cmp	r3, #2
 800686e:	f73f aec7 	bgt.w	8006600 <_dtoa_r+0x830>
 8006872:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f7ff fa1d 	bl	8005cb8 <quorem>
 800687e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006882:	f808 3b01 	strb.w	r3, [r8], #1
 8006886:	9a01      	ldr	r2, [sp, #4]
 8006888:	eba8 0202 	sub.w	r2, r8, r2
 800688c:	4592      	cmp	sl, r2
 800688e:	ddb7      	ble.n	8006800 <_dtoa_r+0xa30>
 8006890:	4629      	mov	r1, r5
 8006892:	2300      	movs	r3, #0
 8006894:	220a      	movs	r2, #10
 8006896:	4630      	mov	r0, r6
 8006898:	f000 fc06 	bl	80070a8 <__multadd>
 800689c:	4605      	mov	r5, r0
 800689e:	e7ea      	b.n	8006876 <_dtoa_r+0xaa6>
 80068a0:	08008c88 	.word	0x08008c88
 80068a4:	08008a88 	.word	0x08008a88
 80068a8:	08008c09 	.word	0x08008c09

080068ac <rshift>:
 80068ac:	6903      	ldr	r3, [r0, #16]
 80068ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80068b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80068ba:	f100 0414 	add.w	r4, r0, #20
 80068be:	dd45      	ble.n	800694c <rshift+0xa0>
 80068c0:	f011 011f 	ands.w	r1, r1, #31
 80068c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80068c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80068cc:	d10c      	bne.n	80068e8 <rshift+0x3c>
 80068ce:	f100 0710 	add.w	r7, r0, #16
 80068d2:	4629      	mov	r1, r5
 80068d4:	42b1      	cmp	r1, r6
 80068d6:	d334      	bcc.n	8006942 <rshift+0x96>
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	1eea      	subs	r2, r5, #3
 80068de:	4296      	cmp	r6, r2
 80068e0:	bf38      	it	cc
 80068e2:	2300      	movcc	r3, #0
 80068e4:	4423      	add	r3, r4
 80068e6:	e015      	b.n	8006914 <rshift+0x68>
 80068e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80068ec:	f1c1 0820 	rsb	r8, r1, #32
 80068f0:	40cf      	lsrs	r7, r1
 80068f2:	f105 0e04 	add.w	lr, r5, #4
 80068f6:	46a1      	mov	r9, r4
 80068f8:	4576      	cmp	r6, lr
 80068fa:	46f4      	mov	ip, lr
 80068fc:	d815      	bhi.n	800692a <rshift+0x7e>
 80068fe:	1a9a      	subs	r2, r3, r2
 8006900:	0092      	lsls	r2, r2, #2
 8006902:	3a04      	subs	r2, #4
 8006904:	3501      	adds	r5, #1
 8006906:	42ae      	cmp	r6, r5
 8006908:	bf38      	it	cc
 800690a:	2200      	movcc	r2, #0
 800690c:	18a3      	adds	r3, r4, r2
 800690e:	50a7      	str	r7, [r4, r2]
 8006910:	b107      	cbz	r7, 8006914 <rshift+0x68>
 8006912:	3304      	adds	r3, #4
 8006914:	1b1a      	subs	r2, r3, r4
 8006916:	42a3      	cmp	r3, r4
 8006918:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800691c:	bf08      	it	eq
 800691e:	2300      	moveq	r3, #0
 8006920:	6102      	str	r2, [r0, #16]
 8006922:	bf08      	it	eq
 8006924:	6143      	streq	r3, [r0, #20]
 8006926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692a:	f8dc c000 	ldr.w	ip, [ip]
 800692e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006932:	ea4c 0707 	orr.w	r7, ip, r7
 8006936:	f849 7b04 	str.w	r7, [r9], #4
 800693a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800693e:	40cf      	lsrs	r7, r1
 8006940:	e7da      	b.n	80068f8 <rshift+0x4c>
 8006942:	f851 cb04 	ldr.w	ip, [r1], #4
 8006946:	f847 cf04 	str.w	ip, [r7, #4]!
 800694a:	e7c3      	b.n	80068d4 <rshift+0x28>
 800694c:	4623      	mov	r3, r4
 800694e:	e7e1      	b.n	8006914 <rshift+0x68>

08006950 <__hexdig_fun>:
 8006950:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006954:	2b09      	cmp	r3, #9
 8006956:	d802      	bhi.n	800695e <__hexdig_fun+0xe>
 8006958:	3820      	subs	r0, #32
 800695a:	b2c0      	uxtb	r0, r0
 800695c:	4770      	bx	lr
 800695e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006962:	2b05      	cmp	r3, #5
 8006964:	d801      	bhi.n	800696a <__hexdig_fun+0x1a>
 8006966:	3847      	subs	r0, #71	; 0x47
 8006968:	e7f7      	b.n	800695a <__hexdig_fun+0xa>
 800696a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800696e:	2b05      	cmp	r3, #5
 8006970:	d801      	bhi.n	8006976 <__hexdig_fun+0x26>
 8006972:	3827      	subs	r0, #39	; 0x27
 8006974:	e7f1      	b.n	800695a <__hexdig_fun+0xa>
 8006976:	2000      	movs	r0, #0
 8006978:	4770      	bx	lr
	...

0800697c <__gethex>:
 800697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	ed2d 8b02 	vpush	{d8}
 8006984:	b089      	sub	sp, #36	; 0x24
 8006986:	ee08 0a10 	vmov	s16, r0
 800698a:	9304      	str	r3, [sp, #16]
 800698c:	4bb4      	ldr	r3, [pc, #720]	; (8006c60 <__gethex+0x2e4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	4618      	mov	r0, r3
 8006994:	468b      	mov	fp, r1
 8006996:	4690      	mov	r8, r2
 8006998:	f7f9 fc52 	bl	8000240 <strlen>
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	f8db 2000 	ldr.w	r2, [fp]
 80069a2:	4403      	add	r3, r0
 80069a4:	4682      	mov	sl, r0
 80069a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	1c93      	adds	r3, r2, #2
 80069ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80069b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80069b6:	32fe      	adds	r2, #254	; 0xfe
 80069b8:	18d1      	adds	r1, r2, r3
 80069ba:	461f      	mov	r7, r3
 80069bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069c0:	9100      	str	r1, [sp, #0]
 80069c2:	2830      	cmp	r0, #48	; 0x30
 80069c4:	d0f8      	beq.n	80069b8 <__gethex+0x3c>
 80069c6:	f7ff ffc3 	bl	8006950 <__hexdig_fun>
 80069ca:	4604      	mov	r4, r0
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d13a      	bne.n	8006a46 <__gethex+0xca>
 80069d0:	9901      	ldr	r1, [sp, #4]
 80069d2:	4652      	mov	r2, sl
 80069d4:	4638      	mov	r0, r7
 80069d6:	f001 fa2f 	bl	8007e38 <strncmp>
 80069da:	4605      	mov	r5, r0
 80069dc:	2800      	cmp	r0, #0
 80069de:	d168      	bne.n	8006ab2 <__gethex+0x136>
 80069e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069e4:	eb07 060a 	add.w	r6, r7, sl
 80069e8:	f7ff ffb2 	bl	8006950 <__hexdig_fun>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d062      	beq.n	8006ab6 <__gethex+0x13a>
 80069f0:	4633      	mov	r3, r6
 80069f2:	7818      	ldrb	r0, [r3, #0]
 80069f4:	2830      	cmp	r0, #48	; 0x30
 80069f6:	461f      	mov	r7, r3
 80069f8:	f103 0301 	add.w	r3, r3, #1
 80069fc:	d0f9      	beq.n	80069f2 <__gethex+0x76>
 80069fe:	f7ff ffa7 	bl	8006950 <__hexdig_fun>
 8006a02:	2301      	movs	r3, #1
 8006a04:	fab0 f480 	clz	r4, r0
 8006a08:	0964      	lsrs	r4, r4, #5
 8006a0a:	4635      	mov	r5, r6
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	463a      	mov	r2, r7
 8006a10:	4616      	mov	r6, r2
 8006a12:	3201      	adds	r2, #1
 8006a14:	7830      	ldrb	r0, [r6, #0]
 8006a16:	f7ff ff9b 	bl	8006950 <__hexdig_fun>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d1f8      	bne.n	8006a10 <__gethex+0x94>
 8006a1e:	9901      	ldr	r1, [sp, #4]
 8006a20:	4652      	mov	r2, sl
 8006a22:	4630      	mov	r0, r6
 8006a24:	f001 fa08 	bl	8007e38 <strncmp>
 8006a28:	b980      	cbnz	r0, 8006a4c <__gethex+0xd0>
 8006a2a:	b94d      	cbnz	r5, 8006a40 <__gethex+0xc4>
 8006a2c:	eb06 050a 	add.w	r5, r6, sl
 8006a30:	462a      	mov	r2, r5
 8006a32:	4616      	mov	r6, r2
 8006a34:	3201      	adds	r2, #1
 8006a36:	7830      	ldrb	r0, [r6, #0]
 8006a38:	f7ff ff8a 	bl	8006950 <__hexdig_fun>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d1f8      	bne.n	8006a32 <__gethex+0xb6>
 8006a40:	1bad      	subs	r5, r5, r6
 8006a42:	00ad      	lsls	r5, r5, #2
 8006a44:	e004      	b.n	8006a50 <__gethex+0xd4>
 8006a46:	2400      	movs	r4, #0
 8006a48:	4625      	mov	r5, r4
 8006a4a:	e7e0      	b.n	8006a0e <__gethex+0x92>
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	d1f7      	bne.n	8006a40 <__gethex+0xc4>
 8006a50:	7833      	ldrb	r3, [r6, #0]
 8006a52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a56:	2b50      	cmp	r3, #80	; 0x50
 8006a58:	d13b      	bne.n	8006ad2 <__gethex+0x156>
 8006a5a:	7873      	ldrb	r3, [r6, #1]
 8006a5c:	2b2b      	cmp	r3, #43	; 0x2b
 8006a5e:	d02c      	beq.n	8006aba <__gethex+0x13e>
 8006a60:	2b2d      	cmp	r3, #45	; 0x2d
 8006a62:	d02e      	beq.n	8006ac2 <__gethex+0x146>
 8006a64:	1c71      	adds	r1, r6, #1
 8006a66:	f04f 0900 	mov.w	r9, #0
 8006a6a:	7808      	ldrb	r0, [r1, #0]
 8006a6c:	f7ff ff70 	bl	8006950 <__hexdig_fun>
 8006a70:	1e43      	subs	r3, r0, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b18      	cmp	r3, #24
 8006a76:	d82c      	bhi.n	8006ad2 <__gethex+0x156>
 8006a78:	f1a0 0210 	sub.w	r2, r0, #16
 8006a7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a80:	f7ff ff66 	bl	8006950 <__hexdig_fun>
 8006a84:	1e43      	subs	r3, r0, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b18      	cmp	r3, #24
 8006a8a:	d91d      	bls.n	8006ac8 <__gethex+0x14c>
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	d000      	beq.n	8006a94 <__gethex+0x118>
 8006a92:	4252      	negs	r2, r2
 8006a94:	4415      	add	r5, r2
 8006a96:	f8cb 1000 	str.w	r1, [fp]
 8006a9a:	b1e4      	cbz	r4, 8006ad6 <__gethex+0x15a>
 8006a9c:	9b00      	ldr	r3, [sp, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf14      	ite	ne
 8006aa2:	2700      	movne	r7, #0
 8006aa4:	2706      	moveq	r7, #6
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	b009      	add	sp, #36	; 0x24
 8006aaa:	ecbd 8b02 	vpop	{d8}
 8006aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab2:	463e      	mov	r6, r7
 8006ab4:	4625      	mov	r5, r4
 8006ab6:	2401      	movs	r4, #1
 8006ab8:	e7ca      	b.n	8006a50 <__gethex+0xd4>
 8006aba:	f04f 0900 	mov.w	r9, #0
 8006abe:	1cb1      	adds	r1, r6, #2
 8006ac0:	e7d3      	b.n	8006a6a <__gethex+0xee>
 8006ac2:	f04f 0901 	mov.w	r9, #1
 8006ac6:	e7fa      	b.n	8006abe <__gethex+0x142>
 8006ac8:	230a      	movs	r3, #10
 8006aca:	fb03 0202 	mla	r2, r3, r2, r0
 8006ace:	3a10      	subs	r2, #16
 8006ad0:	e7d4      	b.n	8006a7c <__gethex+0x100>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	e7df      	b.n	8006a96 <__gethex+0x11a>
 8006ad6:	1bf3      	subs	r3, r6, r7
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	4621      	mov	r1, r4
 8006adc:	2b07      	cmp	r3, #7
 8006ade:	dc0b      	bgt.n	8006af8 <__gethex+0x17c>
 8006ae0:	ee18 0a10 	vmov	r0, s16
 8006ae4:	f000 fa7e 	bl	8006fe4 <_Balloc>
 8006ae8:	4604      	mov	r4, r0
 8006aea:	b940      	cbnz	r0, 8006afe <__gethex+0x182>
 8006aec:	4b5d      	ldr	r3, [pc, #372]	; (8006c64 <__gethex+0x2e8>)
 8006aee:	4602      	mov	r2, r0
 8006af0:	21de      	movs	r1, #222	; 0xde
 8006af2:	485d      	ldr	r0, [pc, #372]	; (8006c68 <__gethex+0x2ec>)
 8006af4:	f001 f9c2 	bl	8007e7c <__assert_func>
 8006af8:	3101      	adds	r1, #1
 8006afa:	105b      	asrs	r3, r3, #1
 8006afc:	e7ee      	b.n	8006adc <__gethex+0x160>
 8006afe:	f100 0914 	add.w	r9, r0, #20
 8006b02:	f04f 0b00 	mov.w	fp, #0
 8006b06:	f1ca 0301 	rsb	r3, sl, #1
 8006b0a:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b0e:	f8cd b000 	str.w	fp, [sp]
 8006b12:	9306      	str	r3, [sp, #24]
 8006b14:	42b7      	cmp	r7, r6
 8006b16:	d340      	bcc.n	8006b9a <__gethex+0x21e>
 8006b18:	9802      	ldr	r0, [sp, #8]
 8006b1a:	9b00      	ldr	r3, [sp, #0]
 8006b1c:	f840 3b04 	str.w	r3, [r0], #4
 8006b20:	eba0 0009 	sub.w	r0, r0, r9
 8006b24:	1080      	asrs	r0, r0, #2
 8006b26:	0146      	lsls	r6, r0, #5
 8006b28:	6120      	str	r0, [r4, #16]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fb4c 	bl	80071c8 <__hi0bits>
 8006b30:	1a30      	subs	r0, r6, r0
 8006b32:	f8d8 6000 	ldr.w	r6, [r8]
 8006b36:	42b0      	cmp	r0, r6
 8006b38:	dd63      	ble.n	8006c02 <__gethex+0x286>
 8006b3a:	1b87      	subs	r7, r0, r6
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 feed 	bl	800791e <__any_on>
 8006b44:	4682      	mov	sl, r0
 8006b46:	b1a8      	cbz	r0, 8006b74 <__gethex+0x1f8>
 8006b48:	1e7b      	subs	r3, r7, #1
 8006b4a:	1159      	asrs	r1, r3, #5
 8006b4c:	f003 021f 	and.w	r2, r3, #31
 8006b50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b54:	f04f 0a01 	mov.w	sl, #1
 8006b58:	fa0a f202 	lsl.w	r2, sl, r2
 8006b5c:	420a      	tst	r2, r1
 8006b5e:	d009      	beq.n	8006b74 <__gethex+0x1f8>
 8006b60:	4553      	cmp	r3, sl
 8006b62:	dd05      	ble.n	8006b70 <__gethex+0x1f4>
 8006b64:	1eb9      	subs	r1, r7, #2
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 fed9 	bl	800791e <__any_on>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d145      	bne.n	8006bfc <__gethex+0x280>
 8006b70:	f04f 0a02 	mov.w	sl, #2
 8006b74:	4639      	mov	r1, r7
 8006b76:	4620      	mov	r0, r4
 8006b78:	f7ff fe98 	bl	80068ac <rshift>
 8006b7c:	443d      	add	r5, r7
 8006b7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b82:	42ab      	cmp	r3, r5
 8006b84:	da4c      	bge.n	8006c20 <__gethex+0x2a4>
 8006b86:	ee18 0a10 	vmov	r0, s16
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	f000 fa6a 	bl	8007064 <_Bfree>
 8006b90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b92:	2300      	movs	r3, #0
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	27a3      	movs	r7, #163	; 0xa3
 8006b98:	e785      	b.n	8006aa6 <__gethex+0x12a>
 8006b9a:	1e73      	subs	r3, r6, #1
 8006b9c:	9a05      	ldr	r2, [sp, #20]
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d019      	beq.n	8006bdc <__gethex+0x260>
 8006ba8:	f1bb 0f20 	cmp.w	fp, #32
 8006bac:	d107      	bne.n	8006bbe <__gethex+0x242>
 8006bae:	9b02      	ldr	r3, [sp, #8]
 8006bb0:	9a00      	ldr	r2, [sp, #0]
 8006bb2:	f843 2b04 	str.w	r2, [r3], #4
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	469b      	mov	fp, r3
 8006bbe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006bc2:	f7ff fec5 	bl	8006950 <__hexdig_fun>
 8006bc6:	9b00      	ldr	r3, [sp, #0]
 8006bc8:	f000 000f 	and.w	r0, r0, #15
 8006bcc:	fa00 f00b 	lsl.w	r0, r0, fp
 8006bd0:	4303      	orrs	r3, r0
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	f10b 0b04 	add.w	fp, fp, #4
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	e00d      	b.n	8006bf8 <__gethex+0x27c>
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	9a06      	ldr	r2, [sp, #24]
 8006be0:	4413      	add	r3, r2
 8006be2:	42bb      	cmp	r3, r7
 8006be4:	d3e0      	bcc.n	8006ba8 <__gethex+0x22c>
 8006be6:	4618      	mov	r0, r3
 8006be8:	9901      	ldr	r1, [sp, #4]
 8006bea:	9307      	str	r3, [sp, #28]
 8006bec:	4652      	mov	r2, sl
 8006bee:	f001 f923 	bl	8007e38 <strncmp>
 8006bf2:	9b07      	ldr	r3, [sp, #28]
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d1d7      	bne.n	8006ba8 <__gethex+0x22c>
 8006bf8:	461e      	mov	r6, r3
 8006bfa:	e78b      	b.n	8006b14 <__gethex+0x198>
 8006bfc:	f04f 0a03 	mov.w	sl, #3
 8006c00:	e7b8      	b.n	8006b74 <__gethex+0x1f8>
 8006c02:	da0a      	bge.n	8006c1a <__gethex+0x29e>
 8006c04:	1a37      	subs	r7, r6, r0
 8006c06:	4621      	mov	r1, r4
 8006c08:	ee18 0a10 	vmov	r0, s16
 8006c0c:	463a      	mov	r2, r7
 8006c0e:	f000 fc45 	bl	800749c <__lshift>
 8006c12:	1bed      	subs	r5, r5, r7
 8006c14:	4604      	mov	r4, r0
 8006c16:	f100 0914 	add.w	r9, r0, #20
 8006c1a:	f04f 0a00 	mov.w	sl, #0
 8006c1e:	e7ae      	b.n	8006b7e <__gethex+0x202>
 8006c20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006c24:	42a8      	cmp	r0, r5
 8006c26:	dd72      	ble.n	8006d0e <__gethex+0x392>
 8006c28:	1b45      	subs	r5, r0, r5
 8006c2a:	42ae      	cmp	r6, r5
 8006c2c:	dc36      	bgt.n	8006c9c <__gethex+0x320>
 8006c2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d02a      	beq.n	8006c8c <__gethex+0x310>
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d02c      	beq.n	8006c94 <__gethex+0x318>
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d11c      	bne.n	8006c78 <__gethex+0x2fc>
 8006c3e:	42ae      	cmp	r6, r5
 8006c40:	d11a      	bne.n	8006c78 <__gethex+0x2fc>
 8006c42:	2e01      	cmp	r6, #1
 8006c44:	d112      	bne.n	8006c6c <__gethex+0x2f0>
 8006c46:	9a04      	ldr	r2, [sp, #16]
 8006c48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	f8c9 3000 	str.w	r3, [r9]
 8006c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c58:	2762      	movs	r7, #98	; 0x62
 8006c5a:	601c      	str	r4, [r3, #0]
 8006c5c:	e723      	b.n	8006aa6 <__gethex+0x12a>
 8006c5e:	bf00      	nop
 8006c60:	08008d00 	.word	0x08008d00
 8006c64:	08008c88 	.word	0x08008c88
 8006c68:	08008c99 	.word	0x08008c99
 8006c6c:	1e71      	subs	r1, r6, #1
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 fe55 	bl	800791e <__any_on>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d1e6      	bne.n	8006c46 <__gethex+0x2ca>
 8006c78:	ee18 0a10 	vmov	r0, s16
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	f000 f9f1 	bl	8007064 <_Bfree>
 8006c82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c84:	2300      	movs	r3, #0
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	2750      	movs	r7, #80	; 0x50
 8006c8a:	e70c      	b.n	8006aa6 <__gethex+0x12a>
 8006c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f2      	bne.n	8006c78 <__gethex+0x2fc>
 8006c92:	e7d8      	b.n	8006c46 <__gethex+0x2ca>
 8006c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1d5      	bne.n	8006c46 <__gethex+0x2ca>
 8006c9a:	e7ed      	b.n	8006c78 <__gethex+0x2fc>
 8006c9c:	1e6f      	subs	r7, r5, #1
 8006c9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ca2:	d131      	bne.n	8006d08 <__gethex+0x38c>
 8006ca4:	b127      	cbz	r7, 8006cb0 <__gethex+0x334>
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 fe38 	bl	800791e <__any_on>
 8006cae:	4682      	mov	sl, r0
 8006cb0:	117b      	asrs	r3, r7, #5
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006cb8:	f007 071f 	and.w	r7, r7, #31
 8006cbc:	fa01 f707 	lsl.w	r7, r1, r7
 8006cc0:	421f      	tst	r7, r3
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	bf18      	it	ne
 8006cc8:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ccc:	1b76      	subs	r6, r6, r5
 8006cce:	f7ff fded 	bl	80068ac <rshift>
 8006cd2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006cd6:	2702      	movs	r7, #2
 8006cd8:	f1ba 0f00 	cmp.w	sl, #0
 8006cdc:	d048      	beq.n	8006d70 <__gethex+0x3f4>
 8006cde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d015      	beq.n	8006d12 <__gethex+0x396>
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d017      	beq.n	8006d1a <__gethex+0x39e>
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d109      	bne.n	8006d02 <__gethex+0x386>
 8006cee:	f01a 0f02 	tst.w	sl, #2
 8006cf2:	d006      	beq.n	8006d02 <__gethex+0x386>
 8006cf4:	f8d9 0000 	ldr.w	r0, [r9]
 8006cf8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006cfc:	f01a 0f01 	tst.w	sl, #1
 8006d00:	d10e      	bne.n	8006d20 <__gethex+0x3a4>
 8006d02:	f047 0710 	orr.w	r7, r7, #16
 8006d06:	e033      	b.n	8006d70 <__gethex+0x3f4>
 8006d08:	f04f 0a01 	mov.w	sl, #1
 8006d0c:	e7d0      	b.n	8006cb0 <__gethex+0x334>
 8006d0e:	2701      	movs	r7, #1
 8006d10:	e7e2      	b.n	8006cd8 <__gethex+0x35c>
 8006d12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d14:	f1c3 0301 	rsb	r3, r3, #1
 8006d18:	9315      	str	r3, [sp, #84]	; 0x54
 8006d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0f0      	beq.n	8006d02 <__gethex+0x386>
 8006d20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d24:	f104 0314 	add.w	r3, r4, #20
 8006d28:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d2c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d30:	f04f 0c00 	mov.w	ip, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006d3e:	d01c      	beq.n	8006d7a <__gethex+0x3fe>
 8006d40:	3201      	adds	r2, #1
 8006d42:	6002      	str	r2, [r0, #0]
 8006d44:	2f02      	cmp	r7, #2
 8006d46:	f104 0314 	add.w	r3, r4, #20
 8006d4a:	d13f      	bne.n	8006dcc <__gethex+0x450>
 8006d4c:	f8d8 2000 	ldr.w	r2, [r8]
 8006d50:	3a01      	subs	r2, #1
 8006d52:	42b2      	cmp	r2, r6
 8006d54:	d10a      	bne.n	8006d6c <__gethex+0x3f0>
 8006d56:	1171      	asrs	r1, r6, #5
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d5e:	f006 061f 	and.w	r6, r6, #31
 8006d62:	fa02 f606 	lsl.w	r6, r2, r6
 8006d66:	421e      	tst	r6, r3
 8006d68:	bf18      	it	ne
 8006d6a:	4617      	movne	r7, r2
 8006d6c:	f047 0720 	orr.w	r7, r7, #32
 8006d70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d72:	601c      	str	r4, [r3, #0]
 8006d74:	9b04      	ldr	r3, [sp, #16]
 8006d76:	601d      	str	r5, [r3, #0]
 8006d78:	e695      	b.n	8006aa6 <__gethex+0x12a>
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d80:	d8d8      	bhi.n	8006d34 <__gethex+0x3b8>
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	459b      	cmp	fp, r3
 8006d86:	db19      	blt.n	8006dbc <__gethex+0x440>
 8006d88:	6861      	ldr	r1, [r4, #4]
 8006d8a:	ee18 0a10 	vmov	r0, s16
 8006d8e:	3101      	adds	r1, #1
 8006d90:	f000 f928 	bl	8006fe4 <_Balloc>
 8006d94:	4681      	mov	r9, r0
 8006d96:	b918      	cbnz	r0, 8006da0 <__gethex+0x424>
 8006d98:	4b1a      	ldr	r3, [pc, #104]	; (8006e04 <__gethex+0x488>)
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	2184      	movs	r1, #132	; 0x84
 8006d9e:	e6a8      	b.n	8006af2 <__gethex+0x176>
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	3202      	adds	r2, #2
 8006da4:	f104 010c 	add.w	r1, r4, #12
 8006da8:	0092      	lsls	r2, r2, #2
 8006daa:	300c      	adds	r0, #12
 8006dac:	f000 f90c 	bl	8006fc8 <memcpy>
 8006db0:	4621      	mov	r1, r4
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	f000 f955 	bl	8007064 <_Bfree>
 8006dba:	464c      	mov	r4, r9
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dc4:	6122      	str	r2, [r4, #16]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]
 8006dca:	e7bb      	b.n	8006d44 <__gethex+0x3c8>
 8006dcc:	6922      	ldr	r2, [r4, #16]
 8006dce:	455a      	cmp	r2, fp
 8006dd0:	dd0b      	ble.n	8006dea <__gethex+0x46e>
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff fd69 	bl	80068ac <rshift>
 8006dda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dde:	3501      	adds	r5, #1
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	f6ff aed0 	blt.w	8006b86 <__gethex+0x20a>
 8006de6:	2701      	movs	r7, #1
 8006de8:	e7c0      	b.n	8006d6c <__gethex+0x3f0>
 8006dea:	f016 061f 	ands.w	r6, r6, #31
 8006dee:	d0fa      	beq.n	8006de6 <__gethex+0x46a>
 8006df0:	4453      	add	r3, sl
 8006df2:	f1c6 0620 	rsb	r6, r6, #32
 8006df6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006dfa:	f000 f9e5 	bl	80071c8 <__hi0bits>
 8006dfe:	42b0      	cmp	r0, r6
 8006e00:	dbe7      	blt.n	8006dd2 <__gethex+0x456>
 8006e02:	e7f0      	b.n	8006de6 <__gethex+0x46a>
 8006e04:	08008c88 	.word	0x08008c88

08006e08 <L_shift>:
 8006e08:	f1c2 0208 	rsb	r2, r2, #8
 8006e0c:	0092      	lsls	r2, r2, #2
 8006e0e:	b570      	push	{r4, r5, r6, lr}
 8006e10:	f1c2 0620 	rsb	r6, r2, #32
 8006e14:	6843      	ldr	r3, [r0, #4]
 8006e16:	6804      	ldr	r4, [r0, #0]
 8006e18:	fa03 f506 	lsl.w	r5, r3, r6
 8006e1c:	432c      	orrs	r4, r5
 8006e1e:	40d3      	lsrs	r3, r2
 8006e20:	6004      	str	r4, [r0, #0]
 8006e22:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e26:	4288      	cmp	r0, r1
 8006e28:	d3f4      	bcc.n	8006e14 <L_shift+0xc>
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}

08006e2c <__match>:
 8006e2c:	b530      	push	{r4, r5, lr}
 8006e2e:	6803      	ldr	r3, [r0, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e36:	b914      	cbnz	r4, 8006e3e <__match+0x12>
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	bd30      	pop	{r4, r5, pc}
 8006e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e46:	2d19      	cmp	r5, #25
 8006e48:	bf98      	it	ls
 8006e4a:	3220      	addls	r2, #32
 8006e4c:	42a2      	cmp	r2, r4
 8006e4e:	d0f0      	beq.n	8006e32 <__match+0x6>
 8006e50:	2000      	movs	r0, #0
 8006e52:	e7f3      	b.n	8006e3c <__match+0x10>

08006e54 <__hexnan>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	680b      	ldr	r3, [r1, #0]
 8006e5a:	115e      	asrs	r6, r3, #5
 8006e5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e60:	f013 031f 	ands.w	r3, r3, #31
 8006e64:	b087      	sub	sp, #28
 8006e66:	bf18      	it	ne
 8006e68:	3604      	addne	r6, #4
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	1f37      	subs	r7, r6, #4
 8006e6e:	4690      	mov	r8, r2
 8006e70:	6802      	ldr	r2, [r0, #0]
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	4682      	mov	sl, r0
 8006e76:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e7a:	46b9      	mov	r9, r7
 8006e7c:	463c      	mov	r4, r7
 8006e7e:	9502      	str	r5, [sp, #8]
 8006e80:	46ab      	mov	fp, r5
 8006e82:	7851      	ldrb	r1, [r2, #1]
 8006e84:	1c53      	adds	r3, r2, #1
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	b341      	cbz	r1, 8006edc <__hexnan+0x88>
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	9205      	str	r2, [sp, #20]
 8006e8e:	9104      	str	r1, [sp, #16]
 8006e90:	f7ff fd5e 	bl	8006950 <__hexdig_fun>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d14f      	bne.n	8006f38 <__hexnan+0xe4>
 8006e98:	9904      	ldr	r1, [sp, #16]
 8006e9a:	9a05      	ldr	r2, [sp, #20]
 8006e9c:	2920      	cmp	r1, #32
 8006e9e:	d818      	bhi.n	8006ed2 <__hexnan+0x7e>
 8006ea0:	9b02      	ldr	r3, [sp, #8]
 8006ea2:	459b      	cmp	fp, r3
 8006ea4:	dd13      	ble.n	8006ece <__hexnan+0x7a>
 8006ea6:	454c      	cmp	r4, r9
 8006ea8:	d206      	bcs.n	8006eb8 <__hexnan+0x64>
 8006eaa:	2d07      	cmp	r5, #7
 8006eac:	dc04      	bgt.n	8006eb8 <__hexnan+0x64>
 8006eae:	462a      	mov	r2, r5
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f7ff ffa8 	bl	8006e08 <L_shift>
 8006eb8:	4544      	cmp	r4, r8
 8006eba:	d950      	bls.n	8006f5e <__hexnan+0x10a>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f1a4 0904 	sub.w	r9, r4, #4
 8006ec2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ec6:	f8cd b008 	str.w	fp, [sp, #8]
 8006eca:	464c      	mov	r4, r9
 8006ecc:	461d      	mov	r5, r3
 8006ece:	9a03      	ldr	r2, [sp, #12]
 8006ed0:	e7d7      	b.n	8006e82 <__hexnan+0x2e>
 8006ed2:	2929      	cmp	r1, #41	; 0x29
 8006ed4:	d156      	bne.n	8006f84 <__hexnan+0x130>
 8006ed6:	3202      	adds	r2, #2
 8006ed8:	f8ca 2000 	str.w	r2, [sl]
 8006edc:	f1bb 0f00 	cmp.w	fp, #0
 8006ee0:	d050      	beq.n	8006f84 <__hexnan+0x130>
 8006ee2:	454c      	cmp	r4, r9
 8006ee4:	d206      	bcs.n	8006ef4 <__hexnan+0xa0>
 8006ee6:	2d07      	cmp	r5, #7
 8006ee8:	dc04      	bgt.n	8006ef4 <__hexnan+0xa0>
 8006eea:	462a      	mov	r2, r5
 8006eec:	4649      	mov	r1, r9
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff ff8a 	bl	8006e08 <L_shift>
 8006ef4:	4544      	cmp	r4, r8
 8006ef6:	d934      	bls.n	8006f62 <__hexnan+0x10e>
 8006ef8:	f1a8 0204 	sub.w	r2, r8, #4
 8006efc:	4623      	mov	r3, r4
 8006efe:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f02:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f06:	429f      	cmp	r7, r3
 8006f08:	d2f9      	bcs.n	8006efe <__hexnan+0xaa>
 8006f0a:	1b3b      	subs	r3, r7, r4
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	3304      	adds	r3, #4
 8006f12:	3401      	adds	r4, #1
 8006f14:	3e03      	subs	r6, #3
 8006f16:	42b4      	cmp	r4, r6
 8006f18:	bf88      	it	hi
 8006f1a:	2304      	movhi	r3, #4
 8006f1c:	4443      	add	r3, r8
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f843 2b04 	str.w	r2, [r3], #4
 8006f24:	429f      	cmp	r7, r3
 8006f26:	d2fb      	bcs.n	8006f20 <__hexnan+0xcc>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	b91b      	cbnz	r3, 8006f34 <__hexnan+0xe0>
 8006f2c:	4547      	cmp	r7, r8
 8006f2e:	d127      	bne.n	8006f80 <__hexnan+0x12c>
 8006f30:	2301      	movs	r3, #1
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	2005      	movs	r0, #5
 8006f36:	e026      	b.n	8006f86 <__hexnan+0x132>
 8006f38:	3501      	adds	r5, #1
 8006f3a:	2d08      	cmp	r5, #8
 8006f3c:	f10b 0b01 	add.w	fp, fp, #1
 8006f40:	dd06      	ble.n	8006f50 <__hexnan+0xfc>
 8006f42:	4544      	cmp	r4, r8
 8006f44:	d9c3      	bls.n	8006ece <__hexnan+0x7a>
 8006f46:	2300      	movs	r3, #0
 8006f48:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f4c:	2501      	movs	r5, #1
 8006f4e:	3c04      	subs	r4, #4
 8006f50:	6822      	ldr	r2, [r4, #0]
 8006f52:	f000 000f 	and.w	r0, r0, #15
 8006f56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f5a:	6022      	str	r2, [r4, #0]
 8006f5c:	e7b7      	b.n	8006ece <__hexnan+0x7a>
 8006f5e:	2508      	movs	r5, #8
 8006f60:	e7b5      	b.n	8006ece <__hexnan+0x7a>
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0df      	beq.n	8006f28 <__hexnan+0xd4>
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f6c:	f1c3 0320 	rsb	r3, r3, #32
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
 8006f74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f78:	401a      	ands	r2, r3
 8006f7a:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f7e:	e7d3      	b.n	8006f28 <__hexnan+0xd4>
 8006f80:	3f04      	subs	r7, #4
 8006f82:	e7d1      	b.n	8006f28 <__hexnan+0xd4>
 8006f84:	2004      	movs	r0, #4
 8006f86:	b007      	add	sp, #28
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f8c <_localeconv_r>:
 8006f8c:	4800      	ldr	r0, [pc, #0]	; (8006f90 <_localeconv_r+0x4>)
 8006f8e:	4770      	bx	lr
 8006f90:	20000164 	.word	0x20000164

08006f94 <malloc>:
 8006f94:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <malloc+0xc>)
 8006f96:	4601      	mov	r1, r0
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	f000 bd63 	b.w	8007a64 <_malloc_r>
 8006f9e:	bf00      	nop
 8006fa0:	2000000c 	.word	0x2000000c

08006fa4 <__ascii_mbtowc>:
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	b901      	cbnz	r1, 8006faa <__ascii_mbtowc+0x6>
 8006fa8:	a901      	add	r1, sp, #4
 8006faa:	b142      	cbz	r2, 8006fbe <__ascii_mbtowc+0x1a>
 8006fac:	b14b      	cbz	r3, 8006fc2 <__ascii_mbtowc+0x1e>
 8006fae:	7813      	ldrb	r3, [r2, #0]
 8006fb0:	600b      	str	r3, [r1, #0]
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	1e10      	subs	r0, r2, #0
 8006fb6:	bf18      	it	ne
 8006fb8:	2001      	movne	r0, #1
 8006fba:	b002      	add	sp, #8
 8006fbc:	4770      	bx	lr
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	e7fb      	b.n	8006fba <__ascii_mbtowc+0x16>
 8006fc2:	f06f 0001 	mvn.w	r0, #1
 8006fc6:	e7f8      	b.n	8006fba <__ascii_mbtowc+0x16>

08006fc8 <memcpy>:
 8006fc8:	440a      	add	r2, r1
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fd0:	d100      	bne.n	8006fd4 <memcpy+0xc>
 8006fd2:	4770      	bx	lr
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fde:	4291      	cmp	r1, r2
 8006fe0:	d1f9      	bne.n	8006fd6 <memcpy+0xe>
 8006fe2:	bd10      	pop	{r4, pc}

08006fe4 <_Balloc>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fe8:	4604      	mov	r4, r0
 8006fea:	460d      	mov	r5, r1
 8006fec:	b976      	cbnz	r6, 800700c <_Balloc+0x28>
 8006fee:	2010      	movs	r0, #16
 8006ff0:	f7ff ffd0 	bl	8006f94 <malloc>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ff8:	b920      	cbnz	r0, 8007004 <_Balloc+0x20>
 8006ffa:	4b18      	ldr	r3, [pc, #96]	; (800705c <_Balloc+0x78>)
 8006ffc:	4818      	ldr	r0, [pc, #96]	; (8007060 <_Balloc+0x7c>)
 8006ffe:	2166      	movs	r1, #102	; 0x66
 8007000:	f000 ff3c 	bl	8007e7c <__assert_func>
 8007004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007008:	6006      	str	r6, [r0, #0]
 800700a:	60c6      	str	r6, [r0, #12]
 800700c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800700e:	68f3      	ldr	r3, [r6, #12]
 8007010:	b183      	cbz	r3, 8007034 <_Balloc+0x50>
 8007012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800701a:	b9b8      	cbnz	r0, 800704c <_Balloc+0x68>
 800701c:	2101      	movs	r1, #1
 800701e:	fa01 f605 	lsl.w	r6, r1, r5
 8007022:	1d72      	adds	r2, r6, #5
 8007024:	0092      	lsls	r2, r2, #2
 8007026:	4620      	mov	r0, r4
 8007028:	f000 fc9a 	bl	8007960 <_calloc_r>
 800702c:	b160      	cbz	r0, 8007048 <_Balloc+0x64>
 800702e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007032:	e00e      	b.n	8007052 <_Balloc+0x6e>
 8007034:	2221      	movs	r2, #33	; 0x21
 8007036:	2104      	movs	r1, #4
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fc91 	bl	8007960 <_calloc_r>
 800703e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007040:	60f0      	str	r0, [r6, #12]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e4      	bne.n	8007012 <_Balloc+0x2e>
 8007048:	2000      	movs	r0, #0
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	6802      	ldr	r2, [r0, #0]
 800704e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007052:	2300      	movs	r3, #0
 8007054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007058:	e7f7      	b.n	800704a <_Balloc+0x66>
 800705a:	bf00      	nop
 800705c:	08008c16 	.word	0x08008c16
 8007060:	08008d14 	.word	0x08008d14

08007064 <_Bfree>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007068:	4605      	mov	r5, r0
 800706a:	460c      	mov	r4, r1
 800706c:	b976      	cbnz	r6, 800708c <_Bfree+0x28>
 800706e:	2010      	movs	r0, #16
 8007070:	f7ff ff90 	bl	8006f94 <malloc>
 8007074:	4602      	mov	r2, r0
 8007076:	6268      	str	r0, [r5, #36]	; 0x24
 8007078:	b920      	cbnz	r0, 8007084 <_Bfree+0x20>
 800707a:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <_Bfree+0x3c>)
 800707c:	4809      	ldr	r0, [pc, #36]	; (80070a4 <_Bfree+0x40>)
 800707e:	218a      	movs	r1, #138	; 0x8a
 8007080:	f000 fefc 	bl	8007e7c <__assert_func>
 8007084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007088:	6006      	str	r6, [r0, #0]
 800708a:	60c6      	str	r6, [r0, #12]
 800708c:	b13c      	cbz	r4, 800709e <_Bfree+0x3a>
 800708e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007090:	6862      	ldr	r2, [r4, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007098:	6021      	str	r1, [r4, #0]
 800709a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	08008c16 	.word	0x08008c16
 80070a4:	08008d14 	.word	0x08008d14

080070a8 <__multadd>:
 80070a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ac:	690d      	ldr	r5, [r1, #16]
 80070ae:	4607      	mov	r7, r0
 80070b0:	460c      	mov	r4, r1
 80070b2:	461e      	mov	r6, r3
 80070b4:	f101 0c14 	add.w	ip, r1, #20
 80070b8:	2000      	movs	r0, #0
 80070ba:	f8dc 3000 	ldr.w	r3, [ip]
 80070be:	b299      	uxth	r1, r3
 80070c0:	fb02 6101 	mla	r1, r2, r1, r6
 80070c4:	0c1e      	lsrs	r6, r3, #16
 80070c6:	0c0b      	lsrs	r3, r1, #16
 80070c8:	fb02 3306 	mla	r3, r2, r6, r3
 80070cc:	b289      	uxth	r1, r1
 80070ce:	3001      	adds	r0, #1
 80070d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070d4:	4285      	cmp	r5, r0
 80070d6:	f84c 1b04 	str.w	r1, [ip], #4
 80070da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070de:	dcec      	bgt.n	80070ba <__multadd+0x12>
 80070e0:	b30e      	cbz	r6, 8007126 <__multadd+0x7e>
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	42ab      	cmp	r3, r5
 80070e6:	dc19      	bgt.n	800711c <__multadd+0x74>
 80070e8:	6861      	ldr	r1, [r4, #4]
 80070ea:	4638      	mov	r0, r7
 80070ec:	3101      	adds	r1, #1
 80070ee:	f7ff ff79 	bl	8006fe4 <_Balloc>
 80070f2:	4680      	mov	r8, r0
 80070f4:	b928      	cbnz	r0, 8007102 <__multadd+0x5a>
 80070f6:	4602      	mov	r2, r0
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <__multadd+0x84>)
 80070fa:	480d      	ldr	r0, [pc, #52]	; (8007130 <__multadd+0x88>)
 80070fc:	21b5      	movs	r1, #181	; 0xb5
 80070fe:	f000 febd 	bl	8007e7c <__assert_func>
 8007102:	6922      	ldr	r2, [r4, #16]
 8007104:	3202      	adds	r2, #2
 8007106:	f104 010c 	add.w	r1, r4, #12
 800710a:	0092      	lsls	r2, r2, #2
 800710c:	300c      	adds	r0, #12
 800710e:	f7ff ff5b 	bl	8006fc8 <memcpy>
 8007112:	4621      	mov	r1, r4
 8007114:	4638      	mov	r0, r7
 8007116:	f7ff ffa5 	bl	8007064 <_Bfree>
 800711a:	4644      	mov	r4, r8
 800711c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007120:	3501      	adds	r5, #1
 8007122:	615e      	str	r6, [r3, #20]
 8007124:	6125      	str	r5, [r4, #16]
 8007126:	4620      	mov	r0, r4
 8007128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800712c:	08008c88 	.word	0x08008c88
 8007130:	08008d14 	.word	0x08008d14

08007134 <__s2b>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	460c      	mov	r4, r1
 800713a:	4615      	mov	r5, r2
 800713c:	461f      	mov	r7, r3
 800713e:	2209      	movs	r2, #9
 8007140:	3308      	adds	r3, #8
 8007142:	4606      	mov	r6, r0
 8007144:	fb93 f3f2 	sdiv	r3, r3, r2
 8007148:	2100      	movs	r1, #0
 800714a:	2201      	movs	r2, #1
 800714c:	429a      	cmp	r2, r3
 800714e:	db09      	blt.n	8007164 <__s2b+0x30>
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff ff47 	bl	8006fe4 <_Balloc>
 8007156:	b940      	cbnz	r0, 800716a <__s2b+0x36>
 8007158:	4602      	mov	r2, r0
 800715a:	4b19      	ldr	r3, [pc, #100]	; (80071c0 <__s2b+0x8c>)
 800715c:	4819      	ldr	r0, [pc, #100]	; (80071c4 <__s2b+0x90>)
 800715e:	21ce      	movs	r1, #206	; 0xce
 8007160:	f000 fe8c 	bl	8007e7c <__assert_func>
 8007164:	0052      	lsls	r2, r2, #1
 8007166:	3101      	adds	r1, #1
 8007168:	e7f0      	b.n	800714c <__s2b+0x18>
 800716a:	9b08      	ldr	r3, [sp, #32]
 800716c:	6143      	str	r3, [r0, #20]
 800716e:	2d09      	cmp	r5, #9
 8007170:	f04f 0301 	mov.w	r3, #1
 8007174:	6103      	str	r3, [r0, #16]
 8007176:	dd16      	ble.n	80071a6 <__s2b+0x72>
 8007178:	f104 0909 	add.w	r9, r4, #9
 800717c:	46c8      	mov	r8, r9
 800717e:	442c      	add	r4, r5
 8007180:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007184:	4601      	mov	r1, r0
 8007186:	3b30      	subs	r3, #48	; 0x30
 8007188:	220a      	movs	r2, #10
 800718a:	4630      	mov	r0, r6
 800718c:	f7ff ff8c 	bl	80070a8 <__multadd>
 8007190:	45a0      	cmp	r8, r4
 8007192:	d1f5      	bne.n	8007180 <__s2b+0x4c>
 8007194:	f1a5 0408 	sub.w	r4, r5, #8
 8007198:	444c      	add	r4, r9
 800719a:	1b2d      	subs	r5, r5, r4
 800719c:	1963      	adds	r3, r4, r5
 800719e:	42bb      	cmp	r3, r7
 80071a0:	db04      	blt.n	80071ac <__s2b+0x78>
 80071a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a6:	340a      	adds	r4, #10
 80071a8:	2509      	movs	r5, #9
 80071aa:	e7f6      	b.n	800719a <__s2b+0x66>
 80071ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071b0:	4601      	mov	r1, r0
 80071b2:	3b30      	subs	r3, #48	; 0x30
 80071b4:	220a      	movs	r2, #10
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ff76 	bl	80070a8 <__multadd>
 80071bc:	e7ee      	b.n	800719c <__s2b+0x68>
 80071be:	bf00      	nop
 80071c0:	08008c88 	.word	0x08008c88
 80071c4:	08008d14 	.word	0x08008d14

080071c8 <__hi0bits>:
 80071c8:	0c03      	lsrs	r3, r0, #16
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	b9d3      	cbnz	r3, 8007204 <__hi0bits+0x3c>
 80071ce:	0400      	lsls	r0, r0, #16
 80071d0:	2310      	movs	r3, #16
 80071d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071d6:	bf04      	itt	eq
 80071d8:	0200      	lsleq	r0, r0, #8
 80071da:	3308      	addeq	r3, #8
 80071dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071e0:	bf04      	itt	eq
 80071e2:	0100      	lsleq	r0, r0, #4
 80071e4:	3304      	addeq	r3, #4
 80071e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071ea:	bf04      	itt	eq
 80071ec:	0080      	lsleq	r0, r0, #2
 80071ee:	3302      	addeq	r3, #2
 80071f0:	2800      	cmp	r0, #0
 80071f2:	db05      	blt.n	8007200 <__hi0bits+0x38>
 80071f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071f8:	f103 0301 	add.w	r3, r3, #1
 80071fc:	bf08      	it	eq
 80071fe:	2320      	moveq	r3, #32
 8007200:	4618      	mov	r0, r3
 8007202:	4770      	bx	lr
 8007204:	2300      	movs	r3, #0
 8007206:	e7e4      	b.n	80071d2 <__hi0bits+0xa>

08007208 <__lo0bits>:
 8007208:	6803      	ldr	r3, [r0, #0]
 800720a:	f013 0207 	ands.w	r2, r3, #7
 800720e:	4601      	mov	r1, r0
 8007210:	d00b      	beq.n	800722a <__lo0bits+0x22>
 8007212:	07da      	lsls	r2, r3, #31
 8007214:	d423      	bmi.n	800725e <__lo0bits+0x56>
 8007216:	0798      	lsls	r0, r3, #30
 8007218:	bf49      	itett	mi
 800721a:	085b      	lsrmi	r3, r3, #1
 800721c:	089b      	lsrpl	r3, r3, #2
 800721e:	2001      	movmi	r0, #1
 8007220:	600b      	strmi	r3, [r1, #0]
 8007222:	bf5c      	itt	pl
 8007224:	600b      	strpl	r3, [r1, #0]
 8007226:	2002      	movpl	r0, #2
 8007228:	4770      	bx	lr
 800722a:	b298      	uxth	r0, r3
 800722c:	b9a8      	cbnz	r0, 800725a <__lo0bits+0x52>
 800722e:	0c1b      	lsrs	r3, r3, #16
 8007230:	2010      	movs	r0, #16
 8007232:	b2da      	uxtb	r2, r3
 8007234:	b90a      	cbnz	r2, 800723a <__lo0bits+0x32>
 8007236:	3008      	adds	r0, #8
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	071a      	lsls	r2, r3, #28
 800723c:	bf04      	itt	eq
 800723e:	091b      	lsreq	r3, r3, #4
 8007240:	3004      	addeq	r0, #4
 8007242:	079a      	lsls	r2, r3, #30
 8007244:	bf04      	itt	eq
 8007246:	089b      	lsreq	r3, r3, #2
 8007248:	3002      	addeq	r0, #2
 800724a:	07da      	lsls	r2, r3, #31
 800724c:	d403      	bmi.n	8007256 <__lo0bits+0x4e>
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	f100 0001 	add.w	r0, r0, #1
 8007254:	d005      	beq.n	8007262 <__lo0bits+0x5a>
 8007256:	600b      	str	r3, [r1, #0]
 8007258:	4770      	bx	lr
 800725a:	4610      	mov	r0, r2
 800725c:	e7e9      	b.n	8007232 <__lo0bits+0x2a>
 800725e:	2000      	movs	r0, #0
 8007260:	4770      	bx	lr
 8007262:	2020      	movs	r0, #32
 8007264:	4770      	bx	lr
	...

08007268 <__i2b>:
 8007268:	b510      	push	{r4, lr}
 800726a:	460c      	mov	r4, r1
 800726c:	2101      	movs	r1, #1
 800726e:	f7ff feb9 	bl	8006fe4 <_Balloc>
 8007272:	4602      	mov	r2, r0
 8007274:	b928      	cbnz	r0, 8007282 <__i2b+0x1a>
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <__i2b+0x24>)
 8007278:	4805      	ldr	r0, [pc, #20]	; (8007290 <__i2b+0x28>)
 800727a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800727e:	f000 fdfd 	bl	8007e7c <__assert_func>
 8007282:	2301      	movs	r3, #1
 8007284:	6144      	str	r4, [r0, #20]
 8007286:	6103      	str	r3, [r0, #16]
 8007288:	bd10      	pop	{r4, pc}
 800728a:	bf00      	nop
 800728c:	08008c88 	.word	0x08008c88
 8007290:	08008d14 	.word	0x08008d14

08007294 <__multiply>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	4691      	mov	r9, r2
 800729a:	690a      	ldr	r2, [r1, #16]
 800729c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	bfb8      	it	lt
 80072a4:	460b      	movlt	r3, r1
 80072a6:	460c      	mov	r4, r1
 80072a8:	bfbc      	itt	lt
 80072aa:	464c      	movlt	r4, r9
 80072ac:	4699      	movlt	r9, r3
 80072ae:	6927      	ldr	r7, [r4, #16]
 80072b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072b4:	68a3      	ldr	r3, [r4, #8]
 80072b6:	6861      	ldr	r1, [r4, #4]
 80072b8:	eb07 060a 	add.w	r6, r7, sl
 80072bc:	42b3      	cmp	r3, r6
 80072be:	b085      	sub	sp, #20
 80072c0:	bfb8      	it	lt
 80072c2:	3101      	addlt	r1, #1
 80072c4:	f7ff fe8e 	bl	8006fe4 <_Balloc>
 80072c8:	b930      	cbnz	r0, 80072d8 <__multiply+0x44>
 80072ca:	4602      	mov	r2, r0
 80072cc:	4b44      	ldr	r3, [pc, #272]	; (80073e0 <__multiply+0x14c>)
 80072ce:	4845      	ldr	r0, [pc, #276]	; (80073e4 <__multiply+0x150>)
 80072d0:	f240 115d 	movw	r1, #349	; 0x15d
 80072d4:	f000 fdd2 	bl	8007e7c <__assert_func>
 80072d8:	f100 0514 	add.w	r5, r0, #20
 80072dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072e0:	462b      	mov	r3, r5
 80072e2:	2200      	movs	r2, #0
 80072e4:	4543      	cmp	r3, r8
 80072e6:	d321      	bcc.n	800732c <__multiply+0x98>
 80072e8:	f104 0314 	add.w	r3, r4, #20
 80072ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072f0:	f109 0314 	add.w	r3, r9, #20
 80072f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072f8:	9202      	str	r2, [sp, #8]
 80072fa:	1b3a      	subs	r2, r7, r4
 80072fc:	3a15      	subs	r2, #21
 80072fe:	f022 0203 	bic.w	r2, r2, #3
 8007302:	3204      	adds	r2, #4
 8007304:	f104 0115 	add.w	r1, r4, #21
 8007308:	428f      	cmp	r7, r1
 800730a:	bf38      	it	cc
 800730c:	2204      	movcc	r2, #4
 800730e:	9201      	str	r2, [sp, #4]
 8007310:	9a02      	ldr	r2, [sp, #8]
 8007312:	9303      	str	r3, [sp, #12]
 8007314:	429a      	cmp	r2, r3
 8007316:	d80c      	bhi.n	8007332 <__multiply+0x9e>
 8007318:	2e00      	cmp	r6, #0
 800731a:	dd03      	ble.n	8007324 <__multiply+0x90>
 800731c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007320:	2b00      	cmp	r3, #0
 8007322:	d05a      	beq.n	80073da <__multiply+0x146>
 8007324:	6106      	str	r6, [r0, #16]
 8007326:	b005      	add	sp, #20
 8007328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732c:	f843 2b04 	str.w	r2, [r3], #4
 8007330:	e7d8      	b.n	80072e4 <__multiply+0x50>
 8007332:	f8b3 a000 	ldrh.w	sl, [r3]
 8007336:	f1ba 0f00 	cmp.w	sl, #0
 800733a:	d024      	beq.n	8007386 <__multiply+0xf2>
 800733c:	f104 0e14 	add.w	lr, r4, #20
 8007340:	46a9      	mov	r9, r5
 8007342:	f04f 0c00 	mov.w	ip, #0
 8007346:	f85e 2b04 	ldr.w	r2, [lr], #4
 800734a:	f8d9 1000 	ldr.w	r1, [r9]
 800734e:	fa1f fb82 	uxth.w	fp, r2
 8007352:	b289      	uxth	r1, r1
 8007354:	fb0a 110b 	mla	r1, sl, fp, r1
 8007358:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800735c:	f8d9 2000 	ldr.w	r2, [r9]
 8007360:	4461      	add	r1, ip
 8007362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007366:	fb0a c20b 	mla	r2, sl, fp, ip
 800736a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800736e:	b289      	uxth	r1, r1
 8007370:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007374:	4577      	cmp	r7, lr
 8007376:	f849 1b04 	str.w	r1, [r9], #4
 800737a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800737e:	d8e2      	bhi.n	8007346 <__multiply+0xb2>
 8007380:	9a01      	ldr	r2, [sp, #4]
 8007382:	f845 c002 	str.w	ip, [r5, r2]
 8007386:	9a03      	ldr	r2, [sp, #12]
 8007388:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800738c:	3304      	adds	r3, #4
 800738e:	f1b9 0f00 	cmp.w	r9, #0
 8007392:	d020      	beq.n	80073d6 <__multiply+0x142>
 8007394:	6829      	ldr	r1, [r5, #0]
 8007396:	f104 0c14 	add.w	ip, r4, #20
 800739a:	46ae      	mov	lr, r5
 800739c:	f04f 0a00 	mov.w	sl, #0
 80073a0:	f8bc b000 	ldrh.w	fp, [ip]
 80073a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073a8:	fb09 220b 	mla	r2, r9, fp, r2
 80073ac:	4492      	add	sl, r2
 80073ae:	b289      	uxth	r1, r1
 80073b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073b4:	f84e 1b04 	str.w	r1, [lr], #4
 80073b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073bc:	f8be 1000 	ldrh.w	r1, [lr]
 80073c0:	0c12      	lsrs	r2, r2, #16
 80073c2:	fb09 1102 	mla	r1, r9, r2, r1
 80073c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073ca:	4567      	cmp	r7, ip
 80073cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073d0:	d8e6      	bhi.n	80073a0 <__multiply+0x10c>
 80073d2:	9a01      	ldr	r2, [sp, #4]
 80073d4:	50a9      	str	r1, [r5, r2]
 80073d6:	3504      	adds	r5, #4
 80073d8:	e79a      	b.n	8007310 <__multiply+0x7c>
 80073da:	3e01      	subs	r6, #1
 80073dc:	e79c      	b.n	8007318 <__multiply+0x84>
 80073de:	bf00      	nop
 80073e0:	08008c88 	.word	0x08008c88
 80073e4:	08008d14 	.word	0x08008d14

080073e8 <__pow5mult>:
 80073e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ec:	4615      	mov	r5, r2
 80073ee:	f012 0203 	ands.w	r2, r2, #3
 80073f2:	4606      	mov	r6, r0
 80073f4:	460f      	mov	r7, r1
 80073f6:	d007      	beq.n	8007408 <__pow5mult+0x20>
 80073f8:	4c25      	ldr	r4, [pc, #148]	; (8007490 <__pow5mult+0xa8>)
 80073fa:	3a01      	subs	r2, #1
 80073fc:	2300      	movs	r3, #0
 80073fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007402:	f7ff fe51 	bl	80070a8 <__multadd>
 8007406:	4607      	mov	r7, r0
 8007408:	10ad      	asrs	r5, r5, #2
 800740a:	d03d      	beq.n	8007488 <__pow5mult+0xa0>
 800740c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800740e:	b97c      	cbnz	r4, 8007430 <__pow5mult+0x48>
 8007410:	2010      	movs	r0, #16
 8007412:	f7ff fdbf 	bl	8006f94 <malloc>
 8007416:	4602      	mov	r2, r0
 8007418:	6270      	str	r0, [r6, #36]	; 0x24
 800741a:	b928      	cbnz	r0, 8007428 <__pow5mult+0x40>
 800741c:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <__pow5mult+0xac>)
 800741e:	481e      	ldr	r0, [pc, #120]	; (8007498 <__pow5mult+0xb0>)
 8007420:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007424:	f000 fd2a 	bl	8007e7c <__assert_func>
 8007428:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800742c:	6004      	str	r4, [r0, #0]
 800742e:	60c4      	str	r4, [r0, #12]
 8007430:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007434:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007438:	b94c      	cbnz	r4, 800744e <__pow5mult+0x66>
 800743a:	f240 2171 	movw	r1, #625	; 0x271
 800743e:	4630      	mov	r0, r6
 8007440:	f7ff ff12 	bl	8007268 <__i2b>
 8007444:	2300      	movs	r3, #0
 8007446:	f8c8 0008 	str.w	r0, [r8, #8]
 800744a:	4604      	mov	r4, r0
 800744c:	6003      	str	r3, [r0, #0]
 800744e:	f04f 0900 	mov.w	r9, #0
 8007452:	07eb      	lsls	r3, r5, #31
 8007454:	d50a      	bpl.n	800746c <__pow5mult+0x84>
 8007456:	4639      	mov	r1, r7
 8007458:	4622      	mov	r2, r4
 800745a:	4630      	mov	r0, r6
 800745c:	f7ff ff1a 	bl	8007294 <__multiply>
 8007460:	4639      	mov	r1, r7
 8007462:	4680      	mov	r8, r0
 8007464:	4630      	mov	r0, r6
 8007466:	f7ff fdfd 	bl	8007064 <_Bfree>
 800746a:	4647      	mov	r7, r8
 800746c:	106d      	asrs	r5, r5, #1
 800746e:	d00b      	beq.n	8007488 <__pow5mult+0xa0>
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	b938      	cbnz	r0, 8007484 <__pow5mult+0x9c>
 8007474:	4622      	mov	r2, r4
 8007476:	4621      	mov	r1, r4
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff ff0b 	bl	8007294 <__multiply>
 800747e:	6020      	str	r0, [r4, #0]
 8007480:	f8c0 9000 	str.w	r9, [r0]
 8007484:	4604      	mov	r4, r0
 8007486:	e7e4      	b.n	8007452 <__pow5mult+0x6a>
 8007488:	4638      	mov	r0, r7
 800748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748e:	bf00      	nop
 8007490:	08008e60 	.word	0x08008e60
 8007494:	08008c16 	.word	0x08008c16
 8007498:	08008d14 	.word	0x08008d14

0800749c <__lshift>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	460c      	mov	r4, r1
 80074a2:	6849      	ldr	r1, [r1, #4]
 80074a4:	6923      	ldr	r3, [r4, #16]
 80074a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074aa:	68a3      	ldr	r3, [r4, #8]
 80074ac:	4607      	mov	r7, r0
 80074ae:	4691      	mov	r9, r2
 80074b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074b4:	f108 0601 	add.w	r6, r8, #1
 80074b8:	42b3      	cmp	r3, r6
 80074ba:	db0b      	blt.n	80074d4 <__lshift+0x38>
 80074bc:	4638      	mov	r0, r7
 80074be:	f7ff fd91 	bl	8006fe4 <_Balloc>
 80074c2:	4605      	mov	r5, r0
 80074c4:	b948      	cbnz	r0, 80074da <__lshift+0x3e>
 80074c6:	4602      	mov	r2, r0
 80074c8:	4b2a      	ldr	r3, [pc, #168]	; (8007574 <__lshift+0xd8>)
 80074ca:	482b      	ldr	r0, [pc, #172]	; (8007578 <__lshift+0xdc>)
 80074cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074d0:	f000 fcd4 	bl	8007e7c <__assert_func>
 80074d4:	3101      	adds	r1, #1
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	e7ee      	b.n	80074b8 <__lshift+0x1c>
 80074da:	2300      	movs	r3, #0
 80074dc:	f100 0114 	add.w	r1, r0, #20
 80074e0:	f100 0210 	add.w	r2, r0, #16
 80074e4:	4618      	mov	r0, r3
 80074e6:	4553      	cmp	r3, sl
 80074e8:	db37      	blt.n	800755a <__lshift+0xbe>
 80074ea:	6920      	ldr	r0, [r4, #16]
 80074ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074f0:	f104 0314 	add.w	r3, r4, #20
 80074f4:	f019 091f 	ands.w	r9, r9, #31
 80074f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007500:	d02f      	beq.n	8007562 <__lshift+0xc6>
 8007502:	f1c9 0e20 	rsb	lr, r9, #32
 8007506:	468a      	mov	sl, r1
 8007508:	f04f 0c00 	mov.w	ip, #0
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	fa02 f209 	lsl.w	r2, r2, r9
 8007512:	ea42 020c 	orr.w	r2, r2, ip
 8007516:	f84a 2b04 	str.w	r2, [sl], #4
 800751a:	f853 2b04 	ldr.w	r2, [r3], #4
 800751e:	4298      	cmp	r0, r3
 8007520:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007524:	d8f2      	bhi.n	800750c <__lshift+0x70>
 8007526:	1b03      	subs	r3, r0, r4
 8007528:	3b15      	subs	r3, #21
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	3304      	adds	r3, #4
 8007530:	f104 0215 	add.w	r2, r4, #21
 8007534:	4290      	cmp	r0, r2
 8007536:	bf38      	it	cc
 8007538:	2304      	movcc	r3, #4
 800753a:	f841 c003 	str.w	ip, [r1, r3]
 800753e:	f1bc 0f00 	cmp.w	ip, #0
 8007542:	d001      	beq.n	8007548 <__lshift+0xac>
 8007544:	f108 0602 	add.w	r6, r8, #2
 8007548:	3e01      	subs	r6, #1
 800754a:	4638      	mov	r0, r7
 800754c:	612e      	str	r6, [r5, #16]
 800754e:	4621      	mov	r1, r4
 8007550:	f7ff fd88 	bl	8007064 <_Bfree>
 8007554:	4628      	mov	r0, r5
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	f842 0f04 	str.w	r0, [r2, #4]!
 800755e:	3301      	adds	r3, #1
 8007560:	e7c1      	b.n	80074e6 <__lshift+0x4a>
 8007562:	3904      	subs	r1, #4
 8007564:	f853 2b04 	ldr.w	r2, [r3], #4
 8007568:	f841 2f04 	str.w	r2, [r1, #4]!
 800756c:	4298      	cmp	r0, r3
 800756e:	d8f9      	bhi.n	8007564 <__lshift+0xc8>
 8007570:	e7ea      	b.n	8007548 <__lshift+0xac>
 8007572:	bf00      	nop
 8007574:	08008c88 	.word	0x08008c88
 8007578:	08008d14 	.word	0x08008d14

0800757c <__mcmp>:
 800757c:	b530      	push	{r4, r5, lr}
 800757e:	6902      	ldr	r2, [r0, #16]
 8007580:	690c      	ldr	r4, [r1, #16]
 8007582:	1b12      	subs	r2, r2, r4
 8007584:	d10e      	bne.n	80075a4 <__mcmp+0x28>
 8007586:	f100 0314 	add.w	r3, r0, #20
 800758a:	3114      	adds	r1, #20
 800758c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007590:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007594:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007598:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800759c:	42a5      	cmp	r5, r4
 800759e:	d003      	beq.n	80075a8 <__mcmp+0x2c>
 80075a0:	d305      	bcc.n	80075ae <__mcmp+0x32>
 80075a2:	2201      	movs	r2, #1
 80075a4:	4610      	mov	r0, r2
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	4283      	cmp	r3, r0
 80075aa:	d3f3      	bcc.n	8007594 <__mcmp+0x18>
 80075ac:	e7fa      	b.n	80075a4 <__mcmp+0x28>
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b2:	e7f7      	b.n	80075a4 <__mcmp+0x28>

080075b4 <__mdiff>:
 80075b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	4606      	mov	r6, r0
 80075bc:	4611      	mov	r1, r2
 80075be:	4620      	mov	r0, r4
 80075c0:	4690      	mov	r8, r2
 80075c2:	f7ff ffdb 	bl	800757c <__mcmp>
 80075c6:	1e05      	subs	r5, r0, #0
 80075c8:	d110      	bne.n	80075ec <__mdiff+0x38>
 80075ca:	4629      	mov	r1, r5
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff fd09 	bl	8006fe4 <_Balloc>
 80075d2:	b930      	cbnz	r0, 80075e2 <__mdiff+0x2e>
 80075d4:	4b3a      	ldr	r3, [pc, #232]	; (80076c0 <__mdiff+0x10c>)
 80075d6:	4602      	mov	r2, r0
 80075d8:	f240 2132 	movw	r1, #562	; 0x232
 80075dc:	4839      	ldr	r0, [pc, #228]	; (80076c4 <__mdiff+0x110>)
 80075de:	f000 fc4d 	bl	8007e7c <__assert_func>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	bfa4      	itt	ge
 80075ee:	4643      	movge	r3, r8
 80075f0:	46a0      	movge	r8, r4
 80075f2:	4630      	mov	r0, r6
 80075f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075f8:	bfa6      	itte	ge
 80075fa:	461c      	movge	r4, r3
 80075fc:	2500      	movge	r5, #0
 80075fe:	2501      	movlt	r5, #1
 8007600:	f7ff fcf0 	bl	8006fe4 <_Balloc>
 8007604:	b920      	cbnz	r0, 8007610 <__mdiff+0x5c>
 8007606:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <__mdiff+0x10c>)
 8007608:	4602      	mov	r2, r0
 800760a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800760e:	e7e5      	b.n	80075dc <__mdiff+0x28>
 8007610:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007614:	6926      	ldr	r6, [r4, #16]
 8007616:	60c5      	str	r5, [r0, #12]
 8007618:	f104 0914 	add.w	r9, r4, #20
 800761c:	f108 0514 	add.w	r5, r8, #20
 8007620:	f100 0e14 	add.w	lr, r0, #20
 8007624:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007628:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800762c:	f108 0210 	add.w	r2, r8, #16
 8007630:	46f2      	mov	sl, lr
 8007632:	2100      	movs	r1, #0
 8007634:	f859 3b04 	ldr.w	r3, [r9], #4
 8007638:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800763c:	fa1f f883 	uxth.w	r8, r3
 8007640:	fa11 f18b 	uxtah	r1, r1, fp
 8007644:	0c1b      	lsrs	r3, r3, #16
 8007646:	eba1 0808 	sub.w	r8, r1, r8
 800764a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800764e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007652:	fa1f f888 	uxth.w	r8, r8
 8007656:	1419      	asrs	r1, r3, #16
 8007658:	454e      	cmp	r6, r9
 800765a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800765e:	f84a 3b04 	str.w	r3, [sl], #4
 8007662:	d8e7      	bhi.n	8007634 <__mdiff+0x80>
 8007664:	1b33      	subs	r3, r6, r4
 8007666:	3b15      	subs	r3, #21
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	3304      	adds	r3, #4
 800766e:	3415      	adds	r4, #21
 8007670:	42a6      	cmp	r6, r4
 8007672:	bf38      	it	cc
 8007674:	2304      	movcc	r3, #4
 8007676:	441d      	add	r5, r3
 8007678:	4473      	add	r3, lr
 800767a:	469e      	mov	lr, r3
 800767c:	462e      	mov	r6, r5
 800767e:	4566      	cmp	r6, ip
 8007680:	d30e      	bcc.n	80076a0 <__mdiff+0xec>
 8007682:	f10c 0203 	add.w	r2, ip, #3
 8007686:	1b52      	subs	r2, r2, r5
 8007688:	f022 0203 	bic.w	r2, r2, #3
 800768c:	3d03      	subs	r5, #3
 800768e:	45ac      	cmp	ip, r5
 8007690:	bf38      	it	cc
 8007692:	2200      	movcc	r2, #0
 8007694:	441a      	add	r2, r3
 8007696:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800769a:	b17b      	cbz	r3, 80076bc <__mdiff+0x108>
 800769c:	6107      	str	r7, [r0, #16]
 800769e:	e7a3      	b.n	80075e8 <__mdiff+0x34>
 80076a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80076a4:	fa11 f288 	uxtah	r2, r1, r8
 80076a8:	1414      	asrs	r4, r2, #16
 80076aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076ae:	b292      	uxth	r2, r2
 80076b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076b4:	f84e 2b04 	str.w	r2, [lr], #4
 80076b8:	1421      	asrs	r1, r4, #16
 80076ba:	e7e0      	b.n	800767e <__mdiff+0xca>
 80076bc:	3f01      	subs	r7, #1
 80076be:	e7ea      	b.n	8007696 <__mdiff+0xe2>
 80076c0:	08008c88 	.word	0x08008c88
 80076c4:	08008d14 	.word	0x08008d14

080076c8 <__ulp>:
 80076c8:	b082      	sub	sp, #8
 80076ca:	ed8d 0b00 	vstr	d0, [sp]
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	4912      	ldr	r1, [pc, #72]	; (800771c <__ulp+0x54>)
 80076d2:	4019      	ands	r1, r3
 80076d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80076d8:	2900      	cmp	r1, #0
 80076da:	dd05      	ble.n	80076e8 <__ulp+0x20>
 80076dc:	2200      	movs	r2, #0
 80076de:	460b      	mov	r3, r1
 80076e0:	ec43 2b10 	vmov	d0, r2, r3
 80076e4:	b002      	add	sp, #8
 80076e6:	4770      	bx	lr
 80076e8:	4249      	negs	r1, r1
 80076ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80076ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	f04f 0300 	mov.w	r3, #0
 80076fa:	da04      	bge.n	8007706 <__ulp+0x3e>
 80076fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007700:	fa41 f300 	asr.w	r3, r1, r0
 8007704:	e7ec      	b.n	80076e0 <__ulp+0x18>
 8007706:	f1a0 0114 	sub.w	r1, r0, #20
 800770a:	291e      	cmp	r1, #30
 800770c:	bfda      	itte	le
 800770e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007712:	fa20 f101 	lsrle.w	r1, r0, r1
 8007716:	2101      	movgt	r1, #1
 8007718:	460a      	mov	r2, r1
 800771a:	e7e1      	b.n	80076e0 <__ulp+0x18>
 800771c:	7ff00000 	.word	0x7ff00000

08007720 <__b2d>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	6905      	ldr	r5, [r0, #16]
 8007724:	f100 0714 	add.w	r7, r0, #20
 8007728:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800772c:	1f2e      	subs	r6, r5, #4
 800772e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007732:	4620      	mov	r0, r4
 8007734:	f7ff fd48 	bl	80071c8 <__hi0bits>
 8007738:	f1c0 0320 	rsb	r3, r0, #32
 800773c:	280a      	cmp	r0, #10
 800773e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80077bc <__b2d+0x9c>
 8007742:	600b      	str	r3, [r1, #0]
 8007744:	dc14      	bgt.n	8007770 <__b2d+0x50>
 8007746:	f1c0 0e0b 	rsb	lr, r0, #11
 800774a:	fa24 f10e 	lsr.w	r1, r4, lr
 800774e:	42b7      	cmp	r7, r6
 8007750:	ea41 030c 	orr.w	r3, r1, ip
 8007754:	bf34      	ite	cc
 8007756:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800775a:	2100      	movcs	r1, #0
 800775c:	3015      	adds	r0, #21
 800775e:	fa04 f000 	lsl.w	r0, r4, r0
 8007762:	fa21 f10e 	lsr.w	r1, r1, lr
 8007766:	ea40 0201 	orr.w	r2, r0, r1
 800776a:	ec43 2b10 	vmov	d0, r2, r3
 800776e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007770:	42b7      	cmp	r7, r6
 8007772:	bf3a      	itte	cc
 8007774:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007778:	f1a5 0608 	subcc.w	r6, r5, #8
 800777c:	2100      	movcs	r1, #0
 800777e:	380b      	subs	r0, #11
 8007780:	d017      	beq.n	80077b2 <__b2d+0x92>
 8007782:	f1c0 0c20 	rsb	ip, r0, #32
 8007786:	fa04 f500 	lsl.w	r5, r4, r0
 800778a:	42be      	cmp	r6, r7
 800778c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007790:	ea45 0504 	orr.w	r5, r5, r4
 8007794:	bf8c      	ite	hi
 8007796:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800779a:	2400      	movls	r4, #0
 800779c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80077a0:	fa01 f000 	lsl.w	r0, r1, r0
 80077a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80077a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80077ac:	ea40 0204 	orr.w	r2, r0, r4
 80077b0:	e7db      	b.n	800776a <__b2d+0x4a>
 80077b2:	ea44 030c 	orr.w	r3, r4, ip
 80077b6:	460a      	mov	r2, r1
 80077b8:	e7d7      	b.n	800776a <__b2d+0x4a>
 80077ba:	bf00      	nop
 80077bc:	3ff00000 	.word	0x3ff00000

080077c0 <__d2b>:
 80077c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077c4:	4689      	mov	r9, r1
 80077c6:	2101      	movs	r1, #1
 80077c8:	ec57 6b10 	vmov	r6, r7, d0
 80077cc:	4690      	mov	r8, r2
 80077ce:	f7ff fc09 	bl	8006fe4 <_Balloc>
 80077d2:	4604      	mov	r4, r0
 80077d4:	b930      	cbnz	r0, 80077e4 <__d2b+0x24>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b25      	ldr	r3, [pc, #148]	; (8007870 <__d2b+0xb0>)
 80077da:	4826      	ldr	r0, [pc, #152]	; (8007874 <__d2b+0xb4>)
 80077dc:	f240 310a 	movw	r1, #778	; 0x30a
 80077e0:	f000 fb4c 	bl	8007e7c <__assert_func>
 80077e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077ec:	bb35      	cbnz	r5, 800783c <__d2b+0x7c>
 80077ee:	2e00      	cmp	r6, #0
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	d028      	beq.n	8007846 <__d2b+0x86>
 80077f4:	4668      	mov	r0, sp
 80077f6:	9600      	str	r6, [sp, #0]
 80077f8:	f7ff fd06 	bl	8007208 <__lo0bits>
 80077fc:	9900      	ldr	r1, [sp, #0]
 80077fe:	b300      	cbz	r0, 8007842 <__d2b+0x82>
 8007800:	9a01      	ldr	r2, [sp, #4]
 8007802:	f1c0 0320 	rsb	r3, r0, #32
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	430b      	orrs	r3, r1
 800780c:	40c2      	lsrs	r2, r0
 800780e:	6163      	str	r3, [r4, #20]
 8007810:	9201      	str	r2, [sp, #4]
 8007812:	9b01      	ldr	r3, [sp, #4]
 8007814:	61a3      	str	r3, [r4, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	bf14      	ite	ne
 800781a:	2202      	movne	r2, #2
 800781c:	2201      	moveq	r2, #1
 800781e:	6122      	str	r2, [r4, #16]
 8007820:	b1d5      	cbz	r5, 8007858 <__d2b+0x98>
 8007822:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007826:	4405      	add	r5, r0
 8007828:	f8c9 5000 	str.w	r5, [r9]
 800782c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007830:	f8c8 0000 	str.w	r0, [r8]
 8007834:	4620      	mov	r0, r4
 8007836:	b003      	add	sp, #12
 8007838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800783c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007840:	e7d5      	b.n	80077ee <__d2b+0x2e>
 8007842:	6161      	str	r1, [r4, #20]
 8007844:	e7e5      	b.n	8007812 <__d2b+0x52>
 8007846:	a801      	add	r0, sp, #4
 8007848:	f7ff fcde 	bl	8007208 <__lo0bits>
 800784c:	9b01      	ldr	r3, [sp, #4]
 800784e:	6163      	str	r3, [r4, #20]
 8007850:	2201      	movs	r2, #1
 8007852:	6122      	str	r2, [r4, #16]
 8007854:	3020      	adds	r0, #32
 8007856:	e7e3      	b.n	8007820 <__d2b+0x60>
 8007858:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800785c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007860:	f8c9 0000 	str.w	r0, [r9]
 8007864:	6918      	ldr	r0, [r3, #16]
 8007866:	f7ff fcaf 	bl	80071c8 <__hi0bits>
 800786a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800786e:	e7df      	b.n	8007830 <__d2b+0x70>
 8007870:	08008c88 	.word	0x08008c88
 8007874:	08008d14 	.word	0x08008d14

08007878 <__ratio>:
 8007878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	4688      	mov	r8, r1
 800787e:	4669      	mov	r1, sp
 8007880:	4681      	mov	r9, r0
 8007882:	f7ff ff4d 	bl	8007720 <__b2d>
 8007886:	a901      	add	r1, sp, #4
 8007888:	4640      	mov	r0, r8
 800788a:	ec55 4b10 	vmov	r4, r5, d0
 800788e:	ee10 aa10 	vmov	sl, s0
 8007892:	f7ff ff45 	bl	8007720 <__b2d>
 8007896:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800789a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800789e:	1a59      	subs	r1, r3, r1
 80078a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80078aa:	ec57 6b10 	vmov	r6, r7, d0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bfd6      	itet	le
 80078b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078b6:	462a      	movgt	r2, r5
 80078b8:	463a      	movle	r2, r7
 80078ba:	46ab      	mov	fp, r5
 80078bc:	bfd6      	itet	le
 80078be:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80078c2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80078c6:	ee00 3a90 	vmovle	s1, r3
 80078ca:	ec4b ab17 	vmov	d7, sl, fp
 80078ce:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80078d2:	b003      	add	sp, #12
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078d8 <__copybits>:
 80078d8:	3901      	subs	r1, #1
 80078da:	b570      	push	{r4, r5, r6, lr}
 80078dc:	1149      	asrs	r1, r1, #5
 80078de:	6914      	ldr	r4, [r2, #16]
 80078e0:	3101      	adds	r1, #1
 80078e2:	f102 0314 	add.w	r3, r2, #20
 80078e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078ee:	1f05      	subs	r5, r0, #4
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	d30c      	bcc.n	800790e <__copybits+0x36>
 80078f4:	1aa3      	subs	r3, r4, r2
 80078f6:	3b11      	subs	r3, #17
 80078f8:	f023 0303 	bic.w	r3, r3, #3
 80078fc:	3211      	adds	r2, #17
 80078fe:	42a2      	cmp	r2, r4
 8007900:	bf88      	it	hi
 8007902:	2300      	movhi	r3, #0
 8007904:	4418      	add	r0, r3
 8007906:	2300      	movs	r3, #0
 8007908:	4288      	cmp	r0, r1
 800790a:	d305      	bcc.n	8007918 <__copybits+0x40>
 800790c:	bd70      	pop	{r4, r5, r6, pc}
 800790e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007912:	f845 6f04 	str.w	r6, [r5, #4]!
 8007916:	e7eb      	b.n	80078f0 <__copybits+0x18>
 8007918:	f840 3b04 	str.w	r3, [r0], #4
 800791c:	e7f4      	b.n	8007908 <__copybits+0x30>

0800791e <__any_on>:
 800791e:	f100 0214 	add.w	r2, r0, #20
 8007922:	6900      	ldr	r0, [r0, #16]
 8007924:	114b      	asrs	r3, r1, #5
 8007926:	4298      	cmp	r0, r3
 8007928:	b510      	push	{r4, lr}
 800792a:	db11      	blt.n	8007950 <__any_on+0x32>
 800792c:	dd0a      	ble.n	8007944 <__any_on+0x26>
 800792e:	f011 011f 	ands.w	r1, r1, #31
 8007932:	d007      	beq.n	8007944 <__any_on+0x26>
 8007934:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007938:	fa24 f001 	lsr.w	r0, r4, r1
 800793c:	fa00 f101 	lsl.w	r1, r0, r1
 8007940:	428c      	cmp	r4, r1
 8007942:	d10b      	bne.n	800795c <__any_on+0x3e>
 8007944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007948:	4293      	cmp	r3, r2
 800794a:	d803      	bhi.n	8007954 <__any_on+0x36>
 800794c:	2000      	movs	r0, #0
 800794e:	bd10      	pop	{r4, pc}
 8007950:	4603      	mov	r3, r0
 8007952:	e7f7      	b.n	8007944 <__any_on+0x26>
 8007954:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007958:	2900      	cmp	r1, #0
 800795a:	d0f5      	beq.n	8007948 <__any_on+0x2a>
 800795c:	2001      	movs	r0, #1
 800795e:	e7f6      	b.n	800794e <__any_on+0x30>

08007960 <_calloc_r>:
 8007960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007962:	fba1 2402 	umull	r2, r4, r1, r2
 8007966:	b94c      	cbnz	r4, 800797c <_calloc_r+0x1c>
 8007968:	4611      	mov	r1, r2
 800796a:	9201      	str	r2, [sp, #4]
 800796c:	f000 f87a 	bl	8007a64 <_malloc_r>
 8007970:	9a01      	ldr	r2, [sp, #4]
 8007972:	4605      	mov	r5, r0
 8007974:	b930      	cbnz	r0, 8007984 <_calloc_r+0x24>
 8007976:	4628      	mov	r0, r5
 8007978:	b003      	add	sp, #12
 800797a:	bd30      	pop	{r4, r5, pc}
 800797c:	220c      	movs	r2, #12
 800797e:	6002      	str	r2, [r0, #0]
 8007980:	2500      	movs	r5, #0
 8007982:	e7f8      	b.n	8007976 <_calloc_r+0x16>
 8007984:	4621      	mov	r1, r4
 8007986:	f7fc fcc7 	bl	8004318 <memset>
 800798a:	e7f4      	b.n	8007976 <_calloc_r+0x16>

0800798c <_free_r>:
 800798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798e:	2900      	cmp	r1, #0
 8007990:	d044      	beq.n	8007a1c <_free_r+0x90>
 8007992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007996:	9001      	str	r0, [sp, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f1a1 0404 	sub.w	r4, r1, #4
 800799e:	bfb8      	it	lt
 80079a0:	18e4      	addlt	r4, r4, r3
 80079a2:	f000 fab5 	bl	8007f10 <__malloc_lock>
 80079a6:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <_free_r+0x94>)
 80079a8:	9801      	ldr	r0, [sp, #4]
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	b933      	cbnz	r3, 80079bc <_free_r+0x30>
 80079ae:	6063      	str	r3, [r4, #4]
 80079b0:	6014      	str	r4, [r2, #0]
 80079b2:	b003      	add	sp, #12
 80079b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079b8:	f000 bab0 	b.w	8007f1c <__malloc_unlock>
 80079bc:	42a3      	cmp	r3, r4
 80079be:	d908      	bls.n	80079d2 <_free_r+0x46>
 80079c0:	6825      	ldr	r5, [r4, #0]
 80079c2:	1961      	adds	r1, r4, r5
 80079c4:	428b      	cmp	r3, r1
 80079c6:	bf01      	itttt	eq
 80079c8:	6819      	ldreq	r1, [r3, #0]
 80079ca:	685b      	ldreq	r3, [r3, #4]
 80079cc:	1949      	addeq	r1, r1, r5
 80079ce:	6021      	streq	r1, [r4, #0]
 80079d0:	e7ed      	b.n	80079ae <_free_r+0x22>
 80079d2:	461a      	mov	r2, r3
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	b10b      	cbz	r3, 80079dc <_free_r+0x50>
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d9fa      	bls.n	80079d2 <_free_r+0x46>
 80079dc:	6811      	ldr	r1, [r2, #0]
 80079de:	1855      	adds	r5, r2, r1
 80079e0:	42a5      	cmp	r5, r4
 80079e2:	d10b      	bne.n	80079fc <_free_r+0x70>
 80079e4:	6824      	ldr	r4, [r4, #0]
 80079e6:	4421      	add	r1, r4
 80079e8:	1854      	adds	r4, r2, r1
 80079ea:	42a3      	cmp	r3, r4
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	d1e0      	bne.n	80079b2 <_free_r+0x26>
 80079f0:	681c      	ldr	r4, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	6053      	str	r3, [r2, #4]
 80079f6:	4421      	add	r1, r4
 80079f8:	6011      	str	r1, [r2, #0]
 80079fa:	e7da      	b.n	80079b2 <_free_r+0x26>
 80079fc:	d902      	bls.n	8007a04 <_free_r+0x78>
 80079fe:	230c      	movs	r3, #12
 8007a00:	6003      	str	r3, [r0, #0]
 8007a02:	e7d6      	b.n	80079b2 <_free_r+0x26>
 8007a04:	6825      	ldr	r5, [r4, #0]
 8007a06:	1961      	adds	r1, r4, r5
 8007a08:	428b      	cmp	r3, r1
 8007a0a:	bf04      	itt	eq
 8007a0c:	6819      	ldreq	r1, [r3, #0]
 8007a0e:	685b      	ldreq	r3, [r3, #4]
 8007a10:	6063      	str	r3, [r4, #4]
 8007a12:	bf04      	itt	eq
 8007a14:	1949      	addeq	r1, r1, r5
 8007a16:	6021      	streq	r1, [r4, #0]
 8007a18:	6054      	str	r4, [r2, #4]
 8007a1a:	e7ca      	b.n	80079b2 <_free_r+0x26>
 8007a1c:	b003      	add	sp, #12
 8007a1e:	bd30      	pop	{r4, r5, pc}
 8007a20:	20000314 	.word	0x20000314

08007a24 <sbrk_aligned>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4e0e      	ldr	r6, [pc, #56]	; (8007a60 <sbrk_aligned+0x3c>)
 8007a28:	460c      	mov	r4, r1
 8007a2a:	6831      	ldr	r1, [r6, #0]
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	b911      	cbnz	r1, 8007a36 <sbrk_aligned+0x12>
 8007a30:	f000 f9f2 	bl	8007e18 <_sbrk_r>
 8007a34:	6030      	str	r0, [r6, #0]
 8007a36:	4621      	mov	r1, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 f9ed 	bl	8007e18 <_sbrk_r>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	d00a      	beq.n	8007a58 <sbrk_aligned+0x34>
 8007a42:	1cc4      	adds	r4, r0, #3
 8007a44:	f024 0403 	bic.w	r4, r4, #3
 8007a48:	42a0      	cmp	r0, r4
 8007a4a:	d007      	beq.n	8007a5c <sbrk_aligned+0x38>
 8007a4c:	1a21      	subs	r1, r4, r0
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 f9e2 	bl	8007e18 <_sbrk_r>
 8007a54:	3001      	adds	r0, #1
 8007a56:	d101      	bne.n	8007a5c <sbrk_aligned+0x38>
 8007a58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	20000318 	.word	0x20000318

08007a64 <_malloc_r>:
 8007a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a68:	1ccd      	adds	r5, r1, #3
 8007a6a:	f025 0503 	bic.w	r5, r5, #3
 8007a6e:	3508      	adds	r5, #8
 8007a70:	2d0c      	cmp	r5, #12
 8007a72:	bf38      	it	cc
 8007a74:	250c      	movcc	r5, #12
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	4607      	mov	r7, r0
 8007a7a:	db01      	blt.n	8007a80 <_malloc_r+0x1c>
 8007a7c:	42a9      	cmp	r1, r5
 8007a7e:	d905      	bls.n	8007a8c <_malloc_r+0x28>
 8007a80:	230c      	movs	r3, #12
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	2600      	movs	r6, #0
 8007a86:	4630      	mov	r0, r6
 8007a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a8c:	4e2e      	ldr	r6, [pc, #184]	; (8007b48 <_malloc_r+0xe4>)
 8007a8e:	f000 fa3f 	bl	8007f10 <__malloc_lock>
 8007a92:	6833      	ldr	r3, [r6, #0]
 8007a94:	461c      	mov	r4, r3
 8007a96:	bb34      	cbnz	r4, 8007ae6 <_malloc_r+0x82>
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f7ff ffc2 	bl	8007a24 <sbrk_aligned>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	d14d      	bne.n	8007b42 <_malloc_r+0xde>
 8007aa6:	6834      	ldr	r4, [r6, #0]
 8007aa8:	4626      	mov	r6, r4
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	d140      	bne.n	8007b30 <_malloc_r+0xcc>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	eb04 0803 	add.w	r8, r4, r3
 8007ab8:	f000 f9ae 	bl	8007e18 <_sbrk_r>
 8007abc:	4580      	cmp	r8, r0
 8007abe:	d13a      	bne.n	8007b36 <_malloc_r+0xd2>
 8007ac0:	6821      	ldr	r1, [r4, #0]
 8007ac2:	3503      	adds	r5, #3
 8007ac4:	1a6d      	subs	r5, r5, r1
 8007ac6:	f025 0503 	bic.w	r5, r5, #3
 8007aca:	3508      	adds	r5, #8
 8007acc:	2d0c      	cmp	r5, #12
 8007ace:	bf38      	it	cc
 8007ad0:	250c      	movcc	r5, #12
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f7ff ffa5 	bl	8007a24 <sbrk_aligned>
 8007ada:	3001      	adds	r0, #1
 8007adc:	d02b      	beq.n	8007b36 <_malloc_r+0xd2>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	442b      	add	r3, r5
 8007ae2:	6023      	str	r3, [r4, #0]
 8007ae4:	e00e      	b.n	8007b04 <_malloc_r+0xa0>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	1b52      	subs	r2, r2, r5
 8007aea:	d41e      	bmi.n	8007b2a <_malloc_r+0xc6>
 8007aec:	2a0b      	cmp	r2, #11
 8007aee:	d916      	bls.n	8007b1e <_malloc_r+0xba>
 8007af0:	1961      	adds	r1, r4, r5
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	6025      	str	r5, [r4, #0]
 8007af6:	bf18      	it	ne
 8007af8:	6059      	strne	r1, [r3, #4]
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	bf08      	it	eq
 8007afe:	6031      	streq	r1, [r6, #0]
 8007b00:	5162      	str	r2, [r4, r5]
 8007b02:	604b      	str	r3, [r1, #4]
 8007b04:	4638      	mov	r0, r7
 8007b06:	f104 060b 	add.w	r6, r4, #11
 8007b0a:	f000 fa07 	bl	8007f1c <__malloc_unlock>
 8007b0e:	f026 0607 	bic.w	r6, r6, #7
 8007b12:	1d23      	adds	r3, r4, #4
 8007b14:	1af2      	subs	r2, r6, r3
 8007b16:	d0b6      	beq.n	8007a86 <_malloc_r+0x22>
 8007b18:	1b9b      	subs	r3, r3, r6
 8007b1a:	50a3      	str	r3, [r4, r2]
 8007b1c:	e7b3      	b.n	8007a86 <_malloc_r+0x22>
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	bf0c      	ite	eq
 8007b24:	6032      	streq	r2, [r6, #0]
 8007b26:	605a      	strne	r2, [r3, #4]
 8007b28:	e7ec      	b.n	8007b04 <_malloc_r+0xa0>
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	6864      	ldr	r4, [r4, #4]
 8007b2e:	e7b2      	b.n	8007a96 <_malloc_r+0x32>
 8007b30:	4634      	mov	r4, r6
 8007b32:	6876      	ldr	r6, [r6, #4]
 8007b34:	e7b9      	b.n	8007aaa <_malloc_r+0x46>
 8007b36:	230c      	movs	r3, #12
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f000 f9ee 	bl	8007f1c <__malloc_unlock>
 8007b40:	e7a1      	b.n	8007a86 <_malloc_r+0x22>
 8007b42:	6025      	str	r5, [r4, #0]
 8007b44:	e7de      	b.n	8007b04 <_malloc_r+0xa0>
 8007b46:	bf00      	nop
 8007b48:	20000314 	.word	0x20000314

08007b4c <__ssputs_r>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	688e      	ldr	r6, [r1, #8]
 8007b52:	429e      	cmp	r6, r3
 8007b54:	4682      	mov	sl, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4690      	mov	r8, r2
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	d838      	bhi.n	8007bd0 <__ssputs_r+0x84>
 8007b5e:	898a      	ldrh	r2, [r1, #12]
 8007b60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b64:	d032      	beq.n	8007bcc <__ssputs_r+0x80>
 8007b66:	6825      	ldr	r5, [r4, #0]
 8007b68:	6909      	ldr	r1, [r1, #16]
 8007b6a:	eba5 0901 	sub.w	r9, r5, r1
 8007b6e:	6965      	ldr	r5, [r4, #20]
 8007b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b78:	3301      	adds	r3, #1
 8007b7a:	444b      	add	r3, r9
 8007b7c:	106d      	asrs	r5, r5, #1
 8007b7e:	429d      	cmp	r5, r3
 8007b80:	bf38      	it	cc
 8007b82:	461d      	movcc	r5, r3
 8007b84:	0553      	lsls	r3, r2, #21
 8007b86:	d531      	bpl.n	8007bec <__ssputs_r+0xa0>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7ff ff6b 	bl	8007a64 <_malloc_r>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	b950      	cbnz	r0, 8007ba8 <__ssputs_r+0x5c>
 8007b92:	230c      	movs	r3, #12
 8007b94:	f8ca 3000 	str.w	r3, [sl]
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	6921      	ldr	r1, [r4, #16]
 8007baa:	464a      	mov	r2, r9
 8007bac:	f7ff fa0c 	bl	8006fc8 <memcpy>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	6126      	str	r6, [r4, #16]
 8007bbe:	6165      	str	r5, [r4, #20]
 8007bc0:	444e      	add	r6, r9
 8007bc2:	eba5 0509 	sub.w	r5, r5, r9
 8007bc6:	6026      	str	r6, [r4, #0]
 8007bc8:	60a5      	str	r5, [r4, #8]
 8007bca:	463e      	mov	r6, r7
 8007bcc:	42be      	cmp	r6, r7
 8007bce:	d900      	bls.n	8007bd2 <__ssputs_r+0x86>
 8007bd0:	463e      	mov	r6, r7
 8007bd2:	6820      	ldr	r0, [r4, #0]
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	4641      	mov	r1, r8
 8007bd8:	f000 f980 	bl	8007edc <memmove>
 8007bdc:	68a3      	ldr	r3, [r4, #8]
 8007bde:	1b9b      	subs	r3, r3, r6
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	4433      	add	r3, r6
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	2000      	movs	r0, #0
 8007bea:	e7db      	b.n	8007ba4 <__ssputs_r+0x58>
 8007bec:	462a      	mov	r2, r5
 8007bee:	f000 f99b 	bl	8007f28 <_realloc_r>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d1e1      	bne.n	8007bbc <__ssputs_r+0x70>
 8007bf8:	6921      	ldr	r1, [r4, #16]
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	f7ff fec6 	bl	800798c <_free_r>
 8007c00:	e7c7      	b.n	8007b92 <__ssputs_r+0x46>
	...

08007c04 <_svfiprintf_r>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	4698      	mov	r8, r3
 8007c0a:	898b      	ldrh	r3, [r1, #12]
 8007c0c:	061b      	lsls	r3, r3, #24
 8007c0e:	b09d      	sub	sp, #116	; 0x74
 8007c10:	4607      	mov	r7, r0
 8007c12:	460d      	mov	r5, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	d50e      	bpl.n	8007c36 <_svfiprintf_r+0x32>
 8007c18:	690b      	ldr	r3, [r1, #16]
 8007c1a:	b963      	cbnz	r3, 8007c36 <_svfiprintf_r+0x32>
 8007c1c:	2140      	movs	r1, #64	; 0x40
 8007c1e:	f7ff ff21 	bl	8007a64 <_malloc_r>
 8007c22:	6028      	str	r0, [r5, #0]
 8007c24:	6128      	str	r0, [r5, #16]
 8007c26:	b920      	cbnz	r0, 8007c32 <_svfiprintf_r+0x2e>
 8007c28:	230c      	movs	r3, #12
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c30:	e0d1      	b.n	8007dd6 <_svfiprintf_r+0x1d2>
 8007c32:	2340      	movs	r3, #64	; 0x40
 8007c34:	616b      	str	r3, [r5, #20]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3a:	2320      	movs	r3, #32
 8007c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c44:	2330      	movs	r3, #48	; 0x30
 8007c46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007df0 <_svfiprintf_r+0x1ec>
 8007c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4e:	f04f 0901 	mov.w	r9, #1
 8007c52:	4623      	mov	r3, r4
 8007c54:	469a      	mov	sl, r3
 8007c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5a:	b10a      	cbz	r2, 8007c60 <_svfiprintf_r+0x5c>
 8007c5c:	2a25      	cmp	r2, #37	; 0x25
 8007c5e:	d1f9      	bne.n	8007c54 <_svfiprintf_r+0x50>
 8007c60:	ebba 0b04 	subs.w	fp, sl, r4
 8007c64:	d00b      	beq.n	8007c7e <_svfiprintf_r+0x7a>
 8007c66:	465b      	mov	r3, fp
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f7ff ff6d 	bl	8007b4c <__ssputs_r>
 8007c72:	3001      	adds	r0, #1
 8007c74:	f000 80aa 	beq.w	8007dcc <_svfiprintf_r+0x1c8>
 8007c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7a:	445a      	add	r2, fp
 8007c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80a2 	beq.w	8007dcc <_svfiprintf_r+0x1c8>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c92:	f10a 0a01 	add.w	sl, sl, #1
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	9307      	str	r3, [sp, #28]
 8007c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca0:	4654      	mov	r4, sl
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca8:	4851      	ldr	r0, [pc, #324]	; (8007df0 <_svfiprintf_r+0x1ec>)
 8007caa:	f7f8 fad1 	bl	8000250 <memchr>
 8007cae:	9a04      	ldr	r2, [sp, #16]
 8007cb0:	b9d8      	cbnz	r0, 8007cea <_svfiprintf_r+0xe6>
 8007cb2:	06d0      	lsls	r0, r2, #27
 8007cb4:	bf44      	itt	mi
 8007cb6:	2320      	movmi	r3, #32
 8007cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cbc:	0711      	lsls	r1, r2, #28
 8007cbe:	bf44      	itt	mi
 8007cc0:	232b      	movmi	r3, #43	; 0x2b
 8007cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cca:	2b2a      	cmp	r3, #42	; 0x2a
 8007ccc:	d015      	beq.n	8007cfa <_svfiprintf_r+0xf6>
 8007cce:	9a07      	ldr	r2, [sp, #28]
 8007cd0:	4654      	mov	r4, sl
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	f04f 0c0a 	mov.w	ip, #10
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cde:	3b30      	subs	r3, #48	; 0x30
 8007ce0:	2b09      	cmp	r3, #9
 8007ce2:	d94e      	bls.n	8007d82 <_svfiprintf_r+0x17e>
 8007ce4:	b1b0      	cbz	r0, 8007d14 <_svfiprintf_r+0x110>
 8007ce6:	9207      	str	r2, [sp, #28]
 8007ce8:	e014      	b.n	8007d14 <_svfiprintf_r+0x110>
 8007cea:	eba0 0308 	sub.w	r3, r0, r8
 8007cee:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	46a2      	mov	sl, r4
 8007cf8:	e7d2      	b.n	8007ca0 <_svfiprintf_r+0x9c>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	1d19      	adds	r1, r3, #4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	9103      	str	r1, [sp, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfbb      	ittet	lt
 8007d06:	425b      	neglt	r3, r3
 8007d08:	f042 0202 	orrlt.w	r2, r2, #2
 8007d0c:	9307      	strge	r3, [sp, #28]
 8007d0e:	9307      	strlt	r3, [sp, #28]
 8007d10:	bfb8      	it	lt
 8007d12:	9204      	strlt	r2, [sp, #16]
 8007d14:	7823      	ldrb	r3, [r4, #0]
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	d10c      	bne.n	8007d34 <_svfiprintf_r+0x130>
 8007d1a:	7863      	ldrb	r3, [r4, #1]
 8007d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1e:	d135      	bne.n	8007d8c <_svfiprintf_r+0x188>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	1d1a      	adds	r2, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	9203      	str	r2, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfb8      	it	lt
 8007d2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d30:	3402      	adds	r4, #2
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e00 <_svfiprintf_r+0x1fc>
 8007d38:	7821      	ldrb	r1, [r4, #0]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	f7f8 fa87 	bl	8000250 <memchr>
 8007d42:	b140      	cbz	r0, 8007d56 <_svfiprintf_r+0x152>
 8007d44:	2340      	movs	r3, #64	; 0x40
 8007d46:	eba0 000a 	sub.w	r0, r0, sl
 8007d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	4303      	orrs	r3, r0
 8007d52:	3401      	adds	r4, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5a:	4826      	ldr	r0, [pc, #152]	; (8007df4 <_svfiprintf_r+0x1f0>)
 8007d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d60:	2206      	movs	r2, #6
 8007d62:	f7f8 fa75 	bl	8000250 <memchr>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d038      	beq.n	8007ddc <_svfiprintf_r+0x1d8>
 8007d6a:	4b23      	ldr	r3, [pc, #140]	; (8007df8 <_svfiprintf_r+0x1f4>)
 8007d6c:	bb1b      	cbnz	r3, 8007db6 <_svfiprintf_r+0x1b2>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	3307      	adds	r3, #7
 8007d72:	f023 0307 	bic.w	r3, r3, #7
 8007d76:	3308      	adds	r3, #8
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7c:	4433      	add	r3, r6
 8007d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d80:	e767      	b.n	8007c52 <_svfiprintf_r+0x4e>
 8007d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d86:	460c      	mov	r4, r1
 8007d88:	2001      	movs	r0, #1
 8007d8a:	e7a5      	b.n	8007cd8 <_svfiprintf_r+0xd4>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	3401      	adds	r4, #1
 8007d90:	9305      	str	r3, [sp, #20]
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 0c0a 	mov.w	ip, #10
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9e:	3a30      	subs	r2, #48	; 0x30
 8007da0:	2a09      	cmp	r2, #9
 8007da2:	d903      	bls.n	8007dac <_svfiprintf_r+0x1a8>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0c5      	beq.n	8007d34 <_svfiprintf_r+0x130>
 8007da8:	9105      	str	r1, [sp, #20]
 8007daa:	e7c3      	b.n	8007d34 <_svfiprintf_r+0x130>
 8007dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db0:	4604      	mov	r4, r0
 8007db2:	2301      	movs	r3, #1
 8007db4:	e7f0      	b.n	8007d98 <_svfiprintf_r+0x194>
 8007db6:	ab03      	add	r3, sp, #12
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	462a      	mov	r2, r5
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <_svfiprintf_r+0x1f8>)
 8007dbe:	a904      	add	r1, sp, #16
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7fc fb41 	bl	8004448 <_printf_float>
 8007dc6:	1c42      	adds	r2, r0, #1
 8007dc8:	4606      	mov	r6, r0
 8007dca:	d1d6      	bne.n	8007d7a <_svfiprintf_r+0x176>
 8007dcc:	89ab      	ldrh	r3, [r5, #12]
 8007dce:	065b      	lsls	r3, r3, #25
 8007dd0:	f53f af2c 	bmi.w	8007c2c <_svfiprintf_r+0x28>
 8007dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd6:	b01d      	add	sp, #116	; 0x74
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	ab03      	add	r3, sp, #12
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	462a      	mov	r2, r5
 8007de2:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <_svfiprintf_r+0x1f8>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	4638      	mov	r0, r7
 8007de8:	f7fc fdba 	bl	8004960 <_printf_i>
 8007dec:	e7eb      	b.n	8007dc6 <_svfiprintf_r+0x1c2>
 8007dee:	bf00      	nop
 8007df0:	08008e6c 	.word	0x08008e6c
 8007df4:	08008e76 	.word	0x08008e76
 8007df8:	08004449 	.word	0x08004449
 8007dfc:	08007b4d 	.word	0x08007b4d
 8007e00:	08008e72 	.word	0x08008e72
 8007e04:	00000000 	.word	0x00000000

08007e08 <nan>:
 8007e08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007e10 <nan+0x8>
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	00000000 	.word	0x00000000
 8007e14:	7ff80000 	.word	0x7ff80000

08007e18 <_sbrk_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d06      	ldr	r5, [pc, #24]	; (8007e34 <_sbrk_r+0x1c>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	f7f9 fb4c 	bl	80014c0 <_sbrk>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_sbrk_r+0x1a>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_sbrk_r+0x1a>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	2000031c 	.word	0x2000031c

08007e38 <strncmp>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	b17a      	cbz	r2, 8007e5c <strncmp+0x24>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	3901      	subs	r1, #1
 8007e40:	1884      	adds	r4, r0, r2
 8007e42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e4a:	4290      	cmp	r0, r2
 8007e4c:	d101      	bne.n	8007e52 <strncmp+0x1a>
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	d101      	bne.n	8007e56 <strncmp+0x1e>
 8007e52:	1a80      	subs	r0, r0, r2
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d1f3      	bne.n	8007e42 <strncmp+0xa>
 8007e5a:	e7fa      	b.n	8007e52 <strncmp+0x1a>
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	e7f9      	b.n	8007e54 <strncmp+0x1c>

08007e60 <__ascii_wctomb>:
 8007e60:	b149      	cbz	r1, 8007e76 <__ascii_wctomb+0x16>
 8007e62:	2aff      	cmp	r2, #255	; 0xff
 8007e64:	bf85      	ittet	hi
 8007e66:	238a      	movhi	r3, #138	; 0x8a
 8007e68:	6003      	strhi	r3, [r0, #0]
 8007e6a:	700a      	strbls	r2, [r1, #0]
 8007e6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007e70:	bf98      	it	ls
 8007e72:	2001      	movls	r0, #1
 8007e74:	4770      	bx	lr
 8007e76:	4608      	mov	r0, r1
 8007e78:	4770      	bx	lr
	...

08007e7c <__assert_func>:
 8007e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e7e:	4614      	mov	r4, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <__assert_func+0x2c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4605      	mov	r5, r0
 8007e88:	68d8      	ldr	r0, [r3, #12]
 8007e8a:	b14c      	cbz	r4, 8007ea0 <__assert_func+0x24>
 8007e8c:	4b07      	ldr	r3, [pc, #28]	; (8007eac <__assert_func+0x30>)
 8007e8e:	9100      	str	r1, [sp, #0]
 8007e90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e94:	4906      	ldr	r1, [pc, #24]	; (8007eb0 <__assert_func+0x34>)
 8007e96:	462b      	mov	r3, r5
 8007e98:	f000 f80e 	bl	8007eb8 <fiprintf>
 8007e9c:	f000 fa8c 	bl	80083b8 <abort>
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <__assert_func+0x38>)
 8007ea2:	461c      	mov	r4, r3
 8007ea4:	e7f3      	b.n	8007e8e <__assert_func+0x12>
 8007ea6:	bf00      	nop
 8007ea8:	2000000c 	.word	0x2000000c
 8007eac:	08008e7d 	.word	0x08008e7d
 8007eb0:	08008e8a 	.word	0x08008e8a
 8007eb4:	08008eb8 	.word	0x08008eb8

08007eb8 <fiprintf>:
 8007eb8:	b40e      	push	{r1, r2, r3}
 8007eba:	b503      	push	{r0, r1, lr}
 8007ebc:	4601      	mov	r1, r0
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <fiprintf+0x20>)
 8007ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec6:	6800      	ldr	r0, [r0, #0]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	f000 f885 	bl	8007fd8 <_vfiprintf_r>
 8007ece:	b002      	add	sp, #8
 8007ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed4:	b003      	add	sp, #12
 8007ed6:	4770      	bx	lr
 8007ed8:	2000000c 	.word	0x2000000c

08007edc <memmove>:
 8007edc:	4288      	cmp	r0, r1
 8007ede:	b510      	push	{r4, lr}
 8007ee0:	eb01 0402 	add.w	r4, r1, r2
 8007ee4:	d902      	bls.n	8007eec <memmove+0x10>
 8007ee6:	4284      	cmp	r4, r0
 8007ee8:	4623      	mov	r3, r4
 8007eea:	d807      	bhi.n	8007efc <memmove+0x20>
 8007eec:	1e43      	subs	r3, r0, #1
 8007eee:	42a1      	cmp	r1, r4
 8007ef0:	d008      	beq.n	8007f04 <memmove+0x28>
 8007ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007efa:	e7f8      	b.n	8007eee <memmove+0x12>
 8007efc:	4402      	add	r2, r0
 8007efe:	4601      	mov	r1, r0
 8007f00:	428a      	cmp	r2, r1
 8007f02:	d100      	bne.n	8007f06 <memmove+0x2a>
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f0e:	e7f7      	b.n	8007f00 <memmove+0x24>

08007f10 <__malloc_lock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__malloc_lock+0x8>)
 8007f12:	f000 bc11 	b.w	8008738 <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20000320 	.word	0x20000320

08007f1c <__malloc_unlock>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__malloc_unlock+0x8>)
 8007f1e:	f000 bc0c 	b.w	800873a <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20000320 	.word	0x20000320

08007f28 <_realloc_r>:
 8007f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	4614      	mov	r4, r2
 8007f30:	460e      	mov	r6, r1
 8007f32:	b921      	cbnz	r1, 8007f3e <_realloc_r+0x16>
 8007f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f38:	4611      	mov	r1, r2
 8007f3a:	f7ff bd93 	b.w	8007a64 <_malloc_r>
 8007f3e:	b92a      	cbnz	r2, 8007f4c <_realloc_r+0x24>
 8007f40:	f7ff fd24 	bl	800798c <_free_r>
 8007f44:	4625      	mov	r5, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	f000 fc5c 	bl	8008808 <_malloc_usable_size_r>
 8007f50:	4284      	cmp	r4, r0
 8007f52:	4607      	mov	r7, r0
 8007f54:	d802      	bhi.n	8007f5c <_realloc_r+0x34>
 8007f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f5a:	d812      	bhi.n	8007f82 <_realloc_r+0x5a>
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4640      	mov	r0, r8
 8007f60:	f7ff fd80 	bl	8007a64 <_malloc_r>
 8007f64:	4605      	mov	r5, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d0ed      	beq.n	8007f46 <_realloc_r+0x1e>
 8007f6a:	42bc      	cmp	r4, r7
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4631      	mov	r1, r6
 8007f70:	bf28      	it	cs
 8007f72:	463a      	movcs	r2, r7
 8007f74:	f7ff f828 	bl	8006fc8 <memcpy>
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f7ff fd06 	bl	800798c <_free_r>
 8007f80:	e7e1      	b.n	8007f46 <_realloc_r+0x1e>
 8007f82:	4635      	mov	r5, r6
 8007f84:	e7df      	b.n	8007f46 <_realloc_r+0x1e>

08007f86 <__sfputc_r>:
 8007f86:	6893      	ldr	r3, [r2, #8]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	b410      	push	{r4}
 8007f8e:	6093      	str	r3, [r2, #8]
 8007f90:	da08      	bge.n	8007fa4 <__sfputc_r+0x1e>
 8007f92:	6994      	ldr	r4, [r2, #24]
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	db01      	blt.n	8007f9c <__sfputc_r+0x16>
 8007f98:	290a      	cmp	r1, #10
 8007f9a:	d103      	bne.n	8007fa4 <__sfputc_r+0x1e>
 8007f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa0:	f000 b94a 	b.w	8008238 <__swbuf_r>
 8007fa4:	6813      	ldr	r3, [r2, #0]
 8007fa6:	1c58      	adds	r0, r3, #1
 8007fa8:	6010      	str	r0, [r2, #0]
 8007faa:	7019      	strb	r1, [r3, #0]
 8007fac:	4608      	mov	r0, r1
 8007fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <__sfputs_r>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460f      	mov	r7, r1
 8007fba:	4614      	mov	r4, r2
 8007fbc:	18d5      	adds	r5, r2, r3
 8007fbe:	42ac      	cmp	r4, r5
 8007fc0:	d101      	bne.n	8007fc6 <__sfputs_r+0x12>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e007      	b.n	8007fd6 <__sfputs_r+0x22>
 8007fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ffda 	bl	8007f86 <__sfputc_r>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	d1f3      	bne.n	8007fbe <__sfputs_r+0xa>
 8007fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fd8 <_vfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	460d      	mov	r5, r1
 8007fde:	b09d      	sub	sp, #116	; 0x74
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	4698      	mov	r8, r3
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	b118      	cbz	r0, 8007ff0 <_vfiprintf_r+0x18>
 8007fe8:	6983      	ldr	r3, [r0, #24]
 8007fea:	b90b      	cbnz	r3, 8007ff0 <_vfiprintf_r+0x18>
 8007fec:	f000 fb06 	bl	80085fc <__sinit>
 8007ff0:	4b89      	ldr	r3, [pc, #548]	; (8008218 <_vfiprintf_r+0x240>)
 8007ff2:	429d      	cmp	r5, r3
 8007ff4:	d11b      	bne.n	800802e <_vfiprintf_r+0x56>
 8007ff6:	6875      	ldr	r5, [r6, #4]
 8007ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ffa:	07d9      	lsls	r1, r3, #31
 8007ffc:	d405      	bmi.n	800800a <_vfiprintf_r+0x32>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	059a      	lsls	r2, r3, #22
 8008002:	d402      	bmi.n	800800a <_vfiprintf_r+0x32>
 8008004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008006:	f000 fb97 	bl	8008738 <__retarget_lock_acquire_recursive>
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	071b      	lsls	r3, r3, #28
 800800e:	d501      	bpl.n	8008014 <_vfiprintf_r+0x3c>
 8008010:	692b      	ldr	r3, [r5, #16]
 8008012:	b9eb      	cbnz	r3, 8008050 <_vfiprintf_r+0x78>
 8008014:	4629      	mov	r1, r5
 8008016:	4630      	mov	r0, r6
 8008018:	f000 f960 	bl	80082dc <__swsetup_r>
 800801c:	b1c0      	cbz	r0, 8008050 <_vfiprintf_r+0x78>
 800801e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008020:	07dc      	lsls	r4, r3, #31
 8008022:	d50e      	bpl.n	8008042 <_vfiprintf_r+0x6a>
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008028:	b01d      	add	sp, #116	; 0x74
 800802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802e:	4b7b      	ldr	r3, [pc, #492]	; (800821c <_vfiprintf_r+0x244>)
 8008030:	429d      	cmp	r5, r3
 8008032:	d101      	bne.n	8008038 <_vfiprintf_r+0x60>
 8008034:	68b5      	ldr	r5, [r6, #8]
 8008036:	e7df      	b.n	8007ff8 <_vfiprintf_r+0x20>
 8008038:	4b79      	ldr	r3, [pc, #484]	; (8008220 <_vfiprintf_r+0x248>)
 800803a:	429d      	cmp	r5, r3
 800803c:	bf08      	it	eq
 800803e:	68f5      	ldreq	r5, [r6, #12]
 8008040:	e7da      	b.n	8007ff8 <_vfiprintf_r+0x20>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	0598      	lsls	r0, r3, #22
 8008046:	d4ed      	bmi.n	8008024 <_vfiprintf_r+0x4c>
 8008048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800804a:	f000 fb76 	bl	800873a <__retarget_lock_release_recursive>
 800804e:	e7e9      	b.n	8008024 <_vfiprintf_r+0x4c>
 8008050:	2300      	movs	r3, #0
 8008052:	9309      	str	r3, [sp, #36]	; 0x24
 8008054:	2320      	movs	r3, #32
 8008056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800805a:	f8cd 800c 	str.w	r8, [sp, #12]
 800805e:	2330      	movs	r3, #48	; 0x30
 8008060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008224 <_vfiprintf_r+0x24c>
 8008064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008068:	f04f 0901 	mov.w	r9, #1
 800806c:	4623      	mov	r3, r4
 800806e:	469a      	mov	sl, r3
 8008070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008074:	b10a      	cbz	r2, 800807a <_vfiprintf_r+0xa2>
 8008076:	2a25      	cmp	r2, #37	; 0x25
 8008078:	d1f9      	bne.n	800806e <_vfiprintf_r+0x96>
 800807a:	ebba 0b04 	subs.w	fp, sl, r4
 800807e:	d00b      	beq.n	8008098 <_vfiprintf_r+0xc0>
 8008080:	465b      	mov	r3, fp
 8008082:	4622      	mov	r2, r4
 8008084:	4629      	mov	r1, r5
 8008086:	4630      	mov	r0, r6
 8008088:	f7ff ff94 	bl	8007fb4 <__sfputs_r>
 800808c:	3001      	adds	r0, #1
 800808e:	f000 80aa 	beq.w	80081e6 <_vfiprintf_r+0x20e>
 8008092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008094:	445a      	add	r2, fp
 8008096:	9209      	str	r2, [sp, #36]	; 0x24
 8008098:	f89a 3000 	ldrb.w	r3, [sl]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 80a2 	beq.w	80081e6 <_vfiprintf_r+0x20e>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ac:	f10a 0a01 	add.w	sl, sl, #1
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	9307      	str	r3, [sp, #28]
 80080b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080b8:	931a      	str	r3, [sp, #104]	; 0x68
 80080ba:	4654      	mov	r4, sl
 80080bc:	2205      	movs	r2, #5
 80080be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c2:	4858      	ldr	r0, [pc, #352]	; (8008224 <_vfiprintf_r+0x24c>)
 80080c4:	f7f8 f8c4 	bl	8000250 <memchr>
 80080c8:	9a04      	ldr	r2, [sp, #16]
 80080ca:	b9d8      	cbnz	r0, 8008104 <_vfiprintf_r+0x12c>
 80080cc:	06d1      	lsls	r1, r2, #27
 80080ce:	bf44      	itt	mi
 80080d0:	2320      	movmi	r3, #32
 80080d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d6:	0713      	lsls	r3, r2, #28
 80080d8:	bf44      	itt	mi
 80080da:	232b      	movmi	r3, #43	; 0x2b
 80080dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e0:	f89a 3000 	ldrb.w	r3, [sl]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d015      	beq.n	8008114 <_vfiprintf_r+0x13c>
 80080e8:	9a07      	ldr	r2, [sp, #28]
 80080ea:	4654      	mov	r4, sl
 80080ec:	2000      	movs	r0, #0
 80080ee:	f04f 0c0a 	mov.w	ip, #10
 80080f2:	4621      	mov	r1, r4
 80080f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080f8:	3b30      	subs	r3, #48	; 0x30
 80080fa:	2b09      	cmp	r3, #9
 80080fc:	d94e      	bls.n	800819c <_vfiprintf_r+0x1c4>
 80080fe:	b1b0      	cbz	r0, 800812e <_vfiprintf_r+0x156>
 8008100:	9207      	str	r2, [sp, #28]
 8008102:	e014      	b.n	800812e <_vfiprintf_r+0x156>
 8008104:	eba0 0308 	sub.w	r3, r0, r8
 8008108:	fa09 f303 	lsl.w	r3, r9, r3
 800810c:	4313      	orrs	r3, r2
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	46a2      	mov	sl, r4
 8008112:	e7d2      	b.n	80080ba <_vfiprintf_r+0xe2>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	1d19      	adds	r1, r3, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	9103      	str	r1, [sp, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	bfbb      	ittet	lt
 8008120:	425b      	neglt	r3, r3
 8008122:	f042 0202 	orrlt.w	r2, r2, #2
 8008126:	9307      	strge	r3, [sp, #28]
 8008128:	9307      	strlt	r3, [sp, #28]
 800812a:	bfb8      	it	lt
 800812c:	9204      	strlt	r2, [sp, #16]
 800812e:	7823      	ldrb	r3, [r4, #0]
 8008130:	2b2e      	cmp	r3, #46	; 0x2e
 8008132:	d10c      	bne.n	800814e <_vfiprintf_r+0x176>
 8008134:	7863      	ldrb	r3, [r4, #1]
 8008136:	2b2a      	cmp	r3, #42	; 0x2a
 8008138:	d135      	bne.n	80081a6 <_vfiprintf_r+0x1ce>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	1d1a      	adds	r2, r3, #4
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	9203      	str	r2, [sp, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	bfb8      	it	lt
 8008146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800814a:	3402      	adds	r4, #2
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008234 <_vfiprintf_r+0x25c>
 8008152:	7821      	ldrb	r1, [r4, #0]
 8008154:	2203      	movs	r2, #3
 8008156:	4650      	mov	r0, sl
 8008158:	f7f8 f87a 	bl	8000250 <memchr>
 800815c:	b140      	cbz	r0, 8008170 <_vfiprintf_r+0x198>
 800815e:	2340      	movs	r3, #64	; 0x40
 8008160:	eba0 000a 	sub.w	r0, r0, sl
 8008164:	fa03 f000 	lsl.w	r0, r3, r0
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	4303      	orrs	r3, r0
 800816c:	3401      	adds	r4, #1
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008174:	482c      	ldr	r0, [pc, #176]	; (8008228 <_vfiprintf_r+0x250>)
 8008176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800817a:	2206      	movs	r2, #6
 800817c:	f7f8 f868 	bl	8000250 <memchr>
 8008180:	2800      	cmp	r0, #0
 8008182:	d03f      	beq.n	8008204 <_vfiprintf_r+0x22c>
 8008184:	4b29      	ldr	r3, [pc, #164]	; (800822c <_vfiprintf_r+0x254>)
 8008186:	bb1b      	cbnz	r3, 80081d0 <_vfiprintf_r+0x1f8>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	3307      	adds	r3, #7
 800818c:	f023 0307 	bic.w	r3, r3, #7
 8008190:	3308      	adds	r3, #8
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008196:	443b      	add	r3, r7
 8008198:	9309      	str	r3, [sp, #36]	; 0x24
 800819a:	e767      	b.n	800806c <_vfiprintf_r+0x94>
 800819c:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a0:	460c      	mov	r4, r1
 80081a2:	2001      	movs	r0, #1
 80081a4:	e7a5      	b.n	80080f2 <_vfiprintf_r+0x11a>
 80081a6:	2300      	movs	r3, #0
 80081a8:	3401      	adds	r4, #1
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f04f 0c0a 	mov.w	ip, #10
 80081b2:	4620      	mov	r0, r4
 80081b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b8:	3a30      	subs	r2, #48	; 0x30
 80081ba:	2a09      	cmp	r2, #9
 80081bc:	d903      	bls.n	80081c6 <_vfiprintf_r+0x1ee>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0c5      	beq.n	800814e <_vfiprintf_r+0x176>
 80081c2:	9105      	str	r1, [sp, #20]
 80081c4:	e7c3      	b.n	800814e <_vfiprintf_r+0x176>
 80081c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ca:	4604      	mov	r4, r0
 80081cc:	2301      	movs	r3, #1
 80081ce:	e7f0      	b.n	80081b2 <_vfiprintf_r+0x1da>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	462a      	mov	r2, r5
 80081d6:	4b16      	ldr	r3, [pc, #88]	; (8008230 <_vfiprintf_r+0x258>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4630      	mov	r0, r6
 80081dc:	f7fc f934 	bl	8004448 <_printf_float>
 80081e0:	4607      	mov	r7, r0
 80081e2:	1c78      	adds	r0, r7, #1
 80081e4:	d1d6      	bne.n	8008194 <_vfiprintf_r+0x1bc>
 80081e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081e8:	07d9      	lsls	r1, r3, #31
 80081ea:	d405      	bmi.n	80081f8 <_vfiprintf_r+0x220>
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	059a      	lsls	r2, r3, #22
 80081f0:	d402      	bmi.n	80081f8 <_vfiprintf_r+0x220>
 80081f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081f4:	f000 faa1 	bl	800873a <__retarget_lock_release_recursive>
 80081f8:	89ab      	ldrh	r3, [r5, #12]
 80081fa:	065b      	lsls	r3, r3, #25
 80081fc:	f53f af12 	bmi.w	8008024 <_vfiprintf_r+0x4c>
 8008200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008202:	e711      	b.n	8008028 <_vfiprintf_r+0x50>
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	462a      	mov	r2, r5
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <_vfiprintf_r+0x258>)
 800820c:	a904      	add	r1, sp, #16
 800820e:	4630      	mov	r0, r6
 8008210:	f7fc fba6 	bl	8004960 <_printf_i>
 8008214:	e7e4      	b.n	80081e0 <_vfiprintf_r+0x208>
 8008216:	bf00      	nop
 8008218:	08008edc 	.word	0x08008edc
 800821c:	08008efc 	.word	0x08008efc
 8008220:	08008ebc 	.word	0x08008ebc
 8008224:	08008e6c 	.word	0x08008e6c
 8008228:	08008e76 	.word	0x08008e76
 800822c:	08004449 	.word	0x08004449
 8008230:	08007fb5 	.word	0x08007fb5
 8008234:	08008e72 	.word	0x08008e72

08008238 <__swbuf_r>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	460e      	mov	r6, r1
 800823c:	4614      	mov	r4, r2
 800823e:	4605      	mov	r5, r0
 8008240:	b118      	cbz	r0, 800824a <__swbuf_r+0x12>
 8008242:	6983      	ldr	r3, [r0, #24]
 8008244:	b90b      	cbnz	r3, 800824a <__swbuf_r+0x12>
 8008246:	f000 f9d9 	bl	80085fc <__sinit>
 800824a:	4b21      	ldr	r3, [pc, #132]	; (80082d0 <__swbuf_r+0x98>)
 800824c:	429c      	cmp	r4, r3
 800824e:	d12b      	bne.n	80082a8 <__swbuf_r+0x70>
 8008250:	686c      	ldr	r4, [r5, #4]
 8008252:	69a3      	ldr	r3, [r4, #24]
 8008254:	60a3      	str	r3, [r4, #8]
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	071a      	lsls	r2, r3, #28
 800825a:	d52f      	bpl.n	80082bc <__swbuf_r+0x84>
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	b36b      	cbz	r3, 80082bc <__swbuf_r+0x84>
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	6820      	ldr	r0, [r4, #0]
 8008264:	1ac0      	subs	r0, r0, r3
 8008266:	6963      	ldr	r3, [r4, #20]
 8008268:	b2f6      	uxtb	r6, r6
 800826a:	4283      	cmp	r3, r0
 800826c:	4637      	mov	r7, r6
 800826e:	dc04      	bgt.n	800827a <__swbuf_r+0x42>
 8008270:	4621      	mov	r1, r4
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f92e 	bl	80084d4 <_fflush_r>
 8008278:	bb30      	cbnz	r0, 80082c8 <__swbuf_r+0x90>
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	3b01      	subs	r3, #1
 800827e:	60a3      	str	r3, [r4, #8]
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	6022      	str	r2, [r4, #0]
 8008286:	701e      	strb	r6, [r3, #0]
 8008288:	6963      	ldr	r3, [r4, #20]
 800828a:	3001      	adds	r0, #1
 800828c:	4283      	cmp	r3, r0
 800828e:	d004      	beq.n	800829a <__swbuf_r+0x62>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	07db      	lsls	r3, r3, #31
 8008294:	d506      	bpl.n	80082a4 <__swbuf_r+0x6c>
 8008296:	2e0a      	cmp	r6, #10
 8008298:	d104      	bne.n	80082a4 <__swbuf_r+0x6c>
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f000 f919 	bl	80084d4 <_fflush_r>
 80082a2:	b988      	cbnz	r0, 80082c8 <__swbuf_r+0x90>
 80082a4:	4638      	mov	r0, r7
 80082a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <__swbuf_r+0x9c>)
 80082aa:	429c      	cmp	r4, r3
 80082ac:	d101      	bne.n	80082b2 <__swbuf_r+0x7a>
 80082ae:	68ac      	ldr	r4, [r5, #8]
 80082b0:	e7cf      	b.n	8008252 <__swbuf_r+0x1a>
 80082b2:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <__swbuf_r+0xa0>)
 80082b4:	429c      	cmp	r4, r3
 80082b6:	bf08      	it	eq
 80082b8:	68ec      	ldreq	r4, [r5, #12]
 80082ba:	e7ca      	b.n	8008252 <__swbuf_r+0x1a>
 80082bc:	4621      	mov	r1, r4
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 f80c 	bl	80082dc <__swsetup_r>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d0cb      	beq.n	8008260 <__swbuf_r+0x28>
 80082c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80082cc:	e7ea      	b.n	80082a4 <__swbuf_r+0x6c>
 80082ce:	bf00      	nop
 80082d0:	08008edc 	.word	0x08008edc
 80082d4:	08008efc 	.word	0x08008efc
 80082d8:	08008ebc 	.word	0x08008ebc

080082dc <__swsetup_r>:
 80082dc:	4b32      	ldr	r3, [pc, #200]	; (80083a8 <__swsetup_r+0xcc>)
 80082de:	b570      	push	{r4, r5, r6, lr}
 80082e0:	681d      	ldr	r5, [r3, #0]
 80082e2:	4606      	mov	r6, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	b125      	cbz	r5, 80082f2 <__swsetup_r+0x16>
 80082e8:	69ab      	ldr	r3, [r5, #24]
 80082ea:	b913      	cbnz	r3, 80082f2 <__swsetup_r+0x16>
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 f985 	bl	80085fc <__sinit>
 80082f2:	4b2e      	ldr	r3, [pc, #184]	; (80083ac <__swsetup_r+0xd0>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	d10f      	bne.n	8008318 <__swsetup_r+0x3c>
 80082f8:	686c      	ldr	r4, [r5, #4]
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008300:	0719      	lsls	r1, r3, #28
 8008302:	d42c      	bmi.n	800835e <__swsetup_r+0x82>
 8008304:	06dd      	lsls	r5, r3, #27
 8008306:	d411      	bmi.n	800832c <__swsetup_r+0x50>
 8008308:	2309      	movs	r3, #9
 800830a:	6033      	str	r3, [r6, #0]
 800830c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008316:	e03e      	b.n	8008396 <__swsetup_r+0xba>
 8008318:	4b25      	ldr	r3, [pc, #148]	; (80083b0 <__swsetup_r+0xd4>)
 800831a:	429c      	cmp	r4, r3
 800831c:	d101      	bne.n	8008322 <__swsetup_r+0x46>
 800831e:	68ac      	ldr	r4, [r5, #8]
 8008320:	e7eb      	b.n	80082fa <__swsetup_r+0x1e>
 8008322:	4b24      	ldr	r3, [pc, #144]	; (80083b4 <__swsetup_r+0xd8>)
 8008324:	429c      	cmp	r4, r3
 8008326:	bf08      	it	eq
 8008328:	68ec      	ldreq	r4, [r5, #12]
 800832a:	e7e6      	b.n	80082fa <__swsetup_r+0x1e>
 800832c:	0758      	lsls	r0, r3, #29
 800832e:	d512      	bpl.n	8008356 <__swsetup_r+0x7a>
 8008330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008332:	b141      	cbz	r1, 8008346 <__swsetup_r+0x6a>
 8008334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008338:	4299      	cmp	r1, r3
 800833a:	d002      	beq.n	8008342 <__swsetup_r+0x66>
 800833c:	4630      	mov	r0, r6
 800833e:	f7ff fb25 	bl	800798c <_free_r>
 8008342:	2300      	movs	r3, #0
 8008344:	6363      	str	r3, [r4, #52]	; 0x34
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	2300      	movs	r3, #0
 8008350:	6063      	str	r3, [r4, #4]
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	f043 0308 	orr.w	r3, r3, #8
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	b94b      	cbnz	r3, 8008376 <__swsetup_r+0x9a>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800836c:	d003      	beq.n	8008376 <__swsetup_r+0x9a>
 800836e:	4621      	mov	r1, r4
 8008370:	4630      	mov	r0, r6
 8008372:	f000 fa09 	bl	8008788 <__smakebuf_r>
 8008376:	89a0      	ldrh	r0, [r4, #12]
 8008378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800837c:	f010 0301 	ands.w	r3, r0, #1
 8008380:	d00a      	beq.n	8008398 <__swsetup_r+0xbc>
 8008382:	2300      	movs	r3, #0
 8008384:	60a3      	str	r3, [r4, #8]
 8008386:	6963      	ldr	r3, [r4, #20]
 8008388:	425b      	negs	r3, r3
 800838a:	61a3      	str	r3, [r4, #24]
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	b943      	cbnz	r3, 80083a2 <__swsetup_r+0xc6>
 8008390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008394:	d1ba      	bne.n	800830c <__swsetup_r+0x30>
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	0781      	lsls	r1, r0, #30
 800839a:	bf58      	it	pl
 800839c:	6963      	ldrpl	r3, [r4, #20]
 800839e:	60a3      	str	r3, [r4, #8]
 80083a0:	e7f4      	b.n	800838c <__swsetup_r+0xb0>
 80083a2:	2000      	movs	r0, #0
 80083a4:	e7f7      	b.n	8008396 <__swsetup_r+0xba>
 80083a6:	bf00      	nop
 80083a8:	2000000c 	.word	0x2000000c
 80083ac:	08008edc 	.word	0x08008edc
 80083b0:	08008efc 	.word	0x08008efc
 80083b4:	08008ebc 	.word	0x08008ebc

080083b8 <abort>:
 80083b8:	b508      	push	{r3, lr}
 80083ba:	2006      	movs	r0, #6
 80083bc:	f000 fa54 	bl	8008868 <raise>
 80083c0:	2001      	movs	r0, #1
 80083c2:	f7f9 f805 	bl	80013d0 <_exit>
	...

080083c8 <__sflush_r>:
 80083c8:	898a      	ldrh	r2, [r1, #12]
 80083ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ce:	4605      	mov	r5, r0
 80083d0:	0710      	lsls	r0, r2, #28
 80083d2:	460c      	mov	r4, r1
 80083d4:	d458      	bmi.n	8008488 <__sflush_r+0xc0>
 80083d6:	684b      	ldr	r3, [r1, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dc05      	bgt.n	80083e8 <__sflush_r+0x20>
 80083dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dc02      	bgt.n	80083e8 <__sflush_r+0x20>
 80083e2:	2000      	movs	r0, #0
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	d0f9      	beq.n	80083e2 <__sflush_r+0x1a>
 80083ee:	2300      	movs	r3, #0
 80083f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083f4:	682f      	ldr	r7, [r5, #0]
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	d032      	beq.n	8008460 <__sflush_r+0x98>
 80083fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	075a      	lsls	r2, r3, #29
 8008400:	d505      	bpl.n	800840e <__sflush_r+0x46>
 8008402:	6863      	ldr	r3, [r4, #4]
 8008404:	1ac0      	subs	r0, r0, r3
 8008406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008408:	b10b      	cbz	r3, 800840e <__sflush_r+0x46>
 800840a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800840c:	1ac0      	subs	r0, r0, r3
 800840e:	2300      	movs	r3, #0
 8008410:	4602      	mov	r2, r0
 8008412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008414:	6a21      	ldr	r1, [r4, #32]
 8008416:	4628      	mov	r0, r5
 8008418:	47b0      	blx	r6
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	d106      	bne.n	800842e <__sflush_r+0x66>
 8008420:	6829      	ldr	r1, [r5, #0]
 8008422:	291d      	cmp	r1, #29
 8008424:	d82c      	bhi.n	8008480 <__sflush_r+0xb8>
 8008426:	4a2a      	ldr	r2, [pc, #168]	; (80084d0 <__sflush_r+0x108>)
 8008428:	40ca      	lsrs	r2, r1
 800842a:	07d6      	lsls	r6, r2, #31
 800842c:	d528      	bpl.n	8008480 <__sflush_r+0xb8>
 800842e:	2200      	movs	r2, #0
 8008430:	6062      	str	r2, [r4, #4]
 8008432:	04d9      	lsls	r1, r3, #19
 8008434:	6922      	ldr	r2, [r4, #16]
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	d504      	bpl.n	8008444 <__sflush_r+0x7c>
 800843a:	1c42      	adds	r2, r0, #1
 800843c:	d101      	bne.n	8008442 <__sflush_r+0x7a>
 800843e:	682b      	ldr	r3, [r5, #0]
 8008440:	b903      	cbnz	r3, 8008444 <__sflush_r+0x7c>
 8008442:	6560      	str	r0, [r4, #84]	; 0x54
 8008444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008446:	602f      	str	r7, [r5, #0]
 8008448:	2900      	cmp	r1, #0
 800844a:	d0ca      	beq.n	80083e2 <__sflush_r+0x1a>
 800844c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008450:	4299      	cmp	r1, r3
 8008452:	d002      	beq.n	800845a <__sflush_r+0x92>
 8008454:	4628      	mov	r0, r5
 8008456:	f7ff fa99 	bl	800798c <_free_r>
 800845a:	2000      	movs	r0, #0
 800845c:	6360      	str	r0, [r4, #52]	; 0x34
 800845e:	e7c1      	b.n	80083e4 <__sflush_r+0x1c>
 8008460:	6a21      	ldr	r1, [r4, #32]
 8008462:	2301      	movs	r3, #1
 8008464:	4628      	mov	r0, r5
 8008466:	47b0      	blx	r6
 8008468:	1c41      	adds	r1, r0, #1
 800846a:	d1c7      	bne.n	80083fc <__sflush_r+0x34>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0c4      	beq.n	80083fc <__sflush_r+0x34>
 8008472:	2b1d      	cmp	r3, #29
 8008474:	d001      	beq.n	800847a <__sflush_r+0xb2>
 8008476:	2b16      	cmp	r3, #22
 8008478:	d101      	bne.n	800847e <__sflush_r+0xb6>
 800847a:	602f      	str	r7, [r5, #0]
 800847c:	e7b1      	b.n	80083e2 <__sflush_r+0x1a>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	e7ad      	b.n	80083e4 <__sflush_r+0x1c>
 8008488:	690f      	ldr	r7, [r1, #16]
 800848a:	2f00      	cmp	r7, #0
 800848c:	d0a9      	beq.n	80083e2 <__sflush_r+0x1a>
 800848e:	0793      	lsls	r3, r2, #30
 8008490:	680e      	ldr	r6, [r1, #0]
 8008492:	bf08      	it	eq
 8008494:	694b      	ldreq	r3, [r1, #20]
 8008496:	600f      	str	r7, [r1, #0]
 8008498:	bf18      	it	ne
 800849a:	2300      	movne	r3, #0
 800849c:	eba6 0807 	sub.w	r8, r6, r7
 80084a0:	608b      	str	r3, [r1, #8]
 80084a2:	f1b8 0f00 	cmp.w	r8, #0
 80084a6:	dd9c      	ble.n	80083e2 <__sflush_r+0x1a>
 80084a8:	6a21      	ldr	r1, [r4, #32]
 80084aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084ac:	4643      	mov	r3, r8
 80084ae:	463a      	mov	r2, r7
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b0      	blx	r6
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dc06      	bgt.n	80084c6 <__sflush_r+0xfe>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c4:	e78e      	b.n	80083e4 <__sflush_r+0x1c>
 80084c6:	4407      	add	r7, r0
 80084c8:	eba8 0800 	sub.w	r8, r8, r0
 80084cc:	e7e9      	b.n	80084a2 <__sflush_r+0xda>
 80084ce:	bf00      	nop
 80084d0:	20400001 	.word	0x20400001

080084d4 <_fflush_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	690b      	ldr	r3, [r1, #16]
 80084d8:	4605      	mov	r5, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	b913      	cbnz	r3, 80084e4 <_fflush_r+0x10>
 80084de:	2500      	movs	r5, #0
 80084e0:	4628      	mov	r0, r5
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	b118      	cbz	r0, 80084ee <_fflush_r+0x1a>
 80084e6:	6983      	ldr	r3, [r0, #24]
 80084e8:	b90b      	cbnz	r3, 80084ee <_fflush_r+0x1a>
 80084ea:	f000 f887 	bl	80085fc <__sinit>
 80084ee:	4b14      	ldr	r3, [pc, #80]	; (8008540 <_fflush_r+0x6c>)
 80084f0:	429c      	cmp	r4, r3
 80084f2:	d11b      	bne.n	800852c <_fflush_r+0x58>
 80084f4:	686c      	ldr	r4, [r5, #4]
 80084f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0ef      	beq.n	80084de <_fflush_r+0xa>
 80084fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008500:	07d0      	lsls	r0, r2, #31
 8008502:	d404      	bmi.n	800850e <_fflush_r+0x3a>
 8008504:	0599      	lsls	r1, r3, #22
 8008506:	d402      	bmi.n	800850e <_fflush_r+0x3a>
 8008508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800850a:	f000 f915 	bl	8008738 <__retarget_lock_acquire_recursive>
 800850e:	4628      	mov	r0, r5
 8008510:	4621      	mov	r1, r4
 8008512:	f7ff ff59 	bl	80083c8 <__sflush_r>
 8008516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008518:	07da      	lsls	r2, r3, #31
 800851a:	4605      	mov	r5, r0
 800851c:	d4e0      	bmi.n	80084e0 <_fflush_r+0xc>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	059b      	lsls	r3, r3, #22
 8008522:	d4dd      	bmi.n	80084e0 <_fflush_r+0xc>
 8008524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008526:	f000 f908 	bl	800873a <__retarget_lock_release_recursive>
 800852a:	e7d9      	b.n	80084e0 <_fflush_r+0xc>
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <_fflush_r+0x70>)
 800852e:	429c      	cmp	r4, r3
 8008530:	d101      	bne.n	8008536 <_fflush_r+0x62>
 8008532:	68ac      	ldr	r4, [r5, #8]
 8008534:	e7df      	b.n	80084f6 <_fflush_r+0x22>
 8008536:	4b04      	ldr	r3, [pc, #16]	; (8008548 <_fflush_r+0x74>)
 8008538:	429c      	cmp	r4, r3
 800853a:	bf08      	it	eq
 800853c:	68ec      	ldreq	r4, [r5, #12]
 800853e:	e7da      	b.n	80084f6 <_fflush_r+0x22>
 8008540:	08008edc 	.word	0x08008edc
 8008544:	08008efc 	.word	0x08008efc
 8008548:	08008ebc 	.word	0x08008ebc

0800854c <std>:
 800854c:	2300      	movs	r3, #0
 800854e:	b510      	push	{r4, lr}
 8008550:	4604      	mov	r4, r0
 8008552:	e9c0 3300 	strd	r3, r3, [r0]
 8008556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800855a:	6083      	str	r3, [r0, #8]
 800855c:	8181      	strh	r1, [r0, #12]
 800855e:	6643      	str	r3, [r0, #100]	; 0x64
 8008560:	81c2      	strh	r2, [r0, #14]
 8008562:	6183      	str	r3, [r0, #24]
 8008564:	4619      	mov	r1, r3
 8008566:	2208      	movs	r2, #8
 8008568:	305c      	adds	r0, #92	; 0x5c
 800856a:	f7fb fed5 	bl	8004318 <memset>
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <std+0x38>)
 8008570:	6263      	str	r3, [r4, #36]	; 0x24
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <std+0x3c>)
 8008574:	62a3      	str	r3, [r4, #40]	; 0x28
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <std+0x40>)
 8008578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <std+0x44>)
 800857c:	6224      	str	r4, [r4, #32]
 800857e:	6323      	str	r3, [r4, #48]	; 0x30
 8008580:	bd10      	pop	{r4, pc}
 8008582:	bf00      	nop
 8008584:	080088a1 	.word	0x080088a1
 8008588:	080088c3 	.word	0x080088c3
 800858c:	080088fb 	.word	0x080088fb
 8008590:	0800891f 	.word	0x0800891f

08008594 <_cleanup_r>:
 8008594:	4901      	ldr	r1, [pc, #4]	; (800859c <_cleanup_r+0x8>)
 8008596:	f000 b8af 	b.w	80086f8 <_fwalk_reent>
 800859a:	bf00      	nop
 800859c:	080084d5 	.word	0x080084d5

080085a0 <__sfmoreglue>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	2268      	movs	r2, #104	; 0x68
 80085a4:	1e4d      	subs	r5, r1, #1
 80085a6:	4355      	muls	r5, r2
 80085a8:	460e      	mov	r6, r1
 80085aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ae:	f7ff fa59 	bl	8007a64 <_malloc_r>
 80085b2:	4604      	mov	r4, r0
 80085b4:	b140      	cbz	r0, 80085c8 <__sfmoreglue+0x28>
 80085b6:	2100      	movs	r1, #0
 80085b8:	e9c0 1600 	strd	r1, r6, [r0]
 80085bc:	300c      	adds	r0, #12
 80085be:	60a0      	str	r0, [r4, #8]
 80085c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085c4:	f7fb fea8 	bl	8004318 <memset>
 80085c8:	4620      	mov	r0, r4
 80085ca:	bd70      	pop	{r4, r5, r6, pc}

080085cc <__sfp_lock_acquire>:
 80085cc:	4801      	ldr	r0, [pc, #4]	; (80085d4 <__sfp_lock_acquire+0x8>)
 80085ce:	f000 b8b3 	b.w	8008738 <__retarget_lock_acquire_recursive>
 80085d2:	bf00      	nop
 80085d4:	20000321 	.word	0x20000321

080085d8 <__sfp_lock_release>:
 80085d8:	4801      	ldr	r0, [pc, #4]	; (80085e0 <__sfp_lock_release+0x8>)
 80085da:	f000 b8ae 	b.w	800873a <__retarget_lock_release_recursive>
 80085de:	bf00      	nop
 80085e0:	20000321 	.word	0x20000321

080085e4 <__sinit_lock_acquire>:
 80085e4:	4801      	ldr	r0, [pc, #4]	; (80085ec <__sinit_lock_acquire+0x8>)
 80085e6:	f000 b8a7 	b.w	8008738 <__retarget_lock_acquire_recursive>
 80085ea:	bf00      	nop
 80085ec:	20000322 	.word	0x20000322

080085f0 <__sinit_lock_release>:
 80085f0:	4801      	ldr	r0, [pc, #4]	; (80085f8 <__sinit_lock_release+0x8>)
 80085f2:	f000 b8a2 	b.w	800873a <__retarget_lock_release_recursive>
 80085f6:	bf00      	nop
 80085f8:	20000322 	.word	0x20000322

080085fc <__sinit>:
 80085fc:	b510      	push	{r4, lr}
 80085fe:	4604      	mov	r4, r0
 8008600:	f7ff fff0 	bl	80085e4 <__sinit_lock_acquire>
 8008604:	69a3      	ldr	r3, [r4, #24]
 8008606:	b11b      	cbz	r3, 8008610 <__sinit+0x14>
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	f7ff bff0 	b.w	80085f0 <__sinit_lock_release>
 8008610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008614:	6523      	str	r3, [r4, #80]	; 0x50
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <__sinit+0x68>)
 8008618:	4a13      	ldr	r2, [pc, #76]	; (8008668 <__sinit+0x6c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	62a2      	str	r2, [r4, #40]	; 0x28
 800861e:	42a3      	cmp	r3, r4
 8008620:	bf04      	itt	eq
 8008622:	2301      	moveq	r3, #1
 8008624:	61a3      	streq	r3, [r4, #24]
 8008626:	4620      	mov	r0, r4
 8008628:	f000 f820 	bl	800866c <__sfp>
 800862c:	6060      	str	r0, [r4, #4]
 800862e:	4620      	mov	r0, r4
 8008630:	f000 f81c 	bl	800866c <__sfp>
 8008634:	60a0      	str	r0, [r4, #8]
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f818 	bl	800866c <__sfp>
 800863c:	2200      	movs	r2, #0
 800863e:	60e0      	str	r0, [r4, #12]
 8008640:	2104      	movs	r1, #4
 8008642:	6860      	ldr	r0, [r4, #4]
 8008644:	f7ff ff82 	bl	800854c <std>
 8008648:	68a0      	ldr	r0, [r4, #8]
 800864a:	2201      	movs	r2, #1
 800864c:	2109      	movs	r1, #9
 800864e:	f7ff ff7d 	bl	800854c <std>
 8008652:	68e0      	ldr	r0, [r4, #12]
 8008654:	2202      	movs	r2, #2
 8008656:	2112      	movs	r1, #18
 8008658:	f7ff ff78 	bl	800854c <std>
 800865c:	2301      	movs	r3, #1
 800865e:	61a3      	str	r3, [r4, #24]
 8008660:	e7d2      	b.n	8008608 <__sinit+0xc>
 8008662:	bf00      	nop
 8008664:	08008a74 	.word	0x08008a74
 8008668:	08008595 	.word	0x08008595

0800866c <__sfp>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	4607      	mov	r7, r0
 8008670:	f7ff ffac 	bl	80085cc <__sfp_lock_acquire>
 8008674:	4b1e      	ldr	r3, [pc, #120]	; (80086f0 <__sfp+0x84>)
 8008676:	681e      	ldr	r6, [r3, #0]
 8008678:	69b3      	ldr	r3, [r6, #24]
 800867a:	b913      	cbnz	r3, 8008682 <__sfp+0x16>
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff ffbd 	bl	80085fc <__sinit>
 8008682:	3648      	adds	r6, #72	; 0x48
 8008684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008688:	3b01      	subs	r3, #1
 800868a:	d503      	bpl.n	8008694 <__sfp+0x28>
 800868c:	6833      	ldr	r3, [r6, #0]
 800868e:	b30b      	cbz	r3, 80086d4 <__sfp+0x68>
 8008690:	6836      	ldr	r6, [r6, #0]
 8008692:	e7f7      	b.n	8008684 <__sfp+0x18>
 8008694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008698:	b9d5      	cbnz	r5, 80086d0 <__sfp+0x64>
 800869a:	4b16      	ldr	r3, [pc, #88]	; (80086f4 <__sfp+0x88>)
 800869c:	60e3      	str	r3, [r4, #12]
 800869e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086a2:	6665      	str	r5, [r4, #100]	; 0x64
 80086a4:	f000 f847 	bl	8008736 <__retarget_lock_init_recursive>
 80086a8:	f7ff ff96 	bl	80085d8 <__sfp_lock_release>
 80086ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086b4:	6025      	str	r5, [r4, #0]
 80086b6:	61a5      	str	r5, [r4, #24]
 80086b8:	2208      	movs	r2, #8
 80086ba:	4629      	mov	r1, r5
 80086bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086c0:	f7fb fe2a 	bl	8004318 <memset>
 80086c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086cc:	4620      	mov	r0, r4
 80086ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d0:	3468      	adds	r4, #104	; 0x68
 80086d2:	e7d9      	b.n	8008688 <__sfp+0x1c>
 80086d4:	2104      	movs	r1, #4
 80086d6:	4638      	mov	r0, r7
 80086d8:	f7ff ff62 	bl	80085a0 <__sfmoreglue>
 80086dc:	4604      	mov	r4, r0
 80086de:	6030      	str	r0, [r6, #0]
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d1d5      	bne.n	8008690 <__sfp+0x24>
 80086e4:	f7ff ff78 	bl	80085d8 <__sfp_lock_release>
 80086e8:	230c      	movs	r3, #12
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	e7ee      	b.n	80086cc <__sfp+0x60>
 80086ee:	bf00      	nop
 80086f0:	08008a74 	.word	0x08008a74
 80086f4:	ffff0001 	.word	0xffff0001

080086f8 <_fwalk_reent>:
 80086f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086fc:	4606      	mov	r6, r0
 80086fe:	4688      	mov	r8, r1
 8008700:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008704:	2700      	movs	r7, #0
 8008706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800870a:	f1b9 0901 	subs.w	r9, r9, #1
 800870e:	d505      	bpl.n	800871c <_fwalk_reent+0x24>
 8008710:	6824      	ldr	r4, [r4, #0]
 8008712:	2c00      	cmp	r4, #0
 8008714:	d1f7      	bne.n	8008706 <_fwalk_reent+0xe>
 8008716:	4638      	mov	r0, r7
 8008718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800871c:	89ab      	ldrh	r3, [r5, #12]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d907      	bls.n	8008732 <_fwalk_reent+0x3a>
 8008722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008726:	3301      	adds	r3, #1
 8008728:	d003      	beq.n	8008732 <_fwalk_reent+0x3a>
 800872a:	4629      	mov	r1, r5
 800872c:	4630      	mov	r0, r6
 800872e:	47c0      	blx	r8
 8008730:	4307      	orrs	r7, r0
 8008732:	3568      	adds	r5, #104	; 0x68
 8008734:	e7e9      	b.n	800870a <_fwalk_reent+0x12>

08008736 <__retarget_lock_init_recursive>:
 8008736:	4770      	bx	lr

08008738 <__retarget_lock_acquire_recursive>:
 8008738:	4770      	bx	lr

0800873a <__retarget_lock_release_recursive>:
 800873a:	4770      	bx	lr

0800873c <__swhatbuf_r>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	460e      	mov	r6, r1
 8008740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008744:	2900      	cmp	r1, #0
 8008746:	b096      	sub	sp, #88	; 0x58
 8008748:	4614      	mov	r4, r2
 800874a:	461d      	mov	r5, r3
 800874c:	da08      	bge.n	8008760 <__swhatbuf_r+0x24>
 800874e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	602a      	str	r2, [r5, #0]
 8008756:	061a      	lsls	r2, r3, #24
 8008758:	d410      	bmi.n	800877c <__swhatbuf_r+0x40>
 800875a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800875e:	e00e      	b.n	800877e <__swhatbuf_r+0x42>
 8008760:	466a      	mov	r2, sp
 8008762:	f000 f903 	bl	800896c <_fstat_r>
 8008766:	2800      	cmp	r0, #0
 8008768:	dbf1      	blt.n	800874e <__swhatbuf_r+0x12>
 800876a:	9a01      	ldr	r2, [sp, #4]
 800876c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008774:	425a      	negs	r2, r3
 8008776:	415a      	adcs	r2, r3
 8008778:	602a      	str	r2, [r5, #0]
 800877a:	e7ee      	b.n	800875a <__swhatbuf_r+0x1e>
 800877c:	2340      	movs	r3, #64	; 0x40
 800877e:	2000      	movs	r0, #0
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	b016      	add	sp, #88	; 0x58
 8008784:	bd70      	pop	{r4, r5, r6, pc}
	...

08008788 <__smakebuf_r>:
 8008788:	898b      	ldrh	r3, [r1, #12]
 800878a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800878c:	079d      	lsls	r5, r3, #30
 800878e:	4606      	mov	r6, r0
 8008790:	460c      	mov	r4, r1
 8008792:	d507      	bpl.n	80087a4 <__smakebuf_r+0x1c>
 8008794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	6123      	str	r3, [r4, #16]
 800879c:	2301      	movs	r3, #1
 800879e:	6163      	str	r3, [r4, #20]
 80087a0:	b002      	add	sp, #8
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	ab01      	add	r3, sp, #4
 80087a6:	466a      	mov	r2, sp
 80087a8:	f7ff ffc8 	bl	800873c <__swhatbuf_r>
 80087ac:	9900      	ldr	r1, [sp, #0]
 80087ae:	4605      	mov	r5, r0
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7ff f957 	bl	8007a64 <_malloc_r>
 80087b6:	b948      	cbnz	r0, 80087cc <__smakebuf_r+0x44>
 80087b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087bc:	059a      	lsls	r2, r3, #22
 80087be:	d4ef      	bmi.n	80087a0 <__smakebuf_r+0x18>
 80087c0:	f023 0303 	bic.w	r3, r3, #3
 80087c4:	f043 0302 	orr.w	r3, r3, #2
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	e7e3      	b.n	8008794 <__smakebuf_r+0xc>
 80087cc:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <__smakebuf_r+0x7c>)
 80087ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	6020      	str	r0, [r4, #0]
 80087d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	9b00      	ldr	r3, [sp, #0]
 80087dc:	6163      	str	r3, [r4, #20]
 80087de:	9b01      	ldr	r3, [sp, #4]
 80087e0:	6120      	str	r0, [r4, #16]
 80087e2:	b15b      	cbz	r3, 80087fc <__smakebuf_r+0x74>
 80087e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e8:	4630      	mov	r0, r6
 80087ea:	f000 f8d1 	bl	8008990 <_isatty_r>
 80087ee:	b128      	cbz	r0, 80087fc <__smakebuf_r+0x74>
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f023 0303 	bic.w	r3, r3, #3
 80087f6:	f043 0301 	orr.w	r3, r3, #1
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	89a0      	ldrh	r0, [r4, #12]
 80087fe:	4305      	orrs	r5, r0
 8008800:	81a5      	strh	r5, [r4, #12]
 8008802:	e7cd      	b.n	80087a0 <__smakebuf_r+0x18>
 8008804:	08008595 	.word	0x08008595

08008808 <_malloc_usable_size_r>:
 8008808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880c:	1f18      	subs	r0, r3, #4
 800880e:	2b00      	cmp	r3, #0
 8008810:	bfbc      	itt	lt
 8008812:	580b      	ldrlt	r3, [r1, r0]
 8008814:	18c0      	addlt	r0, r0, r3
 8008816:	4770      	bx	lr

08008818 <_raise_r>:
 8008818:	291f      	cmp	r1, #31
 800881a:	b538      	push	{r3, r4, r5, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	460d      	mov	r5, r1
 8008820:	d904      	bls.n	800882c <_raise_r+0x14>
 8008822:	2316      	movs	r3, #22
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800882e:	b112      	cbz	r2, 8008836 <_raise_r+0x1e>
 8008830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008834:	b94b      	cbnz	r3, 800884a <_raise_r+0x32>
 8008836:	4620      	mov	r0, r4
 8008838:	f000 f830 	bl	800889c <_getpid_r>
 800883c:	462a      	mov	r2, r5
 800883e:	4601      	mov	r1, r0
 8008840:	4620      	mov	r0, r4
 8008842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008846:	f000 b817 	b.w	8008878 <_kill_r>
 800884a:	2b01      	cmp	r3, #1
 800884c:	d00a      	beq.n	8008864 <_raise_r+0x4c>
 800884e:	1c59      	adds	r1, r3, #1
 8008850:	d103      	bne.n	800885a <_raise_r+0x42>
 8008852:	2316      	movs	r3, #22
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	2001      	movs	r0, #1
 8008858:	e7e7      	b.n	800882a <_raise_r+0x12>
 800885a:	2400      	movs	r4, #0
 800885c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008860:	4628      	mov	r0, r5
 8008862:	4798      	blx	r3
 8008864:	2000      	movs	r0, #0
 8008866:	e7e0      	b.n	800882a <_raise_r+0x12>

08008868 <raise>:
 8008868:	4b02      	ldr	r3, [pc, #8]	; (8008874 <raise+0xc>)
 800886a:	4601      	mov	r1, r0
 800886c:	6818      	ldr	r0, [r3, #0]
 800886e:	f7ff bfd3 	b.w	8008818 <_raise_r>
 8008872:	bf00      	nop
 8008874:	2000000c 	.word	0x2000000c

08008878 <_kill_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d07      	ldr	r5, [pc, #28]	; (8008898 <_kill_r+0x20>)
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	4611      	mov	r1, r2
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	f7f8 fd93 	bl	80013b0 <_kill>
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	d102      	bne.n	8008894 <_kill_r+0x1c>
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	b103      	cbz	r3, 8008894 <_kill_r+0x1c>
 8008892:	6023      	str	r3, [r4, #0]
 8008894:	bd38      	pop	{r3, r4, r5, pc}
 8008896:	bf00      	nop
 8008898:	2000031c 	.word	0x2000031c

0800889c <_getpid_r>:
 800889c:	f7f8 bd80 	b.w	80013a0 <_getpid>

080088a0 <__sread>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	460c      	mov	r4, r1
 80088a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a8:	f000 f894 	bl	80089d4 <_read_r>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	bfab      	itete	ge
 80088b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088b2:	89a3      	ldrhlt	r3, [r4, #12]
 80088b4:	181b      	addge	r3, r3, r0
 80088b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ba:	bfac      	ite	ge
 80088bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088be:	81a3      	strhlt	r3, [r4, #12]
 80088c0:	bd10      	pop	{r4, pc}

080088c2 <__swrite>:
 80088c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	461f      	mov	r7, r3
 80088c8:	898b      	ldrh	r3, [r1, #12]
 80088ca:	05db      	lsls	r3, r3, #23
 80088cc:	4605      	mov	r5, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	4616      	mov	r6, r2
 80088d2:	d505      	bpl.n	80088e0 <__swrite+0x1e>
 80088d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d8:	2302      	movs	r3, #2
 80088da:	2200      	movs	r2, #0
 80088dc:	f000 f868 	bl	80089b0 <_lseek_r>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	4632      	mov	r2, r6
 80088ee:	463b      	mov	r3, r7
 80088f0:	4628      	mov	r0, r5
 80088f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	f000 b817 	b.w	8008928 <_write_r>

080088fa <__sseek>:
 80088fa:	b510      	push	{r4, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008902:	f000 f855 	bl	80089b0 <_lseek_r>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	bf15      	itete	ne
 800890c:	6560      	strne	r0, [r4, #84]	; 0x54
 800890e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008916:	81a3      	strheq	r3, [r4, #12]
 8008918:	bf18      	it	ne
 800891a:	81a3      	strhne	r3, [r4, #12]
 800891c:	bd10      	pop	{r4, pc}

0800891e <__sclose>:
 800891e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008922:	f000 b813 	b.w	800894c <_close_r>
	...

08008928 <_write_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4d07      	ldr	r5, [pc, #28]	; (8008948 <_write_r+0x20>)
 800892c:	4604      	mov	r4, r0
 800892e:	4608      	mov	r0, r1
 8008930:	4611      	mov	r1, r2
 8008932:	2200      	movs	r2, #0
 8008934:	602a      	str	r2, [r5, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	f7f8 fd71 	bl	800141e <_write>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_write_r+0x1e>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_write_r+0x1e>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	2000031c 	.word	0x2000031c

0800894c <_close_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d06      	ldr	r5, [pc, #24]	; (8008968 <_close_r+0x1c>)
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	f7f8 fd7d 	bl	8001456 <_close>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_close_r+0x1a>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_close_r+0x1a>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	2000031c 	.word	0x2000031c

0800896c <_fstat_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d07      	ldr	r5, [pc, #28]	; (800898c <_fstat_r+0x20>)
 8008970:	2300      	movs	r3, #0
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	4611      	mov	r1, r2
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	f7f8 fd78 	bl	800146e <_fstat>
 800897e:	1c43      	adds	r3, r0, #1
 8008980:	d102      	bne.n	8008988 <_fstat_r+0x1c>
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	b103      	cbz	r3, 8008988 <_fstat_r+0x1c>
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	bf00      	nop
 800898c:	2000031c 	.word	0x2000031c

08008990 <_isatty_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_isatty_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7f8 fd77 	bl	800148e <_isatty>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_isatty_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_isatty_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	2000031c 	.word	0x2000031c

080089b0 <_lseek_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	; (80089d0 <_lseek_r+0x20>)
 80089b4:	4604      	mov	r4, r0
 80089b6:	4608      	mov	r0, r1
 80089b8:	4611      	mov	r1, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	602a      	str	r2, [r5, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	f7f8 fd70 	bl	80014a4 <_lseek>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_lseek_r+0x1e>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_lseek_r+0x1e>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	2000031c 	.word	0x2000031c

080089d4 <_read_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d07      	ldr	r5, [pc, #28]	; (80089f4 <_read_r+0x20>)
 80089d8:	4604      	mov	r4, r0
 80089da:	4608      	mov	r0, r1
 80089dc:	4611      	mov	r1, r2
 80089de:	2200      	movs	r2, #0
 80089e0:	602a      	str	r2, [r5, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f7f8 fcfe 	bl	80013e4 <_read>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_read_r+0x1e>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_read_r+0x1e>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	2000031c 	.word	0x2000031c

080089f8 <_init>:
 80089f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fa:	bf00      	nop
 80089fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fe:	bc08      	pop	{r3}
 8008a00:	469e      	mov	lr, r3
 8008a02:	4770      	bx	lr

08008a04 <_fini>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	bf00      	nop
 8008a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0a:	bc08      	pop	{r3}
 8008a0c:	469e      	mov	lr, r3
 8008a0e:	4770      	bx	lr
