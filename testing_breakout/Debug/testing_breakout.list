
testing_breakout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004484  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004484  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caef  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018cc  00000000  00000000  0002cb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027183  00000000  00000000  0002f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1b1  00000000  00000000  000568ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f27c7  00000000  00000000  00063a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156223  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bcc  00000000  00000000  00156274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800437c 	.word	0x0800437c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800437c 	.word	0x0800437c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t i2c_flag = HAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t uart_buff[20];
	uint8_t uart_len = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint8_t i2cread_buff[10];
	uint8_t i2c_trans;

	uint8_t checkADD = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	70bb      	strb	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fbb2 	bl	8000d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f84f 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f919 	bl	8000838 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000606:	f000 f8a7 	bl	8000758 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f8e5 	bl	80007d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  i2c_trans = WHO_AM_I;
 800060e:	2375      	movs	r3, #117	; 0x75
 8000610:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i2c_flag = HAL_I2C_Master_Transmit(&hi2c1, MASTER_W, &i2c_trans, 1, 1000);
 8000612:	1cfa      	adds	r2, r7, #3
 8000614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	21d0      	movs	r1, #208	; 0xd0
 800061e:	481c      	ldr	r0, [pc, #112]	; (8000690 <main+0xac>)
 8000620:	f000 ff38 	bl	8001494 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  if (i2c_flag != HAL_OK)
 800062a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800062e:	2b00      	cmp	r3, #0
 8000630:	d012      	beq.n	8000658 <main+0x74>
	  {
		  uart_len = sprintf((char *)uart_buff, "I2C read failed\r\n");
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4917      	ldr	r1, [pc, #92]	; (8000694 <main+0xb0>)
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fa31 	bl	8003aa0 <siprintf>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  HAL_UART_Transmit(&huart3, uart_buff, uart_len, 100);
 8000644:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000648:	b29a      	uxth	r2, r3
 800064a:	f107 0110 	add.w	r1, r7, #16
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <main+0xb4>)
 8000652:	f002 fd55 	bl	8003100 <HAL_UART_Transmit>
 8000656:	e7dc      	b.n	8000612 <main+0x2e>
	  }
	  else
	  {
		  HAL_I2C_Master_Receive(&hi2c1, MASTER_R, &checkADD, 1, 100);
 8000658:	1cba      	adds	r2, r7, #2
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	21d1      	movs	r1, #209	; 0xd1
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <main+0xac>)
 8000664:	f001 f80a 	bl	800167c <HAL_I2C_Master_Receive>
//		  {
//
//		  }


		  uart_len = sprintf((char *)uart_buff, "I2C read W\r\n");
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	490b      	ldr	r1, [pc, #44]	; (800069c <main+0xb8>)
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fa16 	bl	8003aa0 <siprintf>
 8000674:	4603      	mov	r3, r0
 8000676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  HAL_UART_Transmit(&huart3, uart_buff, uart_len, 100);
 800067a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800067e:	b29a      	uxth	r2, r3
 8000680:	f107 0110 	add.w	r1, r7, #16
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <main+0xb4>)
 8000688:	f002 fd3a 	bl	8003100 <HAL_UART_Transmit>
	  i2c_flag = HAL_I2C_Master_Transmit(&hi2c1, MASTER_W, &i2c_trans, 1, 1000);
 800068c:	e7c1      	b.n	8000612 <main+0x2e>
 800068e:	bf00      	nop
 8000690:	2000008c 	.word	0x2000008c
 8000694:	08004394 	.word	0x08004394
 8000698:	200000e0 	.word	0x200000e0
 800069c:	080043a8 	.word	0x080043a8

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 f9ee 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xb0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xb0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xb0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <SystemClock_Config+0xb4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <SystemClock_Config+0xb4>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <SystemClock_Config+0xb4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fbaf 	bl	8001e70 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000718:	f000 f99e 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fe47 	bl	80023cc <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000744:	f000 f988 	bl	8000a58 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	; 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_I2C1_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_I2C1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_I2C1_Init+0x74>)
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x7c>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 208;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_I2C1_Init+0x74>)
 800076a:	22d0      	movs	r2, #208	; 0xd0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_I2C1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_I2C1_Init+0x74>)
 8000794:	f000 fdee 	bl	8001374 <HAL_I2C_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079e:	f000 f95b 	bl	8000a58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_I2C1_Init+0x74>)
 80007a6:	f001 facb 	bl	8001d40 <HAL_I2CEx_ConfigAnalogFilter>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b0:	f000 f952 	bl	8000a58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_I2C1_Init+0x74>)
 80007b8:	f001 fb0d 	bl	8001dd6 <HAL_I2CEx_ConfigDigitalFilter>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007c2:	f000 f949 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40005400 	.word	0x40005400
 80007d4:	00300208 	.word	0x00300208

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART3_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800081c:	f002 fc22 	bl	8003064 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f917 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000e0 	.word	0x200000e0
 8000834:	40004800 	.word	0x40004800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b7d      	ldr	r3, [pc, #500]	; (8000a44 <MX_GPIO_Init+0x20c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a7c      	ldr	r2, [pc, #496]	; (8000a44 <MX_GPIO_Init+0x20c>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b7a      	ldr	r3, [pc, #488]	; (8000a44 <MX_GPIO_Init+0x20c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b77      	ldr	r3, [pc, #476]	; (8000a44 <MX_GPIO_Init+0x20c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a76      	ldr	r2, [pc, #472]	; (8000a44 <MX_GPIO_Init+0x20c>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b74      	ldr	r3, [pc, #464]	; (8000a44 <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b71      	ldr	r3, [pc, #452]	; (8000a44 <MX_GPIO_Init+0x20c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a70      	ldr	r2, [pc, #448]	; (8000a44 <MX_GPIO_Init+0x20c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b6e      	ldr	r3, [pc, #440]	; (8000a44 <MX_GPIO_Init+0x20c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b6b      	ldr	r3, [pc, #428]	; (8000a44 <MX_GPIO_Init+0x20c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a6a      	ldr	r2, [pc, #424]	; (8000a44 <MX_GPIO_Init+0x20c>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b68      	ldr	r3, [pc, #416]	; (8000a44 <MX_GPIO_Init+0x20c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	4b65      	ldr	r3, [pc, #404]	; (8000a44 <MX_GPIO_Init+0x20c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a64      	ldr	r2, [pc, #400]	; (8000a44 <MX_GPIO_Init+0x20c>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b62      	ldr	r3, [pc, #392]	; (8000a44 <MX_GPIO_Init+0x20c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c6:	4b5f      	ldr	r3, [pc, #380]	; (8000a44 <MX_GPIO_Init+0x20c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x20c>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b5c      	ldr	r3, [pc, #368]	; (8000a44 <MX_GPIO_Init+0x20c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008e4:	4858      	ldr	r0, [pc, #352]	; (8000a48 <MX_GPIO_Init+0x210>)
 80008e6:	f000 fd2b 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	4857      	ldr	r0, [pc, #348]	; (8000a4c <MX_GPIO_Init+0x214>)
 80008f0:	f000 fd26 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4851      	ldr	r0, [pc, #324]	; (8000a50 <MX_GPIO_Init+0x218>)
 800090c:	f000 fb6c 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000910:	2332      	movs	r3, #50	; 0x32
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	230b      	movs	r3, #11
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4849      	ldr	r0, [pc, #292]	; (8000a50 <MX_GPIO_Init+0x218>)
 800092c:	f000 fb5c 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000930:	2386      	movs	r3, #134	; 0x86
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000940:	230b      	movs	r3, #11
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4842      	ldr	r0, [pc, #264]	; (8000a54 <MX_GPIO_Init+0x21c>)
 800094c:	f000 fb4c 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000950:	f244 0381 	movw	r3, #16513	; 0x4081
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4837      	ldr	r0, [pc, #220]	; (8000a48 <MX_GPIO_Init+0x210>)
 800096a:	f000 fb3d 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800096e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000980:	230b      	movs	r3, #11
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	482f      	ldr	r0, [pc, #188]	; (8000a48 <MX_GPIO_Init+0x210>)
 800098c:	f000 fb2c 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4829      	ldr	r0, [pc, #164]	; (8000a4c <MX_GPIO_Init+0x214>)
 80009a8:	f000 fb1e 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4823      	ldr	r0, [pc, #140]	; (8000a4c <MX_GPIO_Init+0x214>)
 80009c0:	f000 fb12 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009c4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d6:	230a      	movs	r3, #10
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	481c      	ldr	r0, [pc, #112]	; (8000a54 <MX_GPIO_Init+0x21c>)
 80009e2:	f000 fb01 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <MX_GPIO_Init+0x21c>)
 80009fc:	f000 faf4 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a12:	230b      	movs	r3, #11
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x214>)
 8000a1e:	f000 fae3 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_GPIO_Init+0x210>)
 8000a38:	f000 fad6 	bl	8000fe8 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020000 	.word	0x40020000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0ae      	sub	sp, #184	; 0xb8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2290      	movs	r2, #144	; 0x90
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 ffdf 	bl	8003a90 <memset>
  if(hi2c->Instance==I2C1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a22      	ldr	r2, [pc, #136]	; (8000b60 <HAL_I2C_MspInit+0xb4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d13c      	bne.n	8000b56 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000adc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ae0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fe92 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000af6:	f7ff ffaf 	bl	8000a58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_I2C_MspInit+0xb8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_I2C_MspInit+0xb8>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_I2C_MspInit+0xb8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1a:	2312      	movs	r3, #18
 8000b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b36:	4619      	mov	r1, r3
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <HAL_I2C_MspInit+0xbc>)
 8000b3a:	f000 fa55 	bl	8000fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_I2C_MspInit+0xb8>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_I2C_MspInit+0xb8>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_I2C_MspInit+0xb8>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	37b8      	adds	r7, #184	; 0xb8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ae      	sub	sp, #184	; 0xb8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2290      	movs	r2, #144	; 0x90
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 ff7f 	bl	8003a90 <memset>
  if(huart->Instance==USART3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d13c      	bne.n	8000c16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fe32 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bb6:	f7ff ff4f 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_UART_MspInit+0xbc>)
 8000c12:	f000 f9e9 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	37b8      	adds	r7, #184	; 0xb8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004800 	.word	0x40004800
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8b0 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f002 fec4 	bl	8003a3c <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20080000 	.word	0x20080000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000168 	.word	0x20000168
 8000ce8:	20000180 	.word	0x20000180

08000cec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ffd7 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f002 fe83 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc4f 	bl	80005e4 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d54:	08004414 	.word	0x08004414
  ldr r2, =_sbss
 8000d58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d5c:	20000180 	.word	0x20000180

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>

08000d62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f000 f90a 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f805 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d72:	f7ff fe77 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f917 	bl	8000fce <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f000 f8ed 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	2000016c 	.word	0x2000016c

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000016c 	.word	0x2000016c

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	05fa0000 	.word	0x05fa0000

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff47 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff5c 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffb0 	bl	8000f3c <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e175      	b.n	80012f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8164 	bne.w	80012ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x56>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80be 	beq.w	80012ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b66      	ldr	r3, [pc, #408]	; (800130c <HAL_GPIO_Init+0x324>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a65      	ldr	r2, [pc, #404]	; (800130c <HAL_GPIO_Init+0x324>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_GPIO_Init+0x324>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800118a:	4a61      	ldr	r2, [pc, #388]	; (8001310 <HAL_GPIO_Init+0x328>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a58      	ldr	r2, [pc, #352]	; (8001314 <HAL_GPIO_Init+0x32c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d037      	beq.n	8001226 <HAL_GPIO_Init+0x23e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a57      	ldr	r2, [pc, #348]	; (8001318 <HAL_GPIO_Init+0x330>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d031      	beq.n	8001222 <HAL_GPIO_Init+0x23a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a56      	ldr	r2, [pc, #344]	; (800131c <HAL_GPIO_Init+0x334>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d02b      	beq.n	800121e <HAL_GPIO_Init+0x236>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a55      	ldr	r2, [pc, #340]	; (8001320 <HAL_GPIO_Init+0x338>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d025      	beq.n	800121a <HAL_GPIO_Init+0x232>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <HAL_GPIO_Init+0x33c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01f      	beq.n	8001216 <HAL_GPIO_Init+0x22e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a53      	ldr	r2, [pc, #332]	; (8001328 <HAL_GPIO_Init+0x340>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x22a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_GPIO_Init+0x344>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x226>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_GPIO_Init+0x348>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x222>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_GPIO_Init+0x34c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x21e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x350>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x21a>
 80011fe:	2309      	movs	r3, #9
 8001200:	e012      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001202:	230a      	movs	r3, #10
 8001204:	e010      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001206:	2308      	movs	r3, #8
 8001208:	e00e      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800120a:	2307      	movs	r3, #7
 800120c:	e00c      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800120e:	2306      	movs	r3, #6
 8001210:	e00a      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001212:	2305      	movs	r3, #5
 8001214:	e008      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001216:	2304      	movs	r3, #4
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800121a:	2303      	movs	r3, #3
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001226:	2300      	movs	r3, #0
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	f002 0203 	and.w	r2, r2, #3
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001238:	4935      	ldr	r1, [pc, #212]	; (8001310 <HAL_GPIO_Init+0x328>)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001246:	4b3d      	ldr	r3, [pc, #244]	; (800133c <HAL_GPIO_Init+0x354>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <HAL_GPIO_Init+0x354>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001270:	4b32      	ldr	r3, [pc, #200]	; (800133c <HAL_GPIO_Init+0x354>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001294:	4a29      	ldr	r2, [pc, #164]	; (800133c <HAL_GPIO_Init+0x354>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_GPIO_Init+0x354>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012be:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_GPIO_Init+0x354>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_GPIO_Init+0x354>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_GPIO_Init+0x354>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	f67f ae86 	bls.w	8001008 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40013800 	.word	0x40013800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40021400 	.word	0x40021400
 800132c:	40021800 	.word	0x40021800
 8001330:	40021c00 	.word	0x40021c00
 8001334:	40022000 	.word	0x40022000
 8001338:	40022400 	.word	0x40022400
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e07f      	b.n	8001486 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fb86 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2224      	movs	r2, #36	; 0x24
 80013a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	e006      	b.n	80013fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d104      	bne.n	800140e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6859      	ldr	r1, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_I2C_Init+0x11c>)
 800141a:	430b      	orrs	r3, r1
 800141c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800142c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691a      	ldr	r2, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69d9      	ldr	r1, [r3, #28]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1a      	ldr	r2, [r3, #32]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	02008000 	.word	0x02008000

08001494 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	817b      	strh	r3, [r7, #10]
 80014a4:	4613      	mov	r3, r2
 80014a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b20      	cmp	r3, #32
 80014b2:	f040 80da 	bne.w	800166a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_I2C_Master_Transmit+0x30>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e0d3      	b.n	800166c <HAL_I2C_Master_Transmit+0x1d8>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014cc:	f7ff fc9a 	bl	8000e04 <HAL_GetTick>
 80014d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2319      	movs	r3, #25
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f9e6 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0be      	b.n	800166c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2221      	movs	r2, #33	; 0x21
 80014f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2210      	movs	r2, #16
 80014fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	893a      	ldrh	r2, [r7, #8]
 800150e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151a:	b29b      	uxth	r3, r3
 800151c:	2bff      	cmp	r3, #255	; 0xff
 800151e:	d90e      	bls.n	800153e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	22ff      	movs	r2, #255	; 0xff
 8001524:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152a:	b2da      	uxtb	r2, r3
 800152c:	8979      	ldrh	r1, [r7, #10]
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_I2C_Master_Transmit+0x1e0>)
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 fbd0 	bl	8001cdc <I2C_TransferConfig>
 800153c:	e06c      	b.n	8001618 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154c:	b2da      	uxtb	r2, r3
 800154e:	8979      	ldrh	r1, [r7, #10]
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <HAL_I2C_Master_Transmit+0x1e0>)
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fbbf 	bl	8001cdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800155e:	e05b      	b.n	8001618 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	6a39      	ldr	r1, [r7, #32]
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f9e3 	bl	8001930 <I2C_WaitOnTXISFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e07b      	b.n	800166c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159c:	3b01      	subs	r3, #1
 800159e:	b29a      	uxth	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d034      	beq.n	8001618 <HAL_I2C_Master_Transmit+0x184>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d130      	bne.n	8001618 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	2200      	movs	r2, #0
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f975 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e04d      	b.n	800166c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d90e      	bls.n	80015f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	22ff      	movs	r2, #255	; 0xff
 80015de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	8979      	ldrh	r1, [r7, #10]
 80015e8:	2300      	movs	r3, #0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 fb73 	bl	8001cdc <I2C_TransferConfig>
 80015f6:	e00f      	b.n	8001618 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001606:	b2da      	uxtb	r2, r3
 8001608:	8979      	ldrh	r1, [r7, #10]
 800160a:	2300      	movs	r3, #0
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 fb62 	bl	8001cdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29b      	uxth	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d19e      	bne.n	8001560 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	6a39      	ldr	r1, [r7, #32]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f9c2 	bl	80019b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e01a      	b.n	800166c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2220      	movs	r2, #32
 800163c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_I2C_Master_Transmit+0x1e4>)
 800164a:	400b      	ands	r3, r1
 800164c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800166a:	2302      	movs	r3, #2
  }
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	80002000 	.word	0x80002000
 8001678:	fe00e800 	.word	0xfe00e800

0800167c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af02      	add	r7, sp, #8
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	461a      	mov	r2, r3
 8001688:	460b      	mov	r3, r1
 800168a:	817b      	strh	r3, [r7, #10]
 800168c:	4613      	mov	r3, r2
 800168e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b20      	cmp	r3, #32
 800169a:	f040 80db 	bne.w	8001854 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_I2C_Master_Receive+0x30>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e0d4      	b.n	8001856 <HAL_I2C_Master_Receive+0x1da>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016b4:	f7ff fba6 	bl	8000e04 <HAL_GetTick>
 80016b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2319      	movs	r3, #25
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f8f2 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0bf      	b.n	8001856 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2222      	movs	r2, #34	; 0x22
 80016da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2210      	movs	r2, #16
 80016e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	2bff      	cmp	r3, #255	; 0xff
 8001706:	d90e      	bls.n	8001726 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	22ff      	movs	r2, #255	; 0xff
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	8979      	ldrh	r1, [r7, #10]
 8001716:	4b52      	ldr	r3, [pc, #328]	; (8001860 <HAL_I2C_Master_Receive+0x1e4>)
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fadc 	bl	8001cdc <I2C_TransferConfig>
 8001724:	e06d      	b.n	8001802 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	b2da      	uxtb	r2, r3
 8001736:	8979      	ldrh	r1, [r7, #10]
 8001738:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_I2C_Master_Receive+0x1e4>)
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 facb 	bl	8001cdc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001746:	e05c      	b.n	8001802 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	6a39      	ldr	r1, [r7, #32]
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 f96b 	bl	8001a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e07c      	b.n	8001856 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001792:	b29b      	uxth	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d034      	beq.n	8001802 <HAL_I2C_Master_Receive+0x186>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d130      	bne.n	8001802 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	2200      	movs	r2, #0
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f880 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e04d      	b.n	8001856 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2bff      	cmp	r3, #255	; 0xff
 80017c2:	d90e      	bls.n	80017e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	22ff      	movs	r2, #255	; 0xff
 80017c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	8979      	ldrh	r1, [r7, #10]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fa7e 	bl	8001cdc <I2C_TransferConfig>
 80017e0:	e00f      	b.n	8001802 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	8979      	ldrh	r1, [r7, #10]
 80017f4:	2300      	movs	r3, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fa6d 	bl	8001cdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d19d      	bne.n	8001748 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	6a39      	ldr	r1, [r7, #32]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f8cd 	bl	80019b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e01a      	b.n	8001856 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2220      	movs	r2, #32
 8001826:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_I2C_Master_Receive+0x1e8>)
 8001834:	400b      	ands	r3, r1
 8001836:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	80002400 	.word	0x80002400
 8001864:	fe00e800 	.word	0xfe00e800

08001868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b02      	cmp	r3, #2
 800187c:	d103      	bne.n	8001886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d007      	beq.n	80018a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	619a      	str	r2, [r3, #24]
  }
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c0:	e022      	b.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c8:	d01e      	beq.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ca:	f7ff fa9b 	bl	8000e04 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d302      	bcc.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d113      	bne.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e00f      	b.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	4013      	ands	r3, r2
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	429a      	cmp	r2, r3
 8001924:	d0cd      	beq.n	80018c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800193c:	e02c      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f8ea 	bl	8001b1c <I2C_IsErrorOccurred>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e02a      	b.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001958:	d01e      	beq.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7ff fa53 	bl	8000e04 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d302      	bcc.n	8001970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d113      	bne.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e007      	b.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d1cb      	bne.n	800193e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019bc:	e028      	b.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f8aa 	bl	8001b1c <I2C_IsErrorOccurred>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e026      	b.n	8001a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d2:	f7ff fa17 	bl	8000e04 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d113      	bne.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e007      	b.n	8001a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d1cf      	bne.n	80019be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a34:	e064      	b.n	8001b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f86e 	bl	8001b1c <I2C_IsErrorOccurred>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e062      	b.n	8001b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d138      	bne.n	8001aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d105      	bne.n	8001a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e04e      	b.n	8001b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d107      	bne.n	8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a8e:	e002      	b.n	8001a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001aaa:	400b      	ands	r3, r1
 8001aac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e022      	b.n	8001b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7ff f99b 	bl	8000e04 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10f      	bne.n	8001b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e007      	b.n	8001b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d193      	bne.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	fe00e800 	.word	0xfe00e800

08001b1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d068      	beq.n	8001c1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b50:	e049      	b.n	8001be6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b58:	d045      	beq.n	8001be6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f953 	bl	8000e04 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_IsErrorOccurred+0x54>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d13a      	bne.n	8001be6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b92:	d121      	bne.n	8001bd8 <I2C_IsErrorOccurred+0xbc>
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b9a:	d01d      	beq.n	8001bd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d01a      	beq.n	8001bd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bb2:	f7ff f927 	bl	8000e04 <HAL_GetTick>
 8001bb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb8:	e00e      	b.n	8001bd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bba:	f7ff f923 	bl	8000e04 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b19      	cmp	r3, #25
 8001bc6:	d907      	bls.n	8001bd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001bd6:	e006      	b.n	8001be6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d1e9      	bne.n	8001bba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d003      	beq.n	8001bfc <I2C_IsErrorOccurred+0xe0>
 8001bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0aa      	beq.n	8001b52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01c      	beq.n	8001cca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff fde9 	bl	8001868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <I2C_IsErrorOccurred+0x1bc>)
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	fe00e800 	.word	0xfe00e800

08001cdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	817b      	strh	r3, [r7, #10]
 8001cea:	4613      	mov	r3, r2
 8001cec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cf4:	7a7b      	ldrb	r3, [r7, #9]
 8001cf6:	041b      	lsls	r3, r3, #16
 8001cf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <I2C_TransferConfig+0x60>)
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	ea02 0103 	and.w	r1, r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	03ff63ff 	.word	0x03ff63ff

08001d40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d138      	bne.n	8001dc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e032      	b.n	8001dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d139      	bne.n	8001e60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e033      	b.n	8001e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2224      	movs	r2, #36	; 0x24
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e29b      	b.n	80023be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8087 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e94:	4b96      	ldr	r3, [pc, #600]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d00c      	beq.n	8001eba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea0:	4b93      	ldr	r3, [pc, #588]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d112      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x62>
 8001eac:	4b90      	ldr	r3, [pc, #576]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	4b8d      	ldr	r3, [pc, #564]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x130>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d168      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e275      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x7a>
 8001edc:	4b84      	ldr	r3, [pc, #528]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a83      	ldr	r2, [pc, #524]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e02e      	b.n	8001f48 <HAL_RCC_OscConfig+0xd8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x9c>
 8001ef2:	4b7f      	ldr	r3, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7e      	ldr	r2, [pc, #504]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b7c      	ldr	r3, [pc, #496]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7b      	ldr	r2, [pc, #492]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xd8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f16:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a72      	ldr	r2, [pc, #456]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xd8>
 8001f30:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6e      	ldr	r2, [pc, #440]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b6c      	ldr	r3, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6b      	ldr	r2, [pc, #428]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe ff58 	bl	8000e04 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe ff54 	bl	8000e04 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e229      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe8>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe ff44 	bl	8000e04 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe ff40 	bl	8000e04 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e215      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x110>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d069      	beq.n	8002082 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fae:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x190>
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x17a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1e9      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	493d      	ldr	r1, [pc, #244]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e040      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a38      	ldr	r2, [pc, #224]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fef6 	bl	8000e04 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7fe fef2 	bl	8000e04 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1c7      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4929      	ldr	r1, [pc, #164]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
 800204e:	e018      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe fed2 	bl	8000e04 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7fe fece 	bl	8000e04 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1a3      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d038      	beq.n	8002100 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe feaf 	bl	8000e04 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020aa:	f7fe feab 	bl	8000e04 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e180      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x23a>
 80020c8:	e01a      	b.n	8002100 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ce:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <HAL_RCC_OscConfig+0x280>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7fe fe95 	bl	8000e04 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020de:	f7fe fe91 	bl	8000e04 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d903      	bls.n	80020f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e166      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
 80020f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b92      	ldr	r3, [pc, #584]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a4 	beq.w	8002256 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b8c      	ldr	r3, [pc, #560]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b89      	ldr	r3, [pc, #548]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a88      	ldr	r2, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b86      	ldr	r3, [pc, #536]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002136:	4b83      	ldr	r3, [pc, #524]	; (8002344 <HAL_RCC_OscConfig+0x4d4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002142:	4b80      	ldr	r3, [pc, #512]	; (8002344 <HAL_RCC_OscConfig+0x4d4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7f      	ldr	r2, [pc, #508]	; (8002344 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7fe fe59 	bl	8000e04 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7fe fe55 	bl	8000e04 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e12a      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x4d4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x31a>
 800217c:	4b70      	ldr	r3, [pc, #448]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a6f      	ldr	r2, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_OscConfig+0x376>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x33c>
 8002192:	4b6b      	ldr	r3, [pc, #428]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	4b68      	ldr	r3, [pc, #416]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a67      	ldr	r2, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	e01c      	b.n	80021e6 <HAL_RCC_OscConfig+0x376>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x35e>
 80021b4:	4b62      	ldr	r3, [pc, #392]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a61      	ldr	r2, [pc, #388]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a5e      	ldr	r2, [pc, #376]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x376>
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
 80021da:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fe09 	bl	8000e04 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fe05 	bl	8000e04 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0d8      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ee      	beq.n	80021f6 <HAL_RCC_OscConfig+0x386>
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe fdf3 	bl	8000e04 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fdef 	bl	8000e04 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0c2      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a3c      	ldr	r2, [pc, #240]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80ae 	beq.w	80023bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002260:	4b37      	ldr	r3, [pc, #220]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d06d      	beq.n	8002348 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d14b      	bne.n	800230c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fdc0 	bl	8000e04 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fdbc 	bl	8000e04 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e091      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69da      	ldr	r2, [r3, #28]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	3b01      	subs	r3, #1
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	071b      	lsls	r3, r3, #28
 80022d2:	491b      	ldr	r1, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fd8e 	bl	8000e04 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe fd8a 	bl	8000e04 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e05f      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x47c>
 800230a:	e057      	b.n	80023bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fd74 	bl	8000e04 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fd70 	bl	8000e04 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e045      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x4b0>
 800233e:	e03d      	b.n	80023bc <HAL_RCC_OscConfig+0x54c>
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002348:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_RCC_OscConfig+0x558>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d030      	beq.n	80023b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d129      	bne.n	80023b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d122      	bne.n	80023b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002378:	4013      	ands	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800237e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002380:	4293      	cmp	r3, r2
 8002382:	d119      	bne.n	80023b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d10f      	bne.n	80023b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 020f 	bic.w	r2, r3, #15
 80023fa:	4965      	ldr	r1, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002436:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800244e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d040      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e073      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06b      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4936      	ldr	r1, [pc, #216]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7fe fca0 	bl	8000e04 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fc9c 	bl	8000e04 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e053      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d210      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 020f 	bic.w	r2, r3, #15
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1cc>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1d0>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fbfc 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00
 8002594:	40023800 	.word	0x40023800
 8002598:	080043b8 	.word	0x080043b8
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a8:	b094      	sub	sp, #80	; 0x50
 80025aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	647b      	str	r3, [r7, #68]	; 0x44
 80025b0:	2300      	movs	r3, #0
 80025b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b4:	2300      	movs	r3, #0
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025bc:	4b79      	ldr	r3, [pc, #484]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d00d      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x40>
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	f200 80e1 	bhi.w	8002790 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x34>
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x3a>
 80025d6:	e0db      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b73      	ldr	r3, [pc, #460]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025dc:	e0db      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025de:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e2:	e0d8      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e4:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d063      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fa:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	2200      	movs	r2, #0
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
 8002604:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
 8002612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002616:	4622      	mov	r2, r4
 8002618:	462b      	mov	r3, r5
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	0159      	lsls	r1, r3, #5
 8002624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002628:	0150      	lsls	r0, r2, #5
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4621      	mov	r1, r4
 8002630:	1a51      	subs	r1, r2, r1
 8002632:	6139      	str	r1, [r7, #16]
 8002634:	4629      	mov	r1, r5
 8002636:	eb63 0301 	sbc.w	r3, r3, r1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002648:	4659      	mov	r1, fp
 800264a:	018b      	lsls	r3, r1, #6
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002652:	4651      	mov	r1, sl
 8002654:	018a      	lsls	r2, r1, #6
 8002656:	4651      	mov	r1, sl
 8002658:	ebb2 0801 	subs.w	r8, r2, r1
 800265c:	4659      	mov	r1, fp
 800265e:	eb63 0901 	sbc.w	r9, r3, r1
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800266e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002676:	4690      	mov	r8, r2
 8002678:	4699      	mov	r9, r3
 800267a:	4623      	mov	r3, r4
 800267c:	eb18 0303 	adds.w	r3, r8, r3
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	462b      	mov	r3, r5
 8002684:	eb49 0303 	adc.w	r3, r9, r3
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002696:	4629      	mov	r1, r5
 8002698:	028b      	lsls	r3, r1, #10
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a0:	4621      	mov	r1, r4
 80026a2:	028a      	lsls	r2, r1, #10
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026aa:	2200      	movs	r2, #0
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026b4:	f7fd fe14 	bl	80002e0 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4613      	mov	r3, r2
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c0:	e058      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	2200      	movs	r2, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	4611      	mov	r1, r2
 80026ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026dc:	4642      	mov	r2, r8
 80026de:	464b      	mov	r3, r9
 80026e0:	f04f 0000 	mov.w	r0, #0
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	0159      	lsls	r1, r3, #5
 80026ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ee:	0150      	lsls	r0, r2, #5
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4641      	mov	r1, r8
 80026f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026fa:	4649      	mov	r1, r9
 80026fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800270c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002714:	ebb2 040a 	subs.w	r4, r2, sl
 8002718:	eb63 050b 	sbc.w	r5, r3, fp
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	00eb      	lsls	r3, r5, #3
 8002726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272a:	00e2      	lsls	r2, r4, #3
 800272c:	4614      	mov	r4, r2
 800272e:	461d      	mov	r5, r3
 8002730:	4643      	mov	r3, r8
 8002732:	18e3      	adds	r3, r4, r3
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	464b      	mov	r3, r9
 8002738:	eb45 0303 	adc.w	r3, r5, r3
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800274a:	4629      	mov	r1, r5
 800274c:	028b      	lsls	r3, r1, #10
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002754:	4621      	mov	r1, r4
 8002756:	028a      	lsls	r2, r1, #10
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	2200      	movs	r2, #0
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	61fa      	str	r2, [r7, #28]
 8002764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002768:	f7fd fdba 	bl	80002e0 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	3301      	adds	r3, #1
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002798:	4618      	mov	r0, r3
 800279a:	3750      	adds	r7, #80	; 0x50
 800279c:	46bd      	mov	sp, r7
 800279e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	00f42400 	.word	0x00f42400

080027ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000000 	.word	0x20000000

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c8:	f7ff fff0 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	080043c8 	.word	0x080043c8

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f0:	f7ff ffdc 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0b5b      	lsrs	r3, r3, #13
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	080043c8 	.word	0x080043c8

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800283c:	4b69      	ldr	r3, [pc, #420]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a68      	ldr	r2, [pc, #416]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002846:	6093      	str	r3, [r2, #8]
 8002848:	4b66      	ldr	r3, [pc, #408]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	4964      	ldr	r1, [pc, #400]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d017      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800286e:	4b5d      	ldr	r3, [pc, #372]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	4959      	ldr	r1, [pc, #356]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288c:	d101      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d017      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028aa:	4b4e      	ldr	r3, [pc, #312]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	494a      	ldr	r1, [pc, #296]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c8:	d101      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 808b 	beq.w	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fa72 	bl	8000e04 <HAL_GetTick>
 8002920:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002924:	f7fe fa6e 	bl	8000e04 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e38f      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002936:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d035      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d02e      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002982:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d114      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fa36 	bl	8000e04 <HAL_GetTick>
 8002998:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe fa32 	bl	8000e04 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e351      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ee      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ca:	d111      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029da:	400b      	ands	r3, r1
 80029dc:	4901      	ldr	r1, [pc, #4]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
 80029e2:	e00b      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000
 80029ec:	0ffffcff 	.word	0x0ffffcff
 80029f0:	4bac      	ldr	r3, [pc, #688]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4aab      	ldr	r2, [pc, #684]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	4ba9      	ldr	r3, [pc, #676]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	49a6      	ldr	r1, [pc, #664]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a1a:	4ba2      	ldr	r3, [pc, #648]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a20:	4aa0      	ldr	r2, [pc, #640]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a2a:	4b9e      	ldr	r3, [pc, #632]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	499b      	ldr	r1, [pc, #620]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a48:	4b96      	ldr	r3, [pc, #600]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a56:	4993      	ldr	r1, [pc, #588]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a6a:	4b8e      	ldr	r3, [pc, #568]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a78:	498a      	ldr	r1, [pc, #552]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a8c:	4b85      	ldr	r3, [pc, #532]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9a:	4982      	ldr	r1, [pc, #520]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002aae:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4979      	ldr	r1, [pc, #484]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad0:	4b74      	ldr	r3, [pc, #464]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4971      	ldr	r1, [pc, #452]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af2:	4b6c      	ldr	r3, [pc, #432]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f023 020c 	bic.w	r2, r3, #12
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b00:	4968      	ldr	r1, [pc, #416]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b14:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	4960      	ldr	r1, [pc, #384]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	4957      	ldr	r1, [pc, #348]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b58:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	494f      	ldr	r1, [pc, #316]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	4946      	ldr	r1, [pc, #280]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b9c:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	493e      	ldr	r1, [pc, #248]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bcc:	4935      	ldr	r1, [pc, #212]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002be0:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bee:	492d      	ldr	r1, [pc, #180]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d011      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c10:	4924      	ldr	r1, [pc, #144]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c20:	d101      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	4914      	ldr	r1, [pc, #80]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c74:	490b      	ldr	r1, [pc, #44]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00f      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c98:	4902      	ldr	r1, [pc, #8]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ca0:	e002      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	4986      	ldr	r1, [pc, #536]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cd8:	4b81      	ldr	r3, [pc, #516]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce8:	497d      	ldr	r1, [pc, #500]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d006      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80d6 	beq.w	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d04:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe f878 	bl	8000e04 <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d18:	f7fe f874 	bl	8000e04 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e195      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d021      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11d      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d4a:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d58:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5e:	0e1b      	lsrs	r3, r3, #24
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	019a      	lsls	r2, r3, #6
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	041b      	lsls	r3, r3, #16
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	071b      	lsls	r3, r3, #28
 8002d7e:	4958      	ldr	r1, [pc, #352]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02e      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db0:	d129      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db2:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc6:	0f1b      	lsrs	r3, r3, #28
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	019a      	lsls	r2, r3, #6
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	493e      	ldr	r1, [pc, #248]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dee:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df4:	f023 021f 	bic.w	r2, r3, #31
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	4938      	ldr	r1, [pc, #224]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01d      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e18:	0e1b      	lsrs	r3, r3, #24
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e26:	0f1b      	lsrs	r3, r3, #28
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	019a      	lsls	r2, r3, #6
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	071b      	lsls	r3, r3, #28
 8002e46:	4926      	ldr	r1, [pc, #152]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d011      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	019a      	lsls	r2, r3, #6
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	491a      	ldr	r1, [pc, #104]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8a:	f7fd ffbb 	bl	8000e04 <HAL_GetTick>
 8002e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e92:	f7fd ffb7 	bl	8000e04 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0d8      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	f040 80ce 	bne.w	8003054 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fd ff9e 	bl	8000e04 <HAL_GetTick>
 8002ec8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ecc:	f7fd ff9a 	bl	8000e04 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d904      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0bb      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d0ec      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02e      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12a      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f28:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	0f1b      	lsrs	r3, r3, #28
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4944      	ldr	r1, [pc, #272]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	493d      	ldr	r1, [pc, #244]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d022      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f84:	d11d      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	0e1b      	lsrs	r3, r3, #24
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	4929      	ldr	r1, [pc, #164]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d028      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	4917      	ldr	r1, [pc, #92]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	4911      	ldr	r1, [pc, #68]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fd feea 	bl	8000e04 <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003034:	f7fd fee6 	bl	8000e04 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e007      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003052:	d1ef      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e040      	b.n	80030f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fd70 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8b0 	bl	8003208 <UART_SetConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e022      	b.n	80030f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fb08 	bl	80036d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fb8f 	bl	8003814 <UART_CheckIdleState>
 80030f6:	4603      	mov	r3, r0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003114:	2b20      	cmp	r3, #32
 8003116:	d171      	bne.n	80031fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_UART_Transmit+0x24>
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e06a      	b.n	80031fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2221      	movs	r2, #33	; 0x21
 8003134:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003136:	f7fd fe65 	bl	8000e04 <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003154:	d108      	bne.n	8003168 <HAL_UART_Transmit+0x68>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d104      	bne.n	8003168 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	e003      	b.n	8003170 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003170:	e02c      	b.n	80031cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fb96 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e038      	b.n	80031fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	3302      	adds	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e007      	b.n	80031ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	3301      	adds	r3, #1
 80031b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1cc      	bne.n	8003172 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fb63 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e005      	b.n	80031fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4ba6      	ldr	r3, [pc, #664]	; (80034cc <UART_SetConfig+0x2c4>)
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6979      	ldr	r1, [r7, #20]
 800323c:	430b      	orrs	r3, r1
 800323e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a94      	ldr	r2, [pc, #592]	; (80034d0 <UART_SetConfig+0x2c8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d120      	bne.n	80032c6 <UART_SetConfig+0xbe>
 8003284:	4b93      	ldr	r3, [pc, #588]	; (80034d4 <UART_SetConfig+0x2cc>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d816      	bhi.n	80032c0 <UART_SetConfig+0xb8>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0x90>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032af 	.word	0x080032af
 80032a4:	080032bb 	.word	0x080032bb
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e150      	b.n	8003550 <UART_SetConfig+0x348>
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e14d      	b.n	8003550 <UART_SetConfig+0x348>
 80032b4:	2304      	movs	r3, #4
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e14a      	b.n	8003550 <UART_SetConfig+0x348>
 80032ba:	2308      	movs	r3, #8
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e147      	b.n	8003550 <UART_SetConfig+0x348>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e144      	b.n	8003550 <UART_SetConfig+0x348>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a83      	ldr	r2, [pc, #524]	; (80034d8 <UART_SetConfig+0x2d0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d132      	bne.n	8003336 <UART_SetConfig+0x12e>
 80032d0:	4b80      	ldr	r3, [pc, #512]	; (80034d4 <UART_SetConfig+0x2cc>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d828      	bhi.n	8003330 <UART_SetConfig+0x128>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0xdc>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003319 	.word	0x08003319
 80032e8:	08003331 	.word	0x08003331
 80032ec:	08003331 	.word	0x08003331
 80032f0:	08003331 	.word	0x08003331
 80032f4:	08003325 	.word	0x08003325
 80032f8:	08003331 	.word	0x08003331
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003331 	.word	0x08003331
 8003304:	0800331f 	.word	0x0800331f
 8003308:	08003331 	.word	0x08003331
 800330c:	08003331 	.word	0x08003331
 8003310:	08003331 	.word	0x08003331
 8003314:	0800332b 	.word	0x0800332b
 8003318:	2300      	movs	r3, #0
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e118      	b.n	8003550 <UART_SetConfig+0x348>
 800331e:	2302      	movs	r3, #2
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e115      	b.n	8003550 <UART_SetConfig+0x348>
 8003324:	2304      	movs	r3, #4
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e112      	b.n	8003550 <UART_SetConfig+0x348>
 800332a:	2308      	movs	r3, #8
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e10f      	b.n	8003550 <UART_SetConfig+0x348>
 8003330:	2310      	movs	r3, #16
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e10c      	b.n	8003550 <UART_SetConfig+0x348>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a68      	ldr	r2, [pc, #416]	; (80034dc <UART_SetConfig+0x2d4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d120      	bne.n	8003382 <UART_SetConfig+0x17a>
 8003340:	4b64      	ldr	r3, [pc, #400]	; (80034d4 <UART_SetConfig+0x2cc>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800334a:	2b30      	cmp	r3, #48	; 0x30
 800334c:	d013      	beq.n	8003376 <UART_SetConfig+0x16e>
 800334e:	2b30      	cmp	r3, #48	; 0x30
 8003350:	d814      	bhi.n	800337c <UART_SetConfig+0x174>
 8003352:	2b20      	cmp	r3, #32
 8003354:	d009      	beq.n	800336a <UART_SetConfig+0x162>
 8003356:	2b20      	cmp	r3, #32
 8003358:	d810      	bhi.n	800337c <UART_SetConfig+0x174>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <UART_SetConfig+0x15c>
 800335e:	2b10      	cmp	r3, #16
 8003360:	d006      	beq.n	8003370 <UART_SetConfig+0x168>
 8003362:	e00b      	b.n	800337c <UART_SetConfig+0x174>
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e0f2      	b.n	8003550 <UART_SetConfig+0x348>
 800336a:	2302      	movs	r3, #2
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e0ef      	b.n	8003550 <UART_SetConfig+0x348>
 8003370:	2304      	movs	r3, #4
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e0ec      	b.n	8003550 <UART_SetConfig+0x348>
 8003376:	2308      	movs	r3, #8
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e0e9      	b.n	8003550 <UART_SetConfig+0x348>
 800337c:	2310      	movs	r3, #16
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e0e6      	b.n	8003550 <UART_SetConfig+0x348>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a56      	ldr	r2, [pc, #344]	; (80034e0 <UART_SetConfig+0x2d8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d120      	bne.n	80033ce <UART_SetConfig+0x1c6>
 800338c:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <UART_SetConfig+0x2cc>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003396:	2bc0      	cmp	r3, #192	; 0xc0
 8003398:	d013      	beq.n	80033c2 <UART_SetConfig+0x1ba>
 800339a:	2bc0      	cmp	r3, #192	; 0xc0
 800339c:	d814      	bhi.n	80033c8 <UART_SetConfig+0x1c0>
 800339e:	2b80      	cmp	r3, #128	; 0x80
 80033a0:	d009      	beq.n	80033b6 <UART_SetConfig+0x1ae>
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d810      	bhi.n	80033c8 <UART_SetConfig+0x1c0>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <UART_SetConfig+0x1a8>
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d006      	beq.n	80033bc <UART_SetConfig+0x1b4>
 80033ae:	e00b      	b.n	80033c8 <UART_SetConfig+0x1c0>
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e0cc      	b.n	8003550 <UART_SetConfig+0x348>
 80033b6:	2302      	movs	r3, #2
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e0c9      	b.n	8003550 <UART_SetConfig+0x348>
 80033bc:	2304      	movs	r3, #4
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e0c6      	b.n	8003550 <UART_SetConfig+0x348>
 80033c2:	2308      	movs	r3, #8
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e0c3      	b.n	8003550 <UART_SetConfig+0x348>
 80033c8:	2310      	movs	r3, #16
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0c0      	b.n	8003550 <UART_SetConfig+0x348>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a44      	ldr	r2, [pc, #272]	; (80034e4 <UART_SetConfig+0x2dc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d125      	bne.n	8003424 <UART_SetConfig+0x21c>
 80033d8:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <UART_SetConfig+0x2cc>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e6:	d017      	beq.n	8003418 <UART_SetConfig+0x210>
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ec:	d817      	bhi.n	800341e <UART_SetConfig+0x216>
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f2:	d00b      	beq.n	800340c <UART_SetConfig+0x204>
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d811      	bhi.n	800341e <UART_SetConfig+0x216>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <UART_SetConfig+0x1fe>
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d006      	beq.n	8003412 <UART_SetConfig+0x20a>
 8003404:	e00b      	b.n	800341e <UART_SetConfig+0x216>
 8003406:	2300      	movs	r3, #0
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e0a1      	b.n	8003550 <UART_SetConfig+0x348>
 800340c:	2302      	movs	r3, #2
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e09e      	b.n	8003550 <UART_SetConfig+0x348>
 8003412:	2304      	movs	r3, #4
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e09b      	b.n	8003550 <UART_SetConfig+0x348>
 8003418:	2308      	movs	r3, #8
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e098      	b.n	8003550 <UART_SetConfig+0x348>
 800341e:	2310      	movs	r3, #16
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e095      	b.n	8003550 <UART_SetConfig+0x348>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <UART_SetConfig+0x2e0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d125      	bne.n	800347a <UART_SetConfig+0x272>
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <UART_SetConfig+0x2cc>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800343c:	d017      	beq.n	800346e <UART_SetConfig+0x266>
 800343e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003442:	d817      	bhi.n	8003474 <UART_SetConfig+0x26c>
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003448:	d00b      	beq.n	8003462 <UART_SetConfig+0x25a>
 800344a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344e:	d811      	bhi.n	8003474 <UART_SetConfig+0x26c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <UART_SetConfig+0x254>
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003458:	d006      	beq.n	8003468 <UART_SetConfig+0x260>
 800345a:	e00b      	b.n	8003474 <UART_SetConfig+0x26c>
 800345c:	2301      	movs	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e076      	b.n	8003550 <UART_SetConfig+0x348>
 8003462:	2302      	movs	r3, #2
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e073      	b.n	8003550 <UART_SetConfig+0x348>
 8003468:	2304      	movs	r3, #4
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e070      	b.n	8003550 <UART_SetConfig+0x348>
 800346e:	2308      	movs	r3, #8
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e06d      	b.n	8003550 <UART_SetConfig+0x348>
 8003474:	2310      	movs	r3, #16
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e06a      	b.n	8003550 <UART_SetConfig+0x348>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <UART_SetConfig+0x2e4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d138      	bne.n	80034f6 <UART_SetConfig+0x2ee>
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <UART_SetConfig+0x2cc>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800348e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003492:	d017      	beq.n	80034c4 <UART_SetConfig+0x2bc>
 8003494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003498:	d82a      	bhi.n	80034f0 <UART_SetConfig+0x2e8>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	d00b      	beq.n	80034b8 <UART_SetConfig+0x2b0>
 80034a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a4:	d824      	bhi.n	80034f0 <UART_SetConfig+0x2e8>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <UART_SetConfig+0x2aa>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	d006      	beq.n	80034be <UART_SetConfig+0x2b6>
 80034b0:	e01e      	b.n	80034f0 <UART_SetConfig+0x2e8>
 80034b2:	2300      	movs	r3, #0
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e04b      	b.n	8003550 <UART_SetConfig+0x348>
 80034b8:	2302      	movs	r3, #2
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e048      	b.n	8003550 <UART_SetConfig+0x348>
 80034be:	2304      	movs	r3, #4
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e045      	b.n	8003550 <UART_SetConfig+0x348>
 80034c4:	2308      	movs	r3, #8
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e042      	b.n	8003550 <UART_SetConfig+0x348>
 80034ca:	bf00      	nop
 80034cc:	efff69f3 	.word	0xefff69f3
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40004400 	.word	0x40004400
 80034dc:	40004800 	.word	0x40004800
 80034e0:	40004c00 	.word	0x40004c00
 80034e4:	40005000 	.word	0x40005000
 80034e8:	40011400 	.word	0x40011400
 80034ec:	40007800 	.word	0x40007800
 80034f0:	2310      	movs	r3, #16
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e02c      	b.n	8003550 <UART_SetConfig+0x348>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a72      	ldr	r2, [pc, #456]	; (80036c4 <UART_SetConfig+0x4bc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d125      	bne.n	800354c <UART_SetConfig+0x344>
 8003500:	4b71      	ldr	r3, [pc, #452]	; (80036c8 <UART_SetConfig+0x4c0>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800350a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800350e:	d017      	beq.n	8003540 <UART_SetConfig+0x338>
 8003510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003514:	d817      	bhi.n	8003546 <UART_SetConfig+0x33e>
 8003516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351a:	d00b      	beq.n	8003534 <UART_SetConfig+0x32c>
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003520:	d811      	bhi.n	8003546 <UART_SetConfig+0x33e>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <UART_SetConfig+0x326>
 8003526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800352a:	d006      	beq.n	800353a <UART_SetConfig+0x332>
 800352c:	e00b      	b.n	8003546 <UART_SetConfig+0x33e>
 800352e:	2300      	movs	r3, #0
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e00d      	b.n	8003550 <UART_SetConfig+0x348>
 8003534:	2302      	movs	r3, #2
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e00a      	b.n	8003550 <UART_SetConfig+0x348>
 800353a:	2304      	movs	r3, #4
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e007      	b.n	8003550 <UART_SetConfig+0x348>
 8003540:	2308      	movs	r3, #8
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x348>
 8003546:	2310      	movs	r3, #16
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e001      	b.n	8003550 <UART_SetConfig+0x348>
 800354c:	2310      	movs	r3, #16
 800354e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003558:	d15b      	bne.n	8003612 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800355a:	7ffb      	ldrb	r3, [r7, #31]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d828      	bhi.n	80035b2 <UART_SetConfig+0x3aa>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0x360>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800358d 	.word	0x0800358d
 800356c:	08003595 	.word	0x08003595
 8003570:	0800359d 	.word	0x0800359d
 8003574:	080035b3 	.word	0x080035b3
 8003578:	080035a3 	.word	0x080035a3
 800357c:	080035b3 	.word	0x080035b3
 8003580:	080035b3 	.word	0x080035b3
 8003584:	080035b3 	.word	0x080035b3
 8003588:	080035ab 	.word	0x080035ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358c:	f7ff f91a 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8003590:	61b8      	str	r0, [r7, #24]
        break;
 8003592:	e013      	b.n	80035bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003594:	f7ff f92a 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8003598:	61b8      	str	r0, [r7, #24]
        break;
 800359a:	e00f      	b.n	80035bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <UART_SetConfig+0x4c4>)
 800359e:	61bb      	str	r3, [r7, #24]
        break;
 80035a0:	e00c      	b.n	80035bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a2:	f7fe ffff 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 80035a6:	61b8      	str	r0, [r7, #24]
        break;
 80035a8:	e008      	b.n	80035bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ae:	61bb      	str	r3, [r7, #24]
        break;
 80035b0:	e004      	b.n	80035bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	77bb      	strb	r3, [r7, #30]
        break;
 80035ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d074      	beq.n	80036ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	005a      	lsls	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	441a      	add	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	d916      	bls.n	800360c <UART_SetConfig+0x404>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d212      	bcs.n	800360c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f023 030f 	bic.w	r3, r3, #15
 80035ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	89fb      	ldrh	r3, [r7, #14]
 80035fe:	4313      	orrs	r3, r2
 8003600:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	89fa      	ldrh	r2, [r7, #14]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	e04f      	b.n	80036ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77bb      	strb	r3, [r7, #30]
 8003610:	e04c      	b.n	80036ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d828      	bhi.n	800366a <UART_SetConfig+0x462>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0x418>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003645 	.word	0x08003645
 8003624:	0800364d 	.word	0x0800364d
 8003628:	08003655 	.word	0x08003655
 800362c:	0800366b 	.word	0x0800366b
 8003630:	0800365b 	.word	0x0800365b
 8003634:	0800366b 	.word	0x0800366b
 8003638:	0800366b 	.word	0x0800366b
 800363c:	0800366b 	.word	0x0800366b
 8003640:	08003663 	.word	0x08003663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003644:	f7ff f8be 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8003648:	61b8      	str	r0, [r7, #24]
        break;
 800364a:	e013      	b.n	8003674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800364c:	f7ff f8ce 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8003650:	61b8      	str	r0, [r7, #24]
        break;
 8003652:	e00f      	b.n	8003674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <UART_SetConfig+0x4c4>)
 8003656:	61bb      	str	r3, [r7, #24]
        break;
 8003658:	e00c      	b.n	8003674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365a:	f7fe ffa3 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800365e:	61b8      	str	r0, [r7, #24]
        break;
 8003660:	e008      	b.n	8003674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	61bb      	str	r3, [r7, #24]
        break;
 8003668:	e004      	b.n	8003674 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	77bb      	strb	r3, [r7, #30]
        break;
 8003672:	bf00      	nop
    }

    if (pclk != 0U)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d018      	beq.n	80036ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	085a      	lsrs	r2, r3, #1
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	441a      	add	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d909      	bls.n	80036a8 <UART_SetConfig+0x4a0>
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369a:	d205      	bcs.n	80036a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	e001      	b.n	80036ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40007c00 	.word	0x40007c00
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400

080036d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ce:	d10a      	bne.n	80037e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003824:	f7fd faee 	bl	8000e04 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d10e      	bne.n	8003856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f831 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e027      	b.n	80038a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d10e      	bne.n	8003882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f81b 	bl	80038ae <UART_WaitOnFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e011      	b.n	80038a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b09c      	sub	sp, #112	; 0x70
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4613      	mov	r3, r2
 80038bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038be:	e0a7      	b.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c6:	f000 80a3 	beq.w	8003a10 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fd fa9b 	bl	8000e04 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80038da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d13f      	bne.n	8003960 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038f4:	667b      	str	r3, [r7, #100]	; 0x64
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003900:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800390c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e6      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3308      	adds	r3, #8
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	663b      	str	r3, [r7, #96]	; 0x60
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3308      	adds	r3, #8
 8003930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003932:	64ba      	str	r2, [r7, #72]	; 0x48
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e5      	bne.n	8003912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e068      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d050      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d148      	bne.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003986:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800399c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
 80039a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e6      	bne.n	8003988 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3308      	adds	r3, #8
 80039c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	613b      	str	r3, [r7, #16]
   return(result);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3308      	adds	r3, #8
 80039d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039da:	623a      	str	r2, [r7, #32]
 80039dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e010      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	f43f af48 	beq.w	80038c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3770      	adds	r7, #112	; 0x70
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <__errno>:
 8003a3c:	4b01      	ldr	r3, [pc, #4]	; (8003a44 <__errno+0x8>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4d0d      	ldr	r5, [pc, #52]	; (8003a80 <__libc_init_array+0x38>)
 8003a4c:	4c0d      	ldr	r4, [pc, #52]	; (8003a84 <__libc_init_array+0x3c>)
 8003a4e:	1b64      	subs	r4, r4, r5
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	2600      	movs	r6, #0
 8003a54:	42a6      	cmp	r6, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	4d0b      	ldr	r5, [pc, #44]	; (8003a88 <__libc_init_array+0x40>)
 8003a5a:	4c0c      	ldr	r4, [pc, #48]	; (8003a8c <__libc_init_array+0x44>)
 8003a5c:	f000 fc8e 	bl	800437c <_init>
 8003a60:	1b64      	subs	r4, r4, r5
 8003a62:	10a4      	asrs	r4, r4, #2
 8003a64:	2600      	movs	r6, #0
 8003a66:	42a6      	cmp	r6, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a70:	4798      	blx	r3
 8003a72:	3601      	adds	r6, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7a:	4798      	blx	r3
 8003a7c:	3601      	adds	r6, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	0800440c 	.word	0x0800440c
 8003a84:	0800440c 	.word	0x0800440c
 8003a88:	0800440c 	.word	0x0800440c
 8003a8c:	08004410 	.word	0x08004410

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <siprintf>:
 8003aa0:	b40e      	push	{r1, r2, r3}
 8003aa2:	b500      	push	{lr}
 8003aa4:	b09c      	sub	sp, #112	; 0x70
 8003aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8003aa8:	9002      	str	r0, [sp, #8]
 8003aaa:	9006      	str	r0, [sp, #24]
 8003aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ab0:	4809      	ldr	r0, [pc, #36]	; (8003ad8 <siprintf+0x38>)
 8003ab2:	9107      	str	r1, [sp, #28]
 8003ab4:	9104      	str	r1, [sp, #16]
 8003ab6:	4909      	ldr	r1, [pc, #36]	; (8003adc <siprintf+0x3c>)
 8003ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003abc:	9105      	str	r1, [sp, #20]
 8003abe:	6800      	ldr	r0, [r0, #0]
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	a902      	add	r1, sp, #8
 8003ac4:	f000 f868 	bl	8003b98 <_svfiprintf_r>
 8003ac8:	9b02      	ldr	r3, [sp, #8]
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	b01c      	add	sp, #112	; 0x70
 8003ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ad4:	b003      	add	sp, #12
 8003ad6:	4770      	bx	lr
 8003ad8:	2000000c 	.word	0x2000000c
 8003adc:	ffff0208 	.word	0xffff0208

08003ae0 <__ssputs_r>:
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	688e      	ldr	r6, [r1, #8]
 8003ae6:	429e      	cmp	r6, r3
 8003ae8:	4682      	mov	sl, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	4690      	mov	r8, r2
 8003aee:	461f      	mov	r7, r3
 8003af0:	d838      	bhi.n	8003b64 <__ssputs_r+0x84>
 8003af2:	898a      	ldrh	r2, [r1, #12]
 8003af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003af8:	d032      	beq.n	8003b60 <__ssputs_r+0x80>
 8003afa:	6825      	ldr	r5, [r4, #0]
 8003afc:	6909      	ldr	r1, [r1, #16]
 8003afe:	eba5 0901 	sub.w	r9, r5, r1
 8003b02:	6965      	ldr	r5, [r4, #20]
 8003b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	444b      	add	r3, r9
 8003b10:	106d      	asrs	r5, r5, #1
 8003b12:	429d      	cmp	r5, r3
 8003b14:	bf38      	it	cc
 8003b16:	461d      	movcc	r5, r3
 8003b18:	0553      	lsls	r3, r2, #21
 8003b1a:	d531      	bpl.n	8003b80 <__ssputs_r+0xa0>
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	f000 fb63 	bl	80041e8 <_malloc_r>
 8003b22:	4606      	mov	r6, r0
 8003b24:	b950      	cbnz	r0, 8003b3c <__ssputs_r+0x5c>
 8003b26:	230c      	movs	r3, #12
 8003b28:	f8ca 3000 	str.w	r3, [sl]
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b32:	81a3      	strh	r3, [r4, #12]
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3c:	6921      	ldr	r1, [r4, #16]
 8003b3e:	464a      	mov	r2, r9
 8003b40:	f000 fabe 	bl	80040c0 <memcpy>
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4e:	81a3      	strh	r3, [r4, #12]
 8003b50:	6126      	str	r6, [r4, #16]
 8003b52:	6165      	str	r5, [r4, #20]
 8003b54:	444e      	add	r6, r9
 8003b56:	eba5 0509 	sub.w	r5, r5, r9
 8003b5a:	6026      	str	r6, [r4, #0]
 8003b5c:	60a5      	str	r5, [r4, #8]
 8003b5e:	463e      	mov	r6, r7
 8003b60:	42be      	cmp	r6, r7
 8003b62:	d900      	bls.n	8003b66 <__ssputs_r+0x86>
 8003b64:	463e      	mov	r6, r7
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	4632      	mov	r2, r6
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	f000 fab6 	bl	80040dc <memmove>
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	1b9b      	subs	r3, r3, r6
 8003b74:	60a3      	str	r3, [r4, #8]
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	4433      	add	r3, r6
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	e7db      	b.n	8003b38 <__ssputs_r+0x58>
 8003b80:	462a      	mov	r2, r5
 8003b82:	f000 fba5 	bl	80042d0 <_realloc_r>
 8003b86:	4606      	mov	r6, r0
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d1e1      	bne.n	8003b50 <__ssputs_r+0x70>
 8003b8c:	6921      	ldr	r1, [r4, #16]
 8003b8e:	4650      	mov	r0, sl
 8003b90:	f000 fabe 	bl	8004110 <_free_r>
 8003b94:	e7c7      	b.n	8003b26 <__ssputs_r+0x46>
	...

08003b98 <_svfiprintf_r>:
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	4698      	mov	r8, r3
 8003b9e:	898b      	ldrh	r3, [r1, #12]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	b09d      	sub	sp, #116	; 0x74
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	d50e      	bpl.n	8003bca <_svfiprintf_r+0x32>
 8003bac:	690b      	ldr	r3, [r1, #16]
 8003bae:	b963      	cbnz	r3, 8003bca <_svfiprintf_r+0x32>
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	f000 fb19 	bl	80041e8 <_malloc_r>
 8003bb6:	6028      	str	r0, [r5, #0]
 8003bb8:	6128      	str	r0, [r5, #16]
 8003bba:	b920      	cbnz	r0, 8003bc6 <_svfiprintf_r+0x2e>
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bc4:	e0d1      	b.n	8003d6a <_svfiprintf_r+0x1d2>
 8003bc6:	2340      	movs	r3, #64	; 0x40
 8003bc8:	616b      	str	r3, [r5, #20]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bce:	2320      	movs	r3, #32
 8003bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bd8:	2330      	movs	r3, #48	; 0x30
 8003bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d84 <_svfiprintf_r+0x1ec>
 8003bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003be2:	f04f 0901 	mov.w	r9, #1
 8003be6:	4623      	mov	r3, r4
 8003be8:	469a      	mov	sl, r3
 8003bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bee:	b10a      	cbz	r2, 8003bf4 <_svfiprintf_r+0x5c>
 8003bf0:	2a25      	cmp	r2, #37	; 0x25
 8003bf2:	d1f9      	bne.n	8003be8 <_svfiprintf_r+0x50>
 8003bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf8:	d00b      	beq.n	8003c12 <_svfiprintf_r+0x7a>
 8003bfa:	465b      	mov	r3, fp
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	4629      	mov	r1, r5
 8003c00:	4638      	mov	r0, r7
 8003c02:	f7ff ff6d 	bl	8003ae0 <__ssputs_r>
 8003c06:	3001      	adds	r0, #1
 8003c08:	f000 80aa 	beq.w	8003d60 <_svfiprintf_r+0x1c8>
 8003c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c0e:	445a      	add	r2, fp
 8003c10:	9209      	str	r2, [sp, #36]	; 0x24
 8003c12:	f89a 3000 	ldrb.w	r3, [sl]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80a2 	beq.w	8003d60 <_svfiprintf_r+0x1c8>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c26:	f10a 0a01 	add.w	sl, sl, #1
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	9307      	str	r3, [sp, #28]
 8003c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c32:	931a      	str	r3, [sp, #104]	; 0x68
 8003c34:	4654      	mov	r4, sl
 8003c36:	2205      	movs	r2, #5
 8003c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3c:	4851      	ldr	r0, [pc, #324]	; (8003d84 <_svfiprintf_r+0x1ec>)
 8003c3e:	f7fc faff 	bl	8000240 <memchr>
 8003c42:	9a04      	ldr	r2, [sp, #16]
 8003c44:	b9d8      	cbnz	r0, 8003c7e <_svfiprintf_r+0xe6>
 8003c46:	06d0      	lsls	r0, r2, #27
 8003c48:	bf44      	itt	mi
 8003c4a:	2320      	movmi	r3, #32
 8003c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c50:	0711      	lsls	r1, r2, #28
 8003c52:	bf44      	itt	mi
 8003c54:	232b      	movmi	r3, #43	; 0x2b
 8003c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c60:	d015      	beq.n	8003c8e <_svfiprintf_r+0xf6>
 8003c62:	9a07      	ldr	r2, [sp, #28]
 8003c64:	4654      	mov	r4, sl
 8003c66:	2000      	movs	r0, #0
 8003c68:	f04f 0c0a 	mov.w	ip, #10
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c72:	3b30      	subs	r3, #48	; 0x30
 8003c74:	2b09      	cmp	r3, #9
 8003c76:	d94e      	bls.n	8003d16 <_svfiprintf_r+0x17e>
 8003c78:	b1b0      	cbz	r0, 8003ca8 <_svfiprintf_r+0x110>
 8003c7a:	9207      	str	r2, [sp, #28]
 8003c7c:	e014      	b.n	8003ca8 <_svfiprintf_r+0x110>
 8003c7e:	eba0 0308 	sub.w	r3, r0, r8
 8003c82:	fa09 f303 	lsl.w	r3, r9, r3
 8003c86:	4313      	orrs	r3, r2
 8003c88:	9304      	str	r3, [sp, #16]
 8003c8a:	46a2      	mov	sl, r4
 8003c8c:	e7d2      	b.n	8003c34 <_svfiprintf_r+0x9c>
 8003c8e:	9b03      	ldr	r3, [sp, #12]
 8003c90:	1d19      	adds	r1, r3, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	9103      	str	r1, [sp, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bfbb      	ittet	lt
 8003c9a:	425b      	neglt	r3, r3
 8003c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca0:	9307      	strge	r3, [sp, #28]
 8003ca2:	9307      	strlt	r3, [sp, #28]
 8003ca4:	bfb8      	it	lt
 8003ca6:	9204      	strlt	r2, [sp, #16]
 8003ca8:	7823      	ldrb	r3, [r4, #0]
 8003caa:	2b2e      	cmp	r3, #46	; 0x2e
 8003cac:	d10c      	bne.n	8003cc8 <_svfiprintf_r+0x130>
 8003cae:	7863      	ldrb	r3, [r4, #1]
 8003cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb2:	d135      	bne.n	8003d20 <_svfiprintf_r+0x188>
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	1d1a      	adds	r2, r3, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	9203      	str	r2, [sp, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfb8      	it	lt
 8003cc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003cc4:	3402      	adds	r4, #2
 8003cc6:	9305      	str	r3, [sp, #20]
 8003cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d94 <_svfiprintf_r+0x1fc>
 8003ccc:	7821      	ldrb	r1, [r4, #0]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	f7fc fab5 	bl	8000240 <memchr>
 8003cd6:	b140      	cbz	r0, 8003cea <_svfiprintf_r+0x152>
 8003cd8:	2340      	movs	r3, #64	; 0x40
 8003cda:	eba0 000a 	sub.w	r0, r0, sl
 8003cde:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce2:	9b04      	ldr	r3, [sp, #16]
 8003ce4:	4303      	orrs	r3, r0
 8003ce6:	3401      	adds	r4, #1
 8003ce8:	9304      	str	r3, [sp, #16]
 8003cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cee:	4826      	ldr	r0, [pc, #152]	; (8003d88 <_svfiprintf_r+0x1f0>)
 8003cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cf4:	2206      	movs	r2, #6
 8003cf6:	f7fc faa3 	bl	8000240 <memchr>
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d038      	beq.n	8003d70 <_svfiprintf_r+0x1d8>
 8003cfe:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <_svfiprintf_r+0x1f4>)
 8003d00:	bb1b      	cbnz	r3, 8003d4a <_svfiprintf_r+0x1b2>
 8003d02:	9b03      	ldr	r3, [sp, #12]
 8003d04:	3307      	adds	r3, #7
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	9303      	str	r3, [sp, #12]
 8003d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d10:	4433      	add	r3, r6
 8003d12:	9309      	str	r3, [sp, #36]	; 0x24
 8003d14:	e767      	b.n	8003be6 <_svfiprintf_r+0x4e>
 8003d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	e7a5      	b.n	8003c6c <_svfiprintf_r+0xd4>
 8003d20:	2300      	movs	r3, #0
 8003d22:	3401      	adds	r4, #1
 8003d24:	9305      	str	r3, [sp, #20]
 8003d26:	4619      	mov	r1, r3
 8003d28:	f04f 0c0a 	mov.w	ip, #10
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d32:	3a30      	subs	r2, #48	; 0x30
 8003d34:	2a09      	cmp	r2, #9
 8003d36:	d903      	bls.n	8003d40 <_svfiprintf_r+0x1a8>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0c5      	beq.n	8003cc8 <_svfiprintf_r+0x130>
 8003d3c:	9105      	str	r1, [sp, #20]
 8003d3e:	e7c3      	b.n	8003cc8 <_svfiprintf_r+0x130>
 8003d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d44:	4604      	mov	r4, r0
 8003d46:	2301      	movs	r3, #1
 8003d48:	e7f0      	b.n	8003d2c <_svfiprintf_r+0x194>
 8003d4a:	ab03      	add	r3, sp, #12
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	462a      	mov	r2, r5
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <_svfiprintf_r+0x1f8>)
 8003d52:	a904      	add	r1, sp, #16
 8003d54:	4638      	mov	r0, r7
 8003d56:	f3af 8000 	nop.w
 8003d5a:	1c42      	adds	r2, r0, #1
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	d1d6      	bne.n	8003d0e <_svfiprintf_r+0x176>
 8003d60:	89ab      	ldrh	r3, [r5, #12]
 8003d62:	065b      	lsls	r3, r3, #25
 8003d64:	f53f af2c 	bmi.w	8003bc0 <_svfiprintf_r+0x28>
 8003d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d6a:	b01d      	add	sp, #116	; 0x74
 8003d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d70:	ab03      	add	r3, sp, #12
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	462a      	mov	r2, r5
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <_svfiprintf_r+0x1f8>)
 8003d78:	a904      	add	r1, sp, #16
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	f000 f87a 	bl	8003e74 <_printf_i>
 8003d80:	e7eb      	b.n	8003d5a <_svfiprintf_r+0x1c2>
 8003d82:	bf00      	nop
 8003d84:	080043d0 	.word	0x080043d0
 8003d88:	080043da 	.word	0x080043da
 8003d8c:	00000000 	.word	0x00000000
 8003d90:	08003ae1 	.word	0x08003ae1
 8003d94:	080043d6 	.word	0x080043d6

08003d98 <_printf_common>:
 8003d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d9c:	4616      	mov	r6, r2
 8003d9e:	4699      	mov	r9, r3
 8003da0:	688a      	ldr	r2, [r1, #8]
 8003da2:	690b      	ldr	r3, [r1, #16]
 8003da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bfb8      	it	lt
 8003dac:	4613      	movlt	r3, r2
 8003dae:	6033      	str	r3, [r6, #0]
 8003db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db4:	4607      	mov	r7, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	b10a      	cbz	r2, 8003dbe <_printf_common+0x26>
 8003dba:	3301      	adds	r3, #1
 8003dbc:	6033      	str	r3, [r6, #0]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	0699      	lsls	r1, r3, #26
 8003dc2:	bf42      	ittt	mi
 8003dc4:	6833      	ldrmi	r3, [r6, #0]
 8003dc6:	3302      	addmi	r3, #2
 8003dc8:	6033      	strmi	r3, [r6, #0]
 8003dca:	6825      	ldr	r5, [r4, #0]
 8003dcc:	f015 0506 	ands.w	r5, r5, #6
 8003dd0:	d106      	bne.n	8003de0 <_printf_common+0x48>
 8003dd2:	f104 0a19 	add.w	sl, r4, #25
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	6832      	ldr	r2, [r6, #0]
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	42ab      	cmp	r3, r5
 8003dde:	dc26      	bgt.n	8003e2e <_printf_common+0x96>
 8003de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003de4:	1e13      	subs	r3, r2, #0
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	bf18      	it	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	0692      	lsls	r2, r2, #26
 8003dee:	d42b      	bmi.n	8003e48 <_printf_common+0xb0>
 8003df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df4:	4649      	mov	r1, r9
 8003df6:	4638      	mov	r0, r7
 8003df8:	47c0      	blx	r8
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d01e      	beq.n	8003e3c <_printf_common+0xa4>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	68e5      	ldr	r5, [r4, #12]
 8003e02:	6832      	ldr	r2, [r6, #0]
 8003e04:	f003 0306 	and.w	r3, r3, #6
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	bf08      	it	eq
 8003e0c:	1aad      	subeq	r5, r5, r2
 8003e0e:	68a3      	ldr	r3, [r4, #8]
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	bf0c      	ite	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	2500      	movne	r5, #0
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	bfc4      	itt	gt
 8003e1e:	1a9b      	subgt	r3, r3, r2
 8003e20:	18ed      	addgt	r5, r5, r3
 8003e22:	2600      	movs	r6, #0
 8003e24:	341a      	adds	r4, #26
 8003e26:	42b5      	cmp	r5, r6
 8003e28:	d11a      	bne.n	8003e60 <_printf_common+0xc8>
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	e008      	b.n	8003e40 <_printf_common+0xa8>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4652      	mov	r2, sl
 8003e32:	4649      	mov	r1, r9
 8003e34:	4638      	mov	r0, r7
 8003e36:	47c0      	blx	r8
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d103      	bne.n	8003e44 <_printf_common+0xac>
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e44:	3501      	adds	r5, #1
 8003e46:	e7c6      	b.n	8003dd6 <_printf_common+0x3e>
 8003e48:	18e1      	adds	r1, r4, r3
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	2030      	movs	r0, #48	; 0x30
 8003e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e52:	4422      	add	r2, r4
 8003e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	e7c7      	b.n	8003df0 <_printf_common+0x58>
 8003e60:	2301      	movs	r3, #1
 8003e62:	4622      	mov	r2, r4
 8003e64:	4649      	mov	r1, r9
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c0      	blx	r8
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d0e6      	beq.n	8003e3c <_printf_common+0xa4>
 8003e6e:	3601      	adds	r6, #1
 8003e70:	e7d9      	b.n	8003e26 <_printf_common+0x8e>
	...

08003e74 <_printf_i>:
 8003e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	7e0f      	ldrb	r7, [r1, #24]
 8003e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e7c:	2f78      	cmp	r7, #120	; 0x78
 8003e7e:	4691      	mov	r9, r2
 8003e80:	4680      	mov	r8, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	469a      	mov	sl, r3
 8003e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e8a:	d807      	bhi.n	8003e9c <_printf_i+0x28>
 8003e8c:	2f62      	cmp	r7, #98	; 0x62
 8003e8e:	d80a      	bhi.n	8003ea6 <_printf_i+0x32>
 8003e90:	2f00      	cmp	r7, #0
 8003e92:	f000 80d8 	beq.w	8004046 <_printf_i+0x1d2>
 8003e96:	2f58      	cmp	r7, #88	; 0x58
 8003e98:	f000 80a3 	beq.w	8003fe2 <_printf_i+0x16e>
 8003e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea4:	e03a      	b.n	8003f1c <_printf_i+0xa8>
 8003ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eaa:	2b15      	cmp	r3, #21
 8003eac:	d8f6      	bhi.n	8003e9c <_printf_i+0x28>
 8003eae:	a101      	add	r1, pc, #4	; (adr r1, 8003eb4 <_printf_i+0x40>)
 8003eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb4:	08003f0d 	.word	0x08003f0d
 8003eb8:	08003f21 	.word	0x08003f21
 8003ebc:	08003e9d 	.word	0x08003e9d
 8003ec0:	08003e9d 	.word	0x08003e9d
 8003ec4:	08003e9d 	.word	0x08003e9d
 8003ec8:	08003e9d 	.word	0x08003e9d
 8003ecc:	08003f21 	.word	0x08003f21
 8003ed0:	08003e9d 	.word	0x08003e9d
 8003ed4:	08003e9d 	.word	0x08003e9d
 8003ed8:	08003e9d 	.word	0x08003e9d
 8003edc:	08003e9d 	.word	0x08003e9d
 8003ee0:	0800402d 	.word	0x0800402d
 8003ee4:	08003f51 	.word	0x08003f51
 8003ee8:	0800400f 	.word	0x0800400f
 8003eec:	08003e9d 	.word	0x08003e9d
 8003ef0:	08003e9d 	.word	0x08003e9d
 8003ef4:	0800404f 	.word	0x0800404f
 8003ef8:	08003e9d 	.word	0x08003e9d
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003e9d 	.word	0x08003e9d
 8003f04:	08003e9d 	.word	0x08003e9d
 8003f08:	08004017 	.word	0x08004017
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0a3      	b.n	8004068 <_printf_i+0x1f4>
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	6829      	ldr	r1, [r5, #0]
 8003f24:	0606      	lsls	r6, r0, #24
 8003f26:	f101 0304 	add.w	r3, r1, #4
 8003f2a:	d50a      	bpl.n	8003f42 <_printf_i+0xce>
 8003f2c:	680e      	ldr	r6, [r1, #0]
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	2e00      	cmp	r6, #0
 8003f32:	da03      	bge.n	8003f3c <_printf_i+0xc8>
 8003f34:	232d      	movs	r3, #45	; 0x2d
 8003f36:	4276      	negs	r6, r6
 8003f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f3c:	485e      	ldr	r0, [pc, #376]	; (80040b8 <_printf_i+0x244>)
 8003f3e:	230a      	movs	r3, #10
 8003f40:	e019      	b.n	8003f76 <_printf_i+0x102>
 8003f42:	680e      	ldr	r6, [r1, #0]
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f4a:	bf18      	it	ne
 8003f4c:	b236      	sxthne	r6, r6
 8003f4e:	e7ef      	b.n	8003f30 <_printf_i+0xbc>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	1d19      	adds	r1, r3, #4
 8003f56:	6029      	str	r1, [r5, #0]
 8003f58:	0601      	lsls	r1, r0, #24
 8003f5a:	d501      	bpl.n	8003f60 <_printf_i+0xec>
 8003f5c:	681e      	ldr	r6, [r3, #0]
 8003f5e:	e002      	b.n	8003f66 <_printf_i+0xf2>
 8003f60:	0646      	lsls	r6, r0, #25
 8003f62:	d5fb      	bpl.n	8003f5c <_printf_i+0xe8>
 8003f64:	881e      	ldrh	r6, [r3, #0]
 8003f66:	4854      	ldr	r0, [pc, #336]	; (80040b8 <_printf_i+0x244>)
 8003f68:	2f6f      	cmp	r7, #111	; 0x6f
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2308      	moveq	r3, #8
 8003f6e:	230a      	movne	r3, #10
 8003f70:	2100      	movs	r1, #0
 8003f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f76:	6865      	ldr	r5, [r4, #4]
 8003f78:	60a5      	str	r5, [r4, #8]
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	bfa2      	ittt	ge
 8003f7e:	6821      	ldrge	r1, [r4, #0]
 8003f80:	f021 0104 	bicge.w	r1, r1, #4
 8003f84:	6021      	strge	r1, [r4, #0]
 8003f86:	b90e      	cbnz	r6, 8003f8c <_printf_i+0x118>
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	d04d      	beq.n	8004028 <_printf_i+0x1b4>
 8003f8c:	4615      	mov	r5, r2
 8003f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f92:	fb03 6711 	mls	r7, r3, r1, r6
 8003f96:	5dc7      	ldrb	r7, [r0, r7]
 8003f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f9c:	4637      	mov	r7, r6
 8003f9e:	42bb      	cmp	r3, r7
 8003fa0:	460e      	mov	r6, r1
 8003fa2:	d9f4      	bls.n	8003f8e <_printf_i+0x11a>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d10b      	bne.n	8003fc0 <_printf_i+0x14c>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	07de      	lsls	r6, r3, #31
 8003fac:	d508      	bpl.n	8003fc0 <_printf_i+0x14c>
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	6861      	ldr	r1, [r4, #4]
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	bfde      	ittt	le
 8003fb6:	2330      	movle	r3, #48	; 0x30
 8003fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fc0:	1b52      	subs	r2, r2, r5
 8003fc2:	6122      	str	r2, [r4, #16]
 8003fc4:	f8cd a000 	str.w	sl, [sp]
 8003fc8:	464b      	mov	r3, r9
 8003fca:	aa03      	add	r2, sp, #12
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4640      	mov	r0, r8
 8003fd0:	f7ff fee2 	bl	8003d98 <_printf_common>
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d14c      	bne.n	8004072 <_printf_i+0x1fe>
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fdc:	b004      	add	sp, #16
 8003fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe2:	4835      	ldr	r0, [pc, #212]	; (80040b8 <_printf_i+0x244>)
 8003fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fe8:	6829      	ldr	r1, [r5, #0]
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ff0:	6029      	str	r1, [r5, #0]
 8003ff2:	061d      	lsls	r5, r3, #24
 8003ff4:	d514      	bpl.n	8004020 <_printf_i+0x1ac>
 8003ff6:	07df      	lsls	r7, r3, #31
 8003ff8:	bf44      	itt	mi
 8003ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffe:	6023      	strmi	r3, [r4, #0]
 8004000:	b91e      	cbnz	r6, 800400a <_printf_i+0x196>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	f023 0320 	bic.w	r3, r3, #32
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	2310      	movs	r3, #16
 800400c:	e7b0      	b.n	8003f70 <_printf_i+0xfc>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f043 0320 	orr.w	r3, r3, #32
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	2378      	movs	r3, #120	; 0x78
 8004018:	4828      	ldr	r0, [pc, #160]	; (80040bc <_printf_i+0x248>)
 800401a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401e:	e7e3      	b.n	8003fe8 <_printf_i+0x174>
 8004020:	0659      	lsls	r1, r3, #25
 8004022:	bf48      	it	mi
 8004024:	b2b6      	uxthmi	r6, r6
 8004026:	e7e6      	b.n	8003ff6 <_printf_i+0x182>
 8004028:	4615      	mov	r5, r2
 800402a:	e7bb      	b.n	8003fa4 <_printf_i+0x130>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	6826      	ldr	r6, [r4, #0]
 8004030:	6961      	ldr	r1, [r4, #20]
 8004032:	1d18      	adds	r0, r3, #4
 8004034:	6028      	str	r0, [r5, #0]
 8004036:	0635      	lsls	r5, r6, #24
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	d501      	bpl.n	8004040 <_printf_i+0x1cc>
 800403c:	6019      	str	r1, [r3, #0]
 800403e:	e002      	b.n	8004046 <_printf_i+0x1d2>
 8004040:	0670      	lsls	r0, r6, #25
 8004042:	d5fb      	bpl.n	800403c <_printf_i+0x1c8>
 8004044:	8019      	strh	r1, [r3, #0]
 8004046:	2300      	movs	r3, #0
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	4615      	mov	r5, r2
 800404c:	e7ba      	b.n	8003fc4 <_printf_i+0x150>
 800404e:	682b      	ldr	r3, [r5, #0]
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	602a      	str	r2, [r5, #0]
 8004054:	681d      	ldr	r5, [r3, #0]
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	2100      	movs	r1, #0
 800405a:	4628      	mov	r0, r5
 800405c:	f7fc f8f0 	bl	8000240 <memchr>
 8004060:	b108      	cbz	r0, 8004066 <_printf_i+0x1f2>
 8004062:	1b40      	subs	r0, r0, r5
 8004064:	6060      	str	r0, [r4, #4]
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	6123      	str	r3, [r4, #16]
 800406a:	2300      	movs	r3, #0
 800406c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004070:	e7a8      	b.n	8003fc4 <_printf_i+0x150>
 8004072:	6923      	ldr	r3, [r4, #16]
 8004074:	462a      	mov	r2, r5
 8004076:	4649      	mov	r1, r9
 8004078:	4640      	mov	r0, r8
 800407a:	47d0      	blx	sl
 800407c:	3001      	adds	r0, #1
 800407e:	d0ab      	beq.n	8003fd8 <_printf_i+0x164>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	079b      	lsls	r3, r3, #30
 8004084:	d413      	bmi.n	80040ae <_printf_i+0x23a>
 8004086:	68e0      	ldr	r0, [r4, #12]
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	4298      	cmp	r0, r3
 800408c:	bfb8      	it	lt
 800408e:	4618      	movlt	r0, r3
 8004090:	e7a4      	b.n	8003fdc <_printf_i+0x168>
 8004092:	2301      	movs	r3, #1
 8004094:	4632      	mov	r2, r6
 8004096:	4649      	mov	r1, r9
 8004098:	4640      	mov	r0, r8
 800409a:	47d0      	blx	sl
 800409c:	3001      	adds	r0, #1
 800409e:	d09b      	beq.n	8003fd8 <_printf_i+0x164>
 80040a0:	3501      	adds	r5, #1
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	9903      	ldr	r1, [sp, #12]
 80040a6:	1a5b      	subs	r3, r3, r1
 80040a8:	42ab      	cmp	r3, r5
 80040aa:	dcf2      	bgt.n	8004092 <_printf_i+0x21e>
 80040ac:	e7eb      	b.n	8004086 <_printf_i+0x212>
 80040ae:	2500      	movs	r5, #0
 80040b0:	f104 0619 	add.w	r6, r4, #25
 80040b4:	e7f5      	b.n	80040a2 <_printf_i+0x22e>
 80040b6:	bf00      	nop
 80040b8:	080043e1 	.word	0x080043e1
 80040bc:	080043f2 	.word	0x080043f2

080040c0 <memcpy>:
 80040c0:	440a      	add	r2, r1
 80040c2:	4291      	cmp	r1, r2
 80040c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80040c8:	d100      	bne.n	80040cc <memcpy+0xc>
 80040ca:	4770      	bx	lr
 80040cc:	b510      	push	{r4, lr}
 80040ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040d6:	4291      	cmp	r1, r2
 80040d8:	d1f9      	bne.n	80040ce <memcpy+0xe>
 80040da:	bd10      	pop	{r4, pc}

080040dc <memmove>:
 80040dc:	4288      	cmp	r0, r1
 80040de:	b510      	push	{r4, lr}
 80040e0:	eb01 0402 	add.w	r4, r1, r2
 80040e4:	d902      	bls.n	80040ec <memmove+0x10>
 80040e6:	4284      	cmp	r4, r0
 80040e8:	4623      	mov	r3, r4
 80040ea:	d807      	bhi.n	80040fc <memmove+0x20>
 80040ec:	1e43      	subs	r3, r0, #1
 80040ee:	42a1      	cmp	r1, r4
 80040f0:	d008      	beq.n	8004104 <memmove+0x28>
 80040f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040fa:	e7f8      	b.n	80040ee <memmove+0x12>
 80040fc:	4402      	add	r2, r0
 80040fe:	4601      	mov	r1, r0
 8004100:	428a      	cmp	r2, r1
 8004102:	d100      	bne.n	8004106 <memmove+0x2a>
 8004104:	bd10      	pop	{r4, pc}
 8004106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800410a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800410e:	e7f7      	b.n	8004100 <memmove+0x24>

08004110 <_free_r>:
 8004110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004112:	2900      	cmp	r1, #0
 8004114:	d044      	beq.n	80041a0 <_free_r+0x90>
 8004116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411a:	9001      	str	r0, [sp, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f1a1 0404 	sub.w	r4, r1, #4
 8004122:	bfb8      	it	lt
 8004124:	18e4      	addlt	r4, r4, r3
 8004126:	f000 f913 	bl	8004350 <__malloc_lock>
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <_free_r+0x94>)
 800412c:	9801      	ldr	r0, [sp, #4]
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	b933      	cbnz	r3, 8004140 <_free_r+0x30>
 8004132:	6063      	str	r3, [r4, #4]
 8004134:	6014      	str	r4, [r2, #0]
 8004136:	b003      	add	sp, #12
 8004138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800413c:	f000 b90e 	b.w	800435c <__malloc_unlock>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d908      	bls.n	8004156 <_free_r+0x46>
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1961      	adds	r1, r4, r5
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1949      	addeq	r1, r1, r5
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	e7ed      	b.n	8004132 <_free_r+0x22>
 8004156:	461a      	mov	r2, r3
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b10b      	cbz	r3, 8004160 <_free_r+0x50>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d9fa      	bls.n	8004156 <_free_r+0x46>
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	1855      	adds	r5, r2, r1
 8004164:	42a5      	cmp	r5, r4
 8004166:	d10b      	bne.n	8004180 <_free_r+0x70>
 8004168:	6824      	ldr	r4, [r4, #0]
 800416a:	4421      	add	r1, r4
 800416c:	1854      	adds	r4, r2, r1
 800416e:	42a3      	cmp	r3, r4
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	d1e0      	bne.n	8004136 <_free_r+0x26>
 8004174:	681c      	ldr	r4, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	6053      	str	r3, [r2, #4]
 800417a:	4421      	add	r1, r4
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	e7da      	b.n	8004136 <_free_r+0x26>
 8004180:	d902      	bls.n	8004188 <_free_r+0x78>
 8004182:	230c      	movs	r3, #12
 8004184:	6003      	str	r3, [r0, #0]
 8004186:	e7d6      	b.n	8004136 <_free_r+0x26>
 8004188:	6825      	ldr	r5, [r4, #0]
 800418a:	1961      	adds	r1, r4, r5
 800418c:	428b      	cmp	r3, r1
 800418e:	bf04      	itt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	bf04      	itt	eq
 8004198:	1949      	addeq	r1, r1, r5
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	6054      	str	r4, [r2, #4]
 800419e:	e7ca      	b.n	8004136 <_free_r+0x26>
 80041a0:	b003      	add	sp, #12
 80041a2:	bd30      	pop	{r4, r5, pc}
 80041a4:	20000170 	.word	0x20000170

080041a8 <sbrk_aligned>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4e0e      	ldr	r6, [pc, #56]	; (80041e4 <sbrk_aligned+0x3c>)
 80041ac:	460c      	mov	r4, r1
 80041ae:	6831      	ldr	r1, [r6, #0]
 80041b0:	4605      	mov	r5, r0
 80041b2:	b911      	cbnz	r1, 80041ba <sbrk_aligned+0x12>
 80041b4:	f000 f8bc 	bl	8004330 <_sbrk_r>
 80041b8:	6030      	str	r0, [r6, #0]
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 f8b7 	bl	8004330 <_sbrk_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d00a      	beq.n	80041dc <sbrk_aligned+0x34>
 80041c6:	1cc4      	adds	r4, r0, #3
 80041c8:	f024 0403 	bic.w	r4, r4, #3
 80041cc:	42a0      	cmp	r0, r4
 80041ce:	d007      	beq.n	80041e0 <sbrk_aligned+0x38>
 80041d0:	1a21      	subs	r1, r4, r0
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 f8ac 	bl	8004330 <_sbrk_r>
 80041d8:	3001      	adds	r0, #1
 80041da:	d101      	bne.n	80041e0 <sbrk_aligned+0x38>
 80041dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80041e0:	4620      	mov	r0, r4
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	20000174 	.word	0x20000174

080041e8 <_malloc_r>:
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	1ccd      	adds	r5, r1, #3
 80041ee:	f025 0503 	bic.w	r5, r5, #3
 80041f2:	3508      	adds	r5, #8
 80041f4:	2d0c      	cmp	r5, #12
 80041f6:	bf38      	it	cc
 80041f8:	250c      	movcc	r5, #12
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	4607      	mov	r7, r0
 80041fe:	db01      	blt.n	8004204 <_malloc_r+0x1c>
 8004200:	42a9      	cmp	r1, r5
 8004202:	d905      	bls.n	8004210 <_malloc_r+0x28>
 8004204:	230c      	movs	r3, #12
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	2600      	movs	r6, #0
 800420a:	4630      	mov	r0, r6
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004210:	4e2e      	ldr	r6, [pc, #184]	; (80042cc <_malloc_r+0xe4>)
 8004212:	f000 f89d 	bl	8004350 <__malloc_lock>
 8004216:	6833      	ldr	r3, [r6, #0]
 8004218:	461c      	mov	r4, r3
 800421a:	bb34      	cbnz	r4, 800426a <_malloc_r+0x82>
 800421c:	4629      	mov	r1, r5
 800421e:	4638      	mov	r0, r7
 8004220:	f7ff ffc2 	bl	80041a8 <sbrk_aligned>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	4604      	mov	r4, r0
 8004228:	d14d      	bne.n	80042c6 <_malloc_r+0xde>
 800422a:	6834      	ldr	r4, [r6, #0]
 800422c:	4626      	mov	r6, r4
 800422e:	2e00      	cmp	r6, #0
 8004230:	d140      	bne.n	80042b4 <_malloc_r+0xcc>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	4631      	mov	r1, r6
 8004236:	4638      	mov	r0, r7
 8004238:	eb04 0803 	add.w	r8, r4, r3
 800423c:	f000 f878 	bl	8004330 <_sbrk_r>
 8004240:	4580      	cmp	r8, r0
 8004242:	d13a      	bne.n	80042ba <_malloc_r+0xd2>
 8004244:	6821      	ldr	r1, [r4, #0]
 8004246:	3503      	adds	r5, #3
 8004248:	1a6d      	subs	r5, r5, r1
 800424a:	f025 0503 	bic.w	r5, r5, #3
 800424e:	3508      	adds	r5, #8
 8004250:	2d0c      	cmp	r5, #12
 8004252:	bf38      	it	cc
 8004254:	250c      	movcc	r5, #12
 8004256:	4629      	mov	r1, r5
 8004258:	4638      	mov	r0, r7
 800425a:	f7ff ffa5 	bl	80041a8 <sbrk_aligned>
 800425e:	3001      	adds	r0, #1
 8004260:	d02b      	beq.n	80042ba <_malloc_r+0xd2>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	442b      	add	r3, r5
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	e00e      	b.n	8004288 <_malloc_r+0xa0>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	1b52      	subs	r2, r2, r5
 800426e:	d41e      	bmi.n	80042ae <_malloc_r+0xc6>
 8004270:	2a0b      	cmp	r2, #11
 8004272:	d916      	bls.n	80042a2 <_malloc_r+0xba>
 8004274:	1961      	adds	r1, r4, r5
 8004276:	42a3      	cmp	r3, r4
 8004278:	6025      	str	r5, [r4, #0]
 800427a:	bf18      	it	ne
 800427c:	6059      	strne	r1, [r3, #4]
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	bf08      	it	eq
 8004282:	6031      	streq	r1, [r6, #0]
 8004284:	5162      	str	r2, [r4, r5]
 8004286:	604b      	str	r3, [r1, #4]
 8004288:	4638      	mov	r0, r7
 800428a:	f104 060b 	add.w	r6, r4, #11
 800428e:	f000 f865 	bl	800435c <__malloc_unlock>
 8004292:	f026 0607 	bic.w	r6, r6, #7
 8004296:	1d23      	adds	r3, r4, #4
 8004298:	1af2      	subs	r2, r6, r3
 800429a:	d0b6      	beq.n	800420a <_malloc_r+0x22>
 800429c:	1b9b      	subs	r3, r3, r6
 800429e:	50a3      	str	r3, [r4, r2]
 80042a0:	e7b3      	b.n	800420a <_malloc_r+0x22>
 80042a2:	6862      	ldr	r2, [r4, #4]
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	bf0c      	ite	eq
 80042a8:	6032      	streq	r2, [r6, #0]
 80042aa:	605a      	strne	r2, [r3, #4]
 80042ac:	e7ec      	b.n	8004288 <_malloc_r+0xa0>
 80042ae:	4623      	mov	r3, r4
 80042b0:	6864      	ldr	r4, [r4, #4]
 80042b2:	e7b2      	b.n	800421a <_malloc_r+0x32>
 80042b4:	4634      	mov	r4, r6
 80042b6:	6876      	ldr	r6, [r6, #4]
 80042b8:	e7b9      	b.n	800422e <_malloc_r+0x46>
 80042ba:	230c      	movs	r3, #12
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4638      	mov	r0, r7
 80042c0:	f000 f84c 	bl	800435c <__malloc_unlock>
 80042c4:	e7a1      	b.n	800420a <_malloc_r+0x22>
 80042c6:	6025      	str	r5, [r4, #0]
 80042c8:	e7de      	b.n	8004288 <_malloc_r+0xa0>
 80042ca:	bf00      	nop
 80042cc:	20000170 	.word	0x20000170

080042d0 <_realloc_r>:
 80042d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d4:	4680      	mov	r8, r0
 80042d6:	4614      	mov	r4, r2
 80042d8:	460e      	mov	r6, r1
 80042da:	b921      	cbnz	r1, 80042e6 <_realloc_r+0x16>
 80042dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042e0:	4611      	mov	r1, r2
 80042e2:	f7ff bf81 	b.w	80041e8 <_malloc_r>
 80042e6:	b92a      	cbnz	r2, 80042f4 <_realloc_r+0x24>
 80042e8:	f7ff ff12 	bl	8004110 <_free_r>
 80042ec:	4625      	mov	r5, r4
 80042ee:	4628      	mov	r0, r5
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f4:	f000 f838 	bl	8004368 <_malloc_usable_size_r>
 80042f8:	4284      	cmp	r4, r0
 80042fa:	4607      	mov	r7, r0
 80042fc:	d802      	bhi.n	8004304 <_realloc_r+0x34>
 80042fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004302:	d812      	bhi.n	800432a <_realloc_r+0x5a>
 8004304:	4621      	mov	r1, r4
 8004306:	4640      	mov	r0, r8
 8004308:	f7ff ff6e 	bl	80041e8 <_malloc_r>
 800430c:	4605      	mov	r5, r0
 800430e:	2800      	cmp	r0, #0
 8004310:	d0ed      	beq.n	80042ee <_realloc_r+0x1e>
 8004312:	42bc      	cmp	r4, r7
 8004314:	4622      	mov	r2, r4
 8004316:	4631      	mov	r1, r6
 8004318:	bf28      	it	cs
 800431a:	463a      	movcs	r2, r7
 800431c:	f7ff fed0 	bl	80040c0 <memcpy>
 8004320:	4631      	mov	r1, r6
 8004322:	4640      	mov	r0, r8
 8004324:	f7ff fef4 	bl	8004110 <_free_r>
 8004328:	e7e1      	b.n	80042ee <_realloc_r+0x1e>
 800432a:	4635      	mov	r5, r6
 800432c:	e7df      	b.n	80042ee <_realloc_r+0x1e>
	...

08004330 <_sbrk_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4d06      	ldr	r5, [pc, #24]	; (800434c <_sbrk_r+0x1c>)
 8004334:	2300      	movs	r3, #0
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	f7fc fca0 	bl	8000c80 <_sbrk>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d102      	bne.n	800434a <_sbrk_r+0x1a>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	b103      	cbz	r3, 800434a <_sbrk_r+0x1a>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	20000178 	.word	0x20000178

08004350 <__malloc_lock>:
 8004350:	4801      	ldr	r0, [pc, #4]	; (8004358 <__malloc_lock+0x8>)
 8004352:	f000 b811 	b.w	8004378 <__retarget_lock_acquire_recursive>
 8004356:	bf00      	nop
 8004358:	2000017c 	.word	0x2000017c

0800435c <__malloc_unlock>:
 800435c:	4801      	ldr	r0, [pc, #4]	; (8004364 <__malloc_unlock+0x8>)
 800435e:	f000 b80c 	b.w	800437a <__retarget_lock_release_recursive>
 8004362:	bf00      	nop
 8004364:	2000017c 	.word	0x2000017c

08004368 <_malloc_usable_size_r>:
 8004368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436c:	1f18      	subs	r0, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfbc      	itt	lt
 8004372:	580b      	ldrlt	r3, [r1, r0]
 8004374:	18c0      	addlt	r0, r0, r3
 8004376:	4770      	bx	lr

08004378 <__retarget_lock_acquire_recursive>:
 8004378:	4770      	bx	lr

0800437a <__retarget_lock_release_recursive>:
 800437a:	4770      	bx	lr

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
