
testing_breakout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037fc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a0c  08003a0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a14  08003a14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08003a28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003a28  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d27c  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a02  00000000  00000000  0002d2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272c9  00000000  00000000  0002ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6a5  00000000  00000000  000572a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2540  00000000  00000000  0006494e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156e8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  00156ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080039dc 	.word	0x080039dc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080039dc 	.word	0x080039dc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <InitMPU_6050>:

	return i2c_success;
}

void InitMPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c)
{
 800053c:	b480      	push	{r7}
 800053e:	b087      	sub	sp, #28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	/* create a parameter that determines the size of each array */
	uint8_t i2cTxBuffer[6] = {0};
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	2300      	movs	r3, #0
 800054c:	82bb      	strh	r3, [r7, #20]
	uint8_t i2cRxBuffer[6] = {0};
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	2300      	movs	r3, #0
 8000554:	81bb      	strh	r3, [r7, #12]

	my_mpu_6050->i2c_handle = i2c;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	601a      	str	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff = i2cTxBuffer;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f107 0210 	add.w	r2, r7, #16
 8000562:	605a      	str	r2, [r3, #4]
	my_mpu_6050->i2c_rx_buff = i2cRxBuffer;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f107 0208 	add.w	r2, r7, #8
 800056a:	60da      	str	r2, [r3, #12]

	my_mpu_6050->i2c_tx_size = 6;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2206      	movs	r2, #6
 8000570:	721a      	strb	r2, [r3, #8]
	my_mpu_6050->i2c_rx_size = 6;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2206      	movs	r2, #6
 8000576:	741a      	strb	r2, [r3, #16]

}
 8000578:	bf00      	nop
 800057a:	371c      	adds	r7, #28
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <Mpu_Config>:

/* Create another parameter that will allow user to
 * configure the full scale range of the accelerometer
 */
uint8_t Mpu_Config(mpu_6050_t *my_mpu_6050)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
	uint8_t configSuccess = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
	my_mpu_6050->i2c_tx_buff[0] = ACCEL_CONFIG;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	221c      	movs	r2, #28
 8000596:	701a      	strb	r2, [r3, #0]

	/* changing the value written to ACCEL_CONFIG */
	my_mpu_6050->i2c_tx_buff[1] = AFS_SEL_8;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	2210      	movs	r2, #16
 80005a0:	701a      	strb	r2, [r3, #0]

	configSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	21d0      	movs	r1, #208	; 0xd0
 80005b2:	f000 ff97 	bl	80014e4 <HAL_I2C_Master_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]

	return configSuccess;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Fifo_Enable>:

uint8_t Fifo_Enable(mpu_6050_t *my_mpu_6050)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
	uint8_t enableSuccess = HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]

	//clearBuff(my_mpu_6050);

	my_mpu_6050->i2c_tx_buff[0] = FIFO_EN;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2223      	movs	r2, #35	; 0x23
 80005d6:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = FIFO_ACCEL_EN;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	2208      	movs	r2, #8
 80005e0:	701a      	strb	r2, [r3, #0]

	enableSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2302      	movs	r3, #2
 80005f0:	21d0      	movs	r1, #208	; 0xd0
 80005f2:	f000 ff77 	bl	80014e4 <HAL_I2C_Master_Transmit>
 80005f6:	4603      	mov	r3, r0
 80005f8:	73fb      	strb	r3, [r7, #15]

	return enableSuccess;
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <getAccel>:

uint8_t getAccel(mpu_6050_t *my_mpu_6050)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Tx_flag = HAL_ERROR;
 800060c:	2301      	movs	r3, #1
 800060e:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]

	//clearBuff(my_mpu_6050);

	my_mpu_6050->i2c_tx_buff[0] = FIFO_R_W;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2274      	movs	r2, #116	; 0x74
 800061e:	701a      	strb	r2, [r3, #0]

	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 100);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	21d0      	movs	r1, #208	; 0xd0
 8000630:	f000 ff58 	bl	80014e4 <HAL_I2C_Master_Transmit>
 8000634:	4603      	mov	r3, r0
 8000636:	73bb      	strb	r3, [r7, #14]

	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 100);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2306      	movs	r3, #6
 8000646:	21d1      	movs	r1, #209	; 0xd1
 8000648:	f001 f840 	bl	80016cc <HAL_I2C_Master_Receive>
 800064c:	4603      	mov	r3, r0
 800064e:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d104      	bne.n	8000660 <getAccel+0x5c>
 8000656:	7b7b      	ldrb	r3, [r7, #13]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d101      	bne.n	8000660 <getAccel+0x5c>
		i2c_success = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]

	/* You are also supposed to check A0 Pin on MPU_6050 */

	return i2c_success;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <wake>:

uint8_t wake(mpu_6050_t *my_mpu_6050)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af02      	add	r7, sp, #8
 8000670:	6078      	str	r0, [r7, #4]
	uint8_t wakeSuccess = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = PWR_MGMT_1;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	226b      	movs	r2, #107	; 0x6b
 800067c:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = 0x00U;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	3301      	adds	r3, #1
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]

	wakeSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	21d0      	movs	r1, #208	; 0xd0
 8000698:	f000 ff24 	bl	80014e4 <HAL_I2C_Master_Transmit>
 800069c:	4603      	mov	r3, r0
 800069e:	73fb      	strb	r3, [r7, #15]

	return wakeSuccess;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fb5b 	bl	8000d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f82e 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f8f8 	bl	80008ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80006bc:	f000 f886 	bl	80007cc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 f8c4 	bl	800084c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  InitMPU_6050(&my_imu, &hi2c1);
 80006c4:	4910      	ldr	r1, [pc, #64]	; (8000708 <main+0x5c>)
 80006c6:	4811      	ldr	r0, [pc, #68]	; (800070c <main+0x60>)
 80006c8:	f7ff ff38 	bl	800053c <InitMPU_6050>

  wake(&my_imu);
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x60>)
 80006ce:	f7ff ffcc 	bl	800066a <wake>

  Mpu_Config(&my_imu);
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <main+0x60>)
 80006d4:	f7ff ff56 	bl	8000584 <Mpu_Config>

  Fifo_Enable(&my_imu);
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <main+0x60>)
 80006da:	f7ff ff73 	bl	80005c4 <Fifo_Enable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//
	  if (getAccel(&my_imu) == HAL_OK)
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <main+0x60>)
 80006e0:	f7ff ff90 	bl	8000604 <getAccel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d105      	bne.n	80006f6 <main+0x4a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2101      	movs	r1, #1
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <main+0x64>)
 80006f0:	f000 fe4e 	bl	8001390 <HAL_GPIO_WritePin>
 80006f4:	e004      	b.n	8000700 <main+0x54>
      else
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <main+0x64>)
 80006fc:	f000 fe48 	bl	8001390 <HAL_GPIO_WritePin>

		HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f000 fb8f 	bl	8000e24 <HAL_Delay>
	  if (getAccel(&my_imu) == HAL_OK)
 8000706:	e7ea      	b.n	80006de <main+0x32>
 8000708:	20000028 	.word	0x20000028
 800070c:	20000104 	.word	0x20000104
 8000710:	40020400 	.word	0x40020400

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 f952 	bl	80039cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xb0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xb0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xb0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <SystemClock_Config+0xb4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <SystemClock_Config+0xb4>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <SystemClock_Config+0xb4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fb9d 	bl	8001ec0 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800078c:	f000 f99e 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fe35 	bl	800241c <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80007b8:	f000 f988 	bl	8000acc <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 208;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C1_Init+0x74>)
 80007de:	22d0      	movs	r2, #208	; 0xd0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f000 fddc 	bl	80013c4 <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 f95b 	bl	8000acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f001 fab9 	bl	8001d90 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 f952 	bl	8000acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f001 fafb 	bl	8001e26 <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f949 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000028 	.word	0x20000028
 8000844:	40005400 	.word	0x40005400
 8000848:	00300208 	.word	0x00300208

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_USART3_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000890:	f002 fc10 	bl	80030b4 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f917 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000007c 	.word	0x2000007c
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b7d      	ldr	r3, [pc, #500]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a7c      	ldr	r2, [pc, #496]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b7a      	ldr	r3, [pc, #488]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b77      	ldr	r3, [pc, #476]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a76      	ldr	r2, [pc, #472]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b74      	ldr	r3, [pc, #464]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b71      	ldr	r3, [pc, #452]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a70      	ldr	r2, [pc, #448]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b6b      	ldr	r3, [pc, #428]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a6a      	ldr	r2, [pc, #424]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b68      	ldr	r3, [pc, #416]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a64      	ldr	r2, [pc, #400]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b62      	ldr	r3, [pc, #392]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a5e      	ldr	r2, [pc, #376]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5c      	ldr	r3, [pc, #368]	; (8000ab8 <MX_GPIO_Init+0x20c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f244 0181 	movw	r1, #16513	; 0x4081
 8000958:	4858      	ldr	r0, [pc, #352]	; (8000abc <MX_GPIO_Init+0x210>)
 800095a:	f000 fd19 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	4857      	ldr	r0, [pc, #348]	; (8000ac0 <MX_GPIO_Init+0x214>)
 8000964:	f000 fd14 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4851      	ldr	r0, [pc, #324]	; (8000ac4 <MX_GPIO_Init+0x218>)
 8000980:	f000 fb5a 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000984:	2332      	movs	r3, #50	; 0x32
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000994:	230b      	movs	r3, #11
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4849      	ldr	r0, [pc, #292]	; (8000ac4 <MX_GPIO_Init+0x218>)
 80009a0:	f000 fb4a 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009a4:	2386      	movs	r3, #134	; 0x86
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4842      	ldr	r0, [pc, #264]	; (8000ac8 <MX_GPIO_Init+0x21c>)
 80009c0:	f000 fb3a 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c4:	f244 0381 	movw	r3, #16513	; 0x4081
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4837      	ldr	r0, [pc, #220]	; (8000abc <MX_GPIO_Init+0x210>)
 80009de:	f000 fb2b 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f4:	230b      	movs	r3, #11
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	482f      	ldr	r0, [pc, #188]	; (8000abc <MX_GPIO_Init+0x210>)
 8000a00:	f000 fb1a 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a04:	2340      	movs	r3, #64	; 0x40
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4829      	ldr	r0, [pc, #164]	; (8000ac0 <MX_GPIO_Init+0x214>)
 8000a1c:	f000 fb0c 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <MX_GPIO_Init+0x214>)
 8000a34:	f000 fb00 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a38:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0x21c>)
 8000a56:	f000 faef 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4816      	ldr	r0, [pc, #88]	; (8000ac8 <MX_GPIO_Init+0x21c>)
 8000a70:	f000 fae2 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a86:	230b      	movs	r3, #11
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <MX_GPIO_Init+0x214>)
 8000a92:	f000 fad1 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0x210>)
 8000aac:	f000 fac4 	bl	8001038 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3730      	adds	r7, #48	; 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0ae      	sub	sp, #184	; 0xb8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2290      	movs	r2, #144	; 0x90
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 ff43 	bl	80039cc <memset>
  if(hi2c->Instance==I2C1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <HAL_I2C_MspInit+0xb4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d13c      	bne.n	8000bca <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fe80 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b6a:	f7ff ffaf 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000baa:	4619      	mov	r1, r3
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <HAL_I2C_MspInit+0xbc>)
 8000bae:	f000 fa43 	bl	8001038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_I2C_MspInit+0xb8>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	37b8      	adds	r7, #184	; 0xb8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ae      	sub	sp, #184	; 0xb8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2290      	movs	r2, #144	; 0x90
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fee3 	bl	80039cc <memset>
  if(huart->Instance==USART3)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <HAL_UART_MspInit+0xb4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d13c      	bne.n	8000c8a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fe20 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c2a:	f7ff ff4f 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_UART_MspInit+0xb8>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0xb8>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_UART_MspInit+0xb8>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_UART_MspInit+0xb8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <HAL_UART_MspInit+0xb8>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_UART_MspInit+0xb8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_MspInit+0xbc>)
 8000c86:	f000 f9d7 	bl	8001038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	37b8      	adds	r7, #184	; 0xb8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004800 	.word	0x40004800
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020c00 	.word	0x40020c00

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f87a 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d34:	4c0b      	ldr	r4, [pc, #44]	; (8000d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d42:	f7ff ffd7 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 fe1d 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fcaf 	bl	80006ac <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d5c:	08003a1c 	.word	0x08003a1c
  ldr r2, =_sbss
 8000d60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d64:	2000011c 	.word	0x2000011c

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>

08000d6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f000 f92e 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 f805 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7a:	f7ff fead 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f93b 	bl	800101e <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc0:	f000 f911 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000118 	.word	0x20000118

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000118 	.word	0x20000118

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <__NVIC_SetPriorityGrouping+0x40>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x40>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00
 8000eb0:	05fa0000 	.word	0x05fa0000

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff47 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff5c 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffb0 	bl	8000f8c <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e175      	b.n	8001344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8164 	bne.w	800133e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x56>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80be 	beq.w	800133e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <HAL_GPIO_Init+0x324>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a65      	ldr	r2, [pc, #404]	; (800135c <HAL_GPIO_Init+0x324>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b63      	ldr	r3, [pc, #396]	; (800135c <HAL_GPIO_Init+0x324>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011da:	4a61      	ldr	r2, [pc, #388]	; (8001360 <HAL_GPIO_Init+0x328>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a58      	ldr	r2, [pc, #352]	; (8001364 <HAL_GPIO_Init+0x32c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d037      	beq.n	8001276 <HAL_GPIO_Init+0x23e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a57      	ldr	r2, [pc, #348]	; (8001368 <HAL_GPIO_Init+0x330>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d031      	beq.n	8001272 <HAL_GPIO_Init+0x23a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a56      	ldr	r2, [pc, #344]	; (800136c <HAL_GPIO_Init+0x334>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02b      	beq.n	800126e <HAL_GPIO_Init+0x236>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a55      	ldr	r2, [pc, #340]	; (8001370 <HAL_GPIO_Init+0x338>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x232>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a54      	ldr	r2, [pc, #336]	; (8001374 <HAL_GPIO_Init+0x33c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x22e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a53      	ldr	r2, [pc, #332]	; (8001378 <HAL_GPIO_Init+0x340>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x22a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_GPIO_Init+0x344>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x226>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <HAL_GPIO_Init+0x348>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x222>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a50      	ldr	r2, [pc, #320]	; (8001384 <HAL_GPIO_Init+0x34c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x21e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4f      	ldr	r2, [pc, #316]	; (8001388 <HAL_GPIO_Init+0x350>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x21a>
 800124e:	2309      	movs	r3, #9
 8001250:	e012      	b.n	8001278 <HAL_GPIO_Init+0x240>
 8001252:	230a      	movs	r3, #10
 8001254:	e010      	b.n	8001278 <HAL_GPIO_Init+0x240>
 8001256:	2308      	movs	r3, #8
 8001258:	e00e      	b.n	8001278 <HAL_GPIO_Init+0x240>
 800125a:	2307      	movs	r3, #7
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x240>
 800125e:	2306      	movs	r3, #6
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x240>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x240>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x240>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x240>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x240>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x240>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x328>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <HAL_GPIO_Init+0x354>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a34      	ldr	r2, [pc, #208]	; (800138c <HAL_GPIO_Init+0x354>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_GPIO_Init+0x354>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a29      	ldr	r2, [pc, #164]	; (800138c <HAL_GPIO_Init+0x354>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <HAL_GPIO_Init+0x354>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130e:	4a1f      	ldr	r2, [pc, #124]	; (800138c <HAL_GPIO_Init+0x354>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_GPIO_Init+0x354>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_GPIO_Init+0x354>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f ae86 	bls.w	8001058 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40021400 	.word	0x40021400
 800137c:	40021800 	.word	0x40021800
 8001380:	40021c00 	.word	0x40021c00
 8001384:	40022000 	.word	0x40022000
 8001388:	40022400 	.word	0x40022400
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e07f      	b.n	80014d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fb98 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2224      	movs	r2, #36	; 0x24
 80013f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001414:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001424:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	e006      	b.n	800144c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800144a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d104      	bne.n	800145e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_I2C_Init+0x11c>)
 800146a:	430b      	orrs	r3, r1
 800146c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800147c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69d9      	ldr	r1, [r3, #28]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	02008000 	.word	0x02008000

080014e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	461a      	mov	r2, r3
 80014f0:	460b      	mov	r3, r1
 80014f2:	817b      	strh	r3, [r7, #10]
 80014f4:	4613      	mov	r3, r2
 80014f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b20      	cmp	r3, #32
 8001502:	f040 80da 	bne.w	80016ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_I2C_Master_Transmit+0x30>
 8001510:	2302      	movs	r3, #2
 8001512:	e0d3      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1d8>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800151c:	f7ff fc76 	bl	8000e0c <HAL_GetTick>
 8001520:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2319      	movs	r3, #25
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f9e6 	bl	8001900 <I2C_WaitOnFlagUntilTimeout>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0be      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2221      	movs	r2, #33	; 0x21
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2210      	movs	r2, #16
 800154a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	893a      	ldrh	r2, [r7, #8]
 800155e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156a:	b29b      	uxth	r3, r3
 800156c:	2bff      	cmp	r3, #255	; 0xff
 800156e:	d90e      	bls.n	800158e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	22ff      	movs	r2, #255	; 0xff
 8001574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157a:	b2da      	uxtb	r2, r3
 800157c:	8979      	ldrh	r1, [r7, #10]
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbd0 	bl	8001d2c <I2C_TransferConfig>
 800158c:	e06c      	b.n	8001668 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159c:	b2da      	uxtb	r2, r3
 800159e:	8979      	ldrh	r1, [r7, #10]
 80015a0:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fbbf 	bl	8001d2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015ae:	e05b      	b.n	8001668 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	6a39      	ldr	r1, [r7, #32]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f9e3 	bl	8001980 <I2C_WaitOnTXISFlagUntilTimeout>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e07b      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d034      	beq.n	8001668 <HAL_I2C_Master_Transmit+0x184>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001602:	2b00      	cmp	r3, #0
 8001604:	d130      	bne.n	8001668 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2200      	movs	r2, #0
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f975 	bl	8001900 <I2C_WaitOnFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e04d      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d90e      	bls.n	8001648 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	22ff      	movs	r2, #255	; 0xff
 800162e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	b2da      	uxtb	r2, r3
 8001636:	8979      	ldrh	r1, [r7, #10]
 8001638:	2300      	movs	r3, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 fb73 	bl	8001d2c <I2C_TransferConfig>
 8001646:	e00f      	b.n	8001668 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001656:	b2da      	uxtb	r2, r3
 8001658:	8979      	ldrh	r1, [r7, #10]
 800165a:	2300      	movs	r3, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fb62 	bl	8001d2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d19e      	bne.n	80015b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	6a39      	ldr	r1, [r7, #32]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f9c2 	bl	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e01a      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2220      	movs	r2, #32
 800168c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800169a:	400b      	ands	r3, r1
 800169c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
  }
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	80002000 	.word	0x80002000
 80016c8:	fe00e800 	.word	0xfe00e800

080016cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	461a      	mov	r2, r3
 80016d8:	460b      	mov	r3, r1
 80016da:	817b      	strh	r3, [r7, #10]
 80016dc:	4613      	mov	r3, r2
 80016de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b20      	cmp	r3, #32
 80016ea:	f040 80db 	bne.w	80018a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_I2C_Master_Receive+0x30>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e0d4      	b.n	80018a6 <HAL_I2C_Master_Receive+0x1da>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001704:	f7ff fb82 	bl	8000e0c <HAL_GetTick>
 8001708:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2319      	movs	r3, #25
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f8f2 	bl	8001900 <I2C_WaitOnFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0bf      	b.n	80018a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2222      	movs	r2, #34	; 0x22
 800172a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2210      	movs	r2, #16
 8001732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	893a      	ldrh	r2, [r7, #8]
 8001746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d90e      	bls.n	8001776 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	22ff      	movs	r2, #255	; 0xff
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	b2da      	uxtb	r2, r3
 8001764:	8979      	ldrh	r1, [r7, #10]
 8001766:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_I2C_Master_Receive+0x1e4>)
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 fadc 	bl	8001d2c <I2C_TransferConfig>
 8001774:	e06d      	b.n	8001852 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	b2da      	uxtb	r2, r3
 8001786:	8979      	ldrh	r1, [r7, #10]
 8001788:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_I2C_Master_Receive+0x1e4>)
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 facb 	bl	8001d2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001796:	e05c      	b.n	8001852 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	6a39      	ldr	r1, [r7, #32]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f96b 	bl	8001a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e07c      	b.n	80018a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d034      	beq.n	8001852 <HAL_I2C_Master_Receive+0x186>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d130      	bne.n	8001852 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	2200      	movs	r2, #0
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f880 	bl	8001900 <I2C_WaitOnFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e04d      	b.n	80018a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d90e      	bls.n	8001832 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	22ff      	movs	r2, #255	; 0xff
 8001818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	b2da      	uxtb	r2, r3
 8001820:	8979      	ldrh	r1, [r7, #10]
 8001822:	2300      	movs	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 fa7e 	bl	8001d2c <I2C_TransferConfig>
 8001830:	e00f      	b.n	8001852 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	b2da      	uxtb	r2, r3
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fa6d 	bl	8001d2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d19d      	bne.n	8001798 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	6a39      	ldr	r1, [r7, #32]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 f8cd 	bl	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e01a      	b.n	80018a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2220      	movs	r2, #32
 8001876:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_I2C_Master_Receive+0x1e8>)
 8001884:	400b      	ands	r3, r1
 8001886:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
  }
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	80002400 	.word	0x80002400
 80018b4:	fe00e800 	.word	0xfe00e800

080018b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d103      	bne.n	80018d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2200      	movs	r2, #0
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d007      	beq.n	80018f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	619a      	str	r2, [r3, #24]
  }
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001910:	e022      	b.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001918:	d01e      	beq.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800191a:	f7ff fa77 	bl	8000e0c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d302      	bcc.n	8001930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d113      	bne.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f043 0220 	orr.w	r2, r3, #32
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2220      	movs	r2, #32
 8001940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e00f      	b.n	8001978 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	4013      	ands	r3, r2
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	429a      	cmp	r2, r3
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	429a      	cmp	r2, r3
 8001974:	d0cd      	beq.n	8001912 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800198c:	e02c      	b.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f8ea 	bl	8001b6c <I2C_IsErrorOccurred>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e02a      	b.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a8:	d01e      	beq.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7ff fa2f 	bl	8000e0c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d302      	bcc.n	80019c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d113      	bne.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e007      	b.n	80019f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d1cb      	bne.n	800198e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a0c:	e028      	b.n	8001a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f8aa 	bl	8001b6c <I2C_IsErrorOccurred>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e026      	b.n	8001a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a22:	f7ff f9f3 	bl	8000e0c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d302      	bcc.n	8001a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d113      	bne.n	8001a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f043 0220 	orr.w	r2, r3, #32
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e007      	b.n	8001a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	2b20      	cmp	r3, #32
 8001a6c:	d1cf      	bne.n	8001a0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a84:	e064      	b.n	8001b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f86e 	bl	8001b6c <I2C_IsErrorOccurred>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e062      	b.n	8001b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b20      	cmp	r3, #32
 8001aa6:	d138      	bne.n	8001b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d105      	bne.n	8001ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e04e      	b.n	8001b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d107      	bne.n	8001ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2204      	movs	r2, #4
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ade:	e002      	b.n	8001ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2220      	movs	r2, #32
 8001aec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001afa:	400b      	ands	r3, r1
 8001afc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e022      	b.n	8001b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7ff f977 	bl	8000e0c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10f      	bne.n	8001b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e007      	b.n	8001b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d193      	bne.n	8001a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	fe00e800 	.word	0xfe00e800

08001b6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d068      	beq.n	8001c6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ba0:	e049      	b.n	8001c36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba8:	d045      	beq.n	8001c36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001baa:	f7ff f92f 	bl	8000e0c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d302      	bcc.n	8001bc0 <I2C_IsErrorOccurred+0x54>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d13a      	bne.n	8001c36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be2:	d121      	bne.n	8001c28 <I2C_IsErrorOccurred+0xbc>
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bea:	d01d      	beq.n	8001c28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bec:	7cfb      	ldrb	r3, [r7, #19]
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d01a      	beq.n	8001c28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c02:	f7ff f903 	bl	8000e0c <HAL_GetTick>
 8001c06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c08:	e00e      	b.n	8001c28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c0a:	f7ff f8ff 	bl	8000e0c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b19      	cmp	r3, #25
 8001c16:	d907      	bls.n	8001c28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f043 0320 	orr.w	r3, r3, #32
 8001c1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001c26:	e006      	b.n	8001c36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d1e9      	bne.n	8001c0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d003      	beq.n	8001c4c <I2C_IsErrorOccurred+0xe0>
 8001c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0aa      	beq.n	8001ba2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d103      	bne.n	8001c5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff fde9 	bl	80018b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <I2C_IsErrorOccurred+0x1bc>)
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	fe00e800 	.word	0xfe00e800

08001d2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d3e:	897b      	ldrh	r3, [r7, #10]
 8001d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d44:	7a7b      	ldrb	r3, [r7, #9]
 8001d46:	041b      	lsls	r3, r3, #16
 8001d48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	0d5b      	lsrs	r3, r3, #21
 8001d66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <I2C_TransferConfig+0x60>)
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	ea02 0103 	and.w	r1, r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	03ff63ff 	.word	0x03ff63ff

08001d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d138      	bne.n	8001e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e032      	b.n	8001e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2224      	movs	r2, #36	; 0x24
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d139      	bne.n	8001eb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e033      	b.n	8001eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2224      	movs	r2, #36	; 0x24
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e000      	b.n	8001eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e29b      	b.n	800240e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8087 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee4:	4b96      	ldr	r3, [pc, #600]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d00c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef0:	4b93      	ldr	r3, [pc, #588]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d112      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62>
 8001efc:	4b90      	ldr	r3, [pc, #576]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f08:	d10b      	bne.n	8001f22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0a:	4b8d      	ldr	r3, [pc, #564]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x130>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d168      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e275      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x7a>
 8001f2c:	4b84      	ldr	r3, [pc, #528]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a83      	ldr	r2, [pc, #524]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e02e      	b.n	8001f98 <HAL_RCC_OscConfig+0xd8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x9c>
 8001f42:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7e      	ldr	r2, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7b      	ldr	r2, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xd8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0xc0>
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b73      	ldr	r3, [pc, #460]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a72      	ldr	r2, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xd8>
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6b      	ldr	r2, [pc, #428]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ff34 	bl	8000e0c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe ff30 	bl	8000e0c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e229      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xe8>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ff20 	bl	8000e0c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff1c 	bl	8000e0c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e215      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x110>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d069      	beq.n	80020d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffe:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200a:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b08      	cmp	r3, #8
 8002014:	d11c      	bne.n	8002050 <HAL_RCC_OscConfig+0x190>
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d116      	bne.n	8002050 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_RCC_OscConfig+0x17a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e1e9      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	493d      	ldr	r1, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	e040      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d023      	beq.n	80020a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002058:	4b39      	ldr	r3, [pc, #228]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a38      	ldr	r2, [pc, #224]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe fed2 	bl	8000e0c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7fe fece 	bl	8000e0c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1c7      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4929      	ldr	r1, [pc, #164]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
 800209e:	e018      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe feae 	bl	8000e0c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b4:	f7fe feaa 	bl	8000e0c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1a3      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d038      	beq.n	8002150 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d019      	beq.n	800211a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7fe fe8b 	bl	8000e0c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fa:	f7fe fe87 	bl	8000e0c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e180      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x23a>
 8002118:	e01a      	b.n	8002150 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7fe fe71 	bl	8000e0c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212e:	f7fe fe6d 	bl	8000e0c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d903      	bls.n	8002144 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e166      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
 8002140:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	4b92      	ldr	r3, [pc, #584]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ee      	bne.n	800212e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a4 	beq.w	80022a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b8c      	ldr	r3, [pc, #560]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b89      	ldr	r3, [pc, #548]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a88      	ldr	r2, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b86      	ldr	r3, [pc, #536]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	4b83      	ldr	r3, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x4d4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002192:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x4d4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7f      	ldr	r2, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x4d4>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7fe fe35 	bl	8000e0c <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7fe fe31 	bl	8000e0c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b64      	cmp	r3, #100	; 0x64
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e12a      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b8:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x4d4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x31a>
 80021cc:	4b70      	ldr	r3, [pc, #448]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a6f      	ldr	r2, [pc, #444]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	e02d      	b.n	8002236 <HAL_RCC_OscConfig+0x376>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x33c>
 80021e2:	4b6b      	ldr	r3, [pc, #428]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a6a      	ldr	r2, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a67      	ldr	r2, [pc, #412]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
 80021fa:	e01c      	b.n	8002236 <HAL_RCC_OscConfig+0x376>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x35e>
 8002204:	4b62      	ldr	r3, [pc, #392]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a61      	ldr	r2, [pc, #388]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a5e      	ldr	r2, [pc, #376]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x376>
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a5b      	ldr	r2, [pc, #364]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	4b59      	ldr	r3, [pc, #356]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe fde5 	bl	8000e0c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fde1 	bl	8000e0c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0d8      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCC_OscConfig+0x386>
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7fe fdcf 	bl	8000e0c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fdcb 	bl	8000e0c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0c2      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ee      	bne.n	8002272 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80ae 	beq.w	800240c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b0:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d06d      	beq.n	8002398 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d14b      	bne.n	800235c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a31      	ldr	r2, [pc, #196]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fd9c 	bl	8000e0c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fd98 	bl	8000e0c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e091      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	3b01      	subs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	071b      	lsls	r3, r3, #28
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fd6a 	bl	8000e0c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe fd66 	bl	8000e0c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e05f      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x47c>
 800235a:	e057      	b.n	800240c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fd50 	bl	8000e0c <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fd4c 	bl	8000e0c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e045      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x4b0>
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x54c>
 8002390:	40023800 	.word	0x40023800
 8002394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HAL_RCC_OscConfig+0x558>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d030      	beq.n	8002408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d129      	bne.n	8002408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d122      	bne.n	8002408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d119      	bne.n	8002408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10f      	bne.n	8002408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0d0      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 020f 	bic.w	r2, r3, #15
 800244a:	4965      	ldr	r1, [pc, #404]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b8      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002494:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	494d      	ldr	r1, [pc, #308]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d040      	beq.n	8002540 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e07f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e073      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e06b      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4936      	ldr	r1, [pc, #216]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe fc7c 	bl	8000e0c <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fc78 	bl	8000e0c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e053      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d210      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 020f 	bic.w	r2, r3, #15
 8002556:	4922      	ldr	r1, [pc, #136]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e032      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4916      	ldr	r1, [pc, #88]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	490e      	ldr	r1, [pc, #56]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ae:	f000 f821 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	490a      	ldr	r1, [pc, #40]	; (80025e8 <HAL_RCC_ClockConfig+0x1cc>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1d0>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1d4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fbd8 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00
 80025e4:	40023800 	.word	0x40023800
 80025e8:	080039f4 	.word	0x080039f4
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000004 	.word	0x20000004

080025f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f8:	b094      	sub	sp, #80	; 0x50
 80025fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002600:	2300      	movs	r3, #0
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002604:	2300      	movs	r3, #0
 8002606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260c:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d00d      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x40>
 8002618:	2b08      	cmp	r3, #8
 800261a:	f200 80e1 	bhi.w	80027e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x34>
 8002622:	2b04      	cmp	r3, #4
 8002624:	d003      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x3a>
 8002626:	e0db      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800262c:	e0db      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800262e:	4b72      	ldr	r3, [pc, #456]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002632:	e0d8      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002634:	4b6f      	ldr	r3, [pc, #444]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800263e:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d063      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264a:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	2200      	movs	r2, #0
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
 8002654:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
 8002662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002666:	4622      	mov	r2, r4
 8002668:	462b      	mov	r3, r5
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	0159      	lsls	r1, r3, #5
 8002674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002678:	0150      	lsls	r0, r2, #5
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4621      	mov	r1, r4
 8002680:	1a51      	subs	r1, r2, r1
 8002682:	6139      	str	r1, [r7, #16]
 8002684:	4629      	mov	r1, r5
 8002686:	eb63 0301 	sbc.w	r3, r3, r1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002698:	4659      	mov	r1, fp
 800269a:	018b      	lsls	r3, r1, #6
 800269c:	4651      	mov	r1, sl
 800269e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a2:	4651      	mov	r1, sl
 80026a4:	018a      	lsls	r2, r1, #6
 80026a6:	4651      	mov	r1, sl
 80026a8:	ebb2 0801 	subs.w	r8, r2, r1
 80026ac:	4659      	mov	r1, fp
 80026ae:	eb63 0901 	sbc.w	r9, r3, r1
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c6:	4690      	mov	r8, r2
 80026c8:	4699      	mov	r9, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	eb18 0303 	adds.w	r3, r8, r3
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	462b      	mov	r3, r5
 80026d4:	eb49 0303 	adc.w	r3, r9, r3
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026e6:	4629      	mov	r1, r5
 80026e8:	028b      	lsls	r3, r1, #10
 80026ea:	4621      	mov	r1, r4
 80026ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f0:	4621      	mov	r1, r4
 80026f2:	028a      	lsls	r2, r1, #10
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fa:	2200      	movs	r2, #0
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002704:	f7fd fd98 	bl	8000238 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4613      	mov	r3, r2
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002710:	e058      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	2200      	movs	r2, #0
 800271a:	4618      	mov	r0, r3
 800271c:	4611      	mov	r1, r2
 800271e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800272c:	4642      	mov	r2, r8
 800272e:	464b      	mov	r3, r9
 8002730:	f04f 0000 	mov.w	r0, #0
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	0159      	lsls	r1, r3, #5
 800273a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800273e:	0150      	lsls	r0, r2, #5
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4641      	mov	r1, r8
 8002746:	ebb2 0a01 	subs.w	sl, r2, r1
 800274a:	4649      	mov	r1, r9
 800274c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800275c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002764:	ebb2 040a 	subs.w	r4, r2, sl
 8002768:	eb63 050b 	sbc.w	r5, r3, fp
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	00eb      	lsls	r3, r5, #3
 8002776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277a:	00e2      	lsls	r2, r4, #3
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	4643      	mov	r3, r8
 8002782:	18e3      	adds	r3, r4, r3
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	464b      	mov	r3, r9
 8002788:	eb45 0303 	adc.w	r3, r5, r3
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279a:	4629      	mov	r1, r5
 800279c:	028b      	lsls	r3, r1, #10
 800279e:	4621      	mov	r1, r4
 80027a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a4:	4621      	mov	r1, r4
 80027a6:	028a      	lsls	r2, r1, #10
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ae:	2200      	movs	r2, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	61fa      	str	r2, [r7, #28]
 80027b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b8:	f7fd fd3e 	bl	8000238 <__aeabi_uldivmod>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4613      	mov	r3, r2
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027de:	e002      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3750      	adds	r7, #80	; 0x50
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400

080027fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	08003a04 	.word	0x08003a04

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffdc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	08003a04 	.word	0x08003a04

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800288c:	4b69      	ldr	r3, [pc, #420]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a68      	ldr	r2, [pc, #416]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002892:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002896:	6093      	str	r3, [r2, #8]
 8002898:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	4964      	ldr	r1, [pc, #400]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d017      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	4959      	ldr	r1, [pc, #356]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d017      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028fa:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	494a      	ldr	r1, [pc, #296]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002926:	2301      	movs	r3, #1
 8002928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 808b 	beq.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	4a39      	ldr	r2, [pc, #228]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6413      	str	r3, [r2, #64]	; 0x40
 8002954:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296c:	f7fe fa4e 	bl	8000e0c <HAL_GetTick>
 8002970:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe fa4a 	bl	8000e0c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e38f      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002992:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d035      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d02e      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d114      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fa12 	bl	8000e0c <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fa0e 	bl	8000e0c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e351      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ee      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a1a:	d111      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	4901      	ldr	r1, [pc, #4]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
 8002a32:	e00b      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	0ffffcff 	.word	0x0ffffcff
 8002a40:	4bac      	ldr	r3, [pc, #688]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4aab      	ldr	r2, [pc, #684]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a4a:	6093      	str	r3, [r2, #8]
 8002a4c:	4ba9      	ldr	r3, [pc, #676]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	49a6      	ldr	r1, [pc, #664]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a6a:	4ba2      	ldr	r3, [pc, #648]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a70:	4aa0      	ldr	r2, [pc, #640]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a7a:	4b9e      	ldr	r3, [pc, #632]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	499b      	ldr	r1, [pc, #620]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a98:	4b96      	ldr	r3, [pc, #600]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa6:	4993      	ldr	r1, [pc, #588]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aba:	4b8e      	ldr	r3, [pc, #568]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac8:	498a      	ldr	r1, [pc, #552]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002adc:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	4982      	ldr	r1, [pc, #520]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002afe:	4b7d      	ldr	r3, [pc, #500]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4979      	ldr	r1, [pc, #484]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b20:	4b74      	ldr	r3, [pc, #464]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4971      	ldr	r1, [pc, #452]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b42:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f023 020c 	bic.w	r2, r3, #12
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	4968      	ldr	r1, [pc, #416]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b64:	4b63      	ldr	r3, [pc, #396]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	4960      	ldr	r1, [pc, #384]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b86:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	4957      	ldr	r1, [pc, #348]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba8:	4b52      	ldr	r3, [pc, #328]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	494f      	ldr	r1, [pc, #316]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bca:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4946      	ldr	r1, [pc, #280]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bec:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	493e      	ldr	r1, [pc, #248]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1c:	4935      	ldr	r1, [pc, #212]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	492d      	ldr	r1, [pc, #180]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d011      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c60:	4924      	ldr	r1, [pc, #144]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	4914      	ldr	r1, [pc, #80]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00f      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce8:	4902      	ldr	r1, [pc, #8]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d04:	4b8a      	ldr	r3, [pc, #552]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	4986      	ldr	r1, [pc, #536]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d28:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d38:	497d      	ldr	r1, [pc, #500]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d006      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80d6 	beq.w	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d54:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d60:	f7fe f854 	bl	8000e0c <HAL_GetTick>
 8002d64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d68:	f7fe f850 	bl	8000e0c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e195      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d021      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11d      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dae:	0e1b      	lsrs	r3, r3, #24
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	019a      	lsls	r2, r3, #6
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	071b      	lsls	r3, r3, #28
 8002dce:	4958      	ldr	r1, [pc, #352]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02e      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e00:	d129      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e02:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e10:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e16:	0f1b      	lsrs	r3, r3, #28
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	019a      	lsls	r2, r3, #6
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	071b      	lsls	r3, r3, #28
 8002e36:	493e      	ldr	r1, [pc, #248]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e44:	f023 021f 	bic.w	r2, r3, #31
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	4938      	ldr	r1, [pc, #224]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01d      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e68:	0e1b      	lsrs	r3, r3, #24
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e70:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e76:	0f1b      	lsrs	r3, r3, #28
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	019a      	lsls	r2, r3, #6
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	061b      	lsls	r3, r3, #24
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	071b      	lsls	r3, r3, #28
 8002e96:	4926      	ldr	r1, [pc, #152]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	019a      	lsls	r2, r3, #6
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	491a      	ldr	r1, [pc, #104]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eda:	f7fd ff97 	bl	8000e0c <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ee2:	f7fd ff93 	bl	8000e0c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b64      	cmp	r3, #100	; 0x64
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0d8      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	f040 80ce 	bne.w	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f14:	f7fd ff7a 	bl	8000e0c <HAL_GetTick>
 8002f18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f1c:	f7fd ff76 	bl	8000e0c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d904      	bls.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0bb      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f34:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f40:	d0ec      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d02e      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d12a      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f78:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	0f1b      	lsrs	r3, r3, #28
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	019a      	lsls	r2, r3, #6
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	4944      	ldr	r1, [pc, #272]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fa6:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	493d      	ldr	r1, [pc, #244]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d022      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd4:	d11d      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	0e1b      	lsrs	r3, r3, #24
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	0f1b      	lsrs	r3, r3, #28
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	019a      	lsls	r2, r3, #6
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	4929      	ldr	r1, [pc, #164]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d028      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003024:	0e1b      	lsrs	r3, r3, #24
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	019a      	lsls	r2, r3, #6
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	431a      	orrs	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	071b      	lsls	r3, r3, #28
 8003052:	4917      	ldr	r1, [pc, #92]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003060:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	4911      	ldr	r1, [pc, #68]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307c:	f7fd fec6 	bl	8000e0c <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003084:	f7fd fec2 	bl	8000e0c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e007      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800309e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a2:	d1ef      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800

080030b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e040      	b.n	8003148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fd82 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	; 0x24
 80030e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f82c 	bl	8003150 <UART_SetConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa84 	bl	8003618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fb0b 	bl	800375c <UART_CheckIdleState>
 8003146:	4603      	mov	r3, r0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4ba6      	ldr	r3, [pc, #664]	; (8003414 <UART_SetConfig+0x2c4>)
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	430b      	orrs	r3, r1
 8003186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a94      	ldr	r2, [pc, #592]	; (8003418 <UART_SetConfig+0x2c8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d120      	bne.n	800320e <UART_SetConfig+0xbe>
 80031cc:	4b93      	ldr	r3, [pc, #588]	; (800341c <UART_SetConfig+0x2cc>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d816      	bhi.n	8003208 <UART_SetConfig+0xb8>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <UART_SetConfig+0x90>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	080031fd 	.word	0x080031fd
 80031e8:	080031f7 	.word	0x080031f7
 80031ec:	08003203 	.word	0x08003203
 80031f0:	2301      	movs	r3, #1
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e150      	b.n	8003498 <UART_SetConfig+0x348>
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e14d      	b.n	8003498 <UART_SetConfig+0x348>
 80031fc:	2304      	movs	r3, #4
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e14a      	b.n	8003498 <UART_SetConfig+0x348>
 8003202:	2308      	movs	r3, #8
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e147      	b.n	8003498 <UART_SetConfig+0x348>
 8003208:	2310      	movs	r3, #16
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e144      	b.n	8003498 <UART_SetConfig+0x348>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a83      	ldr	r2, [pc, #524]	; (8003420 <UART_SetConfig+0x2d0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d132      	bne.n	800327e <UART_SetConfig+0x12e>
 8003218:	4b80      	ldr	r3, [pc, #512]	; (800341c <UART_SetConfig+0x2cc>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d828      	bhi.n	8003278 <UART_SetConfig+0x128>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <UART_SetConfig+0xdc>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003261 	.word	0x08003261
 8003230:	08003279 	.word	0x08003279
 8003234:	08003279 	.word	0x08003279
 8003238:	08003279 	.word	0x08003279
 800323c:	0800326d 	.word	0x0800326d
 8003240:	08003279 	.word	0x08003279
 8003244:	08003279 	.word	0x08003279
 8003248:	08003279 	.word	0x08003279
 800324c:	08003267 	.word	0x08003267
 8003250:	08003279 	.word	0x08003279
 8003254:	08003279 	.word	0x08003279
 8003258:	08003279 	.word	0x08003279
 800325c:	08003273 	.word	0x08003273
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e118      	b.n	8003498 <UART_SetConfig+0x348>
 8003266:	2302      	movs	r3, #2
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e115      	b.n	8003498 <UART_SetConfig+0x348>
 800326c:	2304      	movs	r3, #4
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e112      	b.n	8003498 <UART_SetConfig+0x348>
 8003272:	2308      	movs	r3, #8
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e10f      	b.n	8003498 <UART_SetConfig+0x348>
 8003278:	2310      	movs	r3, #16
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e10c      	b.n	8003498 <UART_SetConfig+0x348>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a68      	ldr	r2, [pc, #416]	; (8003424 <UART_SetConfig+0x2d4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d120      	bne.n	80032ca <UART_SetConfig+0x17a>
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <UART_SetConfig+0x2cc>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003292:	2b30      	cmp	r3, #48	; 0x30
 8003294:	d013      	beq.n	80032be <UART_SetConfig+0x16e>
 8003296:	2b30      	cmp	r3, #48	; 0x30
 8003298:	d814      	bhi.n	80032c4 <UART_SetConfig+0x174>
 800329a:	2b20      	cmp	r3, #32
 800329c:	d009      	beq.n	80032b2 <UART_SetConfig+0x162>
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d810      	bhi.n	80032c4 <UART_SetConfig+0x174>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <UART_SetConfig+0x15c>
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d006      	beq.n	80032b8 <UART_SetConfig+0x168>
 80032aa:	e00b      	b.n	80032c4 <UART_SetConfig+0x174>
 80032ac:	2300      	movs	r3, #0
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e0f2      	b.n	8003498 <UART_SetConfig+0x348>
 80032b2:	2302      	movs	r3, #2
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e0ef      	b.n	8003498 <UART_SetConfig+0x348>
 80032b8:	2304      	movs	r3, #4
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e0ec      	b.n	8003498 <UART_SetConfig+0x348>
 80032be:	2308      	movs	r3, #8
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e0e9      	b.n	8003498 <UART_SetConfig+0x348>
 80032c4:	2310      	movs	r3, #16
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e0e6      	b.n	8003498 <UART_SetConfig+0x348>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a56      	ldr	r2, [pc, #344]	; (8003428 <UART_SetConfig+0x2d8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d120      	bne.n	8003316 <UART_SetConfig+0x1c6>
 80032d4:	4b51      	ldr	r3, [pc, #324]	; (800341c <UART_SetConfig+0x2cc>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032de:	2bc0      	cmp	r3, #192	; 0xc0
 80032e0:	d013      	beq.n	800330a <UART_SetConfig+0x1ba>
 80032e2:	2bc0      	cmp	r3, #192	; 0xc0
 80032e4:	d814      	bhi.n	8003310 <UART_SetConfig+0x1c0>
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d009      	beq.n	80032fe <UART_SetConfig+0x1ae>
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d810      	bhi.n	8003310 <UART_SetConfig+0x1c0>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <UART_SetConfig+0x1a8>
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d006      	beq.n	8003304 <UART_SetConfig+0x1b4>
 80032f6:	e00b      	b.n	8003310 <UART_SetConfig+0x1c0>
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e0cc      	b.n	8003498 <UART_SetConfig+0x348>
 80032fe:	2302      	movs	r3, #2
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e0c9      	b.n	8003498 <UART_SetConfig+0x348>
 8003304:	2304      	movs	r3, #4
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e0c6      	b.n	8003498 <UART_SetConfig+0x348>
 800330a:	2308      	movs	r3, #8
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e0c3      	b.n	8003498 <UART_SetConfig+0x348>
 8003310:	2310      	movs	r3, #16
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e0c0      	b.n	8003498 <UART_SetConfig+0x348>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a44      	ldr	r2, [pc, #272]	; (800342c <UART_SetConfig+0x2dc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d125      	bne.n	800336c <UART_SetConfig+0x21c>
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <UART_SetConfig+0x2cc>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332e:	d017      	beq.n	8003360 <UART_SetConfig+0x210>
 8003330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003334:	d817      	bhi.n	8003366 <UART_SetConfig+0x216>
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d00b      	beq.n	8003354 <UART_SetConfig+0x204>
 800333c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003340:	d811      	bhi.n	8003366 <UART_SetConfig+0x216>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <UART_SetConfig+0x1fe>
 8003346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334a:	d006      	beq.n	800335a <UART_SetConfig+0x20a>
 800334c:	e00b      	b.n	8003366 <UART_SetConfig+0x216>
 800334e:	2300      	movs	r3, #0
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e0a1      	b.n	8003498 <UART_SetConfig+0x348>
 8003354:	2302      	movs	r3, #2
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e09e      	b.n	8003498 <UART_SetConfig+0x348>
 800335a:	2304      	movs	r3, #4
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e09b      	b.n	8003498 <UART_SetConfig+0x348>
 8003360:	2308      	movs	r3, #8
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e098      	b.n	8003498 <UART_SetConfig+0x348>
 8003366:	2310      	movs	r3, #16
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e095      	b.n	8003498 <UART_SetConfig+0x348>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2f      	ldr	r2, [pc, #188]	; (8003430 <UART_SetConfig+0x2e0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d125      	bne.n	80033c2 <UART_SetConfig+0x272>
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <UART_SetConfig+0x2cc>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003380:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003384:	d017      	beq.n	80033b6 <UART_SetConfig+0x266>
 8003386:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800338a:	d817      	bhi.n	80033bc <UART_SetConfig+0x26c>
 800338c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003390:	d00b      	beq.n	80033aa <UART_SetConfig+0x25a>
 8003392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003396:	d811      	bhi.n	80033bc <UART_SetConfig+0x26c>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <UART_SetConfig+0x254>
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d006      	beq.n	80033b0 <UART_SetConfig+0x260>
 80033a2:	e00b      	b.n	80033bc <UART_SetConfig+0x26c>
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e076      	b.n	8003498 <UART_SetConfig+0x348>
 80033aa:	2302      	movs	r3, #2
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e073      	b.n	8003498 <UART_SetConfig+0x348>
 80033b0:	2304      	movs	r3, #4
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e070      	b.n	8003498 <UART_SetConfig+0x348>
 80033b6:	2308      	movs	r3, #8
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e06d      	b.n	8003498 <UART_SetConfig+0x348>
 80033bc:	2310      	movs	r3, #16
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e06a      	b.n	8003498 <UART_SetConfig+0x348>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	; (8003434 <UART_SetConfig+0x2e4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d138      	bne.n	800343e <UART_SetConfig+0x2ee>
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <UART_SetConfig+0x2cc>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033da:	d017      	beq.n	800340c <UART_SetConfig+0x2bc>
 80033dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e0:	d82a      	bhi.n	8003438 <UART_SetConfig+0x2e8>
 80033e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e6:	d00b      	beq.n	8003400 <UART_SetConfig+0x2b0>
 80033e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ec:	d824      	bhi.n	8003438 <UART_SetConfig+0x2e8>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <UART_SetConfig+0x2aa>
 80033f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f6:	d006      	beq.n	8003406 <UART_SetConfig+0x2b6>
 80033f8:	e01e      	b.n	8003438 <UART_SetConfig+0x2e8>
 80033fa:	2300      	movs	r3, #0
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e04b      	b.n	8003498 <UART_SetConfig+0x348>
 8003400:	2302      	movs	r3, #2
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e048      	b.n	8003498 <UART_SetConfig+0x348>
 8003406:	2304      	movs	r3, #4
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e045      	b.n	8003498 <UART_SetConfig+0x348>
 800340c:	2308      	movs	r3, #8
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e042      	b.n	8003498 <UART_SetConfig+0x348>
 8003412:	bf00      	nop
 8003414:	efff69f3 	.word	0xefff69f3
 8003418:	40011000 	.word	0x40011000
 800341c:	40023800 	.word	0x40023800
 8003420:	40004400 	.word	0x40004400
 8003424:	40004800 	.word	0x40004800
 8003428:	40004c00 	.word	0x40004c00
 800342c:	40005000 	.word	0x40005000
 8003430:	40011400 	.word	0x40011400
 8003434:	40007800 	.word	0x40007800
 8003438:	2310      	movs	r3, #16
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e02c      	b.n	8003498 <UART_SetConfig+0x348>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a72      	ldr	r2, [pc, #456]	; (800360c <UART_SetConfig+0x4bc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d125      	bne.n	8003494 <UART_SetConfig+0x344>
 8003448:	4b71      	ldr	r3, [pc, #452]	; (8003610 <UART_SetConfig+0x4c0>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003452:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003456:	d017      	beq.n	8003488 <UART_SetConfig+0x338>
 8003458:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800345c:	d817      	bhi.n	800348e <UART_SetConfig+0x33e>
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003462:	d00b      	beq.n	800347c <UART_SetConfig+0x32c>
 8003464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003468:	d811      	bhi.n	800348e <UART_SetConfig+0x33e>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <UART_SetConfig+0x326>
 800346e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003472:	d006      	beq.n	8003482 <UART_SetConfig+0x332>
 8003474:	e00b      	b.n	800348e <UART_SetConfig+0x33e>
 8003476:	2300      	movs	r3, #0
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e00d      	b.n	8003498 <UART_SetConfig+0x348>
 800347c:	2302      	movs	r3, #2
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e00a      	b.n	8003498 <UART_SetConfig+0x348>
 8003482:	2304      	movs	r3, #4
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e007      	b.n	8003498 <UART_SetConfig+0x348>
 8003488:	2308      	movs	r3, #8
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e004      	b.n	8003498 <UART_SetConfig+0x348>
 800348e:	2310      	movs	r3, #16
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e001      	b.n	8003498 <UART_SetConfig+0x348>
 8003494:	2310      	movs	r3, #16
 8003496:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d15b      	bne.n	800355a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034a2:	7ffb      	ldrb	r3, [r7, #31]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d828      	bhi.n	80034fa <UART_SetConfig+0x3aa>
 80034a8:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <UART_SetConfig+0x360>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fb 	.word	0x080034fb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
 80034d0:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7ff f99e 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80034d8:	61b8      	str	r0, [r7, #24]
        break;
 80034da:	e013      	b.n	8003504 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7ff f9ae 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 80034e0:	61b8      	str	r0, [r7, #24]
        break;
 80034e2:	e00f      	b.n	8003504 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <UART_SetConfig+0x4c4>)
 80034e6:	61bb      	str	r3, [r7, #24]
        break;
 80034e8:	e00c      	b.n	8003504 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7ff f883 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80034ee:	61b8      	str	r0, [r7, #24]
        break;
 80034f0:	e008      	b.n	8003504 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	61bb      	str	r3, [r7, #24]
        break;
 80034f8:	e004      	b.n	8003504 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77bb      	strb	r3, [r7, #30]
        break;
 8003502:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d074      	beq.n	80035f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	005a      	lsls	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	441a      	add	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d916      	bls.n	8003554 <UART_SetConfig+0x404>
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d212      	bcs.n	8003554 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f023 030f 	bic.w	r3, r3, #15
 8003536:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	b29a      	uxth	r2, r3
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	4313      	orrs	r3, r2
 8003548:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	89fa      	ldrh	r2, [r7, #14]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	e04f      	b.n	80035f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	77bb      	strb	r3, [r7, #30]
 8003558:	e04c      	b.n	80035f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800355a:	7ffb      	ldrb	r3, [r7, #31]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d828      	bhi.n	80035b2 <UART_SetConfig+0x462>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0x418>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800358d 	.word	0x0800358d
 800356c:	08003595 	.word	0x08003595
 8003570:	0800359d 	.word	0x0800359d
 8003574:	080035b3 	.word	0x080035b3
 8003578:	080035a3 	.word	0x080035a3
 800357c:	080035b3 	.word	0x080035b3
 8003580:	080035b3 	.word	0x080035b3
 8003584:	080035b3 	.word	0x080035b3
 8003588:	080035ab 	.word	0x080035ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358c:	f7ff f942 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8003590:	61b8      	str	r0, [r7, #24]
        break;
 8003592:	e013      	b.n	80035bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003594:	f7ff f952 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003598:	61b8      	str	r0, [r7, #24]
        break;
 800359a:	e00f      	b.n	80035bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <UART_SetConfig+0x4c4>)
 800359e:	61bb      	str	r3, [r7, #24]
        break;
 80035a0:	e00c      	b.n	80035bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a2:	f7ff f827 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80035a6:	61b8      	str	r0, [r7, #24]
        break;
 80035a8:	e008      	b.n	80035bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ae:	61bb      	str	r3, [r7, #24]
        break;
 80035b0:	e004      	b.n	80035bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	77bb      	strb	r3, [r7, #30]
        break;
 80035ba:	bf00      	nop
    }

    if (pclk != 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	085a      	lsrs	r2, r3, #1
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	441a      	add	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b0f      	cmp	r3, #15
 80035da:	d909      	bls.n	80035f0 <UART_SetConfig+0x4a0>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e2:	d205      	bcs.n	80035f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	e001      	b.n	80035f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003600:	7fbb      	ldrb	r3, [r7, #30]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40007c00 	.word	0x40007c00
 8003610:	40023800 	.word	0x40023800
 8003614:	00f42400 	.word	0x00f42400

08003618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01a      	beq.n	800372e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d10a      	bne.n	800372e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af02      	add	r7, sp, #8
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800376c:	f7fd fb4e 	bl	8000e0c <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d10e      	bne.n	800379e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f831 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e027      	b.n	80037ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d10e      	bne.n	80037ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f81b 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e011      	b.n	80037ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b09c      	sub	sp, #112	; 0x70
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003806:	e0a7      	b.n	8003958 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380e:	f000 80a3 	beq.w	8003958 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fd fafb 	bl	8000e0c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <UART_WaitOnFlagUntilTimeout+0x32>
 8003822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003824:	2b00      	cmp	r3, #0
 8003826:	d13f      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800383c:	667b      	str	r3, [r7, #100]	; 0x64
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003848:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800384c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e6      	bne.n	8003828 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3308      	adds	r3, #8
 8003860:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	663b      	str	r3, [r7, #96]	; 0x60
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3308      	adds	r3, #8
 8003878:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800387a:	64ba      	str	r2, [r7, #72]	; 0x48
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e5      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e068      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d050      	beq.n	8003958 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	d148      	bne.n	8003958 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e6      	bne.n	80038d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3308      	adds	r3, #8
 8003908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	613b      	str	r3, [r7, #16]
   return(result);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	66bb      	str	r3, [r7, #104]	; 0x68
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3308      	adds	r3, #8
 8003920:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003922:	623a      	str	r2, [r7, #32]
 8003924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e5      	bne.n	8003902 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e010      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4013      	ands	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	429a      	cmp	r2, r3
 8003974:	f43f af48 	beq.w	8003808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3770      	adds	r7, #112	; 0x70
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	; (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	; (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	; (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	; (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 f820 	bl	80039dc <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	08003a14 	.word	0x08003a14
 80039c0:	08003a14 	.word	0x08003a14
 80039c4:	08003a14 	.word	0x08003a14
 80039c8:	08003a18 	.word	0x08003a18

080039cc <memset>:
 80039cc:	4402      	add	r2, r0
 80039ce:	4603      	mov	r3, r0
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d100      	bne.n	80039d6 <memset+0xa>
 80039d4:	4770      	bx	lr
 80039d6:	f803 1b01 	strb.w	r1, [r3], #1
 80039da:	e7f9      	b.n	80039d0 <memset+0x4>

080039dc <_init>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr

080039e8 <_fini>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr
