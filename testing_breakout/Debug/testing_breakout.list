
testing_breakout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004668  08004668  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004670  08004670  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  080046e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080046e8  00020194  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d55a  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac4  00000000  00000000  0002d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027663  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbfa  00000000  00000000  00057a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2b28  00000000  00000000  00065685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001581ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  00158200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080045d8 	.word	0x080045d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080045d8 	.word	0x080045d8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <InitMPU_6050>:

	return i2c_success;
}

void InitMPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	/* create a parameter that determines the size of each array */
	uint8_t i2cTxBuffer[6] = {0};
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	2300      	movs	r3, #0
 80005f4:	82bb      	strh	r3, [r7, #20]
	uint8_t i2cRxBuffer[6] = {0};
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	2300      	movs	r3, #0
 80005fc:	81bb      	strh	r3, [r7, #12]

	my_mpu_6050->i2c_handle = i2c;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	601a      	str	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff = i2cTxBuffer;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f107 0210 	add.w	r2, r7, #16
 800060a:	605a      	str	r2, [r3, #4]
	my_mpu_6050->i2c_rx_buff = i2cRxBuffer;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f107 0208 	add.w	r2, r7, #8
 8000612:	60da      	str	r2, [r3, #12]

	my_mpu_6050->i2c_tx_size = 6;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2206      	movs	r2, #6
 8000618:	721a      	strb	r2, [r3, #8]
	my_mpu_6050->i2c_rx_size = 6;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2206      	movs	r2, #6
 800061e:	741a      	strb	r2, [r3, #16]

}
 8000620:	bf00      	nop
 8000622:	371c      	adds	r7, #28
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <Mpu_Config>:

/* Create another parameter that will allow user to
 * configure the full scale range of the accelerometer
 */
uint8_t Mpu_Config(mpu_6050_t *my_mpu_6050)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
 8000632:	6078      	str	r0, [r7, #4]
	uint8_t configSuccess = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
	my_mpu_6050->i2c_tx_buff[0] = ACCEL_CONFIG;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	221c      	movs	r2, #28
 800063e:	701a      	strb	r2, [r3, #0]

	/* changing the value written to ACCEL_CONFIG */
	//my_mpu_6050->i2c_tx_buff[1] = (0xE0U | AFS_SEL_8);
	my_mpu_6050->i2c_tx_buff[1] = AFS_SEL_8;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	2210      	movs	r2, #16
 8000648:	701a      	strb	r2, [r3, #0]

	configSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	21d0      	movs	r1, #208	; 0xd0
 800065a:	f001 f849 	bl	80016f0 <HAL_I2C_Master_Transmit>
 800065e:	4603      	mov	r3, r0
 8000660:	73fb      	strb	r3, [r7, #15]

	return configSuccess;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <Fifo_Enable>:

uint8_t Fifo_Enable(mpu_6050_t *my_mpu_6050)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	uint8_t enableSuccess = HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]

	//clearBuff(my_mpu_6050);

	my_mpu_6050->i2c_tx_buff[0] = FIFO_EN;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	2223      	movs	r2, #35	; 0x23
 800067e:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = FIFO_ACCEL_EN;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	2208      	movs	r2, #8
 8000688:	701a      	strb	r2, [r3, #0]

	enableSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2302      	movs	r3, #2
 8000698:	21d0      	movs	r1, #208	; 0xd0
 800069a:	f001 f829 	bl	80016f0 <HAL_I2C_Master_Transmit>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]

	return enableSuccess;
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <getAccel>:

uint8_t getAccel(mpu_6050_t *my_mpu_6050)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Tx_flag = HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]

	//clearBuff(my_mpu_6050);

//	my_mpu_6050->i2c_tx_buff[0] = FIFO_R_W;

	my_mpu_6050->i2c_tx_buff[0] = ACCEL_X_OUT_H;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	223b      	movs	r2, #59	; 0x3b
 80006c6:	701a      	strb	r2, [r3, #0]
	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 1000);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2301      	movs	r3, #1
 80006d8:	21d0      	movs	r1, #208	; 0xd0
 80006da:	f001 f809 	bl	80016f0 <HAL_I2C_Master_Transmit>
 80006de:	4603      	mov	r3, r0
 80006e0:	73bb      	strb	r3, [r7, #14]

	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 1000);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2306      	movs	r3, #6
 80006f2:	21d1      	movs	r1, #209	; 0xd1
 80006f4:	f001 f8f0 	bl	80018d8 <HAL_I2C_Master_Receive>
 80006f8:	4603      	mov	r3, r0
 80006fa:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 80006fc:	7bbb      	ldrb	r3, [r7, #14]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d104      	bne.n	800070c <getAccel+0x60>
 8000702:	7b7b      	ldrb	r3, [r7, #13]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d101      	bne.n	800070c <getAccel+0x60>
		i2c_success = HAL_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]

	/* You are also supposed to check A0 Pin on MPU_6050 */

	return i2c_success;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <setSampleRt>:

uint8_t setSampleRt(mpu_6050_t *my_mpu_6050)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af02      	add	r7, sp, #8
 800071c:	6078      	str	r0, [r7, #4]
	uint8_t sampleSuccess = HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = SMPRT_DIV;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2219      	movs	r2, #25
 8000728:	701a      	strb	r2, [r3, #0]

	/* Divider == 8 therefore sampleRate = 8kHz/8 == 1kHz */
	my_mpu_6050->i2c_tx_buff[0] = 0x08U;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	2208      	movs	r2, #8
 8000730:	701a      	strb	r2, [r3, #0]

	sampleSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2302      	movs	r3, #2
 8000740:	21d0      	movs	r1, #208	; 0xd0
 8000742:	f000 ffd5 	bl	80016f0 <HAL_I2C_Master_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]

	return sampleSuccess;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <wake>:

uint8_t wake(mpu_6050_t *my_mpu_6050)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t wakeSuccess = HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = PWR_MGMT_1;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	226b      	movs	r2, #107	; 0x6b
 8000766:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = 0x00U;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]

	wakeSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2302      	movs	r3, #2
 8000780:	21d0      	movs	r1, #208	; 0xd0
 8000782:	f000 ffb5 	bl	80016f0 <HAL_I2C_Master_Transmit>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]

	return wakeSuccess;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b092      	sub	sp, #72	; 0x48
 8000798:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fbec 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f889 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 f953 	bl	8000a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80007a6:	f000 f8e1 	bl	800096c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80007aa:	f000 f91f 	bl	80009ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  InitMPU_6050(&my_imu, &hi2c1);
 80007ae:	493c      	ldr	r1, [pc, #240]	; (80008a0 <main+0x10c>)
 80007b0:	483c      	ldr	r0, [pc, #240]	; (80008a4 <main+0x110>)
 80007b2:	f7ff ff17 	bl	80005e4 <InitMPU_6050>

  wake(&my_imu);
 80007b6:	483b      	ldr	r0, [pc, #236]	; (80008a4 <main+0x110>)
 80007b8:	f7ff ffcc 	bl	8000754 <wake>

  setSampleRt(&my_imu);
 80007bc:	4839      	ldr	r0, [pc, #228]	; (80008a4 <main+0x110>)
 80007be:	f7ff ffaa 	bl	8000716 <setSampleRt>

  Mpu_Config(&my_imu);
 80007c2:	4838      	ldr	r0, [pc, #224]	; (80008a4 <main+0x110>)
 80007c4:	f7ff ff32 	bl	800062c <Mpu_Config>

  uint8_t dummyVal = (1U << 6);
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  HAL_I2C_Master_Transmit(&hi2c1, MASTER_W, &dummyVal, 1, 100);
 80007ce:	f107 0237 	add.w	r2, r7, #55	; 0x37
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	21d0      	movs	r1, #208	; 0xd0
 80007da:	4831      	ldr	r0, [pc, #196]	; (80008a0 <main+0x10c>)
 80007dc:	f000 ff88 	bl	80016f0 <HAL_I2C_Master_Transmit>

  Fifo_Enable(&my_imu);
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <main+0x110>)
 80007e2:	f7ff ff43 	bl	800066c <Fifo_Enable>
  int16_t accelX;
  int16_t accelY;
  int16_t accelZ;

	uint8_t uart_buff[50];
	uint8_t uart_len = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//
	  if (getAccel(&my_imu) == HAL_OK)
 80007ec:	482d      	ldr	r0, [pc, #180]	; (80008a4 <main+0x110>)
 80007ee:	f7ff ff5d 	bl	80006ac <getAccel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d105      	bne.n	8000804 <main+0x70>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	482a      	ldr	r0, [pc, #168]	; (80008a8 <main+0x114>)
 80007fe:	f000 fecd 	bl	800159c <HAL_GPIO_WritePin>
 8000802:	e004      	b.n	800080e <main+0x7a>
      else
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4827      	ldr	r0, [pc, #156]	; (80008a8 <main+0x114>)
 800080a:	f000 fec7 	bl	800159c <HAL_GPIO_WritePin>

	accelX = (((int8_t)my_imu.i2c_rx_buff[0] << 8) | (int8_t)my_imu.i2c_rx_buff[1]);
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <main+0x110>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	b21a      	sxth	r2, r3
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <main+0x110>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b25b      	sxtb	r3, r3
 8000824:	b21b      	sxth	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	87bb      	strh	r3, [r7, #60]	; 0x3c
	accelY = (((int8_t)my_imu.i2c_rx_buff[2] << 8) | (int8_t)my_imu.i2c_rx_buff[3]);
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <main+0x110>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	3302      	adds	r3, #2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21a      	sxth	r2, r3
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <main+0x110>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	3303      	adds	r3, #3
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25b      	sxtb	r3, r3
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	877b      	strh	r3, [r7, #58]	; 0x3a
	accelZ = (((int8_t)my_imu.i2c_rx_buff[4] << 8) | (int8_t)my_imu.i2c_rx_buff[5]);
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <main+0x110>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	3304      	adds	r3, #4
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b21a      	sxth	r2, r3
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <main+0x110>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	3305      	adds	r3, #5
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b25b      	sxtb	r3, r3
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	873b      	strh	r3, [r7, #56]	; 0x38

	uart_len = sprintf((char *)uart_buff, "AccelX: %hd , AccelY: %hd, AccelZ: %hd\r\n", accelX, accelY, accelZ);
 8000866:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800086a:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 800086e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000872:	1d38      	adds	r0, r7, #4
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	460b      	mov	r3, r1
 8000878:	490c      	ldr	r1, [pc, #48]	; (80008ac <main+0x118>)
 800087a:	f003 fa3f 	bl	8003cfc <siprintf>
 800087e:	4603      	mov	r3, r0
 8000880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_UART_Transmit(&huart3, uart_buff, uart_len, 100);
 8000884:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000888:	b29a      	uxth	r2, r3
 800088a:	1d39      	adds	r1, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <main+0x11c>)
 8000890:	f002 fd64 	bl	800335c <HAL_UART_Transmit>
	HAL_Delay(500);
 8000894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000898:	f000 fbca 	bl	8001030 <HAL_Delay>
	  if (getAccel(&my_imu) == HAL_OK)
 800089c:	e7a6      	b.n	80007ec <main+0x58>
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	20000168 	.word	0x20000168
 80008a8:	40020400 	.word	0x40020400
 80008ac:	080045f0 	.word	0x080045f0
 80008b0:	200000e0 	.word	0x200000e0

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2234      	movs	r2, #52	; 0x34
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fa12 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <SystemClock_Config+0xb0>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <SystemClock_Config+0xb0>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <SystemClock_Config+0xb0>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <SystemClock_Config+0xb4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <SystemClock_Config+0xb4>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <SystemClock_Config+0xb4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2310      	movs	r3, #16
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fbd3 	bl	80020cc <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800092c:	f000 f99e 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fe6b 	bl	8002628 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000958:	f000 f988 	bl	8000c6c <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_I2C1_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <MX_I2C1_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 208;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_I2C1_Init+0x74>)
 800097e:	22d0      	movs	r2, #208	; 0xd0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009a8:	f000 fe12 	bl	80015d0 <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 f95b 	bl	8000c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009ba:	f001 faef 	bl	8001f9c <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 f952 	bl	8000c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009cc:	f001 fb31 	bl	8002032 <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f949 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000008c 	.word	0x2000008c
 80009e4:	40005400 	.word	0x40005400
 80009e8:	00300208 	.word	0x00300208

080009ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART3_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a30:	f002 fc46 	bl	80032c0 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f917 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000e0 	.word	0x200000e0
 8000a48:	40004800 	.word	0x40004800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b7d      	ldr	r3, [pc, #500]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a7c      	ldr	r2, [pc, #496]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b7a      	ldr	r3, [pc, #488]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b77      	ldr	r3, [pc, #476]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a76      	ldr	r2, [pc, #472]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b74      	ldr	r3, [pc, #464]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b71      	ldr	r3, [pc, #452]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a70      	ldr	r2, [pc, #448]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b6e      	ldr	r3, [pc, #440]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a6a      	ldr	r2, [pc, #424]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b68      	ldr	r3, [pc, #416]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b65      	ldr	r3, [pc, #404]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a64      	ldr	r2, [pc, #400]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b62      	ldr	r3, [pc, #392]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ada:	4b5f      	ldr	r3, [pc, #380]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a5e      	ldr	r2, [pc, #376]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b5c      	ldr	r3, [pc, #368]	; (8000c58 <MX_GPIO_Init+0x20c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af8:	4858      	ldr	r0, [pc, #352]	; (8000c5c <MX_GPIO_Init+0x210>)
 8000afa:	f000 fd4f 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4857      	ldr	r0, [pc, #348]	; (8000c60 <MX_GPIO_Init+0x214>)
 8000b04:	f000 fd4a 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4851      	ldr	r0, [pc, #324]	; (8000c64 <MX_GPIO_Init+0x218>)
 8000b20:	f000 fb90 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b24:	2332      	movs	r3, #50	; 0x32
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b34:	230b      	movs	r3, #11
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4849      	ldr	r0, [pc, #292]	; (8000c64 <MX_GPIO_Init+0x218>)
 8000b40:	f000 fb80 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b44:	2386      	movs	r3, #134	; 0x86
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4842      	ldr	r0, [pc, #264]	; (8000c68 <MX_GPIO_Init+0x21c>)
 8000b60:	f000 fb70 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4837      	ldr	r0, [pc, #220]	; (8000c5c <MX_GPIO_Init+0x210>)
 8000b7e:	f000 fb61 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b94:	230b      	movs	r3, #11
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	482f      	ldr	r0, [pc, #188]	; (8000c5c <MX_GPIO_Init+0x210>)
 8000ba0:	f000 fb50 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4829      	ldr	r0, [pc, #164]	; (8000c60 <MX_GPIO_Init+0x214>)
 8000bbc:	f000 fb42 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4823      	ldr	r0, [pc, #140]	; (8000c60 <MX_GPIO_Init+0x214>)
 8000bd4:	f000 fb36 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bea:	230a      	movs	r3, #10
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481c      	ldr	r0, [pc, #112]	; (8000c68 <MX_GPIO_Init+0x21c>)
 8000bf6:	f000 fb25 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4816      	ldr	r0, [pc, #88]	; (8000c68 <MX_GPIO_Init+0x21c>)
 8000c10:	f000 fb18 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c26:	230b      	movs	r3, #11
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <MX_GPIO_Init+0x214>)
 8000c32:	f000 fb07 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_GPIO_Init+0x210>)
 8000c4c:	f000 fafa 	bl	8001244 <HAL_GPIO_Init>

}
 8000c50:	bf00      	nop
 8000c52:	3730      	adds	r7, #48	; 0x30
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40021800 	.word	0x40021800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020000 	.word	0x40020000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x44>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_MspInit+0x44>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x44>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x44>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x44>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x44>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0ae      	sub	sp, #184	; 0xb8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2290      	movs	r2, #144	; 0x90
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 f803 	bl	8003cec <memset>
  if(hi2c->Instance==I2C1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_I2C_MspInit+0xb4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d13c      	bne.n	8000d6a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 feb6 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d0a:	f7ff ffaf 	bl	8000c6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_I2C_MspInit+0xb8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_I2C_MspInit+0xb8>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_I2C_MspInit+0xb8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d40:	2304      	movs	r3, #4
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <HAL_I2C_MspInit+0xbc>)
 8000d4e:	f000 fa79 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_I2C_MspInit+0xb8>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_I2C_MspInit+0xb8>)
 8000d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_I2C_MspInit+0xb8>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	37b8      	adds	r7, #184	; 0xb8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0ae      	sub	sp, #184	; 0xb8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2290      	movs	r2, #144	; 0x90
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 ffa3 	bl	8003cec <memset>
  if(huart->Instance==USART3)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_UART_MspInit+0xb4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d13c      	bne.n	8000e2a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fe56 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dca:	f7ff ff4f 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0xb8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0xbc>)
 8000e26:	f000 fa0d 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	37b8      	adds	r7, #184	; 0xb8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004800 	.word	0x40004800
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f8b0 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f002 fee8 	bl	8003c98 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20080000 	.word	0x20080000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	2000017c 	.word	0x2000017c
 8000efc:	20000198 	.word	0x20000198

08000f00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f002 fea7 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fc1d 	bl	8000794 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f68:	08004678 	.word	0x08004678
  ldr r2, =_sbss
 8000f6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f70:	20000194 	.word	0x20000194

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>

08000f76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f92e 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 f805 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f86:	f7ff fe77 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f93b 	bl	800122a <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f911 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000180 	.word	0x20000180

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000180 	.word	0x20000180

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff47 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff5c 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff8e 	bl	8001130 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffb0 	bl	8001198 <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e175      	b.n	8001550 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8164 	bne.w	800154a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x56>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80be 	beq.w	800154a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	4b66      	ldr	r3, [pc, #408]	; (8001568 <HAL_GPIO_Init+0x324>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_GPIO_Init+0x324>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_GPIO_Init+0x324>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013e6:	4a61      	ldr	r2, [pc, #388]	; (800156c <HAL_GPIO_Init+0x328>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a58      	ldr	r2, [pc, #352]	; (8001570 <HAL_GPIO_Init+0x32c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d037      	beq.n	8001482 <HAL_GPIO_Init+0x23e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a57      	ldr	r2, [pc, #348]	; (8001574 <HAL_GPIO_Init+0x330>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d031      	beq.n	800147e <HAL_GPIO_Init+0x23a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_GPIO_Init+0x334>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d02b      	beq.n	800147a <HAL_GPIO_Init+0x236>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a55      	ldr	r2, [pc, #340]	; (800157c <HAL_GPIO_Init+0x338>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x232>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a54      	ldr	r2, [pc, #336]	; (8001580 <HAL_GPIO_Init+0x33c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x22e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a53      	ldr	r2, [pc, #332]	; (8001584 <HAL_GPIO_Init+0x340>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x22a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a52      	ldr	r2, [pc, #328]	; (8001588 <HAL_GPIO_Init+0x344>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x226>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a51      	ldr	r2, [pc, #324]	; (800158c <HAL_GPIO_Init+0x348>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x222>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a50      	ldr	r2, [pc, #320]	; (8001590 <HAL_GPIO_Init+0x34c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x21e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4f      	ldr	r2, [pc, #316]	; (8001594 <HAL_GPIO_Init+0x350>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x21a>
 800145a:	2309      	movs	r3, #9
 800145c:	e012      	b.n	8001484 <HAL_GPIO_Init+0x240>
 800145e:	230a      	movs	r3, #10
 8001460:	e010      	b.n	8001484 <HAL_GPIO_Init+0x240>
 8001462:	2308      	movs	r3, #8
 8001464:	e00e      	b.n	8001484 <HAL_GPIO_Init+0x240>
 8001466:	2307      	movs	r3, #7
 8001468:	e00c      	b.n	8001484 <HAL_GPIO_Init+0x240>
 800146a:	2306      	movs	r3, #6
 800146c:	e00a      	b.n	8001484 <HAL_GPIO_Init+0x240>
 800146e:	2305      	movs	r3, #5
 8001470:	e008      	b.n	8001484 <HAL_GPIO_Init+0x240>
 8001472:	2304      	movs	r3, #4
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x240>
 8001476:	2303      	movs	r3, #3
 8001478:	e004      	b.n	8001484 <HAL_GPIO_Init+0x240>
 800147a:	2302      	movs	r3, #2
 800147c:	e002      	b.n	8001484 <HAL_GPIO_Init+0x240>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x240>
 8001482:	2300      	movs	r3, #0
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	f002 0203 	and.w	r2, r2, #3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4093      	lsls	r3, r2
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001494:	4935      	ldr	r1, [pc, #212]	; (800156c <HAL_GPIO_Init+0x328>)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <HAL_GPIO_Init+0x354>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c6:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_GPIO_Init+0x354>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_GPIO_Init+0x354>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f0:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_GPIO_Init+0x354>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_GPIO_Init+0x354>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151a:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <HAL_GPIO_Init+0x354>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_GPIO_Init+0x354>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_GPIO_Init+0x354>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3301      	adds	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	f67f ae86 	bls.w	8001264 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40013800 	.word	0x40013800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40021000 	.word	0x40021000
 8001584:	40021400 	.word	0x40021400
 8001588:	40021800 	.word	0x40021800
 800158c:	40021c00 	.word	0x40021c00
 8001590:	40022000 	.word	0x40022000
 8001594:	40022400 	.word	0x40022400
 8001598:	40013c00 	.word	0x40013c00

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015b8:	e003      	b.n	80015c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	041a      	lsls	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	619a      	str	r2, [r3, #24]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fb62 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0201 	bic.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e006      	b.n	8001658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d104      	bne.n	800166a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_I2C_Init+0x11c>)
 8001676:	430b      	orrs	r3, r1
 8001678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69d9      	ldr	r1, [r3, #28]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	02008000 	.word	0x02008000

080016f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	817b      	strh	r3, [r7, #10]
 8001700:	4613      	mov	r3, r2
 8001702:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b20      	cmp	r3, #32
 800170e:	f040 80da 	bne.w	80018c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x30>
 800171c:	2302      	movs	r3, #2
 800171e:	e0d3      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001728:	f7ff fc76 	bl	8001018 <HAL_GetTick>
 800172c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2319      	movs	r3, #25
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f9e6 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0be      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2221      	movs	r2, #33	; 0x21
 800174e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2210      	movs	r2, #16
 8001756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	893a      	ldrh	r2, [r7, #8]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	d90e      	bls.n	800179a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	22ff      	movs	r2, #255	; 0xff
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001786:	b2da      	uxtb	r2, r3
 8001788:	8979      	ldrh	r1, [r7, #10]
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fbd0 	bl	8001f38 <I2C_TransferConfig>
 8001798:	e06c      	b.n	8001874 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	8979      	ldrh	r1, [r7, #10]
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fbbf 	bl	8001f38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017ba:	e05b      	b.n	8001874 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6a39      	ldr	r1, [r7, #32]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f9e3 	bl	8001b8c <I2C_WaitOnTXISFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e07b      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d034      	beq.n	8001874 <HAL_I2C_Master_Transmit+0x184>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	2b00      	cmp	r3, #0
 8001810:	d130      	bne.n	8001874 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2200      	movs	r2, #0
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f975 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e04d      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d90e      	bls.n	8001854 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	b2da      	uxtb	r2, r3
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fb73 	bl	8001f38 <I2C_TransferConfig>
 8001852:	e00f      	b.n	8001874 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	b2da      	uxtb	r2, r3
 8001864:	8979      	ldrh	r1, [r7, #10]
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 fb62 	bl	8001f38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d19e      	bne.n	80017bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	6a39      	ldr	r1, [r7, #32]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f9c2 	bl	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e01a      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2220      	movs	r2, #32
 8001898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80018a6:	400b      	ands	r3, r1
 80018a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
  }
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	80002000 	.word	0x80002000
 80018d4:	fe00e800 	.word	0xfe00e800

080018d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	f040 80db 	bne.w	8001ab0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_I2C_Master_Receive+0x30>
 8001904:	2302      	movs	r3, #2
 8001906:	e0d4      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001910:	f7ff fb82 	bl	8001018 <HAL_GetTick>
 8001914:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2319      	movs	r3, #25
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f8f2 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0bf      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2222      	movs	r2, #34	; 0x22
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2210      	movs	r2, #16
 800193e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	893a      	ldrh	r2, [r7, #8]
 8001952:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	2bff      	cmp	r3, #255	; 0xff
 8001962:	d90e      	bls.n	8001982 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	b2da      	uxtb	r2, r3
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	4b52      	ldr	r3, [pc, #328]	; (8001abc <HAL_I2C_Master_Receive+0x1e4>)
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fadc 	bl	8001f38 <I2C_TransferConfig>
 8001980:	e06d      	b.n	8001a5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	b2da      	uxtb	r2, r3
 8001992:	8979      	ldrh	r1, [r7, #10]
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_I2C_Master_Receive+0x1e4>)
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 facb 	bl	8001f38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019a2:	e05c      	b.n	8001a5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	6a39      	ldr	r1, [r7, #32]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f96b 	bl	8001c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e07c      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d034      	beq.n	8001a5e <HAL_I2C_Master_Receive+0x186>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d130      	bne.n	8001a5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2200      	movs	r2, #0
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f880 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e04d      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2bff      	cmp	r3, #255	; 0xff
 8001a1e:	d90e      	bls.n	8001a3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	22ff      	movs	r2, #255	; 0xff
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fa7e 	bl	8001f38 <I2C_TransferConfig>
 8001a3c:	e00f      	b.n	8001a5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	8979      	ldrh	r1, [r7, #10]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fa6d 	bl	8001f38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d19d      	bne.n	80019a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	6a39      	ldr	r1, [r7, #32]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f8cd 	bl	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e01a      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2220      	movs	r2, #32
 8001a82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_I2C_Master_Receive+0x1e8>)
 8001a90:	400b      	ands	r3, r1
 8001a92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e000      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ab0:	2302      	movs	r3, #2
  }
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	80002400 	.word	0x80002400
 8001ac0:	fe00e800 	.word	0xfe00e800

08001ac4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d103      	bne.n	8001ae2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d007      	beq.n	8001b00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	619a      	str	r2, [r3, #24]
  }
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b1c:	e022      	b.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b24:	d01e      	beq.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b26:	f7ff fa77 	bl	8001018 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d302      	bcc.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d113      	bne.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e00f      	b.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d0cd      	beq.n	8001b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b98:	e02c      	b.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f8ea 	bl	8001d78 <I2C_IsErrorOccurred>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e02a      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb4:	d01e      	beq.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff fa2f 	bl	8001018 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d113      	bne.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f043 0220 	orr.w	r2, r3, #32
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e007      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d1cb      	bne.n	8001b9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c18:	e028      	b.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f8aa 	bl	8001d78 <I2C_IsErrorOccurred>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e026      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2e:	f7ff f9f3 	bl	8001018 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d113      	bne.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f043 0220 	orr.w	r2, r3, #32
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d1cf      	bne.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c90:	e064      	b.n	8001d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f86e 	bl	8001d78 <I2C_IsErrorOccurred>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e062      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d138      	bne.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d105      	bne.n	8001cce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e04e      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d107      	bne.n	8001cec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
 8001cea:	e002      	b.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001d06:	400b      	ands	r3, r1
 8001d08:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e022      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d26:	f7ff f977 	bl	8001018 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d302      	bcc.n	8001d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10f      	bne.n	8001d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d193      	bne.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	fe00e800 	.word	0xfe00e800

08001d78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d068      	beq.n	8001e76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dac:	e049      	b.n	8001e42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db4:	d045      	beq.n	8001e42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7ff f92f 	bl	8001018 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_IsErrorOccurred+0x54>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d13a      	bne.n	8001e42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dee:	d121      	bne.n	8001e34 <I2C_IsErrorOccurred+0xbc>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df6:	d01d      	beq.n	8001e34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d01a      	beq.n	8001e34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e0e:	f7ff f903 	bl	8001018 <HAL_GetTick>
 8001e12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e14:	e00e      	b.n	8001e34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e16:	f7ff f8ff 	bl	8001018 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b19      	cmp	r3, #25
 8001e22:	d907      	bls.n	8001e34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f043 0320 	orr.w	r3, r3, #32
 8001e2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001e32:	e006      	b.n	8001e42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d1e9      	bne.n	8001e16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d003      	beq.n	8001e58 <I2C_IsErrorOccurred+0xe0>
 8001e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0aa      	beq.n	8001dae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01c      	beq.n	8001f26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fde9 	bl	8001ac4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <I2C_IsErrorOccurred+0x1bc>)
 8001efe:	400b      	ands	r3, r1
 8001f00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	fe00e800 	.word	0xfe00e800

08001f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	817b      	strh	r3, [r7, #10]
 8001f46:	4613      	mov	r3, r2
 8001f48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f4a:	897b      	ldrh	r3, [r7, #10]
 8001f4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f50:	7a7b      	ldrb	r3, [r7, #9]
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <I2C_TransferConfig+0x60>)
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	ea02 0103 	and.w	r1, r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	03ff63ff 	.word	0x03ff63ff

08001f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d138      	bne.n	8002024 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e032      	b.n	8002026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	d139      	bne.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002052:	2302      	movs	r3, #2
 8002054:	e033      	b.n	80020be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2224      	movs	r2, #36	; 0x24
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002084:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e29b      	b.n	800261a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b96      	ldr	r3, [pc, #600]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fc:	4b93      	ldr	r3, [pc, #588]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
 8002108:	4b90      	ldr	r3, [pc, #576]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x130>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e275      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x7a>
 8002138:	4b84      	ldr	r3, [pc, #528]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a83      	ldr	r2, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x9c>
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7e      	ldr	r2, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7b      	ldr	r2, [pc, #492]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xc0>
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a75      	ldr	r2, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b73      	ldr	r3, [pc, #460]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a72      	ldr	r2, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 800218c:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b6c      	ldr	r3, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6b      	ldr	r2, [pc, #428]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe ff34 	bl	8001018 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe ff30 	bl	8001018 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e229      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe ff20 	bl	8001018 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe ff1c 	bl	8001018 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e215      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x110>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d069      	beq.n	80022de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x190>
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x17a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1e9      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	493d      	ldr	r1, [pc, #244]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e040      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a38      	ldr	r2, [pc, #224]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fed2 	bl	8001018 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe fece 	bl	8001018 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1c7      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4929      	ldr	r1, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
 80022aa:	e018      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe feae 	bl	8001018 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe feaa 	bl	8001018 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1a3      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d038      	beq.n	800235c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fe8b 	bl	8001018 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fe87 	bl	8001018 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e180      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x23a>
 8002324:	e01a      	b.n	800235c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fe71 	bl	8001018 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233a:	f7fe fe6d 	bl	8001018 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d903      	bls.n	8002350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e166      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
 800234c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b92      	ldr	r3, [pc, #584]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a4 	beq.w	80024b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b8c      	ldr	r3, [pc, #560]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a88      	ldr	r2, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b86      	ldr	r3, [pc, #536]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	4b83      	ldr	r3, [pc, #524]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800239e:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7f      	ldr	r2, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe35 	bl	8001018 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe fe31 	bl	8001018 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e12a      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c4:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x31a>
 80023d8:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a6f      	ldr	r2, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	e02d      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x33c>
 80023ee:	4b6b      	ldr	r3, [pc, #428]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a6a      	ldr	r2, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a67      	ldr	r2, [pc, #412]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	e01c      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x35e>
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a61      	ldr	r2, [pc, #388]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a5e      	ldr	r2, [pc, #376]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a5b      	ldr	r2, [pc, #364]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a58      	ldr	r2, [pc, #352]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fde5 	bl	8001018 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fde1 	bl	8001018 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0d8      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ee      	beq.n	8002452 <HAL_RCC_OscConfig+0x386>
 8002474:	e014      	b.n	80024a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fdcf 	bl	8001018 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fdcb 	bl	8001018 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0c2      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a3c      	ldr	r2, [pc, #240]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80ae 	beq.w	8002618 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d06d      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d14b      	bne.n	8002568 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a31      	ldr	r2, [pc, #196]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fd9c 	bl	8001018 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fd98 	bl	8001018 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e091      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	019b      	lsls	r3, r3, #6
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	071b      	lsls	r3, r3, #28
 800252e:	491b      	ldr	r1, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fd6a 	bl	8001018 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fd66 	bl	8001018 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e05f      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x47c>
 8002566:	e057      	b.n	8002618 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800256e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd50 	bl	8001018 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fd4c 	bl	8001018 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e045      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x4b0>
 800259a:	e03d      	b.n	8002618 <HAL_RCC_OscConfig+0x54c>
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_RCC_OscConfig+0x558>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d030      	beq.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d129      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d122      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025dc:	4293      	cmp	r3, r2
 80025de:	d119      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	3b01      	subs	r3, #1
 80025ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10f      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d0      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	4965      	ldr	r1, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800268e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d040      	beq.n	800274c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e073      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271c:	f7fe fc7c 	bl	8001018 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fc78 	bl	8001018 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e053      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d210      	bcs.n	800277c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 020f 	bic.w	r2, r3, #15
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f821 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x1cc>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1d0>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1d4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fbd8 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00
 80027f0:	40023800 	.word	0x40023800
 80027f4:	0800461c 	.word	0x0800461c
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000004 	.word	0x20000004

08002800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b094      	sub	sp, #80	; 0x50
 8002806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
 800280c:	2300      	movs	r3, #0
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	2300      	movs	r3, #0
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002818:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d00d      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x40>
 8002824:	2b08      	cmp	r3, #8
 8002826:	f200 80e1 	bhi.w	80029ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x34>
 800282e:	2b04      	cmp	r3, #4
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x3a>
 8002832:	e0db      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002838:	e0db      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 800283c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283e:	e0d8      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002840:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	2200      	movs	r2, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002860:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
 800286a:	2300      	movs	r3, #0
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
 800286e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002872:	4622      	mov	r2, r4
 8002874:	462b      	mov	r3, r5
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4621      	mov	r1, r4
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	6139      	str	r1, [r7, #16]
 8002890:	4629      	mov	r1, r5
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a4:	4659      	mov	r1, fp
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	4651      	mov	r1, sl
 80028aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ae:	4651      	mov	r1, sl
 80028b0:	018a      	lsls	r2, r1, #6
 80028b2:	4651      	mov	r1, sl
 80028b4:	ebb2 0801 	subs.w	r8, r2, r1
 80028b8:	4659      	mov	r1, fp
 80028ba:	eb63 0901 	sbc.w	r9, r3, r1
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d2:	4690      	mov	r8, r2
 80028d4:	4699      	mov	r9, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	eb18 0303 	adds.w	r3, r8, r3
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	462b      	mov	r3, r5
 80028e0:	eb49 0303 	adc.w	r3, r9, r3
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028f2:	4629      	mov	r1, r5
 80028f4:	028b      	lsls	r3, r1, #10
 80028f6:	4621      	mov	r1, r4
 80028f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028fc:	4621      	mov	r1, r4
 80028fe:	028a      	lsls	r2, r1, #10
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	2200      	movs	r2, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800290c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002910:	f7fd fce6 	bl	80002e0 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800291c:	e058      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	2200      	movs	r2, #0
 8002926:	4618      	mov	r0, r3
 8002928:	4611      	mov	r1, r2
 800292a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002938:	4642      	mov	r2, r8
 800293a:	464b      	mov	r3, r9
 800293c:	f04f 0000 	mov.w	r0, #0
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	0159      	lsls	r1, r3, #5
 8002946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294a:	0150      	lsls	r0, r2, #5
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4641      	mov	r1, r8
 8002952:	ebb2 0a01 	subs.w	sl, r2, r1
 8002956:	4649      	mov	r1, r9
 8002958:	eb63 0b01 	sbc.w	fp, r3, r1
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800296c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002970:	ebb2 040a 	subs.w	r4, r2, sl
 8002974:	eb63 050b 	sbc.w	r5, r3, fp
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	00eb      	lsls	r3, r5, #3
 8002982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002986:	00e2      	lsls	r2, r4, #3
 8002988:	4614      	mov	r4, r2
 800298a:	461d      	mov	r5, r3
 800298c:	4643      	mov	r3, r8
 800298e:	18e3      	adds	r3, r4, r3
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	464b      	mov	r3, r9
 8002994:	eb45 0303 	adc.w	r3, r5, r3
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a6:	4629      	mov	r1, r5
 80029a8:	028b      	lsls	r3, r1, #10
 80029aa:	4621      	mov	r1, r4
 80029ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b0:	4621      	mov	r1, r4
 80029b2:	028a      	lsls	r2, r1, #10
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ba:	2200      	movs	r2, #0
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	61fa      	str	r2, [r7, #28]
 80029c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c4:	f7fd fc8c 	bl	80002e0 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4613      	mov	r3, r2
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	3301      	adds	r3, #1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3750      	adds	r7, #80	; 0x50
 80029f8:	46bd      	mov	sp, r7
 80029fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	0800462c 	.word	0x0800462c

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	0800462c 	.word	0x0800462c

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a98:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a68      	ldr	r2, [pc, #416]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aa2:	6093      	str	r3, [r2, #8]
 8002aa4:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	4964      	ldr	r1, [pc, #400]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	4959      	ldr	r1, [pc, #356]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae8:	d101      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	494a      	ldr	r1, [pc, #296]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 808b 	beq.w	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fa4e 	bl	8001018 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fe fa4a 	bl	8001018 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e38f      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d035      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d02e      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d114      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fa12 	bl	8001018 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fa0e 	bl	8001018 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e351      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ee      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c26:	d111      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	4901      	ldr	r1, [pc, #4]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	0ffffcff 	.word	0x0ffffcff
 8002c4c:	4bac      	ldr	r3, [pc, #688]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4aab      	ldr	r2, [pc, #684]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c56:	6093      	str	r3, [r2, #8]
 8002c58:	4ba9      	ldr	r3, [pc, #676]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	49a6      	ldr	r1, [pc, #664]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c76:	4ba2      	ldr	r3, [pc, #648]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7c:	4aa0      	ldr	r2, [pc, #640]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c86:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	499b      	ldr	r1, [pc, #620]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb2:	4993      	ldr	r1, [pc, #588]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc6:	4b8e      	ldr	r3, [pc, #568]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd4:	498a      	ldr	r1, [pc, #552]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ce8:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf6:	4982      	ldr	r1, [pc, #520]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4979      	ldr	r1, [pc, #484]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d2c:	4b74      	ldr	r3, [pc, #464]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4971      	ldr	r1, [pc, #452]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d4e:	4b6c      	ldr	r3, [pc, #432]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	4968      	ldr	r1, [pc, #416]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d70:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	4960      	ldr	r1, [pc, #384]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	4957      	ldr	r1, [pc, #348]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db4:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	494f      	ldr	r1, [pc, #316]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	4946      	ldr	r1, [pc, #280]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002df8:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	493e      	ldr	r1, [pc, #248]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e3c:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	492d      	ldr	r1, [pc, #180]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d011      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	4924      	ldr	r1, [pc, #144]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	4914      	ldr	r1, [pc, #80]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed0:	490b      	ldr	r1, [pc, #44]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	4902      	ldr	r1, [pc, #8]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002efc:	e002      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f10:	4b8a      	ldr	r3, [pc, #552]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	4986      	ldr	r1, [pc, #536]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f34:	4b81      	ldr	r3, [pc, #516]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	497d      	ldr	r1, [pc, #500]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d006      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80d6 	beq.w	800310c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f60:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a75      	ldr	r2, [pc, #468]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe f854 	bl	8001018 <HAL_GetTick>
 8002f70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f74:	f7fe f850 	bl	8001018 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e195      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f86:	4b6d      	ldr	r3, [pc, #436]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d021      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11d      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fb4:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	0e1b      	lsrs	r3, r3, #24
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	019a      	lsls	r2, r3, #6
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	4958      	ldr	r1, [pc, #352]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02e      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300c:	d129      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800300e:	4b4b      	ldr	r3, [pc, #300]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800301c:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003022:	0f1b      	lsrs	r3, r3, #28
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	019a      	lsls	r2, r3, #6
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	061b      	lsls	r3, r3, #24
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	071b      	lsls	r3, r3, #28
 8003042:	493e      	ldr	r1, [pc, #248]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003050:	f023 021f 	bic.w	r2, r3, #31
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	3b01      	subs	r3, #1
 800305a:	4938      	ldr	r1, [pc, #224]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01d      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003074:	0e1b      	lsrs	r3, r3, #24
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003082:	0f1b      	lsrs	r3, r3, #28
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	019a      	lsls	r2, r3, #6
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	061b      	lsls	r3, r3, #24
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	071b      	lsls	r3, r3, #28
 80030a2:	4926      	ldr	r1, [pc, #152]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	019a      	lsls	r2, r3, #6
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	071b      	lsls	r3, r3, #28
 80030d2:	491a      	ldr	r1, [pc, #104]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e6:	f7fd ff97 	bl	8001018 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030ee:	f7fd ff93 	bl	8001018 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	; 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0d8      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	f040 80ce 	bne.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003120:	f7fd ff7a 	bl	8001018 <HAL_GetTick>
 8003124:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003126:	e00b      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003128:	f7fd ff76 	bl	8001018 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d904      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0bb      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003140:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314c:	d0ec      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02e      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d12a      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003184:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	0f1b      	lsrs	r3, r3, #28
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	019a      	lsls	r2, r3, #6
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	4944      	ldr	r1, [pc, #272]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031b2:	4b42      	ldr	r3, [pc, #264]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	493d      	ldr	r1, [pc, #244]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d022      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e0:	d11d      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	0e1b      	lsrs	r3, r3, #24
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	0f1b      	lsrs	r3, r3, #28
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	019a      	lsls	r2, r3, #6
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	071b      	lsls	r3, r3, #28
 8003216:	4929      	ldr	r1, [pc, #164]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d028      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	019a      	lsls	r2, r3, #6
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	071b      	lsls	r3, r3, #28
 800325e:	4917      	ldr	r1, [pc, #92]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	4911      	ldr	r1, [pc, #68]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fd fec6 	bl	8001018 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003290:	f7fd fec2 	bl	8001018 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e007      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ae:	d1ef      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e040      	b.n	8003354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fd4c 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8b0 	bl	8003464 <UART_SetConfig>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e022      	b.n	8003354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fb08 	bl	800392c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800332a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fb8f 	bl	8003a70 <UART_CheckIdleState>
 8003352:	4603      	mov	r3, r0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003370:	2b20      	cmp	r3, #32
 8003372:	d171      	bne.n	8003458 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_UART_Transmit+0x24>
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e06a      	b.n	800345a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2221      	movs	r2, #33	; 0x21
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003392:	f7fd fe41 	bl	8001018 <HAL_GetTick>
 8003396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d108      	bne.n	80033c4 <HAL_UART_Transmit+0x68>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e003      	b.n	80033cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033cc:	e02c      	b.n	8003428 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2180      	movs	r1, #128	; 0x80
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fb96 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e038      	b.n	800345a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	3302      	adds	r3, #2
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e007      	b.n	8003416 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1cc      	bne.n	80033ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2200      	movs	r2, #0
 800343c:	2140      	movs	r1, #64	; 0x40
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fb63 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e005      	b.n	800345a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4ba6      	ldr	r3, [pc, #664]	; (8003728 <UART_SetConfig+0x2c4>)
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	6979      	ldr	r1, [r7, #20]
 8003498:	430b      	orrs	r3, r1
 800349a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a94      	ldr	r2, [pc, #592]	; (800372c <UART_SetConfig+0x2c8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d120      	bne.n	8003522 <UART_SetConfig+0xbe>
 80034e0:	4b93      	ldr	r3, [pc, #588]	; (8003730 <UART_SetConfig+0x2cc>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d816      	bhi.n	800351c <UART_SetConfig+0xb8>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <UART_SetConfig+0x90>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003511 	.word	0x08003511
 80034fc:	0800350b 	.word	0x0800350b
 8003500:	08003517 	.word	0x08003517
 8003504:	2301      	movs	r3, #1
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e150      	b.n	80037ac <UART_SetConfig+0x348>
 800350a:	2302      	movs	r3, #2
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e14d      	b.n	80037ac <UART_SetConfig+0x348>
 8003510:	2304      	movs	r3, #4
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e14a      	b.n	80037ac <UART_SetConfig+0x348>
 8003516:	2308      	movs	r3, #8
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e147      	b.n	80037ac <UART_SetConfig+0x348>
 800351c:	2310      	movs	r3, #16
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e144      	b.n	80037ac <UART_SetConfig+0x348>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a83      	ldr	r2, [pc, #524]	; (8003734 <UART_SetConfig+0x2d0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d132      	bne.n	8003592 <UART_SetConfig+0x12e>
 800352c:	4b80      	ldr	r3, [pc, #512]	; (8003730 <UART_SetConfig+0x2cc>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d828      	bhi.n	800358c <UART_SetConfig+0x128>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <UART_SetConfig+0xdc>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003575 	.word	0x08003575
 8003544:	0800358d 	.word	0x0800358d
 8003548:	0800358d 	.word	0x0800358d
 800354c:	0800358d 	.word	0x0800358d
 8003550:	08003581 	.word	0x08003581
 8003554:	0800358d 	.word	0x0800358d
 8003558:	0800358d 	.word	0x0800358d
 800355c:	0800358d 	.word	0x0800358d
 8003560:	0800357b 	.word	0x0800357b
 8003564:	0800358d 	.word	0x0800358d
 8003568:	0800358d 	.word	0x0800358d
 800356c:	0800358d 	.word	0x0800358d
 8003570:	08003587 	.word	0x08003587
 8003574:	2300      	movs	r3, #0
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e118      	b.n	80037ac <UART_SetConfig+0x348>
 800357a:	2302      	movs	r3, #2
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e115      	b.n	80037ac <UART_SetConfig+0x348>
 8003580:	2304      	movs	r3, #4
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e112      	b.n	80037ac <UART_SetConfig+0x348>
 8003586:	2308      	movs	r3, #8
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e10f      	b.n	80037ac <UART_SetConfig+0x348>
 800358c:	2310      	movs	r3, #16
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e10c      	b.n	80037ac <UART_SetConfig+0x348>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a68      	ldr	r2, [pc, #416]	; (8003738 <UART_SetConfig+0x2d4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d120      	bne.n	80035de <UART_SetConfig+0x17a>
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <UART_SetConfig+0x2cc>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035a6:	2b30      	cmp	r3, #48	; 0x30
 80035a8:	d013      	beq.n	80035d2 <UART_SetConfig+0x16e>
 80035aa:	2b30      	cmp	r3, #48	; 0x30
 80035ac:	d814      	bhi.n	80035d8 <UART_SetConfig+0x174>
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d009      	beq.n	80035c6 <UART_SetConfig+0x162>
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d810      	bhi.n	80035d8 <UART_SetConfig+0x174>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <UART_SetConfig+0x15c>
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d006      	beq.n	80035cc <UART_SetConfig+0x168>
 80035be:	e00b      	b.n	80035d8 <UART_SetConfig+0x174>
 80035c0:	2300      	movs	r3, #0
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	e0f2      	b.n	80037ac <UART_SetConfig+0x348>
 80035c6:	2302      	movs	r3, #2
 80035c8:	77fb      	strb	r3, [r7, #31]
 80035ca:	e0ef      	b.n	80037ac <UART_SetConfig+0x348>
 80035cc:	2304      	movs	r3, #4
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e0ec      	b.n	80037ac <UART_SetConfig+0x348>
 80035d2:	2308      	movs	r3, #8
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e0e9      	b.n	80037ac <UART_SetConfig+0x348>
 80035d8:	2310      	movs	r3, #16
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e0e6      	b.n	80037ac <UART_SetConfig+0x348>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a56      	ldr	r2, [pc, #344]	; (800373c <UART_SetConfig+0x2d8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d120      	bne.n	800362a <UART_SetConfig+0x1c6>
 80035e8:	4b51      	ldr	r3, [pc, #324]	; (8003730 <UART_SetConfig+0x2cc>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035f2:	2bc0      	cmp	r3, #192	; 0xc0
 80035f4:	d013      	beq.n	800361e <UART_SetConfig+0x1ba>
 80035f6:	2bc0      	cmp	r3, #192	; 0xc0
 80035f8:	d814      	bhi.n	8003624 <UART_SetConfig+0x1c0>
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d009      	beq.n	8003612 <UART_SetConfig+0x1ae>
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d810      	bhi.n	8003624 <UART_SetConfig+0x1c0>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <UART_SetConfig+0x1a8>
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d006      	beq.n	8003618 <UART_SetConfig+0x1b4>
 800360a:	e00b      	b.n	8003624 <UART_SetConfig+0x1c0>
 800360c:	2300      	movs	r3, #0
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e0cc      	b.n	80037ac <UART_SetConfig+0x348>
 8003612:	2302      	movs	r3, #2
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e0c9      	b.n	80037ac <UART_SetConfig+0x348>
 8003618:	2304      	movs	r3, #4
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e0c6      	b.n	80037ac <UART_SetConfig+0x348>
 800361e:	2308      	movs	r3, #8
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e0c3      	b.n	80037ac <UART_SetConfig+0x348>
 8003624:	2310      	movs	r3, #16
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e0c0      	b.n	80037ac <UART_SetConfig+0x348>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a44      	ldr	r2, [pc, #272]	; (8003740 <UART_SetConfig+0x2dc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d125      	bne.n	8003680 <UART_SetConfig+0x21c>
 8003634:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <UART_SetConfig+0x2cc>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003642:	d017      	beq.n	8003674 <UART_SetConfig+0x210>
 8003644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003648:	d817      	bhi.n	800367a <UART_SetConfig+0x216>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d00b      	beq.n	8003668 <UART_SetConfig+0x204>
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d811      	bhi.n	800367a <UART_SetConfig+0x216>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <UART_SetConfig+0x1fe>
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d006      	beq.n	800366e <UART_SetConfig+0x20a>
 8003660:	e00b      	b.n	800367a <UART_SetConfig+0x216>
 8003662:	2300      	movs	r3, #0
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e0a1      	b.n	80037ac <UART_SetConfig+0x348>
 8003668:	2302      	movs	r3, #2
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e09e      	b.n	80037ac <UART_SetConfig+0x348>
 800366e:	2304      	movs	r3, #4
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e09b      	b.n	80037ac <UART_SetConfig+0x348>
 8003674:	2308      	movs	r3, #8
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e098      	b.n	80037ac <UART_SetConfig+0x348>
 800367a:	2310      	movs	r3, #16
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e095      	b.n	80037ac <UART_SetConfig+0x348>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2f      	ldr	r2, [pc, #188]	; (8003744 <UART_SetConfig+0x2e0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d125      	bne.n	80036d6 <UART_SetConfig+0x272>
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <UART_SetConfig+0x2cc>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003698:	d017      	beq.n	80036ca <UART_SetConfig+0x266>
 800369a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800369e:	d817      	bhi.n	80036d0 <UART_SetConfig+0x26c>
 80036a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a4:	d00b      	beq.n	80036be <UART_SetConfig+0x25a>
 80036a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036aa:	d811      	bhi.n	80036d0 <UART_SetConfig+0x26c>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <UART_SetConfig+0x254>
 80036b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b4:	d006      	beq.n	80036c4 <UART_SetConfig+0x260>
 80036b6:	e00b      	b.n	80036d0 <UART_SetConfig+0x26c>
 80036b8:	2301      	movs	r3, #1
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e076      	b.n	80037ac <UART_SetConfig+0x348>
 80036be:	2302      	movs	r3, #2
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e073      	b.n	80037ac <UART_SetConfig+0x348>
 80036c4:	2304      	movs	r3, #4
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e070      	b.n	80037ac <UART_SetConfig+0x348>
 80036ca:	2308      	movs	r3, #8
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e06d      	b.n	80037ac <UART_SetConfig+0x348>
 80036d0:	2310      	movs	r3, #16
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e06a      	b.n	80037ac <UART_SetConfig+0x348>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <UART_SetConfig+0x2e4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d138      	bne.n	8003752 <UART_SetConfig+0x2ee>
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <UART_SetConfig+0x2cc>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036ee:	d017      	beq.n	8003720 <UART_SetConfig+0x2bc>
 80036f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036f4:	d82a      	bhi.n	800374c <UART_SetConfig+0x2e8>
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fa:	d00b      	beq.n	8003714 <UART_SetConfig+0x2b0>
 80036fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003700:	d824      	bhi.n	800374c <UART_SetConfig+0x2e8>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <UART_SetConfig+0x2aa>
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	d006      	beq.n	800371a <UART_SetConfig+0x2b6>
 800370c:	e01e      	b.n	800374c <UART_SetConfig+0x2e8>
 800370e:	2300      	movs	r3, #0
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e04b      	b.n	80037ac <UART_SetConfig+0x348>
 8003714:	2302      	movs	r3, #2
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e048      	b.n	80037ac <UART_SetConfig+0x348>
 800371a:	2304      	movs	r3, #4
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e045      	b.n	80037ac <UART_SetConfig+0x348>
 8003720:	2308      	movs	r3, #8
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e042      	b.n	80037ac <UART_SetConfig+0x348>
 8003726:	bf00      	nop
 8003728:	efff69f3 	.word	0xefff69f3
 800372c:	40011000 	.word	0x40011000
 8003730:	40023800 	.word	0x40023800
 8003734:	40004400 	.word	0x40004400
 8003738:	40004800 	.word	0x40004800
 800373c:	40004c00 	.word	0x40004c00
 8003740:	40005000 	.word	0x40005000
 8003744:	40011400 	.word	0x40011400
 8003748:	40007800 	.word	0x40007800
 800374c:	2310      	movs	r3, #16
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e02c      	b.n	80037ac <UART_SetConfig+0x348>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a72      	ldr	r2, [pc, #456]	; (8003920 <UART_SetConfig+0x4bc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d125      	bne.n	80037a8 <UART_SetConfig+0x344>
 800375c:	4b71      	ldr	r3, [pc, #452]	; (8003924 <UART_SetConfig+0x4c0>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003766:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800376a:	d017      	beq.n	800379c <UART_SetConfig+0x338>
 800376c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003770:	d817      	bhi.n	80037a2 <UART_SetConfig+0x33e>
 8003772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003776:	d00b      	beq.n	8003790 <UART_SetConfig+0x32c>
 8003778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377c:	d811      	bhi.n	80037a2 <UART_SetConfig+0x33e>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <UART_SetConfig+0x326>
 8003782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003786:	d006      	beq.n	8003796 <UART_SetConfig+0x332>
 8003788:	e00b      	b.n	80037a2 <UART_SetConfig+0x33e>
 800378a:	2300      	movs	r3, #0
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e00d      	b.n	80037ac <UART_SetConfig+0x348>
 8003790:	2302      	movs	r3, #2
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e00a      	b.n	80037ac <UART_SetConfig+0x348>
 8003796:	2304      	movs	r3, #4
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e007      	b.n	80037ac <UART_SetConfig+0x348>
 800379c:	2308      	movs	r3, #8
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e004      	b.n	80037ac <UART_SetConfig+0x348>
 80037a2:	2310      	movs	r3, #16
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e001      	b.n	80037ac <UART_SetConfig+0x348>
 80037a8:	2310      	movs	r3, #16
 80037aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b4:	d15b      	bne.n	800386e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037b6:	7ffb      	ldrb	r3, [r7, #31]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d828      	bhi.n	800380e <UART_SetConfig+0x3aa>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <UART_SetConfig+0x360>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	080037f1 	.word	0x080037f1
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	0800380f 	.word	0x0800380f
 80037d4:	080037ff 	.word	0x080037ff
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	0800380f 	.word	0x0800380f
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	08003807 	.word	0x08003807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7ff f91a 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 80037ec:	61b8      	str	r0, [r7, #24]
        break;
 80037ee:	e013      	b.n	8003818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f0:	f7ff f92a 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 80037f4:	61b8      	str	r0, [r7, #24]
        break;
 80037f6:	e00f      	b.n	8003818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <UART_SetConfig+0x4c4>)
 80037fa:	61bb      	str	r3, [r7, #24]
        break;
 80037fc:	e00c      	b.n	8003818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fe:	f7fe ffff 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 8003802:	61b8      	str	r0, [r7, #24]
        break;
 8003804:	e008      	b.n	8003818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e004      	b.n	8003818 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	77bb      	strb	r3, [r7, #30]
        break;
 8003816:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d074      	beq.n	8003908 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	005a      	lsls	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	441a      	add	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	d916      	bls.n	8003868 <UART_SetConfig+0x404>
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003840:	d212      	bcs.n	8003868 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f023 030f 	bic.w	r3, r3, #15
 800384a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	b29b      	uxth	r3, r3
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	b29a      	uxth	r2, r3
 8003858:	89fb      	ldrh	r3, [r7, #14]
 800385a:	4313      	orrs	r3, r2
 800385c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	89fa      	ldrh	r2, [r7, #14]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e04f      	b.n	8003908 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77bb      	strb	r3, [r7, #30]
 800386c:	e04c      	b.n	8003908 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d828      	bhi.n	80038c6 <UART_SetConfig+0x462>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <UART_SetConfig+0x418>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038a9 	.word	0x080038a9
 8003884:	080038b1 	.word	0x080038b1
 8003888:	080038c7 	.word	0x080038c7
 800388c:	080038b7 	.word	0x080038b7
 8003890:	080038c7 	.word	0x080038c7
 8003894:	080038c7 	.word	0x080038c7
 8003898:	080038c7 	.word	0x080038c7
 800389c:	080038bf 	.word	0x080038bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a0:	f7ff f8be 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 80038a4:	61b8      	str	r0, [r7, #24]
        break;
 80038a6:	e013      	b.n	80038d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a8:	f7ff f8ce 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 80038ac:	61b8      	str	r0, [r7, #24]
        break;
 80038ae:	e00f      	b.n	80038d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b0:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <UART_SetConfig+0x4c4>)
 80038b2:	61bb      	str	r3, [r7, #24]
        break;
 80038b4:	e00c      	b.n	80038d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b6:	f7fe ffa3 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80038ba:	61b8      	str	r0, [r7, #24]
        break;
 80038bc:	e008      	b.n	80038d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e004      	b.n	80038d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	77bb      	strb	r3, [r7, #30]
        break;
 80038ce:	bf00      	nop
    }

    if (pclk != 0U)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d018      	beq.n	8003908 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	085a      	lsrs	r2, r3, #1
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	441a      	add	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d909      	bls.n	8003904 <UART_SetConfig+0x4a0>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d205      	bcs.n	8003904 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	e001      	b.n	8003908 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003914:	7fbb      	ldrb	r3, [r7, #30]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40007c00 	.word	0x40007c00
 8003924:	40023800 	.word	0x40023800
 8003928:	00f42400 	.word	0x00f42400

0800392c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01a      	beq.n	8003a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2a:	d10a      	bne.n	8003a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a80:	f7fd faca 	bl	8001018 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d10e      	bne.n	8003ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f831 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e027      	b.n	8003b02 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d10e      	bne.n	8003ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f81b 	bl	8003b0a <UART_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e011      	b.n	8003b02 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b09c      	sub	sp, #112	; 0x70
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1a:	e0a7      	b.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b22:	f000 80a3 	beq.w	8003c6c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fd fa77 	bl	8001018 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d13f      	bne.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b50:	667b      	str	r3, [r7, #100]	; 0x64
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e6      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3308      	adds	r3, #8
 8003b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	663b      	str	r3, [r7, #96]	; 0x60
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e5      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e068      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d050      	beq.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd8:	d148      	bne.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003be2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
 8003c04:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e6      	bne.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	613b      	str	r3, [r7, #16]
   return(result);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c36:	623a      	str	r2, [r7, #32]
 8003c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	69f9      	ldr	r1, [r7, #28]
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e5      	bne.n	8003c16 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e010      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4013      	ands	r3, r2
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	f43f af48 	beq.w	8003b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3770      	adds	r7, #112	; 0x70
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <__errno>:
 8003c98:	4b01      	ldr	r3, [pc, #4]	; (8003ca0 <__errno+0x8>)
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	2000000c 	.word	0x2000000c

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	4d0d      	ldr	r5, [pc, #52]	; (8003cdc <__libc_init_array+0x38>)
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <__libc_init_array+0x3c>)
 8003caa:	1b64      	subs	r4, r4, r5
 8003cac:	10a4      	asrs	r4, r4, #2
 8003cae:	2600      	movs	r6, #0
 8003cb0:	42a6      	cmp	r6, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	4d0b      	ldr	r5, [pc, #44]	; (8003ce4 <__libc_init_array+0x40>)
 8003cb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ce8 <__libc_init_array+0x44>)
 8003cb8:	f000 fc8e 	bl	80045d8 <_init>
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	2600      	movs	r6, #0
 8003cc2:	42a6      	cmp	r6, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ccc:	4798      	blx	r3
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd6:	4798      	blx	r3
 8003cd8:	3601      	adds	r6, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08004670 	.word	0x08004670
 8003ce0:	08004670 	.word	0x08004670
 8003ce4:	08004670 	.word	0x08004670
 8003ce8:	08004674 	.word	0x08004674

08003cec <memset>:
 8003cec:	4402      	add	r2, r0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <siprintf>:
 8003cfc:	b40e      	push	{r1, r2, r3}
 8003cfe:	b500      	push	{lr}
 8003d00:	b09c      	sub	sp, #112	; 0x70
 8003d02:	ab1d      	add	r3, sp, #116	; 0x74
 8003d04:	9002      	str	r0, [sp, #8]
 8003d06:	9006      	str	r0, [sp, #24]
 8003d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d0c:	4809      	ldr	r0, [pc, #36]	; (8003d34 <siprintf+0x38>)
 8003d0e:	9107      	str	r1, [sp, #28]
 8003d10:	9104      	str	r1, [sp, #16]
 8003d12:	4909      	ldr	r1, [pc, #36]	; (8003d38 <siprintf+0x3c>)
 8003d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d18:	9105      	str	r1, [sp, #20]
 8003d1a:	6800      	ldr	r0, [r0, #0]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	a902      	add	r1, sp, #8
 8003d20:	f000 f868 	bl	8003df4 <_svfiprintf_r>
 8003d24:	9b02      	ldr	r3, [sp, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	b01c      	add	sp, #112	; 0x70
 8003d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d30:	b003      	add	sp, #12
 8003d32:	4770      	bx	lr
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	ffff0208 	.word	0xffff0208

08003d3c <__ssputs_r>:
 8003d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	688e      	ldr	r6, [r1, #8]
 8003d42:	429e      	cmp	r6, r3
 8003d44:	4682      	mov	sl, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	4690      	mov	r8, r2
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	d838      	bhi.n	8003dc0 <__ssputs_r+0x84>
 8003d4e:	898a      	ldrh	r2, [r1, #12]
 8003d50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d54:	d032      	beq.n	8003dbc <__ssputs_r+0x80>
 8003d56:	6825      	ldr	r5, [r4, #0]
 8003d58:	6909      	ldr	r1, [r1, #16]
 8003d5a:	eba5 0901 	sub.w	r9, r5, r1
 8003d5e:	6965      	ldr	r5, [r4, #20]
 8003d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d68:	3301      	adds	r3, #1
 8003d6a:	444b      	add	r3, r9
 8003d6c:	106d      	asrs	r5, r5, #1
 8003d6e:	429d      	cmp	r5, r3
 8003d70:	bf38      	it	cc
 8003d72:	461d      	movcc	r5, r3
 8003d74:	0553      	lsls	r3, r2, #21
 8003d76:	d531      	bpl.n	8003ddc <__ssputs_r+0xa0>
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f000 fb63 	bl	8004444 <_malloc_r>
 8003d7e:	4606      	mov	r6, r0
 8003d80:	b950      	cbnz	r0, 8003d98 <__ssputs_r+0x5c>
 8003d82:	230c      	movs	r3, #12
 8003d84:	f8ca 3000 	str.w	r3, [sl]
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d98:	6921      	ldr	r1, [r4, #16]
 8003d9a:	464a      	mov	r2, r9
 8003d9c:	f000 fabe 	bl	800431c <memcpy>
 8003da0:	89a3      	ldrh	r3, [r4, #12]
 8003da2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003daa:	81a3      	strh	r3, [r4, #12]
 8003dac:	6126      	str	r6, [r4, #16]
 8003dae:	6165      	str	r5, [r4, #20]
 8003db0:	444e      	add	r6, r9
 8003db2:	eba5 0509 	sub.w	r5, r5, r9
 8003db6:	6026      	str	r6, [r4, #0]
 8003db8:	60a5      	str	r5, [r4, #8]
 8003dba:	463e      	mov	r6, r7
 8003dbc:	42be      	cmp	r6, r7
 8003dbe:	d900      	bls.n	8003dc2 <__ssputs_r+0x86>
 8003dc0:	463e      	mov	r6, r7
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	4632      	mov	r2, r6
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	f000 fab6 	bl	8004338 <memmove>
 8003dcc:	68a3      	ldr	r3, [r4, #8]
 8003dce:	1b9b      	subs	r3, r3, r6
 8003dd0:	60a3      	str	r3, [r4, #8]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	4433      	add	r3, r6
 8003dd6:	6023      	str	r3, [r4, #0]
 8003dd8:	2000      	movs	r0, #0
 8003dda:	e7db      	b.n	8003d94 <__ssputs_r+0x58>
 8003ddc:	462a      	mov	r2, r5
 8003dde:	f000 fba5 	bl	800452c <_realloc_r>
 8003de2:	4606      	mov	r6, r0
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d1e1      	bne.n	8003dac <__ssputs_r+0x70>
 8003de8:	6921      	ldr	r1, [r4, #16]
 8003dea:	4650      	mov	r0, sl
 8003dec:	f000 fabe 	bl	800436c <_free_r>
 8003df0:	e7c7      	b.n	8003d82 <__ssputs_r+0x46>
	...

08003df4 <_svfiprintf_r>:
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	4698      	mov	r8, r3
 8003dfa:	898b      	ldrh	r3, [r1, #12]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	b09d      	sub	sp, #116	; 0x74
 8003e00:	4607      	mov	r7, r0
 8003e02:	460d      	mov	r5, r1
 8003e04:	4614      	mov	r4, r2
 8003e06:	d50e      	bpl.n	8003e26 <_svfiprintf_r+0x32>
 8003e08:	690b      	ldr	r3, [r1, #16]
 8003e0a:	b963      	cbnz	r3, 8003e26 <_svfiprintf_r+0x32>
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	f000 fb19 	bl	8004444 <_malloc_r>
 8003e12:	6028      	str	r0, [r5, #0]
 8003e14:	6128      	str	r0, [r5, #16]
 8003e16:	b920      	cbnz	r0, 8003e22 <_svfiprintf_r+0x2e>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e20:	e0d1      	b.n	8003fc6 <_svfiprintf_r+0x1d2>
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	616b      	str	r3, [r5, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fe0 <_svfiprintf_r+0x1ec>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3e:	f04f 0901 	mov.w	r9, #1
 8003e42:	4623      	mov	r3, r4
 8003e44:	469a      	mov	sl, r3
 8003e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4a:	b10a      	cbz	r2, 8003e50 <_svfiprintf_r+0x5c>
 8003e4c:	2a25      	cmp	r2, #37	; 0x25
 8003e4e:	d1f9      	bne.n	8003e44 <_svfiprintf_r+0x50>
 8003e50:	ebba 0b04 	subs.w	fp, sl, r4
 8003e54:	d00b      	beq.n	8003e6e <_svfiprintf_r+0x7a>
 8003e56:	465b      	mov	r3, fp
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff ff6d 	bl	8003d3c <__ssputs_r>
 8003e62:	3001      	adds	r0, #1
 8003e64:	f000 80aa 	beq.w	8003fbc <_svfiprintf_r+0x1c8>
 8003e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6a:	445a      	add	r2, fp
 8003e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a2 	beq.w	8003fbc <_svfiprintf_r+0x1c8>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e82:	f10a 0a01 	add.w	sl, sl, #1
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	9307      	str	r3, [sp, #28]
 8003e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e90:	4654      	mov	r4, sl
 8003e92:	2205      	movs	r2, #5
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	4851      	ldr	r0, [pc, #324]	; (8003fe0 <_svfiprintf_r+0x1ec>)
 8003e9a:	f7fc f9d1 	bl	8000240 <memchr>
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	b9d8      	cbnz	r0, 8003eda <_svfiprintf_r+0xe6>
 8003ea2:	06d0      	lsls	r0, r2, #27
 8003ea4:	bf44      	itt	mi
 8003ea6:	2320      	movmi	r3, #32
 8003ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eac:	0711      	lsls	r1, r2, #28
 8003eae:	bf44      	itt	mi
 8003eb0:	232b      	movmi	r3, #43	; 0x2b
 8003eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eba:	2b2a      	cmp	r3, #42	; 0x2a
 8003ebc:	d015      	beq.n	8003eea <_svfiprintf_r+0xf6>
 8003ebe:	9a07      	ldr	r2, [sp, #28]
 8003ec0:	4654      	mov	r4, sl
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f04f 0c0a 	mov.w	ip, #10
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d94e      	bls.n	8003f72 <_svfiprintf_r+0x17e>
 8003ed4:	b1b0      	cbz	r0, 8003f04 <_svfiprintf_r+0x110>
 8003ed6:	9207      	str	r2, [sp, #28]
 8003ed8:	e014      	b.n	8003f04 <_svfiprintf_r+0x110>
 8003eda:	eba0 0308 	sub.w	r3, r0, r8
 8003ede:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	9304      	str	r3, [sp, #16]
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	e7d2      	b.n	8003e90 <_svfiprintf_r+0x9c>
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	1d19      	adds	r1, r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	9103      	str	r1, [sp, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bfbb      	ittet	lt
 8003ef6:	425b      	neglt	r3, r3
 8003ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8003efc:	9307      	strge	r3, [sp, #28]
 8003efe:	9307      	strlt	r3, [sp, #28]
 8003f00:	bfb8      	it	lt
 8003f02:	9204      	strlt	r2, [sp, #16]
 8003f04:	7823      	ldrb	r3, [r4, #0]
 8003f06:	2b2e      	cmp	r3, #46	; 0x2e
 8003f08:	d10c      	bne.n	8003f24 <_svfiprintf_r+0x130>
 8003f0a:	7863      	ldrb	r3, [r4, #1]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d135      	bne.n	8003f7c <_svfiprintf_r+0x188>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9203      	str	r2, [sp, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfb8      	it	lt
 8003f1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f20:	3402      	adds	r4, #2
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ff0 <_svfiprintf_r+0x1fc>
 8003f28:	7821      	ldrb	r1, [r4, #0]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	f7fc f987 	bl	8000240 <memchr>
 8003f32:	b140      	cbz	r0, 8003f46 <_svfiprintf_r+0x152>
 8003f34:	2340      	movs	r3, #64	; 0x40
 8003f36:	eba0 000a 	sub.w	r0, r0, sl
 8003f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f3e:	9b04      	ldr	r3, [sp, #16]
 8003f40:	4303      	orrs	r3, r0
 8003f42:	3401      	adds	r4, #1
 8003f44:	9304      	str	r3, [sp, #16]
 8003f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f4a:	4826      	ldr	r0, [pc, #152]	; (8003fe4 <_svfiprintf_r+0x1f0>)
 8003f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f50:	2206      	movs	r2, #6
 8003f52:	f7fc f975 	bl	8000240 <memchr>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d038      	beq.n	8003fcc <_svfiprintf_r+0x1d8>
 8003f5a:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003f5c:	bb1b      	cbnz	r3, 8003fa6 <_svfiprintf_r+0x1b2>
 8003f5e:	9b03      	ldr	r3, [sp, #12]
 8003f60:	3307      	adds	r3, #7
 8003f62:	f023 0307 	bic.w	r3, r3, #7
 8003f66:	3308      	adds	r3, #8
 8003f68:	9303      	str	r3, [sp, #12]
 8003f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6c:	4433      	add	r3, r6
 8003f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f70:	e767      	b.n	8003e42 <_svfiprintf_r+0x4e>
 8003f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f76:	460c      	mov	r4, r1
 8003f78:	2001      	movs	r0, #1
 8003f7a:	e7a5      	b.n	8003ec8 <_svfiprintf_r+0xd4>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	3401      	adds	r4, #1
 8003f80:	9305      	str	r3, [sp, #20]
 8003f82:	4619      	mov	r1, r3
 8003f84:	f04f 0c0a 	mov.w	ip, #10
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8e:	3a30      	subs	r2, #48	; 0x30
 8003f90:	2a09      	cmp	r2, #9
 8003f92:	d903      	bls.n	8003f9c <_svfiprintf_r+0x1a8>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0c5      	beq.n	8003f24 <_svfiprintf_r+0x130>
 8003f98:	9105      	str	r1, [sp, #20]
 8003f9a:	e7c3      	b.n	8003f24 <_svfiprintf_r+0x130>
 8003f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e7f0      	b.n	8003f88 <_svfiprintf_r+0x194>
 8003fa6:	ab03      	add	r3, sp, #12
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	462a      	mov	r2, r5
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <_svfiprintf_r+0x1f8>)
 8003fae:	a904      	add	r1, sp, #16
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	f3af 8000 	nop.w
 8003fb6:	1c42      	adds	r2, r0, #1
 8003fb8:	4606      	mov	r6, r0
 8003fba:	d1d6      	bne.n	8003f6a <_svfiprintf_r+0x176>
 8003fbc:	89ab      	ldrh	r3, [r5, #12]
 8003fbe:	065b      	lsls	r3, r3, #25
 8003fc0:	f53f af2c 	bmi.w	8003e1c <_svfiprintf_r+0x28>
 8003fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc6:	b01d      	add	sp, #116	; 0x74
 8003fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fcc:	ab03      	add	r3, sp, #12
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <_svfiprintf_r+0x1f8>)
 8003fd4:	a904      	add	r1, sp, #16
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f000 f87a 	bl	80040d0 <_printf_i>
 8003fdc:	e7eb      	b.n	8003fb6 <_svfiprintf_r+0x1c2>
 8003fde:	bf00      	nop
 8003fe0:	08004634 	.word	0x08004634
 8003fe4:	0800463e 	.word	0x0800463e
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	08003d3d 	.word	0x08003d3d
 8003ff0:	0800463a 	.word	0x0800463a

08003ff4 <_printf_common>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	4616      	mov	r6, r2
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	688a      	ldr	r2, [r1, #8]
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004004:	4293      	cmp	r3, r2
 8004006:	bfb8      	it	lt
 8004008:	4613      	movlt	r3, r2
 800400a:	6033      	str	r3, [r6, #0]
 800400c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004010:	4607      	mov	r7, r0
 8004012:	460c      	mov	r4, r1
 8004014:	b10a      	cbz	r2, 800401a <_printf_common+0x26>
 8004016:	3301      	adds	r3, #1
 8004018:	6033      	str	r3, [r6, #0]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	0699      	lsls	r1, r3, #26
 800401e:	bf42      	ittt	mi
 8004020:	6833      	ldrmi	r3, [r6, #0]
 8004022:	3302      	addmi	r3, #2
 8004024:	6033      	strmi	r3, [r6, #0]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	f015 0506 	ands.w	r5, r5, #6
 800402c:	d106      	bne.n	800403c <_printf_common+0x48>
 800402e:	f104 0a19 	add.w	sl, r4, #25
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	6832      	ldr	r2, [r6, #0]
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	42ab      	cmp	r3, r5
 800403a:	dc26      	bgt.n	800408a <_printf_common+0x96>
 800403c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004040:	1e13      	subs	r3, r2, #0
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	2301      	movne	r3, #1
 8004048:	0692      	lsls	r2, r2, #26
 800404a:	d42b      	bmi.n	80040a4 <_printf_common+0xb0>
 800404c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004050:	4649      	mov	r1, r9
 8004052:	4638      	mov	r0, r7
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d01e      	beq.n	8004098 <_printf_common+0xa4>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	68e5      	ldr	r5, [r4, #12]
 800405e:	6832      	ldr	r2, [r6, #0]
 8004060:	f003 0306 	and.w	r3, r3, #6
 8004064:	2b04      	cmp	r3, #4
 8004066:	bf08      	it	eq
 8004068:	1aad      	subeq	r5, r5, r2
 800406a:	68a3      	ldr	r3, [r4, #8]
 800406c:	6922      	ldr	r2, [r4, #16]
 800406e:	bf0c      	ite	eq
 8004070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004074:	2500      	movne	r5, #0
 8004076:	4293      	cmp	r3, r2
 8004078:	bfc4      	itt	gt
 800407a:	1a9b      	subgt	r3, r3, r2
 800407c:	18ed      	addgt	r5, r5, r3
 800407e:	2600      	movs	r6, #0
 8004080:	341a      	adds	r4, #26
 8004082:	42b5      	cmp	r5, r6
 8004084:	d11a      	bne.n	80040bc <_printf_common+0xc8>
 8004086:	2000      	movs	r0, #0
 8004088:	e008      	b.n	800409c <_printf_common+0xa8>
 800408a:	2301      	movs	r3, #1
 800408c:	4652      	mov	r2, sl
 800408e:	4649      	mov	r1, r9
 8004090:	4638      	mov	r0, r7
 8004092:	47c0      	blx	r8
 8004094:	3001      	adds	r0, #1
 8004096:	d103      	bne.n	80040a0 <_printf_common+0xac>
 8004098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a0:	3501      	adds	r5, #1
 80040a2:	e7c6      	b.n	8004032 <_printf_common+0x3e>
 80040a4:	18e1      	adds	r1, r4, r3
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	2030      	movs	r0, #48	; 0x30
 80040aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ae:	4422      	add	r2, r4
 80040b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b8:	3302      	adds	r3, #2
 80040ba:	e7c7      	b.n	800404c <_printf_common+0x58>
 80040bc:	2301      	movs	r3, #1
 80040be:	4622      	mov	r2, r4
 80040c0:	4649      	mov	r1, r9
 80040c2:	4638      	mov	r0, r7
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d0e6      	beq.n	8004098 <_printf_common+0xa4>
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7d9      	b.n	8004082 <_printf_common+0x8e>
	...

080040d0 <_printf_i>:
 80040d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	7e0f      	ldrb	r7, [r1, #24]
 80040d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040d8:	2f78      	cmp	r7, #120	; 0x78
 80040da:	4691      	mov	r9, r2
 80040dc:	4680      	mov	r8, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	469a      	mov	sl, r3
 80040e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040e6:	d807      	bhi.n	80040f8 <_printf_i+0x28>
 80040e8:	2f62      	cmp	r7, #98	; 0x62
 80040ea:	d80a      	bhi.n	8004102 <_printf_i+0x32>
 80040ec:	2f00      	cmp	r7, #0
 80040ee:	f000 80d8 	beq.w	80042a2 <_printf_i+0x1d2>
 80040f2:	2f58      	cmp	r7, #88	; 0x58
 80040f4:	f000 80a3 	beq.w	800423e <_printf_i+0x16e>
 80040f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004100:	e03a      	b.n	8004178 <_printf_i+0xa8>
 8004102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004106:	2b15      	cmp	r3, #21
 8004108:	d8f6      	bhi.n	80040f8 <_printf_i+0x28>
 800410a:	a101      	add	r1, pc, #4	; (adr r1, 8004110 <_printf_i+0x40>)
 800410c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004110:	08004169 	.word	0x08004169
 8004114:	0800417d 	.word	0x0800417d
 8004118:	080040f9 	.word	0x080040f9
 800411c:	080040f9 	.word	0x080040f9
 8004120:	080040f9 	.word	0x080040f9
 8004124:	080040f9 	.word	0x080040f9
 8004128:	0800417d 	.word	0x0800417d
 800412c:	080040f9 	.word	0x080040f9
 8004130:	080040f9 	.word	0x080040f9
 8004134:	080040f9 	.word	0x080040f9
 8004138:	080040f9 	.word	0x080040f9
 800413c:	08004289 	.word	0x08004289
 8004140:	080041ad 	.word	0x080041ad
 8004144:	0800426b 	.word	0x0800426b
 8004148:	080040f9 	.word	0x080040f9
 800414c:	080040f9 	.word	0x080040f9
 8004150:	080042ab 	.word	0x080042ab
 8004154:	080040f9 	.word	0x080040f9
 8004158:	080041ad 	.word	0x080041ad
 800415c:	080040f9 	.word	0x080040f9
 8004160:	080040f9 	.word	0x080040f9
 8004164:	08004273 	.word	0x08004273
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	1d1a      	adds	r2, r3, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	602a      	str	r2, [r5, #0]
 8004170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004178:	2301      	movs	r3, #1
 800417a:	e0a3      	b.n	80042c4 <_printf_i+0x1f4>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	6829      	ldr	r1, [r5, #0]
 8004180:	0606      	lsls	r6, r0, #24
 8004182:	f101 0304 	add.w	r3, r1, #4
 8004186:	d50a      	bpl.n	800419e <_printf_i+0xce>
 8004188:	680e      	ldr	r6, [r1, #0]
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	2e00      	cmp	r6, #0
 800418e:	da03      	bge.n	8004198 <_printf_i+0xc8>
 8004190:	232d      	movs	r3, #45	; 0x2d
 8004192:	4276      	negs	r6, r6
 8004194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004198:	485e      	ldr	r0, [pc, #376]	; (8004314 <_printf_i+0x244>)
 800419a:	230a      	movs	r3, #10
 800419c:	e019      	b.n	80041d2 <_printf_i+0x102>
 800419e:	680e      	ldr	r6, [r1, #0]
 80041a0:	602b      	str	r3, [r5, #0]
 80041a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041a6:	bf18      	it	ne
 80041a8:	b236      	sxthne	r6, r6
 80041aa:	e7ef      	b.n	800418c <_printf_i+0xbc>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	1d19      	adds	r1, r3, #4
 80041b2:	6029      	str	r1, [r5, #0]
 80041b4:	0601      	lsls	r1, r0, #24
 80041b6:	d501      	bpl.n	80041bc <_printf_i+0xec>
 80041b8:	681e      	ldr	r6, [r3, #0]
 80041ba:	e002      	b.n	80041c2 <_printf_i+0xf2>
 80041bc:	0646      	lsls	r6, r0, #25
 80041be:	d5fb      	bpl.n	80041b8 <_printf_i+0xe8>
 80041c0:	881e      	ldrh	r6, [r3, #0]
 80041c2:	4854      	ldr	r0, [pc, #336]	; (8004314 <_printf_i+0x244>)
 80041c4:	2f6f      	cmp	r7, #111	; 0x6f
 80041c6:	bf0c      	ite	eq
 80041c8:	2308      	moveq	r3, #8
 80041ca:	230a      	movne	r3, #10
 80041cc:	2100      	movs	r1, #0
 80041ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d2:	6865      	ldr	r5, [r4, #4]
 80041d4:	60a5      	str	r5, [r4, #8]
 80041d6:	2d00      	cmp	r5, #0
 80041d8:	bfa2      	ittt	ge
 80041da:	6821      	ldrge	r1, [r4, #0]
 80041dc:	f021 0104 	bicge.w	r1, r1, #4
 80041e0:	6021      	strge	r1, [r4, #0]
 80041e2:	b90e      	cbnz	r6, 80041e8 <_printf_i+0x118>
 80041e4:	2d00      	cmp	r5, #0
 80041e6:	d04d      	beq.n	8004284 <_printf_i+0x1b4>
 80041e8:	4615      	mov	r5, r2
 80041ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80041ee:	fb03 6711 	mls	r7, r3, r1, r6
 80041f2:	5dc7      	ldrb	r7, [r0, r7]
 80041f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041f8:	4637      	mov	r7, r6
 80041fa:	42bb      	cmp	r3, r7
 80041fc:	460e      	mov	r6, r1
 80041fe:	d9f4      	bls.n	80041ea <_printf_i+0x11a>
 8004200:	2b08      	cmp	r3, #8
 8004202:	d10b      	bne.n	800421c <_printf_i+0x14c>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	07de      	lsls	r6, r3, #31
 8004208:	d508      	bpl.n	800421c <_printf_i+0x14c>
 800420a:	6923      	ldr	r3, [r4, #16]
 800420c:	6861      	ldr	r1, [r4, #4]
 800420e:	4299      	cmp	r1, r3
 8004210:	bfde      	ittt	le
 8004212:	2330      	movle	r3, #48	; 0x30
 8004214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004218:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800421c:	1b52      	subs	r2, r2, r5
 800421e:	6122      	str	r2, [r4, #16]
 8004220:	f8cd a000 	str.w	sl, [sp]
 8004224:	464b      	mov	r3, r9
 8004226:	aa03      	add	r2, sp, #12
 8004228:	4621      	mov	r1, r4
 800422a:	4640      	mov	r0, r8
 800422c:	f7ff fee2 	bl	8003ff4 <_printf_common>
 8004230:	3001      	adds	r0, #1
 8004232:	d14c      	bne.n	80042ce <_printf_i+0x1fe>
 8004234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004238:	b004      	add	sp, #16
 800423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423e:	4835      	ldr	r0, [pc, #212]	; (8004314 <_printf_i+0x244>)
 8004240:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004244:	6829      	ldr	r1, [r5, #0]
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	f851 6b04 	ldr.w	r6, [r1], #4
 800424c:	6029      	str	r1, [r5, #0]
 800424e:	061d      	lsls	r5, r3, #24
 8004250:	d514      	bpl.n	800427c <_printf_i+0x1ac>
 8004252:	07df      	lsls	r7, r3, #31
 8004254:	bf44      	itt	mi
 8004256:	f043 0320 	orrmi.w	r3, r3, #32
 800425a:	6023      	strmi	r3, [r4, #0]
 800425c:	b91e      	cbnz	r6, 8004266 <_printf_i+0x196>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	f023 0320 	bic.w	r3, r3, #32
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	2310      	movs	r3, #16
 8004268:	e7b0      	b.n	80041cc <_printf_i+0xfc>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	2378      	movs	r3, #120	; 0x78
 8004274:	4828      	ldr	r0, [pc, #160]	; (8004318 <_printf_i+0x248>)
 8004276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427a:	e7e3      	b.n	8004244 <_printf_i+0x174>
 800427c:	0659      	lsls	r1, r3, #25
 800427e:	bf48      	it	mi
 8004280:	b2b6      	uxthmi	r6, r6
 8004282:	e7e6      	b.n	8004252 <_printf_i+0x182>
 8004284:	4615      	mov	r5, r2
 8004286:	e7bb      	b.n	8004200 <_printf_i+0x130>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	6826      	ldr	r6, [r4, #0]
 800428c:	6961      	ldr	r1, [r4, #20]
 800428e:	1d18      	adds	r0, r3, #4
 8004290:	6028      	str	r0, [r5, #0]
 8004292:	0635      	lsls	r5, r6, #24
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	d501      	bpl.n	800429c <_printf_i+0x1cc>
 8004298:	6019      	str	r1, [r3, #0]
 800429a:	e002      	b.n	80042a2 <_printf_i+0x1d2>
 800429c:	0670      	lsls	r0, r6, #25
 800429e:	d5fb      	bpl.n	8004298 <_printf_i+0x1c8>
 80042a0:	8019      	strh	r1, [r3, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	4615      	mov	r5, r2
 80042a8:	e7ba      	b.n	8004220 <_printf_i+0x150>
 80042aa:	682b      	ldr	r3, [r5, #0]
 80042ac:	1d1a      	adds	r2, r3, #4
 80042ae:	602a      	str	r2, [r5, #0]
 80042b0:	681d      	ldr	r5, [r3, #0]
 80042b2:	6862      	ldr	r2, [r4, #4]
 80042b4:	2100      	movs	r1, #0
 80042b6:	4628      	mov	r0, r5
 80042b8:	f7fb ffc2 	bl	8000240 <memchr>
 80042bc:	b108      	cbz	r0, 80042c2 <_printf_i+0x1f2>
 80042be:	1b40      	subs	r0, r0, r5
 80042c0:	6060      	str	r0, [r4, #4]
 80042c2:	6863      	ldr	r3, [r4, #4]
 80042c4:	6123      	str	r3, [r4, #16]
 80042c6:	2300      	movs	r3, #0
 80042c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042cc:	e7a8      	b.n	8004220 <_printf_i+0x150>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	462a      	mov	r2, r5
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	47d0      	blx	sl
 80042d8:	3001      	adds	r0, #1
 80042da:	d0ab      	beq.n	8004234 <_printf_i+0x164>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	079b      	lsls	r3, r3, #30
 80042e0:	d413      	bmi.n	800430a <_printf_i+0x23a>
 80042e2:	68e0      	ldr	r0, [r4, #12]
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	4298      	cmp	r0, r3
 80042e8:	bfb8      	it	lt
 80042ea:	4618      	movlt	r0, r3
 80042ec:	e7a4      	b.n	8004238 <_printf_i+0x168>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4632      	mov	r2, r6
 80042f2:	4649      	mov	r1, r9
 80042f4:	4640      	mov	r0, r8
 80042f6:	47d0      	blx	sl
 80042f8:	3001      	adds	r0, #1
 80042fa:	d09b      	beq.n	8004234 <_printf_i+0x164>
 80042fc:	3501      	adds	r5, #1
 80042fe:	68e3      	ldr	r3, [r4, #12]
 8004300:	9903      	ldr	r1, [sp, #12]
 8004302:	1a5b      	subs	r3, r3, r1
 8004304:	42ab      	cmp	r3, r5
 8004306:	dcf2      	bgt.n	80042ee <_printf_i+0x21e>
 8004308:	e7eb      	b.n	80042e2 <_printf_i+0x212>
 800430a:	2500      	movs	r5, #0
 800430c:	f104 0619 	add.w	r6, r4, #25
 8004310:	e7f5      	b.n	80042fe <_printf_i+0x22e>
 8004312:	bf00      	nop
 8004314:	08004645 	.word	0x08004645
 8004318:	08004656 	.word	0x08004656

0800431c <memcpy>:
 800431c:	440a      	add	r2, r1
 800431e:	4291      	cmp	r1, r2
 8004320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004324:	d100      	bne.n	8004328 <memcpy+0xc>
 8004326:	4770      	bx	lr
 8004328:	b510      	push	{r4, lr}
 800432a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800432e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004332:	4291      	cmp	r1, r2
 8004334:	d1f9      	bne.n	800432a <memcpy+0xe>
 8004336:	bd10      	pop	{r4, pc}

08004338 <memmove>:
 8004338:	4288      	cmp	r0, r1
 800433a:	b510      	push	{r4, lr}
 800433c:	eb01 0402 	add.w	r4, r1, r2
 8004340:	d902      	bls.n	8004348 <memmove+0x10>
 8004342:	4284      	cmp	r4, r0
 8004344:	4623      	mov	r3, r4
 8004346:	d807      	bhi.n	8004358 <memmove+0x20>
 8004348:	1e43      	subs	r3, r0, #1
 800434a:	42a1      	cmp	r1, r4
 800434c:	d008      	beq.n	8004360 <memmove+0x28>
 800434e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004356:	e7f8      	b.n	800434a <memmove+0x12>
 8004358:	4402      	add	r2, r0
 800435a:	4601      	mov	r1, r0
 800435c:	428a      	cmp	r2, r1
 800435e:	d100      	bne.n	8004362 <memmove+0x2a>
 8004360:	bd10      	pop	{r4, pc}
 8004362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800436a:	e7f7      	b.n	800435c <memmove+0x24>

0800436c <_free_r>:
 800436c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800436e:	2900      	cmp	r1, #0
 8004370:	d044      	beq.n	80043fc <_free_r+0x90>
 8004372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004376:	9001      	str	r0, [sp, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f1a1 0404 	sub.w	r4, r1, #4
 800437e:	bfb8      	it	lt
 8004380:	18e4      	addlt	r4, r4, r3
 8004382:	f000 f913 	bl	80045ac <__malloc_lock>
 8004386:	4a1e      	ldr	r2, [pc, #120]	; (8004400 <_free_r+0x94>)
 8004388:	9801      	ldr	r0, [sp, #4]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	b933      	cbnz	r3, 800439c <_free_r+0x30>
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	6014      	str	r4, [r2, #0]
 8004392:	b003      	add	sp, #12
 8004394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004398:	f000 b90e 	b.w	80045b8 <__malloc_unlock>
 800439c:	42a3      	cmp	r3, r4
 800439e:	d908      	bls.n	80043b2 <_free_r+0x46>
 80043a0:	6825      	ldr	r5, [r4, #0]
 80043a2:	1961      	adds	r1, r4, r5
 80043a4:	428b      	cmp	r3, r1
 80043a6:	bf01      	itttt	eq
 80043a8:	6819      	ldreq	r1, [r3, #0]
 80043aa:	685b      	ldreq	r3, [r3, #4]
 80043ac:	1949      	addeq	r1, r1, r5
 80043ae:	6021      	streq	r1, [r4, #0]
 80043b0:	e7ed      	b.n	800438e <_free_r+0x22>
 80043b2:	461a      	mov	r2, r3
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b10b      	cbz	r3, 80043bc <_free_r+0x50>
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d9fa      	bls.n	80043b2 <_free_r+0x46>
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	1855      	adds	r5, r2, r1
 80043c0:	42a5      	cmp	r5, r4
 80043c2:	d10b      	bne.n	80043dc <_free_r+0x70>
 80043c4:	6824      	ldr	r4, [r4, #0]
 80043c6:	4421      	add	r1, r4
 80043c8:	1854      	adds	r4, r2, r1
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	6011      	str	r1, [r2, #0]
 80043ce:	d1e0      	bne.n	8004392 <_free_r+0x26>
 80043d0:	681c      	ldr	r4, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	6053      	str	r3, [r2, #4]
 80043d6:	4421      	add	r1, r4
 80043d8:	6011      	str	r1, [r2, #0]
 80043da:	e7da      	b.n	8004392 <_free_r+0x26>
 80043dc:	d902      	bls.n	80043e4 <_free_r+0x78>
 80043de:	230c      	movs	r3, #12
 80043e0:	6003      	str	r3, [r0, #0]
 80043e2:	e7d6      	b.n	8004392 <_free_r+0x26>
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	1961      	adds	r1, r4, r5
 80043e8:	428b      	cmp	r3, r1
 80043ea:	bf04      	itt	eq
 80043ec:	6819      	ldreq	r1, [r3, #0]
 80043ee:	685b      	ldreq	r3, [r3, #4]
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	bf04      	itt	eq
 80043f4:	1949      	addeq	r1, r1, r5
 80043f6:	6021      	streq	r1, [r4, #0]
 80043f8:	6054      	str	r4, [r2, #4]
 80043fa:	e7ca      	b.n	8004392 <_free_r+0x26>
 80043fc:	b003      	add	sp, #12
 80043fe:	bd30      	pop	{r4, r5, pc}
 8004400:	20000184 	.word	0x20000184

08004404 <sbrk_aligned>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4e0e      	ldr	r6, [pc, #56]	; (8004440 <sbrk_aligned+0x3c>)
 8004408:	460c      	mov	r4, r1
 800440a:	6831      	ldr	r1, [r6, #0]
 800440c:	4605      	mov	r5, r0
 800440e:	b911      	cbnz	r1, 8004416 <sbrk_aligned+0x12>
 8004410:	f000 f8bc 	bl	800458c <_sbrk_r>
 8004414:	6030      	str	r0, [r6, #0]
 8004416:	4621      	mov	r1, r4
 8004418:	4628      	mov	r0, r5
 800441a:	f000 f8b7 	bl	800458c <_sbrk_r>
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	d00a      	beq.n	8004438 <sbrk_aligned+0x34>
 8004422:	1cc4      	adds	r4, r0, #3
 8004424:	f024 0403 	bic.w	r4, r4, #3
 8004428:	42a0      	cmp	r0, r4
 800442a:	d007      	beq.n	800443c <sbrk_aligned+0x38>
 800442c:	1a21      	subs	r1, r4, r0
 800442e:	4628      	mov	r0, r5
 8004430:	f000 f8ac 	bl	800458c <_sbrk_r>
 8004434:	3001      	adds	r0, #1
 8004436:	d101      	bne.n	800443c <sbrk_aligned+0x38>
 8004438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800443c:	4620      	mov	r0, r4
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	20000188 	.word	0x20000188

08004444 <_malloc_r>:
 8004444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004448:	1ccd      	adds	r5, r1, #3
 800444a:	f025 0503 	bic.w	r5, r5, #3
 800444e:	3508      	adds	r5, #8
 8004450:	2d0c      	cmp	r5, #12
 8004452:	bf38      	it	cc
 8004454:	250c      	movcc	r5, #12
 8004456:	2d00      	cmp	r5, #0
 8004458:	4607      	mov	r7, r0
 800445a:	db01      	blt.n	8004460 <_malloc_r+0x1c>
 800445c:	42a9      	cmp	r1, r5
 800445e:	d905      	bls.n	800446c <_malloc_r+0x28>
 8004460:	230c      	movs	r3, #12
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	2600      	movs	r6, #0
 8004466:	4630      	mov	r0, r6
 8004468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800446c:	4e2e      	ldr	r6, [pc, #184]	; (8004528 <_malloc_r+0xe4>)
 800446e:	f000 f89d 	bl	80045ac <__malloc_lock>
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	461c      	mov	r4, r3
 8004476:	bb34      	cbnz	r4, 80044c6 <_malloc_r+0x82>
 8004478:	4629      	mov	r1, r5
 800447a:	4638      	mov	r0, r7
 800447c:	f7ff ffc2 	bl	8004404 <sbrk_aligned>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	4604      	mov	r4, r0
 8004484:	d14d      	bne.n	8004522 <_malloc_r+0xde>
 8004486:	6834      	ldr	r4, [r6, #0]
 8004488:	4626      	mov	r6, r4
 800448a:	2e00      	cmp	r6, #0
 800448c:	d140      	bne.n	8004510 <_malloc_r+0xcc>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	4631      	mov	r1, r6
 8004492:	4638      	mov	r0, r7
 8004494:	eb04 0803 	add.w	r8, r4, r3
 8004498:	f000 f878 	bl	800458c <_sbrk_r>
 800449c:	4580      	cmp	r8, r0
 800449e:	d13a      	bne.n	8004516 <_malloc_r+0xd2>
 80044a0:	6821      	ldr	r1, [r4, #0]
 80044a2:	3503      	adds	r5, #3
 80044a4:	1a6d      	subs	r5, r5, r1
 80044a6:	f025 0503 	bic.w	r5, r5, #3
 80044aa:	3508      	adds	r5, #8
 80044ac:	2d0c      	cmp	r5, #12
 80044ae:	bf38      	it	cc
 80044b0:	250c      	movcc	r5, #12
 80044b2:	4629      	mov	r1, r5
 80044b4:	4638      	mov	r0, r7
 80044b6:	f7ff ffa5 	bl	8004404 <sbrk_aligned>
 80044ba:	3001      	adds	r0, #1
 80044bc:	d02b      	beq.n	8004516 <_malloc_r+0xd2>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	442b      	add	r3, r5
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	e00e      	b.n	80044e4 <_malloc_r+0xa0>
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	1b52      	subs	r2, r2, r5
 80044ca:	d41e      	bmi.n	800450a <_malloc_r+0xc6>
 80044cc:	2a0b      	cmp	r2, #11
 80044ce:	d916      	bls.n	80044fe <_malloc_r+0xba>
 80044d0:	1961      	adds	r1, r4, r5
 80044d2:	42a3      	cmp	r3, r4
 80044d4:	6025      	str	r5, [r4, #0]
 80044d6:	bf18      	it	ne
 80044d8:	6059      	strne	r1, [r3, #4]
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	bf08      	it	eq
 80044de:	6031      	streq	r1, [r6, #0]
 80044e0:	5162      	str	r2, [r4, r5]
 80044e2:	604b      	str	r3, [r1, #4]
 80044e4:	4638      	mov	r0, r7
 80044e6:	f104 060b 	add.w	r6, r4, #11
 80044ea:	f000 f865 	bl	80045b8 <__malloc_unlock>
 80044ee:	f026 0607 	bic.w	r6, r6, #7
 80044f2:	1d23      	adds	r3, r4, #4
 80044f4:	1af2      	subs	r2, r6, r3
 80044f6:	d0b6      	beq.n	8004466 <_malloc_r+0x22>
 80044f8:	1b9b      	subs	r3, r3, r6
 80044fa:	50a3      	str	r3, [r4, r2]
 80044fc:	e7b3      	b.n	8004466 <_malloc_r+0x22>
 80044fe:	6862      	ldr	r2, [r4, #4]
 8004500:	42a3      	cmp	r3, r4
 8004502:	bf0c      	ite	eq
 8004504:	6032      	streq	r2, [r6, #0]
 8004506:	605a      	strne	r2, [r3, #4]
 8004508:	e7ec      	b.n	80044e4 <_malloc_r+0xa0>
 800450a:	4623      	mov	r3, r4
 800450c:	6864      	ldr	r4, [r4, #4]
 800450e:	e7b2      	b.n	8004476 <_malloc_r+0x32>
 8004510:	4634      	mov	r4, r6
 8004512:	6876      	ldr	r6, [r6, #4]
 8004514:	e7b9      	b.n	800448a <_malloc_r+0x46>
 8004516:	230c      	movs	r3, #12
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4638      	mov	r0, r7
 800451c:	f000 f84c 	bl	80045b8 <__malloc_unlock>
 8004520:	e7a1      	b.n	8004466 <_malloc_r+0x22>
 8004522:	6025      	str	r5, [r4, #0]
 8004524:	e7de      	b.n	80044e4 <_malloc_r+0xa0>
 8004526:	bf00      	nop
 8004528:	20000184 	.word	0x20000184

0800452c <_realloc_r>:
 800452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004530:	4680      	mov	r8, r0
 8004532:	4614      	mov	r4, r2
 8004534:	460e      	mov	r6, r1
 8004536:	b921      	cbnz	r1, 8004542 <_realloc_r+0x16>
 8004538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800453c:	4611      	mov	r1, r2
 800453e:	f7ff bf81 	b.w	8004444 <_malloc_r>
 8004542:	b92a      	cbnz	r2, 8004550 <_realloc_r+0x24>
 8004544:	f7ff ff12 	bl	800436c <_free_r>
 8004548:	4625      	mov	r5, r4
 800454a:	4628      	mov	r0, r5
 800454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004550:	f000 f838 	bl	80045c4 <_malloc_usable_size_r>
 8004554:	4284      	cmp	r4, r0
 8004556:	4607      	mov	r7, r0
 8004558:	d802      	bhi.n	8004560 <_realloc_r+0x34>
 800455a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800455e:	d812      	bhi.n	8004586 <_realloc_r+0x5a>
 8004560:	4621      	mov	r1, r4
 8004562:	4640      	mov	r0, r8
 8004564:	f7ff ff6e 	bl	8004444 <_malloc_r>
 8004568:	4605      	mov	r5, r0
 800456a:	2800      	cmp	r0, #0
 800456c:	d0ed      	beq.n	800454a <_realloc_r+0x1e>
 800456e:	42bc      	cmp	r4, r7
 8004570:	4622      	mov	r2, r4
 8004572:	4631      	mov	r1, r6
 8004574:	bf28      	it	cs
 8004576:	463a      	movcs	r2, r7
 8004578:	f7ff fed0 	bl	800431c <memcpy>
 800457c:	4631      	mov	r1, r6
 800457e:	4640      	mov	r0, r8
 8004580:	f7ff fef4 	bl	800436c <_free_r>
 8004584:	e7e1      	b.n	800454a <_realloc_r+0x1e>
 8004586:	4635      	mov	r5, r6
 8004588:	e7df      	b.n	800454a <_realloc_r+0x1e>
	...

0800458c <_sbrk_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d06      	ldr	r5, [pc, #24]	; (80045a8 <_sbrk_r+0x1c>)
 8004590:	2300      	movs	r3, #0
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fc fc7c 	bl	8000e94 <_sbrk>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_sbrk_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_sbrk_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	2000018c 	.word	0x2000018c

080045ac <__malloc_lock>:
 80045ac:	4801      	ldr	r0, [pc, #4]	; (80045b4 <__malloc_lock+0x8>)
 80045ae:	f000 b811 	b.w	80045d4 <__retarget_lock_acquire_recursive>
 80045b2:	bf00      	nop
 80045b4:	20000190 	.word	0x20000190

080045b8 <__malloc_unlock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	; (80045c0 <__malloc_unlock+0x8>)
 80045ba:	f000 b80c 	b.w	80045d6 <__retarget_lock_release_recursive>
 80045be:	bf00      	nop
 80045c0:	20000190 	.word	0x20000190

080045c4 <_malloc_usable_size_r>:
 80045c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c8:	1f18      	subs	r0, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfbc      	itt	lt
 80045ce:	580b      	ldrlt	r3, [r1, r0]
 80045d0:	18c0      	addlt	r0, r0, r3
 80045d2:	4770      	bx	lr

080045d4 <__retarget_lock_acquire_recursive>:
 80045d4:	4770      	bx	lr

080045d6 <__retarget_lock_release_recursive>:
 80045d6:	4770      	bx	lr

080045d8 <_init>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr

080045e4 <_fini>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr
