
testing_breakout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004258  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c4  080044c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044cc  080044cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08004544  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004544  00020198  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d760  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a82  00000000  00000000  0002d7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275eb  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dab7  00000000  00000000  00057b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2978  00000000  00000000  0006563a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157fb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c4c  00000000  00000000  00158004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004440 	.word	0x08004440

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004440 	.word	0x08004440

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <initMPU_6050>:
 */

#include "MPU_6050.h"

void initMPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c, UART_HandleTypeDef *uart)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b095      	sub	sp, #84	; 0x54
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	/* create a paramter that determines the size of each array */
	uint8_t i2cTxBuffer[30];
	uint8_t i2cRxBuffer[30];

	my_mpu_6050->i2c_handle = i2c;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]
	my_mpu_6050->uart_handle = uart;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	605a      	str	r2, [r3, #4]

	my_mpu_6050->i2c_trans_buff = i2cTxBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000602:	609a      	str	r2, [r3, #8]
	my_mpu_6050->i2c_rece_buff = i2cRxBuffer;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f107 0210 	add.w	r2, r7, #16
 800060a:	611a      	str	r2, [r3, #16]

	my_mpu_6050->i2c_tx_size = 0;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2200      	movs	r2, #0
 8000610:	731a      	strb	r2, [r3, #12]
	my_mpu_6050->i2c_rx_size = 0;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2200      	movs	r2, #0
 8000616:	751a      	strb	r2, [r3, #20]

}
 8000618:	bf00      	nop
 800061a:	3754      	adds	r7, #84	; 0x54
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <I2C_Rx>:

	return i2c_Tx_flag;
}

uint8_t I2C_Rx(mpu_6050_t *my_mpu_6050, uint8_t mpu_reg, uint8_t num_bytes)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
 8000630:	4613      	mov	r3, r2
 8000632:	70bb      	strb	r3, [r7, #2]
	uint8_t uart_buff[20];
	uint8_t uart_len = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	77fb      	strb	r3, [r7, #31]

	uint8_t i2c_Rx_flag = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	77bb      	strb	r3, [r7, #30]

	/* check the return value */
	HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, &mpu_reg, 1, 100);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	1cfa      	adds	r2, r7, #3
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	21d0      	movs	r1, #208	; 0xd0
 800064a:	f000 ff85 	bl	8001558 <HAL_I2C_Master_Transmit>

	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rece_buff, 1, 100);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	691a      	ldr	r2, [r3, #16]
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	21d1      	movs	r1, #209	; 0xd1
 800065e:	f001 f86f 	bl	8001740 <HAL_I2C_Master_Receive>
 8000662:	4603      	mov	r3, r0
 8000664:	77bb      	strb	r3, [r7, #30]

	if (i2c_Rx_flag != HAL_OK)
 8000666:	7fbb      	ldrb	r3, [r7, #30]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d010      	beq.n	800068e <I2C_Rx+0x6a>
	{
	  uart_len = sprintf((char *)uart_buff, "I2C Rx failed\r\n");
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4909      	ldr	r1, [pc, #36]	; (8000698 <I2C_Rx+0x74>)
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fa76 	bl	8003b64 <siprintf>
 8000678:	4603      	mov	r3, r0
 800067a:	77fb      	strb	r3, [r7, #31]
	  HAL_UART_Transmit(my_mpu_6050->uart_handle, uart_buff, uart_len, 100);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6858      	ldr	r0, [r3, #4]
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	b29a      	uxth	r2, r3
 8000684:	f107 0108 	add.w	r1, r7, #8
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	f002 fd9b 	bl	80031c4 <HAL_UART_Transmit>
	}

	return i2c_Rx_flag;
 800068e:	7fbb      	ldrb	r3, [r7, #30]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08004468 	.word	0x08004468

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i2c_flag = HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t uart_buff[20];
	uint8_t uart_len = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint8_t i2cread_buff[10];
	uint8_t i2c_trans;

	uint8_t checkADD = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 fb93 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f830 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 f8fa 	bl	80008b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c0:	f000 f888 	bl	80007d4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f8c6 	bl	8000854 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  initMPU_6050(&my_imu, &hi2c1, &huart3);
 80006c8:	4a10      	ldr	r2, [pc, #64]	; (800070c <main+0x70>)
 80006ca:	4911      	ldr	r1, [pc, #68]	; (8000710 <main+0x74>)
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <main+0x78>)
 80006ce:	f7ff ff89 	bl	80005e4 <initMPU_6050>

//  i2c_trans = WHO_AM_I;

  	i2c_trans = SELF_TEST_X;
 80006d2:	230d      	movs	r3, #13
 80006d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  	uint8_t temp = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (I2C_Rx(&my_imu, WHO_AM_I, 1) == HAL_OK)
 80006de:	2201      	movs	r2, #1
 80006e0:	2175      	movs	r1, #117	; 0x75
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <main+0x78>)
 80006e4:	f7ff ff9e 	bl	8000624 <I2C_Rx>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d105      	bne.n	80006fa <main+0x5e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2101      	movs	r1, #1
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <main+0x7c>)
 80006f4:	f000 fe86 	bl	8001404 <HAL_GPIO_WritePin>
 80006f8:	e004      	b.n	8000704 <main+0x68>
	  }
	  else
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <main+0x7c>)
 8000700:	f000 fe80 	bl	8001404 <HAL_GPIO_WritePin>
//	  else
//	  {
//		  I2C_Rx(&my_imu, SELF_TEST_X, 1);
//	  }

	  HAL_Delay(100);
 8000704:	2064      	movs	r0, #100	; 0x64
 8000706:	f000 fbc7 	bl	8000e98 <HAL_Delay>
	  if (I2C_Rx(&my_imu, WHO_AM_I, 1) == HAL_OK)
 800070a:	e7e8      	b.n	80006de <main+0x42>
 800070c:	200000e0 	.word	0x200000e0
 8000710:	2000008c 	.word	0x2000008c
 8000714:	20000168 	.word	0x20000168
 8000718:	40020400 	.word	0x40020400

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2234      	movs	r2, #52	; 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fa12 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SystemClock_Config+0xb0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemClock_Config+0xb0>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <SystemClock_Config+0xb0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <SystemClock_Config+0xb4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <SystemClock_Config+0xb4>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <SystemClock_Config+0xb4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fbd3 	bl	8001f34 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000794:	f000 f99e 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fe6b 	bl	8002490 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80007c0:	f000 f988 	bl	8000ad4 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_I2C1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_I2C1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_I2C1_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <MX_I2C1_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 208;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_I2C1_Init+0x74>)
 80007e6:	22d0      	movs	r2, #208	; 0xd0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_I2C1_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_I2C1_Init+0x74>)
 8000810:	f000 fe12 	bl	8001438 <HAL_I2C_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081a:	f000 f95b 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_I2C1_Init+0x74>)
 8000822:	f001 faef 	bl	8001e04 <HAL_I2CEx_ConfigAnalogFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 f952 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_I2C1_Init+0x74>)
 8000834:	f001 fb31 	bl	8001e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 f949 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000008c 	.word	0x2000008c
 800084c:	40005400 	.word	0x40005400
 8000850:	00300208 	.word	0x00300208

08000854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART3_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART3_UART_Init+0x58>)
 8000898:	f002 fc46 	bl	8003128 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f917 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000e0 	.word	0x200000e0
 80008b0:	40004800 	.word	0x40004800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b7d      	ldr	r3, [pc, #500]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a7c      	ldr	r2, [pc, #496]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b7a      	ldr	r3, [pc, #488]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a76      	ldr	r2, [pc, #472]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a70      	ldr	r2, [pc, #448]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b6b      	ldr	r3, [pc, #428]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a6a      	ldr	r2, [pc, #424]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a64      	ldr	r2, [pc, #400]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	4b5f      	ldr	r3, [pc, #380]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5e      	ldr	r2, [pc, #376]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <MX_GPIO_Init+0x20c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000960:	4858      	ldr	r0, [pc, #352]	; (8000ac4 <MX_GPIO_Init+0x210>)
 8000962:	f000 fd4f 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	4857      	ldr	r0, [pc, #348]	; (8000ac8 <MX_GPIO_Init+0x214>)
 800096c:	f000 fd4a 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4851      	ldr	r0, [pc, #324]	; (8000acc <MX_GPIO_Init+0x218>)
 8000988:	f000 fb90 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800098c:	2332      	movs	r3, #50	; 0x32
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099c:	230b      	movs	r3, #11
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4849      	ldr	r0, [pc, #292]	; (8000acc <MX_GPIO_Init+0x218>)
 80009a8:	f000 fb80 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009ac:	2386      	movs	r3, #134	; 0x86
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	230b      	movs	r3, #11
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4842      	ldr	r0, [pc, #264]	; (8000ad0 <MX_GPIO_Init+0x21c>)
 80009c8:	f000 fb70 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4837      	ldr	r0, [pc, #220]	; (8000ac4 <MX_GPIO_Init+0x210>)
 80009e6:	f000 fb61 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fc:	230b      	movs	r3, #11
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x210>)
 8000a08:	f000 fb50 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <MX_GPIO_Init+0x214>)
 8000a24:	f000 fb42 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <MX_GPIO_Init+0x214>)
 8000a3c:	f000 fb36 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a40:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a52:	230a      	movs	r3, #10
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0x21c>)
 8000a5e:	f000 fb25 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <MX_GPIO_Init+0x21c>)
 8000a78:	f000 fb18 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_GPIO_Init+0x214>)
 8000a9a:	f000 fb07 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_GPIO_Init+0x210>)
 8000ab4:	f000 fafa 	bl	80010ac <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3730      	adds	r7, #48	; 0x30
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ae      	sub	sp, #184	; 0xb8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2290      	movs	r2, #144	; 0x90
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 f803 	bl	8003b54 <memset>
  if(hi2c->Instance==I2C1)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <HAL_I2C_MspInit+0xb4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d13c      	bne.n	8000bd2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 feb6 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff ffaf 	bl	8000ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	2312      	movs	r3, #18
 8000b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <HAL_I2C_MspInit+0xbc>)
 8000bb6:	f000 fa79 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_I2C_MspInit+0xb8>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	37b8      	adds	r7, #184	; 0xb8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020400 	.word	0x40020400

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0ae      	sub	sp, #184	; 0xb8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2290      	movs	r2, #144	; 0x90
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 ffa3 	bl	8003b54 <memset>
  if(huart->Instance==USART3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d13c      	bne.n	8000c92 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fe56 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c32:	f7ff ff4f 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_UART_MspInit+0xbc>)
 8000c8e:	f000 fa0d 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	37b8      	adds	r7, #184	; 0xb8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004800 	.word	0x40004800
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020c00 	.word	0x40020c00

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8b0 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f002 fee8 	bl	8003b00 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20080000 	.word	0x20080000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	20000180 	.word	0x20000180
 8000d64:	20000198 	.word	0x20000198

08000d68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f002 fea7 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc6d 	bl	800069c <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dd0:	080044d4 	.word	0x080044d4
  ldr r2, =_sbss
 8000dd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dd8:	20000198 	.word	0x20000198

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>

08000dde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f92e 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f805 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dee:	f7ff fe77 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f93b 	bl	8001092 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f000 f911 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000184 	.word	0x20000184

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000184 	.word	0x20000184

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	05fa0000 	.word	0x05fa0000

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff47 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff5c 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffb0 	bl	8001000 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e175      	b.n	80013b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8164 	bne.w	80013b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x56>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80be 	beq.w	80013b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_GPIO_Init+0x324>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800124e:	4a61      	ldr	r2, [pc, #388]	; (80013d4 <HAL_GPIO_Init+0x328>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_GPIO_Init+0x32c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d037      	beq.n	80012ea <HAL_GPIO_Init+0x23e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_GPIO_Init+0x330>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_GPIO_Init+0x23a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a56      	ldr	r2, [pc, #344]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d02b      	beq.n	80012e2 <HAL_GPIO_Init+0x236>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a55      	ldr	r2, [pc, #340]	; (80013e4 <HAL_GPIO_Init+0x338>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x232>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a54      	ldr	r2, [pc, #336]	; (80013e8 <HAL_GPIO_Init+0x33c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x22e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a53      	ldr	r2, [pc, #332]	; (80013ec <HAL_GPIO_Init+0x340>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x22a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x344>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a51      	ldr	r2, [pc, #324]	; (80013f4 <HAL_GPIO_Init+0x348>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_GPIO_Init+0x34c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x350>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x21a>
 80012c2:	2309      	movs	r3, #9
 80012c4:	e012      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012c6:	230a      	movs	r3, #10
 80012c8:	e010      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ca:	2308      	movs	r3, #8
 80012cc:	e00e      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e00c      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00a      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012da:	2304      	movs	r3, #4
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x328>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <HAL_GPIO_Init+0x354>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a34      	ldr	r2, [pc, #208]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x354>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_GPIO_Init+0x354>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_GPIO_Init+0x354>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f ae86 	bls.w	80010cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	40021c00 	.word	0x40021c00
 80013f8:	40022000 	.word	0x40022000
 80013fc:	40022400 	.word	0x40022400
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07f      	b.n	800154a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fb62 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	e006      	b.n	80014c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d104      	bne.n	80014d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_I2C_Init+0x11c>)
 80014de:	430b      	orrs	r3, r1
 80014e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69d9      	ldr	r1, [r3, #28]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1a      	ldr	r2, [r3, #32]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2220      	movs	r2, #32
 8001536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	02008000 	.word	0x02008000

08001558 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af02      	add	r7, sp, #8
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	461a      	mov	r2, r3
 8001564:	460b      	mov	r3, r1
 8001566:	817b      	strh	r3, [r7, #10]
 8001568:	4613      	mov	r3, r2
 800156a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b20      	cmp	r3, #32
 8001576:	f040 80da 	bne.w	800172e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_I2C_Master_Transmit+0x30>
 8001584:	2302      	movs	r3, #2
 8001586:	e0d3      	b.n	8001730 <HAL_I2C_Master_Transmit+0x1d8>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001590:	f7ff fc76 	bl	8000e80 <HAL_GetTick>
 8001594:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2319      	movs	r3, #25
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f9e6 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0be      	b.n	8001730 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2221      	movs	r2, #33	; 0x21
 80015b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2210      	movs	r2, #16
 80015be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	893a      	ldrh	r2, [r7, #8]
 80015d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2bff      	cmp	r3, #255	; 0xff
 80015e2:	d90e      	bls.n	8001602 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	8979      	ldrh	r1, [r7, #10]
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <HAL_I2C_Master_Transmit+0x1e0>)
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fbd0 	bl	8001da0 <I2C_TransferConfig>
 8001600:	e06c      	b.n	80016dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29a      	uxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001610:	b2da      	uxtb	r2, r3
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	4b48      	ldr	r3, [pc, #288]	; (8001738 <HAL_I2C_Master_Transmit+0x1e0>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fbbf 	bl	8001da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001622:	e05b      	b.n	80016dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	6a39      	ldr	r1, [r7, #32]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f9e3 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e07b      	b.n	8001730 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	3b01      	subs	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d034      	beq.n	80016dc <HAL_I2C_Master_Transmit+0x184>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d130      	bne.n	80016dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	2200      	movs	r2, #0
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f975 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e04d      	b.n	8001730 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001698:	b29b      	uxth	r3, r3
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d90e      	bls.n	80016bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	8979      	ldrh	r1, [r7, #10]
 80016ac:	2300      	movs	r3, #0
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 fb73 	bl	8001da0 <I2C_TransferConfig>
 80016ba:	e00f      	b.n	80016dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	8979      	ldrh	r1, [r7, #10]
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fb62 	bl	8001da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d19e      	bne.n	8001624 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	6a39      	ldr	r1, [r7, #32]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f9c2 	bl	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e01a      	b.n	8001730 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2220      	movs	r2, #32
 8001700:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_I2C_Master_Transmit+0x1e4>)
 800170e:	400b      	ands	r3, r1
 8001710:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2220      	movs	r2, #32
 8001716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800172e:	2302      	movs	r3, #2
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	80002000 	.word	0x80002000
 800173c:	fe00e800 	.word	0xfe00e800

08001740 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af02      	add	r7, sp, #8
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	461a      	mov	r2, r3
 800174c:	460b      	mov	r3, r1
 800174e:	817b      	strh	r3, [r7, #10]
 8001750:	4613      	mov	r3, r2
 8001752:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b20      	cmp	r3, #32
 800175e:	f040 80db 	bne.w	8001918 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_I2C_Master_Receive+0x30>
 800176c:	2302      	movs	r3, #2
 800176e:	e0d4      	b.n	800191a <HAL_I2C_Master_Receive+0x1da>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001778:	f7ff fb82 	bl	8000e80 <HAL_GetTick>
 800177c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2319      	movs	r3, #25
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f8f2 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0bf      	b.n	800191a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2222      	movs	r2, #34	; 0x22
 800179e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2210      	movs	r2, #16
 80017a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	893a      	ldrh	r2, [r7, #8]
 80017ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d90e      	bls.n	80017ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	8979      	ldrh	r1, [r7, #10]
 80017da:	4b52      	ldr	r3, [pc, #328]	; (8001924 <HAL_I2C_Master_Receive+0x1e4>)
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fadc 	bl	8001da0 <I2C_TransferConfig>
 80017e8:	e06d      	b.n	80018c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	8979      	ldrh	r1, [r7, #10]
 80017fc:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_I2C_Master_Receive+0x1e4>)
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 facb 	bl	8001da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800180a:	e05c      	b.n	80018c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	6a39      	ldr	r1, [r7, #32]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f96b 	bl	8001aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e07c      	b.n	800191a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d034      	beq.n	80018c6 <HAL_I2C_Master_Receive+0x186>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d130      	bne.n	80018c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	2200      	movs	r2, #0
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f880 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e04d      	b.n	800191a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	2bff      	cmp	r3, #255	; 0xff
 8001886:	d90e      	bls.n	80018a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	b2da      	uxtb	r2, r3
 8001894:	8979      	ldrh	r1, [r7, #10]
 8001896:	2300      	movs	r3, #0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 fa7e 	bl	8001da0 <I2C_TransferConfig>
 80018a4:	e00f      	b.n	80018c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	8979      	ldrh	r1, [r7, #10]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fa6d 	bl	8001da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d19d      	bne.n	800180c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	6a39      	ldr	r1, [r7, #32]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f8cd 	bl	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e01a      	b.n	800191a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2220      	movs	r2, #32
 80018ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_I2C_Master_Receive+0x1e8>)
 80018f8:	400b      	ands	r3, r1
 80018fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	80002400 	.word	0x80002400
 8001928:	fe00e800 	.word	0xfe00e800

0800192c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d103      	bne.n	800194a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d007      	beq.n	8001968 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	619a      	str	r2, [r3, #24]
  }
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001984:	e022      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800198c:	d01e      	beq.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff fa77 	bl	8000e80 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d113      	bne.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e00f      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4013      	ands	r3, r2
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d0cd      	beq.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a00:	e02c      	b.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f8ea 	bl	8001be0 <I2C_IsErrorOccurred>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e02a      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a1c:	d01e      	beq.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1e:	f7ff fa2f 	bl	8000e80 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d302      	bcc.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d113      	bne.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e007      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d1cb      	bne.n	8001a02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a80:	e028      	b.n	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f8aa 	bl	8001be0 <I2C_IsErrorOccurred>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e026      	b.n	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	f7ff f9f3 	bl	8000e80 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d302      	bcc.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d113      	bne.n	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e007      	b.n	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d1cf      	bne.n	8001a82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001af8:	e064      	b.n	8001bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f86e 	bl	8001be0 <I2C_IsErrorOccurred>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e062      	b.n	8001bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d138      	bne.n	8001b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d105      	bne.n	8001b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e04e      	b.n	8001bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d107      	bne.n	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
 8001b52:	e002      	b.n	8001b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001b6e:	400b      	ands	r3, r1
 8001b70:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e022      	b.n	8001bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff f977 	bl	8000e80 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10f      	bne.n	8001bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e007      	b.n	8001bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d193      	bne.n	8001afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	fe00e800 	.word	0xfe00e800

08001be0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d068      	beq.n	8001cde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2210      	movs	r2, #16
 8001c12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c14:	e049      	b.n	8001caa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c1c:	d045      	beq.n	8001caa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c1e:	f7ff f92f 	bl	8000e80 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d302      	bcc.n	8001c34 <I2C_IsErrorOccurred+0x54>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d13a      	bne.n	8001caa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c56:	d121      	bne.n	8001c9c <I2C_IsErrorOccurred+0xbc>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c5e:	d01d      	beq.n	8001c9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c60:	7cfb      	ldrb	r3, [r7, #19]
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d01a      	beq.n	8001c9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c76:	f7ff f903 	bl	8000e80 <HAL_GetTick>
 8001c7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c7c:	e00e      	b.n	8001c9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c7e:	f7ff f8ff 	bl	8000e80 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b19      	cmp	r3, #25
 8001c8a:	d907      	bls.n	8001c9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f043 0320 	orr.w	r3, r3, #32
 8001c92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001c9a:	e006      	b.n	8001caa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d1e9      	bne.n	8001c7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d003      	beq.n	8001cc0 <I2C_IsErrorOccurred+0xe0>
 8001cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0aa      	beq.n	8001c16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d103      	bne.n	8001cd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01c      	beq.n	8001d8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fde9 	bl	800192c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <I2C_IsErrorOccurred+0x1bc>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	fe00e800 	.word	0xfe00e800

08001da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	817b      	strh	r3, [r7, #10]
 8001dae:	4613      	mov	r3, r2
 8001db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db8:	7a7b      	ldrb	r3, [r7, #9]
 8001dba:	041b      	lsls	r3, r3, #16
 8001dbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	0d5b      	lsrs	r3, r3, #21
 8001dda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <I2C_TransferConfig+0x60>)
 8001de0:	430b      	orrs	r3, r1
 8001de2:	43db      	mvns	r3, r3
 8001de4:	ea02 0103 	and.w	r1, r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	03ff63ff 	.word	0x03ff63ff

08001e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d138      	bne.n	8001e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e032      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d139      	bne.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e033      	b.n	8001f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2224      	movs	r2, #36	; 0x24
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e29b      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8087 	beq.w	8002066 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f58:	4b96      	ldr	r3, [pc, #600]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d00c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f64:	4b93      	ldr	r3, [pc, #588]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d112      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62>
 8001f70:	4b90      	ldr	r3, [pc, #576]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7c:	d10b      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7e:	4b8d      	ldr	r3, [pc, #564]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06c      	beq.n	8002064 <HAL_RCC_OscConfig+0x130>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d168      	bne.n	8002064 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e275      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x7a>
 8001fa0:	4b84      	ldr	r3, [pc, #528]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a83      	ldr	r2, [pc, #524]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e02e      	b.n	800200c <HAL_RCC_OscConfig+0xd8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x9c>
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7e      	ldr	r2, [pc, #504]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a7b      	ldr	r2, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xd8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xc0>
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a72      	ldr	r2, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xd8>
 8001ff4:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a6b      	ldr	r2, [pc, #428]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe ff34 	bl	8000e80 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800201c:	f7fe ff30 	bl	8000e80 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e229      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0xe8>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe ff20 	bl	8000e80 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7fe ff1c 	bl	8000e80 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e215      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x110>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d069      	beq.n	8002146 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002072:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207e:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x190>
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x17a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e1e9      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	493d      	ldr	r1, [pc, #244]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	e040      	b.n	8002146 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d023      	beq.n	8002114 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020cc:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fed2 	bl	8000e80 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7fe fece 	bl	8000e80 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1c7      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4929      	ldr	r1, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
 8002112:	e018      	b.n	8002146 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe feae 	bl	8000e80 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002128:	f7fe feaa 	bl	8000e80 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1a3      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d038      	beq.n	80021c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d019      	beq.n	800218e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe fe8b 	bl	8000e80 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216e:	f7fe fe87 	bl	8000e80 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e180      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x23a>
 800218c:	e01a      	b.n	80021c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x280>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe fe71 	bl	8000e80 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a2:	f7fe fe6d 	bl	8000e80 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d903      	bls.n	80021b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e166      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
 80021b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a4 	beq.w	800231a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b8c      	ldr	r3, [pc, #560]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b89      	ldr	r3, [pc, #548]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a88      	ldr	r2, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b86      	ldr	r3, [pc, #536]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fa:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_RCC_OscConfig+0x4d4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002206:	4b80      	ldr	r3, [pc, #512]	; (8002408 <HAL_RCC_OscConfig+0x4d4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7f      	ldr	r2, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x4d4>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fe35 	bl	8000e80 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7fe fe31 	bl	8000e80 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	; 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e12a      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_OscConfig+0x4d4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x31a>
 8002240:	4b70      	ldr	r3, [pc, #448]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4a6f      	ldr	r2, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	; 0x70
 800224c:	e02d      	b.n	80022aa <HAL_RCC_OscConfig+0x376>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x33c>
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a6a      	ldr	r2, [pc, #424]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	4b68      	ldr	r3, [pc, #416]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a67      	ldr	r2, [pc, #412]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	e01c      	b.n	80022aa <HAL_RCC_OscConfig+0x376>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x35e>
 8002278:	4b62      	ldr	r3, [pc, #392]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a61      	ldr	r2, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	4a5e      	ldr	r2, [pc, #376]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6713      	str	r3, [r2, #112]	; 0x70
 8002290:	e00b      	b.n	80022aa <HAL_RCC_OscConfig+0x376>
 8002292:	4b5c      	ldr	r3, [pc, #368]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	4a5b      	ldr	r2, [pc, #364]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
 800229e:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe fde5 	bl	8000e80 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fde1 	bl	8000e80 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0d8      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCC_OscConfig+0x386>
 80022dc:	e014      	b.n	8002308 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7fe fdcf 	bl	8000e80 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fdcb 	bl	8000e80 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0c2      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d105      	bne.n	800231a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a3c      	ldr	r2, [pc, #240]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80ae 	beq.w	8002480 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d06d      	beq.n	800240c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d14b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a31      	ldr	r2, [pc, #196]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 800233e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fd9c 	bl	8000e80 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fd98 	bl	8000e80 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e091      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	3b01      	subs	r3, #1
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	071b      	lsls	r3, r3, #28
 8002396:	491b      	ldr	r1, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fd6a 	bl	8000e80 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fd66 	bl	8000e80 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e05f      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x47c>
 80023ce:	e057      	b.n	8002480 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fd50 	bl	8000e80 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe fd4c 	bl	8000e80 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e045      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_OscConfig+0x4d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4b0>
 8002402:	e03d      	b.n	8002480 <HAL_RCC_OscConfig+0x54c>
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_RCC_OscConfig+0x558>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d030      	beq.n	800247c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d129      	bne.n	800247c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d122      	bne.n	800247c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002442:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002444:	4293      	cmp	r3, r2
 8002446:	d119      	bne.n	800247c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d10f      	bne.n	800247c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0d0      	b.n	800264a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d910      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 020f 	bic.w	r2, r3, #15
 80024be:	4965      	ldr	r1, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 80024f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 800250e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002512:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d040      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e073      	b.n	800264a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4936      	ldr	r1, [pc, #216]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe fc7c 	bl	8000e80 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fc78 	bl	8000e80 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e053      	b.n	800264a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d210      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 020f 	bic.w	r2, r3, #15
 80025ca:	4922      	ldr	r1, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490a      	ldr	r1, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1cc>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1d0>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1d4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fbd8 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	08004478 	.word	0x08004478
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800266c:	b094      	sub	sp, #80	; 0x50
 800266e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
 8002674:	2300      	movs	r3, #0
 8002676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002678:	2300      	movs	r3, #0
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002680:	4b79      	ldr	r3, [pc, #484]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d00d      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x40>
 800268c:	2b08      	cmp	r3, #8
 800268e:	f200 80e1 	bhi.w	8002854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x34>
 8002696:	2b04      	cmp	r3, #4
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800269a:	e0db      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_GetSysClockFreq+0x204>)
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a0:	e0db      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026a2:	4b72      	ldr	r3, [pc, #456]	; (800286c <HAL_RCC_GetSysClockFreq+0x204>)
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a6:	e0d8      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a8:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026b2:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d063      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	2200      	movs	r2, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
 80026d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026da:	4622      	mov	r2, r4
 80026dc:	462b      	mov	r3, r5
 80026de:	f04f 0000 	mov.w	r0, #0
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	0159      	lsls	r1, r3, #5
 80026e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ec:	0150      	lsls	r0, r2, #5
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4621      	mov	r1, r4
 80026f4:	1a51      	subs	r1, r2, r1
 80026f6:	6139      	str	r1, [r7, #16]
 80026f8:	4629      	mov	r1, r5
 80026fa:	eb63 0301 	sbc.w	r3, r3, r1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800270c:	4659      	mov	r1, fp
 800270e:	018b      	lsls	r3, r1, #6
 8002710:	4651      	mov	r1, sl
 8002712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002716:	4651      	mov	r1, sl
 8002718:	018a      	lsls	r2, r1, #6
 800271a:	4651      	mov	r1, sl
 800271c:	ebb2 0801 	subs.w	r8, r2, r1
 8002720:	4659      	mov	r1, fp
 8002722:	eb63 0901 	sbc.w	r9, r3, r1
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800273a:	4690      	mov	r8, r2
 800273c:	4699      	mov	r9, r3
 800273e:	4623      	mov	r3, r4
 8002740:	eb18 0303 	adds.w	r3, r8, r3
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	462b      	mov	r3, r5
 8002748:	eb49 0303 	adc.w	r3, r9, r3
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800275a:	4629      	mov	r1, r5
 800275c:	028b      	lsls	r3, r1, #10
 800275e:	4621      	mov	r1, r4
 8002760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002764:	4621      	mov	r1, r4
 8002766:	028a      	lsls	r2, r1, #10
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276e:	2200      	movs	r2, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
 8002772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002778:	f7fd fdb2 	bl	80002e0 <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4613      	mov	r3, r2
 8002782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002784:	e058      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b38      	ldr	r3, [pc, #224]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	2200      	movs	r2, #0
 800278e:	4618      	mov	r0, r3
 8002790:	4611      	mov	r1, r2
 8002792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027a0:	4642      	mov	r2, r8
 80027a2:	464b      	mov	r3, r9
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	0159      	lsls	r1, r3, #5
 80027ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b2:	0150      	lsls	r0, r2, #5
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4641      	mov	r1, r8
 80027ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80027be:	4649      	mov	r1, r9
 80027c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027d8:	ebb2 040a 	subs.w	r4, r2, sl
 80027dc:	eb63 050b 	sbc.w	r5, r3, fp
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	00eb      	lsls	r3, r5, #3
 80027ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ee:	00e2      	lsls	r2, r4, #3
 80027f0:	4614      	mov	r4, r2
 80027f2:	461d      	mov	r5, r3
 80027f4:	4643      	mov	r3, r8
 80027f6:	18e3      	adds	r3, r4, r3
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	464b      	mov	r3, r9
 80027fc:	eb45 0303 	adc.w	r3, r5, r3
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280e:	4629      	mov	r1, r5
 8002810:	028b      	lsls	r3, r1, #10
 8002812:	4621      	mov	r1, r4
 8002814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002818:	4621      	mov	r1, r4
 800281a:	028a      	lsls	r2, r1, #10
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002822:	2200      	movs	r2, #0
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	61fa      	str	r2, [r7, #28]
 8002828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800282c:	f7fd fd58 	bl	80002e0 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800284a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetSysClockFreq+0x204>)
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800285c:	4618      	mov	r0, r3
 800285e:	3750      	adds	r7, #80	; 0x50
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	00f42400 	.word	0x00f42400

08002870 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_GetHCLKFreq+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800288c:	f7ff fff0 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08004488 	.word	0x08004488

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b4:	f7ff ffdc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0b5b      	lsrs	r3, r3, #13
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08004488 	.word	0x08004488

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800290a:	6093      	str	r3, [r2, #8]
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	4964      	ldr	r1, [pc, #400]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d017      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	4959      	ldr	r1, [pc, #356]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002950:	d101      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d017      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800296e:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002974:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	494a      	ldr	r1, [pc, #296]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298c:	d101      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 808b 	beq.w	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b3a      	ldr	r3, [pc, #232]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	4a39      	ldr	r2, [pc, #228]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
 80029c8:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a34      	ldr	r2, [pc, #208]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e0:	f7fe fa4e 	bl	8000e80 <HAL_GetTick>
 80029e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fe fa4a 	bl	8000e80 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e38f      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d035      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d02e      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a46:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d114      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fa12 	bl	8000e80 <HAL_GetTick>
 8002a5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fa0e 	bl	8000e80 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e351      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ee      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	4901      	ldr	r1, [pc, #4]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	0ffffcff 	.word	0x0ffffcff
 8002ab4:	4bac      	ldr	r3, [pc, #688]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4aab      	ldr	r2, [pc, #684]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002abe:	6093      	str	r3, [r2, #8]
 8002ac0:	4ba9      	ldr	r3, [pc, #676]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	49a6      	ldr	r1, [pc, #664]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ade:	4ba2      	ldr	r3, [pc, #648]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae4:	4aa0      	ldr	r2, [pc, #640]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aee:	4b9e      	ldr	r3, [pc, #632]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	499b      	ldr	r1, [pc, #620]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0c:	4b96      	ldr	r3, [pc, #600]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1a:	4993      	ldr	r1, [pc, #588]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2e:	4b8e      	ldr	r3, [pc, #568]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b3c:	498a      	ldr	r1, [pc, #552]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b50:	4b85      	ldr	r3, [pc, #532]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5e:	4982      	ldr	r1, [pc, #520]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b72:	4b7d      	ldr	r3, [pc, #500]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4979      	ldr	r1, [pc, #484]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b94:	4b74      	ldr	r3, [pc, #464]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4971      	ldr	r1, [pc, #452]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb6:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f023 020c 	bic.w	r2, r3, #12
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc4:	4968      	ldr	r1, [pc, #416]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bd8:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	4960      	ldr	r1, [pc, #384]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bfa:	4b5b      	ldr	r3, [pc, #364]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	4957      	ldr	r1, [pc, #348]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c1c:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	494f      	ldr	r1, [pc, #316]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4946      	ldr	r1, [pc, #280]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	493e      	ldr	r1, [pc, #248]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c82:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	4935      	ldr	r1, [pc, #212]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ca4:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb2:	492d      	ldr	r1, [pc, #180]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d011      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cc6:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd4:	4924      	ldr	r1, [pc, #144]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce4:	d101      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	4914      	ldr	r1, [pc, #80]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d38:	490b      	ldr	r1, [pc, #44]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00f      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5c:	4902      	ldr	r1, [pc, #8]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d64:	e002      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d78:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	4986      	ldr	r1, [pc, #536]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d9c:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dac:	497d      	ldr	r1, [pc, #500]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d006      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80d6 	beq.w	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dc8:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a75      	ldr	r2, [pc, #468]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fe f854 	bl	8000e80 <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ddc:	f7fe f850 	bl	8000e80 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e195      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d021      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11d      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e0e:	4b65      	ldr	r3, [pc, #404]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e22:	0e1b      	lsrs	r3, r3, #24
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	019a      	lsls	r2, r3, #6
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	071b      	lsls	r3, r3, #28
 8002e42:	4958      	ldr	r1, [pc, #352]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02e      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e74:	d129      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e76:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8a:	0f1b      	lsrs	r3, r3, #28
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	019a      	lsls	r2, r3, #6
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	041b      	lsls	r3, r3, #16
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	061b      	lsls	r3, r3, #24
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	493e      	ldr	r1, [pc, #248]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eb2:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb8:	f023 021f 	bic.w	r2, r3, #31
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	4938      	ldr	r1, [pc, #224]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01d      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ed6:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002edc:	0e1b      	lsrs	r3, r3, #24
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eea:	0f1b      	lsrs	r3, r3, #28
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	019a      	lsls	r2, r3, #6
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	061b      	lsls	r3, r3, #24
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	071b      	lsls	r3, r3, #28
 8002f0a:	4926      	ldr	r1, [pc, #152]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d011      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	019a      	lsls	r2, r3, #6
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	491a      	ldr	r1, [pc, #104]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4e:	f7fd ff97 	bl	8000e80 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f56:	f7fd ff93 	bl	8000e80 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	; 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0d8      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	f040 80ce 	bne.w	8003118 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f88:	f7fd ff7a 	bl	8000e80 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f90:	f7fd ff76 	bl	8000e80 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d904      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0bb      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa8:	4b5e      	ldr	r3, [pc, #376]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb4:	d0ec      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d02e      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d12a      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	0f1b      	lsrs	r3, r3, #28
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	019a      	lsls	r2, r3, #6
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	071b      	lsls	r3, r3, #28
 8003012:	4944      	ldr	r1, [pc, #272]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800301a:	4b42      	ldr	r3, [pc, #264]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003020:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	493d      	ldr	r1, [pc, #244]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d022      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003048:	d11d      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	0e1b      	lsrs	r3, r3, #24
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	0f1b      	lsrs	r3, r3, #28
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	019a      	lsls	r2, r3, #6
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	431a      	orrs	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	071b      	lsls	r3, r3, #28
 800307e:	4929      	ldr	r1, [pc, #164]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d028      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	0e1b      	lsrs	r3, r3, #24
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030a0:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	019a      	lsls	r2, r3, #6
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	071b      	lsls	r3, r3, #28
 80030c6:	4917      	ldr	r1, [pc, #92]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4911      	ldr	r1, [pc, #68]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0e      	ldr	r2, [pc, #56]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fd fec6 	bl	8000e80 <HAL_GetTick>
 80030f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030f8:	f7fd fec2 	bl	8000e80 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e007      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003116:	d1ef      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e040      	b.n	80031bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fd4c 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8b0 	bl	80032cc <UART_SetConfig>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e022      	b.n	80031bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fb08 	bl	8003794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb8f 	bl	80038d8 <UART_CheckIdleState>
 80031ba:	4603      	mov	r3, r0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d171      	bne.n	80032c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_UART_Transmit+0x24>
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e06a      	b.n	80032c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2221      	movs	r2, #33	; 0x21
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031fa:	f7fd fe41 	bl	8000e80 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003218:	d108      	bne.n	800322c <HAL_UART_Transmit+0x68>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e003      	b.n	8003234 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003234:	e02c      	b.n	8003290 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	2180      	movs	r1, #128	; 0x80
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fb96 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e038      	b.n	80032c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003264:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3302      	adds	r3, #2
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	e007      	b.n	800327e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3301      	adds	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1cc      	bne.n	8003236 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fb63 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e005      	b.n	80032c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4ba6      	ldr	r3, [pc, #664]	; (8003590 <UART_SetConfig+0x2c4>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6979      	ldr	r1, [r7, #20]
 8003300:	430b      	orrs	r3, r1
 8003302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	430a      	orrs	r2, r1
 800333c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a94      	ldr	r2, [pc, #592]	; (8003594 <UART_SetConfig+0x2c8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d120      	bne.n	800338a <UART_SetConfig+0xbe>
 8003348:	4b93      	ldr	r3, [pc, #588]	; (8003598 <UART_SetConfig+0x2cc>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b03      	cmp	r3, #3
 8003354:	d816      	bhi.n	8003384 <UART_SetConfig+0xb8>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0x90>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	0800336d 	.word	0x0800336d
 8003360:	08003379 	.word	0x08003379
 8003364:	08003373 	.word	0x08003373
 8003368:	0800337f 	.word	0x0800337f
 800336c:	2301      	movs	r3, #1
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e150      	b.n	8003614 <UART_SetConfig+0x348>
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e14d      	b.n	8003614 <UART_SetConfig+0x348>
 8003378:	2304      	movs	r3, #4
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e14a      	b.n	8003614 <UART_SetConfig+0x348>
 800337e:	2308      	movs	r3, #8
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e147      	b.n	8003614 <UART_SetConfig+0x348>
 8003384:	2310      	movs	r3, #16
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e144      	b.n	8003614 <UART_SetConfig+0x348>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a83      	ldr	r2, [pc, #524]	; (800359c <UART_SetConfig+0x2d0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d132      	bne.n	80033fa <UART_SetConfig+0x12e>
 8003394:	4b80      	ldr	r3, [pc, #512]	; (8003598 <UART_SetConfig+0x2cc>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d828      	bhi.n	80033f4 <UART_SetConfig+0x128>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <UART_SetConfig+0xdc>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	080033f5 	.word	0x080033f5
 80033b0:	080033f5 	.word	0x080033f5
 80033b4:	080033f5 	.word	0x080033f5
 80033b8:	080033e9 	.word	0x080033e9
 80033bc:	080033f5 	.word	0x080033f5
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	080033f5 	.word	0x080033f5
 80033c8:	080033e3 	.word	0x080033e3
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033f5 	.word	0x080033f5
 80033d8:	080033ef 	.word	0x080033ef
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e118      	b.n	8003614 <UART_SetConfig+0x348>
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e115      	b.n	8003614 <UART_SetConfig+0x348>
 80033e8:	2304      	movs	r3, #4
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e112      	b.n	8003614 <UART_SetConfig+0x348>
 80033ee:	2308      	movs	r3, #8
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e10f      	b.n	8003614 <UART_SetConfig+0x348>
 80033f4:	2310      	movs	r3, #16
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e10c      	b.n	8003614 <UART_SetConfig+0x348>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a68      	ldr	r2, [pc, #416]	; (80035a0 <UART_SetConfig+0x2d4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d120      	bne.n	8003446 <UART_SetConfig+0x17a>
 8003404:	4b64      	ldr	r3, [pc, #400]	; (8003598 <UART_SetConfig+0x2cc>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800340e:	2b30      	cmp	r3, #48	; 0x30
 8003410:	d013      	beq.n	800343a <UART_SetConfig+0x16e>
 8003412:	2b30      	cmp	r3, #48	; 0x30
 8003414:	d814      	bhi.n	8003440 <UART_SetConfig+0x174>
 8003416:	2b20      	cmp	r3, #32
 8003418:	d009      	beq.n	800342e <UART_SetConfig+0x162>
 800341a:	2b20      	cmp	r3, #32
 800341c:	d810      	bhi.n	8003440 <UART_SetConfig+0x174>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <UART_SetConfig+0x15c>
 8003422:	2b10      	cmp	r3, #16
 8003424:	d006      	beq.n	8003434 <UART_SetConfig+0x168>
 8003426:	e00b      	b.n	8003440 <UART_SetConfig+0x174>
 8003428:	2300      	movs	r3, #0
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e0f2      	b.n	8003614 <UART_SetConfig+0x348>
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e0ef      	b.n	8003614 <UART_SetConfig+0x348>
 8003434:	2304      	movs	r3, #4
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e0ec      	b.n	8003614 <UART_SetConfig+0x348>
 800343a:	2308      	movs	r3, #8
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e0e9      	b.n	8003614 <UART_SetConfig+0x348>
 8003440:	2310      	movs	r3, #16
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e0e6      	b.n	8003614 <UART_SetConfig+0x348>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <UART_SetConfig+0x2d8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d120      	bne.n	8003492 <UART_SetConfig+0x1c6>
 8003450:	4b51      	ldr	r3, [pc, #324]	; (8003598 <UART_SetConfig+0x2cc>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800345a:	2bc0      	cmp	r3, #192	; 0xc0
 800345c:	d013      	beq.n	8003486 <UART_SetConfig+0x1ba>
 800345e:	2bc0      	cmp	r3, #192	; 0xc0
 8003460:	d814      	bhi.n	800348c <UART_SetConfig+0x1c0>
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d009      	beq.n	800347a <UART_SetConfig+0x1ae>
 8003466:	2b80      	cmp	r3, #128	; 0x80
 8003468:	d810      	bhi.n	800348c <UART_SetConfig+0x1c0>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <UART_SetConfig+0x1a8>
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d006      	beq.n	8003480 <UART_SetConfig+0x1b4>
 8003472:	e00b      	b.n	800348c <UART_SetConfig+0x1c0>
 8003474:	2300      	movs	r3, #0
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e0cc      	b.n	8003614 <UART_SetConfig+0x348>
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e0c9      	b.n	8003614 <UART_SetConfig+0x348>
 8003480:	2304      	movs	r3, #4
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e0c6      	b.n	8003614 <UART_SetConfig+0x348>
 8003486:	2308      	movs	r3, #8
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e0c3      	b.n	8003614 <UART_SetConfig+0x348>
 800348c:	2310      	movs	r3, #16
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e0c0      	b.n	8003614 <UART_SetConfig+0x348>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a44      	ldr	r2, [pc, #272]	; (80035a8 <UART_SetConfig+0x2dc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d125      	bne.n	80034e8 <UART_SetConfig+0x21c>
 800349c:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <UART_SetConfig+0x2cc>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034aa:	d017      	beq.n	80034dc <UART_SetConfig+0x210>
 80034ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034b0:	d817      	bhi.n	80034e2 <UART_SetConfig+0x216>
 80034b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b6:	d00b      	beq.n	80034d0 <UART_SetConfig+0x204>
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034bc:	d811      	bhi.n	80034e2 <UART_SetConfig+0x216>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <UART_SetConfig+0x1fe>
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c6:	d006      	beq.n	80034d6 <UART_SetConfig+0x20a>
 80034c8:	e00b      	b.n	80034e2 <UART_SetConfig+0x216>
 80034ca:	2300      	movs	r3, #0
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e0a1      	b.n	8003614 <UART_SetConfig+0x348>
 80034d0:	2302      	movs	r3, #2
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e09e      	b.n	8003614 <UART_SetConfig+0x348>
 80034d6:	2304      	movs	r3, #4
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e09b      	b.n	8003614 <UART_SetConfig+0x348>
 80034dc:	2308      	movs	r3, #8
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e098      	b.n	8003614 <UART_SetConfig+0x348>
 80034e2:	2310      	movs	r3, #16
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e095      	b.n	8003614 <UART_SetConfig+0x348>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <UART_SetConfig+0x2e0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d125      	bne.n	800353e <UART_SetConfig+0x272>
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <UART_SetConfig+0x2cc>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003500:	d017      	beq.n	8003532 <UART_SetConfig+0x266>
 8003502:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003506:	d817      	bhi.n	8003538 <UART_SetConfig+0x26c>
 8003508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350c:	d00b      	beq.n	8003526 <UART_SetConfig+0x25a>
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d811      	bhi.n	8003538 <UART_SetConfig+0x26c>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <UART_SetConfig+0x254>
 8003518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351c:	d006      	beq.n	800352c <UART_SetConfig+0x260>
 800351e:	e00b      	b.n	8003538 <UART_SetConfig+0x26c>
 8003520:	2301      	movs	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e076      	b.n	8003614 <UART_SetConfig+0x348>
 8003526:	2302      	movs	r3, #2
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e073      	b.n	8003614 <UART_SetConfig+0x348>
 800352c:	2304      	movs	r3, #4
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e070      	b.n	8003614 <UART_SetConfig+0x348>
 8003532:	2308      	movs	r3, #8
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	e06d      	b.n	8003614 <UART_SetConfig+0x348>
 8003538:	2310      	movs	r3, #16
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e06a      	b.n	8003614 <UART_SetConfig+0x348>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <UART_SetConfig+0x2e4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d138      	bne.n	80035ba <UART_SetConfig+0x2ee>
 8003548:	4b13      	ldr	r3, [pc, #76]	; (8003598 <UART_SetConfig+0x2cc>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003556:	d017      	beq.n	8003588 <UART_SetConfig+0x2bc>
 8003558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800355c:	d82a      	bhi.n	80035b4 <UART_SetConfig+0x2e8>
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003562:	d00b      	beq.n	800357c <UART_SetConfig+0x2b0>
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003568:	d824      	bhi.n	80035b4 <UART_SetConfig+0x2e8>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <UART_SetConfig+0x2aa>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d006      	beq.n	8003582 <UART_SetConfig+0x2b6>
 8003574:	e01e      	b.n	80035b4 <UART_SetConfig+0x2e8>
 8003576:	2300      	movs	r3, #0
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e04b      	b.n	8003614 <UART_SetConfig+0x348>
 800357c:	2302      	movs	r3, #2
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e048      	b.n	8003614 <UART_SetConfig+0x348>
 8003582:	2304      	movs	r3, #4
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e045      	b.n	8003614 <UART_SetConfig+0x348>
 8003588:	2308      	movs	r3, #8
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e042      	b.n	8003614 <UART_SetConfig+0x348>
 800358e:	bf00      	nop
 8003590:	efff69f3 	.word	0xefff69f3
 8003594:	40011000 	.word	0x40011000
 8003598:	40023800 	.word	0x40023800
 800359c:	40004400 	.word	0x40004400
 80035a0:	40004800 	.word	0x40004800
 80035a4:	40004c00 	.word	0x40004c00
 80035a8:	40005000 	.word	0x40005000
 80035ac:	40011400 	.word	0x40011400
 80035b0:	40007800 	.word	0x40007800
 80035b4:	2310      	movs	r3, #16
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	e02c      	b.n	8003614 <UART_SetConfig+0x348>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a72      	ldr	r2, [pc, #456]	; (8003788 <UART_SetConfig+0x4bc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d125      	bne.n	8003610 <UART_SetConfig+0x344>
 80035c4:	4b71      	ldr	r3, [pc, #452]	; (800378c <UART_SetConfig+0x4c0>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035d2:	d017      	beq.n	8003604 <UART_SetConfig+0x338>
 80035d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035d8:	d817      	bhi.n	800360a <UART_SetConfig+0x33e>
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d00b      	beq.n	80035f8 <UART_SetConfig+0x32c>
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e4:	d811      	bhi.n	800360a <UART_SetConfig+0x33e>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <UART_SetConfig+0x326>
 80035ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ee:	d006      	beq.n	80035fe <UART_SetConfig+0x332>
 80035f0:	e00b      	b.n	800360a <UART_SetConfig+0x33e>
 80035f2:	2300      	movs	r3, #0
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e00d      	b.n	8003614 <UART_SetConfig+0x348>
 80035f8:	2302      	movs	r3, #2
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e00a      	b.n	8003614 <UART_SetConfig+0x348>
 80035fe:	2304      	movs	r3, #4
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e007      	b.n	8003614 <UART_SetConfig+0x348>
 8003604:	2308      	movs	r3, #8
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e004      	b.n	8003614 <UART_SetConfig+0x348>
 800360a:	2310      	movs	r3, #16
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e001      	b.n	8003614 <UART_SetConfig+0x348>
 8003610:	2310      	movs	r3, #16
 8003612:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361c:	d15b      	bne.n	80036d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800361e:	7ffb      	ldrb	r3, [r7, #31]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d828      	bhi.n	8003676 <UART_SetConfig+0x3aa>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <UART_SetConfig+0x360>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003651 	.word	0x08003651
 8003630:	08003659 	.word	0x08003659
 8003634:	08003661 	.word	0x08003661
 8003638:	08003677 	.word	0x08003677
 800363c:	08003667 	.word	0x08003667
 8003640:	08003677 	.word	0x08003677
 8003644:	08003677 	.word	0x08003677
 8003648:	08003677 	.word	0x08003677
 800364c:	0800366f 	.word	0x0800366f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7ff f91a 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8003654:	61b8      	str	r0, [r7, #24]
        break;
 8003656:	e013      	b.n	8003680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003658:	f7ff f92a 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 800365c:	61b8      	str	r0, [r7, #24]
        break;
 800365e:	e00f      	b.n	8003680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003660:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <UART_SetConfig+0x4c4>)
 8003662:	61bb      	str	r3, [r7, #24]
        break;
 8003664:	e00c      	b.n	8003680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003666:	f7fe ffff 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 800366a:	61b8      	str	r0, [r7, #24]
        break;
 800366c:	e008      	b.n	8003680 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003672:	61bb      	str	r3, [r7, #24]
        break;
 8003674:	e004      	b.n	8003680 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	77bb      	strb	r3, [r7, #30]
        break;
 800367e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d074      	beq.n	8003770 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	005a      	lsls	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	441a      	add	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	d916      	bls.n	80036d0 <UART_SetConfig+0x404>
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d212      	bcs.n	80036d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f023 030f 	bic.w	r3, r3, #15
 80036b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	b29a      	uxth	r2, r3
 80036c0:	89fb      	ldrh	r3, [r7, #14]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	89fa      	ldrh	r2, [r7, #14]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	e04f      	b.n	8003770 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	77bb      	strb	r3, [r7, #30]
 80036d4:	e04c      	b.n	8003770 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d6:	7ffb      	ldrb	r3, [r7, #31]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d828      	bhi.n	800372e <UART_SetConfig+0x462>
 80036dc:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <UART_SetConfig+0x418>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	08003709 	.word	0x08003709
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003719 	.word	0x08003719
 80036f0:	0800372f 	.word	0x0800372f
 80036f4:	0800371f 	.word	0x0800371f
 80036f8:	0800372f 	.word	0x0800372f
 80036fc:	0800372f 	.word	0x0800372f
 8003700:	0800372f 	.word	0x0800372f
 8003704:	08003727 	.word	0x08003727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7ff f8be 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 800370c:	61b8      	str	r0, [r7, #24]
        break;
 800370e:	e013      	b.n	8003738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7ff f8ce 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8003714:	61b8      	str	r0, [r7, #24]
        break;
 8003716:	e00f      	b.n	8003738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <UART_SetConfig+0x4c4>)
 800371a:	61bb      	str	r3, [r7, #24]
        break;
 800371c:	e00c      	b.n	8003738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371e:	f7fe ffa3 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8003722:	61b8      	str	r0, [r7, #24]
        break;
 8003724:	e008      	b.n	8003738 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372a:	61bb      	str	r3, [r7, #24]
        break;
 800372c:	e004      	b.n	8003738 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	77bb      	strb	r3, [r7, #30]
        break;
 8003736:	bf00      	nop
    }

    if (pclk != 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	085a      	lsrs	r2, r3, #1
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	441a      	add	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b0f      	cmp	r3, #15
 8003756:	d909      	bls.n	800376c <UART_SetConfig+0x4a0>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375e:	d205      	bcs.n	800376c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e001      	b.n	8003770 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800377c:	7fbb      	ldrb	r3, [r7, #30]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40007c00 	.word	0x40007c00
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400

08003794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01a      	beq.n	80038aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003892:	d10a      	bne.n	80038aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038e8:	f7fd faca 	bl	8000e80 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d10e      	bne.n	800391a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f831 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e027      	b.n	800396a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d10e      	bne.n	8003946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f81b 	bl	8003972 <UART_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e011      	b.n	800396a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b09c      	sub	sp, #112	; 0x70
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003982:	e0a7      	b.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398a:	f000 80a3 	beq.w	8003ad4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fd fa77 	bl	8000e80 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800399e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d13f      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039b8:	667b      	str	r3, [r7, #100]	; 0x64
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e6      	bne.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e068      	b.n	8003af6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d050      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a40:	d148      	bne.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e6      	bne.n	8003a4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a9e:	623a      	str	r2, [r7, #32]
 8003aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e5      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e010      	b.n	8003af6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	f43f af48 	beq.w	8003984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3770      	adds	r7, #112	; 0x70
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <__errno>:
 8003b00:	4b01      	ldr	r3, [pc, #4]	; (8003b08 <__errno+0x8>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4d0d      	ldr	r5, [pc, #52]	; (8003b44 <__libc_init_array+0x38>)
 8003b10:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b12:	1b64      	subs	r4, r4, r5
 8003b14:	10a4      	asrs	r4, r4, #2
 8003b16:	2600      	movs	r6, #0
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	4d0b      	ldr	r5, [pc, #44]	; (8003b4c <__libc_init_array+0x40>)
 8003b1e:	4c0c      	ldr	r4, [pc, #48]	; (8003b50 <__libc_init_array+0x44>)
 8003b20:	f000 fc8e 	bl	8004440 <_init>
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	2600      	movs	r6, #0
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	080044cc 	.word	0x080044cc
 8003b48:	080044cc 	.word	0x080044cc
 8003b4c:	080044cc 	.word	0x080044cc
 8003b50:	080044d0 	.word	0x080044d0

08003b54 <memset>:
 8003b54:	4402      	add	r2, r0
 8003b56:	4603      	mov	r3, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <siprintf>:
 8003b64:	b40e      	push	{r1, r2, r3}
 8003b66:	b500      	push	{lr}
 8003b68:	b09c      	sub	sp, #112	; 0x70
 8003b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b6c:	9002      	str	r0, [sp, #8]
 8003b6e:	9006      	str	r0, [sp, #24]
 8003b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b74:	4809      	ldr	r0, [pc, #36]	; (8003b9c <siprintf+0x38>)
 8003b76:	9107      	str	r1, [sp, #28]
 8003b78:	9104      	str	r1, [sp, #16]
 8003b7a:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <siprintf+0x3c>)
 8003b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b80:	9105      	str	r1, [sp, #20]
 8003b82:	6800      	ldr	r0, [r0, #0]
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	a902      	add	r1, sp, #8
 8003b88:	f000 f868 	bl	8003c5c <_svfiprintf_r>
 8003b8c:	9b02      	ldr	r3, [sp, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	b01c      	add	sp, #112	; 0x70
 8003b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b98:	b003      	add	sp, #12
 8003b9a:	4770      	bx	lr
 8003b9c:	2000000c 	.word	0x2000000c
 8003ba0:	ffff0208 	.word	0xffff0208

08003ba4 <__ssputs_r>:
 8003ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	688e      	ldr	r6, [r1, #8]
 8003baa:	429e      	cmp	r6, r3
 8003bac:	4682      	mov	sl, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	4690      	mov	r8, r2
 8003bb2:	461f      	mov	r7, r3
 8003bb4:	d838      	bhi.n	8003c28 <__ssputs_r+0x84>
 8003bb6:	898a      	ldrh	r2, [r1, #12]
 8003bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bbc:	d032      	beq.n	8003c24 <__ssputs_r+0x80>
 8003bbe:	6825      	ldr	r5, [r4, #0]
 8003bc0:	6909      	ldr	r1, [r1, #16]
 8003bc2:	eba5 0901 	sub.w	r9, r5, r1
 8003bc6:	6965      	ldr	r5, [r4, #20]
 8003bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	444b      	add	r3, r9
 8003bd4:	106d      	asrs	r5, r5, #1
 8003bd6:	429d      	cmp	r5, r3
 8003bd8:	bf38      	it	cc
 8003bda:	461d      	movcc	r5, r3
 8003bdc:	0553      	lsls	r3, r2, #21
 8003bde:	d531      	bpl.n	8003c44 <__ssputs_r+0xa0>
 8003be0:	4629      	mov	r1, r5
 8003be2:	f000 fb63 	bl	80042ac <_malloc_r>
 8003be6:	4606      	mov	r6, r0
 8003be8:	b950      	cbnz	r0, 8003c00 <__ssputs_r+0x5c>
 8003bea:	230c      	movs	r3, #12
 8003bec:	f8ca 3000 	str.w	r3, [sl]
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c00:	6921      	ldr	r1, [r4, #16]
 8003c02:	464a      	mov	r2, r9
 8003c04:	f000 fabe 	bl	8004184 <memcpy>
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c12:	81a3      	strh	r3, [r4, #12]
 8003c14:	6126      	str	r6, [r4, #16]
 8003c16:	6165      	str	r5, [r4, #20]
 8003c18:	444e      	add	r6, r9
 8003c1a:	eba5 0509 	sub.w	r5, r5, r9
 8003c1e:	6026      	str	r6, [r4, #0]
 8003c20:	60a5      	str	r5, [r4, #8]
 8003c22:	463e      	mov	r6, r7
 8003c24:	42be      	cmp	r6, r7
 8003c26:	d900      	bls.n	8003c2a <__ssputs_r+0x86>
 8003c28:	463e      	mov	r6, r7
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	4641      	mov	r1, r8
 8003c30:	f000 fab6 	bl	80041a0 <memmove>
 8003c34:	68a3      	ldr	r3, [r4, #8]
 8003c36:	1b9b      	subs	r3, r3, r6
 8003c38:	60a3      	str	r3, [r4, #8]
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	4433      	add	r3, r6
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	2000      	movs	r0, #0
 8003c42:	e7db      	b.n	8003bfc <__ssputs_r+0x58>
 8003c44:	462a      	mov	r2, r5
 8003c46:	f000 fba5 	bl	8004394 <_realloc_r>
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1e1      	bne.n	8003c14 <__ssputs_r+0x70>
 8003c50:	6921      	ldr	r1, [r4, #16]
 8003c52:	4650      	mov	r0, sl
 8003c54:	f000 fabe 	bl	80041d4 <_free_r>
 8003c58:	e7c7      	b.n	8003bea <__ssputs_r+0x46>
	...

08003c5c <_svfiprintf_r>:
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	4698      	mov	r8, r3
 8003c62:	898b      	ldrh	r3, [r1, #12]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	b09d      	sub	sp, #116	; 0x74
 8003c68:	4607      	mov	r7, r0
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	4614      	mov	r4, r2
 8003c6e:	d50e      	bpl.n	8003c8e <_svfiprintf_r+0x32>
 8003c70:	690b      	ldr	r3, [r1, #16]
 8003c72:	b963      	cbnz	r3, 8003c8e <_svfiprintf_r+0x32>
 8003c74:	2140      	movs	r1, #64	; 0x40
 8003c76:	f000 fb19 	bl	80042ac <_malloc_r>
 8003c7a:	6028      	str	r0, [r5, #0]
 8003c7c:	6128      	str	r0, [r5, #16]
 8003c7e:	b920      	cbnz	r0, 8003c8a <_svfiprintf_r+0x2e>
 8003c80:	230c      	movs	r3, #12
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c88:	e0d1      	b.n	8003e2e <_svfiprintf_r+0x1d2>
 8003c8a:	2340      	movs	r3, #64	; 0x40
 8003c8c:	616b      	str	r3, [r5, #20]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9309      	str	r3, [sp, #36]	; 0x24
 8003c92:	2320      	movs	r3, #32
 8003c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c9c:	2330      	movs	r3, #48	; 0x30
 8003c9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e48 <_svfiprintf_r+0x1ec>
 8003ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ca6:	f04f 0901 	mov.w	r9, #1
 8003caa:	4623      	mov	r3, r4
 8003cac:	469a      	mov	sl, r3
 8003cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cb2:	b10a      	cbz	r2, 8003cb8 <_svfiprintf_r+0x5c>
 8003cb4:	2a25      	cmp	r2, #37	; 0x25
 8003cb6:	d1f9      	bne.n	8003cac <_svfiprintf_r+0x50>
 8003cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cbc:	d00b      	beq.n	8003cd6 <_svfiprintf_r+0x7a>
 8003cbe:	465b      	mov	r3, fp
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f7ff ff6d 	bl	8003ba4 <__ssputs_r>
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f000 80aa 	beq.w	8003e24 <_svfiprintf_r+0x1c8>
 8003cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cd2:	445a      	add	r2, fp
 8003cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80a2 	beq.w	8003e24 <_svfiprintf_r+0x1c8>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cea:	f10a 0a01 	add.w	sl, sl, #1
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	9307      	str	r3, [sp, #28]
 8003cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8003cf8:	4654      	mov	r4, sl
 8003cfa:	2205      	movs	r2, #5
 8003cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d00:	4851      	ldr	r0, [pc, #324]	; (8003e48 <_svfiprintf_r+0x1ec>)
 8003d02:	f7fc fa9d 	bl	8000240 <memchr>
 8003d06:	9a04      	ldr	r2, [sp, #16]
 8003d08:	b9d8      	cbnz	r0, 8003d42 <_svfiprintf_r+0xe6>
 8003d0a:	06d0      	lsls	r0, r2, #27
 8003d0c:	bf44      	itt	mi
 8003d0e:	2320      	movmi	r3, #32
 8003d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d14:	0711      	lsls	r1, r2, #28
 8003d16:	bf44      	itt	mi
 8003d18:	232b      	movmi	r3, #43	; 0x2b
 8003d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d22:	2b2a      	cmp	r3, #42	; 0x2a
 8003d24:	d015      	beq.n	8003d52 <_svfiprintf_r+0xf6>
 8003d26:	9a07      	ldr	r2, [sp, #28]
 8003d28:	4654      	mov	r4, sl
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f04f 0c0a 	mov.w	ip, #10
 8003d30:	4621      	mov	r1, r4
 8003d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d36:	3b30      	subs	r3, #48	; 0x30
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	d94e      	bls.n	8003dda <_svfiprintf_r+0x17e>
 8003d3c:	b1b0      	cbz	r0, 8003d6c <_svfiprintf_r+0x110>
 8003d3e:	9207      	str	r2, [sp, #28]
 8003d40:	e014      	b.n	8003d6c <_svfiprintf_r+0x110>
 8003d42:	eba0 0308 	sub.w	r3, r0, r8
 8003d46:	fa09 f303 	lsl.w	r3, r9, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	46a2      	mov	sl, r4
 8003d50:	e7d2      	b.n	8003cf8 <_svfiprintf_r+0x9c>
 8003d52:	9b03      	ldr	r3, [sp, #12]
 8003d54:	1d19      	adds	r1, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9103      	str	r1, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfbb      	ittet	lt
 8003d5e:	425b      	neglt	r3, r3
 8003d60:	f042 0202 	orrlt.w	r2, r2, #2
 8003d64:	9307      	strge	r3, [sp, #28]
 8003d66:	9307      	strlt	r3, [sp, #28]
 8003d68:	bfb8      	it	lt
 8003d6a:	9204      	strlt	r2, [sp, #16]
 8003d6c:	7823      	ldrb	r3, [r4, #0]
 8003d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d70:	d10c      	bne.n	8003d8c <_svfiprintf_r+0x130>
 8003d72:	7863      	ldrb	r3, [r4, #1]
 8003d74:	2b2a      	cmp	r3, #42	; 0x2a
 8003d76:	d135      	bne.n	8003de4 <_svfiprintf_r+0x188>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	1d1a      	adds	r2, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	9203      	str	r2, [sp, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bfb8      	it	lt
 8003d84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d88:	3402      	adds	r4, #2
 8003d8a:	9305      	str	r3, [sp, #20]
 8003d8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e58 <_svfiprintf_r+0x1fc>
 8003d90:	7821      	ldrb	r1, [r4, #0]
 8003d92:	2203      	movs	r2, #3
 8003d94:	4650      	mov	r0, sl
 8003d96:	f7fc fa53 	bl	8000240 <memchr>
 8003d9a:	b140      	cbz	r0, 8003dae <_svfiprintf_r+0x152>
 8003d9c:	2340      	movs	r3, #64	; 0x40
 8003d9e:	eba0 000a 	sub.w	r0, r0, sl
 8003da2:	fa03 f000 	lsl.w	r0, r3, r0
 8003da6:	9b04      	ldr	r3, [sp, #16]
 8003da8:	4303      	orrs	r3, r0
 8003daa:	3401      	adds	r4, #1
 8003dac:	9304      	str	r3, [sp, #16]
 8003dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db2:	4826      	ldr	r0, [pc, #152]	; (8003e4c <_svfiprintf_r+0x1f0>)
 8003db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003db8:	2206      	movs	r2, #6
 8003dba:	f7fc fa41 	bl	8000240 <memchr>
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d038      	beq.n	8003e34 <_svfiprintf_r+0x1d8>
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <_svfiprintf_r+0x1f4>)
 8003dc4:	bb1b      	cbnz	r3, 8003e0e <_svfiprintf_r+0x1b2>
 8003dc6:	9b03      	ldr	r3, [sp, #12]
 8003dc8:	3307      	adds	r3, #7
 8003dca:	f023 0307 	bic.w	r3, r3, #7
 8003dce:	3308      	adds	r3, #8
 8003dd0:	9303      	str	r3, [sp, #12]
 8003dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd4:	4433      	add	r3, r6
 8003dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd8:	e767      	b.n	8003caa <_svfiprintf_r+0x4e>
 8003dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dde:	460c      	mov	r4, r1
 8003de0:	2001      	movs	r0, #1
 8003de2:	e7a5      	b.n	8003d30 <_svfiprintf_r+0xd4>
 8003de4:	2300      	movs	r3, #0
 8003de6:	3401      	adds	r4, #1
 8003de8:	9305      	str	r3, [sp, #20]
 8003dea:	4619      	mov	r1, r3
 8003dec:	f04f 0c0a 	mov.w	ip, #10
 8003df0:	4620      	mov	r0, r4
 8003df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003df6:	3a30      	subs	r2, #48	; 0x30
 8003df8:	2a09      	cmp	r2, #9
 8003dfa:	d903      	bls.n	8003e04 <_svfiprintf_r+0x1a8>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0c5      	beq.n	8003d8c <_svfiprintf_r+0x130>
 8003e00:	9105      	str	r1, [sp, #20]
 8003e02:	e7c3      	b.n	8003d8c <_svfiprintf_r+0x130>
 8003e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e08:	4604      	mov	r4, r0
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e7f0      	b.n	8003df0 <_svfiprintf_r+0x194>
 8003e0e:	ab03      	add	r3, sp, #12
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	462a      	mov	r2, r5
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <_svfiprintf_r+0x1f8>)
 8003e16:	a904      	add	r1, sp, #16
 8003e18:	4638      	mov	r0, r7
 8003e1a:	f3af 8000 	nop.w
 8003e1e:	1c42      	adds	r2, r0, #1
 8003e20:	4606      	mov	r6, r0
 8003e22:	d1d6      	bne.n	8003dd2 <_svfiprintf_r+0x176>
 8003e24:	89ab      	ldrh	r3, [r5, #12]
 8003e26:	065b      	lsls	r3, r3, #25
 8003e28:	f53f af2c 	bmi.w	8003c84 <_svfiprintf_r+0x28>
 8003e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e2e:	b01d      	add	sp, #116	; 0x74
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	ab03      	add	r3, sp, #12
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <_svfiprintf_r+0x1f8>)
 8003e3c:	a904      	add	r1, sp, #16
 8003e3e:	4638      	mov	r0, r7
 8003e40:	f000 f87a 	bl	8003f38 <_printf_i>
 8003e44:	e7eb      	b.n	8003e1e <_svfiprintf_r+0x1c2>
 8003e46:	bf00      	nop
 8003e48:	08004490 	.word	0x08004490
 8003e4c:	0800449a 	.word	0x0800449a
 8003e50:	00000000 	.word	0x00000000
 8003e54:	08003ba5 	.word	0x08003ba5
 8003e58:	08004496 	.word	0x08004496

08003e5c <_printf_common>:
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	4616      	mov	r6, r2
 8003e62:	4699      	mov	r9, r3
 8003e64:	688a      	ldr	r2, [r1, #8]
 8003e66:	690b      	ldr	r3, [r1, #16]
 8003e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	bfb8      	it	lt
 8003e70:	4613      	movlt	r3, r2
 8003e72:	6033      	str	r3, [r6, #0]
 8003e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e78:	4607      	mov	r7, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	b10a      	cbz	r2, 8003e82 <_printf_common+0x26>
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	0699      	lsls	r1, r3, #26
 8003e86:	bf42      	ittt	mi
 8003e88:	6833      	ldrmi	r3, [r6, #0]
 8003e8a:	3302      	addmi	r3, #2
 8003e8c:	6033      	strmi	r3, [r6, #0]
 8003e8e:	6825      	ldr	r5, [r4, #0]
 8003e90:	f015 0506 	ands.w	r5, r5, #6
 8003e94:	d106      	bne.n	8003ea4 <_printf_common+0x48>
 8003e96:	f104 0a19 	add.w	sl, r4, #25
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	6832      	ldr	r2, [r6, #0]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	42ab      	cmp	r3, r5
 8003ea2:	dc26      	bgt.n	8003ef2 <_printf_common+0x96>
 8003ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ea8:	1e13      	subs	r3, r2, #0
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	bf18      	it	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	0692      	lsls	r2, r2, #26
 8003eb2:	d42b      	bmi.n	8003f0c <_printf_common+0xb0>
 8003eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eb8:	4649      	mov	r1, r9
 8003eba:	4638      	mov	r0, r7
 8003ebc:	47c0      	blx	r8
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	d01e      	beq.n	8003f00 <_printf_common+0xa4>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	68e5      	ldr	r5, [r4, #12]
 8003ec6:	6832      	ldr	r2, [r6, #0]
 8003ec8:	f003 0306 	and.w	r3, r3, #6
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	bf08      	it	eq
 8003ed0:	1aad      	subeq	r5, r5, r2
 8003ed2:	68a3      	ldr	r3, [r4, #8]
 8003ed4:	6922      	ldr	r2, [r4, #16]
 8003ed6:	bf0c      	ite	eq
 8003ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003edc:	2500      	movne	r5, #0
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	bfc4      	itt	gt
 8003ee2:	1a9b      	subgt	r3, r3, r2
 8003ee4:	18ed      	addgt	r5, r5, r3
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	341a      	adds	r4, #26
 8003eea:	42b5      	cmp	r5, r6
 8003eec:	d11a      	bne.n	8003f24 <_printf_common+0xc8>
 8003eee:	2000      	movs	r0, #0
 8003ef0:	e008      	b.n	8003f04 <_printf_common+0xa8>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	4652      	mov	r2, sl
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	4638      	mov	r0, r7
 8003efa:	47c0      	blx	r8
 8003efc:	3001      	adds	r0, #1
 8003efe:	d103      	bne.n	8003f08 <_printf_common+0xac>
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f08:	3501      	adds	r5, #1
 8003f0a:	e7c6      	b.n	8003e9a <_printf_common+0x3e>
 8003f0c:	18e1      	adds	r1, r4, r3
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	2030      	movs	r0, #48	; 0x30
 8003f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f16:	4422      	add	r2, r4
 8003f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f20:	3302      	adds	r3, #2
 8003f22:	e7c7      	b.n	8003eb4 <_printf_common+0x58>
 8003f24:	2301      	movs	r3, #1
 8003f26:	4622      	mov	r2, r4
 8003f28:	4649      	mov	r1, r9
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	47c0      	blx	r8
 8003f2e:	3001      	adds	r0, #1
 8003f30:	d0e6      	beq.n	8003f00 <_printf_common+0xa4>
 8003f32:	3601      	adds	r6, #1
 8003f34:	e7d9      	b.n	8003eea <_printf_common+0x8e>
	...

08003f38 <_printf_i>:
 8003f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	7e0f      	ldrb	r7, [r1, #24]
 8003f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f40:	2f78      	cmp	r7, #120	; 0x78
 8003f42:	4691      	mov	r9, r2
 8003f44:	4680      	mov	r8, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	469a      	mov	sl, r3
 8003f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f4e:	d807      	bhi.n	8003f60 <_printf_i+0x28>
 8003f50:	2f62      	cmp	r7, #98	; 0x62
 8003f52:	d80a      	bhi.n	8003f6a <_printf_i+0x32>
 8003f54:	2f00      	cmp	r7, #0
 8003f56:	f000 80d8 	beq.w	800410a <_printf_i+0x1d2>
 8003f5a:	2f58      	cmp	r7, #88	; 0x58
 8003f5c:	f000 80a3 	beq.w	80040a6 <_printf_i+0x16e>
 8003f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f68:	e03a      	b.n	8003fe0 <_printf_i+0xa8>
 8003f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f6e:	2b15      	cmp	r3, #21
 8003f70:	d8f6      	bhi.n	8003f60 <_printf_i+0x28>
 8003f72:	a101      	add	r1, pc, #4	; (adr r1, 8003f78 <_printf_i+0x40>)
 8003f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f78:	08003fd1 	.word	0x08003fd1
 8003f7c:	08003fe5 	.word	0x08003fe5
 8003f80:	08003f61 	.word	0x08003f61
 8003f84:	08003f61 	.word	0x08003f61
 8003f88:	08003f61 	.word	0x08003f61
 8003f8c:	08003f61 	.word	0x08003f61
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003f61 	.word	0x08003f61
 8003f98:	08003f61 	.word	0x08003f61
 8003f9c:	08003f61 	.word	0x08003f61
 8003fa0:	08003f61 	.word	0x08003f61
 8003fa4:	080040f1 	.word	0x080040f1
 8003fa8:	08004015 	.word	0x08004015
 8003fac:	080040d3 	.word	0x080040d3
 8003fb0:	08003f61 	.word	0x08003f61
 8003fb4:	08003f61 	.word	0x08003f61
 8003fb8:	08004113 	.word	0x08004113
 8003fbc:	08003f61 	.word	0x08003f61
 8003fc0:	08004015 	.word	0x08004015
 8003fc4:	08003f61 	.word	0x08003f61
 8003fc8:	08003f61 	.word	0x08003f61
 8003fcc:	080040db 	.word	0x080040db
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	1d1a      	adds	r2, r3, #4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	602a      	str	r2, [r5, #0]
 8003fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0a3      	b.n	800412c <_printf_i+0x1f4>
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	6829      	ldr	r1, [r5, #0]
 8003fe8:	0606      	lsls	r6, r0, #24
 8003fea:	f101 0304 	add.w	r3, r1, #4
 8003fee:	d50a      	bpl.n	8004006 <_printf_i+0xce>
 8003ff0:	680e      	ldr	r6, [r1, #0]
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	2e00      	cmp	r6, #0
 8003ff6:	da03      	bge.n	8004000 <_printf_i+0xc8>
 8003ff8:	232d      	movs	r3, #45	; 0x2d
 8003ffa:	4276      	negs	r6, r6
 8003ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004000:	485e      	ldr	r0, [pc, #376]	; (800417c <_printf_i+0x244>)
 8004002:	230a      	movs	r3, #10
 8004004:	e019      	b.n	800403a <_printf_i+0x102>
 8004006:	680e      	ldr	r6, [r1, #0]
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800400e:	bf18      	it	ne
 8004010:	b236      	sxthne	r6, r6
 8004012:	e7ef      	b.n	8003ff4 <_printf_i+0xbc>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	1d19      	adds	r1, r3, #4
 800401a:	6029      	str	r1, [r5, #0]
 800401c:	0601      	lsls	r1, r0, #24
 800401e:	d501      	bpl.n	8004024 <_printf_i+0xec>
 8004020:	681e      	ldr	r6, [r3, #0]
 8004022:	e002      	b.n	800402a <_printf_i+0xf2>
 8004024:	0646      	lsls	r6, r0, #25
 8004026:	d5fb      	bpl.n	8004020 <_printf_i+0xe8>
 8004028:	881e      	ldrh	r6, [r3, #0]
 800402a:	4854      	ldr	r0, [pc, #336]	; (800417c <_printf_i+0x244>)
 800402c:	2f6f      	cmp	r7, #111	; 0x6f
 800402e:	bf0c      	ite	eq
 8004030:	2308      	moveq	r3, #8
 8004032:	230a      	movne	r3, #10
 8004034:	2100      	movs	r1, #0
 8004036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800403a:	6865      	ldr	r5, [r4, #4]
 800403c:	60a5      	str	r5, [r4, #8]
 800403e:	2d00      	cmp	r5, #0
 8004040:	bfa2      	ittt	ge
 8004042:	6821      	ldrge	r1, [r4, #0]
 8004044:	f021 0104 	bicge.w	r1, r1, #4
 8004048:	6021      	strge	r1, [r4, #0]
 800404a:	b90e      	cbnz	r6, 8004050 <_printf_i+0x118>
 800404c:	2d00      	cmp	r5, #0
 800404e:	d04d      	beq.n	80040ec <_printf_i+0x1b4>
 8004050:	4615      	mov	r5, r2
 8004052:	fbb6 f1f3 	udiv	r1, r6, r3
 8004056:	fb03 6711 	mls	r7, r3, r1, r6
 800405a:	5dc7      	ldrb	r7, [r0, r7]
 800405c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004060:	4637      	mov	r7, r6
 8004062:	42bb      	cmp	r3, r7
 8004064:	460e      	mov	r6, r1
 8004066:	d9f4      	bls.n	8004052 <_printf_i+0x11a>
 8004068:	2b08      	cmp	r3, #8
 800406a:	d10b      	bne.n	8004084 <_printf_i+0x14c>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	07de      	lsls	r6, r3, #31
 8004070:	d508      	bpl.n	8004084 <_printf_i+0x14c>
 8004072:	6923      	ldr	r3, [r4, #16]
 8004074:	6861      	ldr	r1, [r4, #4]
 8004076:	4299      	cmp	r1, r3
 8004078:	bfde      	ittt	le
 800407a:	2330      	movle	r3, #48	; 0x30
 800407c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004080:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004084:	1b52      	subs	r2, r2, r5
 8004086:	6122      	str	r2, [r4, #16]
 8004088:	f8cd a000 	str.w	sl, [sp]
 800408c:	464b      	mov	r3, r9
 800408e:	aa03      	add	r2, sp, #12
 8004090:	4621      	mov	r1, r4
 8004092:	4640      	mov	r0, r8
 8004094:	f7ff fee2 	bl	8003e5c <_printf_common>
 8004098:	3001      	adds	r0, #1
 800409a:	d14c      	bne.n	8004136 <_printf_i+0x1fe>
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a0:	b004      	add	sp, #16
 80040a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a6:	4835      	ldr	r0, [pc, #212]	; (800417c <_printf_i+0x244>)
 80040a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040ac:	6829      	ldr	r1, [r5, #0]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80040b4:	6029      	str	r1, [r5, #0]
 80040b6:	061d      	lsls	r5, r3, #24
 80040b8:	d514      	bpl.n	80040e4 <_printf_i+0x1ac>
 80040ba:	07df      	lsls	r7, r3, #31
 80040bc:	bf44      	itt	mi
 80040be:	f043 0320 	orrmi.w	r3, r3, #32
 80040c2:	6023      	strmi	r3, [r4, #0]
 80040c4:	b91e      	cbnz	r6, 80040ce <_printf_i+0x196>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f023 0320 	bic.w	r3, r3, #32
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	2310      	movs	r3, #16
 80040d0:	e7b0      	b.n	8004034 <_printf_i+0xfc>
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	f043 0320 	orr.w	r3, r3, #32
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	2378      	movs	r3, #120	; 0x78
 80040dc:	4828      	ldr	r0, [pc, #160]	; (8004180 <_printf_i+0x248>)
 80040de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040e2:	e7e3      	b.n	80040ac <_printf_i+0x174>
 80040e4:	0659      	lsls	r1, r3, #25
 80040e6:	bf48      	it	mi
 80040e8:	b2b6      	uxthmi	r6, r6
 80040ea:	e7e6      	b.n	80040ba <_printf_i+0x182>
 80040ec:	4615      	mov	r5, r2
 80040ee:	e7bb      	b.n	8004068 <_printf_i+0x130>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	6826      	ldr	r6, [r4, #0]
 80040f4:	6961      	ldr	r1, [r4, #20]
 80040f6:	1d18      	adds	r0, r3, #4
 80040f8:	6028      	str	r0, [r5, #0]
 80040fa:	0635      	lsls	r5, r6, #24
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	d501      	bpl.n	8004104 <_printf_i+0x1cc>
 8004100:	6019      	str	r1, [r3, #0]
 8004102:	e002      	b.n	800410a <_printf_i+0x1d2>
 8004104:	0670      	lsls	r0, r6, #25
 8004106:	d5fb      	bpl.n	8004100 <_printf_i+0x1c8>
 8004108:	8019      	strh	r1, [r3, #0]
 800410a:	2300      	movs	r3, #0
 800410c:	6123      	str	r3, [r4, #16]
 800410e:	4615      	mov	r5, r2
 8004110:	e7ba      	b.n	8004088 <_printf_i+0x150>
 8004112:	682b      	ldr	r3, [r5, #0]
 8004114:	1d1a      	adds	r2, r3, #4
 8004116:	602a      	str	r2, [r5, #0]
 8004118:	681d      	ldr	r5, [r3, #0]
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	2100      	movs	r1, #0
 800411e:	4628      	mov	r0, r5
 8004120:	f7fc f88e 	bl	8000240 <memchr>
 8004124:	b108      	cbz	r0, 800412a <_printf_i+0x1f2>
 8004126:	1b40      	subs	r0, r0, r5
 8004128:	6060      	str	r0, [r4, #4]
 800412a:	6863      	ldr	r3, [r4, #4]
 800412c:	6123      	str	r3, [r4, #16]
 800412e:	2300      	movs	r3, #0
 8004130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004134:	e7a8      	b.n	8004088 <_printf_i+0x150>
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	462a      	mov	r2, r5
 800413a:	4649      	mov	r1, r9
 800413c:	4640      	mov	r0, r8
 800413e:	47d0      	blx	sl
 8004140:	3001      	adds	r0, #1
 8004142:	d0ab      	beq.n	800409c <_printf_i+0x164>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	079b      	lsls	r3, r3, #30
 8004148:	d413      	bmi.n	8004172 <_printf_i+0x23a>
 800414a:	68e0      	ldr	r0, [r4, #12]
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	4298      	cmp	r0, r3
 8004150:	bfb8      	it	lt
 8004152:	4618      	movlt	r0, r3
 8004154:	e7a4      	b.n	80040a0 <_printf_i+0x168>
 8004156:	2301      	movs	r3, #1
 8004158:	4632      	mov	r2, r6
 800415a:	4649      	mov	r1, r9
 800415c:	4640      	mov	r0, r8
 800415e:	47d0      	blx	sl
 8004160:	3001      	adds	r0, #1
 8004162:	d09b      	beq.n	800409c <_printf_i+0x164>
 8004164:	3501      	adds	r5, #1
 8004166:	68e3      	ldr	r3, [r4, #12]
 8004168:	9903      	ldr	r1, [sp, #12]
 800416a:	1a5b      	subs	r3, r3, r1
 800416c:	42ab      	cmp	r3, r5
 800416e:	dcf2      	bgt.n	8004156 <_printf_i+0x21e>
 8004170:	e7eb      	b.n	800414a <_printf_i+0x212>
 8004172:	2500      	movs	r5, #0
 8004174:	f104 0619 	add.w	r6, r4, #25
 8004178:	e7f5      	b.n	8004166 <_printf_i+0x22e>
 800417a:	bf00      	nop
 800417c:	080044a1 	.word	0x080044a1
 8004180:	080044b2 	.word	0x080044b2

08004184 <memcpy>:
 8004184:	440a      	add	r2, r1
 8004186:	4291      	cmp	r1, r2
 8004188:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800418c:	d100      	bne.n	8004190 <memcpy+0xc>
 800418e:	4770      	bx	lr
 8004190:	b510      	push	{r4, lr}
 8004192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800419a:	4291      	cmp	r1, r2
 800419c:	d1f9      	bne.n	8004192 <memcpy+0xe>
 800419e:	bd10      	pop	{r4, pc}

080041a0 <memmove>:
 80041a0:	4288      	cmp	r0, r1
 80041a2:	b510      	push	{r4, lr}
 80041a4:	eb01 0402 	add.w	r4, r1, r2
 80041a8:	d902      	bls.n	80041b0 <memmove+0x10>
 80041aa:	4284      	cmp	r4, r0
 80041ac:	4623      	mov	r3, r4
 80041ae:	d807      	bhi.n	80041c0 <memmove+0x20>
 80041b0:	1e43      	subs	r3, r0, #1
 80041b2:	42a1      	cmp	r1, r4
 80041b4:	d008      	beq.n	80041c8 <memmove+0x28>
 80041b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041be:	e7f8      	b.n	80041b2 <memmove+0x12>
 80041c0:	4402      	add	r2, r0
 80041c2:	4601      	mov	r1, r0
 80041c4:	428a      	cmp	r2, r1
 80041c6:	d100      	bne.n	80041ca <memmove+0x2a>
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041d2:	e7f7      	b.n	80041c4 <memmove+0x24>

080041d4 <_free_r>:
 80041d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041d6:	2900      	cmp	r1, #0
 80041d8:	d044      	beq.n	8004264 <_free_r+0x90>
 80041da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041de:	9001      	str	r0, [sp, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f1a1 0404 	sub.w	r4, r1, #4
 80041e6:	bfb8      	it	lt
 80041e8:	18e4      	addlt	r4, r4, r3
 80041ea:	f000 f913 	bl	8004414 <__malloc_lock>
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <_free_r+0x94>)
 80041f0:	9801      	ldr	r0, [sp, #4]
 80041f2:	6813      	ldr	r3, [r2, #0]
 80041f4:	b933      	cbnz	r3, 8004204 <_free_r+0x30>
 80041f6:	6063      	str	r3, [r4, #4]
 80041f8:	6014      	str	r4, [r2, #0]
 80041fa:	b003      	add	sp, #12
 80041fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004200:	f000 b90e 	b.w	8004420 <__malloc_unlock>
 8004204:	42a3      	cmp	r3, r4
 8004206:	d908      	bls.n	800421a <_free_r+0x46>
 8004208:	6825      	ldr	r5, [r4, #0]
 800420a:	1961      	adds	r1, r4, r5
 800420c:	428b      	cmp	r3, r1
 800420e:	bf01      	itttt	eq
 8004210:	6819      	ldreq	r1, [r3, #0]
 8004212:	685b      	ldreq	r3, [r3, #4]
 8004214:	1949      	addeq	r1, r1, r5
 8004216:	6021      	streq	r1, [r4, #0]
 8004218:	e7ed      	b.n	80041f6 <_free_r+0x22>
 800421a:	461a      	mov	r2, r3
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	b10b      	cbz	r3, 8004224 <_free_r+0x50>
 8004220:	42a3      	cmp	r3, r4
 8004222:	d9fa      	bls.n	800421a <_free_r+0x46>
 8004224:	6811      	ldr	r1, [r2, #0]
 8004226:	1855      	adds	r5, r2, r1
 8004228:	42a5      	cmp	r5, r4
 800422a:	d10b      	bne.n	8004244 <_free_r+0x70>
 800422c:	6824      	ldr	r4, [r4, #0]
 800422e:	4421      	add	r1, r4
 8004230:	1854      	adds	r4, r2, r1
 8004232:	42a3      	cmp	r3, r4
 8004234:	6011      	str	r1, [r2, #0]
 8004236:	d1e0      	bne.n	80041fa <_free_r+0x26>
 8004238:	681c      	ldr	r4, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	6053      	str	r3, [r2, #4]
 800423e:	4421      	add	r1, r4
 8004240:	6011      	str	r1, [r2, #0]
 8004242:	e7da      	b.n	80041fa <_free_r+0x26>
 8004244:	d902      	bls.n	800424c <_free_r+0x78>
 8004246:	230c      	movs	r3, #12
 8004248:	6003      	str	r3, [r0, #0]
 800424a:	e7d6      	b.n	80041fa <_free_r+0x26>
 800424c:	6825      	ldr	r5, [r4, #0]
 800424e:	1961      	adds	r1, r4, r5
 8004250:	428b      	cmp	r3, r1
 8004252:	bf04      	itt	eq
 8004254:	6819      	ldreq	r1, [r3, #0]
 8004256:	685b      	ldreq	r3, [r3, #4]
 8004258:	6063      	str	r3, [r4, #4]
 800425a:	bf04      	itt	eq
 800425c:	1949      	addeq	r1, r1, r5
 800425e:	6021      	streq	r1, [r4, #0]
 8004260:	6054      	str	r4, [r2, #4]
 8004262:	e7ca      	b.n	80041fa <_free_r+0x26>
 8004264:	b003      	add	sp, #12
 8004266:	bd30      	pop	{r4, r5, pc}
 8004268:	20000188 	.word	0x20000188

0800426c <sbrk_aligned>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4e0e      	ldr	r6, [pc, #56]	; (80042a8 <sbrk_aligned+0x3c>)
 8004270:	460c      	mov	r4, r1
 8004272:	6831      	ldr	r1, [r6, #0]
 8004274:	4605      	mov	r5, r0
 8004276:	b911      	cbnz	r1, 800427e <sbrk_aligned+0x12>
 8004278:	f000 f8bc 	bl	80043f4 <_sbrk_r>
 800427c:	6030      	str	r0, [r6, #0]
 800427e:	4621      	mov	r1, r4
 8004280:	4628      	mov	r0, r5
 8004282:	f000 f8b7 	bl	80043f4 <_sbrk_r>
 8004286:	1c43      	adds	r3, r0, #1
 8004288:	d00a      	beq.n	80042a0 <sbrk_aligned+0x34>
 800428a:	1cc4      	adds	r4, r0, #3
 800428c:	f024 0403 	bic.w	r4, r4, #3
 8004290:	42a0      	cmp	r0, r4
 8004292:	d007      	beq.n	80042a4 <sbrk_aligned+0x38>
 8004294:	1a21      	subs	r1, r4, r0
 8004296:	4628      	mov	r0, r5
 8004298:	f000 f8ac 	bl	80043f4 <_sbrk_r>
 800429c:	3001      	adds	r0, #1
 800429e:	d101      	bne.n	80042a4 <sbrk_aligned+0x38>
 80042a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80042a4:	4620      	mov	r0, r4
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	2000018c 	.word	0x2000018c

080042ac <_malloc_r>:
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b0:	1ccd      	adds	r5, r1, #3
 80042b2:	f025 0503 	bic.w	r5, r5, #3
 80042b6:	3508      	adds	r5, #8
 80042b8:	2d0c      	cmp	r5, #12
 80042ba:	bf38      	it	cc
 80042bc:	250c      	movcc	r5, #12
 80042be:	2d00      	cmp	r5, #0
 80042c0:	4607      	mov	r7, r0
 80042c2:	db01      	blt.n	80042c8 <_malloc_r+0x1c>
 80042c4:	42a9      	cmp	r1, r5
 80042c6:	d905      	bls.n	80042d4 <_malloc_r+0x28>
 80042c8:	230c      	movs	r3, #12
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	2600      	movs	r6, #0
 80042ce:	4630      	mov	r0, r6
 80042d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d4:	4e2e      	ldr	r6, [pc, #184]	; (8004390 <_malloc_r+0xe4>)
 80042d6:	f000 f89d 	bl	8004414 <__malloc_lock>
 80042da:	6833      	ldr	r3, [r6, #0]
 80042dc:	461c      	mov	r4, r3
 80042de:	bb34      	cbnz	r4, 800432e <_malloc_r+0x82>
 80042e0:	4629      	mov	r1, r5
 80042e2:	4638      	mov	r0, r7
 80042e4:	f7ff ffc2 	bl	800426c <sbrk_aligned>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	4604      	mov	r4, r0
 80042ec:	d14d      	bne.n	800438a <_malloc_r+0xde>
 80042ee:	6834      	ldr	r4, [r6, #0]
 80042f0:	4626      	mov	r6, r4
 80042f2:	2e00      	cmp	r6, #0
 80042f4:	d140      	bne.n	8004378 <_malloc_r+0xcc>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	4631      	mov	r1, r6
 80042fa:	4638      	mov	r0, r7
 80042fc:	eb04 0803 	add.w	r8, r4, r3
 8004300:	f000 f878 	bl	80043f4 <_sbrk_r>
 8004304:	4580      	cmp	r8, r0
 8004306:	d13a      	bne.n	800437e <_malloc_r+0xd2>
 8004308:	6821      	ldr	r1, [r4, #0]
 800430a:	3503      	adds	r5, #3
 800430c:	1a6d      	subs	r5, r5, r1
 800430e:	f025 0503 	bic.w	r5, r5, #3
 8004312:	3508      	adds	r5, #8
 8004314:	2d0c      	cmp	r5, #12
 8004316:	bf38      	it	cc
 8004318:	250c      	movcc	r5, #12
 800431a:	4629      	mov	r1, r5
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff ffa5 	bl	800426c <sbrk_aligned>
 8004322:	3001      	adds	r0, #1
 8004324:	d02b      	beq.n	800437e <_malloc_r+0xd2>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	442b      	add	r3, r5
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	e00e      	b.n	800434c <_malloc_r+0xa0>
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	1b52      	subs	r2, r2, r5
 8004332:	d41e      	bmi.n	8004372 <_malloc_r+0xc6>
 8004334:	2a0b      	cmp	r2, #11
 8004336:	d916      	bls.n	8004366 <_malloc_r+0xba>
 8004338:	1961      	adds	r1, r4, r5
 800433a:	42a3      	cmp	r3, r4
 800433c:	6025      	str	r5, [r4, #0]
 800433e:	bf18      	it	ne
 8004340:	6059      	strne	r1, [r3, #4]
 8004342:	6863      	ldr	r3, [r4, #4]
 8004344:	bf08      	it	eq
 8004346:	6031      	streq	r1, [r6, #0]
 8004348:	5162      	str	r2, [r4, r5]
 800434a:	604b      	str	r3, [r1, #4]
 800434c:	4638      	mov	r0, r7
 800434e:	f104 060b 	add.w	r6, r4, #11
 8004352:	f000 f865 	bl	8004420 <__malloc_unlock>
 8004356:	f026 0607 	bic.w	r6, r6, #7
 800435a:	1d23      	adds	r3, r4, #4
 800435c:	1af2      	subs	r2, r6, r3
 800435e:	d0b6      	beq.n	80042ce <_malloc_r+0x22>
 8004360:	1b9b      	subs	r3, r3, r6
 8004362:	50a3      	str	r3, [r4, r2]
 8004364:	e7b3      	b.n	80042ce <_malloc_r+0x22>
 8004366:	6862      	ldr	r2, [r4, #4]
 8004368:	42a3      	cmp	r3, r4
 800436a:	bf0c      	ite	eq
 800436c:	6032      	streq	r2, [r6, #0]
 800436e:	605a      	strne	r2, [r3, #4]
 8004370:	e7ec      	b.n	800434c <_malloc_r+0xa0>
 8004372:	4623      	mov	r3, r4
 8004374:	6864      	ldr	r4, [r4, #4]
 8004376:	e7b2      	b.n	80042de <_malloc_r+0x32>
 8004378:	4634      	mov	r4, r6
 800437a:	6876      	ldr	r6, [r6, #4]
 800437c:	e7b9      	b.n	80042f2 <_malloc_r+0x46>
 800437e:	230c      	movs	r3, #12
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4638      	mov	r0, r7
 8004384:	f000 f84c 	bl	8004420 <__malloc_unlock>
 8004388:	e7a1      	b.n	80042ce <_malloc_r+0x22>
 800438a:	6025      	str	r5, [r4, #0]
 800438c:	e7de      	b.n	800434c <_malloc_r+0xa0>
 800438e:	bf00      	nop
 8004390:	20000188 	.word	0x20000188

08004394 <_realloc_r>:
 8004394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004398:	4680      	mov	r8, r0
 800439a:	4614      	mov	r4, r2
 800439c:	460e      	mov	r6, r1
 800439e:	b921      	cbnz	r1, 80043aa <_realloc_r+0x16>
 80043a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a4:	4611      	mov	r1, r2
 80043a6:	f7ff bf81 	b.w	80042ac <_malloc_r>
 80043aa:	b92a      	cbnz	r2, 80043b8 <_realloc_r+0x24>
 80043ac:	f7ff ff12 	bl	80041d4 <_free_r>
 80043b0:	4625      	mov	r5, r4
 80043b2:	4628      	mov	r0, r5
 80043b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b8:	f000 f838 	bl	800442c <_malloc_usable_size_r>
 80043bc:	4284      	cmp	r4, r0
 80043be:	4607      	mov	r7, r0
 80043c0:	d802      	bhi.n	80043c8 <_realloc_r+0x34>
 80043c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043c6:	d812      	bhi.n	80043ee <_realloc_r+0x5a>
 80043c8:	4621      	mov	r1, r4
 80043ca:	4640      	mov	r0, r8
 80043cc:	f7ff ff6e 	bl	80042ac <_malloc_r>
 80043d0:	4605      	mov	r5, r0
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d0ed      	beq.n	80043b2 <_realloc_r+0x1e>
 80043d6:	42bc      	cmp	r4, r7
 80043d8:	4622      	mov	r2, r4
 80043da:	4631      	mov	r1, r6
 80043dc:	bf28      	it	cs
 80043de:	463a      	movcs	r2, r7
 80043e0:	f7ff fed0 	bl	8004184 <memcpy>
 80043e4:	4631      	mov	r1, r6
 80043e6:	4640      	mov	r0, r8
 80043e8:	f7ff fef4 	bl	80041d4 <_free_r>
 80043ec:	e7e1      	b.n	80043b2 <_realloc_r+0x1e>
 80043ee:	4635      	mov	r5, r6
 80043f0:	e7df      	b.n	80043b2 <_realloc_r+0x1e>
	...

080043f4 <_sbrk_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4d06      	ldr	r5, [pc, #24]	; (8004410 <_sbrk_r+0x1c>)
 80043f8:	2300      	movs	r3, #0
 80043fa:	4604      	mov	r4, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	602b      	str	r3, [r5, #0]
 8004400:	f7fc fc7c 	bl	8000cfc <_sbrk>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_sbrk_r+0x1a>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	b103      	cbz	r3, 800440e <_sbrk_r+0x1a>
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	20000190 	.word	0x20000190

08004414 <__malloc_lock>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__malloc_lock+0x8>)
 8004416:	f000 b811 	b.w	800443c <__retarget_lock_acquire_recursive>
 800441a:	bf00      	nop
 800441c:	20000194 	.word	0x20000194

08004420 <__malloc_unlock>:
 8004420:	4801      	ldr	r0, [pc, #4]	; (8004428 <__malloc_unlock+0x8>)
 8004422:	f000 b80c 	b.w	800443e <__retarget_lock_release_recursive>
 8004426:	bf00      	nop
 8004428:	20000194 	.word	0x20000194

0800442c <_malloc_usable_size_r>:
 800442c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004430:	1f18      	subs	r0, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	bfbc      	itt	lt
 8004436:	580b      	ldrlt	r3, [r1, r0]
 8004438:	18c0      	addlt	r0, r0, r3
 800443a:	4770      	bx	lr

0800443c <__retarget_lock_acquire_recursive>:
 800443c:	4770      	bx	lr

0800443e <__retarget_lock_release_recursive>:
 800443e:	4770      	bx	lr

08004440 <_init>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr

0800444c <_fini>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr
