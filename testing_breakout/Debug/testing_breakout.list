
testing_breakout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009568  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08009768  08009768  00019768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c6c  08009c6c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c74  08009c74  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c74  08009c74  00019c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200001e0  08009e5c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08009e5c  00020448  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b61  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002364  00000000  00000000  00033d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000360d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029044  00000000  00000000  00038100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014162  00000000  00000000  00061144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe3cf  00000000  00000000  000752a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a44  00000000  00000000  001736c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08009750 	.word	0x08009750

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08009750 	.word	0x08009750

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <init_MPU_6050>:

	return i2c_success;
}

void init_MPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	/* create a parameter that determines the size of each array */
	uint8_t i2cTxBuffer[6] = {0};
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	2300      	movs	r3, #0
 80009ec:	82bb      	strh	r3, [r7, #20]
	uint8_t i2cRxBuffer[6] = {0};
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	2300      	movs	r3, #0
 80009f4:	81bb      	strh	r3, [r7, #12]

	my_mpu_6050->i2c_handle = i2c;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	601a      	str	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff = i2cTxBuffer;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f107 0210 	add.w	r2, r7, #16
 8000a02:	605a      	str	r2, [r3, #4]
	my_mpu_6050->i2c_rx_buff = i2cRxBuffer;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f107 0208 	add.w	r2, r7, #8
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <accel_Gyro_Config>:

/* Create another parameter that will allow user to
 * configure the full scale range of the accelerometer
 */
uint8_t accel_Gyro_Config(mpu_6050_t *my_mpu_6050)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t configSuccess = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
	uint8_t dlpfSet = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]

	/* Selecting the 8g full range scale for the accelerometer
	 * by writing AFS_SEL_8 to ACCEL_CONFIG register
	 */
	my_mpu_6050->i2c_tx_buff[0] = ACCEL_CONFIG;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	221c      	movs	r2, #28
 8000a2e:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = AFS_SEL_8;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	2210      	movs	r2, #16
 8000a38:	701a      	strb	r2, [r3, #0]

	/* Selecting the 250 degree/seconds full range scale for the gyro
	 * by writing FS_SEL_250 to GYRO_CONFIG register
	 */

	my_mpu_6050->i2c_tx_buff[2] = GYRO_CONFIG;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	221b      	movs	r2, #27
 8000a42:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[3] = FS_SEL_250;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	3303      	adds	r3, #3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]


	configSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 4, 100);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	21d0      	movs	r1, #208	; 0xd0
 8000a5e:	f001 fb41 	bl	80020e4 <HAL_I2C_Master_Transmit>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]

/* Enabling the digital low pass filter */

	my_mpu_6050->i2c_tx_buff[0] = CONFIG;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	221a      	movs	r2, #26
 8000a6c:	701a      	strb	r2, [r3, #0]
	my_mpu_6050->i2c_tx_buff[1] = (0x05U);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	2205      	movs	r2, #5
 8000a76:	701a      	strb	r2, [r3, #0]

	dlpfSet = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	21d0      	movs	r1, #208	; 0xd0
 8000a88:	f001 fb2c 	bl	80020e4 <HAL_I2C_Master_Transmit>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73bb      	strb	r3, [r7, #14]

return configSuccess;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <get_Accel>:

	return enableSuccess;
}

uint8_t get_Accel(mpu_6050_t *my_mpu_6050)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af02      	add	r7, sp, #8
 8000aa0:	6078      	str	r0, [r7, #4]
	/* flags that check if communication between i2c master and slave was successful */
	uint8_t i2c_Tx_flag = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = ACCEL_XOUT_H;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	223b      	movs	r2, #59	; 0x3b
 8000ab4:	701a      	strb	r2, [r3, #0]

	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 1000);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	21d0      	movs	r1, #208	; 0xd0
 8000ac8:	f001 fb0c 	bl	80020e4 <HAL_I2C_Master_Transmit>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73bb      	strb	r3, [r7, #14]


	/* Retrieve the acceleration values from 6 registers
	 * ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ACCEL_YOUT_L, ACCEL_ZOUT_H, ACCEL_ZOUT_L respectively
	 */
	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 1000);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2306      	movs	r3, #6
 8000ae0:	21d1      	movs	r1, #209	; 0xd1
 8000ae2:	f001 fbf3 	bl	80022cc <HAL_I2C_Master_Receive>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d104      	bne.n	8000afa <get_Accel+0x60>
 8000af0:	7b7b      	ldrb	r3, [r7, #13]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <get_Accel+0x60>
		i2c_success = HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]

	/* You are also supposed to check A0 Pin on MPU_6050 */

	return i2c_success;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	0000      	movs	r0, r0
	...

08000b08 <formatAccel>:

void formatAccel(mpu_6050_t *my_mpu_6050)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	my_mpu_6050->accelX = (int16_t)((my_mpu_6050->i2c_rx_buff[0] << 8) | my_mpu_6050->i2c_rx_buff[1]);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	819a      	strh	r2, [r3, #12]
	my_mpu_6050->aX =  ((float)(my_mpu_6050->accelX))/4096;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b3a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000bf0 <formatAccel+0xe8>
 8000b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Calibration value for acceleration in the x direction */
	//my_mpu_6050->aX-= 0.089;

	my_mpu_6050->accelY = (int16_t)((my_mpu_6050->i2c_rx_buff[2] << 8) | my_mpu_6050->i2c_rx_buff[3]);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	3303      	adds	r3, #3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	81da      	strh	r2, [r3, #14]
	my_mpu_6050->aY =  ((float)my_mpu_6050->accelY)/4096;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b74:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000bf0 <formatAccel+0xe8>
 8000b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Calibration value for acceleration in the y direction */
	//my_mpu_6050->aY += 1.05;

	my_mpu_6050->accelZ = (int16_t)((my_mpu_6050->i2c_rx_buff[4] << 8) | my_mpu_6050->i2c_rx_buff[5]);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	3304      	adds	r3, #4
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	3305      	adds	r3, #5
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	821a      	strh	r2, [r3, #16]
	my_mpu_6050->aZ =  ((float)my_mpu_6050->accelZ)/4096;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bae:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000bf0 <formatAccel+0xe8>
 8000bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Calibration value for acceleration in the z direction */
	my_mpu_6050->aZ += 0.1;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000be8 <formatAccel+0xe0>
 8000bca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	f3af 8000 	nop.w
 8000be8:	9999999a 	.word	0x9999999a
 8000bec:	3fb99999 	.word	0x3fb99999
 8000bf0:	45800000 	.word	0x45800000

08000bf4 <Tx_Accel>:

	return uart_tx_success;
}

void Tx_Accel(mpu_6050_t *my_mpu_6050, UART_HandleTypeDef *uartHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0a0      	sub	sp, #128	; 0x80
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	uint8_t uart_buff[100];
	uint8_t uart_len = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	uart_len = sprintf((char *)uart_buff, "aX: %.2f , aY: %.2f, aZ: %.2f\r\n", my_mpu_6050->aX, my_mpu_6050->aY, my_mpu_6050->aZ);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	edd3 6a07 	vldr	s13, [r3, #28]
 8000c1e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c22:	f107 0008 	add.w	r0, r7, #8
 8000c26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c2a:	ed8d 7b00 	vstr	d7, [sp]
 8000c2e:	ec53 2b15 	vmov	r2, r3, d5
 8000c32:	490b      	ldr	r1, [pc, #44]	; (8000c60 <Tx_Accel+0x6c>)
 8000c34:	f005 f872 	bl	8005d1c <siprintf>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	HAL_UART_Transmit(uartHandle, uart_buff, uart_len, 100);
 8000c3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f107 0108 	add.w	r1, r7, #8
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f003 fd48 	bl	80046e0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c54:	f000 fea0 	bl	8001998 <HAL_Delay>
}
 8000c58:	bf00      	nop
 8000c5a:	3770      	adds	r7, #112	; 0x70
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08009770 	.word	0x08009770

08000c64 <set_Sample_Rt>:

}


uint8_t set_Sample_Rt(mpu_6050_t *my_mpu_6050)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	6078      	str	r0, [r7, #4]
	uint8_t sampleSuccess = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = SMPRT_DIV;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2219      	movs	r2, #25
 8000c76:	701a      	strb	r2, [r3, #0]

	/* Divider == 8 therefore sampleRate of accelerometer and gryo = 8kHz/8 == 1kHz */
	my_mpu_6050->i2c_tx_buff[1] = 0x08U;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	2208      	movs	r2, #8
 8000c80:	701a      	strb	r2, [r3, #0]

	sampleSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2302      	movs	r3, #2
 8000c90:	21d0      	movs	r1, #208	; 0xd0
 8000c92:	f001 fa27 	bl	80020e4 <HAL_I2C_Master_Transmit>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]

	return sampleSuccess;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <wake>:

uint8_t wake(mpu_6050_t *my_mpu_6050)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
	uint8_t wakeSuccess = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = PWR_MGMT_1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	226b      	movs	r2, #107	; 0x6b
 8000cb6:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = 0x00U;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]

	wakeSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2302      	movs	r3, #2
 8000cd0:	21d0      	movs	r1, #208	; 0xd0
 8000cd2:	f001 fa07 	bl	80020e4 <HAL_I2C_Master_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]

	return wakeSuccess;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d109      	bne.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	480f      	ldr	r0, [pc, #60]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cf8:	f001 f949 	bl	8001f8e <HAL_GPIO_TogglePin>

		getAccel = NOT_FETCH_DATA;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
		getGyro = NOT_FETCH_DATA;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	}

	if (htim == &htim3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d10a      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000d10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d16:	f001 f93a 	bl	8001f8e <HAL_GPIO_TogglePin>

		sendAccel = SEND_DATA;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
		sendGyro = SEND_DATA;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
	}
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000029c 	.word	0x2000029c
 8000d34:	40020800 	.word	0x40020800
 8000d38:	2000042e 	.word	0x2000042e
 8000d3c:	2000042f 	.word	0x2000042f
 8000d40:	20000250 	.word	0x20000250
 8000d44:	40020400 	.word	0x40020400
 8000d48:	2000042c 	.word	0x2000042c
 8000d4c:	2000042d 	.word	0x2000042d

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fdc3 	bl	80018de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f850 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f9ea 	bl	8001134 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d60:	f000 f8a8 	bl	8000eb4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000d64:	f000 f9b6 	bl	80010d4 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000d68:	f000 f984 	bl	8001074 <MX_UART4_Init>
  MX_TIM4_Init();
 8000d6c:	f000 f932 	bl	8000fd4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d70:	f000 f8e0 	bl	8000f34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  init_MPU_6050(&my_imu, &hi2c1);
 8000d74:	4919      	ldr	r1, [pc, #100]	; (8000ddc <main+0x8c>)
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <main+0x90>)
 8000d78:	f7ff fe30 	bl	80009dc <init_MPU_6050>

  wake(&my_imu);
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <main+0x90>)
 8000d7e:	f7ff ff91 	bl	8000ca4 <wake>

  set_Sample_Rt(&my_imu);
 8000d82:	4817      	ldr	r0, [pc, #92]	; (8000de0 <main+0x90>)
 8000d84:	f7ff ff6e 	bl	8000c64 <set_Sample_Rt>

  accel_Gyro_Config(&my_imu);
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <main+0x90>)
 8000d8a:	f7ff fe45 	bl	8000a18 <accel_Gyro_Config>
  //fifo_Enable(&my_imu);

  //INT_Config(&my_imu);

  /* Timer 4 triggers interrupt that collects data from the 6 axis sensor */
  HAL_TIM_Base_Start_IT(&htim4);
 8000d8e:	4815      	ldr	r0, [pc, #84]	; (8000de4 <main+0x94>)
 8000d90:	f002 ffe8 	bl	8003d64 <HAL_TIM_Base_Start_IT>

  /* Timer 3 triggers an interrupt that transmits the data via uart */
  HAL_TIM_Base_Start_IT(&htim3);
 8000d94:	4814      	ldr	r0, [pc, #80]	; (8000de8 <main+0x98>)
 8000d96:	f002 ffe5 	bl	8003d64 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (getAccel == FETCH_DATA)
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <main+0x9c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10d      	bne.n	8000dbe <main+0x6e>
	  {
		  if (get_Accel(&my_imu) != HAL_OK)
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <main+0x90>)
 8000da4:	f7ff fe79 	bl	8000a9a <get_Accel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <main+0x68>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2101      	movs	r1, #1
 8000db2:	480f      	ldr	r0, [pc, #60]	; (8000df0 <main+0xa0>)
 8000db4:	f001 f8d2 	bl	8001f5c <HAL_GPIO_WritePin>

		  getAccel = 0;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <main+0x9c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	  }

	  if (sendAccel == SEND_DATA)
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <main+0xa4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d1e9      	bne.n	8000d9a <main+0x4a>
	  {
		  formatAccel(&my_imu);
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <main+0x90>)
 8000dc8:	f7ff fe9e 	bl	8000b08 <formatAccel>

		  Tx_Accel(&my_imu, &huart3);
 8000dcc:	490a      	ldr	r1, [pc, #40]	; (8000df8 <main+0xa8>)
 8000dce:	4804      	ldr	r0, [pc, #16]	; (8000de0 <main+0x90>)
 8000dd0:	f7ff ff10 	bl	8000bf4 <Tx_Accel>

		  sendAccel = NOT_SEND_DATA;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <main+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
	  if (getAccel == FETCH_DATA)
 8000dda:	e7de      	b.n	8000d9a <main+0x4a>
 8000ddc:	200001fc 	.word	0x200001fc
 8000de0:	200003f8 	.word	0x200003f8
 8000de4:	2000029c 	.word	0x2000029c
 8000de8:	20000250 	.word	0x20000250
 8000dec:	2000042e 	.word	0x2000042e
 8000df0:	40020400 	.word	0x40020400
 8000df4:	2000042c 	.word	0x2000042c
 8000df8:	20000370 	.word	0x20000370

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2234      	movs	r2, #52	; 0x34
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 f930 	bl	8005070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <SystemClock_Config+0xb0>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a21      	ldr	r2, [pc, #132]	; (8000eac <SystemClock_Config+0xb0>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <SystemClock_Config+0xb0>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <SystemClock_Config+0xb4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <SystemClock_Config+0xb4>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <SystemClock_Config+0xb4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fe29 	bl	8002ac0 <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000e74:	f000 fa82 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 f8c1 	bl	800301c <HAL_RCC_ClockConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ea0:	f000 fa6c 	bl	800137c <Error_Handler>
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3750      	adds	r7, #80	; 0x50
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <MX_I2C1_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300208;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <MX_I2C1_Init+0x7c>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 208;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ec6:	22d0      	movs	r2, #208	; 0xd0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000ef0:	f001 f868 	bl	8001fc4 <HAL_I2C_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efa:	f000 fa3f 	bl	800137c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f02:	f001 fd45 	bl	8002990 <HAL_I2CEx_ConfigAnalogFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f000 fa36 	bl	800137c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_I2C1_Init+0x74>)
 8000f14:	f001 fd87 	bl	8002a26 <HAL_I2CEx_ConfigDigitalFilter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 fa2d 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001fc 	.word	0x200001fc
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	00300208 	.word	0x00300208

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f54:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <MX_TIM3_Init+0x9c>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f68:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000f6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f7c:	f002 fe9a 	bl	8003cb4 <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000f86:	f000 f9f9 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000f98:	f003 f87c 	bl	8004094 <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000fa2:	f000 f9eb 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_TIM3_Init+0x98>)
 8000fb4:	f003 fa9a 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000fbe:	f000 f9dd 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000250 	.word	0x20000250
 8000fd0:	40000400 	.word	0x40000400

08000fd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_TIM4_Init+0x98>)
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_TIM4_Init+0x9c>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_TIM4_Init+0x98>)
 8000ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ffe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM4_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000 -1;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_TIM4_Init+0x98>)
 8001008:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800100c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_TIM4_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM4_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <MX_TIM4_Init+0x98>)
 800101c:	f002 fe4a 	bl	8003cb4 <HAL_TIM_Base_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001026:	f000 f9a9 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4619      	mov	r1, r3
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_TIM4_Init+0x98>)
 8001038:	f003 f82c 	bl	8004094 <HAL_TIM_ConfigClockSource>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001042:	f000 f99b 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_TIM4_Init+0x98>)
 8001054:	f003 fa4a 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800105e:	f000 f98d 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000029c 	.word	0x2000029c
 8001070:	40000800 	.word	0x40000800

08001074 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_UART4_Init+0x58>)
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <MX_UART4_Init+0x5c>)
 800107c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_UART4_Init+0x58>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_UART4_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_UART4_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_UART4_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_UART4_Init+0x58>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_UART4_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_UART4_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_UART4_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_UART4_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_UART4_Init+0x58>)
 80010b8:	f003 fac4 	bl	8004644 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80010c2:	f000 f95b 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002e8 	.word	0x200002e8
 80010d0:	40004c00 	.word	0x40004c00

080010d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <MX_USART3_UART_Init+0x5c>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART3_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001118:	f003 fa94 	bl	8004644 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001122:	f000 f92b 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000370 	.word	0x20000370
 8001130:	40004800 	.word	0x40004800

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b87      	ldr	r3, [pc, #540]	; (8001368 <MX_GPIO_Init+0x234>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a86      	ldr	r2, [pc, #536]	; (8001368 <MX_GPIO_Init+0x234>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b84      	ldr	r3, [pc, #528]	; (8001368 <MX_GPIO_Init+0x234>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	4b81      	ldr	r3, [pc, #516]	; (8001368 <MX_GPIO_Init+0x234>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a80      	ldr	r2, [pc, #512]	; (8001368 <MX_GPIO_Init+0x234>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <MX_GPIO_Init+0x234>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <MX_GPIO_Init+0x234>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a7a      	ldr	r2, [pc, #488]	; (8001368 <MX_GPIO_Init+0x234>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b78      	ldr	r3, [pc, #480]	; (8001368 <MX_GPIO_Init+0x234>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b75      	ldr	r3, [pc, #468]	; (8001368 <MX_GPIO_Init+0x234>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a74      	ldr	r2, [pc, #464]	; (8001368 <MX_GPIO_Init+0x234>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <MX_GPIO_Init+0x234>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <MX_GPIO_Init+0x234>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a6e      	ldr	r2, [pc, #440]	; (8001368 <MX_GPIO_Init+0x234>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b6c      	ldr	r3, [pc, #432]	; (8001368 <MX_GPIO_Init+0x234>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c2:	4b69      	ldr	r3, [pc, #420]	; (8001368 <MX_GPIO_Init+0x234>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a68      	ldr	r2, [pc, #416]	; (8001368 <MX_GPIO_Init+0x234>)
 80011c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b66      	ldr	r3, [pc, #408]	; (8001368 <MX_GPIO_Init+0x234>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80011e0:	4862      	ldr	r0, [pc, #392]	; (800136c <MX_GPIO_Init+0x238>)
 80011e2:	f000 febb 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2140      	movs	r1, #64	; 0x40
 80011ea:	4861      	ldr	r0, [pc, #388]	; (8001370 <MX_GPIO_Init+0x23c>)
 80011ec:	f000 feb6 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2140      	movs	r1, #64	; 0x40
 80011f4:	485f      	ldr	r0, [pc, #380]	; (8001374 <MX_GPIO_Init+0x240>)
 80011f6:	f000 feb1 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001200:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4858      	ldr	r0, [pc, #352]	; (8001374 <MX_GPIO_Init+0x240>)
 8001212:	f000 fcf7 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001216:	2332      	movs	r3, #50	; 0x32
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001226:	230b      	movs	r3, #11
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4850      	ldr	r0, [pc, #320]	; (8001374 <MX_GPIO_Init+0x240>)
 8001232:	f000 fce7 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001236:	2386      	movs	r3, #134	; 0x86
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001246:	230b      	movs	r3, #11
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4849      	ldr	r0, [pc, #292]	; (8001378 <MX_GPIO_Init+0x244>)
 8001252:	f000 fcd7 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001256:	f244 0381 	movw	r3, #16513	; 0x4081
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	483f      	ldr	r0, [pc, #252]	; (800136c <MX_GPIO_Init+0x238>)
 8001270:	f000 fcc8 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001286:	230b      	movs	r3, #11
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4836      	ldr	r0, [pc, #216]	; (800136c <MX_GPIO_Init+0x238>)
 8001292:	f000 fcb7 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4830      	ldr	r0, [pc, #192]	; (8001370 <MX_GPIO_Init+0x23c>)
 80012ae:	f000 fca9 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	482a      	ldr	r0, [pc, #168]	; (8001370 <MX_GPIO_Init+0x23c>)
 80012c6:	f000 fc9d 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ca:	2340      	movs	r3, #64	; 0x40
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4824      	ldr	r0, [pc, #144]	; (8001374 <MX_GPIO_Init+0x240>)
 80012e2:	f000 fc8f 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012f8:	230a      	movs	r3, #10
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	481d      	ldr	r0, [pc, #116]	; (8001378 <MX_GPIO_Init+0x244>)
 8001304:	f000 fc7e 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4816      	ldr	r0, [pc, #88]	; (8001378 <MX_GPIO_Init+0x244>)
 800131e:	f000 fc71 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001322:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001334:	230b      	movs	r3, #11
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_GPIO_Init+0x23c>)
 8001340:	f000 fc60 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0x238>)
 800135a:	f000 fc53 	bl	8001c04 <HAL_GPIO_Init>

}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	; 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400
 8001370:	40021800 	.word	0x40021800
 8001374:	40020800 	.word	0x40020800
 8001378:	40020000 	.word	0x40020000

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_MspInit+0x44>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_MspInit+0x44>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_MspInit+0x44>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x44>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x44>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x44>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ae      	sub	sp, #184	; 0xb8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2290      	movs	r2, #144	; 0x90
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fe3d 	bl	8005070 <memset>
  if(hi2c->Instance==I2C1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_I2C_MspInit+0xb4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d13c      	bne.n	800147a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001404:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001406:	2300      	movs	r3, #0
 8001408:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f828 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800141a:	f7ff ffaf 	bl	800137c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_I2C_MspInit+0xb8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_I2C_MspInit+0xb8>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_I2C_MspInit+0xb8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001436:	f44f 7310 	mov.w	r3, #576	; 0x240
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143e:	2312      	movs	r3, #18
 8001440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	2301      	movs	r3, #1
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001450:	2304      	movs	r3, #4
 8001452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <HAL_I2C_MspInit+0xbc>)
 800145e:	f000 fbd1 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_I2C_MspInit+0xb8>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_I2C_MspInit+0xb8>)
 8001468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_I2C_MspInit+0xb8>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	37b8      	adds	r7, #184	; 0xb8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40005400 	.word	0x40005400
 8001488:	40023800 	.word	0x40023800
 800148c:	40020400 	.word	0x40020400

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_TIM_Base_MspInit+0x78>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d114      	bne.n	80014cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_TIM_Base_MspInit+0x7c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_TIM_Base_MspInit+0x7c>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_TIM_Base_MspInit+0x7c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	201d      	movs	r0, #29
 80014c0:	f000 fb69 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014c4:	201d      	movs	r0, #29
 80014c6:	f000 fb82 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014ca:	e018      	b.n	80014fe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_TIM_Base_MspInit+0x80>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d113      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_TIM_Base_MspInit+0x7c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <HAL_TIM_Base_MspInit+0x7c>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_TIM_Base_MspInit+0x7c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2101      	movs	r1, #1
 80014f2:	201e      	movs	r0, #30
 80014f4:	f000 fb4f 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014f8:	201e      	movs	r0, #30
 80014fa:	f000 fb68 	bl	8001bce <HAL_NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40000400 	.word	0x40000400
 800150c:	40023800 	.word	0x40023800
 8001510:	40000800 	.word	0x40000800

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0b0      	sub	sp, #192	; 0xc0
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	2290      	movs	r2, #144	; 0x90
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fd9b 	bl	8005070 <memset>
  if(huart->Instance==UART4)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <HAL_UART_MspInit+0x138>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d13d      	bne.n	80015c0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800154a:	2300      	movs	r3, #0
 800154c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4618      	mov	r0, r3
 8001554:	f001 ff86 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800155e:	f7ff ff0d 	bl	800137c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <HAL_UART_MspInit+0x13c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <HAL_UART_MspInit+0x13c>)
 8001568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_UART_MspInit+0x13c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_UART_MspInit+0x13c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a34      	ldr	r2, [pc, #208]	; (8001650 <HAL_UART_MspInit+0x13c>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_UART_MspInit+0x13c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ac:	2308      	movs	r3, #8
 80015ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015b6:	4619      	mov	r1, r3
 80015b8:	4826      	ldr	r0, [pc, #152]	; (8001654 <HAL_UART_MspInit+0x140>)
 80015ba:	f000 fb23 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015be:	e041      	b.n	8001644 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_UART_MspInit+0x144>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d13c      	bne.n	8001644 <HAL_UART_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 ff43 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80015e4:	f7ff feca 	bl	800137c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x13c>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x13c>)
 80015ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_UART_MspInit+0x13c>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_UART_MspInit+0x13c>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <HAL_UART_MspInit+0x13c>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_UART_MspInit+0x13c>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001618:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001632:	2307      	movs	r3, #7
 8001634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <HAL_UART_MspInit+0x148>)
 8001640:	f000 fae0 	bl	8001c04 <HAL_GPIO_Init>
}
 8001644:	bf00      	nop
 8001646:	37c0      	adds	r7, #192	; 0xc0
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40004c00 	.word	0x40004c00
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800
 8001658:	40004800 	.word	0x40004800
 800165c:	40020c00 	.word	0x40020c00

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 f954 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <TIM3_IRQHandler+0x10>)
 80016ba:	f002 fbcb 	bl	8003e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000250 	.word	0x20000250

080016c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM4_IRQHandler+0x10>)
 80016ce:	f002 fbc1 	bl	8003e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000029c 	.word	0x2000029c

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f6:	f003 fc91 	bl	800501c <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2216      	movs	r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_exit>:

void _exit (int status)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800171e:	e7fe      	b.n	800171e <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
  }

  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
  }
  return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ba:	605a      	str	r2, [r3, #4]
  return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_isatty>:

int _isatty(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f003 fbf6 	bl	800501c <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20080000 	.word	0x20080000
 800185c:	00000400 	.word	0x00000400
 8001860:	20000430 	.word	0x20000430
 8001864:	20000448 	.word	0x20000448

08001868 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001892:	490e      	ldr	r1, [pc, #56]	; (80018cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a8:	4c0b      	ldr	r4, [pc, #44]	; (80018d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b6:	f7ff ffd7 	bl	8001868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f003 fbb5 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff fa47 	bl	8000d50 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018d0:	08009c7c 	.word	0x08009c7c
  ldr r2, =_sbss
 80018d4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018d8:	20000448 	.word	0x20000448

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>

080018de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f94c 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f000 f805 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ee:	f7ff fd4b 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f967 	bl	8001bea <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001934:	f000 f92f 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000008 	.word	0x20000008
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	20000434 	.word	0x20000434

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000434 	.word	0x20000434

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	05fa0000 	.word	0x05fa0000

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff3e 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e175      	b.n	8001f10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8164 	bne.w	8001f0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_GPIO_Init+0x56>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d017      	beq.n	8001cf8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80be 	beq.w	8001f0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a65      	ldr	r2, [pc, #404]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001da6:	4a61      	ldr	r2, [pc, #388]	; (8001f2c <HAL_GPIO_Init+0x328>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_GPIO_Init+0x32c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d037      	beq.n	8001e42 <HAL_GPIO_Init+0x23e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d031      	beq.n	8001e3e <HAL_GPIO_Init+0x23a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d02b      	beq.n	8001e3a <HAL_GPIO_Init+0x236>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a55      	ldr	r2, [pc, #340]	; (8001f3c <HAL_GPIO_Init+0x338>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d025      	beq.n	8001e36 <HAL_GPIO_Init+0x232>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a54      	ldr	r2, [pc, #336]	; (8001f40 <HAL_GPIO_Init+0x33c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x22e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a53      	ldr	r2, [pc, #332]	; (8001f44 <HAL_GPIO_Init+0x340>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x22a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	; (8001f48 <HAL_GPIO_Init+0x344>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <HAL_GPIO_Init+0x348>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a50      	ldr	r2, [pc, #320]	; (8001f50 <HAL_GPIO_Init+0x34c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4f      	ldr	r2, [pc, #316]	; (8001f54 <HAL_GPIO_Init+0x350>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001e1a:	2309      	movs	r3, #9
 8001e1c:	e012      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e1e:	230a      	movs	r3, #10
 8001e20:	e010      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e22:	2308      	movs	r3, #8
 8001e24:	e00e      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e00c      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00a      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e2e:	2305      	movs	r3, #5
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x240>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x328>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e86:	4a34      	ldr	r2, [pc, #208]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb0:	4a29      	ldr	r2, [pc, #164]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <HAL_GPIO_Init+0x354>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f ae86 	bls.w	8001c24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021c00 	.word	0x40021c00
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40022400 	.word	0x40022400
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	400b      	ands	r3, r1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff f9f0 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	e006      	b.n	800204c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800204a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d104      	bne.n	800205e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_I2C_Init+0x11c>)
 800206a:	430b      	orrs	r3, r1
 800206c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69d9      	ldr	r1, [r3, #28]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	02008000 	.word	0x02008000

080020e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	461a      	mov	r2, r3
 80020f0:	460b      	mov	r3, r1
 80020f2:	817b      	strh	r3, [r7, #10]
 80020f4:	4613      	mov	r3, r2
 80020f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	f040 80da 	bne.w	80022ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_I2C_Master_Transmit+0x30>
 8002110:	2302      	movs	r3, #2
 8002112:	e0d3      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1d8>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800211c:	f7ff fc30 	bl	8001980 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2319      	movs	r3, #25
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f9e6 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0be      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2221      	movs	r2, #33	; 0x21
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2210      	movs	r2, #16
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	893a      	ldrh	r2, [r7, #8]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2bff      	cmp	r3, #255	; 0xff
 800216e:	d90e      	bls.n	800218e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	22ff      	movs	r2, #255	; 0xff
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	b2da      	uxtb	r2, r3
 800217c:	8979      	ldrh	r1, [r7, #10]
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fbd0 	bl	800292c <I2C_TransferConfig>
 800218c:	e06c      	b.n	8002268 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fbbf 	bl	800292c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021ae:	e05b      	b.n	8002268 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	6a39      	ldr	r1, [r7, #32]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f9e3 	bl	8002580 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e07b      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d034      	beq.n	8002268 <HAL_I2C_Master_Transmit+0x184>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	2b00      	cmp	r3, #0
 8002204:	d130      	bne.n	8002268 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	2200      	movs	r2, #0
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f975 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e04d      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d90e      	bls.n	8002248 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	22ff      	movs	r2, #255	; 0xff
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	b2da      	uxtb	r2, r3
 8002236:	8979      	ldrh	r1, [r7, #10]
 8002238:	2300      	movs	r3, #0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fb73 	bl	800292c <I2C_TransferConfig>
 8002246:	e00f      	b.n	8002268 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	b2da      	uxtb	r2, r3
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	2300      	movs	r3, #0
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fb62 	bl	800292c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d19e      	bne.n	80021b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	6a39      	ldr	r1, [r7, #32]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f9c2 	bl	8002600 <I2C_WaitOnSTOPFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e01a      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2220      	movs	r2, #32
 800228c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800229a:	400b      	ands	r3, r1
 800229c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	80002000 	.word	0x80002000
 80022c8:	fe00e800 	.word	0xfe00e800

080022cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	461a      	mov	r2, r3
 80022d8:	460b      	mov	r3, r1
 80022da:	817b      	strh	r3, [r7, #10]
 80022dc:	4613      	mov	r3, r2
 80022de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	f040 80db 	bne.w	80024a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_I2C_Master_Receive+0x30>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0d4      	b.n	80024a6 <HAL_I2C_Master_Receive+0x1da>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002304:	f7ff fb3c 	bl	8001980 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2319      	movs	r3, #25
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f8f2 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0bf      	b.n	80024a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2222      	movs	r2, #34	; 0x22
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2210      	movs	r2, #16
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	893a      	ldrh	r2, [r7, #8]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	2bff      	cmp	r3, #255	; 0xff
 8002356:	d90e      	bls.n	8002376 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	22ff      	movs	r2, #255	; 0xff
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	b2da      	uxtb	r2, r3
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_I2C_Master_Receive+0x1e4>)
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fadc 	bl	800292c <I2C_TransferConfig>
 8002374:	e06d      	b.n	8002452 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	b2da      	uxtb	r2, r3
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_I2C_Master_Receive+0x1e4>)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 facb 	bl	800292c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002396:	e05c      	b.n	8002452 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	6a39      	ldr	r1, [r7, #32]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f96b 	bl	8002678 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e07c      	b.n	80024a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d034      	beq.n	8002452 <HAL_I2C_Master_Receive+0x186>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d130      	bne.n	8002452 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f880 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e04d      	b.n	80024a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2bff      	cmp	r3, #255	; 0xff
 8002412:	d90e      	bls.n	8002432 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	b2da      	uxtb	r2, r3
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	2300      	movs	r3, #0
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fa7e 	bl	800292c <I2C_TransferConfig>
 8002430:	e00f      	b.n	8002452 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	b2da      	uxtb	r2, r3
 8002442:	8979      	ldrh	r1, [r7, #10]
 8002444:	2300      	movs	r3, #0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fa6d 	bl	800292c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d19d      	bne.n	8002398 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	6a39      	ldr	r1, [r7, #32]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f8cd 	bl	8002600 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e01a      	b.n	80024a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2220      	movs	r2, #32
 8002476:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_I2C_Master_Receive+0x1e8>)
 8002484:	400b      	ands	r3, r1
 8002486:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	80002400 	.word	0x80002400
 80024b4:	fe00e800 	.word	0xfe00e800

080024b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d103      	bne.n	80024d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d007      	beq.n	80024f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	619a      	str	r2, [r3, #24]
  }
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002510:	e022      	b.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002518:	d01e      	beq.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7ff fa31 	bl	8001980 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d113      	bne.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e00f      	b.n	8002578 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d0cd      	beq.n	8002512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800258c:	e02c      	b.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f8ea 	bl	800276c <I2C_IsErrorOccurred>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e02a      	b.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a8:	d01e      	beq.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7ff f9e9 	bl	8001980 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d113      	bne.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e007      	b.n	80025f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d1cb      	bne.n	800258e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260c:	e028      	b.n	8002660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f8aa 	bl	800276c <I2C_IsErrorOccurred>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e026      	b.n	8002670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff f9ad 	bl	8001980 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d113      	bne.n	8002660 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f043 0220 	orr.w	r2, r3, #32
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b20      	cmp	r3, #32
 800266c:	d1cf      	bne.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002684:	e064      	b.n	8002750 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f86e 	bl	800276c <I2C_IsErrorOccurred>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e062      	b.n	8002760 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d138      	bne.n	800271a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d105      	bne.n	80026c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e04e      	b.n	8002760 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d107      	bne.n	80026e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2210      	movs	r2, #16
 80026d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2204      	movs	r2, #4
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
 80026de:	e002      	b.n	80026e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2220      	movs	r2, #32
 80026ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e022      	b.n	8002760 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7ff f931 	bl	8001980 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e007      	b.n	8002760 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d193      	bne.n	8002686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	fe00e800 	.word	0xfe00e800

0800276c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d068      	beq.n	800286a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027a0:	e049      	b.n	8002836 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a8:	d045      	beq.n	8002836 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7ff f8e9 	bl	8001980 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_IsErrorOccurred+0x54>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d13a      	bne.n	8002836 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e2:	d121      	bne.n	8002828 <I2C_IsErrorOccurred+0xbc>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ea:	d01d      	beq.n	8002828 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d01a      	beq.n	8002828 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002800:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002802:	f7ff f8bd 	bl	8001980 <HAL_GetTick>
 8002806:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002808:	e00e      	b.n	8002828 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800280a:	f7ff f8b9 	bl	8001980 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b19      	cmp	r3, #25
 8002816:	d907      	bls.n	8002828 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f043 0320 	orr.w	r3, r3, #32
 800281e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002826:	e006      	b.n	8002836 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b20      	cmp	r3, #32
 8002834:	d1e9      	bne.n	800280a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b20      	cmp	r3, #32
 8002842:	d003      	beq.n	800284c <I2C_IsErrorOccurred+0xe0>
 8002844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0aa      	beq.n	80027a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800284c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002850:	2b00      	cmp	r3, #0
 8002852:	d103      	bne.n	800285c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2220      	movs	r2, #32
 800285a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01c      	beq.n	800291a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fde9 	bl	80024b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <I2C_IsErrorOccurred+0x1bc>)
 80028f2:	400b      	ands	r3, r1
 80028f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800291a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800291e:	4618      	mov	r0, r3
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	fe00e800 	.word	0xfe00e800

0800292c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	4613      	mov	r3, r2
 800293c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002944:	7a7b      	ldrb	r3, [r7, #9]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800294c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	4313      	orrs	r3, r2
 8002956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800295a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	0d5b      	lsrs	r3, r3, #21
 8002966:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <I2C_TransferConfig+0x60>)
 800296c:	430b      	orrs	r3, r1
 800296e:	43db      	mvns	r3, r3
 8002970:	ea02 0103 	and.w	r1, r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	03ff63ff 	.word	0x03ff63ff

08002990 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d138      	bne.n	8002a18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e032      	b.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d139      	bne.n	8002ab0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e033      	b.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2224      	movs	r2, #36	; 0x24
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e29b      	b.n	800300e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8087 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae4:	4b96      	ldr	r3, [pc, #600]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af0:	4b93      	ldr	r3, [pc, #588]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d112      	bne.n	8002b22 <HAL_RCC_OscConfig+0x62>
 8002afc:	4b90      	ldr	r3, [pc, #576]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b08:	d10b      	bne.n	8002b22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0a:	4b8d      	ldr	r3, [pc, #564]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x130>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d168      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e275      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x7a>
 8002b2c:	4b84      	ldr	r3, [pc, #528]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a83      	ldr	r2, [pc, #524]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e02e      	b.n	8002b98 <HAL_RCC_OscConfig+0xd8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x9c>
 8002b42:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7e      	ldr	r2, [pc, #504]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b7c      	ldr	r3, [pc, #496]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7b      	ldr	r2, [pc, #492]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01d      	b.n	8002b98 <HAL_RCC_OscConfig+0xd8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0xc0>
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a75      	ldr	r2, [pc, #468]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a72      	ldr	r2, [pc, #456]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0xd8>
 8002b80:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6b      	ldr	r2, [pc, #428]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe feee 	bl	8001980 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe feea 	bl	8001980 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e229      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe feda 	bl	8001980 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fed6 	bl	8001980 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e215      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be2:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x110>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d069      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bfe:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x190>
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x17a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1e9      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	493d      	ldr	r1, [pc, #244]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e040      	b.n	8002cd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d023      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b39      	ldr	r3, [pc, #228]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a38      	ldr	r2, [pc, #224]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fe8c 	bl	8001980 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fe88 	bl	8001980 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1c7      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4929      	ldr	r1, [pc, #164]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
 8002c9e:	e018      	b.n	8002cd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe fe68 	bl	8001980 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fe64 	bl	8001980 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1a3      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d038      	beq.n	8002d50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fe45 	bl	8001980 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7fe fe41 	bl	8001980 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e180      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x23a>
 8002d18:	e01a      	b.n	8002d50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fe fe2b 	bl	8001980 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fe27 	bl	8001980 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d903      	bls.n	8002d44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e166      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
 8002d40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b92      	ldr	r3, [pc, #584]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ee      	bne.n	8002d2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80a4 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	4b89      	ldr	r3, [pc, #548]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a88      	ldr	r2, [pc, #544]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b86      	ldr	r3, [pc, #536]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d86:	4b83      	ldr	r3, [pc, #524]	; (8002f94 <HAL_RCC_OscConfig+0x4d4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d118      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d92:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <HAL_RCC_OscConfig+0x4d4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7f      	ldr	r2, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0x4d4>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fdef 	bl	8001980 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da6:	f7fe fdeb 	bl	8001980 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b64      	cmp	r3, #100	; 0x64
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e12a      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db8:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0x4d4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x31a>
 8002dcc:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a6f      	ldr	r2, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd8:	e02d      	b.n	8002e36 <HAL_RCC_OscConfig+0x376>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x33c>
 8002de2:	4b6b      	ldr	r3, [pc, #428]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	4a6a      	ldr	r2, [pc, #424]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70
 8002dee:	4b68      	ldr	r3, [pc, #416]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a67      	ldr	r2, [pc, #412]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCC_OscConfig+0x376>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x35e>
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	4b5f      	ldr	r3, [pc, #380]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a5e      	ldr	r2, [pc, #376]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCC_OscConfig+0x376>
 8002e1e:	4b5c      	ldr	r3, [pc, #368]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a5b      	ldr	r2, [pc, #364]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fd9f 	bl	8001980 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fd9b 	bl	8001980 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0d8      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b4c      	ldr	r3, [pc, #304]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCC_OscConfig+0x386>
 8002e68:	e014      	b.n	8002e94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fd89 	bl	8001980 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe fd85 	bl	8001980 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0c2      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ee      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a3c      	ldr	r2, [pc, #240]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80ae 	beq.w	800300c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb0:	4b37      	ldr	r3, [pc, #220]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d06d      	beq.n	8002f98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d14b      	bne.n	8002f5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fd56 	bl	8001980 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fd52 	bl	8001980 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e091      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	019b      	lsls	r3, r3, #6
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	071b      	lsls	r3, r3, #28
 8002f22:	491b      	ldr	r1, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fd24 	bl	8001980 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fd20 	bl	8001980 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e05f      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x47c>
 8002f5a:	e057      	b.n	800300c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fd0a 	bl	8001980 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe fd06 	bl	8001980 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e045      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4b0>
 8002f8e:	e03d      	b.n	800300c <HAL_RCC_OscConfig+0x54c>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <HAL_RCC_OscConfig+0x558>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d030      	beq.n	8003008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d129      	bne.n	8003008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d122      	bne.n	8003008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc8:	4013      	ands	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d119      	bne.n	8003008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d10f      	bne.n	8003008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0d0      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d910      	bls.n	8003064 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 020f 	bic.w	r2, r3, #15
 800304a:	4965      	ldr	r1, [pc, #404]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b8      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800309e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494d      	ldr	r1, [pc, #308]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d040      	beq.n	8003140 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d115      	bne.n	80030fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e073      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06b      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4936      	ldr	r1, [pc, #216]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fe fc36 	bl	8001980 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe fc32 	bl	8001980 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e053      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d210      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	4922      	ldr	r1, [pc, #136]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e032      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4916      	ldr	r1, [pc, #88]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f821 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490a      	ldr	r1, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x1cc>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1d0>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1d4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fb92 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00
 80031e4:	40023800 	.word	0x40023800
 80031e8:	080097b0 	.word	0x080097b0
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000004 	.word	0x20000004

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b094      	sub	sp, #80	; 0x50
 80031fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003200:	2300      	movs	r3, #0
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003204:	2300      	movs	r3, #0
 8003206:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320c:	4b79      	ldr	r3, [pc, #484]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d00d      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x40>
 8003218:	2b08      	cmp	r3, #8
 800321a:	f200 80e1 	bhi.w	80033e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x34>
 8003222:	2b04      	cmp	r3, #4
 8003224:	d003      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0x3a>
 8003226:	e0db      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003228:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800322a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800322c:	e0db      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322e:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003232:	e0d8      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003234:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324a:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	2200      	movs	r2, #0
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38
 8003254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
 800325e:	2300      	movs	r3, #0
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
 8003262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003266:	4622      	mov	r2, r4
 8003268:	462b      	mov	r3, r5
 800326a:	f04f 0000 	mov.w	r0, #0
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	0159      	lsls	r1, r3, #5
 8003274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003278:	0150      	lsls	r0, r2, #5
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4621      	mov	r1, r4
 8003280:	1a51      	subs	r1, r2, r1
 8003282:	6139      	str	r1, [r7, #16]
 8003284:	4629      	mov	r1, r5
 8003286:	eb63 0301 	sbc.w	r3, r3, r1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003298:	4659      	mov	r1, fp
 800329a:	018b      	lsls	r3, r1, #6
 800329c:	4651      	mov	r1, sl
 800329e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a2:	4651      	mov	r1, sl
 80032a4:	018a      	lsls	r2, r1, #6
 80032a6:	4651      	mov	r1, sl
 80032a8:	ebb2 0801 	subs.w	r8, r2, r1
 80032ac:	4659      	mov	r1, fp
 80032ae:	eb63 0901 	sbc.w	r9, r3, r1
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	eb18 0303 	adds.w	r3, r8, r3
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	462b      	mov	r3, r5
 80032d4:	eb49 0303 	adc.w	r3, r9, r3
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032e6:	4629      	mov	r1, r5
 80032e8:	028b      	lsls	r3, r1, #10
 80032ea:	4621      	mov	r1, r4
 80032ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f0:	4621      	mov	r1, r4
 80032f2:	028a      	lsls	r2, r1, #10
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fa:	2200      	movs	r2, #0
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003304:	f7fd f9b0 	bl	8000668 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003310:	e058      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	4618      	mov	r0, r3
 800331c:	4611      	mov	r1, r2
 800331e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	f04f 0000 	mov.w	r0, #0
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	0159      	lsls	r1, r3, #5
 800333a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333e:	0150      	lsls	r0, r2, #5
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4641      	mov	r1, r8
 8003346:	ebb2 0a01 	subs.w	sl, r2, r1
 800334a:	4649      	mov	r1, r9
 800334c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800335c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003364:	ebb2 040a 	subs.w	r4, r2, sl
 8003368:	eb63 050b 	sbc.w	r5, r3, fp
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	00eb      	lsls	r3, r5, #3
 8003376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800337a:	00e2      	lsls	r2, r4, #3
 800337c:	4614      	mov	r4, r2
 800337e:	461d      	mov	r5, r3
 8003380:	4643      	mov	r3, r8
 8003382:	18e3      	adds	r3, r4, r3
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	464b      	mov	r3, r9
 8003388:	eb45 0303 	adc.w	r3, r5, r3
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800339a:	4629      	mov	r1, r5
 800339c:	028b      	lsls	r3, r1, #10
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a4:	4621      	mov	r1, r4
 80033a6:	028a      	lsls	r2, r1, #10
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	61fa      	str	r2, [r7, #28]
 80033b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b8:	f7fd f956 	bl	8000668 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033de:	e002      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3750      	adds	r7, #80	; 0x50
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	00f42400 	.word	0x00f42400

080033fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	080097c0 	.word	0x080097c0

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	080097c0 	.word	0x080097c0

08003464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d012      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800348c:	4b69      	ldr	r3, [pc, #420]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003496:	6093      	str	r3, [r2, #8]
 8003498:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a0:	4964      	ldr	r1, [pc, #400]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d017      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034be:	4b5d      	ldr	r3, [pc, #372]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	4959      	ldr	r1, [pc, #356]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034dc:	d101      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d017      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034fa:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003500:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	494a      	ldr	r1, [pc, #296]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003536:	2301      	movs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 808b 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	4a39      	ldr	r2, [pc, #228]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6413      	str	r3, [r2, #64]	; 0x40
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003560:	4b35      	ldr	r3, [pc, #212]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a34      	ldr	r2, [pc, #208]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356c:	f7fe fa08 	bl	8001980 <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003574:	f7fe fa04 	bl	8001980 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e38f      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003592:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d035      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d02e      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b0:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035d2:	4a18      	ldr	r2, [pc, #96]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035d8:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d114      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f9cc 	bl	8001980 <HAL_GetTick>
 80035e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe f9c8 	bl	8001980 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e351      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ee      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800361a:	d111      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800362a:	400b      	ands	r3, r1
 800362c:	4901      	ldr	r1, [pc, #4]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
 8003632:	e00b      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003634:	40023800 	.word	0x40023800
 8003638:	40007000 	.word	0x40007000
 800363c:	0ffffcff 	.word	0x0ffffcff
 8003640:	4bac      	ldr	r3, [pc, #688]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4aab      	ldr	r2, [pc, #684]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003646:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800364a:	6093      	str	r3, [r2, #8]
 800364c:	4ba9      	ldr	r3, [pc, #676]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	49a6      	ldr	r1, [pc, #664]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365a:	4313      	orrs	r3, r2
 800365c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800366a:	4ba2      	ldr	r3, [pc, #648]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003670:	4aa0      	ldr	r2, [pc, #640]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003676:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800367a:	4b9e      	ldr	r3, [pc, #632]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	499b      	ldr	r1, [pc, #620]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003698:	4b96      	ldr	r3, [pc, #600]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a6:	4993      	ldr	r1, [pc, #588]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ba:	4b8e      	ldr	r3, [pc, #568]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c8:	498a      	ldr	r1, [pc, #552]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036dc:	4b85      	ldr	r3, [pc, #532]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	4982      	ldr	r1, [pc, #520]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036fe:	4b7d      	ldr	r3, [pc, #500]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4979      	ldr	r1, [pc, #484]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003720:	4b74      	ldr	r3, [pc, #464]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4971      	ldr	r1, [pc, #452]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003742:	4b6c      	ldr	r3, [pc, #432]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f023 020c 	bic.w	r2, r3, #12
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	4968      	ldr	r1, [pc, #416]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003764:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	4960      	ldr	r1, [pc, #384]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003786:	4b5b      	ldr	r3, [pc, #364]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003794:	4957      	ldr	r1, [pc, #348]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a8:	4b52      	ldr	r3, [pc, #328]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	494f      	ldr	r1, [pc, #316]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037ca:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	4946      	ldr	r1, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	493e      	ldr	r1, [pc, #248]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	4935      	ldr	r1, [pc, #212]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383e:	492d      	ldr	r1, [pc, #180]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d011      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003852:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003860:	4924      	ldr	r1, [pc, #144]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a0:	4914      	ldr	r1, [pc, #80]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c4:	490b      	ldr	r1, [pc, #44]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e8:	4902      	ldr	r1, [pc, #8]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038f0:	e002      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003904:	4b8a      	ldr	r3, [pc, #552]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800390a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	4986      	ldr	r1, [pc, #536]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003928:	4b81      	ldr	r3, [pc, #516]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003938:	497d      	ldr	r1, [pc, #500]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d006      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80d6 	beq.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003954:	4b76      	ldr	r3, [pc, #472]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a75      	ldr	r2, [pc, #468]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fe f80e 	bl	8001980 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003968:	f7fe f80a 	bl	8001980 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e195      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800397a:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d021      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11d      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800399a:	4b65      	ldr	r3, [pc, #404]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039a8:	4b61      	ldr	r3, [pc, #388]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ae:	0e1b      	lsrs	r3, r3, #24
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	019a      	lsls	r2, r3, #6
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	071b      	lsls	r3, r3, #28
 80039ce:	4958      	ldr	r1, [pc, #352]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02e      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a00:	d129      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a10:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a16:	0f1b      	lsrs	r3, r3, #28
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	019a      	lsls	r2, r3, #6
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	061b      	lsls	r3, r3, #24
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	071b      	lsls	r3, r3, #28
 8003a36:	493e      	ldr	r1, [pc, #248]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a3e:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a44:	f023 021f 	bic.w	r2, r3, #31
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	4938      	ldr	r1, [pc, #224]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01d      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a62:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a68:	0e1b      	lsrs	r3, r3, #24
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a70:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a76:	0f1b      	lsrs	r3, r3, #28
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	019a      	lsls	r2, r3, #6
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	4926      	ldr	r1, [pc, #152]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d011      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	019a      	lsls	r2, r3, #6
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	071b      	lsls	r3, r3, #28
 8003ac6:	491a      	ldr	r1, [pc, #104]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ace:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ada:	f7fd ff51 	bl	8001980 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ae2:	f7fd ff4d 	bl	8001980 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b64      	cmp	r3, #100	; 0x64
 8003aee:	d901      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e0d8      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af4:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	f040 80ce 	bne.w	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b14:	f7fd ff34 	bl	8001980 <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b1c:	f7fd ff30 	bl	8001980 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d904      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0bb      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b34:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b40:	d0ec      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02e      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d12a      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b78:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	0f1b      	lsrs	r3, r3, #28
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	019a      	lsls	r2, r3, #6
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	061b      	lsls	r3, r3, #24
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	071b      	lsls	r3, r3, #28
 8003b9e:	4944      	ldr	r1, [pc, #272]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	493d      	ldr	r1, [pc, #244]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d022      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd4:	d11d      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bd6:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	0e1b      	lsrs	r3, r3, #24
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003be4:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	0f1b      	lsrs	r3, r3, #28
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	019a      	lsls	r2, r3, #6
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	071b      	lsls	r3, r3, #28
 8003c0a:	4929      	ldr	r1, [pc, #164]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c1e:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	0e1b      	lsrs	r3, r3, #24
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	019a      	lsls	r2, r3, #6
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	4917      	ldr	r1, [pc, #92]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4911      	ldr	r1, [pc, #68]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7c:	f7fd fe80 	bl	8001980 <HAL_GetTick>
 8003c80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c84:	f7fd fe7c 	bl	8001980 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e007      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca2:	d1ef      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800

08003cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e049      	b.n	8003d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fbd8 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 fac0 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d001      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e054      	b.n	8003e26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d01d      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_TIM_Base_Start_IT+0xe4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_TIM_Base_Start_IT+0xe8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d115      	bne.n	8003e10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_TIM_Base_Start_IT+0xec>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d015      	beq.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d011      	beq.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40001800 	.word	0x40001800
 8003e50:	00010007 	.word	0x00010007

08003e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d122      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0202 	mvn.w	r2, #2
 8003e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9d0 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9c2 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f9d3 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0204 	mvn.w	r2, #4
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f9a6 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f998 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f9a9 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0208 	mvn.w	r2, #8
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f97c 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f96e 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f97f 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0210 	mvn.w	r2, #16
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2208      	movs	r2, #8
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f952 	bl	800423c <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f944 	bl	8004228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f955 	bl	8004250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0201 	mvn.w	r2, #1
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fe86 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fb0c 	bl	800461c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004012:	d10e      	bne.n	8004032 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d107      	bne.n	8004032 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 faff 	bl	8004630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d10e      	bne.n	800405e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d107      	bne.n	800405e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f903 	bl	8004264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d10e      	bne.n	800408a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b20      	cmp	r3, #32
 8004078:	d107      	bne.n	800408a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0220 	mvn.w	r2, #32
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fabf 	bl	8004608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_TIM_ConfigClockSource+0x1c>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e0b4      	b.n	800421a <HAL_TIM_ConfigClockSource+0x186>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4b56      	ldr	r3, [pc, #344]	; (8004224 <HAL_TIM_ConfigClockSource+0x190>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e8:	d03e      	beq.n	8004168 <HAL_TIM_ConfigClockSource+0xd4>
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	f200 8087 	bhi.w	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	f000 8086 	beq.w	8004206 <HAL_TIM_ConfigClockSource+0x172>
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fe:	d87f      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b70      	cmp	r3, #112	; 0x70
 8004102:	d01a      	beq.n	800413a <HAL_TIM_ConfigClockSource+0xa6>
 8004104:	2b70      	cmp	r3, #112	; 0x70
 8004106:	d87b      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b60      	cmp	r3, #96	; 0x60
 800410a:	d050      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x11a>
 800410c:	2b60      	cmp	r3, #96	; 0x60
 800410e:	d877      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b50      	cmp	r3, #80	; 0x50
 8004112:	d03c      	beq.n	800418e <HAL_TIM_ConfigClockSource+0xfa>
 8004114:	2b50      	cmp	r3, #80	; 0x50
 8004116:	d873      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d058      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x13a>
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d86f      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b30      	cmp	r3, #48	; 0x30
 8004122:	d064      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	2b30      	cmp	r3, #48	; 0x30
 8004126:	d86b      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d060      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	2b20      	cmp	r3, #32
 800412e:	d867      	bhi.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d05c      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x15a>
 8004134:	2b10      	cmp	r3, #16
 8004136:	d05a      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x15a>
 8004138:	e062      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6899      	ldr	r1, [r3, #8]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f000 f9af 	bl	80044ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800415c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	609a      	str	r2, [r3, #8]
      break;
 8004166:	e04f      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	6899      	ldr	r1, [r3, #8]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f000 f998 	bl	80044ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418a:	609a      	str	r2, [r3, #8]
      break;
 800418c:	e03c      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	461a      	mov	r2, r3
 800419c:	f000 f90c 	bl	80043b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2150      	movs	r1, #80	; 0x50
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f965 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041ac:	e02c      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6859      	ldr	r1, [r3, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	461a      	mov	r2, r3
 80041bc:	f000 f92b 	bl	8004416 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2160      	movs	r1, #96	; 0x60
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f955 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041cc:	e01c      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	461a      	mov	r2, r3
 80041dc:	f000 f8ec 	bl	80043b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2140      	movs	r1, #64	; 0x40
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f945 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041ec:	e00c      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f000 f93c 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041fe:	e003      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	e000      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	fffeff88 	.word	0xfffeff88

08004228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a40      	ldr	r2, [pc, #256]	; (800438c <TIM_Base_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d00f      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <TIM_Base_SetConfig+0x118>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2f      	ldr	r2, [pc, #188]	; (800438c <TIM_Base_SetConfig+0x114>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d02b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d027      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <TIM_Base_SetConfig+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d023      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2b      	ldr	r2, [pc, #172]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01f      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a29      	ldr	r2, [pc, #164]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d017      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <TIM_Base_SetConfig+0x128>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <TIM_Base_SetConfig+0x12c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00f      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <TIM_Base_SetConfig+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <TIM_Base_SetConfig+0x134>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <TIM_Base_SetConfig+0x138>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <TIM_Base_SetConfig+0x13c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <TIM_Base_SetConfig+0x114>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <TIM_Base_SetConfig+0x124>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	615a      	str	r2, [r3, #20]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800
 80043ac:	40001800 	.word	0x40001800
 80043b0:	40001c00 	.word	0x40001c00
 80043b4:	40002000 	.word	0x40002000

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e06d      	b.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a30      	ldr	r2, [pc, #192]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2f      	ldr	r2, [pc, #188]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800453e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a20      	ldr	r2, [pc, #128]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d022      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004576:	d01d      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d018      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00e      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d009      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10c      	bne.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40014000 	.word	0x40014000
 8004604:	40001800 	.word	0x40001800

08004608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e040      	b.n	80046d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc ff54 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8b0 	bl	80047e8 <UART_SetConfig>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e022      	b.n	80046d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fb08 	bl	8004cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb8f 	bl	8004df4 <UART_CheckIdleState>
 80046d6:	4603      	mov	r3, r0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d171      	bne.n	80047dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_UART_Transmit+0x24>
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e06a      	b.n	80047de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2221      	movs	r2, #33	; 0x21
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004716:	f7fd f933 	bl	8001980 <HAL_GetTick>
 800471a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	88fa      	ldrh	r2, [r7, #6]
 8004720:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d108      	bne.n	8004748 <HAL_UART_Transmit+0x68>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e003      	b.n	8004750 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004750:	e02c      	b.n	80047ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2200      	movs	r2, #0
 800475a:	2180      	movs	r1, #128	; 0x80
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fb96 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e038      	b.n	80047de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004780:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	3302      	adds	r3, #2
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e007      	b.n	800479a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1cc      	bne.n	8004752 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	2140      	movs	r1, #64	; 0x40
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fb63 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e005      	b.n	80047de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4ba6      	ldr	r3, [pc, #664]	; (8004aac <UART_SetConfig+0x2c4>)
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	430b      	orrs	r3, r1
 800481e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	430a      	orrs	r2, r1
 8004858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a94      	ldr	r2, [pc, #592]	; (8004ab0 <UART_SetConfig+0x2c8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d120      	bne.n	80048a6 <UART_SetConfig+0xbe>
 8004864:	4b93      	ldr	r3, [pc, #588]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b03      	cmp	r3, #3
 8004870:	d816      	bhi.n	80048a0 <UART_SetConfig+0xb8>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x90>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	08004889 	.word	0x08004889
 800487c:	08004895 	.word	0x08004895
 8004880:	0800488f 	.word	0x0800488f
 8004884:	0800489b 	.word	0x0800489b
 8004888:	2301      	movs	r3, #1
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e150      	b.n	8004b30 <UART_SetConfig+0x348>
 800488e:	2302      	movs	r3, #2
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e14d      	b.n	8004b30 <UART_SetConfig+0x348>
 8004894:	2304      	movs	r3, #4
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e14a      	b.n	8004b30 <UART_SetConfig+0x348>
 800489a:	2308      	movs	r3, #8
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e147      	b.n	8004b30 <UART_SetConfig+0x348>
 80048a0:	2310      	movs	r3, #16
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e144      	b.n	8004b30 <UART_SetConfig+0x348>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a83      	ldr	r2, [pc, #524]	; (8004ab8 <UART_SetConfig+0x2d0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d132      	bne.n	8004916 <UART_SetConfig+0x12e>
 80048b0:	4b80      	ldr	r3, [pc, #512]	; (8004ab4 <UART_SetConfig+0x2cc>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d828      	bhi.n	8004910 <UART_SetConfig+0x128>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0xdc>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004911 	.word	0x08004911
 80048cc:	08004911 	.word	0x08004911
 80048d0:	08004911 	.word	0x08004911
 80048d4:	08004905 	.word	0x08004905
 80048d8:	08004911 	.word	0x08004911
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004911 	.word	0x08004911
 80048e4:	080048ff 	.word	0x080048ff
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004911 	.word	0x08004911
 80048f4:	0800490b 	.word	0x0800490b
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e118      	b.n	8004b30 <UART_SetConfig+0x348>
 80048fe:	2302      	movs	r3, #2
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e115      	b.n	8004b30 <UART_SetConfig+0x348>
 8004904:	2304      	movs	r3, #4
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e112      	b.n	8004b30 <UART_SetConfig+0x348>
 800490a:	2308      	movs	r3, #8
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e10f      	b.n	8004b30 <UART_SetConfig+0x348>
 8004910:	2310      	movs	r3, #16
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e10c      	b.n	8004b30 <UART_SetConfig+0x348>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a68      	ldr	r2, [pc, #416]	; (8004abc <UART_SetConfig+0x2d4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d120      	bne.n	8004962 <UART_SetConfig+0x17a>
 8004920:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800492a:	2b30      	cmp	r3, #48	; 0x30
 800492c:	d013      	beq.n	8004956 <UART_SetConfig+0x16e>
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	d814      	bhi.n	800495c <UART_SetConfig+0x174>
 8004932:	2b20      	cmp	r3, #32
 8004934:	d009      	beq.n	800494a <UART_SetConfig+0x162>
 8004936:	2b20      	cmp	r3, #32
 8004938:	d810      	bhi.n	800495c <UART_SetConfig+0x174>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <UART_SetConfig+0x15c>
 800493e:	2b10      	cmp	r3, #16
 8004940:	d006      	beq.n	8004950 <UART_SetConfig+0x168>
 8004942:	e00b      	b.n	800495c <UART_SetConfig+0x174>
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e0f2      	b.n	8004b30 <UART_SetConfig+0x348>
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e0ef      	b.n	8004b30 <UART_SetConfig+0x348>
 8004950:	2304      	movs	r3, #4
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e0ec      	b.n	8004b30 <UART_SetConfig+0x348>
 8004956:	2308      	movs	r3, #8
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e0e9      	b.n	8004b30 <UART_SetConfig+0x348>
 800495c:	2310      	movs	r3, #16
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e0e6      	b.n	8004b30 <UART_SetConfig+0x348>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a56      	ldr	r2, [pc, #344]	; (8004ac0 <UART_SetConfig+0x2d8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d120      	bne.n	80049ae <UART_SetConfig+0x1c6>
 800496c:	4b51      	ldr	r3, [pc, #324]	; (8004ab4 <UART_SetConfig+0x2cc>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004976:	2bc0      	cmp	r3, #192	; 0xc0
 8004978:	d013      	beq.n	80049a2 <UART_SetConfig+0x1ba>
 800497a:	2bc0      	cmp	r3, #192	; 0xc0
 800497c:	d814      	bhi.n	80049a8 <UART_SetConfig+0x1c0>
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d009      	beq.n	8004996 <UART_SetConfig+0x1ae>
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d810      	bhi.n	80049a8 <UART_SetConfig+0x1c0>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <UART_SetConfig+0x1a8>
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d006      	beq.n	800499c <UART_SetConfig+0x1b4>
 800498e:	e00b      	b.n	80049a8 <UART_SetConfig+0x1c0>
 8004990:	2300      	movs	r3, #0
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e0cc      	b.n	8004b30 <UART_SetConfig+0x348>
 8004996:	2302      	movs	r3, #2
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e0c9      	b.n	8004b30 <UART_SetConfig+0x348>
 800499c:	2304      	movs	r3, #4
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e0c6      	b.n	8004b30 <UART_SetConfig+0x348>
 80049a2:	2308      	movs	r3, #8
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e0c3      	b.n	8004b30 <UART_SetConfig+0x348>
 80049a8:	2310      	movs	r3, #16
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e0c0      	b.n	8004b30 <UART_SetConfig+0x348>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a44      	ldr	r2, [pc, #272]	; (8004ac4 <UART_SetConfig+0x2dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d125      	bne.n	8004a04 <UART_SetConfig+0x21c>
 80049b8:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <UART_SetConfig+0x2cc>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c6:	d017      	beq.n	80049f8 <UART_SetConfig+0x210>
 80049c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049cc:	d817      	bhi.n	80049fe <UART_SetConfig+0x216>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d2:	d00b      	beq.n	80049ec <UART_SetConfig+0x204>
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d8:	d811      	bhi.n	80049fe <UART_SetConfig+0x216>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <UART_SetConfig+0x1fe>
 80049de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e2:	d006      	beq.n	80049f2 <UART_SetConfig+0x20a>
 80049e4:	e00b      	b.n	80049fe <UART_SetConfig+0x216>
 80049e6:	2300      	movs	r3, #0
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e0a1      	b.n	8004b30 <UART_SetConfig+0x348>
 80049ec:	2302      	movs	r3, #2
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e09e      	b.n	8004b30 <UART_SetConfig+0x348>
 80049f2:	2304      	movs	r3, #4
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e09b      	b.n	8004b30 <UART_SetConfig+0x348>
 80049f8:	2308      	movs	r3, #8
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e098      	b.n	8004b30 <UART_SetConfig+0x348>
 80049fe:	2310      	movs	r3, #16
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e095      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <UART_SetConfig+0x2e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d125      	bne.n	8004a5a <UART_SetConfig+0x272>
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a1c:	d017      	beq.n	8004a4e <UART_SetConfig+0x266>
 8004a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a22:	d817      	bhi.n	8004a54 <UART_SetConfig+0x26c>
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d00b      	beq.n	8004a42 <UART_SetConfig+0x25a>
 8004a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2e:	d811      	bhi.n	8004a54 <UART_SetConfig+0x26c>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <UART_SetConfig+0x254>
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	d006      	beq.n	8004a48 <UART_SetConfig+0x260>
 8004a3a:	e00b      	b.n	8004a54 <UART_SetConfig+0x26c>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e076      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e073      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e070      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e06d      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a54:	2310      	movs	r3, #16
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e06a      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <UART_SetConfig+0x2e4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d138      	bne.n	8004ad6 <UART_SetConfig+0x2ee>
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <UART_SetConfig+0x2cc>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a72:	d017      	beq.n	8004aa4 <UART_SetConfig+0x2bc>
 8004a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a78:	d82a      	bhi.n	8004ad0 <UART_SetConfig+0x2e8>
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	d00b      	beq.n	8004a98 <UART_SetConfig+0x2b0>
 8004a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a84:	d824      	bhi.n	8004ad0 <UART_SetConfig+0x2e8>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <UART_SetConfig+0x2aa>
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d006      	beq.n	8004a9e <UART_SetConfig+0x2b6>
 8004a90:	e01e      	b.n	8004ad0 <UART_SetConfig+0x2e8>
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e04b      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e048      	b.n	8004b30 <UART_SetConfig+0x348>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e045      	b.n	8004b30 <UART_SetConfig+0x348>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e042      	b.n	8004b30 <UART_SetConfig+0x348>
 8004aaa:	bf00      	nop
 8004aac:	efff69f3 	.word	0xefff69f3
 8004ab0:	40011000 	.word	0x40011000
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40004400 	.word	0x40004400
 8004abc:	40004800 	.word	0x40004800
 8004ac0:	40004c00 	.word	0x40004c00
 8004ac4:	40005000 	.word	0x40005000
 8004ac8:	40011400 	.word	0x40011400
 8004acc:	40007800 	.word	0x40007800
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e02c      	b.n	8004b30 <UART_SetConfig+0x348>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a72      	ldr	r2, [pc, #456]	; (8004ca4 <UART_SetConfig+0x4bc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d125      	bne.n	8004b2c <UART_SetConfig+0x344>
 8004ae0:	4b71      	ldr	r3, [pc, #452]	; (8004ca8 <UART_SetConfig+0x4c0>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004aea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004aee:	d017      	beq.n	8004b20 <UART_SetConfig+0x338>
 8004af0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004af4:	d817      	bhi.n	8004b26 <UART_SetConfig+0x33e>
 8004af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afa:	d00b      	beq.n	8004b14 <UART_SetConfig+0x32c>
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b00:	d811      	bhi.n	8004b26 <UART_SetConfig+0x33e>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <UART_SetConfig+0x326>
 8004b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0a:	d006      	beq.n	8004b1a <UART_SetConfig+0x332>
 8004b0c:	e00b      	b.n	8004b26 <UART_SetConfig+0x33e>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e00d      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b14:	2302      	movs	r3, #2
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e00a      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e007      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b20:	2308      	movs	r3, #8
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e004      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b26:	2310      	movs	r3, #16
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e001      	b.n	8004b30 <UART_SetConfig+0x348>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	d15b      	bne.n	8004bf2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b3a:	7ffb      	ldrb	r3, [r7, #31]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d828      	bhi.n	8004b92 <UART_SetConfig+0x3aa>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x360>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b93 	.word	0x08004b93
 8004b58:	08004b83 	.word	0x08004b83
 8004b5c:	08004b93 	.word	0x08004b93
 8004b60:	08004b93 	.word	0x08004b93
 8004b64:	08004b93 	.word	0x08004b93
 8004b68:	08004b8b 	.word	0x08004b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f7fe fc52 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004b70:	61b8      	str	r0, [r7, #24]
        break;
 8004b72:	e013      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fe fc62 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8004b78:	61b8      	str	r0, [r7, #24]
        break;
 8004b7a:	e00f      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <UART_SetConfig+0x4c4>)
 8004b7e:	61bb      	str	r3, [r7, #24]
        break;
 8004b80:	e00c      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b82:	f7fe fb37 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8004b86:	61b8      	str	r0, [r7, #24]
        break;
 8004b88:	e008      	b.n	8004b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	61bb      	str	r3, [r7, #24]
        break;
 8004b90:	e004      	b.n	8004b9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	77bb      	strb	r3, [r7, #30]
        break;
 8004b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d074      	beq.n	8004c8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	005a      	lsls	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d916      	bls.n	8004bec <UART_SetConfig+0x404>
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d212      	bcs.n	8004bec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f023 030f 	bic.w	r3, r3, #15
 8004bce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	89fa      	ldrh	r2, [r7, #14]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e04f      	b.n	8004c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	77bb      	strb	r3, [r7, #30]
 8004bf0:	e04c      	b.n	8004c8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf2:	7ffb      	ldrb	r3, [r7, #31]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d828      	bhi.n	8004c4a <UART_SetConfig+0x462>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0x418>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c3b 	.word	0x08004c3b
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c4b 	.word	0x08004c4b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7fe fbf6 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004c28:	61b8      	str	r0, [r7, #24]
        break;
 8004c2a:	e013      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7fe fc06 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8004c30:	61b8      	str	r0, [r7, #24]
        break;
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <UART_SetConfig+0x4c4>)
 8004c36:	61bb      	str	r3, [r7, #24]
        break;
 8004c38:	e00c      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe fadb 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8004c3e:	61b8      	str	r0, [r7, #24]
        break;
 8004c40:	e008      	b.n	8004c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	61bb      	str	r3, [r7, #24]
        break;
 8004c48:	e004      	b.n	8004c54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	77bb      	strb	r3, [r7, #30]
        break;
 8004c52:	bf00      	nop
    }

    if (pclk != 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d018      	beq.n	8004c8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085a      	lsrs	r2, r3, #1
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	441a      	add	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b0f      	cmp	r3, #15
 8004c72:	d909      	bls.n	8004c88 <UART_SetConfig+0x4a0>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d205      	bcs.n	8004c88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60da      	str	r2, [r3, #12]
 8004c86:	e001      	b.n	8004c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c98:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40007c00 	.word	0x40007c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dae:	d10a      	bne.n	8004dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e04:	f7fc fdbc 	bl	8001980 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d10e      	bne.n	8004e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f831 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e027      	b.n	8004e86 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d10e      	bne.n	8004e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f81b 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e011      	b.n	8004e86 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b09c      	sub	sp, #112	; 0x70
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	e0a7      	b.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea6:	f000 80a3 	beq.w	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fc fd69 	bl	8001980 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d13f      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	663b      	str	r3, [r7, #96]	; 0x60
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f12:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e068      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d050      	beq.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5c:	d148      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f66:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
 8004f88:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e6      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fba:	623a      	str	r2, [r7, #32]
 8004fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	69f9      	ldr	r1, [r7, #28]
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e010      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	429a      	cmp	r2, r3
 800500c:	f43f af48 	beq.w	8004ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3770      	adds	r7, #112	; 0x70
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	2000000c 	.word	0x2000000c

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4d0d      	ldr	r5, [pc, #52]	; (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	; (8005064 <__libc_init_array+0x3c>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2600      	movs	r6, #0
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4d0b      	ldr	r5, [pc, #44]	; (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	; (800506c <__libc_init_array+0x44>)
 800503c:	f004 fb88 	bl	8009750 <_init>
 8005040:	1b64      	subs	r4, r4, r5
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2600      	movs	r6, #0
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	08009c74 	.word	0x08009c74
 8005064:	08009c74 	.word	0x08009c74
 8005068:	08009c74 	.word	0x08009c74
 800506c:	08009c78 	.word	0x08009c78

08005070 <memset>:
 8005070:	4402      	add	r2, r0
 8005072:	4603      	mov	r3, r0
 8005074:	4293      	cmp	r3, r2
 8005076:	d100      	bne.n	800507a <memset+0xa>
 8005078:	4770      	bx	lr
 800507a:	f803 1b01 	strb.w	r1, [r3], #1
 800507e:	e7f9      	b.n	8005074 <memset+0x4>

08005080 <__cvt>:
 8005080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005082:	ed2d 8b02 	vpush	{d8}
 8005086:	eeb0 8b40 	vmov.f64	d8, d0
 800508a:	b085      	sub	sp, #20
 800508c:	4617      	mov	r7, r2
 800508e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005090:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005092:	ee18 2a90 	vmov	r2, s17
 8005096:	f025 0520 	bic.w	r5, r5, #32
 800509a:	2a00      	cmp	r2, #0
 800509c:	bfb6      	itet	lt
 800509e:	222d      	movlt	r2, #45	; 0x2d
 80050a0:	2200      	movge	r2, #0
 80050a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80050a6:	2d46      	cmp	r5, #70	; 0x46
 80050a8:	460c      	mov	r4, r1
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	d004      	beq.n	80050b8 <__cvt+0x38>
 80050ae:	2d45      	cmp	r5, #69	; 0x45
 80050b0:	d100      	bne.n	80050b4 <__cvt+0x34>
 80050b2:	3401      	adds	r4, #1
 80050b4:	2102      	movs	r1, #2
 80050b6:	e000      	b.n	80050ba <__cvt+0x3a>
 80050b8:	2103      	movs	r1, #3
 80050ba:	ab03      	add	r3, sp, #12
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	ab02      	add	r3, sp, #8
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	4622      	mov	r2, r4
 80050c4:	4633      	mov	r3, r6
 80050c6:	eeb0 0b48 	vmov.f64	d0, d8
 80050ca:	f001 fd2d 	bl	8006b28 <_dtoa_r>
 80050ce:	2d47      	cmp	r5, #71	; 0x47
 80050d0:	d101      	bne.n	80050d6 <__cvt+0x56>
 80050d2:	07fb      	lsls	r3, r7, #31
 80050d4:	d51a      	bpl.n	800510c <__cvt+0x8c>
 80050d6:	2d46      	cmp	r5, #70	; 0x46
 80050d8:	eb00 0204 	add.w	r2, r0, r4
 80050dc:	d10c      	bne.n	80050f8 <__cvt+0x78>
 80050de:	7803      	ldrb	r3, [r0, #0]
 80050e0:	2b30      	cmp	r3, #48	; 0x30
 80050e2:	d107      	bne.n	80050f4 <__cvt+0x74>
 80050e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80050e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ec:	bf1c      	itt	ne
 80050ee:	f1c4 0401 	rsbne	r4, r4, #1
 80050f2:	6034      	strne	r4, [r6, #0]
 80050f4:	6833      	ldr	r3, [r6, #0]
 80050f6:	441a      	add	r2, r3
 80050f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80050fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005100:	bf08      	it	eq
 8005102:	9203      	streq	r2, [sp, #12]
 8005104:	2130      	movs	r1, #48	; 0x30
 8005106:	9b03      	ldr	r3, [sp, #12]
 8005108:	4293      	cmp	r3, r2
 800510a:	d307      	bcc.n	800511c <__cvt+0x9c>
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005110:	1a1b      	subs	r3, r3, r0
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	b005      	add	sp, #20
 8005116:	ecbd 8b02 	vpop	{d8}
 800511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511c:	1c5c      	adds	r4, r3, #1
 800511e:	9403      	str	r4, [sp, #12]
 8005120:	7019      	strb	r1, [r3, #0]
 8005122:	e7f0      	b.n	8005106 <__cvt+0x86>

08005124 <__exponent>:
 8005124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005126:	4603      	mov	r3, r0
 8005128:	2900      	cmp	r1, #0
 800512a:	bfb8      	it	lt
 800512c:	4249      	neglt	r1, r1
 800512e:	f803 2b02 	strb.w	r2, [r3], #2
 8005132:	bfb4      	ite	lt
 8005134:	222d      	movlt	r2, #45	; 0x2d
 8005136:	222b      	movge	r2, #43	; 0x2b
 8005138:	2909      	cmp	r1, #9
 800513a:	7042      	strb	r2, [r0, #1]
 800513c:	dd2a      	ble.n	8005194 <__exponent+0x70>
 800513e:	f10d 0407 	add.w	r4, sp, #7
 8005142:	46a4      	mov	ip, r4
 8005144:	270a      	movs	r7, #10
 8005146:	46a6      	mov	lr, r4
 8005148:	460a      	mov	r2, r1
 800514a:	fb91 f6f7 	sdiv	r6, r1, r7
 800514e:	fb07 1516 	mls	r5, r7, r6, r1
 8005152:	3530      	adds	r5, #48	; 0x30
 8005154:	2a63      	cmp	r2, #99	; 0x63
 8005156:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800515a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800515e:	4631      	mov	r1, r6
 8005160:	dcf1      	bgt.n	8005146 <__exponent+0x22>
 8005162:	3130      	adds	r1, #48	; 0x30
 8005164:	f1ae 0502 	sub.w	r5, lr, #2
 8005168:	f804 1c01 	strb.w	r1, [r4, #-1]
 800516c:	1c44      	adds	r4, r0, #1
 800516e:	4629      	mov	r1, r5
 8005170:	4561      	cmp	r1, ip
 8005172:	d30a      	bcc.n	800518a <__exponent+0x66>
 8005174:	f10d 0209 	add.w	r2, sp, #9
 8005178:	eba2 020e 	sub.w	r2, r2, lr
 800517c:	4565      	cmp	r5, ip
 800517e:	bf88      	it	hi
 8005180:	2200      	movhi	r2, #0
 8005182:	4413      	add	r3, r2
 8005184:	1a18      	subs	r0, r3, r0
 8005186:	b003      	add	sp, #12
 8005188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800518e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005192:	e7ed      	b.n	8005170 <__exponent+0x4c>
 8005194:	2330      	movs	r3, #48	; 0x30
 8005196:	3130      	adds	r1, #48	; 0x30
 8005198:	7083      	strb	r3, [r0, #2]
 800519a:	70c1      	strb	r1, [r0, #3]
 800519c:	1d03      	adds	r3, r0, #4
 800519e:	e7f1      	b.n	8005184 <__exponent+0x60>

080051a0 <_printf_float>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b08b      	sub	sp, #44	; 0x2c
 80051a6:	460c      	mov	r4, r1
 80051a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80051ac:	4616      	mov	r6, r2
 80051ae:	461f      	mov	r7, r3
 80051b0:	4605      	mov	r5, r0
 80051b2:	f002 fd97 	bl	8007ce4 <_localeconv_r>
 80051b6:	f8d0 b000 	ldr.w	fp, [r0]
 80051ba:	4658      	mov	r0, fp
 80051bc:	f7fb f840 	bl	8000240 <strlen>
 80051c0:	2300      	movs	r3, #0
 80051c2:	9308      	str	r3, [sp, #32]
 80051c4:	f8d8 3000 	ldr.w	r3, [r8]
 80051c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	3307      	adds	r3, #7
 80051d0:	f023 0307 	bic.w	r3, r3, #7
 80051d4:	f103 0108 	add.w	r1, r3, #8
 80051d8:	f8c8 1000 	str.w	r1, [r8]
 80051dc:	4682      	mov	sl, r0
 80051de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80051e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005448 <_printf_float+0x2a8>
 80051ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80051ee:	eeb0 6bc0 	vabs.f64	d6, d0
 80051f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	dd24      	ble.n	8005246 <_printf_float+0xa6>
 80051fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	d502      	bpl.n	800520c <_printf_float+0x6c>
 8005206:	232d      	movs	r3, #45	; 0x2d
 8005208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520c:	4b90      	ldr	r3, [pc, #576]	; (8005450 <_printf_float+0x2b0>)
 800520e:	4891      	ldr	r0, [pc, #580]	; (8005454 <_printf_float+0x2b4>)
 8005210:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005214:	bf94      	ite	ls
 8005216:	4698      	movls	r8, r3
 8005218:	4680      	movhi	r8, r0
 800521a:	2303      	movs	r3, #3
 800521c:	6123      	str	r3, [r4, #16]
 800521e:	f022 0204 	bic.w	r2, r2, #4
 8005222:	2300      	movs	r3, #0
 8005224:	6022      	str	r2, [r4, #0]
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	9700      	str	r7, [sp, #0]
 800522a:	4633      	mov	r3, r6
 800522c:	aa09      	add	r2, sp, #36	; 0x24
 800522e:	4621      	mov	r1, r4
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f9d3 	bl	80055dc <_printf_common>
 8005236:	3001      	adds	r0, #1
 8005238:	f040 808a 	bne.w	8005350 <_printf_float+0x1b0>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005240:	b00b      	add	sp, #44	; 0x2c
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005246:	eeb4 0b40 	vcmp.f64	d0, d0
 800524a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524e:	d709      	bvc.n	8005264 <_printf_float+0xc4>
 8005250:	ee10 3a90 	vmov	r3, s1
 8005254:	2b00      	cmp	r3, #0
 8005256:	bfbc      	itt	lt
 8005258:	232d      	movlt	r3, #45	; 0x2d
 800525a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800525e:	487e      	ldr	r0, [pc, #504]	; (8005458 <_printf_float+0x2b8>)
 8005260:	4b7e      	ldr	r3, [pc, #504]	; (800545c <_printf_float+0x2bc>)
 8005262:	e7d5      	b.n	8005210 <_printf_float+0x70>
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800526a:	9104      	str	r1, [sp, #16]
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	d13c      	bne.n	80052ea <_printf_float+0x14a>
 8005270:	2306      	movs	r3, #6
 8005272:	6063      	str	r3, [r4, #4]
 8005274:	2300      	movs	r3, #0
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	ab08      	add	r3, sp, #32
 800527a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800527e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005282:	ab07      	add	r3, sp, #28
 8005284:	6861      	ldr	r1, [r4, #4]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	6022      	str	r2, [r4, #0]
 800528a:	f10d 031b 	add.w	r3, sp, #27
 800528e:	4628      	mov	r0, r5
 8005290:	f7ff fef6 	bl	8005080 <__cvt>
 8005294:	9b04      	ldr	r3, [sp, #16]
 8005296:	9907      	ldr	r1, [sp, #28]
 8005298:	2b47      	cmp	r3, #71	; 0x47
 800529a:	4680      	mov	r8, r0
 800529c:	d108      	bne.n	80052b0 <_printf_float+0x110>
 800529e:	1cc8      	adds	r0, r1, #3
 80052a0:	db02      	blt.n	80052a8 <_printf_float+0x108>
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	4299      	cmp	r1, r3
 80052a6:	dd41      	ble.n	800532c <_printf_float+0x18c>
 80052a8:	f1a9 0902 	sub.w	r9, r9, #2
 80052ac:	fa5f f989 	uxtb.w	r9, r9
 80052b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052b4:	d820      	bhi.n	80052f8 <_printf_float+0x158>
 80052b6:	3901      	subs	r1, #1
 80052b8:	464a      	mov	r2, r9
 80052ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052be:	9107      	str	r1, [sp, #28]
 80052c0:	f7ff ff30 	bl	8005124 <__exponent>
 80052c4:	9a08      	ldr	r2, [sp, #32]
 80052c6:	9004      	str	r0, [sp, #16]
 80052c8:	1813      	adds	r3, r2, r0
 80052ca:	2a01      	cmp	r2, #1
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	dc02      	bgt.n	80052d6 <_printf_float+0x136>
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	07d2      	lsls	r2, r2, #31
 80052d4:	d501      	bpl.n	80052da <_printf_float+0x13a>
 80052d6:	3301      	adds	r3, #1
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0a2      	beq.n	8005228 <_printf_float+0x88>
 80052e2:	232d      	movs	r3, #45	; 0x2d
 80052e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e8:	e79e      	b.n	8005228 <_printf_float+0x88>
 80052ea:	9904      	ldr	r1, [sp, #16]
 80052ec:	2947      	cmp	r1, #71	; 0x47
 80052ee:	d1c1      	bne.n	8005274 <_printf_float+0xd4>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1bf      	bne.n	8005274 <_printf_float+0xd4>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e7bc      	b.n	8005272 <_printf_float+0xd2>
 80052f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052fc:	d118      	bne.n	8005330 <_printf_float+0x190>
 80052fe:	2900      	cmp	r1, #0
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	dd0b      	ble.n	800531c <_printf_float+0x17c>
 8005304:	6121      	str	r1, [r4, #16]
 8005306:	b913      	cbnz	r3, 800530e <_printf_float+0x16e>
 8005308:	6822      	ldr	r2, [r4, #0]
 800530a:	07d0      	lsls	r0, r2, #31
 800530c:	d502      	bpl.n	8005314 <_printf_float+0x174>
 800530e:	3301      	adds	r3, #1
 8005310:	440b      	add	r3, r1
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	2300      	movs	r3, #0
 8005316:	65a1      	str	r1, [r4, #88]	; 0x58
 8005318:	9304      	str	r3, [sp, #16]
 800531a:	e7de      	b.n	80052da <_printf_float+0x13a>
 800531c:	b913      	cbnz	r3, 8005324 <_printf_float+0x184>
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	07d2      	lsls	r2, r2, #31
 8005322:	d501      	bpl.n	8005328 <_printf_float+0x188>
 8005324:	3302      	adds	r3, #2
 8005326:	e7f4      	b.n	8005312 <_printf_float+0x172>
 8005328:	2301      	movs	r3, #1
 800532a:	e7f2      	b.n	8005312 <_printf_float+0x172>
 800532c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005330:	9b08      	ldr	r3, [sp, #32]
 8005332:	4299      	cmp	r1, r3
 8005334:	db05      	blt.n	8005342 <_printf_float+0x1a2>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	6121      	str	r1, [r4, #16]
 800533a:	07d8      	lsls	r0, r3, #31
 800533c:	d5ea      	bpl.n	8005314 <_printf_float+0x174>
 800533e:	1c4b      	adds	r3, r1, #1
 8005340:	e7e7      	b.n	8005312 <_printf_float+0x172>
 8005342:	2900      	cmp	r1, #0
 8005344:	bfd4      	ite	le
 8005346:	f1c1 0202 	rsble	r2, r1, #2
 800534a:	2201      	movgt	r2, #1
 800534c:	4413      	add	r3, r2
 800534e:	e7e0      	b.n	8005312 <_printf_float+0x172>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	055a      	lsls	r2, r3, #21
 8005354:	d407      	bmi.n	8005366 <_printf_float+0x1c6>
 8005356:	6923      	ldr	r3, [r4, #16]
 8005358:	4642      	mov	r2, r8
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	d12a      	bne.n	80053ba <_printf_float+0x21a>
 8005364:	e76a      	b.n	800523c <_printf_float+0x9c>
 8005366:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800536a:	f240 80e2 	bls.w	8005532 <_printf_float+0x392>
 800536e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005372:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	d133      	bne.n	80053e4 <_printf_float+0x244>
 800537c:	4a38      	ldr	r2, [pc, #224]	; (8005460 <_printf_float+0x2c0>)
 800537e:	2301      	movs	r3, #1
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f af58 	beq.w	800523c <_printf_float+0x9c>
 800538c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005390:	429a      	cmp	r2, r3
 8005392:	db02      	blt.n	800539a <_printf_float+0x1fa>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07d8      	lsls	r0, r3, #31
 8005398:	d50f      	bpl.n	80053ba <_printf_float+0x21a>
 800539a:	4653      	mov	r3, sl
 800539c:	465a      	mov	r2, fp
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f af49 	beq.w	800523c <_printf_float+0x9c>
 80053aa:	f04f 0800 	mov.w	r8, #0
 80053ae:	f104 091a 	add.w	r9, r4, #26
 80053b2:	9b08      	ldr	r3, [sp, #32]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4543      	cmp	r3, r8
 80053b8:	dc09      	bgt.n	80053ce <_printf_float+0x22e>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	079b      	lsls	r3, r3, #30
 80053be:	f100 8108 	bmi.w	80055d2 <_printf_float+0x432>
 80053c2:	68e0      	ldr	r0, [r4, #12]
 80053c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c6:	4298      	cmp	r0, r3
 80053c8:	bfb8      	it	lt
 80053ca:	4618      	movlt	r0, r3
 80053cc:	e738      	b.n	8005240 <_printf_float+0xa0>
 80053ce:	2301      	movs	r3, #1
 80053d0:	464a      	mov	r2, r9
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f af2f 	beq.w	800523c <_printf_float+0x9c>
 80053de:	f108 0801 	add.w	r8, r8, #1
 80053e2:	e7e6      	b.n	80053b2 <_printf_float+0x212>
 80053e4:	9b07      	ldr	r3, [sp, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	dc3c      	bgt.n	8005464 <_printf_float+0x2c4>
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <_printf_float+0x2c0>)
 80053ec:	2301      	movs	r3, #1
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f af21 	beq.w	800523c <_printf_float+0x9c>
 80053fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80053fe:	4313      	orrs	r3, r2
 8005400:	d102      	bne.n	8005408 <_printf_float+0x268>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	07d9      	lsls	r1, r3, #31
 8005406:	d5d8      	bpl.n	80053ba <_printf_float+0x21a>
 8005408:	4653      	mov	r3, sl
 800540a:	465a      	mov	r2, fp
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	f43f af12 	beq.w	800523c <_printf_float+0x9c>
 8005418:	f04f 0900 	mov.w	r9, #0
 800541c:	f104 0a1a 	add.w	sl, r4, #26
 8005420:	9b07      	ldr	r3, [sp, #28]
 8005422:	425b      	negs	r3, r3
 8005424:	454b      	cmp	r3, r9
 8005426:	dc01      	bgt.n	800542c <_printf_float+0x28c>
 8005428:	9b08      	ldr	r3, [sp, #32]
 800542a:	e795      	b.n	8005358 <_printf_float+0x1b8>
 800542c:	2301      	movs	r3, #1
 800542e:	4652      	mov	r2, sl
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f af00 	beq.w	800523c <_printf_float+0x9c>
 800543c:	f109 0901 	add.w	r9, r9, #1
 8005440:	e7ee      	b.n	8005420 <_printf_float+0x280>
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	ffffffff 	.word	0xffffffff
 800544c:	7fefffff 	.word	0x7fefffff
 8005450:	080097cc 	.word	0x080097cc
 8005454:	080097d0 	.word	0x080097d0
 8005458:	080097d8 	.word	0x080097d8
 800545c:	080097d4 	.word	0x080097d4
 8005460:	080097dc 	.word	0x080097dc
 8005464:	9a08      	ldr	r2, [sp, #32]
 8005466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005468:	429a      	cmp	r2, r3
 800546a:	bfa8      	it	ge
 800546c:	461a      	movge	r2, r3
 800546e:	2a00      	cmp	r2, #0
 8005470:	4691      	mov	r9, r2
 8005472:	dc38      	bgt.n	80054e6 <_printf_float+0x346>
 8005474:	2300      	movs	r3, #0
 8005476:	9305      	str	r3, [sp, #20]
 8005478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800547c:	f104 021a 	add.w	r2, r4, #26
 8005480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005482:	9905      	ldr	r1, [sp, #20]
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	eba3 0309 	sub.w	r3, r3, r9
 800548a:	428b      	cmp	r3, r1
 800548c:	dc33      	bgt.n	80054f6 <_printf_float+0x356>
 800548e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005492:	429a      	cmp	r2, r3
 8005494:	db3c      	blt.n	8005510 <_printf_float+0x370>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	07da      	lsls	r2, r3, #31
 800549a:	d439      	bmi.n	8005510 <_printf_float+0x370>
 800549c:	9b08      	ldr	r3, [sp, #32]
 800549e:	9a04      	ldr	r2, [sp, #16]
 80054a0:	9907      	ldr	r1, [sp, #28]
 80054a2:	1a9a      	subs	r2, r3, r2
 80054a4:	eba3 0901 	sub.w	r9, r3, r1
 80054a8:	4591      	cmp	r9, r2
 80054aa:	bfa8      	it	ge
 80054ac:	4691      	movge	r9, r2
 80054ae:	f1b9 0f00 	cmp.w	r9, #0
 80054b2:	dc35      	bgt.n	8005520 <_printf_float+0x380>
 80054b4:	f04f 0800 	mov.w	r8, #0
 80054b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054bc:	f104 0a1a 	add.w	sl, r4, #26
 80054c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	eba3 0309 	sub.w	r3, r3, r9
 80054ca:	4543      	cmp	r3, r8
 80054cc:	f77f af75 	ble.w	80053ba <_printf_float+0x21a>
 80054d0:	2301      	movs	r3, #1
 80054d2:	4652      	mov	r2, sl
 80054d4:	4631      	mov	r1, r6
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	f43f aeae 	beq.w	800523c <_printf_float+0x9c>
 80054e0:	f108 0801 	add.w	r8, r8, #1
 80054e4:	e7ec      	b.n	80054c0 <_printf_float+0x320>
 80054e6:	4613      	mov	r3, r2
 80054e8:	4631      	mov	r1, r6
 80054ea:	4642      	mov	r2, r8
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	d1bf      	bne.n	8005474 <_printf_float+0x2d4>
 80054f4:	e6a2      	b.n	800523c <_printf_float+0x9c>
 80054f6:	2301      	movs	r3, #1
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	9204      	str	r2, [sp, #16]
 80054fe:	47b8      	blx	r7
 8005500:	3001      	adds	r0, #1
 8005502:	f43f ae9b 	beq.w	800523c <_printf_float+0x9c>
 8005506:	9b05      	ldr	r3, [sp, #20]
 8005508:	9a04      	ldr	r2, [sp, #16]
 800550a:	3301      	adds	r3, #1
 800550c:	9305      	str	r3, [sp, #20]
 800550e:	e7b7      	b.n	8005480 <_printf_float+0x2e0>
 8005510:	4653      	mov	r3, sl
 8005512:	465a      	mov	r2, fp
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	d1be      	bne.n	800549c <_printf_float+0x2fc>
 800551e:	e68d      	b.n	800523c <_printf_float+0x9c>
 8005520:	9a04      	ldr	r2, [sp, #16]
 8005522:	464b      	mov	r3, r9
 8005524:	4442      	add	r2, r8
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	d1c1      	bne.n	80054b4 <_printf_float+0x314>
 8005530:	e684      	b.n	800523c <_printf_float+0x9c>
 8005532:	9a08      	ldr	r2, [sp, #32]
 8005534:	2a01      	cmp	r2, #1
 8005536:	dc01      	bgt.n	800553c <_printf_float+0x39c>
 8005538:	07db      	lsls	r3, r3, #31
 800553a:	d537      	bpl.n	80055ac <_printf_float+0x40c>
 800553c:	2301      	movs	r3, #1
 800553e:	4642      	mov	r2, r8
 8005540:	4631      	mov	r1, r6
 8005542:	4628      	mov	r0, r5
 8005544:	47b8      	blx	r7
 8005546:	3001      	adds	r0, #1
 8005548:	f43f ae78 	beq.w	800523c <_printf_float+0x9c>
 800554c:	4653      	mov	r3, sl
 800554e:	465a      	mov	r2, fp
 8005550:	4631      	mov	r1, r6
 8005552:	4628      	mov	r0, r5
 8005554:	47b8      	blx	r7
 8005556:	3001      	adds	r0, #1
 8005558:	f43f ae70 	beq.w	800523c <_printf_float+0x9c>
 800555c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005560:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005568:	d01b      	beq.n	80055a2 <_printf_float+0x402>
 800556a:	9b08      	ldr	r3, [sp, #32]
 800556c:	f108 0201 	add.w	r2, r8, #1
 8005570:	3b01      	subs	r3, #1
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	d10e      	bne.n	800559a <_printf_float+0x3fa>
 800557c:	e65e      	b.n	800523c <_printf_float+0x9c>
 800557e:	2301      	movs	r3, #1
 8005580:	464a      	mov	r2, r9
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	f43f ae57 	beq.w	800523c <_printf_float+0x9c>
 800558e:	f108 0801 	add.w	r8, r8, #1
 8005592:	9b08      	ldr	r3, [sp, #32]
 8005594:	3b01      	subs	r3, #1
 8005596:	4543      	cmp	r3, r8
 8005598:	dcf1      	bgt.n	800557e <_printf_float+0x3de>
 800559a:	9b04      	ldr	r3, [sp, #16]
 800559c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055a0:	e6db      	b.n	800535a <_printf_float+0x1ba>
 80055a2:	f04f 0800 	mov.w	r8, #0
 80055a6:	f104 091a 	add.w	r9, r4, #26
 80055aa:	e7f2      	b.n	8005592 <_printf_float+0x3f2>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4642      	mov	r2, r8
 80055b0:	e7df      	b.n	8005572 <_printf_float+0x3d2>
 80055b2:	2301      	movs	r3, #1
 80055b4:	464a      	mov	r2, r9
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	f43f ae3d 	beq.w	800523c <_printf_float+0x9c>
 80055c2:	f108 0801 	add.w	r8, r8, #1
 80055c6:	68e3      	ldr	r3, [r4, #12]
 80055c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ca:	1a5b      	subs	r3, r3, r1
 80055cc:	4543      	cmp	r3, r8
 80055ce:	dcf0      	bgt.n	80055b2 <_printf_float+0x412>
 80055d0:	e6f7      	b.n	80053c2 <_printf_float+0x222>
 80055d2:	f04f 0800 	mov.w	r8, #0
 80055d6:	f104 0919 	add.w	r9, r4, #25
 80055da:	e7f4      	b.n	80055c6 <_printf_float+0x426>

080055dc <_printf_common>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	4616      	mov	r6, r2
 80055e2:	4699      	mov	r9, r3
 80055e4:	688a      	ldr	r2, [r1, #8]
 80055e6:	690b      	ldr	r3, [r1, #16]
 80055e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	bfb8      	it	lt
 80055f0:	4613      	movlt	r3, r2
 80055f2:	6033      	str	r3, [r6, #0]
 80055f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f8:	4607      	mov	r7, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	b10a      	cbz	r2, 8005602 <_printf_common+0x26>
 80055fe:	3301      	adds	r3, #1
 8005600:	6033      	str	r3, [r6, #0]
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	0699      	lsls	r1, r3, #26
 8005606:	bf42      	ittt	mi
 8005608:	6833      	ldrmi	r3, [r6, #0]
 800560a:	3302      	addmi	r3, #2
 800560c:	6033      	strmi	r3, [r6, #0]
 800560e:	6825      	ldr	r5, [r4, #0]
 8005610:	f015 0506 	ands.w	r5, r5, #6
 8005614:	d106      	bne.n	8005624 <_printf_common+0x48>
 8005616:	f104 0a19 	add.w	sl, r4, #25
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	6832      	ldr	r2, [r6, #0]
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	42ab      	cmp	r3, r5
 8005622:	dc26      	bgt.n	8005672 <_printf_common+0x96>
 8005624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005628:	1e13      	subs	r3, r2, #0
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	bf18      	it	ne
 800562e:	2301      	movne	r3, #1
 8005630:	0692      	lsls	r2, r2, #26
 8005632:	d42b      	bmi.n	800568c <_printf_common+0xb0>
 8005634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005638:	4649      	mov	r1, r9
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	3001      	adds	r0, #1
 8005640:	d01e      	beq.n	8005680 <_printf_common+0xa4>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	68e5      	ldr	r5, [r4, #12]
 8005646:	6832      	ldr	r2, [r6, #0]
 8005648:	f003 0306 	and.w	r3, r3, #6
 800564c:	2b04      	cmp	r3, #4
 800564e:	bf08      	it	eq
 8005650:	1aad      	subeq	r5, r5, r2
 8005652:	68a3      	ldr	r3, [r4, #8]
 8005654:	6922      	ldr	r2, [r4, #16]
 8005656:	bf0c      	ite	eq
 8005658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800565c:	2500      	movne	r5, #0
 800565e:	4293      	cmp	r3, r2
 8005660:	bfc4      	itt	gt
 8005662:	1a9b      	subgt	r3, r3, r2
 8005664:	18ed      	addgt	r5, r5, r3
 8005666:	2600      	movs	r6, #0
 8005668:	341a      	adds	r4, #26
 800566a:	42b5      	cmp	r5, r6
 800566c:	d11a      	bne.n	80056a4 <_printf_common+0xc8>
 800566e:	2000      	movs	r0, #0
 8005670:	e008      	b.n	8005684 <_printf_common+0xa8>
 8005672:	2301      	movs	r3, #1
 8005674:	4652      	mov	r2, sl
 8005676:	4649      	mov	r1, r9
 8005678:	4638      	mov	r0, r7
 800567a:	47c0      	blx	r8
 800567c:	3001      	adds	r0, #1
 800567e:	d103      	bne.n	8005688 <_printf_common+0xac>
 8005680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005688:	3501      	adds	r5, #1
 800568a:	e7c6      	b.n	800561a <_printf_common+0x3e>
 800568c:	18e1      	adds	r1, r4, r3
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	2030      	movs	r0, #48	; 0x30
 8005692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005696:	4422      	add	r2, r4
 8005698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800569c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056a0:	3302      	adds	r3, #2
 80056a2:	e7c7      	b.n	8005634 <_printf_common+0x58>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4622      	mov	r2, r4
 80056a8:	4649      	mov	r1, r9
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c0      	blx	r8
 80056ae:	3001      	adds	r0, #1
 80056b0:	d0e6      	beq.n	8005680 <_printf_common+0xa4>
 80056b2:	3601      	adds	r6, #1
 80056b4:	e7d9      	b.n	800566a <_printf_common+0x8e>
	...

080056b8 <_printf_i>:
 80056b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	7e0f      	ldrb	r7, [r1, #24]
 80056be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056c0:	2f78      	cmp	r7, #120	; 0x78
 80056c2:	4691      	mov	r9, r2
 80056c4:	4680      	mov	r8, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	469a      	mov	sl, r3
 80056ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056ce:	d807      	bhi.n	80056e0 <_printf_i+0x28>
 80056d0:	2f62      	cmp	r7, #98	; 0x62
 80056d2:	d80a      	bhi.n	80056ea <_printf_i+0x32>
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	f000 80d8 	beq.w	800588a <_printf_i+0x1d2>
 80056da:	2f58      	cmp	r7, #88	; 0x58
 80056dc:	f000 80a3 	beq.w	8005826 <_printf_i+0x16e>
 80056e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056e8:	e03a      	b.n	8005760 <_printf_i+0xa8>
 80056ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ee:	2b15      	cmp	r3, #21
 80056f0:	d8f6      	bhi.n	80056e0 <_printf_i+0x28>
 80056f2:	a101      	add	r1, pc, #4	; (adr r1, 80056f8 <_printf_i+0x40>)
 80056f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056f8:	08005751 	.word	0x08005751
 80056fc:	08005765 	.word	0x08005765
 8005700:	080056e1 	.word	0x080056e1
 8005704:	080056e1 	.word	0x080056e1
 8005708:	080056e1 	.word	0x080056e1
 800570c:	080056e1 	.word	0x080056e1
 8005710:	08005765 	.word	0x08005765
 8005714:	080056e1 	.word	0x080056e1
 8005718:	080056e1 	.word	0x080056e1
 800571c:	080056e1 	.word	0x080056e1
 8005720:	080056e1 	.word	0x080056e1
 8005724:	08005871 	.word	0x08005871
 8005728:	08005795 	.word	0x08005795
 800572c:	08005853 	.word	0x08005853
 8005730:	080056e1 	.word	0x080056e1
 8005734:	080056e1 	.word	0x080056e1
 8005738:	08005893 	.word	0x08005893
 800573c:	080056e1 	.word	0x080056e1
 8005740:	08005795 	.word	0x08005795
 8005744:	080056e1 	.word	0x080056e1
 8005748:	080056e1 	.word	0x080056e1
 800574c:	0800585b 	.word	0x0800585b
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	602a      	str	r2, [r5, #0]
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005760:	2301      	movs	r3, #1
 8005762:	e0a3      	b.n	80058ac <_printf_i+0x1f4>
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	6829      	ldr	r1, [r5, #0]
 8005768:	0606      	lsls	r6, r0, #24
 800576a:	f101 0304 	add.w	r3, r1, #4
 800576e:	d50a      	bpl.n	8005786 <_printf_i+0xce>
 8005770:	680e      	ldr	r6, [r1, #0]
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	2e00      	cmp	r6, #0
 8005776:	da03      	bge.n	8005780 <_printf_i+0xc8>
 8005778:	232d      	movs	r3, #45	; 0x2d
 800577a:	4276      	negs	r6, r6
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	485e      	ldr	r0, [pc, #376]	; (80058fc <_printf_i+0x244>)
 8005782:	230a      	movs	r3, #10
 8005784:	e019      	b.n	80057ba <_printf_i+0x102>
 8005786:	680e      	ldr	r6, [r1, #0]
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800578e:	bf18      	it	ne
 8005790:	b236      	sxthne	r6, r6
 8005792:	e7ef      	b.n	8005774 <_printf_i+0xbc>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	6820      	ldr	r0, [r4, #0]
 8005798:	1d19      	adds	r1, r3, #4
 800579a:	6029      	str	r1, [r5, #0]
 800579c:	0601      	lsls	r1, r0, #24
 800579e:	d501      	bpl.n	80057a4 <_printf_i+0xec>
 80057a0:	681e      	ldr	r6, [r3, #0]
 80057a2:	e002      	b.n	80057aa <_printf_i+0xf2>
 80057a4:	0646      	lsls	r6, r0, #25
 80057a6:	d5fb      	bpl.n	80057a0 <_printf_i+0xe8>
 80057a8:	881e      	ldrh	r6, [r3, #0]
 80057aa:	4854      	ldr	r0, [pc, #336]	; (80058fc <_printf_i+0x244>)
 80057ac:	2f6f      	cmp	r7, #111	; 0x6f
 80057ae:	bf0c      	ite	eq
 80057b0:	2308      	moveq	r3, #8
 80057b2:	230a      	movne	r3, #10
 80057b4:	2100      	movs	r1, #0
 80057b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ba:	6865      	ldr	r5, [r4, #4]
 80057bc:	60a5      	str	r5, [r4, #8]
 80057be:	2d00      	cmp	r5, #0
 80057c0:	bfa2      	ittt	ge
 80057c2:	6821      	ldrge	r1, [r4, #0]
 80057c4:	f021 0104 	bicge.w	r1, r1, #4
 80057c8:	6021      	strge	r1, [r4, #0]
 80057ca:	b90e      	cbnz	r6, 80057d0 <_printf_i+0x118>
 80057cc:	2d00      	cmp	r5, #0
 80057ce:	d04d      	beq.n	800586c <_printf_i+0x1b4>
 80057d0:	4615      	mov	r5, r2
 80057d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80057d6:	fb03 6711 	mls	r7, r3, r1, r6
 80057da:	5dc7      	ldrb	r7, [r0, r7]
 80057dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057e0:	4637      	mov	r7, r6
 80057e2:	42bb      	cmp	r3, r7
 80057e4:	460e      	mov	r6, r1
 80057e6:	d9f4      	bls.n	80057d2 <_printf_i+0x11a>
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d10b      	bne.n	8005804 <_printf_i+0x14c>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	07de      	lsls	r6, r3, #31
 80057f0:	d508      	bpl.n	8005804 <_printf_i+0x14c>
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	6861      	ldr	r1, [r4, #4]
 80057f6:	4299      	cmp	r1, r3
 80057f8:	bfde      	ittt	le
 80057fa:	2330      	movle	r3, #48	; 0x30
 80057fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005800:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005804:	1b52      	subs	r2, r2, r5
 8005806:	6122      	str	r2, [r4, #16]
 8005808:	f8cd a000 	str.w	sl, [sp]
 800580c:	464b      	mov	r3, r9
 800580e:	aa03      	add	r2, sp, #12
 8005810:	4621      	mov	r1, r4
 8005812:	4640      	mov	r0, r8
 8005814:	f7ff fee2 	bl	80055dc <_printf_common>
 8005818:	3001      	adds	r0, #1
 800581a:	d14c      	bne.n	80058b6 <_printf_i+0x1fe>
 800581c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005820:	b004      	add	sp, #16
 8005822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005826:	4835      	ldr	r0, [pc, #212]	; (80058fc <_printf_i+0x244>)
 8005828:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800582c:	6829      	ldr	r1, [r5, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f851 6b04 	ldr.w	r6, [r1], #4
 8005834:	6029      	str	r1, [r5, #0]
 8005836:	061d      	lsls	r5, r3, #24
 8005838:	d514      	bpl.n	8005864 <_printf_i+0x1ac>
 800583a:	07df      	lsls	r7, r3, #31
 800583c:	bf44      	itt	mi
 800583e:	f043 0320 	orrmi.w	r3, r3, #32
 8005842:	6023      	strmi	r3, [r4, #0]
 8005844:	b91e      	cbnz	r6, 800584e <_printf_i+0x196>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	f023 0320 	bic.w	r3, r3, #32
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	2310      	movs	r3, #16
 8005850:	e7b0      	b.n	80057b4 <_printf_i+0xfc>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	f043 0320 	orr.w	r3, r3, #32
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	2378      	movs	r3, #120	; 0x78
 800585c:	4828      	ldr	r0, [pc, #160]	; (8005900 <_printf_i+0x248>)
 800585e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005862:	e7e3      	b.n	800582c <_printf_i+0x174>
 8005864:	0659      	lsls	r1, r3, #25
 8005866:	bf48      	it	mi
 8005868:	b2b6      	uxthmi	r6, r6
 800586a:	e7e6      	b.n	800583a <_printf_i+0x182>
 800586c:	4615      	mov	r5, r2
 800586e:	e7bb      	b.n	80057e8 <_printf_i+0x130>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	6826      	ldr	r6, [r4, #0]
 8005874:	6961      	ldr	r1, [r4, #20]
 8005876:	1d18      	adds	r0, r3, #4
 8005878:	6028      	str	r0, [r5, #0]
 800587a:	0635      	lsls	r5, r6, #24
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	d501      	bpl.n	8005884 <_printf_i+0x1cc>
 8005880:	6019      	str	r1, [r3, #0]
 8005882:	e002      	b.n	800588a <_printf_i+0x1d2>
 8005884:	0670      	lsls	r0, r6, #25
 8005886:	d5fb      	bpl.n	8005880 <_printf_i+0x1c8>
 8005888:	8019      	strh	r1, [r3, #0]
 800588a:	2300      	movs	r3, #0
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	4615      	mov	r5, r2
 8005890:	e7ba      	b.n	8005808 <_printf_i+0x150>
 8005892:	682b      	ldr	r3, [r5, #0]
 8005894:	1d1a      	adds	r2, r3, #4
 8005896:	602a      	str	r2, [r5, #0]
 8005898:	681d      	ldr	r5, [r3, #0]
 800589a:	6862      	ldr	r2, [r4, #4]
 800589c:	2100      	movs	r1, #0
 800589e:	4628      	mov	r0, r5
 80058a0:	f7fa fcd6 	bl	8000250 <memchr>
 80058a4:	b108      	cbz	r0, 80058aa <_printf_i+0x1f2>
 80058a6:	1b40      	subs	r0, r0, r5
 80058a8:	6060      	str	r0, [r4, #4]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	2300      	movs	r3, #0
 80058b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b4:	e7a8      	b.n	8005808 <_printf_i+0x150>
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	462a      	mov	r2, r5
 80058ba:	4649      	mov	r1, r9
 80058bc:	4640      	mov	r0, r8
 80058be:	47d0      	blx	sl
 80058c0:	3001      	adds	r0, #1
 80058c2:	d0ab      	beq.n	800581c <_printf_i+0x164>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	079b      	lsls	r3, r3, #30
 80058c8:	d413      	bmi.n	80058f2 <_printf_i+0x23a>
 80058ca:	68e0      	ldr	r0, [r4, #12]
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	4298      	cmp	r0, r3
 80058d0:	bfb8      	it	lt
 80058d2:	4618      	movlt	r0, r3
 80058d4:	e7a4      	b.n	8005820 <_printf_i+0x168>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4632      	mov	r2, r6
 80058da:	4649      	mov	r1, r9
 80058dc:	4640      	mov	r0, r8
 80058de:	47d0      	blx	sl
 80058e0:	3001      	adds	r0, #1
 80058e2:	d09b      	beq.n	800581c <_printf_i+0x164>
 80058e4:	3501      	adds	r5, #1
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	9903      	ldr	r1, [sp, #12]
 80058ea:	1a5b      	subs	r3, r3, r1
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	dcf2      	bgt.n	80058d6 <_printf_i+0x21e>
 80058f0:	e7eb      	b.n	80058ca <_printf_i+0x212>
 80058f2:	2500      	movs	r5, #0
 80058f4:	f104 0619 	add.w	r6, r4, #25
 80058f8:	e7f5      	b.n	80058e6 <_printf_i+0x22e>
 80058fa:	bf00      	nop
 80058fc:	080097de 	.word	0x080097de
 8005900:	080097ef 	.word	0x080097ef

08005904 <_scanf_float>:
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	b087      	sub	sp, #28
 800590a:	4617      	mov	r7, r2
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	688b      	ldr	r3, [r1, #8]
 8005910:	1e5a      	subs	r2, r3, #1
 8005912:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005916:	bf83      	ittte	hi
 8005918:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800591c:	195b      	addhi	r3, r3, r5
 800591e:	9302      	strhi	r3, [sp, #8]
 8005920:	2300      	movls	r3, #0
 8005922:	bf86      	itte	hi
 8005924:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005928:	608b      	strhi	r3, [r1, #8]
 800592a:	9302      	strls	r3, [sp, #8]
 800592c:	680b      	ldr	r3, [r1, #0]
 800592e:	468b      	mov	fp, r1
 8005930:	2500      	movs	r5, #0
 8005932:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005936:	f84b 3b1c 	str.w	r3, [fp], #28
 800593a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800593e:	4680      	mov	r8, r0
 8005940:	460c      	mov	r4, r1
 8005942:	465e      	mov	r6, fp
 8005944:	46aa      	mov	sl, r5
 8005946:	46a9      	mov	r9, r5
 8005948:	9501      	str	r5, [sp, #4]
 800594a:	68a2      	ldr	r2, [r4, #8]
 800594c:	b152      	cbz	r2, 8005964 <_scanf_float+0x60>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b4e      	cmp	r3, #78	; 0x4e
 8005954:	d864      	bhi.n	8005a20 <_scanf_float+0x11c>
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d83c      	bhi.n	80059d4 <_scanf_float+0xd0>
 800595a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800595e:	b2c8      	uxtb	r0, r1
 8005960:	280e      	cmp	r0, #14
 8005962:	d93a      	bls.n	80059da <_scanf_float+0xd6>
 8005964:	f1b9 0f00 	cmp.w	r9, #0
 8005968:	d003      	beq.n	8005972 <_scanf_float+0x6e>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005976:	f1ba 0f01 	cmp.w	sl, #1
 800597a:	f200 8113 	bhi.w	8005ba4 <_scanf_float+0x2a0>
 800597e:	455e      	cmp	r6, fp
 8005980:	f200 8105 	bhi.w	8005b8e <_scanf_float+0x28a>
 8005984:	2501      	movs	r5, #1
 8005986:	4628      	mov	r0, r5
 8005988:	b007      	add	sp, #28
 800598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005992:	2a0d      	cmp	r2, #13
 8005994:	d8e6      	bhi.n	8005964 <_scanf_float+0x60>
 8005996:	a101      	add	r1, pc, #4	; (adr r1, 800599c <_scanf_float+0x98>)
 8005998:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800599c:	08005adb 	.word	0x08005adb
 80059a0:	08005965 	.word	0x08005965
 80059a4:	08005965 	.word	0x08005965
 80059a8:	08005965 	.word	0x08005965
 80059ac:	08005b3b 	.word	0x08005b3b
 80059b0:	08005b13 	.word	0x08005b13
 80059b4:	08005965 	.word	0x08005965
 80059b8:	08005965 	.word	0x08005965
 80059bc:	08005ae9 	.word	0x08005ae9
 80059c0:	08005965 	.word	0x08005965
 80059c4:	08005965 	.word	0x08005965
 80059c8:	08005965 	.word	0x08005965
 80059cc:	08005965 	.word	0x08005965
 80059d0:	08005aa1 	.word	0x08005aa1
 80059d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80059d8:	e7db      	b.n	8005992 <_scanf_float+0x8e>
 80059da:	290e      	cmp	r1, #14
 80059dc:	d8c2      	bhi.n	8005964 <_scanf_float+0x60>
 80059de:	a001      	add	r0, pc, #4	; (adr r0, 80059e4 <_scanf_float+0xe0>)
 80059e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059e4:	08005a93 	.word	0x08005a93
 80059e8:	08005965 	.word	0x08005965
 80059ec:	08005a93 	.word	0x08005a93
 80059f0:	08005b27 	.word	0x08005b27
 80059f4:	08005965 	.word	0x08005965
 80059f8:	08005a41 	.word	0x08005a41
 80059fc:	08005a7d 	.word	0x08005a7d
 8005a00:	08005a7d 	.word	0x08005a7d
 8005a04:	08005a7d 	.word	0x08005a7d
 8005a08:	08005a7d 	.word	0x08005a7d
 8005a0c:	08005a7d 	.word	0x08005a7d
 8005a10:	08005a7d 	.word	0x08005a7d
 8005a14:	08005a7d 	.word	0x08005a7d
 8005a18:	08005a7d 	.word	0x08005a7d
 8005a1c:	08005a7d 	.word	0x08005a7d
 8005a20:	2b6e      	cmp	r3, #110	; 0x6e
 8005a22:	d809      	bhi.n	8005a38 <_scanf_float+0x134>
 8005a24:	2b60      	cmp	r3, #96	; 0x60
 8005a26:	d8b2      	bhi.n	800598e <_scanf_float+0x8a>
 8005a28:	2b54      	cmp	r3, #84	; 0x54
 8005a2a:	d077      	beq.n	8005b1c <_scanf_float+0x218>
 8005a2c:	2b59      	cmp	r3, #89	; 0x59
 8005a2e:	d199      	bne.n	8005964 <_scanf_float+0x60>
 8005a30:	2d07      	cmp	r5, #7
 8005a32:	d197      	bne.n	8005964 <_scanf_float+0x60>
 8005a34:	2508      	movs	r5, #8
 8005a36:	e029      	b.n	8005a8c <_scanf_float+0x188>
 8005a38:	2b74      	cmp	r3, #116	; 0x74
 8005a3a:	d06f      	beq.n	8005b1c <_scanf_float+0x218>
 8005a3c:	2b79      	cmp	r3, #121	; 0x79
 8005a3e:	e7f6      	b.n	8005a2e <_scanf_float+0x12a>
 8005a40:	6821      	ldr	r1, [r4, #0]
 8005a42:	05c8      	lsls	r0, r1, #23
 8005a44:	d51a      	bpl.n	8005a7c <_scanf_float+0x178>
 8005a46:	9b02      	ldr	r3, [sp, #8]
 8005a48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a4c:	6021      	str	r1, [r4, #0]
 8005a4e:	f109 0901 	add.w	r9, r9, #1
 8005a52:	b11b      	cbz	r3, 8005a5c <_scanf_float+0x158>
 8005a54:	3b01      	subs	r3, #1
 8005a56:	3201      	adds	r2, #1
 8005a58:	9302      	str	r3, [sp, #8]
 8005a5a:	60a2      	str	r2, [r4, #8]
 8005a5c:	68a3      	ldr	r3, [r4, #8]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	60a3      	str	r3, [r4, #8]
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	3301      	adds	r3, #1
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	f340 8084 	ble.w	8005b7c <_scanf_float+0x278>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	3301      	adds	r3, #1
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	e766      	b.n	800594a <_scanf_float+0x46>
 8005a7c:	eb1a 0f05 	cmn.w	sl, r5
 8005a80:	f47f af70 	bne.w	8005964 <_scanf_float+0x60>
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005a8a:	6022      	str	r2, [r4, #0]
 8005a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a90:	e7e4      	b.n	8005a5c <_scanf_float+0x158>
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	0610      	lsls	r0, r2, #24
 8005a96:	f57f af65 	bpl.w	8005964 <_scanf_float+0x60>
 8005a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a9e:	e7f4      	b.n	8005a8a <_scanf_float+0x186>
 8005aa0:	f1ba 0f00 	cmp.w	sl, #0
 8005aa4:	d10e      	bne.n	8005ac4 <_scanf_float+0x1c0>
 8005aa6:	f1b9 0f00 	cmp.w	r9, #0
 8005aaa:	d10e      	bne.n	8005aca <_scanf_float+0x1c6>
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ab2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ab6:	d108      	bne.n	8005aca <_scanf_float+0x1c6>
 8005ab8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005abc:	6022      	str	r2, [r4, #0]
 8005abe:	f04f 0a01 	mov.w	sl, #1
 8005ac2:	e7e3      	b.n	8005a8c <_scanf_float+0x188>
 8005ac4:	f1ba 0f02 	cmp.w	sl, #2
 8005ac8:	d055      	beq.n	8005b76 <_scanf_float+0x272>
 8005aca:	2d01      	cmp	r5, #1
 8005acc:	d002      	beq.n	8005ad4 <_scanf_float+0x1d0>
 8005ace:	2d04      	cmp	r5, #4
 8005ad0:	f47f af48 	bne.w	8005964 <_scanf_float+0x60>
 8005ad4:	3501      	adds	r5, #1
 8005ad6:	b2ed      	uxtb	r5, r5
 8005ad8:	e7d8      	b.n	8005a8c <_scanf_float+0x188>
 8005ada:	f1ba 0f01 	cmp.w	sl, #1
 8005ade:	f47f af41 	bne.w	8005964 <_scanf_float+0x60>
 8005ae2:	f04f 0a02 	mov.w	sl, #2
 8005ae6:	e7d1      	b.n	8005a8c <_scanf_float+0x188>
 8005ae8:	b97d      	cbnz	r5, 8005b0a <_scanf_float+0x206>
 8005aea:	f1b9 0f00 	cmp.w	r9, #0
 8005aee:	f47f af3c 	bne.w	800596a <_scanf_float+0x66>
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005af8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005afc:	f47f af39 	bne.w	8005972 <_scanf_float+0x6e>
 8005b00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b04:	6022      	str	r2, [r4, #0]
 8005b06:	2501      	movs	r5, #1
 8005b08:	e7c0      	b.n	8005a8c <_scanf_float+0x188>
 8005b0a:	2d03      	cmp	r5, #3
 8005b0c:	d0e2      	beq.n	8005ad4 <_scanf_float+0x1d0>
 8005b0e:	2d05      	cmp	r5, #5
 8005b10:	e7de      	b.n	8005ad0 <_scanf_float+0x1cc>
 8005b12:	2d02      	cmp	r5, #2
 8005b14:	f47f af26 	bne.w	8005964 <_scanf_float+0x60>
 8005b18:	2503      	movs	r5, #3
 8005b1a:	e7b7      	b.n	8005a8c <_scanf_float+0x188>
 8005b1c:	2d06      	cmp	r5, #6
 8005b1e:	f47f af21 	bne.w	8005964 <_scanf_float+0x60>
 8005b22:	2507      	movs	r5, #7
 8005b24:	e7b2      	b.n	8005a8c <_scanf_float+0x188>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	0591      	lsls	r1, r2, #22
 8005b2a:	f57f af1b 	bpl.w	8005964 <_scanf_float+0x60>
 8005b2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b32:	6022      	str	r2, [r4, #0]
 8005b34:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b38:	e7a8      	b.n	8005a8c <_scanf_float+0x188>
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b44:	d006      	beq.n	8005b54 <_scanf_float+0x250>
 8005b46:	0550      	lsls	r0, r2, #21
 8005b48:	f57f af0c 	bpl.w	8005964 <_scanf_float+0x60>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	f43f af0f 	beq.w	8005972 <_scanf_float+0x6e>
 8005b54:	0591      	lsls	r1, r2, #22
 8005b56:	bf58      	it	pl
 8005b58:	9901      	ldrpl	r1, [sp, #4]
 8005b5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b5e:	bf58      	it	pl
 8005b60:	eba9 0101 	subpl.w	r1, r9, r1
 8005b64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b68:	bf58      	it	pl
 8005b6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b6e:	6022      	str	r2, [r4, #0]
 8005b70:	f04f 0900 	mov.w	r9, #0
 8005b74:	e78a      	b.n	8005a8c <_scanf_float+0x188>
 8005b76:	f04f 0a03 	mov.w	sl, #3
 8005b7a:	e787      	b.n	8005a8c <_scanf_float+0x188>
 8005b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b80:	4639      	mov	r1, r7
 8005b82:	4640      	mov	r0, r8
 8005b84:	4798      	blx	r3
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f43f aedf 	beq.w	800594a <_scanf_float+0x46>
 8005b8c:	e6ea      	b.n	8005964 <_scanf_float+0x60>
 8005b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b96:	463a      	mov	r2, r7
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4798      	blx	r3
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	e6ec      	b.n	800597e <_scanf_float+0x7a>
 8005ba4:	1e6b      	subs	r3, r5, #1
 8005ba6:	2b06      	cmp	r3, #6
 8005ba8:	d825      	bhi.n	8005bf6 <_scanf_float+0x2f2>
 8005baa:	2d02      	cmp	r5, #2
 8005bac:	d836      	bhi.n	8005c1c <_scanf_float+0x318>
 8005bae:	455e      	cmp	r6, fp
 8005bb0:	f67f aee8 	bls.w	8005984 <_scanf_float+0x80>
 8005bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bbc:	463a      	mov	r2, r7
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4798      	blx	r3
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	e7f1      	b.n	8005bae <_scanf_float+0x2aa>
 8005bca:	9802      	ldr	r0, [sp, #8]
 8005bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bd0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005bd4:	9002      	str	r0, [sp, #8]
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	4640      	mov	r0, r8
 8005bda:	4798      	blx	r3
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005be6:	fa5f fa8a 	uxtb.w	sl, sl
 8005bea:	f1ba 0f02 	cmp.w	sl, #2
 8005bee:	d1ec      	bne.n	8005bca <_scanf_float+0x2c6>
 8005bf0:	3d03      	subs	r5, #3
 8005bf2:	b2ed      	uxtb	r5, r5
 8005bf4:	1b76      	subs	r6, r6, r5
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	05da      	lsls	r2, r3, #23
 8005bfa:	d52f      	bpl.n	8005c5c <_scanf_float+0x358>
 8005bfc:	055b      	lsls	r3, r3, #21
 8005bfe:	d510      	bpl.n	8005c22 <_scanf_float+0x31e>
 8005c00:	455e      	cmp	r6, fp
 8005c02:	f67f aebf 	bls.w	8005984 <_scanf_float+0x80>
 8005c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c0e:	463a      	mov	r2, r7
 8005c10:	4640      	mov	r0, r8
 8005c12:	4798      	blx	r3
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	e7f1      	b.n	8005c00 <_scanf_float+0x2fc>
 8005c1c:	46aa      	mov	sl, r5
 8005c1e:	9602      	str	r6, [sp, #8]
 8005c20:	e7df      	b.n	8005be2 <_scanf_float+0x2de>
 8005c22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	2965      	cmp	r1, #101	; 0x65
 8005c2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005c2e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	d00c      	beq.n	8005c50 <_scanf_float+0x34c>
 8005c36:	2945      	cmp	r1, #69	; 0x45
 8005c38:	d00a      	beq.n	8005c50 <_scanf_float+0x34c>
 8005c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c3e:	463a      	mov	r2, r7
 8005c40:	4640      	mov	r0, r8
 8005c42:	4798      	blx	r3
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	1eb5      	subs	r5, r6, #2
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c54:	463a      	mov	r2, r7
 8005c56:	4640      	mov	r0, r8
 8005c58:	4798      	blx	r3
 8005c5a:	462e      	mov	r6, r5
 8005c5c:	6825      	ldr	r5, [r4, #0]
 8005c5e:	f015 0510 	ands.w	r5, r5, #16
 8005c62:	d14e      	bne.n	8005d02 <_scanf_float+0x3fe>
 8005c64:	7035      	strb	r5, [r6, #0]
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d119      	bne.n	8005ca6 <_scanf_float+0x3a2>
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	454b      	cmp	r3, r9
 8005c76:	eba3 0209 	sub.w	r2, r3, r9
 8005c7a:	d121      	bne.n	8005cc0 <_scanf_float+0x3bc>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4659      	mov	r1, fp
 8005c80:	4640      	mov	r0, r8
 8005c82:	f000 fe3b 	bl	80068fc <_strtod_r>
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	f012 0f02 	tst.w	r2, #2
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	d021      	beq.n	8005cd6 <_scanf_float+0x3d2>
 8005c92:	9903      	ldr	r1, [sp, #12]
 8005c94:	1d1a      	adds	r2, r3, #4
 8005c96:	600a      	str	r2, [r1, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	ed83 0b00 	vstr	d0, [r3]
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60e3      	str	r3, [r4, #12]
 8005ca4:	e66f      	b.n	8005986 <_scanf_float+0x82>
 8005ca6:	9b04      	ldr	r3, [sp, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0e7      	beq.n	8005c7c <_scanf_float+0x378>
 8005cac:	9905      	ldr	r1, [sp, #20]
 8005cae:	230a      	movs	r3, #10
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	3101      	adds	r1, #1
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	f000 fea9 	bl	8006a0c <_strtol_r>
 8005cba:	9b04      	ldr	r3, [sp, #16]
 8005cbc:	9e05      	ldr	r6, [sp, #20]
 8005cbe:	1ac2      	subs	r2, r0, r3
 8005cc0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005cc4:	429e      	cmp	r6, r3
 8005cc6:	bf28      	it	cs
 8005cc8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005ccc:	490e      	ldr	r1, [pc, #56]	; (8005d08 <_scanf_float+0x404>)
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f000 f824 	bl	8005d1c <siprintf>
 8005cd4:	e7d2      	b.n	8005c7c <_scanf_float+0x378>
 8005cd6:	9903      	ldr	r1, [sp, #12]
 8005cd8:	f012 0f04 	tst.w	r2, #4
 8005cdc:	f103 0204 	add.w	r2, r3, #4
 8005ce0:	600a      	str	r2, [r1, #0]
 8005ce2:	d1d9      	bne.n	8005c98 <_scanf_float+0x394>
 8005ce4:	eeb4 0b40 	vcmp.f64	d0, d0
 8005ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cec:	681e      	ldr	r6, [r3, #0]
 8005cee:	d705      	bvc.n	8005cfc <_scanf_float+0x3f8>
 8005cf0:	4806      	ldr	r0, [pc, #24]	; (8005d0c <_scanf_float+0x408>)
 8005cf2:	f000 f80d 	bl	8005d10 <nanf>
 8005cf6:	ed86 0a00 	vstr	s0, [r6]
 8005cfa:	e7d0      	b.n	8005c9e <_scanf_float+0x39a>
 8005cfc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005d00:	e7f9      	b.n	8005cf6 <_scanf_float+0x3f2>
 8005d02:	2500      	movs	r5, #0
 8005d04:	e63f      	b.n	8005986 <_scanf_float+0x82>
 8005d06:	bf00      	nop
 8005d08:	08009800 	.word	0x08009800
 8005d0c:	08009c08 	.word	0x08009c08

08005d10 <nanf>:
 8005d10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d18 <nanf+0x8>
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	7fc00000 	.word	0x7fc00000

08005d1c <siprintf>:
 8005d1c:	b40e      	push	{r1, r2, r3}
 8005d1e:	b500      	push	{lr}
 8005d20:	b09c      	sub	sp, #112	; 0x70
 8005d22:	ab1d      	add	r3, sp, #116	; 0x74
 8005d24:	9002      	str	r0, [sp, #8]
 8005d26:	9006      	str	r0, [sp, #24]
 8005d28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d2c:	4809      	ldr	r0, [pc, #36]	; (8005d54 <siprintf+0x38>)
 8005d2e:	9107      	str	r1, [sp, #28]
 8005d30:	9104      	str	r1, [sp, #16]
 8005d32:	4909      	ldr	r1, [pc, #36]	; (8005d58 <siprintf+0x3c>)
 8005d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d38:	9105      	str	r1, [sp, #20]
 8005d3a:	6800      	ldr	r0, [r0, #0]
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	a902      	add	r1, sp, #8
 8005d40:	f002 fe0c 	bl	800895c <_svfiprintf_r>
 8005d44:	9b02      	ldr	r3, [sp, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	b01c      	add	sp, #112	; 0x70
 8005d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d50:	b003      	add	sp, #12
 8005d52:	4770      	bx	lr
 8005d54:	2000000c 	.word	0x2000000c
 8005d58:	ffff0208 	.word	0xffff0208

08005d5c <sulp>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4604      	mov	r4, r0
 8005d60:	460d      	mov	r5, r1
 8005d62:	4616      	mov	r6, r2
 8005d64:	ec45 4b10 	vmov	d0, r4, r5
 8005d68:	f002 fb5a 	bl	8008420 <__ulp>
 8005d6c:	b17e      	cbz	r6, 8005d8e <sulp+0x32>
 8005d6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd09      	ble.n	8005d8e <sulp+0x32>
 8005d7a:	051b      	lsls	r3, r3, #20
 8005d7c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8005d80:	2000      	movs	r0, #0
 8005d82:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8005d86:	ec41 0b17 	vmov	d7, r0, r1
 8005d8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}

08005d90 <_strtod_l>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	ed2d 8b0e 	vpush	{d8-d14}
 8005d98:	b097      	sub	sp, #92	; 0x5c
 8005d9a:	461f      	mov	r7, r3
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9312      	str	r3, [sp, #72]	; 0x48
 8005da0:	4ba1      	ldr	r3, [pc, #644]	; (8006028 <_strtod_l+0x298>)
 8005da2:	920d      	str	r2, [sp, #52]	; 0x34
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	4604      	mov	r4, r0
 8005daa:	4618      	mov	r0, r3
 8005dac:	468b      	mov	fp, r1
 8005dae:	f7fa fa47 	bl	8000240 <strlen>
 8005db2:	f04f 0800 	mov.w	r8, #0
 8005db6:	4605      	mov	r5, r0
 8005db8:	f04f 0900 	mov.w	r9, #0
 8005dbc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8005dc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005dc2:	7813      	ldrb	r3, [r2, #0]
 8005dc4:	2b2b      	cmp	r3, #43	; 0x2b
 8005dc6:	d04d      	beq.n	8005e64 <_strtod_l+0xd4>
 8005dc8:	d83a      	bhi.n	8005e40 <_strtod_l+0xb0>
 8005dca:	2b0d      	cmp	r3, #13
 8005dcc:	d833      	bhi.n	8005e36 <_strtod_l+0xa6>
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d833      	bhi.n	8005e3a <_strtod_l+0xaa>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d03d      	beq.n	8005e52 <_strtod_l+0xc2>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9308      	str	r3, [sp, #32]
 8005dda:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005ddc:	7833      	ldrb	r3, [r6, #0]
 8005dde:	2b30      	cmp	r3, #48	; 0x30
 8005de0:	f040 80b0 	bne.w	8005f44 <_strtod_l+0x1b4>
 8005de4:	7873      	ldrb	r3, [r6, #1]
 8005de6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005dea:	2b58      	cmp	r3, #88	; 0x58
 8005dec:	d167      	bne.n	8005ebe <_strtod_l+0x12e>
 8005dee:	9b08      	ldr	r3, [sp, #32]
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	ab12      	add	r3, sp, #72	; 0x48
 8005df4:	9702      	str	r7, [sp, #8]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	4a8c      	ldr	r2, [pc, #560]	; (800602c <_strtod_l+0x29c>)
 8005dfa:	ab13      	add	r3, sp, #76	; 0x4c
 8005dfc:	a911      	add	r1, sp, #68	; 0x44
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f001 fc68 	bl	80076d4 <__gethex>
 8005e04:	f010 0507 	ands.w	r5, r0, #7
 8005e08:	4607      	mov	r7, r0
 8005e0a:	d005      	beq.n	8005e18 <_strtod_l+0x88>
 8005e0c:	2d06      	cmp	r5, #6
 8005e0e:	d12b      	bne.n	8005e68 <_strtod_l+0xd8>
 8005e10:	3601      	adds	r6, #1
 8005e12:	2300      	movs	r3, #0
 8005e14:	9611      	str	r6, [sp, #68]	; 0x44
 8005e16:	9308      	str	r3, [sp, #32]
 8005e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 854e 	bne.w	80068bc <_strtod_l+0xb2c>
 8005e20:	9b08      	ldr	r3, [sp, #32]
 8005e22:	b1e3      	cbz	r3, 8005e5e <_strtod_l+0xce>
 8005e24:	ec49 8b17 	vmov	d7, r8, r9
 8005e28:	eeb1 0b47 	vneg.f64	d0, d7
 8005e2c:	b017      	add	sp, #92	; 0x5c
 8005e2e:	ecbd 8b0e 	vpop	{d8-d14}
 8005e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d1cd      	bne.n	8005dd6 <_strtod_l+0x46>
 8005e3a:	3201      	adds	r2, #1
 8005e3c:	9211      	str	r2, [sp, #68]	; 0x44
 8005e3e:	e7bf      	b.n	8005dc0 <_strtod_l+0x30>
 8005e40:	2b2d      	cmp	r3, #45	; 0x2d
 8005e42:	d1c8      	bne.n	8005dd6 <_strtod_l+0x46>
 8005e44:	2301      	movs	r3, #1
 8005e46:	9308      	str	r3, [sp, #32]
 8005e48:	1c53      	adds	r3, r2, #1
 8005e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8005e4c:	7853      	ldrb	r3, [r2, #1]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1c3      	bne.n	8005dda <_strtod_l+0x4a>
 8005e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e54:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 852d 	bne.w	80068b8 <_strtod_l+0xb28>
 8005e5e:	ec49 8b10 	vmov	d0, r8, r9
 8005e62:	e7e3      	b.n	8005e2c <_strtod_l+0x9c>
 8005e64:	2300      	movs	r3, #0
 8005e66:	e7ee      	b.n	8005e46 <_strtod_l+0xb6>
 8005e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e6a:	b13a      	cbz	r2, 8005e7c <_strtod_l+0xec>
 8005e6c:	2135      	movs	r1, #53	; 0x35
 8005e6e:	a814      	add	r0, sp, #80	; 0x50
 8005e70:	f002 fbde 	bl	8008630 <__copybits>
 8005e74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005e76:	4620      	mov	r0, r4
 8005e78:	f001 ffa0 	bl	8007dbc <_Bfree>
 8005e7c:	3d01      	subs	r5, #1
 8005e7e:	2d04      	cmp	r5, #4
 8005e80:	d806      	bhi.n	8005e90 <_strtod_l+0x100>
 8005e82:	e8df f005 	tbb	[pc, r5]
 8005e86:	030a      	.short	0x030a
 8005e88:	1714      	.short	0x1714
 8005e8a:	0a          	.byte	0x0a
 8005e8b:	00          	.byte	0x00
 8005e8c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8005e90:	073f      	lsls	r7, r7, #28
 8005e92:	d5c1      	bpl.n	8005e18 <_strtod_l+0x88>
 8005e94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005e98:	e7be      	b.n	8005e18 <_strtod_l+0x88>
 8005e9a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8005e9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ea0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ea4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005ea8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005eac:	e7f0      	b.n	8005e90 <_strtod_l+0x100>
 8005eae:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8006030 <_strtod_l+0x2a0>
 8005eb2:	e7ed      	b.n	8005e90 <_strtod_l+0x100>
 8005eb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005eb8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005ebc:	e7e8      	b.n	8005e90 <_strtod_l+0x100>
 8005ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	9211      	str	r2, [sp, #68]	; 0x44
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b30      	cmp	r3, #48	; 0x30
 8005ec8:	d0f9      	beq.n	8005ebe <_strtod_l+0x12e>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0a4      	beq.n	8005e18 <_strtod_l+0x88>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f04f 0a00 	mov.w	sl, #0
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005ede:	f8cd a018 	str.w	sl, [sp, #24]
 8005ee2:	220a      	movs	r2, #10
 8005ee4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005ee6:	7807      	ldrb	r7, [r0, #0]
 8005ee8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005eec:	b2d9      	uxtb	r1, r3
 8005eee:	2909      	cmp	r1, #9
 8005ef0:	d92a      	bls.n	8005f48 <_strtod_l+0x1b8>
 8005ef2:	9907      	ldr	r1, [sp, #28]
 8005ef4:	462a      	mov	r2, r5
 8005ef6:	f002 fe4b 	bl	8008b90 <strncmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d033      	beq.n	8005f66 <_strtod_l+0x1d6>
 8005efe:	2000      	movs	r0, #0
 8005f00:	9b06      	ldr	r3, [sp, #24]
 8005f02:	463a      	mov	r2, r7
 8005f04:	4601      	mov	r1, r0
 8005f06:	4607      	mov	r7, r0
 8005f08:	2a65      	cmp	r2, #101	; 0x65
 8005f0a:	d001      	beq.n	8005f10 <_strtod_l+0x180>
 8005f0c:	2a45      	cmp	r2, #69	; 0x45
 8005f0e:	d117      	bne.n	8005f40 <_strtod_l+0x1b0>
 8005f10:	b91b      	cbnz	r3, 8005f1a <_strtod_l+0x18a>
 8005f12:	9b04      	ldr	r3, [sp, #16]
 8005f14:	4303      	orrs	r3, r0
 8005f16:	d09c      	beq.n	8005e52 <_strtod_l+0xc2>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8005f1e:	f10b 0201 	add.w	r2, fp, #1
 8005f22:	9211      	str	r2, [sp, #68]	; 0x44
 8005f24:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8005f28:	2a2b      	cmp	r2, #43	; 0x2b
 8005f2a:	d071      	beq.n	8006010 <_strtod_l+0x280>
 8005f2c:	2a2d      	cmp	r2, #45	; 0x2d
 8005f2e:	d077      	beq.n	8006020 <_strtod_l+0x290>
 8005f30:	f04f 0e00 	mov.w	lr, #0
 8005f34:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005f38:	2d09      	cmp	r5, #9
 8005f3a:	d97f      	bls.n	800603c <_strtod_l+0x2ac>
 8005f3c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8005f40:	2500      	movs	r5, #0
 8005f42:	e09b      	b.n	800607c <_strtod_l+0x2ec>
 8005f44:	2300      	movs	r3, #0
 8005f46:	e7c3      	b.n	8005ed0 <_strtod_l+0x140>
 8005f48:	9906      	ldr	r1, [sp, #24]
 8005f4a:	2908      	cmp	r1, #8
 8005f4c:	bfdd      	ittte	le
 8005f4e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005f50:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f54:	9309      	strle	r3, [sp, #36]	; 0x24
 8005f56:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005f5a:	9b06      	ldr	r3, [sp, #24]
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	3301      	adds	r3, #1
 8005f60:	9306      	str	r3, [sp, #24]
 8005f62:	9011      	str	r0, [sp, #68]	; 0x44
 8005f64:	e7be      	b.n	8005ee4 <_strtod_l+0x154>
 8005f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f68:	195a      	adds	r2, r3, r5
 8005f6a:	9211      	str	r2, [sp, #68]	; 0x44
 8005f6c:	5d5a      	ldrb	r2, [r3, r5]
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	b3a3      	cbz	r3, 8005fdc <_strtod_l+0x24c>
 8005f72:	4607      	mov	r7, r0
 8005f74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005f78:	2909      	cmp	r1, #9
 8005f7a:	d912      	bls.n	8005fa2 <_strtod_l+0x212>
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	e7c3      	b.n	8005f08 <_strtod_l+0x178>
 8005f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	9211      	str	r2, [sp, #68]	; 0x44
 8005f86:	785a      	ldrb	r2, [r3, #1]
 8005f88:	3001      	adds	r0, #1
 8005f8a:	2a30      	cmp	r2, #48	; 0x30
 8005f8c:	d0f8      	beq.n	8005f80 <_strtod_l+0x1f0>
 8005f8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	f200 8497 	bhi.w	80068c6 <_strtod_l+0xb36>
 8005f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	3a30      	subs	r2, #48	; 0x30
 8005fa4:	f100 0101 	add.w	r1, r0, #1
 8005fa8:	d012      	beq.n	8005fd0 <_strtod_l+0x240>
 8005faa:	440f      	add	r7, r1
 8005fac:	eb00 0c03 	add.w	ip, r0, r3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	250a      	movs	r5, #10
 8005fb4:	4561      	cmp	r1, ip
 8005fb6:	d113      	bne.n	8005fe0 <_strtod_l+0x250>
 8005fb8:	1819      	adds	r1, r3, r0
 8005fba:	2908      	cmp	r1, #8
 8005fbc:	f103 0301 	add.w	r3, r3, #1
 8005fc0:	4403      	add	r3, r0
 8005fc2:	dc1c      	bgt.n	8005ffe <_strtod_l+0x26e>
 8005fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fc6:	210a      	movs	r1, #10
 8005fc8:	fb01 2200 	mla	r2, r1, r0, r2
 8005fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fce:	2100      	movs	r1, #0
 8005fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fd2:	1c50      	adds	r0, r2, #1
 8005fd4:	9011      	str	r0, [sp, #68]	; 0x44
 8005fd6:	7852      	ldrb	r2, [r2, #1]
 8005fd8:	4608      	mov	r0, r1
 8005fda:	e7cb      	b.n	8005f74 <_strtod_l+0x1e4>
 8005fdc:	9806      	ldr	r0, [sp, #24]
 8005fde:	e7d4      	b.n	8005f8a <_strtod_l+0x1fa>
 8005fe0:	2908      	cmp	r1, #8
 8005fe2:	dc04      	bgt.n	8005fee <_strtod_l+0x25e>
 8005fe4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005fe6:	436e      	muls	r6, r5
 8005fe8:	9609      	str	r6, [sp, #36]	; 0x24
 8005fea:	3101      	adds	r1, #1
 8005fec:	e7e2      	b.n	8005fb4 <_strtod_l+0x224>
 8005fee:	f101 0e01 	add.w	lr, r1, #1
 8005ff2:	f1be 0f10 	cmp.w	lr, #16
 8005ff6:	bfd8      	it	le
 8005ff8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8005ffc:	e7f5      	b.n	8005fea <_strtod_l+0x25a>
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	bfdc      	itt	le
 8006002:	210a      	movle	r1, #10
 8006004:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8006008:	e7e1      	b.n	8005fce <_strtod_l+0x23e>
 800600a:	2700      	movs	r7, #0
 800600c:	2101      	movs	r1, #1
 800600e:	e780      	b.n	8005f12 <_strtod_l+0x182>
 8006010:	f04f 0e00 	mov.w	lr, #0
 8006014:	f10b 0202 	add.w	r2, fp, #2
 8006018:	9211      	str	r2, [sp, #68]	; 0x44
 800601a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800601e:	e789      	b.n	8005f34 <_strtod_l+0x1a4>
 8006020:	f04f 0e01 	mov.w	lr, #1
 8006024:	e7f6      	b.n	8006014 <_strtod_l+0x284>
 8006026:	bf00      	nop
 8006028:	08009a50 	.word	0x08009a50
 800602c:	08009808 	.word	0x08009808
 8006030:	7ff00000 	.word	0x7ff00000
 8006034:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006036:	1c55      	adds	r5, r2, #1
 8006038:	9511      	str	r5, [sp, #68]	; 0x44
 800603a:	7852      	ldrb	r2, [r2, #1]
 800603c:	2a30      	cmp	r2, #48	; 0x30
 800603e:	d0f9      	beq.n	8006034 <_strtod_l+0x2a4>
 8006040:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006044:	2d08      	cmp	r5, #8
 8006046:	f63f af7b 	bhi.w	8005f40 <_strtod_l+0x1b0>
 800604a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800604e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006050:	9207      	str	r2, [sp, #28]
 8006052:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006054:	1c55      	adds	r5, r2, #1
 8006056:	9511      	str	r5, [sp, #68]	; 0x44
 8006058:	7852      	ldrb	r2, [r2, #1]
 800605a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800605e:	2e09      	cmp	r6, #9
 8006060:	d937      	bls.n	80060d2 <_strtod_l+0x342>
 8006062:	9e07      	ldr	r6, [sp, #28]
 8006064:	1bad      	subs	r5, r5, r6
 8006066:	2d08      	cmp	r5, #8
 8006068:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800606c:	dc02      	bgt.n	8006074 <_strtod_l+0x2e4>
 800606e:	4565      	cmp	r5, ip
 8006070:	bfa8      	it	ge
 8006072:	4665      	movge	r5, ip
 8006074:	f1be 0f00 	cmp.w	lr, #0
 8006078:	d000      	beq.n	800607c <_strtod_l+0x2ec>
 800607a:	426d      	negs	r5, r5
 800607c:	2b00      	cmp	r3, #0
 800607e:	d14d      	bne.n	800611c <_strtod_l+0x38c>
 8006080:	9b04      	ldr	r3, [sp, #16]
 8006082:	4303      	orrs	r3, r0
 8006084:	f47f aec8 	bne.w	8005e18 <_strtod_l+0x88>
 8006088:	2900      	cmp	r1, #0
 800608a:	f47f aee2 	bne.w	8005e52 <_strtod_l+0xc2>
 800608e:	2a69      	cmp	r2, #105	; 0x69
 8006090:	d027      	beq.n	80060e2 <_strtod_l+0x352>
 8006092:	dc24      	bgt.n	80060de <_strtod_l+0x34e>
 8006094:	2a49      	cmp	r2, #73	; 0x49
 8006096:	d024      	beq.n	80060e2 <_strtod_l+0x352>
 8006098:	2a4e      	cmp	r2, #78	; 0x4e
 800609a:	f47f aeda 	bne.w	8005e52 <_strtod_l+0xc2>
 800609e:	4996      	ldr	r1, [pc, #600]	; (80062f8 <_strtod_l+0x568>)
 80060a0:	a811      	add	r0, sp, #68	; 0x44
 80060a2:	f001 fd6f 	bl	8007b84 <__match>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	f43f aed3 	beq.w	8005e52 <_strtod_l+0xc2>
 80060ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b28      	cmp	r3, #40	; 0x28
 80060b2:	d12d      	bne.n	8006110 <_strtod_l+0x380>
 80060b4:	4991      	ldr	r1, [pc, #580]	; (80062fc <_strtod_l+0x56c>)
 80060b6:	aa14      	add	r2, sp, #80	; 0x50
 80060b8:	a811      	add	r0, sp, #68	; 0x44
 80060ba:	f001 fd77 	bl	8007bac <__hexnan>
 80060be:	2805      	cmp	r0, #5
 80060c0:	d126      	bne.n	8006110 <_strtod_l+0x380>
 80060c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060c4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80060c8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80060cc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80060d0:	e6a2      	b.n	8005e18 <_strtod_l+0x88>
 80060d2:	250a      	movs	r5, #10
 80060d4:	fb05 250c 	mla	r5, r5, ip, r2
 80060d8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80060dc:	e7b9      	b.n	8006052 <_strtod_l+0x2c2>
 80060de:	2a6e      	cmp	r2, #110	; 0x6e
 80060e0:	e7db      	b.n	800609a <_strtod_l+0x30a>
 80060e2:	4987      	ldr	r1, [pc, #540]	; (8006300 <_strtod_l+0x570>)
 80060e4:	a811      	add	r0, sp, #68	; 0x44
 80060e6:	f001 fd4d 	bl	8007b84 <__match>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	f43f aeb1 	beq.w	8005e52 <_strtod_l+0xc2>
 80060f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060f2:	4984      	ldr	r1, [pc, #528]	; (8006304 <_strtod_l+0x574>)
 80060f4:	3b01      	subs	r3, #1
 80060f6:	a811      	add	r0, sp, #68	; 0x44
 80060f8:	9311      	str	r3, [sp, #68]	; 0x44
 80060fa:	f001 fd43 	bl	8007b84 <__match>
 80060fe:	b910      	cbnz	r0, 8006106 <_strtod_l+0x376>
 8006100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006102:	3301      	adds	r3, #1
 8006104:	9311      	str	r3, [sp, #68]	; 0x44
 8006106:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8006318 <_strtod_l+0x588>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	e683      	b.n	8005e18 <_strtod_l+0x88>
 8006110:	487d      	ldr	r0, [pc, #500]	; (8006308 <_strtod_l+0x578>)
 8006112:	f002 fd25 	bl	8008b60 <nan>
 8006116:	ec59 8b10 	vmov	r8, r9, d0
 800611a:	e67d      	b.n	8005e18 <_strtod_l+0x88>
 800611c:	1bea      	subs	r2, r5, r7
 800611e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8006122:	9207      	str	r2, [sp, #28]
 8006124:	9a06      	ldr	r2, [sp, #24]
 8006126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800612a:	2a00      	cmp	r2, #0
 800612c:	bf08      	it	eq
 800612e:	461a      	moveq	r2, r3
 8006130:	2b10      	cmp	r3, #16
 8006132:	9206      	str	r2, [sp, #24]
 8006134:	461a      	mov	r2, r3
 8006136:	bfa8      	it	ge
 8006138:	2210      	movge	r2, #16
 800613a:	2b09      	cmp	r3, #9
 800613c:	ec59 8b17 	vmov	r8, r9, d7
 8006140:	dd0c      	ble.n	800615c <_strtod_l+0x3cc>
 8006142:	4972      	ldr	r1, [pc, #456]	; (800630c <_strtod_l+0x57c>)
 8006144:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006148:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800614c:	ee06 aa90 	vmov	s13, sl
 8006150:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8006154:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006158:	ec59 8b16 	vmov	r8, r9, d6
 800615c:	2b0f      	cmp	r3, #15
 800615e:	dc36      	bgt.n	80061ce <_strtod_l+0x43e>
 8006160:	9907      	ldr	r1, [sp, #28]
 8006162:	2900      	cmp	r1, #0
 8006164:	f43f ae58 	beq.w	8005e18 <_strtod_l+0x88>
 8006168:	dd23      	ble.n	80061b2 <_strtod_l+0x422>
 800616a:	2916      	cmp	r1, #22
 800616c:	dc0b      	bgt.n	8006186 <_strtod_l+0x3f6>
 800616e:	4b67      	ldr	r3, [pc, #412]	; (800630c <_strtod_l+0x57c>)
 8006170:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006174:	ed93 7b00 	vldr	d7, [r3]
 8006178:	ec49 8b16 	vmov	d6, r8, r9
 800617c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006180:	ec59 8b17 	vmov	r8, r9, d7
 8006184:	e648      	b.n	8005e18 <_strtod_l+0x88>
 8006186:	9807      	ldr	r0, [sp, #28]
 8006188:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800618c:	4281      	cmp	r1, r0
 800618e:	db1e      	blt.n	80061ce <_strtod_l+0x43e>
 8006190:	4a5e      	ldr	r2, [pc, #376]	; (800630c <_strtod_l+0x57c>)
 8006192:	f1c3 030f 	rsb	r3, r3, #15
 8006196:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800619a:	ed91 7b00 	vldr	d7, [r1]
 800619e:	ec49 8b16 	vmov	d6, r8, r9
 80061a2:	1ac3      	subs	r3, r0, r3
 80061a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80061a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80061ac:	ed92 6b00 	vldr	d6, [r2]
 80061b0:	e7e4      	b.n	800617c <_strtod_l+0x3ec>
 80061b2:	9907      	ldr	r1, [sp, #28]
 80061b4:	3116      	adds	r1, #22
 80061b6:	db0a      	blt.n	80061ce <_strtod_l+0x43e>
 80061b8:	4b54      	ldr	r3, [pc, #336]	; (800630c <_strtod_l+0x57c>)
 80061ba:	1b7d      	subs	r5, r7, r5
 80061bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80061c0:	ed95 7b00 	vldr	d7, [r5]
 80061c4:	ec49 8b16 	vmov	d6, r8, r9
 80061c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80061cc:	e7d8      	b.n	8006180 <_strtod_l+0x3f0>
 80061ce:	9907      	ldr	r1, [sp, #28]
 80061d0:	1a9a      	subs	r2, r3, r2
 80061d2:	440a      	add	r2, r1
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	dd6f      	ble.n	80062b8 <_strtod_l+0x528>
 80061d8:	f012 000f 	ands.w	r0, r2, #15
 80061dc:	d00a      	beq.n	80061f4 <_strtod_l+0x464>
 80061de:	494b      	ldr	r1, [pc, #300]	; (800630c <_strtod_l+0x57c>)
 80061e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80061e4:	ed91 7b00 	vldr	d7, [r1]
 80061e8:	ec49 8b16 	vmov	d6, r8, r9
 80061ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80061f0:	ec59 8b17 	vmov	r8, r9, d7
 80061f4:	f032 020f 	bics.w	r2, r2, #15
 80061f8:	d04f      	beq.n	800629a <_strtod_l+0x50a>
 80061fa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80061fe:	dd22      	ble.n	8006246 <_strtod_l+0x4b6>
 8006200:	2500      	movs	r5, #0
 8006202:	462e      	mov	r6, r5
 8006204:	9506      	str	r5, [sp, #24]
 8006206:	462f      	mov	r7, r5
 8006208:	2322      	movs	r3, #34	; 0x22
 800620a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8006318 <_strtod_l+0x588>
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	f04f 0800 	mov.w	r8, #0
 8006214:	9b06      	ldr	r3, [sp, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f43f adfe 	beq.w	8005e18 <_strtod_l+0x88>
 800621c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800621e:	4620      	mov	r0, r4
 8006220:	f001 fdcc 	bl	8007dbc <_Bfree>
 8006224:	4639      	mov	r1, r7
 8006226:	4620      	mov	r0, r4
 8006228:	f001 fdc8 	bl	8007dbc <_Bfree>
 800622c:	4631      	mov	r1, r6
 800622e:	4620      	mov	r0, r4
 8006230:	f001 fdc4 	bl	8007dbc <_Bfree>
 8006234:	9906      	ldr	r1, [sp, #24]
 8006236:	4620      	mov	r0, r4
 8006238:	f001 fdc0 	bl	8007dbc <_Bfree>
 800623c:	4629      	mov	r1, r5
 800623e:	4620      	mov	r0, r4
 8006240:	f001 fdbc 	bl	8007dbc <_Bfree>
 8006244:	e5e8      	b.n	8005e18 <_strtod_l+0x88>
 8006246:	2000      	movs	r0, #0
 8006248:	ec49 8b17 	vmov	d7, r8, r9
 800624c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8006310 <_strtod_l+0x580>
 8006250:	1112      	asrs	r2, r2, #4
 8006252:	4601      	mov	r1, r0
 8006254:	2a01      	cmp	r2, #1
 8006256:	dc23      	bgt.n	80062a0 <_strtod_l+0x510>
 8006258:	b108      	cbz	r0, 800625e <_strtod_l+0x4ce>
 800625a:	ec59 8b17 	vmov	r8, r9, d7
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <_strtod_l+0x580>)
 8006260:	482c      	ldr	r0, [pc, #176]	; (8006314 <_strtod_l+0x584>)
 8006262:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006266:	ed92 7b00 	vldr	d7, [r2]
 800626a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800626e:	ec49 8b16 	vmov	d6, r8, r9
 8006272:	4a29      	ldr	r2, [pc, #164]	; (8006318 <_strtod_l+0x588>)
 8006274:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006278:	ee17 1a90 	vmov	r1, s15
 800627c:	400a      	ands	r2, r1
 800627e:	4282      	cmp	r2, r0
 8006280:	ec59 8b17 	vmov	r8, r9, d7
 8006284:	d8bc      	bhi.n	8006200 <_strtod_l+0x470>
 8006286:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800628a:	4282      	cmp	r2, r0
 800628c:	bf86      	itte	hi
 800628e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800631c <_strtod_l+0x58c>
 8006292:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8006296:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800629a:	2200      	movs	r2, #0
 800629c:	9204      	str	r2, [sp, #16]
 800629e:	e078      	b.n	8006392 <_strtod_l+0x602>
 80062a0:	07d6      	lsls	r6, r2, #31
 80062a2:	d504      	bpl.n	80062ae <_strtod_l+0x51e>
 80062a4:	ed9c 6b00 	vldr	d6, [ip]
 80062a8:	2001      	movs	r0, #1
 80062aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80062ae:	3101      	adds	r1, #1
 80062b0:	1052      	asrs	r2, r2, #1
 80062b2:	f10c 0c08 	add.w	ip, ip, #8
 80062b6:	e7cd      	b.n	8006254 <_strtod_l+0x4c4>
 80062b8:	d0ef      	beq.n	800629a <_strtod_l+0x50a>
 80062ba:	4252      	negs	r2, r2
 80062bc:	f012 000f 	ands.w	r0, r2, #15
 80062c0:	d00a      	beq.n	80062d8 <_strtod_l+0x548>
 80062c2:	4912      	ldr	r1, [pc, #72]	; (800630c <_strtod_l+0x57c>)
 80062c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80062c8:	ed91 7b00 	vldr	d7, [r1]
 80062cc:	ec49 8b16 	vmov	d6, r8, r9
 80062d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80062d4:	ec59 8b17 	vmov	r8, r9, d7
 80062d8:	1112      	asrs	r2, r2, #4
 80062da:	d0de      	beq.n	800629a <_strtod_l+0x50a>
 80062dc:	2a1f      	cmp	r2, #31
 80062de:	dd1f      	ble.n	8006320 <_strtod_l+0x590>
 80062e0:	2500      	movs	r5, #0
 80062e2:	462e      	mov	r6, r5
 80062e4:	9506      	str	r5, [sp, #24]
 80062e6:	462f      	mov	r7, r5
 80062e8:	2322      	movs	r3, #34	; 0x22
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	f04f 0900 	mov.w	r9, #0
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	e78e      	b.n	8006214 <_strtod_l+0x484>
 80062f6:	bf00      	nop
 80062f8:	080097d9 	.word	0x080097d9
 80062fc:	0800981c 	.word	0x0800981c
 8006300:	080097d1 	.word	0x080097d1
 8006304:	0800995c 	.word	0x0800995c
 8006308:	08009c08 	.word	0x08009c08
 800630c:	08009ae8 	.word	0x08009ae8
 8006310:	08009ac0 	.word	0x08009ac0
 8006314:	7ca00000 	.word	0x7ca00000
 8006318:	7ff00000 	.word	0x7ff00000
 800631c:	7fefffff 	.word	0x7fefffff
 8006320:	f012 0110 	ands.w	r1, r2, #16
 8006324:	bf18      	it	ne
 8006326:	216a      	movne	r1, #106	; 0x6a
 8006328:	9104      	str	r1, [sp, #16]
 800632a:	ec49 8b17 	vmov	d7, r8, r9
 800632e:	49be      	ldr	r1, [pc, #760]	; (8006628 <_strtod_l+0x898>)
 8006330:	2000      	movs	r0, #0
 8006332:	07d6      	lsls	r6, r2, #31
 8006334:	d504      	bpl.n	8006340 <_strtod_l+0x5b0>
 8006336:	ed91 6b00 	vldr	d6, [r1]
 800633a:	2001      	movs	r0, #1
 800633c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006340:	1052      	asrs	r2, r2, #1
 8006342:	f101 0108 	add.w	r1, r1, #8
 8006346:	d1f4      	bne.n	8006332 <_strtod_l+0x5a2>
 8006348:	b108      	cbz	r0, 800634e <_strtod_l+0x5be>
 800634a:	ec59 8b17 	vmov	r8, r9, d7
 800634e:	9a04      	ldr	r2, [sp, #16]
 8006350:	b1c2      	cbz	r2, 8006384 <_strtod_l+0x5f4>
 8006352:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8006356:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800635a:	2a00      	cmp	r2, #0
 800635c:	4648      	mov	r0, r9
 800635e:	dd11      	ble.n	8006384 <_strtod_l+0x5f4>
 8006360:	2a1f      	cmp	r2, #31
 8006362:	f340 812e 	ble.w	80065c2 <_strtod_l+0x832>
 8006366:	2a34      	cmp	r2, #52	; 0x34
 8006368:	bfde      	ittt	le
 800636a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800636e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006372:	fa02 f101 	lslle.w	r1, r2, r1
 8006376:	f04f 0800 	mov.w	r8, #0
 800637a:	bfcc      	ite	gt
 800637c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006380:	ea01 0900 	andle.w	r9, r1, r0
 8006384:	ec49 8b17 	vmov	d7, r8, r9
 8006388:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006390:	d0a6      	beq.n	80062e0 <_strtod_l+0x550>
 8006392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006394:	9200      	str	r2, [sp, #0]
 8006396:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006398:	9a06      	ldr	r2, [sp, #24]
 800639a:	4620      	mov	r0, r4
 800639c:	f001 fd76 	bl	8007e8c <__s2b>
 80063a0:	9006      	str	r0, [sp, #24]
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f43f af2c 	beq.w	8006200 <_strtod_l+0x470>
 80063a8:	9b07      	ldr	r3, [sp, #28]
 80063aa:	1b7d      	subs	r5, r7, r5
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfb4      	ite	lt
 80063b0:	462b      	movlt	r3, r5
 80063b2:	2300      	movge	r3, #0
 80063b4:	9309      	str	r3, [sp, #36]	; 0x24
 80063b6:	9b07      	ldr	r3, [sp, #28]
 80063b8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8006608 <_strtod_l+0x878>
 80063bc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8006610 <_strtod_l+0x880>
 80063c0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8006618 <_strtod_l+0x888>
 80063c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063c8:	2500      	movs	r5, #0
 80063ca:	930c      	str	r3, [sp, #48]	; 0x30
 80063cc:	462e      	mov	r6, r5
 80063ce:	9b06      	ldr	r3, [sp, #24]
 80063d0:	4620      	mov	r0, r4
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	f001 fcb2 	bl	8007d3c <_Balloc>
 80063d8:	4607      	mov	r7, r0
 80063da:	2800      	cmp	r0, #0
 80063dc:	f43f af14 	beq.w	8006208 <_strtod_l+0x478>
 80063e0:	9b06      	ldr	r3, [sp, #24]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	3202      	adds	r2, #2
 80063e6:	f103 010c 	add.w	r1, r3, #12
 80063ea:	0092      	lsls	r2, r2, #2
 80063ec:	300c      	adds	r0, #12
 80063ee:	f001 fc97 	bl	8007d20 <memcpy>
 80063f2:	ec49 8b10 	vmov	d0, r8, r9
 80063f6:	aa14      	add	r2, sp, #80	; 0x50
 80063f8:	a913      	add	r1, sp, #76	; 0x4c
 80063fa:	4620      	mov	r0, r4
 80063fc:	f002 f88c 	bl	8008518 <__d2b>
 8006400:	ec49 8b18 	vmov	d8, r8, r9
 8006404:	9012      	str	r0, [sp, #72]	; 0x48
 8006406:	2800      	cmp	r0, #0
 8006408:	f43f aefe 	beq.w	8006208 <_strtod_l+0x478>
 800640c:	2101      	movs	r1, #1
 800640e:	4620      	mov	r0, r4
 8006410:	f001 fdd6 	bl	8007fc0 <__i2b>
 8006414:	4606      	mov	r6, r0
 8006416:	2800      	cmp	r0, #0
 8006418:	f43f aef6 	beq.w	8006208 <_strtod_l+0x478>
 800641c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800641e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006420:	2b00      	cmp	r3, #0
 8006422:	bfab      	itete	ge
 8006424:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8006426:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8006428:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800642c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8006430:	bfac      	ite	ge
 8006432:	eb03 0b02 	addge.w	fp, r3, r2
 8006436:	eba2 0a03 	sublt.w	sl, r2, r3
 800643a:	9a04      	ldr	r2, [sp, #16]
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	440b      	add	r3, r1
 8006440:	4a7a      	ldr	r2, [pc, #488]	; (800662c <_strtod_l+0x89c>)
 8006442:	3b01      	subs	r3, #1
 8006444:	4293      	cmp	r3, r2
 8006446:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800644a:	f280 80cd 	bge.w	80065e8 <_strtod_l+0x858>
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	2a1f      	cmp	r2, #31
 8006452:	eba1 0102 	sub.w	r1, r1, r2
 8006456:	f04f 0001 	mov.w	r0, #1
 800645a:	f300 80b9 	bgt.w	80065d0 <_strtod_l+0x840>
 800645e:	fa00 f302 	lsl.w	r3, r0, r2
 8006462:	930b      	str	r3, [sp, #44]	; 0x2c
 8006464:	2300      	movs	r3, #0
 8006466:	930a      	str	r3, [sp, #40]	; 0x28
 8006468:	eb0b 0301 	add.w	r3, fp, r1
 800646c:	9a04      	ldr	r2, [sp, #16]
 800646e:	459b      	cmp	fp, r3
 8006470:	448a      	add	sl, r1
 8006472:	4492      	add	sl, r2
 8006474:	465a      	mov	r2, fp
 8006476:	bfa8      	it	ge
 8006478:	461a      	movge	r2, r3
 800647a:	4552      	cmp	r2, sl
 800647c:	bfa8      	it	ge
 800647e:	4652      	movge	r2, sl
 8006480:	2a00      	cmp	r2, #0
 8006482:	bfc2      	ittt	gt
 8006484:	1a9b      	subgt	r3, r3, r2
 8006486:	ebaa 0a02 	subgt.w	sl, sl, r2
 800648a:	ebab 0b02 	subgt.w	fp, fp, r2
 800648e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006490:	2a00      	cmp	r2, #0
 8006492:	dd18      	ble.n	80064c6 <_strtod_l+0x736>
 8006494:	4631      	mov	r1, r6
 8006496:	4620      	mov	r0, r4
 8006498:	930f      	str	r3, [sp, #60]	; 0x3c
 800649a:	f001 fe51 	bl	8008140 <__pow5mult>
 800649e:	4606      	mov	r6, r0
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f43f aeb1 	beq.w	8006208 <_strtod_l+0x478>
 80064a6:	4601      	mov	r1, r0
 80064a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064aa:	4620      	mov	r0, r4
 80064ac:	f001 fd9e 	bl	8007fec <__multiply>
 80064b0:	900e      	str	r0, [sp, #56]	; 0x38
 80064b2:	2800      	cmp	r0, #0
 80064b4:	f43f aea8 	beq.w	8006208 <_strtod_l+0x478>
 80064b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80064ba:	4620      	mov	r0, r4
 80064bc:	f001 fc7e 	bl	8007dbc <_Bfree>
 80064c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064c4:	9212      	str	r2, [sp, #72]	; 0x48
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f300 8093 	bgt.w	80065f2 <_strtod_l+0x862>
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	dd08      	ble.n	80064e4 <_strtod_l+0x754>
 80064d2:	4639      	mov	r1, r7
 80064d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064d6:	4620      	mov	r0, r4
 80064d8:	f001 fe32 	bl	8008140 <__pow5mult>
 80064dc:	4607      	mov	r7, r0
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f ae92 	beq.w	8006208 <_strtod_l+0x478>
 80064e4:	f1ba 0f00 	cmp.w	sl, #0
 80064e8:	dd08      	ble.n	80064fc <_strtod_l+0x76c>
 80064ea:	4639      	mov	r1, r7
 80064ec:	4652      	mov	r2, sl
 80064ee:	4620      	mov	r0, r4
 80064f0:	f001 fe80 	bl	80081f4 <__lshift>
 80064f4:	4607      	mov	r7, r0
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f43f ae86 	beq.w	8006208 <_strtod_l+0x478>
 80064fc:	f1bb 0f00 	cmp.w	fp, #0
 8006500:	dd08      	ble.n	8006514 <_strtod_l+0x784>
 8006502:	4631      	mov	r1, r6
 8006504:	465a      	mov	r2, fp
 8006506:	4620      	mov	r0, r4
 8006508:	f001 fe74 	bl	80081f4 <__lshift>
 800650c:	4606      	mov	r6, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f ae7a 	beq.w	8006208 <_strtod_l+0x478>
 8006514:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006516:	463a      	mov	r2, r7
 8006518:	4620      	mov	r0, r4
 800651a:	f001 fef7 	bl	800830c <__mdiff>
 800651e:	4605      	mov	r5, r0
 8006520:	2800      	cmp	r0, #0
 8006522:	f43f ae71 	beq.w	8006208 <_strtod_l+0x478>
 8006526:	2300      	movs	r3, #0
 8006528:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800652c:	60c3      	str	r3, [r0, #12]
 800652e:	4631      	mov	r1, r6
 8006530:	f001 fed0 	bl	80082d4 <__mcmp>
 8006534:	2800      	cmp	r0, #0
 8006536:	da7d      	bge.n	8006634 <_strtod_l+0x8a4>
 8006538:	ea5a 0308 	orrs.w	r3, sl, r8
 800653c:	f040 80a3 	bne.w	8006686 <_strtod_l+0x8f6>
 8006540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 809e 	bne.w	8006686 <_strtod_l+0x8f6>
 800654a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800654e:	0d1b      	lsrs	r3, r3, #20
 8006550:	051b      	lsls	r3, r3, #20
 8006552:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006556:	f240 8096 	bls.w	8006686 <_strtod_l+0x8f6>
 800655a:	696b      	ldr	r3, [r5, #20]
 800655c:	b91b      	cbnz	r3, 8006566 <_strtod_l+0x7d6>
 800655e:	692b      	ldr	r3, [r5, #16]
 8006560:	2b01      	cmp	r3, #1
 8006562:	f340 8090 	ble.w	8006686 <_strtod_l+0x8f6>
 8006566:	4629      	mov	r1, r5
 8006568:	2201      	movs	r2, #1
 800656a:	4620      	mov	r0, r4
 800656c:	f001 fe42 	bl	80081f4 <__lshift>
 8006570:	4631      	mov	r1, r6
 8006572:	4605      	mov	r5, r0
 8006574:	f001 feae 	bl	80082d4 <__mcmp>
 8006578:	2800      	cmp	r0, #0
 800657a:	f340 8084 	ble.w	8006686 <_strtod_l+0x8f6>
 800657e:	9904      	ldr	r1, [sp, #16]
 8006580:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <_strtod_l+0x8a0>)
 8006582:	464b      	mov	r3, r9
 8006584:	2900      	cmp	r1, #0
 8006586:	f000 809d 	beq.w	80066c4 <_strtod_l+0x934>
 800658a:	ea02 0109 	and.w	r1, r2, r9
 800658e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006592:	f300 8097 	bgt.w	80066c4 <_strtod_l+0x934>
 8006596:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800659a:	f77f aea5 	ble.w	80062e8 <_strtod_l+0x558>
 800659e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006620 <_strtod_l+0x890>
 80065a2:	ec49 8b16 	vmov	d6, r8, r9
 80065a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80065ae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	bf08      	it	eq
 80065b6:	2322      	moveq	r3, #34	; 0x22
 80065b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80065bc:	bf08      	it	eq
 80065be:	6023      	streq	r3, [r4, #0]
 80065c0:	e62c      	b.n	800621c <_strtod_l+0x48c>
 80065c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80065c6:	fa01 f202 	lsl.w	r2, r1, r2
 80065ca:	ea02 0808 	and.w	r8, r2, r8
 80065ce:	e6d9      	b.n	8006384 <_strtod_l+0x5f4>
 80065d0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80065d4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80065d8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80065dc:	33e2      	adds	r3, #226	; 0xe2
 80065de:	fa00 f303 	lsl.w	r3, r0, r3
 80065e2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80065e6:	e73f      	b.n	8006468 <_strtod_l+0x6d8>
 80065e8:	2200      	movs	r2, #0
 80065ea:	2301      	movs	r3, #1
 80065ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065f0:	e73a      	b.n	8006468 <_strtod_l+0x6d8>
 80065f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80065f4:	461a      	mov	r2, r3
 80065f6:	4620      	mov	r0, r4
 80065f8:	f001 fdfc 	bl	80081f4 <__lshift>
 80065fc:	9012      	str	r0, [sp, #72]	; 0x48
 80065fe:	2800      	cmp	r0, #0
 8006600:	f47f af64 	bne.w	80064cc <_strtod_l+0x73c>
 8006604:	e600      	b.n	8006208 <_strtod_l+0x478>
 8006606:	bf00      	nop
 8006608:	94a03595 	.word	0x94a03595
 800660c:	3fcfffff 	.word	0x3fcfffff
 8006610:	94a03595 	.word	0x94a03595
 8006614:	3fdfffff 	.word	0x3fdfffff
 8006618:	35afe535 	.word	0x35afe535
 800661c:	3fe00000 	.word	0x3fe00000
 8006620:	00000000 	.word	0x00000000
 8006624:	39500000 	.word	0x39500000
 8006628:	08009830 	.word	0x08009830
 800662c:	fffffc02 	.word	0xfffffc02
 8006630:	7ff00000 	.word	0x7ff00000
 8006634:	46cb      	mov	fp, r9
 8006636:	d15f      	bne.n	80066f8 <_strtod_l+0x968>
 8006638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800663c:	f1ba 0f00 	cmp.w	sl, #0
 8006640:	d02a      	beq.n	8006698 <_strtod_l+0x908>
 8006642:	4aa7      	ldr	r2, [pc, #668]	; (80068e0 <_strtod_l+0xb50>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d12b      	bne.n	80066a0 <_strtod_l+0x910>
 8006648:	9b04      	ldr	r3, [sp, #16]
 800664a:	4642      	mov	r2, r8
 800664c:	b1fb      	cbz	r3, 800668e <_strtod_l+0x8fe>
 800664e:	4ba5      	ldr	r3, [pc, #660]	; (80068e4 <_strtod_l+0xb54>)
 8006650:	ea09 0303 	and.w	r3, r9, r3
 8006654:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800665c:	d81a      	bhi.n	8006694 <_strtod_l+0x904>
 800665e:	0d1b      	lsrs	r3, r3, #20
 8006660:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	429a      	cmp	r2, r3
 800666a:	d119      	bne.n	80066a0 <_strtod_l+0x910>
 800666c:	4b9e      	ldr	r3, [pc, #632]	; (80068e8 <_strtod_l+0xb58>)
 800666e:	459b      	cmp	fp, r3
 8006670:	d102      	bne.n	8006678 <_strtod_l+0x8e8>
 8006672:	3201      	adds	r2, #1
 8006674:	f43f adc8 	beq.w	8006208 <_strtod_l+0x478>
 8006678:	4b9a      	ldr	r3, [pc, #616]	; (80068e4 <_strtod_l+0xb54>)
 800667a:	ea0b 0303 	and.w	r3, fp, r3
 800667e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006682:	f04f 0800 	mov.w	r8, #0
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d188      	bne.n	800659e <_strtod_l+0x80e>
 800668c:	e5c6      	b.n	800621c <_strtod_l+0x48c>
 800668e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006692:	e7e9      	b.n	8006668 <_strtod_l+0x8d8>
 8006694:	460b      	mov	r3, r1
 8006696:	e7e7      	b.n	8006668 <_strtod_l+0x8d8>
 8006698:	ea53 0308 	orrs.w	r3, r3, r8
 800669c:	f43f af6f 	beq.w	800657e <_strtod_l+0x7ee>
 80066a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a2:	b1cb      	cbz	r3, 80066d8 <_strtod_l+0x948>
 80066a4:	ea13 0f0b 	tst.w	r3, fp
 80066a8:	d0ed      	beq.n	8006686 <_strtod_l+0x8f6>
 80066aa:	9a04      	ldr	r2, [sp, #16]
 80066ac:	4640      	mov	r0, r8
 80066ae:	4649      	mov	r1, r9
 80066b0:	f1ba 0f00 	cmp.w	sl, #0
 80066b4:	d014      	beq.n	80066e0 <_strtod_l+0x950>
 80066b6:	f7ff fb51 	bl	8005d5c <sulp>
 80066ba:	ee38 7b00 	vadd.f64	d7, d8, d0
 80066be:	ec59 8b17 	vmov	r8, r9, d7
 80066c2:	e7e0      	b.n	8006686 <_strtod_l+0x8f6>
 80066c4:	4013      	ands	r3, r2
 80066c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80066ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80066ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80066d2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80066d6:	e7d6      	b.n	8006686 <_strtod_l+0x8f6>
 80066d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066da:	ea13 0f08 	tst.w	r3, r8
 80066de:	e7e3      	b.n	80066a8 <_strtod_l+0x918>
 80066e0:	f7ff fb3c 	bl	8005d5c <sulp>
 80066e4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80066e8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80066ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f0:	ec59 8b10 	vmov	r8, r9, d0
 80066f4:	d1c7      	bne.n	8006686 <_strtod_l+0x8f6>
 80066f6:	e5f7      	b.n	80062e8 <_strtod_l+0x558>
 80066f8:	4631      	mov	r1, r6
 80066fa:	4628      	mov	r0, r5
 80066fc:	f001 ff68 	bl	80085d0 <__ratio>
 8006700:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8006704:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8006708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670c:	d865      	bhi.n	80067da <_strtod_l+0xa4a>
 800670e:	f1ba 0f00 	cmp.w	sl, #0
 8006712:	d042      	beq.n	800679a <_strtod_l+0xa0a>
 8006714:	4b75      	ldr	r3, [pc, #468]	; (80068ec <_strtod_l+0xb5c>)
 8006716:	2200      	movs	r2, #0
 8006718:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800671c:	4871      	ldr	r0, [pc, #452]	; (80068e4 <_strtod_l+0xb54>)
 800671e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80068f8 <_strtod_l+0xb68>
 8006722:	ea0b 0100 	and.w	r1, fp, r0
 8006726:	4561      	cmp	r1, ip
 8006728:	f040 808e 	bne.w	8006848 <_strtod_l+0xab8>
 800672c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8006730:	ec49 8b10 	vmov	d0, r8, r9
 8006734:	ec43 2b1c 	vmov	d12, r2, r3
 8006738:	910a      	str	r1, [sp, #40]	; 0x28
 800673a:	f001 fe71 	bl	8008420 <__ulp>
 800673e:	ec49 8b1e 	vmov	d14, r8, r9
 8006742:	4868      	ldr	r0, [pc, #416]	; (80068e4 <_strtod_l+0xb54>)
 8006744:	eeac eb00 	vfma.f64	d14, d12, d0
 8006748:	ee1e 3a90 	vmov	r3, s29
 800674c:	4a68      	ldr	r2, [pc, #416]	; (80068f0 <_strtod_l+0xb60>)
 800674e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006750:	4018      	ands	r0, r3
 8006752:	4290      	cmp	r0, r2
 8006754:	ec59 8b1e 	vmov	r8, r9, d14
 8006758:	d94e      	bls.n	80067f8 <_strtod_l+0xa68>
 800675a:	ee18 3a90 	vmov	r3, s17
 800675e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006762:	4293      	cmp	r3, r2
 8006764:	d104      	bne.n	8006770 <_strtod_l+0x9e0>
 8006766:	ee18 3a10 	vmov	r3, s16
 800676a:	3301      	adds	r3, #1
 800676c:	f43f ad4c 	beq.w	8006208 <_strtod_l+0x478>
 8006770:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80068e8 <_strtod_l+0xb58>
 8006774:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006778:	9912      	ldr	r1, [sp, #72]	; 0x48
 800677a:	4620      	mov	r0, r4
 800677c:	f001 fb1e 	bl	8007dbc <_Bfree>
 8006780:	4639      	mov	r1, r7
 8006782:	4620      	mov	r0, r4
 8006784:	f001 fb1a 	bl	8007dbc <_Bfree>
 8006788:	4631      	mov	r1, r6
 800678a:	4620      	mov	r0, r4
 800678c:	f001 fb16 	bl	8007dbc <_Bfree>
 8006790:	4629      	mov	r1, r5
 8006792:	4620      	mov	r0, r4
 8006794:	f001 fb12 	bl	8007dbc <_Bfree>
 8006798:	e619      	b.n	80063ce <_strtod_l+0x63e>
 800679a:	f1b8 0f00 	cmp.w	r8, #0
 800679e:	d112      	bne.n	80067c6 <_strtod_l+0xa36>
 80067a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067a4:	b9b3      	cbnz	r3, 80067d4 <_strtod_l+0xa44>
 80067a6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80067aa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80067ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80067b6:	bf58      	it	pl
 80067b8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80067bc:	eeb1 7b4d 	vneg.f64	d7, d13
 80067c0:	ec53 2b17 	vmov	r2, r3, d7
 80067c4:	e7aa      	b.n	800671c <_strtod_l+0x98c>
 80067c6:	f1b8 0f01 	cmp.w	r8, #1
 80067ca:	d103      	bne.n	80067d4 <_strtod_l+0xa44>
 80067cc:	f1b9 0f00 	cmp.w	r9, #0
 80067d0:	f43f ad8a 	beq.w	80062e8 <_strtod_l+0x558>
 80067d4:	4b47      	ldr	r3, [pc, #284]	; (80068f4 <_strtod_l+0xb64>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	e79e      	b.n	8006718 <_strtod_l+0x988>
 80067da:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80067de:	ee20 db0d 	vmul.f64	d13, d0, d13
 80067e2:	f1ba 0f00 	cmp.w	sl, #0
 80067e6:	d104      	bne.n	80067f2 <_strtod_l+0xa62>
 80067e8:	eeb1 7b4d 	vneg.f64	d7, d13
 80067ec:	ec53 2b17 	vmov	r2, r3, d7
 80067f0:	e794      	b.n	800671c <_strtod_l+0x98c>
 80067f2:	eeb0 7b4d 	vmov.f64	d7, d13
 80067f6:	e7f9      	b.n	80067ec <_strtod_l+0xa5c>
 80067f8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80067fc:	9b04      	ldr	r3, [sp, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ba      	bne.n	8006778 <_strtod_l+0x9e8>
 8006802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006806:	0d1b      	lsrs	r3, r3, #20
 8006808:	051b      	lsls	r3, r3, #20
 800680a:	4299      	cmp	r1, r3
 800680c:	d1b4      	bne.n	8006778 <_strtod_l+0x9e8>
 800680e:	ec51 0b1d 	vmov	r0, r1, d13
 8006812:	f7f9 ff41 	bl	8000698 <__aeabi_d2lz>
 8006816:	f7f9 fef9 	bl	800060c <__aeabi_l2d>
 800681a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800681e:	ec41 0b17 	vmov	d7, r0, r1
 8006822:	ea43 0308 	orr.w	r3, r3, r8
 8006826:	ea53 030a 	orrs.w	r3, r3, sl
 800682a:	ee3d db47 	vsub.f64	d13, d13, d7
 800682e:	d03c      	beq.n	80068aa <_strtod_l+0xb1a>
 8006830:	eeb4 dbca 	vcmpe.f64	d13, d10
 8006834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006838:	f53f acf0 	bmi.w	800621c <_strtod_l+0x48c>
 800683c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8006840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006844:	dd98      	ble.n	8006778 <_strtod_l+0x9e8>
 8006846:	e4e9      	b.n	800621c <_strtod_l+0x48c>
 8006848:	9804      	ldr	r0, [sp, #16]
 800684a:	b1f0      	cbz	r0, 800688a <_strtod_l+0xafa>
 800684c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8006850:	d81b      	bhi.n	800688a <_strtod_l+0xafa>
 8006852:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80068d8 <_strtod_l+0xb48>
 8006856:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800685a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685e:	d811      	bhi.n	8006884 <_strtod_l+0xaf4>
 8006860:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8006864:	ee1d 3a10 	vmov	r3, s26
 8006868:	2b01      	cmp	r3, #1
 800686a:	bf38      	it	cc
 800686c:	2301      	movcc	r3, #1
 800686e:	ee0d 3a10 	vmov	s26, r3
 8006872:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8006876:	f1ba 0f00 	cmp.w	sl, #0
 800687a:	d113      	bne.n	80068a4 <_strtod_l+0xb14>
 800687c:	eeb1 7b4d 	vneg.f64	d7, d13
 8006880:	ec53 2b17 	vmov	r2, r3, d7
 8006884:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8006888:	1a43      	subs	r3, r0, r1
 800688a:	eeb0 0b48 	vmov.f64	d0, d8
 800688e:	ec43 2b1c 	vmov	d12, r2, r3
 8006892:	910a      	str	r1, [sp, #40]	; 0x28
 8006894:	f001 fdc4 	bl	8008420 <__ulp>
 8006898:	990a      	ldr	r1, [sp, #40]	; 0x28
 800689a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800689e:	ec59 8b18 	vmov	r8, r9, d8
 80068a2:	e7ab      	b.n	80067fc <_strtod_l+0xa6c>
 80068a4:	eeb0 7b4d 	vmov.f64	d7, d13
 80068a8:	e7ea      	b.n	8006880 <_strtod_l+0xaf0>
 80068aa:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80068ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b2:	f57f af61 	bpl.w	8006778 <_strtod_l+0x9e8>
 80068b6:	e4b1      	b.n	800621c <_strtod_l+0x48c>
 80068b8:	2300      	movs	r3, #0
 80068ba:	9308      	str	r3, [sp, #32]
 80068bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	f7ff baad 	b.w	8005e20 <_strtod_l+0x90>
 80068c6:	2a65      	cmp	r2, #101	; 0x65
 80068c8:	f43f ab9f 	beq.w	800600a <_strtod_l+0x27a>
 80068cc:	2a45      	cmp	r2, #69	; 0x45
 80068ce:	f43f ab9c 	beq.w	800600a <_strtod_l+0x27a>
 80068d2:	2101      	movs	r1, #1
 80068d4:	f7ff bbd4 	b.w	8006080 <_strtod_l+0x2f0>
 80068d8:	ffc00000 	.word	0xffc00000
 80068dc:	41dfffff 	.word	0x41dfffff
 80068e0:	000fffff 	.word	0x000fffff
 80068e4:	7ff00000 	.word	0x7ff00000
 80068e8:	7fefffff 	.word	0x7fefffff
 80068ec:	3ff00000 	.word	0x3ff00000
 80068f0:	7c9fffff 	.word	0x7c9fffff
 80068f4:	bff00000 	.word	0xbff00000
 80068f8:	7fe00000 	.word	0x7fe00000

080068fc <_strtod_r>:
 80068fc:	4b01      	ldr	r3, [pc, #4]	; (8006904 <_strtod_r+0x8>)
 80068fe:	f7ff ba47 	b.w	8005d90 <_strtod_l>
 8006902:	bf00      	nop
 8006904:	20000074 	.word	0x20000074

08006908 <_strtol_l.constprop.0>:
 8006908:	2b01      	cmp	r3, #1
 800690a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690e:	d001      	beq.n	8006914 <_strtol_l.constprop.0+0xc>
 8006910:	2b24      	cmp	r3, #36	; 0x24
 8006912:	d906      	bls.n	8006922 <_strtol_l.constprop.0+0x1a>
 8006914:	f7fe fb82 	bl	800501c <__errno>
 8006918:	2316      	movs	r3, #22
 800691a:	6003      	str	r3, [r0, #0]
 800691c:	2000      	movs	r0, #0
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a08 <_strtol_l.constprop.0+0x100>
 8006926:	460d      	mov	r5, r1
 8006928:	462e      	mov	r6, r5
 800692a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800692e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006932:	f017 0708 	ands.w	r7, r7, #8
 8006936:	d1f7      	bne.n	8006928 <_strtol_l.constprop.0+0x20>
 8006938:	2c2d      	cmp	r4, #45	; 0x2d
 800693a:	d132      	bne.n	80069a2 <_strtol_l.constprop.0+0x9a>
 800693c:	782c      	ldrb	r4, [r5, #0]
 800693e:	2701      	movs	r7, #1
 8006940:	1cb5      	adds	r5, r6, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d05b      	beq.n	80069fe <_strtol_l.constprop.0+0xf6>
 8006946:	2b10      	cmp	r3, #16
 8006948:	d109      	bne.n	800695e <_strtol_l.constprop.0+0x56>
 800694a:	2c30      	cmp	r4, #48	; 0x30
 800694c:	d107      	bne.n	800695e <_strtol_l.constprop.0+0x56>
 800694e:	782c      	ldrb	r4, [r5, #0]
 8006950:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006954:	2c58      	cmp	r4, #88	; 0x58
 8006956:	d14d      	bne.n	80069f4 <_strtol_l.constprop.0+0xec>
 8006958:	786c      	ldrb	r4, [r5, #1]
 800695a:	2310      	movs	r3, #16
 800695c:	3502      	adds	r5, #2
 800695e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006962:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006966:	f04f 0c00 	mov.w	ip, #0
 800696a:	fbb8 f9f3 	udiv	r9, r8, r3
 800696e:	4666      	mov	r6, ip
 8006970:	fb03 8a19 	mls	sl, r3, r9, r8
 8006974:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006978:	f1be 0f09 	cmp.w	lr, #9
 800697c:	d816      	bhi.n	80069ac <_strtol_l.constprop.0+0xa4>
 800697e:	4674      	mov	r4, lr
 8006980:	42a3      	cmp	r3, r4
 8006982:	dd24      	ble.n	80069ce <_strtol_l.constprop.0+0xc6>
 8006984:	f1bc 0f00 	cmp.w	ip, #0
 8006988:	db1e      	blt.n	80069c8 <_strtol_l.constprop.0+0xc0>
 800698a:	45b1      	cmp	r9, r6
 800698c:	d31c      	bcc.n	80069c8 <_strtol_l.constprop.0+0xc0>
 800698e:	d101      	bne.n	8006994 <_strtol_l.constprop.0+0x8c>
 8006990:	45a2      	cmp	sl, r4
 8006992:	db19      	blt.n	80069c8 <_strtol_l.constprop.0+0xc0>
 8006994:	fb06 4603 	mla	r6, r6, r3, r4
 8006998:	f04f 0c01 	mov.w	ip, #1
 800699c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069a0:	e7e8      	b.n	8006974 <_strtol_l.constprop.0+0x6c>
 80069a2:	2c2b      	cmp	r4, #43	; 0x2b
 80069a4:	bf04      	itt	eq
 80069a6:	782c      	ldrbeq	r4, [r5, #0]
 80069a8:	1cb5      	addeq	r5, r6, #2
 80069aa:	e7ca      	b.n	8006942 <_strtol_l.constprop.0+0x3a>
 80069ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80069b0:	f1be 0f19 	cmp.w	lr, #25
 80069b4:	d801      	bhi.n	80069ba <_strtol_l.constprop.0+0xb2>
 80069b6:	3c37      	subs	r4, #55	; 0x37
 80069b8:	e7e2      	b.n	8006980 <_strtol_l.constprop.0+0x78>
 80069ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80069be:	f1be 0f19 	cmp.w	lr, #25
 80069c2:	d804      	bhi.n	80069ce <_strtol_l.constprop.0+0xc6>
 80069c4:	3c57      	subs	r4, #87	; 0x57
 80069c6:	e7db      	b.n	8006980 <_strtol_l.constprop.0+0x78>
 80069c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80069cc:	e7e6      	b.n	800699c <_strtol_l.constprop.0+0x94>
 80069ce:	f1bc 0f00 	cmp.w	ip, #0
 80069d2:	da05      	bge.n	80069e0 <_strtol_l.constprop.0+0xd8>
 80069d4:	2322      	movs	r3, #34	; 0x22
 80069d6:	6003      	str	r3, [r0, #0]
 80069d8:	4646      	mov	r6, r8
 80069da:	b942      	cbnz	r2, 80069ee <_strtol_l.constprop.0+0xe6>
 80069dc:	4630      	mov	r0, r6
 80069de:	e79e      	b.n	800691e <_strtol_l.constprop.0+0x16>
 80069e0:	b107      	cbz	r7, 80069e4 <_strtol_l.constprop.0+0xdc>
 80069e2:	4276      	negs	r6, r6
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d0f9      	beq.n	80069dc <_strtol_l.constprop.0+0xd4>
 80069e8:	f1bc 0f00 	cmp.w	ip, #0
 80069ec:	d000      	beq.n	80069f0 <_strtol_l.constprop.0+0xe8>
 80069ee:	1e69      	subs	r1, r5, #1
 80069f0:	6011      	str	r1, [r2, #0]
 80069f2:	e7f3      	b.n	80069dc <_strtol_l.constprop.0+0xd4>
 80069f4:	2430      	movs	r4, #48	; 0x30
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1b1      	bne.n	800695e <_strtol_l.constprop.0+0x56>
 80069fa:	2308      	movs	r3, #8
 80069fc:	e7af      	b.n	800695e <_strtol_l.constprop.0+0x56>
 80069fe:	2c30      	cmp	r4, #48	; 0x30
 8006a00:	d0a5      	beq.n	800694e <_strtol_l.constprop.0+0x46>
 8006a02:	230a      	movs	r3, #10
 8006a04:	e7ab      	b.n	800695e <_strtol_l.constprop.0+0x56>
 8006a06:	bf00      	nop
 8006a08:	08009859 	.word	0x08009859

08006a0c <_strtol_r>:
 8006a0c:	f7ff bf7c 	b.w	8006908 <_strtol_l.constprop.0>

08006a10 <quorem>:
 8006a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	6903      	ldr	r3, [r0, #16]
 8006a16:	690c      	ldr	r4, [r1, #16]
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	f2c0 8081 	blt.w	8006b22 <quorem+0x112>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	f101 0814 	add.w	r8, r1, #20
 8006a26:	f100 0514 	add.w	r5, r0, #20
 8006a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a48:	d331      	bcc.n	8006aae <quorem+0x9e>
 8006a4a:	f04f 0e00 	mov.w	lr, #0
 8006a4e:	4640      	mov	r0, r8
 8006a50:	46ac      	mov	ip, r5
 8006a52:	46f2      	mov	sl, lr
 8006a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a58:	b293      	uxth	r3, r2
 8006a5a:	fb06 e303 	mla	r3, r6, r3, lr
 8006a5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ebaa 0303 	sub.w	r3, sl, r3
 8006a68:	f8dc a000 	ldr.w	sl, [ip]
 8006a6c:	0c12      	lsrs	r2, r2, #16
 8006a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8006a72:	fb06 e202 	mla	r2, r6, r2, lr
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	9b00      	ldr	r3, [sp, #0]
 8006a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a7e:	b292      	uxth	r2, r2
 8006a80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a88:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a8c:	4581      	cmp	r9, r0
 8006a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a92:	f84c 3b04 	str.w	r3, [ip], #4
 8006a96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a9a:	d2db      	bcs.n	8006a54 <quorem+0x44>
 8006a9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006aa0:	b92b      	cbnz	r3, 8006aae <quorem+0x9e>
 8006aa2:	9b01      	ldr	r3, [sp, #4]
 8006aa4:	3b04      	subs	r3, #4
 8006aa6:	429d      	cmp	r5, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	d32e      	bcc.n	8006b0a <quorem+0xfa>
 8006aac:	613c      	str	r4, [r7, #16]
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f001 fc10 	bl	80082d4 <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	db24      	blt.n	8006b02 <quorem+0xf2>
 8006ab8:	3601      	adds	r6, #1
 8006aba:	4628      	mov	r0, r5
 8006abc:	f04f 0c00 	mov.w	ip, #0
 8006ac0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8006ac8:	b293      	uxth	r3, r2
 8006aca:	ebac 0303 	sub.w	r3, ip, r3
 8006ace:	0c12      	lsrs	r2, r2, #16
 8006ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8006ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae2:	45c1      	cmp	r9, r8
 8006ae4:	f840 3b04 	str.w	r3, [r0], #4
 8006ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aec:	d2e8      	bcs.n	8006ac0 <quorem+0xb0>
 8006aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af6:	b922      	cbnz	r2, 8006b02 <quorem+0xf2>
 8006af8:	3b04      	subs	r3, #4
 8006afa:	429d      	cmp	r5, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	d30a      	bcc.n	8006b16 <quorem+0x106>
 8006b00:	613c      	str	r4, [r7, #16]
 8006b02:	4630      	mov	r0, r6
 8006b04:	b003      	add	sp, #12
 8006b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	3b04      	subs	r3, #4
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	d1cc      	bne.n	8006aac <quorem+0x9c>
 8006b12:	3c01      	subs	r4, #1
 8006b14:	e7c7      	b.n	8006aa6 <quorem+0x96>
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	3b04      	subs	r3, #4
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	d1f0      	bne.n	8006b00 <quorem+0xf0>
 8006b1e:	3c01      	subs	r4, #1
 8006b20:	e7eb      	b.n	8006afa <quorem+0xea>
 8006b22:	2000      	movs	r0, #0
 8006b24:	e7ee      	b.n	8006b04 <quorem+0xf4>
	...

08006b28 <_dtoa_r>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	ed2d 8b02 	vpush	{d8}
 8006b30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b32:	b091      	sub	sp, #68	; 0x44
 8006b34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b38:	ec59 8b10 	vmov	r8, r9, d0
 8006b3c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006b3e:	9106      	str	r1, [sp, #24]
 8006b40:	4606      	mov	r6, r0
 8006b42:	9208      	str	r2, [sp, #32]
 8006b44:	930c      	str	r3, [sp, #48]	; 0x30
 8006b46:	b975      	cbnz	r5, 8006b66 <_dtoa_r+0x3e>
 8006b48:	2010      	movs	r0, #16
 8006b4a:	f001 f8cf 	bl	8007cec <malloc>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	6270      	str	r0, [r6, #36]	; 0x24
 8006b52:	b920      	cbnz	r0, 8006b5e <_dtoa_r+0x36>
 8006b54:	4baa      	ldr	r3, [pc, #680]	; (8006e00 <_dtoa_r+0x2d8>)
 8006b56:	21ea      	movs	r1, #234	; 0xea
 8006b58:	48aa      	ldr	r0, [pc, #680]	; (8006e04 <_dtoa_r+0x2dc>)
 8006b5a:	f002 f83b 	bl	8008bd4 <__assert_func>
 8006b5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b62:	6005      	str	r5, [r0, #0]
 8006b64:	60c5      	str	r5, [r0, #12]
 8006b66:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b68:	6819      	ldr	r1, [r3, #0]
 8006b6a:	b151      	cbz	r1, 8006b82 <_dtoa_r+0x5a>
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	604a      	str	r2, [r1, #4]
 8006b70:	2301      	movs	r3, #1
 8006b72:	4093      	lsls	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]
 8006b76:	4630      	mov	r0, r6
 8006b78:	f001 f920 	bl	8007dbc <_Bfree>
 8006b7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	f1b9 0300 	subs.w	r3, r9, #0
 8006b86:	bfbb      	ittet	lt
 8006b88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	9303      	strlt	r3, [sp, #12]
 8006b8e:	2300      	movge	r3, #0
 8006b90:	2201      	movlt	r2, #1
 8006b92:	bfac      	ite	ge
 8006b94:	6023      	strge	r3, [r4, #0]
 8006b96:	6022      	strlt	r2, [r4, #0]
 8006b98:	4b9b      	ldr	r3, [pc, #620]	; (8006e08 <_dtoa_r+0x2e0>)
 8006b9a:	9c03      	ldr	r4, [sp, #12]
 8006b9c:	43a3      	bics	r3, r4
 8006b9e:	d11c      	bne.n	8006bda <_dtoa_r+0xb2>
 8006ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006bac:	ea53 0308 	orrs.w	r3, r3, r8
 8006bb0:	f000 84fd 	beq.w	80075ae <_dtoa_r+0xa86>
 8006bb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bb6:	b963      	cbnz	r3, 8006bd2 <_dtoa_r+0xaa>
 8006bb8:	4b94      	ldr	r3, [pc, #592]	; (8006e0c <_dtoa_r+0x2e4>)
 8006bba:	e01f      	b.n	8006bfc <_dtoa_r+0xd4>
 8006bbc:	4b94      	ldr	r3, [pc, #592]	; (8006e10 <_dtoa_r+0x2e8>)
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	9801      	ldr	r0, [sp, #4]
 8006bc8:	b011      	add	sp, #68	; 0x44
 8006bca:	ecbd 8b02 	vpop	{d8}
 8006bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd2:	4b8e      	ldr	r3, [pc, #568]	; (8006e0c <_dtoa_r+0x2e4>)
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	3303      	adds	r3, #3
 8006bd8:	e7f3      	b.n	8006bc2 <_dtoa_r+0x9a>
 8006bda:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006bde:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be6:	d10b      	bne.n	8006c00 <_dtoa_r+0xd8>
 8006be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bea:	2301      	movs	r3, #1
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 84d9 	beq.w	80075a8 <_dtoa_r+0xa80>
 8006bf6:	4887      	ldr	r0, [pc, #540]	; (8006e14 <_dtoa_r+0x2ec>)
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	1e43      	subs	r3, r0, #1
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	e7e2      	b.n	8006bc6 <_dtoa_r+0x9e>
 8006c00:	a90f      	add	r1, sp, #60	; 0x3c
 8006c02:	aa0e      	add	r2, sp, #56	; 0x38
 8006c04:	4630      	mov	r0, r6
 8006c06:	eeb0 0b48 	vmov.f64	d0, d8
 8006c0a:	f001 fc85 	bl	8008518 <__d2b>
 8006c0e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006c12:	4605      	mov	r5, r0
 8006c14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006c16:	2900      	cmp	r1, #0
 8006c18:	d046      	beq.n	8006ca8 <_dtoa_r+0x180>
 8006c1a:	ee18 4a90 	vmov	r4, s17
 8006c1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006c22:	ec53 2b18 	vmov	r2, r3, d8
 8006c26:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006c2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006c32:	2400      	movs	r4, #0
 8006c34:	ec43 2b16 	vmov	d6, r2, r3
 8006c38:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006c3c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006de8 <_dtoa_r+0x2c0>
 8006c40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c44:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006df0 <_dtoa_r+0x2c8>
 8006c48:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006c4c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006df8 <_dtoa_r+0x2d0>
 8006c50:	ee07 1a90 	vmov	s15, r1
 8006c54:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006c58:	eeb0 7b46 	vmov.f64	d7, d6
 8006c5c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006c60:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006c64:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6c:	ee16 ba90 	vmov	fp, s13
 8006c70:	940a      	str	r4, [sp, #40]	; 0x28
 8006c72:	d508      	bpl.n	8006c86 <_dtoa_r+0x15e>
 8006c74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006c78:	eeb4 6b47 	vcmp.f64	d6, d7
 8006c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c80:	bf18      	it	ne
 8006c82:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8006c86:	f1bb 0f16 	cmp.w	fp, #22
 8006c8a:	d82f      	bhi.n	8006cec <_dtoa_r+0x1c4>
 8006c8c:	4b62      	ldr	r3, [pc, #392]	; (8006e18 <_dtoa_r+0x2f0>)
 8006c8e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c92:	ed93 7b00 	vldr	d7, [r3]
 8006c96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9e:	d501      	bpl.n	8006ca4 <_dtoa_r+0x17c>
 8006ca0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e022      	b.n	8006cee <_dtoa_r+0x1c6>
 8006ca8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006caa:	4401      	add	r1, r0
 8006cac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	bfc1      	itttt	gt
 8006cb4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cb8:	fa04 f303 	lslgt.w	r3, r4, r3
 8006cbc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006cc0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8006cc4:	bfd6      	itet	le
 8006cc6:	f1c3 0320 	rsble	r3, r3, #32
 8006cca:	ea43 0808 	orrgt.w	r8, r3, r8
 8006cce:	fa08 f803 	lslle.w	r8, r8, r3
 8006cd2:	ee07 8a90 	vmov	s15, r8
 8006cd6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006cda:	3901      	subs	r1, #1
 8006cdc:	ee17 4a90 	vmov	r4, s15
 8006ce0:	ec53 2b17 	vmov	r2, r3, d7
 8006ce4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006ce8:	2401      	movs	r4, #1
 8006cea:	e7a3      	b.n	8006c34 <_dtoa_r+0x10c>
 8006cec:	2301      	movs	r3, #1
 8006cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cf0:	1a43      	subs	r3, r0, r1
 8006cf2:	1e5a      	subs	r2, r3, #1
 8006cf4:	bf45      	ittet	mi
 8006cf6:	f1c3 0301 	rsbmi	r3, r3, #1
 8006cfa:	9304      	strmi	r3, [sp, #16]
 8006cfc:	2300      	movpl	r3, #0
 8006cfe:	2300      	movmi	r3, #0
 8006d00:	9205      	str	r2, [sp, #20]
 8006d02:	bf54      	ite	pl
 8006d04:	9304      	strpl	r3, [sp, #16]
 8006d06:	9305      	strmi	r3, [sp, #20]
 8006d08:	f1bb 0f00 	cmp.w	fp, #0
 8006d0c:	db18      	blt.n	8006d40 <_dtoa_r+0x218>
 8006d0e:	9b05      	ldr	r3, [sp, #20]
 8006d10:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006d14:	445b      	add	r3, fp
 8006d16:	9305      	str	r3, [sp, #20]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9a06      	ldr	r2, [sp, #24]
 8006d1c:	2a09      	cmp	r2, #9
 8006d1e:	d849      	bhi.n	8006db4 <_dtoa_r+0x28c>
 8006d20:	2a05      	cmp	r2, #5
 8006d22:	bfc4      	itt	gt
 8006d24:	3a04      	subgt	r2, #4
 8006d26:	9206      	strgt	r2, [sp, #24]
 8006d28:	9a06      	ldr	r2, [sp, #24]
 8006d2a:	f1a2 0202 	sub.w	r2, r2, #2
 8006d2e:	bfcc      	ite	gt
 8006d30:	2400      	movgt	r4, #0
 8006d32:	2401      	movle	r4, #1
 8006d34:	2a03      	cmp	r2, #3
 8006d36:	d848      	bhi.n	8006dca <_dtoa_r+0x2a2>
 8006d38:	e8df f002 	tbb	[pc, r2]
 8006d3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006d40:	9b04      	ldr	r3, [sp, #16]
 8006d42:	2200      	movs	r2, #0
 8006d44:	eba3 030b 	sub.w	r3, r3, fp
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4c:	f1cb 0300 	rsb	r3, fp, #0
 8006d50:	e7e3      	b.n	8006d1a <_dtoa_r+0x1f2>
 8006d52:	2200      	movs	r2, #0
 8006d54:	9207      	str	r2, [sp, #28]
 8006d56:	9a08      	ldr	r2, [sp, #32]
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	dc39      	bgt.n	8006dd0 <_dtoa_r+0x2a8>
 8006d5c:	f04f 0a01 	mov.w	sl, #1
 8006d60:	46d1      	mov	r9, sl
 8006d62:	4652      	mov	r2, sl
 8006d64:	f8cd a020 	str.w	sl, [sp, #32]
 8006d68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6079      	str	r1, [r7, #4]
 8006d6e:	2004      	movs	r0, #4
 8006d70:	f100 0c14 	add.w	ip, r0, #20
 8006d74:	4594      	cmp	ip, r2
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	d92f      	bls.n	8006dda <_dtoa_r+0x2b2>
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006d7e:	f000 ffdd 	bl	8007d3c <_Balloc>
 8006d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d84:	9001      	str	r0, [sp, #4]
 8006d86:	4602      	mov	r2, r0
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d149      	bne.n	8006e20 <_dtoa_r+0x2f8>
 8006d8c:	4b23      	ldr	r3, [pc, #140]	; (8006e1c <_dtoa_r+0x2f4>)
 8006d8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d92:	e6e1      	b.n	8006b58 <_dtoa_r+0x30>
 8006d94:	2201      	movs	r2, #1
 8006d96:	e7dd      	b.n	8006d54 <_dtoa_r+0x22c>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	9207      	str	r2, [sp, #28]
 8006d9c:	9a08      	ldr	r2, [sp, #32]
 8006d9e:	eb0b 0a02 	add.w	sl, fp, r2
 8006da2:	f10a 0901 	add.w	r9, sl, #1
 8006da6:	464a      	mov	r2, r9
 8006da8:	2a01      	cmp	r2, #1
 8006daa:	bfb8      	it	lt
 8006dac:	2201      	movlt	r2, #1
 8006dae:	e7db      	b.n	8006d68 <_dtoa_r+0x240>
 8006db0:	2201      	movs	r2, #1
 8006db2:	e7f2      	b.n	8006d9a <_dtoa_r+0x272>
 8006db4:	2401      	movs	r4, #1
 8006db6:	2200      	movs	r2, #0
 8006db8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006dbc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	46d1      	mov	r9, sl
 8006dc4:	2212      	movs	r2, #18
 8006dc6:	9108      	str	r1, [sp, #32]
 8006dc8:	e7ce      	b.n	8006d68 <_dtoa_r+0x240>
 8006dca:	2201      	movs	r2, #1
 8006dcc:	9207      	str	r2, [sp, #28]
 8006dce:	e7f5      	b.n	8006dbc <_dtoa_r+0x294>
 8006dd0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006dd4:	46d1      	mov	r9, sl
 8006dd6:	4652      	mov	r2, sl
 8006dd8:	e7c6      	b.n	8006d68 <_dtoa_r+0x240>
 8006dda:	3101      	adds	r1, #1
 8006ddc:	6079      	str	r1, [r7, #4]
 8006dde:	0040      	lsls	r0, r0, #1
 8006de0:	e7c6      	b.n	8006d70 <_dtoa_r+0x248>
 8006de2:	bf00      	nop
 8006de4:	f3af 8000 	nop.w
 8006de8:	636f4361 	.word	0x636f4361
 8006dec:	3fd287a7 	.word	0x3fd287a7
 8006df0:	8b60c8b3 	.word	0x8b60c8b3
 8006df4:	3fc68a28 	.word	0x3fc68a28
 8006df8:	509f79fb 	.word	0x509f79fb
 8006dfc:	3fd34413 	.word	0x3fd34413
 8006e00:	08009966 	.word	0x08009966
 8006e04:	0800997d 	.word	0x0800997d
 8006e08:	7ff00000 	.word	0x7ff00000
 8006e0c:	08009962 	.word	0x08009962
 8006e10:	08009959 	.word	0x08009959
 8006e14:	080097dd 	.word	0x080097dd
 8006e18:	08009ae8 	.word	0x08009ae8
 8006e1c:	080099d8 	.word	0x080099d8
 8006e20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006e22:	9901      	ldr	r1, [sp, #4]
 8006e24:	6011      	str	r1, [r2, #0]
 8006e26:	f1b9 0f0e 	cmp.w	r9, #14
 8006e2a:	d86c      	bhi.n	8006f06 <_dtoa_r+0x3de>
 8006e2c:	2c00      	cmp	r4, #0
 8006e2e:	d06a      	beq.n	8006f06 <_dtoa_r+0x3de>
 8006e30:	f1bb 0f00 	cmp.w	fp, #0
 8006e34:	f340 80a0 	ble.w	8006f78 <_dtoa_r+0x450>
 8006e38:	49c1      	ldr	r1, [pc, #772]	; (8007140 <_dtoa_r+0x618>)
 8006e3a:	f00b 020f 	and.w	r2, fp, #15
 8006e3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006e42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e46:	ed92 7b00 	vldr	d7, [r2]
 8006e4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8006e4e:	f000 8087 	beq.w	8006f60 <_dtoa_r+0x438>
 8006e52:	4abc      	ldr	r2, [pc, #752]	; (8007144 <_dtoa_r+0x61c>)
 8006e54:	ed92 6b08 	vldr	d6, [r2, #32]
 8006e58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006e5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006e60:	f001 010f 	and.w	r1, r1, #15
 8006e64:	2203      	movs	r2, #3
 8006e66:	48b7      	ldr	r0, [pc, #732]	; (8007144 <_dtoa_r+0x61c>)
 8006e68:	2900      	cmp	r1, #0
 8006e6a:	d17b      	bne.n	8006f64 <_dtoa_r+0x43c>
 8006e6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006e70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006e74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e7a:	2900      	cmp	r1, #0
 8006e7c:	f000 80a2 	beq.w	8006fc4 <_dtoa_r+0x49c>
 8006e80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006e84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e90:	f140 8098 	bpl.w	8006fc4 <_dtoa_r+0x49c>
 8006e94:	f1b9 0f00 	cmp.w	r9, #0
 8006e98:	f000 8094 	beq.w	8006fc4 <_dtoa_r+0x49c>
 8006e9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ea0:	dd2f      	ble.n	8006f02 <_dtoa_r+0x3da>
 8006ea2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006ea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006eae:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006eba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006ebe:	ee07 2a90 	vmov	s15, r2
 8006ec2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ec6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006eca:	ee15 4a90 	vmov	r4, s11
 8006ece:	ec52 1b15 	vmov	r1, r2, d5
 8006ed2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d177      	bne.n	8006fca <_dtoa_r+0x4a2>
 8006eda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006ede:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ee2:	ec42 1b17 	vmov	d7, r1, r2
 8006ee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eee:	f300 8263 	bgt.w	80073b8 <_dtoa_r+0x890>
 8006ef2:	eeb1 7b47 	vneg.f64	d7, d7
 8006ef6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efe:	f100 8258 	bmi.w	80073b2 <_dtoa_r+0x88a>
 8006f02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006f06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	f2c0 811d 	blt.w	8007148 <_dtoa_r+0x620>
 8006f0e:	f1bb 0f0e 	cmp.w	fp, #14
 8006f12:	f300 8119 	bgt.w	8007148 <_dtoa_r+0x620>
 8006f16:	4b8a      	ldr	r3, [pc, #552]	; (8007140 <_dtoa_r+0x618>)
 8006f18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f1c:	ed93 6b00 	vldr	d6, [r3]
 8006f20:	9b08      	ldr	r3, [sp, #32]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f280 80b7 	bge.w	8007096 <_dtoa_r+0x56e>
 8006f28:	f1b9 0f00 	cmp.w	r9, #0
 8006f2c:	f300 80b3 	bgt.w	8007096 <_dtoa_r+0x56e>
 8006f30:	f040 823f 	bne.w	80073b2 <_dtoa_r+0x88a>
 8006f34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006f38:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006f3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f48:	464c      	mov	r4, r9
 8006f4a:	464f      	mov	r7, r9
 8006f4c:	f280 8215 	bge.w	800737a <_dtoa_r+0x852>
 8006f50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f54:	2331      	movs	r3, #49	; 0x31
 8006f56:	f808 3b01 	strb.w	r3, [r8], #1
 8006f5a:	f10b 0b01 	add.w	fp, fp, #1
 8006f5e:	e211      	b.n	8007384 <_dtoa_r+0x85c>
 8006f60:	2202      	movs	r2, #2
 8006f62:	e780      	b.n	8006e66 <_dtoa_r+0x33e>
 8006f64:	07cc      	lsls	r4, r1, #31
 8006f66:	d504      	bpl.n	8006f72 <_dtoa_r+0x44a>
 8006f68:	ed90 6b00 	vldr	d6, [r0]
 8006f6c:	3201      	adds	r2, #1
 8006f6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f72:	1049      	asrs	r1, r1, #1
 8006f74:	3008      	adds	r0, #8
 8006f76:	e777      	b.n	8006e68 <_dtoa_r+0x340>
 8006f78:	d022      	beq.n	8006fc0 <_dtoa_r+0x498>
 8006f7a:	f1cb 0100 	rsb	r1, fp, #0
 8006f7e:	4a70      	ldr	r2, [pc, #448]	; (8007140 <_dtoa_r+0x618>)
 8006f80:	f001 000f 	and.w	r0, r1, #15
 8006f84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006f88:	ed92 7b00 	vldr	d7, [r2]
 8006f8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f94:	486b      	ldr	r0, [pc, #428]	; (8007144 <_dtoa_r+0x61c>)
 8006f96:	1109      	asrs	r1, r1, #4
 8006f98:	2400      	movs	r4, #0
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	b929      	cbnz	r1, 8006faa <_dtoa_r+0x482>
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	f43f af6a 	beq.w	8006e78 <_dtoa_r+0x350>
 8006fa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fa8:	e766      	b.n	8006e78 <_dtoa_r+0x350>
 8006faa:	07cf      	lsls	r7, r1, #31
 8006fac:	d505      	bpl.n	8006fba <_dtoa_r+0x492>
 8006fae:	ed90 6b00 	vldr	d6, [r0]
 8006fb2:	3201      	adds	r2, #1
 8006fb4:	2401      	movs	r4, #1
 8006fb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fba:	1049      	asrs	r1, r1, #1
 8006fbc:	3008      	adds	r0, #8
 8006fbe:	e7ed      	b.n	8006f9c <_dtoa_r+0x474>
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	e759      	b.n	8006e78 <_dtoa_r+0x350>
 8006fc4:	465f      	mov	r7, fp
 8006fc6:	4648      	mov	r0, r9
 8006fc8:	e775      	b.n	8006eb6 <_dtoa_r+0x38e>
 8006fca:	ec42 1b17 	vmov	d7, r1, r2
 8006fce:	4a5c      	ldr	r2, [pc, #368]	; (8007140 <_dtoa_r+0x618>)
 8006fd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006fd4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006fd8:	9a01      	ldr	r2, [sp, #4]
 8006fda:	1814      	adds	r4, r2, r0
 8006fdc:	9a07      	ldr	r2, [sp, #28]
 8006fde:	b352      	cbz	r2, 8007036 <_dtoa_r+0x50e>
 8006fe0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006fe4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006fe8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006fec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006ff0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006ff4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ff8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006ffc:	ee14 2a90 	vmov	r2, s9
 8007000:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007004:	3230      	adds	r2, #48	; 0x30
 8007006:	ee36 6b45 	vsub.f64	d6, d6, d5
 800700a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007012:	f808 2b01 	strb.w	r2, [r8], #1
 8007016:	d439      	bmi.n	800708c <_dtoa_r+0x564>
 8007018:	ee32 5b46 	vsub.f64	d5, d2, d6
 800701c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007024:	d472      	bmi.n	800710c <_dtoa_r+0x5e4>
 8007026:	45a0      	cmp	r8, r4
 8007028:	f43f af6b 	beq.w	8006f02 <_dtoa_r+0x3da>
 800702c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007030:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007034:	e7e0      	b.n	8006ff8 <_dtoa_r+0x4d0>
 8007036:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800703a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800703e:	4621      	mov	r1, r4
 8007040:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007044:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007048:	ee14 2a90 	vmov	r2, s9
 800704c:	3230      	adds	r2, #48	; 0x30
 800704e:	f808 2b01 	strb.w	r2, [r8], #1
 8007052:	45a0      	cmp	r8, r4
 8007054:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007058:	ee36 6b45 	vsub.f64	d6, d6, d5
 800705c:	d118      	bne.n	8007090 <_dtoa_r+0x568>
 800705e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007062:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007066:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706e:	dc4d      	bgt.n	800710c <_dtoa_r+0x5e4>
 8007070:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007074:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707c:	f57f af41 	bpl.w	8006f02 <_dtoa_r+0x3da>
 8007080:	4688      	mov	r8, r1
 8007082:	3901      	subs	r1, #1
 8007084:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007088:	2b30      	cmp	r3, #48	; 0x30
 800708a:	d0f9      	beq.n	8007080 <_dtoa_r+0x558>
 800708c:	46bb      	mov	fp, r7
 800708e:	e02a      	b.n	80070e6 <_dtoa_r+0x5be>
 8007090:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007094:	e7d6      	b.n	8007044 <_dtoa_r+0x51c>
 8007096:	ed9d 7b02 	vldr	d7, [sp, #8]
 800709a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800709e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80070a2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80070a6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80070aa:	ee15 3a10 	vmov	r3, s10
 80070ae:	3330      	adds	r3, #48	; 0x30
 80070b0:	f808 3b01 	strb.w	r3, [r8], #1
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	eba8 0303 	sub.w	r3, r8, r3
 80070ba:	4599      	cmp	r9, r3
 80070bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80070c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80070c4:	d133      	bne.n	800712e <_dtoa_r+0x606>
 80070c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80070ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d2:	dc1a      	bgt.n	800710a <_dtoa_r+0x5e2>
 80070d4:	eeb4 7b46 	vcmp.f64	d7, d6
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	d103      	bne.n	80070e6 <_dtoa_r+0x5be>
 80070de:	ee15 3a10 	vmov	r3, s10
 80070e2:	07d9      	lsls	r1, r3, #31
 80070e4:	d411      	bmi.n	800710a <_dtoa_r+0x5e2>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	f000 fe67 	bl	8007dbc <_Bfree>
 80070ee:	2300      	movs	r3, #0
 80070f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f2:	f888 3000 	strb.w	r3, [r8]
 80070f6:	f10b 0301 	add.w	r3, fp, #1
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f43f ad61 	beq.w	8006bc6 <_dtoa_r+0x9e>
 8007104:	f8c3 8000 	str.w	r8, [r3]
 8007108:	e55d      	b.n	8006bc6 <_dtoa_r+0x9e>
 800710a:	465f      	mov	r7, fp
 800710c:	4643      	mov	r3, r8
 800710e:	4698      	mov	r8, r3
 8007110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007114:	2a39      	cmp	r2, #57	; 0x39
 8007116:	d106      	bne.n	8007126 <_dtoa_r+0x5fe>
 8007118:	9a01      	ldr	r2, [sp, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d1f7      	bne.n	800710e <_dtoa_r+0x5e6>
 800711e:	9901      	ldr	r1, [sp, #4]
 8007120:	2230      	movs	r2, #48	; 0x30
 8007122:	3701      	adds	r7, #1
 8007124:	700a      	strb	r2, [r1, #0]
 8007126:	781a      	ldrb	r2, [r3, #0]
 8007128:	3201      	adds	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e7ae      	b.n	800708c <_dtoa_r+0x564>
 800712e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007132:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713a:	d1b2      	bne.n	80070a2 <_dtoa_r+0x57a>
 800713c:	e7d3      	b.n	80070e6 <_dtoa_r+0x5be>
 800713e:	bf00      	nop
 8007140:	08009ae8 	.word	0x08009ae8
 8007144:	08009ac0 	.word	0x08009ac0
 8007148:	9907      	ldr	r1, [sp, #28]
 800714a:	2900      	cmp	r1, #0
 800714c:	f000 80d0 	beq.w	80072f0 <_dtoa_r+0x7c8>
 8007150:	9906      	ldr	r1, [sp, #24]
 8007152:	2901      	cmp	r1, #1
 8007154:	f300 80b4 	bgt.w	80072c0 <_dtoa_r+0x798>
 8007158:	990a      	ldr	r1, [sp, #40]	; 0x28
 800715a:	2900      	cmp	r1, #0
 800715c:	f000 80ac 	beq.w	80072b8 <_dtoa_r+0x790>
 8007160:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007164:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007168:	461c      	mov	r4, r3
 800716a:	930a      	str	r3, [sp, #40]	; 0x28
 800716c:	9b04      	ldr	r3, [sp, #16]
 800716e:	4413      	add	r3, r2
 8007170:	9304      	str	r3, [sp, #16]
 8007172:	9b05      	ldr	r3, [sp, #20]
 8007174:	2101      	movs	r1, #1
 8007176:	4413      	add	r3, r2
 8007178:	4630      	mov	r0, r6
 800717a:	9305      	str	r3, [sp, #20]
 800717c:	f000 ff20 	bl	8007fc0 <__i2b>
 8007180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007182:	4607      	mov	r7, r0
 8007184:	f1b8 0f00 	cmp.w	r8, #0
 8007188:	dd0d      	ble.n	80071a6 <_dtoa_r+0x67e>
 800718a:	9a05      	ldr	r2, [sp, #20]
 800718c:	2a00      	cmp	r2, #0
 800718e:	dd0a      	ble.n	80071a6 <_dtoa_r+0x67e>
 8007190:	4542      	cmp	r2, r8
 8007192:	9904      	ldr	r1, [sp, #16]
 8007194:	bfa8      	it	ge
 8007196:	4642      	movge	r2, r8
 8007198:	1a89      	subs	r1, r1, r2
 800719a:	9104      	str	r1, [sp, #16]
 800719c:	9905      	ldr	r1, [sp, #20]
 800719e:	eba8 0802 	sub.w	r8, r8, r2
 80071a2:	1a8a      	subs	r2, r1, r2
 80071a4:	9205      	str	r2, [sp, #20]
 80071a6:	b303      	cbz	r3, 80071ea <_dtoa_r+0x6c2>
 80071a8:	9a07      	ldr	r2, [sp, #28]
 80071aa:	2a00      	cmp	r2, #0
 80071ac:	f000 80a5 	beq.w	80072fa <_dtoa_r+0x7d2>
 80071b0:	2c00      	cmp	r4, #0
 80071b2:	dd13      	ble.n	80071dc <_dtoa_r+0x6b4>
 80071b4:	4639      	mov	r1, r7
 80071b6:	4622      	mov	r2, r4
 80071b8:	4630      	mov	r0, r6
 80071ba:	930d      	str	r3, [sp, #52]	; 0x34
 80071bc:	f000 ffc0 	bl	8008140 <__pow5mult>
 80071c0:	462a      	mov	r2, r5
 80071c2:	4601      	mov	r1, r0
 80071c4:	4607      	mov	r7, r0
 80071c6:	4630      	mov	r0, r6
 80071c8:	f000 ff10 	bl	8007fec <__multiply>
 80071cc:	4629      	mov	r1, r5
 80071ce:	900a      	str	r0, [sp, #40]	; 0x28
 80071d0:	4630      	mov	r0, r6
 80071d2:	f000 fdf3 	bl	8007dbc <_Bfree>
 80071d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071da:	4615      	mov	r5, r2
 80071dc:	1b1a      	subs	r2, r3, r4
 80071de:	d004      	beq.n	80071ea <_dtoa_r+0x6c2>
 80071e0:	4629      	mov	r1, r5
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 ffac 	bl	8008140 <__pow5mult>
 80071e8:	4605      	mov	r5, r0
 80071ea:	2101      	movs	r1, #1
 80071ec:	4630      	mov	r0, r6
 80071ee:	f000 fee7 	bl	8007fc0 <__i2b>
 80071f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	f340 8081 	ble.w	80072fe <_dtoa_r+0x7d6>
 80071fc:	461a      	mov	r2, r3
 80071fe:	4601      	mov	r1, r0
 8007200:	4630      	mov	r0, r6
 8007202:	f000 ff9d 	bl	8008140 <__pow5mult>
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	2b01      	cmp	r3, #1
 800720a:	4604      	mov	r4, r0
 800720c:	dd7a      	ble.n	8007304 <_dtoa_r+0x7dc>
 800720e:	2300      	movs	r3, #0
 8007210:	930a      	str	r3, [sp, #40]	; 0x28
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007218:	6910      	ldr	r0, [r2, #16]
 800721a:	f000 fe81 	bl	8007f20 <__hi0bits>
 800721e:	f1c0 0020 	rsb	r0, r0, #32
 8007222:	9b05      	ldr	r3, [sp, #20]
 8007224:	4418      	add	r0, r3
 8007226:	f010 001f 	ands.w	r0, r0, #31
 800722a:	f000 808c 	beq.w	8007346 <_dtoa_r+0x81e>
 800722e:	f1c0 0220 	rsb	r2, r0, #32
 8007232:	2a04      	cmp	r2, #4
 8007234:	f340 8085 	ble.w	8007342 <_dtoa_r+0x81a>
 8007238:	f1c0 001c 	rsb	r0, r0, #28
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	4403      	add	r3, r0
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	9b05      	ldr	r3, [sp, #20]
 8007244:	4403      	add	r3, r0
 8007246:	4480      	add	r8, r0
 8007248:	9305      	str	r3, [sp, #20]
 800724a:	9b04      	ldr	r3, [sp, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	dd05      	ble.n	800725c <_dtoa_r+0x734>
 8007250:	4629      	mov	r1, r5
 8007252:	461a      	mov	r2, r3
 8007254:	4630      	mov	r0, r6
 8007256:	f000 ffcd 	bl	80081f4 <__lshift>
 800725a:	4605      	mov	r5, r0
 800725c:	9b05      	ldr	r3, [sp, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	dd05      	ble.n	800726e <_dtoa_r+0x746>
 8007262:	4621      	mov	r1, r4
 8007264:	461a      	mov	r2, r3
 8007266:	4630      	mov	r0, r6
 8007268:	f000 ffc4 	bl	80081f4 <__lshift>
 800726c:	4604      	mov	r4, r0
 800726e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d06a      	beq.n	800734a <_dtoa_r+0x822>
 8007274:	4621      	mov	r1, r4
 8007276:	4628      	mov	r0, r5
 8007278:	f001 f82c 	bl	80082d4 <__mcmp>
 800727c:	2800      	cmp	r0, #0
 800727e:	da64      	bge.n	800734a <_dtoa_r+0x822>
 8007280:	2300      	movs	r3, #0
 8007282:	4629      	mov	r1, r5
 8007284:	220a      	movs	r2, #10
 8007286:	4630      	mov	r0, r6
 8007288:	f000 fdba 	bl	8007e00 <__multadd>
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007292:	4605      	mov	r5, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8191 	beq.w	80075bc <_dtoa_r+0xa94>
 800729a:	4639      	mov	r1, r7
 800729c:	2300      	movs	r3, #0
 800729e:	220a      	movs	r2, #10
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 fdad 	bl	8007e00 <__multadd>
 80072a6:	f1ba 0f00 	cmp.w	sl, #0
 80072aa:	4607      	mov	r7, r0
 80072ac:	f300 808d 	bgt.w	80073ca <_dtoa_r+0x8a2>
 80072b0:	9b06      	ldr	r3, [sp, #24]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	dc50      	bgt.n	8007358 <_dtoa_r+0x830>
 80072b6:	e088      	b.n	80073ca <_dtoa_r+0x8a2>
 80072b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80072be:	e751      	b.n	8007164 <_dtoa_r+0x63c>
 80072c0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	bfbf      	itttt	lt
 80072c8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80072ca:	1ae3      	sublt	r3, r4, r3
 80072cc:	18d2      	addlt	r2, r2, r3
 80072ce:	9209      	strlt	r2, [sp, #36]	; 0x24
 80072d0:	bfb6      	itet	lt
 80072d2:	4623      	movlt	r3, r4
 80072d4:	1b1c      	subge	r4, r3, r4
 80072d6:	2400      	movlt	r4, #0
 80072d8:	f1b9 0f00 	cmp.w	r9, #0
 80072dc:	bfb5      	itete	lt
 80072de:	9a04      	ldrlt	r2, [sp, #16]
 80072e0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80072e4:	eba2 0809 	sublt.w	r8, r2, r9
 80072e8:	464a      	movge	r2, r9
 80072ea:	bfb8      	it	lt
 80072ec:	2200      	movlt	r2, #0
 80072ee:	e73c      	b.n	800716a <_dtoa_r+0x642>
 80072f0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80072f4:	9f07      	ldr	r7, [sp, #28]
 80072f6:	461c      	mov	r4, r3
 80072f8:	e744      	b.n	8007184 <_dtoa_r+0x65c>
 80072fa:	461a      	mov	r2, r3
 80072fc:	e770      	b.n	80071e0 <_dtoa_r+0x6b8>
 80072fe:	9b06      	ldr	r3, [sp, #24]
 8007300:	2b01      	cmp	r3, #1
 8007302:	dc18      	bgt.n	8007336 <_dtoa_r+0x80e>
 8007304:	9b02      	ldr	r3, [sp, #8]
 8007306:	b9b3      	cbnz	r3, 8007336 <_dtoa_r+0x80e>
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800730e:	b9a2      	cbnz	r2, 800733a <_dtoa_r+0x812>
 8007310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007314:	0d12      	lsrs	r2, r2, #20
 8007316:	0512      	lsls	r2, r2, #20
 8007318:	b18a      	cbz	r2, 800733e <_dtoa_r+0x816>
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	3301      	adds	r3, #1
 800731e:	9304      	str	r3, [sp, #16]
 8007320:	9b05      	ldr	r3, [sp, #20]
 8007322:	3301      	adds	r3, #1
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	2301      	movs	r3, #1
 8007328:	930a      	str	r3, [sp, #40]	; 0x28
 800732a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	f47f af70 	bne.w	8007212 <_dtoa_r+0x6ea>
 8007332:	2001      	movs	r0, #1
 8007334:	e775      	b.n	8007222 <_dtoa_r+0x6fa>
 8007336:	2300      	movs	r3, #0
 8007338:	e7f6      	b.n	8007328 <_dtoa_r+0x800>
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	e7f4      	b.n	8007328 <_dtoa_r+0x800>
 800733e:	920a      	str	r2, [sp, #40]	; 0x28
 8007340:	e7f3      	b.n	800732a <_dtoa_r+0x802>
 8007342:	d082      	beq.n	800724a <_dtoa_r+0x722>
 8007344:	4610      	mov	r0, r2
 8007346:	301c      	adds	r0, #28
 8007348:	e778      	b.n	800723c <_dtoa_r+0x714>
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	dc37      	bgt.n	80073c0 <_dtoa_r+0x898>
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	2b02      	cmp	r3, #2
 8007354:	dd34      	ble.n	80073c0 <_dtoa_r+0x898>
 8007356:	46ca      	mov	sl, r9
 8007358:	f1ba 0f00 	cmp.w	sl, #0
 800735c:	d10d      	bne.n	800737a <_dtoa_r+0x852>
 800735e:	4621      	mov	r1, r4
 8007360:	4653      	mov	r3, sl
 8007362:	2205      	movs	r2, #5
 8007364:	4630      	mov	r0, r6
 8007366:	f000 fd4b 	bl	8007e00 <__multadd>
 800736a:	4601      	mov	r1, r0
 800736c:	4604      	mov	r4, r0
 800736e:	4628      	mov	r0, r5
 8007370:	f000 ffb0 	bl	80082d4 <__mcmp>
 8007374:	2800      	cmp	r0, #0
 8007376:	f73f adeb 	bgt.w	8006f50 <_dtoa_r+0x428>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007380:	ea6f 0b03 	mvn.w	fp, r3
 8007384:	f04f 0900 	mov.w	r9, #0
 8007388:	4621      	mov	r1, r4
 800738a:	4630      	mov	r0, r6
 800738c:	f000 fd16 	bl	8007dbc <_Bfree>
 8007390:	2f00      	cmp	r7, #0
 8007392:	f43f aea8 	beq.w	80070e6 <_dtoa_r+0x5be>
 8007396:	f1b9 0f00 	cmp.w	r9, #0
 800739a:	d005      	beq.n	80073a8 <_dtoa_r+0x880>
 800739c:	45b9      	cmp	r9, r7
 800739e:	d003      	beq.n	80073a8 <_dtoa_r+0x880>
 80073a0:	4649      	mov	r1, r9
 80073a2:	4630      	mov	r0, r6
 80073a4:	f000 fd0a 	bl	8007dbc <_Bfree>
 80073a8:	4639      	mov	r1, r7
 80073aa:	4630      	mov	r0, r6
 80073ac:	f000 fd06 	bl	8007dbc <_Bfree>
 80073b0:	e699      	b.n	80070e6 <_dtoa_r+0x5be>
 80073b2:	2400      	movs	r4, #0
 80073b4:	4627      	mov	r7, r4
 80073b6:	e7e0      	b.n	800737a <_dtoa_r+0x852>
 80073b8:	46bb      	mov	fp, r7
 80073ba:	4604      	mov	r4, r0
 80073bc:	4607      	mov	r7, r0
 80073be:	e5c7      	b.n	8006f50 <_dtoa_r+0x428>
 80073c0:	9b07      	ldr	r3, [sp, #28]
 80073c2:	46ca      	mov	sl, r9
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8100 	beq.w	80075ca <_dtoa_r+0xaa2>
 80073ca:	f1b8 0f00 	cmp.w	r8, #0
 80073ce:	dd05      	ble.n	80073dc <_dtoa_r+0x8b4>
 80073d0:	4639      	mov	r1, r7
 80073d2:	4642      	mov	r2, r8
 80073d4:	4630      	mov	r0, r6
 80073d6:	f000 ff0d 	bl	80081f4 <__lshift>
 80073da:	4607      	mov	r7, r0
 80073dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d05d      	beq.n	800749e <_dtoa_r+0x976>
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4630      	mov	r0, r6
 80073e6:	f000 fca9 	bl	8007d3c <_Balloc>
 80073ea:	4680      	mov	r8, r0
 80073ec:	b928      	cbnz	r0, 80073fa <_dtoa_r+0x8d2>
 80073ee:	4b82      	ldr	r3, [pc, #520]	; (80075f8 <_dtoa_r+0xad0>)
 80073f0:	4602      	mov	r2, r0
 80073f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073f6:	f7ff bbaf 	b.w	8006b58 <_dtoa_r+0x30>
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	3202      	adds	r2, #2
 80073fe:	0092      	lsls	r2, r2, #2
 8007400:	f107 010c 	add.w	r1, r7, #12
 8007404:	300c      	adds	r0, #12
 8007406:	f000 fc8b 	bl	8007d20 <memcpy>
 800740a:	2201      	movs	r2, #1
 800740c:	4641      	mov	r1, r8
 800740e:	4630      	mov	r0, r6
 8007410:	f000 fef0 	bl	80081f4 <__lshift>
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	3301      	adds	r3, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	9b01      	ldr	r3, [sp, #4]
 800741c:	4453      	add	r3, sl
 800741e:	9308      	str	r3, [sp, #32]
 8007420:	9b02      	ldr	r3, [sp, #8]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	46b9      	mov	r9, r7
 8007428:	9307      	str	r3, [sp, #28]
 800742a:	4607      	mov	r7, r0
 800742c:	9b04      	ldr	r3, [sp, #16]
 800742e:	4621      	mov	r1, r4
 8007430:	3b01      	subs	r3, #1
 8007432:	4628      	mov	r0, r5
 8007434:	9302      	str	r3, [sp, #8]
 8007436:	f7ff faeb 	bl	8006a10 <quorem>
 800743a:	4603      	mov	r3, r0
 800743c:	3330      	adds	r3, #48	; 0x30
 800743e:	9005      	str	r0, [sp, #20]
 8007440:	4649      	mov	r1, r9
 8007442:	4628      	mov	r0, r5
 8007444:	9309      	str	r3, [sp, #36]	; 0x24
 8007446:	f000 ff45 	bl	80082d4 <__mcmp>
 800744a:	463a      	mov	r2, r7
 800744c:	4682      	mov	sl, r0
 800744e:	4621      	mov	r1, r4
 8007450:	4630      	mov	r0, r6
 8007452:	f000 ff5b 	bl	800830c <__mdiff>
 8007456:	68c2      	ldr	r2, [r0, #12]
 8007458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745a:	4680      	mov	r8, r0
 800745c:	bb0a      	cbnz	r2, 80074a2 <_dtoa_r+0x97a>
 800745e:	4601      	mov	r1, r0
 8007460:	4628      	mov	r0, r5
 8007462:	f000 ff37 	bl	80082d4 <__mcmp>
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	4602      	mov	r2, r0
 800746a:	4641      	mov	r1, r8
 800746c:	4630      	mov	r0, r6
 800746e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007472:	f000 fca3 	bl	8007dbc <_Bfree>
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800747a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800747e:	ea43 0102 	orr.w	r1, r3, r2
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	430b      	orrs	r3, r1
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	d10d      	bne.n	80074a6 <_dtoa_r+0x97e>
 800748a:	2b39      	cmp	r3, #57	; 0x39
 800748c:	d029      	beq.n	80074e2 <_dtoa_r+0x9ba>
 800748e:	f1ba 0f00 	cmp.w	sl, #0
 8007492:	dd01      	ble.n	8007498 <_dtoa_r+0x970>
 8007494:	9b05      	ldr	r3, [sp, #20]
 8007496:	3331      	adds	r3, #49	; 0x31
 8007498:	9a02      	ldr	r2, [sp, #8]
 800749a:	7013      	strb	r3, [r2, #0]
 800749c:	e774      	b.n	8007388 <_dtoa_r+0x860>
 800749e:	4638      	mov	r0, r7
 80074a0:	e7b8      	b.n	8007414 <_dtoa_r+0x8ec>
 80074a2:	2201      	movs	r2, #1
 80074a4:	e7e1      	b.n	800746a <_dtoa_r+0x942>
 80074a6:	f1ba 0f00 	cmp.w	sl, #0
 80074aa:	db06      	blt.n	80074ba <_dtoa_r+0x992>
 80074ac:	9906      	ldr	r1, [sp, #24]
 80074ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80074b2:	9907      	ldr	r1, [sp, #28]
 80074b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80074b8:	d120      	bne.n	80074fc <_dtoa_r+0x9d4>
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	ddec      	ble.n	8007498 <_dtoa_r+0x970>
 80074be:	4629      	mov	r1, r5
 80074c0:	2201      	movs	r2, #1
 80074c2:	4630      	mov	r0, r6
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	f000 fe95 	bl	80081f4 <__lshift>
 80074ca:	4621      	mov	r1, r4
 80074cc:	4605      	mov	r5, r0
 80074ce:	f000 ff01 	bl	80082d4 <__mcmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	dc02      	bgt.n	80074de <_dtoa_r+0x9b6>
 80074d8:	d1de      	bne.n	8007498 <_dtoa_r+0x970>
 80074da:	07da      	lsls	r2, r3, #31
 80074dc:	d5dc      	bpl.n	8007498 <_dtoa_r+0x970>
 80074de:	2b39      	cmp	r3, #57	; 0x39
 80074e0:	d1d8      	bne.n	8007494 <_dtoa_r+0x96c>
 80074e2:	9a02      	ldr	r2, [sp, #8]
 80074e4:	2339      	movs	r3, #57	; 0x39
 80074e6:	7013      	strb	r3, [r2, #0]
 80074e8:	4643      	mov	r3, r8
 80074ea:	4698      	mov	r8, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80074f2:	2a39      	cmp	r2, #57	; 0x39
 80074f4:	d051      	beq.n	800759a <_dtoa_r+0xa72>
 80074f6:	3201      	adds	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	e745      	b.n	8007388 <_dtoa_r+0x860>
 80074fc:	2a00      	cmp	r2, #0
 80074fe:	dd03      	ble.n	8007508 <_dtoa_r+0x9e0>
 8007500:	2b39      	cmp	r3, #57	; 0x39
 8007502:	d0ee      	beq.n	80074e2 <_dtoa_r+0x9ba>
 8007504:	3301      	adds	r3, #1
 8007506:	e7c7      	b.n	8007498 <_dtoa_r+0x970>
 8007508:	9a04      	ldr	r2, [sp, #16]
 800750a:	9908      	ldr	r1, [sp, #32]
 800750c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007510:	428a      	cmp	r2, r1
 8007512:	d02b      	beq.n	800756c <_dtoa_r+0xa44>
 8007514:	4629      	mov	r1, r5
 8007516:	2300      	movs	r3, #0
 8007518:	220a      	movs	r2, #10
 800751a:	4630      	mov	r0, r6
 800751c:	f000 fc70 	bl	8007e00 <__multadd>
 8007520:	45b9      	cmp	r9, r7
 8007522:	4605      	mov	r5, r0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	f04f 020a 	mov.w	r2, #10
 800752c:	4649      	mov	r1, r9
 800752e:	4630      	mov	r0, r6
 8007530:	d107      	bne.n	8007542 <_dtoa_r+0xa1a>
 8007532:	f000 fc65 	bl	8007e00 <__multadd>
 8007536:	4681      	mov	r9, r0
 8007538:	4607      	mov	r7, r0
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	3301      	adds	r3, #1
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	e774      	b.n	800742c <_dtoa_r+0x904>
 8007542:	f000 fc5d 	bl	8007e00 <__multadd>
 8007546:	4639      	mov	r1, r7
 8007548:	4681      	mov	r9, r0
 800754a:	2300      	movs	r3, #0
 800754c:	220a      	movs	r2, #10
 800754e:	4630      	mov	r0, r6
 8007550:	f000 fc56 	bl	8007e00 <__multadd>
 8007554:	4607      	mov	r7, r0
 8007556:	e7f0      	b.n	800753a <_dtoa_r+0xa12>
 8007558:	f1ba 0f00 	cmp.w	sl, #0
 800755c:	9a01      	ldr	r2, [sp, #4]
 800755e:	bfcc      	ite	gt
 8007560:	46d0      	movgt	r8, sl
 8007562:	f04f 0801 	movle.w	r8, #1
 8007566:	4490      	add	r8, r2
 8007568:	f04f 0900 	mov.w	r9, #0
 800756c:	4629      	mov	r1, r5
 800756e:	2201      	movs	r2, #1
 8007570:	4630      	mov	r0, r6
 8007572:	9302      	str	r3, [sp, #8]
 8007574:	f000 fe3e 	bl	80081f4 <__lshift>
 8007578:	4621      	mov	r1, r4
 800757a:	4605      	mov	r5, r0
 800757c:	f000 feaa 	bl	80082d4 <__mcmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	dcb1      	bgt.n	80074e8 <_dtoa_r+0x9c0>
 8007584:	d102      	bne.n	800758c <_dtoa_r+0xa64>
 8007586:	9b02      	ldr	r3, [sp, #8]
 8007588:	07db      	lsls	r3, r3, #31
 800758a:	d4ad      	bmi.n	80074e8 <_dtoa_r+0x9c0>
 800758c:	4643      	mov	r3, r8
 800758e:	4698      	mov	r8, r3
 8007590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007594:	2a30      	cmp	r2, #48	; 0x30
 8007596:	d0fa      	beq.n	800758e <_dtoa_r+0xa66>
 8007598:	e6f6      	b.n	8007388 <_dtoa_r+0x860>
 800759a:	9a01      	ldr	r2, [sp, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d1a4      	bne.n	80074ea <_dtoa_r+0x9c2>
 80075a0:	f10b 0b01 	add.w	fp, fp, #1
 80075a4:	2331      	movs	r3, #49	; 0x31
 80075a6:	e778      	b.n	800749a <_dtoa_r+0x972>
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <_dtoa_r+0xad4>)
 80075aa:	f7ff bb27 	b.w	8006bfc <_dtoa_r+0xd4>
 80075ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f47f ab03 	bne.w	8006bbc <_dtoa_r+0x94>
 80075b6:	4b12      	ldr	r3, [pc, #72]	; (8007600 <_dtoa_r+0xad8>)
 80075b8:	f7ff bb20 	b.w	8006bfc <_dtoa_r+0xd4>
 80075bc:	f1ba 0f00 	cmp.w	sl, #0
 80075c0:	dc03      	bgt.n	80075ca <_dtoa_r+0xaa2>
 80075c2:	9b06      	ldr	r3, [sp, #24]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	f73f aec7 	bgt.w	8007358 <_dtoa_r+0x830>
 80075ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075ce:	4621      	mov	r1, r4
 80075d0:	4628      	mov	r0, r5
 80075d2:	f7ff fa1d 	bl	8006a10 <quorem>
 80075d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80075da:	f808 3b01 	strb.w	r3, [r8], #1
 80075de:	9a01      	ldr	r2, [sp, #4]
 80075e0:	eba8 0202 	sub.w	r2, r8, r2
 80075e4:	4592      	cmp	sl, r2
 80075e6:	ddb7      	ble.n	8007558 <_dtoa_r+0xa30>
 80075e8:	4629      	mov	r1, r5
 80075ea:	2300      	movs	r3, #0
 80075ec:	220a      	movs	r2, #10
 80075ee:	4630      	mov	r0, r6
 80075f0:	f000 fc06 	bl	8007e00 <__multadd>
 80075f4:	4605      	mov	r5, r0
 80075f6:	e7ea      	b.n	80075ce <_dtoa_r+0xaa6>
 80075f8:	080099d8 	.word	0x080099d8
 80075fc:	080097dc 	.word	0x080097dc
 8007600:	08009959 	.word	0x08009959

08007604 <rshift>:
 8007604:	6903      	ldr	r3, [r0, #16]
 8007606:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800760a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800760e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007612:	f100 0414 	add.w	r4, r0, #20
 8007616:	dd45      	ble.n	80076a4 <rshift+0xa0>
 8007618:	f011 011f 	ands.w	r1, r1, #31
 800761c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007620:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007624:	d10c      	bne.n	8007640 <rshift+0x3c>
 8007626:	f100 0710 	add.w	r7, r0, #16
 800762a:	4629      	mov	r1, r5
 800762c:	42b1      	cmp	r1, r6
 800762e:	d334      	bcc.n	800769a <rshift+0x96>
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	1eea      	subs	r2, r5, #3
 8007636:	4296      	cmp	r6, r2
 8007638:	bf38      	it	cc
 800763a:	2300      	movcc	r3, #0
 800763c:	4423      	add	r3, r4
 800763e:	e015      	b.n	800766c <rshift+0x68>
 8007640:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007644:	f1c1 0820 	rsb	r8, r1, #32
 8007648:	40cf      	lsrs	r7, r1
 800764a:	f105 0e04 	add.w	lr, r5, #4
 800764e:	46a1      	mov	r9, r4
 8007650:	4576      	cmp	r6, lr
 8007652:	46f4      	mov	ip, lr
 8007654:	d815      	bhi.n	8007682 <rshift+0x7e>
 8007656:	1a9a      	subs	r2, r3, r2
 8007658:	0092      	lsls	r2, r2, #2
 800765a:	3a04      	subs	r2, #4
 800765c:	3501      	adds	r5, #1
 800765e:	42ae      	cmp	r6, r5
 8007660:	bf38      	it	cc
 8007662:	2200      	movcc	r2, #0
 8007664:	18a3      	adds	r3, r4, r2
 8007666:	50a7      	str	r7, [r4, r2]
 8007668:	b107      	cbz	r7, 800766c <rshift+0x68>
 800766a:	3304      	adds	r3, #4
 800766c:	1b1a      	subs	r2, r3, r4
 800766e:	42a3      	cmp	r3, r4
 8007670:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007674:	bf08      	it	eq
 8007676:	2300      	moveq	r3, #0
 8007678:	6102      	str	r2, [r0, #16]
 800767a:	bf08      	it	eq
 800767c:	6143      	streq	r3, [r0, #20]
 800767e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007682:	f8dc c000 	ldr.w	ip, [ip]
 8007686:	fa0c fc08 	lsl.w	ip, ip, r8
 800768a:	ea4c 0707 	orr.w	r7, ip, r7
 800768e:	f849 7b04 	str.w	r7, [r9], #4
 8007692:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007696:	40cf      	lsrs	r7, r1
 8007698:	e7da      	b.n	8007650 <rshift+0x4c>
 800769a:	f851 cb04 	ldr.w	ip, [r1], #4
 800769e:	f847 cf04 	str.w	ip, [r7, #4]!
 80076a2:	e7c3      	b.n	800762c <rshift+0x28>
 80076a4:	4623      	mov	r3, r4
 80076a6:	e7e1      	b.n	800766c <rshift+0x68>

080076a8 <__hexdig_fun>:
 80076a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80076ac:	2b09      	cmp	r3, #9
 80076ae:	d802      	bhi.n	80076b6 <__hexdig_fun+0xe>
 80076b0:	3820      	subs	r0, #32
 80076b2:	b2c0      	uxtb	r0, r0
 80076b4:	4770      	bx	lr
 80076b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d801      	bhi.n	80076c2 <__hexdig_fun+0x1a>
 80076be:	3847      	subs	r0, #71	; 0x47
 80076c0:	e7f7      	b.n	80076b2 <__hexdig_fun+0xa>
 80076c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80076c6:	2b05      	cmp	r3, #5
 80076c8:	d801      	bhi.n	80076ce <__hexdig_fun+0x26>
 80076ca:	3827      	subs	r0, #39	; 0x27
 80076cc:	e7f1      	b.n	80076b2 <__hexdig_fun+0xa>
 80076ce:	2000      	movs	r0, #0
 80076d0:	4770      	bx	lr
	...

080076d4 <__gethex>:
 80076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	ed2d 8b02 	vpush	{d8}
 80076dc:	b089      	sub	sp, #36	; 0x24
 80076de:	ee08 0a10 	vmov	s16, r0
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	4bb4      	ldr	r3, [pc, #720]	; (80079b8 <__gethex+0x2e4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	4618      	mov	r0, r3
 80076ec:	468b      	mov	fp, r1
 80076ee:	4690      	mov	r8, r2
 80076f0:	f7f8 fda6 	bl	8000240 <strlen>
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	f8db 2000 	ldr.w	r2, [fp]
 80076fa:	4403      	add	r3, r0
 80076fc:	4682      	mov	sl, r0
 80076fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007702:	9305      	str	r3, [sp, #20]
 8007704:	1c93      	adds	r3, r2, #2
 8007706:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800770a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800770e:	32fe      	adds	r2, #254	; 0xfe
 8007710:	18d1      	adds	r1, r2, r3
 8007712:	461f      	mov	r7, r3
 8007714:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007718:	9100      	str	r1, [sp, #0]
 800771a:	2830      	cmp	r0, #48	; 0x30
 800771c:	d0f8      	beq.n	8007710 <__gethex+0x3c>
 800771e:	f7ff ffc3 	bl	80076a8 <__hexdig_fun>
 8007722:	4604      	mov	r4, r0
 8007724:	2800      	cmp	r0, #0
 8007726:	d13a      	bne.n	800779e <__gethex+0xca>
 8007728:	9901      	ldr	r1, [sp, #4]
 800772a:	4652      	mov	r2, sl
 800772c:	4638      	mov	r0, r7
 800772e:	f001 fa2f 	bl	8008b90 <strncmp>
 8007732:	4605      	mov	r5, r0
 8007734:	2800      	cmp	r0, #0
 8007736:	d168      	bne.n	800780a <__gethex+0x136>
 8007738:	f817 000a 	ldrb.w	r0, [r7, sl]
 800773c:	eb07 060a 	add.w	r6, r7, sl
 8007740:	f7ff ffb2 	bl	80076a8 <__hexdig_fun>
 8007744:	2800      	cmp	r0, #0
 8007746:	d062      	beq.n	800780e <__gethex+0x13a>
 8007748:	4633      	mov	r3, r6
 800774a:	7818      	ldrb	r0, [r3, #0]
 800774c:	2830      	cmp	r0, #48	; 0x30
 800774e:	461f      	mov	r7, r3
 8007750:	f103 0301 	add.w	r3, r3, #1
 8007754:	d0f9      	beq.n	800774a <__gethex+0x76>
 8007756:	f7ff ffa7 	bl	80076a8 <__hexdig_fun>
 800775a:	2301      	movs	r3, #1
 800775c:	fab0 f480 	clz	r4, r0
 8007760:	0964      	lsrs	r4, r4, #5
 8007762:	4635      	mov	r5, r6
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	463a      	mov	r2, r7
 8007768:	4616      	mov	r6, r2
 800776a:	3201      	adds	r2, #1
 800776c:	7830      	ldrb	r0, [r6, #0]
 800776e:	f7ff ff9b 	bl	80076a8 <__hexdig_fun>
 8007772:	2800      	cmp	r0, #0
 8007774:	d1f8      	bne.n	8007768 <__gethex+0x94>
 8007776:	9901      	ldr	r1, [sp, #4]
 8007778:	4652      	mov	r2, sl
 800777a:	4630      	mov	r0, r6
 800777c:	f001 fa08 	bl	8008b90 <strncmp>
 8007780:	b980      	cbnz	r0, 80077a4 <__gethex+0xd0>
 8007782:	b94d      	cbnz	r5, 8007798 <__gethex+0xc4>
 8007784:	eb06 050a 	add.w	r5, r6, sl
 8007788:	462a      	mov	r2, r5
 800778a:	4616      	mov	r6, r2
 800778c:	3201      	adds	r2, #1
 800778e:	7830      	ldrb	r0, [r6, #0]
 8007790:	f7ff ff8a 	bl	80076a8 <__hexdig_fun>
 8007794:	2800      	cmp	r0, #0
 8007796:	d1f8      	bne.n	800778a <__gethex+0xb6>
 8007798:	1bad      	subs	r5, r5, r6
 800779a:	00ad      	lsls	r5, r5, #2
 800779c:	e004      	b.n	80077a8 <__gethex+0xd4>
 800779e:	2400      	movs	r4, #0
 80077a0:	4625      	mov	r5, r4
 80077a2:	e7e0      	b.n	8007766 <__gethex+0x92>
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	d1f7      	bne.n	8007798 <__gethex+0xc4>
 80077a8:	7833      	ldrb	r3, [r6, #0]
 80077aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077ae:	2b50      	cmp	r3, #80	; 0x50
 80077b0:	d13b      	bne.n	800782a <__gethex+0x156>
 80077b2:	7873      	ldrb	r3, [r6, #1]
 80077b4:	2b2b      	cmp	r3, #43	; 0x2b
 80077b6:	d02c      	beq.n	8007812 <__gethex+0x13e>
 80077b8:	2b2d      	cmp	r3, #45	; 0x2d
 80077ba:	d02e      	beq.n	800781a <__gethex+0x146>
 80077bc:	1c71      	adds	r1, r6, #1
 80077be:	f04f 0900 	mov.w	r9, #0
 80077c2:	7808      	ldrb	r0, [r1, #0]
 80077c4:	f7ff ff70 	bl	80076a8 <__hexdig_fun>
 80077c8:	1e43      	subs	r3, r0, #1
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b18      	cmp	r3, #24
 80077ce:	d82c      	bhi.n	800782a <__gethex+0x156>
 80077d0:	f1a0 0210 	sub.w	r2, r0, #16
 80077d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80077d8:	f7ff ff66 	bl	80076a8 <__hexdig_fun>
 80077dc:	1e43      	subs	r3, r0, #1
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b18      	cmp	r3, #24
 80077e2:	d91d      	bls.n	8007820 <__gethex+0x14c>
 80077e4:	f1b9 0f00 	cmp.w	r9, #0
 80077e8:	d000      	beq.n	80077ec <__gethex+0x118>
 80077ea:	4252      	negs	r2, r2
 80077ec:	4415      	add	r5, r2
 80077ee:	f8cb 1000 	str.w	r1, [fp]
 80077f2:	b1e4      	cbz	r4, 800782e <__gethex+0x15a>
 80077f4:	9b00      	ldr	r3, [sp, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bf14      	ite	ne
 80077fa:	2700      	movne	r7, #0
 80077fc:	2706      	moveq	r7, #6
 80077fe:	4638      	mov	r0, r7
 8007800:	b009      	add	sp, #36	; 0x24
 8007802:	ecbd 8b02 	vpop	{d8}
 8007806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780a:	463e      	mov	r6, r7
 800780c:	4625      	mov	r5, r4
 800780e:	2401      	movs	r4, #1
 8007810:	e7ca      	b.n	80077a8 <__gethex+0xd4>
 8007812:	f04f 0900 	mov.w	r9, #0
 8007816:	1cb1      	adds	r1, r6, #2
 8007818:	e7d3      	b.n	80077c2 <__gethex+0xee>
 800781a:	f04f 0901 	mov.w	r9, #1
 800781e:	e7fa      	b.n	8007816 <__gethex+0x142>
 8007820:	230a      	movs	r3, #10
 8007822:	fb03 0202 	mla	r2, r3, r2, r0
 8007826:	3a10      	subs	r2, #16
 8007828:	e7d4      	b.n	80077d4 <__gethex+0x100>
 800782a:	4631      	mov	r1, r6
 800782c:	e7df      	b.n	80077ee <__gethex+0x11a>
 800782e:	1bf3      	subs	r3, r6, r7
 8007830:	3b01      	subs	r3, #1
 8007832:	4621      	mov	r1, r4
 8007834:	2b07      	cmp	r3, #7
 8007836:	dc0b      	bgt.n	8007850 <__gethex+0x17c>
 8007838:	ee18 0a10 	vmov	r0, s16
 800783c:	f000 fa7e 	bl	8007d3c <_Balloc>
 8007840:	4604      	mov	r4, r0
 8007842:	b940      	cbnz	r0, 8007856 <__gethex+0x182>
 8007844:	4b5d      	ldr	r3, [pc, #372]	; (80079bc <__gethex+0x2e8>)
 8007846:	4602      	mov	r2, r0
 8007848:	21de      	movs	r1, #222	; 0xde
 800784a:	485d      	ldr	r0, [pc, #372]	; (80079c0 <__gethex+0x2ec>)
 800784c:	f001 f9c2 	bl	8008bd4 <__assert_func>
 8007850:	3101      	adds	r1, #1
 8007852:	105b      	asrs	r3, r3, #1
 8007854:	e7ee      	b.n	8007834 <__gethex+0x160>
 8007856:	f100 0914 	add.w	r9, r0, #20
 800785a:	f04f 0b00 	mov.w	fp, #0
 800785e:	f1ca 0301 	rsb	r3, sl, #1
 8007862:	f8cd 9008 	str.w	r9, [sp, #8]
 8007866:	f8cd b000 	str.w	fp, [sp]
 800786a:	9306      	str	r3, [sp, #24]
 800786c:	42b7      	cmp	r7, r6
 800786e:	d340      	bcc.n	80078f2 <__gethex+0x21e>
 8007870:	9802      	ldr	r0, [sp, #8]
 8007872:	9b00      	ldr	r3, [sp, #0]
 8007874:	f840 3b04 	str.w	r3, [r0], #4
 8007878:	eba0 0009 	sub.w	r0, r0, r9
 800787c:	1080      	asrs	r0, r0, #2
 800787e:	0146      	lsls	r6, r0, #5
 8007880:	6120      	str	r0, [r4, #16]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fb4c 	bl	8007f20 <__hi0bits>
 8007888:	1a30      	subs	r0, r6, r0
 800788a:	f8d8 6000 	ldr.w	r6, [r8]
 800788e:	42b0      	cmp	r0, r6
 8007890:	dd63      	ble.n	800795a <__gethex+0x286>
 8007892:	1b87      	subs	r7, r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	4620      	mov	r0, r4
 8007898:	f000 feed 	bl	8008676 <__any_on>
 800789c:	4682      	mov	sl, r0
 800789e:	b1a8      	cbz	r0, 80078cc <__gethex+0x1f8>
 80078a0:	1e7b      	subs	r3, r7, #1
 80078a2:	1159      	asrs	r1, r3, #5
 80078a4:	f003 021f 	and.w	r2, r3, #31
 80078a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80078ac:	f04f 0a01 	mov.w	sl, #1
 80078b0:	fa0a f202 	lsl.w	r2, sl, r2
 80078b4:	420a      	tst	r2, r1
 80078b6:	d009      	beq.n	80078cc <__gethex+0x1f8>
 80078b8:	4553      	cmp	r3, sl
 80078ba:	dd05      	ble.n	80078c8 <__gethex+0x1f4>
 80078bc:	1eb9      	subs	r1, r7, #2
 80078be:	4620      	mov	r0, r4
 80078c0:	f000 fed9 	bl	8008676 <__any_on>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d145      	bne.n	8007954 <__gethex+0x280>
 80078c8:	f04f 0a02 	mov.w	sl, #2
 80078cc:	4639      	mov	r1, r7
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7ff fe98 	bl	8007604 <rshift>
 80078d4:	443d      	add	r5, r7
 80078d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078da:	42ab      	cmp	r3, r5
 80078dc:	da4c      	bge.n	8007978 <__gethex+0x2a4>
 80078de:	ee18 0a10 	vmov	r0, s16
 80078e2:	4621      	mov	r1, r4
 80078e4:	f000 fa6a 	bl	8007dbc <_Bfree>
 80078e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078ea:	2300      	movs	r3, #0
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	27a3      	movs	r7, #163	; 0xa3
 80078f0:	e785      	b.n	80077fe <__gethex+0x12a>
 80078f2:	1e73      	subs	r3, r6, #1
 80078f4:	9a05      	ldr	r2, [sp, #20]
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d019      	beq.n	8007934 <__gethex+0x260>
 8007900:	f1bb 0f20 	cmp.w	fp, #32
 8007904:	d107      	bne.n	8007916 <__gethex+0x242>
 8007906:	9b02      	ldr	r3, [sp, #8]
 8007908:	9a00      	ldr	r2, [sp, #0]
 800790a:	f843 2b04 	str.w	r2, [r3], #4
 800790e:	9302      	str	r3, [sp, #8]
 8007910:	2300      	movs	r3, #0
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	469b      	mov	fp, r3
 8007916:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800791a:	f7ff fec5 	bl	80076a8 <__hexdig_fun>
 800791e:	9b00      	ldr	r3, [sp, #0]
 8007920:	f000 000f 	and.w	r0, r0, #15
 8007924:	fa00 f00b 	lsl.w	r0, r0, fp
 8007928:	4303      	orrs	r3, r0
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	f10b 0b04 	add.w	fp, fp, #4
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	e00d      	b.n	8007950 <__gethex+0x27c>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	9a06      	ldr	r2, [sp, #24]
 8007938:	4413      	add	r3, r2
 800793a:	42bb      	cmp	r3, r7
 800793c:	d3e0      	bcc.n	8007900 <__gethex+0x22c>
 800793e:	4618      	mov	r0, r3
 8007940:	9901      	ldr	r1, [sp, #4]
 8007942:	9307      	str	r3, [sp, #28]
 8007944:	4652      	mov	r2, sl
 8007946:	f001 f923 	bl	8008b90 <strncmp>
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	2800      	cmp	r0, #0
 800794e:	d1d7      	bne.n	8007900 <__gethex+0x22c>
 8007950:	461e      	mov	r6, r3
 8007952:	e78b      	b.n	800786c <__gethex+0x198>
 8007954:	f04f 0a03 	mov.w	sl, #3
 8007958:	e7b8      	b.n	80078cc <__gethex+0x1f8>
 800795a:	da0a      	bge.n	8007972 <__gethex+0x29e>
 800795c:	1a37      	subs	r7, r6, r0
 800795e:	4621      	mov	r1, r4
 8007960:	ee18 0a10 	vmov	r0, s16
 8007964:	463a      	mov	r2, r7
 8007966:	f000 fc45 	bl	80081f4 <__lshift>
 800796a:	1bed      	subs	r5, r5, r7
 800796c:	4604      	mov	r4, r0
 800796e:	f100 0914 	add.w	r9, r0, #20
 8007972:	f04f 0a00 	mov.w	sl, #0
 8007976:	e7ae      	b.n	80078d6 <__gethex+0x202>
 8007978:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800797c:	42a8      	cmp	r0, r5
 800797e:	dd72      	ble.n	8007a66 <__gethex+0x392>
 8007980:	1b45      	subs	r5, r0, r5
 8007982:	42ae      	cmp	r6, r5
 8007984:	dc36      	bgt.n	80079f4 <__gethex+0x320>
 8007986:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d02a      	beq.n	80079e4 <__gethex+0x310>
 800798e:	2b03      	cmp	r3, #3
 8007990:	d02c      	beq.n	80079ec <__gethex+0x318>
 8007992:	2b01      	cmp	r3, #1
 8007994:	d11c      	bne.n	80079d0 <__gethex+0x2fc>
 8007996:	42ae      	cmp	r6, r5
 8007998:	d11a      	bne.n	80079d0 <__gethex+0x2fc>
 800799a:	2e01      	cmp	r6, #1
 800799c:	d112      	bne.n	80079c4 <__gethex+0x2f0>
 800799e:	9a04      	ldr	r2, [sp, #16]
 80079a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	2301      	movs	r3, #1
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	f8c9 3000 	str.w	r3, [r9]
 80079ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079b0:	2762      	movs	r7, #98	; 0x62
 80079b2:	601c      	str	r4, [r3, #0]
 80079b4:	e723      	b.n	80077fe <__gethex+0x12a>
 80079b6:	bf00      	nop
 80079b8:	08009a50 	.word	0x08009a50
 80079bc:	080099d8 	.word	0x080099d8
 80079c0:	080099e9 	.word	0x080099e9
 80079c4:	1e71      	subs	r1, r6, #1
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 fe55 	bl	8008676 <__any_on>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d1e6      	bne.n	800799e <__gethex+0x2ca>
 80079d0:	ee18 0a10 	vmov	r0, s16
 80079d4:	4621      	mov	r1, r4
 80079d6:	f000 f9f1 	bl	8007dbc <_Bfree>
 80079da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079dc:	2300      	movs	r3, #0
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	2750      	movs	r7, #80	; 0x50
 80079e2:	e70c      	b.n	80077fe <__gethex+0x12a>
 80079e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f2      	bne.n	80079d0 <__gethex+0x2fc>
 80079ea:	e7d8      	b.n	800799e <__gethex+0x2ca>
 80079ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1d5      	bne.n	800799e <__gethex+0x2ca>
 80079f2:	e7ed      	b.n	80079d0 <__gethex+0x2fc>
 80079f4:	1e6f      	subs	r7, r5, #1
 80079f6:	f1ba 0f00 	cmp.w	sl, #0
 80079fa:	d131      	bne.n	8007a60 <__gethex+0x38c>
 80079fc:	b127      	cbz	r7, 8007a08 <__gethex+0x334>
 80079fe:	4639      	mov	r1, r7
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fe38 	bl	8008676 <__any_on>
 8007a06:	4682      	mov	sl, r0
 8007a08:	117b      	asrs	r3, r7, #5
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007a10:	f007 071f 	and.w	r7, r7, #31
 8007a14:	fa01 f707 	lsl.w	r7, r1, r7
 8007a18:	421f      	tst	r7, r3
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	bf18      	it	ne
 8007a20:	f04a 0a02 	orrne.w	sl, sl, #2
 8007a24:	1b76      	subs	r6, r6, r5
 8007a26:	f7ff fded 	bl	8007604 <rshift>
 8007a2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a2e:	2702      	movs	r7, #2
 8007a30:	f1ba 0f00 	cmp.w	sl, #0
 8007a34:	d048      	beq.n	8007ac8 <__gethex+0x3f4>
 8007a36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d015      	beq.n	8007a6a <__gethex+0x396>
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d017      	beq.n	8007a72 <__gethex+0x39e>
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d109      	bne.n	8007a5a <__gethex+0x386>
 8007a46:	f01a 0f02 	tst.w	sl, #2
 8007a4a:	d006      	beq.n	8007a5a <__gethex+0x386>
 8007a4c:	f8d9 0000 	ldr.w	r0, [r9]
 8007a50:	ea4a 0a00 	orr.w	sl, sl, r0
 8007a54:	f01a 0f01 	tst.w	sl, #1
 8007a58:	d10e      	bne.n	8007a78 <__gethex+0x3a4>
 8007a5a:	f047 0710 	orr.w	r7, r7, #16
 8007a5e:	e033      	b.n	8007ac8 <__gethex+0x3f4>
 8007a60:	f04f 0a01 	mov.w	sl, #1
 8007a64:	e7d0      	b.n	8007a08 <__gethex+0x334>
 8007a66:	2701      	movs	r7, #1
 8007a68:	e7e2      	b.n	8007a30 <__gethex+0x35c>
 8007a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a6c:	f1c3 0301 	rsb	r3, r3, #1
 8007a70:	9315      	str	r3, [sp, #84]	; 0x54
 8007a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0f0      	beq.n	8007a5a <__gethex+0x386>
 8007a78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a7c:	f104 0314 	add.w	r3, r4, #20
 8007a80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a88:	f04f 0c00 	mov.w	ip, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a92:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007a96:	d01c      	beq.n	8007ad2 <__gethex+0x3fe>
 8007a98:	3201      	adds	r2, #1
 8007a9a:	6002      	str	r2, [r0, #0]
 8007a9c:	2f02      	cmp	r7, #2
 8007a9e:	f104 0314 	add.w	r3, r4, #20
 8007aa2:	d13f      	bne.n	8007b24 <__gethex+0x450>
 8007aa4:	f8d8 2000 	ldr.w	r2, [r8]
 8007aa8:	3a01      	subs	r2, #1
 8007aaa:	42b2      	cmp	r2, r6
 8007aac:	d10a      	bne.n	8007ac4 <__gethex+0x3f0>
 8007aae:	1171      	asrs	r1, r6, #5
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ab6:	f006 061f 	and.w	r6, r6, #31
 8007aba:	fa02 f606 	lsl.w	r6, r2, r6
 8007abe:	421e      	tst	r6, r3
 8007ac0:	bf18      	it	ne
 8007ac2:	4617      	movne	r7, r2
 8007ac4:	f047 0720 	orr.w	r7, r7, #32
 8007ac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007aca:	601c      	str	r4, [r3, #0]
 8007acc:	9b04      	ldr	r3, [sp, #16]
 8007ace:	601d      	str	r5, [r3, #0]
 8007ad0:	e695      	b.n	80077fe <__gethex+0x12a>
 8007ad2:	4299      	cmp	r1, r3
 8007ad4:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ad8:	d8d8      	bhi.n	8007a8c <__gethex+0x3b8>
 8007ada:	68a3      	ldr	r3, [r4, #8]
 8007adc:	459b      	cmp	fp, r3
 8007ade:	db19      	blt.n	8007b14 <__gethex+0x440>
 8007ae0:	6861      	ldr	r1, [r4, #4]
 8007ae2:	ee18 0a10 	vmov	r0, s16
 8007ae6:	3101      	adds	r1, #1
 8007ae8:	f000 f928 	bl	8007d3c <_Balloc>
 8007aec:	4681      	mov	r9, r0
 8007aee:	b918      	cbnz	r0, 8007af8 <__gethex+0x424>
 8007af0:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <__gethex+0x488>)
 8007af2:	4602      	mov	r2, r0
 8007af4:	2184      	movs	r1, #132	; 0x84
 8007af6:	e6a8      	b.n	800784a <__gethex+0x176>
 8007af8:	6922      	ldr	r2, [r4, #16]
 8007afa:	3202      	adds	r2, #2
 8007afc:	f104 010c 	add.w	r1, r4, #12
 8007b00:	0092      	lsls	r2, r2, #2
 8007b02:	300c      	adds	r0, #12
 8007b04:	f000 f90c 	bl	8007d20 <memcpy>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	ee18 0a10 	vmov	r0, s16
 8007b0e:	f000 f955 	bl	8007dbc <_Bfree>
 8007b12:	464c      	mov	r4, r9
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b1c:	6122      	str	r2, [r4, #16]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	615a      	str	r2, [r3, #20]
 8007b22:	e7bb      	b.n	8007a9c <__gethex+0x3c8>
 8007b24:	6922      	ldr	r2, [r4, #16]
 8007b26:	455a      	cmp	r2, fp
 8007b28:	dd0b      	ble.n	8007b42 <__gethex+0x46e>
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7ff fd69 	bl	8007604 <rshift>
 8007b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b36:	3501      	adds	r5, #1
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	f6ff aed0 	blt.w	80078de <__gethex+0x20a>
 8007b3e:	2701      	movs	r7, #1
 8007b40:	e7c0      	b.n	8007ac4 <__gethex+0x3f0>
 8007b42:	f016 061f 	ands.w	r6, r6, #31
 8007b46:	d0fa      	beq.n	8007b3e <__gethex+0x46a>
 8007b48:	4453      	add	r3, sl
 8007b4a:	f1c6 0620 	rsb	r6, r6, #32
 8007b4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007b52:	f000 f9e5 	bl	8007f20 <__hi0bits>
 8007b56:	42b0      	cmp	r0, r6
 8007b58:	dbe7      	blt.n	8007b2a <__gethex+0x456>
 8007b5a:	e7f0      	b.n	8007b3e <__gethex+0x46a>
 8007b5c:	080099d8 	.word	0x080099d8

08007b60 <L_shift>:
 8007b60:	f1c2 0208 	rsb	r2, r2, #8
 8007b64:	0092      	lsls	r2, r2, #2
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	f1c2 0620 	rsb	r6, r2, #32
 8007b6c:	6843      	ldr	r3, [r0, #4]
 8007b6e:	6804      	ldr	r4, [r0, #0]
 8007b70:	fa03 f506 	lsl.w	r5, r3, r6
 8007b74:	432c      	orrs	r4, r5
 8007b76:	40d3      	lsrs	r3, r2
 8007b78:	6004      	str	r4, [r0, #0]
 8007b7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b7e:	4288      	cmp	r0, r1
 8007b80:	d3f4      	bcc.n	8007b6c <L_shift+0xc>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}

08007b84 <__match>:
 8007b84:	b530      	push	{r4, r5, lr}
 8007b86:	6803      	ldr	r3, [r0, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8e:	b914      	cbnz	r4, 8007b96 <__match+0x12>
 8007b90:	6003      	str	r3, [r0, #0]
 8007b92:	2001      	movs	r0, #1
 8007b94:	bd30      	pop	{r4, r5, pc}
 8007b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007b9e:	2d19      	cmp	r5, #25
 8007ba0:	bf98      	it	ls
 8007ba2:	3220      	addls	r2, #32
 8007ba4:	42a2      	cmp	r2, r4
 8007ba6:	d0f0      	beq.n	8007b8a <__match+0x6>
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e7f3      	b.n	8007b94 <__match+0x10>

08007bac <__hexnan>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	680b      	ldr	r3, [r1, #0]
 8007bb2:	115e      	asrs	r6, r3, #5
 8007bb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007bb8:	f013 031f 	ands.w	r3, r3, #31
 8007bbc:	b087      	sub	sp, #28
 8007bbe:	bf18      	it	ne
 8007bc0:	3604      	addne	r6, #4
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	1f37      	subs	r7, r6, #4
 8007bc6:	4690      	mov	r8, r2
 8007bc8:	6802      	ldr	r2, [r0, #0]
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	4682      	mov	sl, r0
 8007bce:	f846 5c04 	str.w	r5, [r6, #-4]
 8007bd2:	46b9      	mov	r9, r7
 8007bd4:	463c      	mov	r4, r7
 8007bd6:	9502      	str	r5, [sp, #8]
 8007bd8:	46ab      	mov	fp, r5
 8007bda:	7851      	ldrb	r1, [r2, #1]
 8007bdc:	1c53      	adds	r3, r2, #1
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	b341      	cbz	r1, 8007c34 <__hexnan+0x88>
 8007be2:	4608      	mov	r0, r1
 8007be4:	9205      	str	r2, [sp, #20]
 8007be6:	9104      	str	r1, [sp, #16]
 8007be8:	f7ff fd5e 	bl	80076a8 <__hexdig_fun>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d14f      	bne.n	8007c90 <__hexnan+0xe4>
 8007bf0:	9904      	ldr	r1, [sp, #16]
 8007bf2:	9a05      	ldr	r2, [sp, #20]
 8007bf4:	2920      	cmp	r1, #32
 8007bf6:	d818      	bhi.n	8007c2a <__hexnan+0x7e>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	459b      	cmp	fp, r3
 8007bfc:	dd13      	ble.n	8007c26 <__hexnan+0x7a>
 8007bfe:	454c      	cmp	r4, r9
 8007c00:	d206      	bcs.n	8007c10 <__hexnan+0x64>
 8007c02:	2d07      	cmp	r5, #7
 8007c04:	dc04      	bgt.n	8007c10 <__hexnan+0x64>
 8007c06:	462a      	mov	r2, r5
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f7ff ffa8 	bl	8007b60 <L_shift>
 8007c10:	4544      	cmp	r4, r8
 8007c12:	d950      	bls.n	8007cb6 <__hexnan+0x10a>
 8007c14:	2300      	movs	r3, #0
 8007c16:	f1a4 0904 	sub.w	r9, r4, #4
 8007c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8007c22:	464c      	mov	r4, r9
 8007c24:	461d      	mov	r5, r3
 8007c26:	9a03      	ldr	r2, [sp, #12]
 8007c28:	e7d7      	b.n	8007bda <__hexnan+0x2e>
 8007c2a:	2929      	cmp	r1, #41	; 0x29
 8007c2c:	d156      	bne.n	8007cdc <__hexnan+0x130>
 8007c2e:	3202      	adds	r2, #2
 8007c30:	f8ca 2000 	str.w	r2, [sl]
 8007c34:	f1bb 0f00 	cmp.w	fp, #0
 8007c38:	d050      	beq.n	8007cdc <__hexnan+0x130>
 8007c3a:	454c      	cmp	r4, r9
 8007c3c:	d206      	bcs.n	8007c4c <__hexnan+0xa0>
 8007c3e:	2d07      	cmp	r5, #7
 8007c40:	dc04      	bgt.n	8007c4c <__hexnan+0xa0>
 8007c42:	462a      	mov	r2, r5
 8007c44:	4649      	mov	r1, r9
 8007c46:	4620      	mov	r0, r4
 8007c48:	f7ff ff8a 	bl	8007b60 <L_shift>
 8007c4c:	4544      	cmp	r4, r8
 8007c4e:	d934      	bls.n	8007cba <__hexnan+0x10e>
 8007c50:	f1a8 0204 	sub.w	r2, r8, #4
 8007c54:	4623      	mov	r3, r4
 8007c56:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c5e:	429f      	cmp	r7, r3
 8007c60:	d2f9      	bcs.n	8007c56 <__hexnan+0xaa>
 8007c62:	1b3b      	subs	r3, r7, r4
 8007c64:	f023 0303 	bic.w	r3, r3, #3
 8007c68:	3304      	adds	r3, #4
 8007c6a:	3401      	adds	r4, #1
 8007c6c:	3e03      	subs	r6, #3
 8007c6e:	42b4      	cmp	r4, r6
 8007c70:	bf88      	it	hi
 8007c72:	2304      	movhi	r3, #4
 8007c74:	4443      	add	r3, r8
 8007c76:	2200      	movs	r2, #0
 8007c78:	f843 2b04 	str.w	r2, [r3], #4
 8007c7c:	429f      	cmp	r7, r3
 8007c7e:	d2fb      	bcs.n	8007c78 <__hexnan+0xcc>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	b91b      	cbnz	r3, 8007c8c <__hexnan+0xe0>
 8007c84:	4547      	cmp	r7, r8
 8007c86:	d127      	bne.n	8007cd8 <__hexnan+0x12c>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	2005      	movs	r0, #5
 8007c8e:	e026      	b.n	8007cde <__hexnan+0x132>
 8007c90:	3501      	adds	r5, #1
 8007c92:	2d08      	cmp	r5, #8
 8007c94:	f10b 0b01 	add.w	fp, fp, #1
 8007c98:	dd06      	ble.n	8007ca8 <__hexnan+0xfc>
 8007c9a:	4544      	cmp	r4, r8
 8007c9c:	d9c3      	bls.n	8007c26 <__hexnan+0x7a>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ca4:	2501      	movs	r5, #1
 8007ca6:	3c04      	subs	r4, #4
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	f000 000f 	and.w	r0, r0, #15
 8007cae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007cb2:	6022      	str	r2, [r4, #0]
 8007cb4:	e7b7      	b.n	8007c26 <__hexnan+0x7a>
 8007cb6:	2508      	movs	r5, #8
 8007cb8:	e7b5      	b.n	8007c26 <__hexnan+0x7a>
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0df      	beq.n	8007c80 <__hexnan+0xd4>
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cc4:	f1c3 0320 	rsb	r3, r3, #32
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007cd0:	401a      	ands	r2, r3
 8007cd2:	f846 2c04 	str.w	r2, [r6, #-4]
 8007cd6:	e7d3      	b.n	8007c80 <__hexnan+0xd4>
 8007cd8:	3f04      	subs	r7, #4
 8007cda:	e7d1      	b.n	8007c80 <__hexnan+0xd4>
 8007cdc:	2004      	movs	r0, #4
 8007cde:	b007      	add	sp, #28
 8007ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ce4 <_localeconv_r>:
 8007ce4:	4800      	ldr	r0, [pc, #0]	; (8007ce8 <_localeconv_r+0x4>)
 8007ce6:	4770      	bx	lr
 8007ce8:	20000164 	.word	0x20000164

08007cec <malloc>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <malloc+0xc>)
 8007cee:	4601      	mov	r1, r0
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	f000 bd63 	b.w	80087bc <_malloc_r>
 8007cf6:	bf00      	nop
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <__ascii_mbtowc>:
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	b901      	cbnz	r1, 8007d02 <__ascii_mbtowc+0x6>
 8007d00:	a901      	add	r1, sp, #4
 8007d02:	b142      	cbz	r2, 8007d16 <__ascii_mbtowc+0x1a>
 8007d04:	b14b      	cbz	r3, 8007d1a <__ascii_mbtowc+0x1e>
 8007d06:	7813      	ldrb	r3, [r2, #0]
 8007d08:	600b      	str	r3, [r1, #0]
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	1e10      	subs	r0, r2, #0
 8007d0e:	bf18      	it	ne
 8007d10:	2001      	movne	r0, #1
 8007d12:	b002      	add	sp, #8
 8007d14:	4770      	bx	lr
 8007d16:	4610      	mov	r0, r2
 8007d18:	e7fb      	b.n	8007d12 <__ascii_mbtowc+0x16>
 8007d1a:	f06f 0001 	mvn.w	r0, #1
 8007d1e:	e7f8      	b.n	8007d12 <__ascii_mbtowc+0x16>

08007d20 <memcpy>:
 8007d20:	440a      	add	r2, r1
 8007d22:	4291      	cmp	r1, r2
 8007d24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d28:	d100      	bne.n	8007d2c <memcpy+0xc>
 8007d2a:	4770      	bx	lr
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d36:	4291      	cmp	r1, r2
 8007d38:	d1f9      	bne.n	8007d2e <memcpy+0xe>
 8007d3a:	bd10      	pop	{r4, pc}

08007d3c <_Balloc>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d40:	4604      	mov	r4, r0
 8007d42:	460d      	mov	r5, r1
 8007d44:	b976      	cbnz	r6, 8007d64 <_Balloc+0x28>
 8007d46:	2010      	movs	r0, #16
 8007d48:	f7ff ffd0 	bl	8007cec <malloc>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6260      	str	r0, [r4, #36]	; 0x24
 8007d50:	b920      	cbnz	r0, 8007d5c <_Balloc+0x20>
 8007d52:	4b18      	ldr	r3, [pc, #96]	; (8007db4 <_Balloc+0x78>)
 8007d54:	4818      	ldr	r0, [pc, #96]	; (8007db8 <_Balloc+0x7c>)
 8007d56:	2166      	movs	r1, #102	; 0x66
 8007d58:	f000 ff3c 	bl	8008bd4 <__assert_func>
 8007d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d60:	6006      	str	r6, [r0, #0]
 8007d62:	60c6      	str	r6, [r0, #12]
 8007d64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d66:	68f3      	ldr	r3, [r6, #12]
 8007d68:	b183      	cbz	r3, 8007d8c <_Balloc+0x50>
 8007d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d72:	b9b8      	cbnz	r0, 8007da4 <_Balloc+0x68>
 8007d74:	2101      	movs	r1, #1
 8007d76:	fa01 f605 	lsl.w	r6, r1, r5
 8007d7a:	1d72      	adds	r2, r6, #5
 8007d7c:	0092      	lsls	r2, r2, #2
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fc9a 	bl	80086b8 <_calloc_r>
 8007d84:	b160      	cbz	r0, 8007da0 <_Balloc+0x64>
 8007d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d8a:	e00e      	b.n	8007daa <_Balloc+0x6e>
 8007d8c:	2221      	movs	r2, #33	; 0x21
 8007d8e:	2104      	movs	r1, #4
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fc91 	bl	80086b8 <_calloc_r>
 8007d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d98:	60f0      	str	r0, [r6, #12]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e4      	bne.n	8007d6a <_Balloc+0x2e>
 8007da0:	2000      	movs	r0, #0
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	6802      	ldr	r2, [r0, #0]
 8007da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007daa:	2300      	movs	r3, #0
 8007dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007db0:	e7f7      	b.n	8007da2 <_Balloc+0x66>
 8007db2:	bf00      	nop
 8007db4:	08009966 	.word	0x08009966
 8007db8:	08009a64 	.word	0x08009a64

08007dbc <_Bfree>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	b976      	cbnz	r6, 8007de4 <_Bfree+0x28>
 8007dc6:	2010      	movs	r0, #16
 8007dc8:	f7ff ff90 	bl	8007cec <malloc>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	6268      	str	r0, [r5, #36]	; 0x24
 8007dd0:	b920      	cbnz	r0, 8007ddc <_Bfree+0x20>
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <_Bfree+0x3c>)
 8007dd4:	4809      	ldr	r0, [pc, #36]	; (8007dfc <_Bfree+0x40>)
 8007dd6:	218a      	movs	r1, #138	; 0x8a
 8007dd8:	f000 fefc 	bl	8008bd4 <__assert_func>
 8007ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007de0:	6006      	str	r6, [r0, #0]
 8007de2:	60c6      	str	r6, [r0, #12]
 8007de4:	b13c      	cbz	r4, 8007df6 <_Bfree+0x3a>
 8007de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007de8:	6862      	ldr	r2, [r4, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007df0:	6021      	str	r1, [r4, #0]
 8007df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	08009966 	.word	0x08009966
 8007dfc:	08009a64 	.word	0x08009a64

08007e00 <__multadd>:
 8007e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e04:	690d      	ldr	r5, [r1, #16]
 8007e06:	4607      	mov	r7, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	f101 0c14 	add.w	ip, r1, #20
 8007e10:	2000      	movs	r0, #0
 8007e12:	f8dc 3000 	ldr.w	r3, [ip]
 8007e16:	b299      	uxth	r1, r3
 8007e18:	fb02 6101 	mla	r1, r2, r1, r6
 8007e1c:	0c1e      	lsrs	r6, r3, #16
 8007e1e:	0c0b      	lsrs	r3, r1, #16
 8007e20:	fb02 3306 	mla	r3, r2, r6, r3
 8007e24:	b289      	uxth	r1, r1
 8007e26:	3001      	adds	r0, #1
 8007e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e2c:	4285      	cmp	r5, r0
 8007e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8007e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e36:	dcec      	bgt.n	8007e12 <__multadd+0x12>
 8007e38:	b30e      	cbz	r6, 8007e7e <__multadd+0x7e>
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	42ab      	cmp	r3, r5
 8007e3e:	dc19      	bgt.n	8007e74 <__multadd+0x74>
 8007e40:	6861      	ldr	r1, [r4, #4]
 8007e42:	4638      	mov	r0, r7
 8007e44:	3101      	adds	r1, #1
 8007e46:	f7ff ff79 	bl	8007d3c <_Balloc>
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__multadd+0x5a>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <__multadd+0x84>)
 8007e52:	480d      	ldr	r0, [pc, #52]	; (8007e88 <__multadd+0x88>)
 8007e54:	21b5      	movs	r1, #181	; 0xb5
 8007e56:	f000 febd 	bl	8008bd4 <__assert_func>
 8007e5a:	6922      	ldr	r2, [r4, #16]
 8007e5c:	3202      	adds	r2, #2
 8007e5e:	f104 010c 	add.w	r1, r4, #12
 8007e62:	0092      	lsls	r2, r2, #2
 8007e64:	300c      	adds	r0, #12
 8007e66:	f7ff ff5b 	bl	8007d20 <memcpy>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f7ff ffa5 	bl	8007dbc <_Bfree>
 8007e72:	4644      	mov	r4, r8
 8007e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e78:	3501      	adds	r5, #1
 8007e7a:	615e      	str	r6, [r3, #20]
 8007e7c:	6125      	str	r5, [r4, #16]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	080099d8 	.word	0x080099d8
 8007e88:	08009a64 	.word	0x08009a64

08007e8c <__s2b>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	460c      	mov	r4, r1
 8007e92:	4615      	mov	r5, r2
 8007e94:	461f      	mov	r7, r3
 8007e96:	2209      	movs	r2, #9
 8007e98:	3308      	adds	r3, #8
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	db09      	blt.n	8007ebc <__s2b+0x30>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff ff47 	bl	8007d3c <_Balloc>
 8007eae:	b940      	cbnz	r0, 8007ec2 <__s2b+0x36>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	4b19      	ldr	r3, [pc, #100]	; (8007f18 <__s2b+0x8c>)
 8007eb4:	4819      	ldr	r0, [pc, #100]	; (8007f1c <__s2b+0x90>)
 8007eb6:	21ce      	movs	r1, #206	; 0xce
 8007eb8:	f000 fe8c 	bl	8008bd4 <__assert_func>
 8007ebc:	0052      	lsls	r2, r2, #1
 8007ebe:	3101      	adds	r1, #1
 8007ec0:	e7f0      	b.n	8007ea4 <__s2b+0x18>
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	6143      	str	r3, [r0, #20]
 8007ec6:	2d09      	cmp	r5, #9
 8007ec8:	f04f 0301 	mov.w	r3, #1
 8007ecc:	6103      	str	r3, [r0, #16]
 8007ece:	dd16      	ble.n	8007efe <__s2b+0x72>
 8007ed0:	f104 0909 	add.w	r9, r4, #9
 8007ed4:	46c8      	mov	r8, r9
 8007ed6:	442c      	add	r4, r5
 8007ed8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007edc:	4601      	mov	r1, r0
 8007ede:	3b30      	subs	r3, #48	; 0x30
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ff8c 	bl	8007e00 <__multadd>
 8007ee8:	45a0      	cmp	r8, r4
 8007eea:	d1f5      	bne.n	8007ed8 <__s2b+0x4c>
 8007eec:	f1a5 0408 	sub.w	r4, r5, #8
 8007ef0:	444c      	add	r4, r9
 8007ef2:	1b2d      	subs	r5, r5, r4
 8007ef4:	1963      	adds	r3, r4, r5
 8007ef6:	42bb      	cmp	r3, r7
 8007ef8:	db04      	blt.n	8007f04 <__s2b+0x78>
 8007efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efe:	340a      	adds	r4, #10
 8007f00:	2509      	movs	r5, #9
 8007f02:	e7f6      	b.n	8007ef2 <__s2b+0x66>
 8007f04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f08:	4601      	mov	r1, r0
 8007f0a:	3b30      	subs	r3, #48	; 0x30
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f7ff ff76 	bl	8007e00 <__multadd>
 8007f14:	e7ee      	b.n	8007ef4 <__s2b+0x68>
 8007f16:	bf00      	nop
 8007f18:	080099d8 	.word	0x080099d8
 8007f1c:	08009a64 	.word	0x08009a64

08007f20 <__hi0bits>:
 8007f20:	0c03      	lsrs	r3, r0, #16
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	b9d3      	cbnz	r3, 8007f5c <__hi0bits+0x3c>
 8007f26:	0400      	lsls	r0, r0, #16
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f2e:	bf04      	itt	eq
 8007f30:	0200      	lsleq	r0, r0, #8
 8007f32:	3308      	addeq	r3, #8
 8007f34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f38:	bf04      	itt	eq
 8007f3a:	0100      	lsleq	r0, r0, #4
 8007f3c:	3304      	addeq	r3, #4
 8007f3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f42:	bf04      	itt	eq
 8007f44:	0080      	lsleq	r0, r0, #2
 8007f46:	3302      	addeq	r3, #2
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	db05      	blt.n	8007f58 <__hi0bits+0x38>
 8007f4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f50:	f103 0301 	add.w	r3, r3, #1
 8007f54:	bf08      	it	eq
 8007f56:	2320      	moveq	r3, #32
 8007f58:	4618      	mov	r0, r3
 8007f5a:	4770      	bx	lr
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e7e4      	b.n	8007f2a <__hi0bits+0xa>

08007f60 <__lo0bits>:
 8007f60:	6803      	ldr	r3, [r0, #0]
 8007f62:	f013 0207 	ands.w	r2, r3, #7
 8007f66:	4601      	mov	r1, r0
 8007f68:	d00b      	beq.n	8007f82 <__lo0bits+0x22>
 8007f6a:	07da      	lsls	r2, r3, #31
 8007f6c:	d423      	bmi.n	8007fb6 <__lo0bits+0x56>
 8007f6e:	0798      	lsls	r0, r3, #30
 8007f70:	bf49      	itett	mi
 8007f72:	085b      	lsrmi	r3, r3, #1
 8007f74:	089b      	lsrpl	r3, r3, #2
 8007f76:	2001      	movmi	r0, #1
 8007f78:	600b      	strmi	r3, [r1, #0]
 8007f7a:	bf5c      	itt	pl
 8007f7c:	600b      	strpl	r3, [r1, #0]
 8007f7e:	2002      	movpl	r0, #2
 8007f80:	4770      	bx	lr
 8007f82:	b298      	uxth	r0, r3
 8007f84:	b9a8      	cbnz	r0, 8007fb2 <__lo0bits+0x52>
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	2010      	movs	r0, #16
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	b90a      	cbnz	r2, 8007f92 <__lo0bits+0x32>
 8007f8e:	3008      	adds	r0, #8
 8007f90:	0a1b      	lsrs	r3, r3, #8
 8007f92:	071a      	lsls	r2, r3, #28
 8007f94:	bf04      	itt	eq
 8007f96:	091b      	lsreq	r3, r3, #4
 8007f98:	3004      	addeq	r0, #4
 8007f9a:	079a      	lsls	r2, r3, #30
 8007f9c:	bf04      	itt	eq
 8007f9e:	089b      	lsreq	r3, r3, #2
 8007fa0:	3002      	addeq	r0, #2
 8007fa2:	07da      	lsls	r2, r3, #31
 8007fa4:	d403      	bmi.n	8007fae <__lo0bits+0x4e>
 8007fa6:	085b      	lsrs	r3, r3, #1
 8007fa8:	f100 0001 	add.w	r0, r0, #1
 8007fac:	d005      	beq.n	8007fba <__lo0bits+0x5a>
 8007fae:	600b      	str	r3, [r1, #0]
 8007fb0:	4770      	bx	lr
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	e7e9      	b.n	8007f8a <__lo0bits+0x2a>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	4770      	bx	lr
 8007fba:	2020      	movs	r0, #32
 8007fbc:	4770      	bx	lr
	...

08007fc0 <__i2b>:
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	f7ff feb9 	bl	8007d3c <_Balloc>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	b928      	cbnz	r0, 8007fda <__i2b+0x1a>
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <__i2b+0x24>)
 8007fd0:	4805      	ldr	r0, [pc, #20]	; (8007fe8 <__i2b+0x28>)
 8007fd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fd6:	f000 fdfd 	bl	8008bd4 <__assert_func>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	6144      	str	r4, [r0, #20]
 8007fde:	6103      	str	r3, [r0, #16]
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	bf00      	nop
 8007fe4:	080099d8 	.word	0x080099d8
 8007fe8:	08009a64 	.word	0x08009a64

08007fec <__multiply>:
 8007fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff0:	4691      	mov	r9, r2
 8007ff2:	690a      	ldr	r2, [r1, #16]
 8007ff4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	bfb8      	it	lt
 8007ffc:	460b      	movlt	r3, r1
 8007ffe:	460c      	mov	r4, r1
 8008000:	bfbc      	itt	lt
 8008002:	464c      	movlt	r4, r9
 8008004:	4699      	movlt	r9, r3
 8008006:	6927      	ldr	r7, [r4, #16]
 8008008:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800800c:	68a3      	ldr	r3, [r4, #8]
 800800e:	6861      	ldr	r1, [r4, #4]
 8008010:	eb07 060a 	add.w	r6, r7, sl
 8008014:	42b3      	cmp	r3, r6
 8008016:	b085      	sub	sp, #20
 8008018:	bfb8      	it	lt
 800801a:	3101      	addlt	r1, #1
 800801c:	f7ff fe8e 	bl	8007d3c <_Balloc>
 8008020:	b930      	cbnz	r0, 8008030 <__multiply+0x44>
 8008022:	4602      	mov	r2, r0
 8008024:	4b44      	ldr	r3, [pc, #272]	; (8008138 <__multiply+0x14c>)
 8008026:	4845      	ldr	r0, [pc, #276]	; (800813c <__multiply+0x150>)
 8008028:	f240 115d 	movw	r1, #349	; 0x15d
 800802c:	f000 fdd2 	bl	8008bd4 <__assert_func>
 8008030:	f100 0514 	add.w	r5, r0, #20
 8008034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008038:	462b      	mov	r3, r5
 800803a:	2200      	movs	r2, #0
 800803c:	4543      	cmp	r3, r8
 800803e:	d321      	bcc.n	8008084 <__multiply+0x98>
 8008040:	f104 0314 	add.w	r3, r4, #20
 8008044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008048:	f109 0314 	add.w	r3, r9, #20
 800804c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008050:	9202      	str	r2, [sp, #8]
 8008052:	1b3a      	subs	r2, r7, r4
 8008054:	3a15      	subs	r2, #21
 8008056:	f022 0203 	bic.w	r2, r2, #3
 800805a:	3204      	adds	r2, #4
 800805c:	f104 0115 	add.w	r1, r4, #21
 8008060:	428f      	cmp	r7, r1
 8008062:	bf38      	it	cc
 8008064:	2204      	movcc	r2, #4
 8008066:	9201      	str	r2, [sp, #4]
 8008068:	9a02      	ldr	r2, [sp, #8]
 800806a:	9303      	str	r3, [sp, #12]
 800806c:	429a      	cmp	r2, r3
 800806e:	d80c      	bhi.n	800808a <__multiply+0x9e>
 8008070:	2e00      	cmp	r6, #0
 8008072:	dd03      	ble.n	800807c <__multiply+0x90>
 8008074:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008078:	2b00      	cmp	r3, #0
 800807a:	d05a      	beq.n	8008132 <__multiply+0x146>
 800807c:	6106      	str	r6, [r0, #16]
 800807e:	b005      	add	sp, #20
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008084:	f843 2b04 	str.w	r2, [r3], #4
 8008088:	e7d8      	b.n	800803c <__multiply+0x50>
 800808a:	f8b3 a000 	ldrh.w	sl, [r3]
 800808e:	f1ba 0f00 	cmp.w	sl, #0
 8008092:	d024      	beq.n	80080de <__multiply+0xf2>
 8008094:	f104 0e14 	add.w	lr, r4, #20
 8008098:	46a9      	mov	r9, r5
 800809a:	f04f 0c00 	mov.w	ip, #0
 800809e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080a2:	f8d9 1000 	ldr.w	r1, [r9]
 80080a6:	fa1f fb82 	uxth.w	fp, r2
 80080aa:	b289      	uxth	r1, r1
 80080ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80080b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080b4:	f8d9 2000 	ldr.w	r2, [r9]
 80080b8:	4461      	add	r1, ip
 80080ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080be:	fb0a c20b 	mla	r2, sl, fp, ip
 80080c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080c6:	b289      	uxth	r1, r1
 80080c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080cc:	4577      	cmp	r7, lr
 80080ce:	f849 1b04 	str.w	r1, [r9], #4
 80080d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080d6:	d8e2      	bhi.n	800809e <__multiply+0xb2>
 80080d8:	9a01      	ldr	r2, [sp, #4]
 80080da:	f845 c002 	str.w	ip, [r5, r2]
 80080de:	9a03      	ldr	r2, [sp, #12]
 80080e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080e4:	3304      	adds	r3, #4
 80080e6:	f1b9 0f00 	cmp.w	r9, #0
 80080ea:	d020      	beq.n	800812e <__multiply+0x142>
 80080ec:	6829      	ldr	r1, [r5, #0]
 80080ee:	f104 0c14 	add.w	ip, r4, #20
 80080f2:	46ae      	mov	lr, r5
 80080f4:	f04f 0a00 	mov.w	sl, #0
 80080f8:	f8bc b000 	ldrh.w	fp, [ip]
 80080fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008100:	fb09 220b 	mla	r2, r9, fp, r2
 8008104:	4492      	add	sl, r2
 8008106:	b289      	uxth	r1, r1
 8008108:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800810c:	f84e 1b04 	str.w	r1, [lr], #4
 8008110:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008114:	f8be 1000 	ldrh.w	r1, [lr]
 8008118:	0c12      	lsrs	r2, r2, #16
 800811a:	fb09 1102 	mla	r1, r9, r2, r1
 800811e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008122:	4567      	cmp	r7, ip
 8008124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008128:	d8e6      	bhi.n	80080f8 <__multiply+0x10c>
 800812a:	9a01      	ldr	r2, [sp, #4]
 800812c:	50a9      	str	r1, [r5, r2]
 800812e:	3504      	adds	r5, #4
 8008130:	e79a      	b.n	8008068 <__multiply+0x7c>
 8008132:	3e01      	subs	r6, #1
 8008134:	e79c      	b.n	8008070 <__multiply+0x84>
 8008136:	bf00      	nop
 8008138:	080099d8 	.word	0x080099d8
 800813c:	08009a64 	.word	0x08009a64

08008140 <__pow5mult>:
 8008140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008144:	4615      	mov	r5, r2
 8008146:	f012 0203 	ands.w	r2, r2, #3
 800814a:	4606      	mov	r6, r0
 800814c:	460f      	mov	r7, r1
 800814e:	d007      	beq.n	8008160 <__pow5mult+0x20>
 8008150:	4c25      	ldr	r4, [pc, #148]	; (80081e8 <__pow5mult+0xa8>)
 8008152:	3a01      	subs	r2, #1
 8008154:	2300      	movs	r3, #0
 8008156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800815a:	f7ff fe51 	bl	8007e00 <__multadd>
 800815e:	4607      	mov	r7, r0
 8008160:	10ad      	asrs	r5, r5, #2
 8008162:	d03d      	beq.n	80081e0 <__pow5mult+0xa0>
 8008164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008166:	b97c      	cbnz	r4, 8008188 <__pow5mult+0x48>
 8008168:	2010      	movs	r0, #16
 800816a:	f7ff fdbf 	bl	8007cec <malloc>
 800816e:	4602      	mov	r2, r0
 8008170:	6270      	str	r0, [r6, #36]	; 0x24
 8008172:	b928      	cbnz	r0, 8008180 <__pow5mult+0x40>
 8008174:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <__pow5mult+0xac>)
 8008176:	481e      	ldr	r0, [pc, #120]	; (80081f0 <__pow5mult+0xb0>)
 8008178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800817c:	f000 fd2a 	bl	8008bd4 <__assert_func>
 8008180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008184:	6004      	str	r4, [r0, #0]
 8008186:	60c4      	str	r4, [r0, #12]
 8008188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800818c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008190:	b94c      	cbnz	r4, 80081a6 <__pow5mult+0x66>
 8008192:	f240 2171 	movw	r1, #625	; 0x271
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ff12 	bl	8007fc0 <__i2b>
 800819c:	2300      	movs	r3, #0
 800819e:	f8c8 0008 	str.w	r0, [r8, #8]
 80081a2:	4604      	mov	r4, r0
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	f04f 0900 	mov.w	r9, #0
 80081aa:	07eb      	lsls	r3, r5, #31
 80081ac:	d50a      	bpl.n	80081c4 <__pow5mult+0x84>
 80081ae:	4639      	mov	r1, r7
 80081b0:	4622      	mov	r2, r4
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7ff ff1a 	bl	8007fec <__multiply>
 80081b8:	4639      	mov	r1, r7
 80081ba:	4680      	mov	r8, r0
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff fdfd 	bl	8007dbc <_Bfree>
 80081c2:	4647      	mov	r7, r8
 80081c4:	106d      	asrs	r5, r5, #1
 80081c6:	d00b      	beq.n	80081e0 <__pow5mult+0xa0>
 80081c8:	6820      	ldr	r0, [r4, #0]
 80081ca:	b938      	cbnz	r0, 80081dc <__pow5mult+0x9c>
 80081cc:	4622      	mov	r2, r4
 80081ce:	4621      	mov	r1, r4
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7ff ff0b 	bl	8007fec <__multiply>
 80081d6:	6020      	str	r0, [r4, #0]
 80081d8:	f8c0 9000 	str.w	r9, [r0]
 80081dc:	4604      	mov	r4, r0
 80081de:	e7e4      	b.n	80081aa <__pow5mult+0x6a>
 80081e0:	4638      	mov	r0, r7
 80081e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081e6:	bf00      	nop
 80081e8:	08009bb0 	.word	0x08009bb0
 80081ec:	08009966 	.word	0x08009966
 80081f0:	08009a64 	.word	0x08009a64

080081f4 <__lshift>:
 80081f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f8:	460c      	mov	r4, r1
 80081fa:	6849      	ldr	r1, [r1, #4]
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008202:	68a3      	ldr	r3, [r4, #8]
 8008204:	4607      	mov	r7, r0
 8008206:	4691      	mov	r9, r2
 8008208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800820c:	f108 0601 	add.w	r6, r8, #1
 8008210:	42b3      	cmp	r3, r6
 8008212:	db0b      	blt.n	800822c <__lshift+0x38>
 8008214:	4638      	mov	r0, r7
 8008216:	f7ff fd91 	bl	8007d3c <_Balloc>
 800821a:	4605      	mov	r5, r0
 800821c:	b948      	cbnz	r0, 8008232 <__lshift+0x3e>
 800821e:	4602      	mov	r2, r0
 8008220:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <__lshift+0xd8>)
 8008222:	482b      	ldr	r0, [pc, #172]	; (80082d0 <__lshift+0xdc>)
 8008224:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008228:	f000 fcd4 	bl	8008bd4 <__assert_func>
 800822c:	3101      	adds	r1, #1
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	e7ee      	b.n	8008210 <__lshift+0x1c>
 8008232:	2300      	movs	r3, #0
 8008234:	f100 0114 	add.w	r1, r0, #20
 8008238:	f100 0210 	add.w	r2, r0, #16
 800823c:	4618      	mov	r0, r3
 800823e:	4553      	cmp	r3, sl
 8008240:	db37      	blt.n	80082b2 <__lshift+0xbe>
 8008242:	6920      	ldr	r0, [r4, #16]
 8008244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008248:	f104 0314 	add.w	r3, r4, #20
 800824c:	f019 091f 	ands.w	r9, r9, #31
 8008250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008258:	d02f      	beq.n	80082ba <__lshift+0xc6>
 800825a:	f1c9 0e20 	rsb	lr, r9, #32
 800825e:	468a      	mov	sl, r1
 8008260:	f04f 0c00 	mov.w	ip, #0
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	fa02 f209 	lsl.w	r2, r2, r9
 800826a:	ea42 020c 	orr.w	r2, r2, ip
 800826e:	f84a 2b04 	str.w	r2, [sl], #4
 8008272:	f853 2b04 	ldr.w	r2, [r3], #4
 8008276:	4298      	cmp	r0, r3
 8008278:	fa22 fc0e 	lsr.w	ip, r2, lr
 800827c:	d8f2      	bhi.n	8008264 <__lshift+0x70>
 800827e:	1b03      	subs	r3, r0, r4
 8008280:	3b15      	subs	r3, #21
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	3304      	adds	r3, #4
 8008288:	f104 0215 	add.w	r2, r4, #21
 800828c:	4290      	cmp	r0, r2
 800828e:	bf38      	it	cc
 8008290:	2304      	movcc	r3, #4
 8008292:	f841 c003 	str.w	ip, [r1, r3]
 8008296:	f1bc 0f00 	cmp.w	ip, #0
 800829a:	d001      	beq.n	80082a0 <__lshift+0xac>
 800829c:	f108 0602 	add.w	r6, r8, #2
 80082a0:	3e01      	subs	r6, #1
 80082a2:	4638      	mov	r0, r7
 80082a4:	612e      	str	r6, [r5, #16]
 80082a6:	4621      	mov	r1, r4
 80082a8:	f7ff fd88 	bl	8007dbc <_Bfree>
 80082ac:	4628      	mov	r0, r5
 80082ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082b6:	3301      	adds	r3, #1
 80082b8:	e7c1      	b.n	800823e <__lshift+0x4a>
 80082ba:	3904      	subs	r1, #4
 80082bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082c4:	4298      	cmp	r0, r3
 80082c6:	d8f9      	bhi.n	80082bc <__lshift+0xc8>
 80082c8:	e7ea      	b.n	80082a0 <__lshift+0xac>
 80082ca:	bf00      	nop
 80082cc:	080099d8 	.word	0x080099d8
 80082d0:	08009a64 	.word	0x08009a64

080082d4 <__mcmp>:
 80082d4:	b530      	push	{r4, r5, lr}
 80082d6:	6902      	ldr	r2, [r0, #16]
 80082d8:	690c      	ldr	r4, [r1, #16]
 80082da:	1b12      	subs	r2, r2, r4
 80082dc:	d10e      	bne.n	80082fc <__mcmp+0x28>
 80082de:	f100 0314 	add.w	r3, r0, #20
 80082e2:	3114      	adds	r1, #20
 80082e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082f4:	42a5      	cmp	r5, r4
 80082f6:	d003      	beq.n	8008300 <__mcmp+0x2c>
 80082f8:	d305      	bcc.n	8008306 <__mcmp+0x32>
 80082fa:	2201      	movs	r2, #1
 80082fc:	4610      	mov	r0, r2
 80082fe:	bd30      	pop	{r4, r5, pc}
 8008300:	4283      	cmp	r3, r0
 8008302:	d3f3      	bcc.n	80082ec <__mcmp+0x18>
 8008304:	e7fa      	b.n	80082fc <__mcmp+0x28>
 8008306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800830a:	e7f7      	b.n	80082fc <__mcmp+0x28>

0800830c <__mdiff>:
 800830c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	460c      	mov	r4, r1
 8008312:	4606      	mov	r6, r0
 8008314:	4611      	mov	r1, r2
 8008316:	4620      	mov	r0, r4
 8008318:	4690      	mov	r8, r2
 800831a:	f7ff ffdb 	bl	80082d4 <__mcmp>
 800831e:	1e05      	subs	r5, r0, #0
 8008320:	d110      	bne.n	8008344 <__mdiff+0x38>
 8008322:	4629      	mov	r1, r5
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff fd09 	bl	8007d3c <_Balloc>
 800832a:	b930      	cbnz	r0, 800833a <__mdiff+0x2e>
 800832c:	4b3a      	ldr	r3, [pc, #232]	; (8008418 <__mdiff+0x10c>)
 800832e:	4602      	mov	r2, r0
 8008330:	f240 2132 	movw	r1, #562	; 0x232
 8008334:	4839      	ldr	r0, [pc, #228]	; (800841c <__mdiff+0x110>)
 8008336:	f000 fc4d 	bl	8008bd4 <__assert_func>
 800833a:	2301      	movs	r3, #1
 800833c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008344:	bfa4      	itt	ge
 8008346:	4643      	movge	r3, r8
 8008348:	46a0      	movge	r8, r4
 800834a:	4630      	mov	r0, r6
 800834c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008350:	bfa6      	itte	ge
 8008352:	461c      	movge	r4, r3
 8008354:	2500      	movge	r5, #0
 8008356:	2501      	movlt	r5, #1
 8008358:	f7ff fcf0 	bl	8007d3c <_Balloc>
 800835c:	b920      	cbnz	r0, 8008368 <__mdiff+0x5c>
 800835e:	4b2e      	ldr	r3, [pc, #184]	; (8008418 <__mdiff+0x10c>)
 8008360:	4602      	mov	r2, r0
 8008362:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008366:	e7e5      	b.n	8008334 <__mdiff+0x28>
 8008368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800836c:	6926      	ldr	r6, [r4, #16]
 800836e:	60c5      	str	r5, [r0, #12]
 8008370:	f104 0914 	add.w	r9, r4, #20
 8008374:	f108 0514 	add.w	r5, r8, #20
 8008378:	f100 0e14 	add.w	lr, r0, #20
 800837c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008384:	f108 0210 	add.w	r2, r8, #16
 8008388:	46f2      	mov	sl, lr
 800838a:	2100      	movs	r1, #0
 800838c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008394:	fa1f f883 	uxth.w	r8, r3
 8008398:	fa11 f18b 	uxtah	r1, r1, fp
 800839c:	0c1b      	lsrs	r3, r3, #16
 800839e:	eba1 0808 	sub.w	r8, r1, r8
 80083a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083aa:	fa1f f888 	uxth.w	r8, r8
 80083ae:	1419      	asrs	r1, r3, #16
 80083b0:	454e      	cmp	r6, r9
 80083b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083b6:	f84a 3b04 	str.w	r3, [sl], #4
 80083ba:	d8e7      	bhi.n	800838c <__mdiff+0x80>
 80083bc:	1b33      	subs	r3, r6, r4
 80083be:	3b15      	subs	r3, #21
 80083c0:	f023 0303 	bic.w	r3, r3, #3
 80083c4:	3304      	adds	r3, #4
 80083c6:	3415      	adds	r4, #21
 80083c8:	42a6      	cmp	r6, r4
 80083ca:	bf38      	it	cc
 80083cc:	2304      	movcc	r3, #4
 80083ce:	441d      	add	r5, r3
 80083d0:	4473      	add	r3, lr
 80083d2:	469e      	mov	lr, r3
 80083d4:	462e      	mov	r6, r5
 80083d6:	4566      	cmp	r6, ip
 80083d8:	d30e      	bcc.n	80083f8 <__mdiff+0xec>
 80083da:	f10c 0203 	add.w	r2, ip, #3
 80083de:	1b52      	subs	r2, r2, r5
 80083e0:	f022 0203 	bic.w	r2, r2, #3
 80083e4:	3d03      	subs	r5, #3
 80083e6:	45ac      	cmp	ip, r5
 80083e8:	bf38      	it	cc
 80083ea:	2200      	movcc	r2, #0
 80083ec:	441a      	add	r2, r3
 80083ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80083f2:	b17b      	cbz	r3, 8008414 <__mdiff+0x108>
 80083f4:	6107      	str	r7, [r0, #16]
 80083f6:	e7a3      	b.n	8008340 <__mdiff+0x34>
 80083f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80083fc:	fa11 f288 	uxtah	r2, r1, r8
 8008400:	1414      	asrs	r4, r2, #16
 8008402:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008406:	b292      	uxth	r2, r2
 8008408:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800840c:	f84e 2b04 	str.w	r2, [lr], #4
 8008410:	1421      	asrs	r1, r4, #16
 8008412:	e7e0      	b.n	80083d6 <__mdiff+0xca>
 8008414:	3f01      	subs	r7, #1
 8008416:	e7ea      	b.n	80083ee <__mdiff+0xe2>
 8008418:	080099d8 	.word	0x080099d8
 800841c:	08009a64 	.word	0x08009a64

08008420 <__ulp>:
 8008420:	b082      	sub	sp, #8
 8008422:	ed8d 0b00 	vstr	d0, [sp]
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	4912      	ldr	r1, [pc, #72]	; (8008474 <__ulp+0x54>)
 800842a:	4019      	ands	r1, r3
 800842c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008430:	2900      	cmp	r1, #0
 8008432:	dd05      	ble.n	8008440 <__ulp+0x20>
 8008434:	2200      	movs	r2, #0
 8008436:	460b      	mov	r3, r1
 8008438:	ec43 2b10 	vmov	d0, r2, r3
 800843c:	b002      	add	sp, #8
 800843e:	4770      	bx	lr
 8008440:	4249      	negs	r1, r1
 8008442:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008446:	ea4f 5021 	mov.w	r0, r1, asr #20
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	da04      	bge.n	800845e <__ulp+0x3e>
 8008454:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008458:	fa41 f300 	asr.w	r3, r1, r0
 800845c:	e7ec      	b.n	8008438 <__ulp+0x18>
 800845e:	f1a0 0114 	sub.w	r1, r0, #20
 8008462:	291e      	cmp	r1, #30
 8008464:	bfda      	itte	le
 8008466:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800846a:	fa20 f101 	lsrle.w	r1, r0, r1
 800846e:	2101      	movgt	r1, #1
 8008470:	460a      	mov	r2, r1
 8008472:	e7e1      	b.n	8008438 <__ulp+0x18>
 8008474:	7ff00000 	.word	0x7ff00000

08008478 <__b2d>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	6905      	ldr	r5, [r0, #16]
 800847c:	f100 0714 	add.w	r7, r0, #20
 8008480:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008484:	1f2e      	subs	r6, r5, #4
 8008486:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800848a:	4620      	mov	r0, r4
 800848c:	f7ff fd48 	bl	8007f20 <__hi0bits>
 8008490:	f1c0 0320 	rsb	r3, r0, #32
 8008494:	280a      	cmp	r0, #10
 8008496:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008514 <__b2d+0x9c>
 800849a:	600b      	str	r3, [r1, #0]
 800849c:	dc14      	bgt.n	80084c8 <__b2d+0x50>
 800849e:	f1c0 0e0b 	rsb	lr, r0, #11
 80084a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80084a6:	42b7      	cmp	r7, r6
 80084a8:	ea41 030c 	orr.w	r3, r1, ip
 80084ac:	bf34      	ite	cc
 80084ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80084b2:	2100      	movcs	r1, #0
 80084b4:	3015      	adds	r0, #21
 80084b6:	fa04 f000 	lsl.w	r0, r4, r0
 80084ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80084be:	ea40 0201 	orr.w	r2, r0, r1
 80084c2:	ec43 2b10 	vmov	d0, r2, r3
 80084c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c8:	42b7      	cmp	r7, r6
 80084ca:	bf3a      	itte	cc
 80084cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80084d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80084d4:	2100      	movcs	r1, #0
 80084d6:	380b      	subs	r0, #11
 80084d8:	d017      	beq.n	800850a <__b2d+0x92>
 80084da:	f1c0 0c20 	rsb	ip, r0, #32
 80084de:	fa04 f500 	lsl.w	r5, r4, r0
 80084e2:	42be      	cmp	r6, r7
 80084e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80084e8:	ea45 0504 	orr.w	r5, r5, r4
 80084ec:	bf8c      	ite	hi
 80084ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80084f2:	2400      	movls	r4, #0
 80084f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80084f8:	fa01 f000 	lsl.w	r0, r1, r0
 80084fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8008500:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008504:	ea40 0204 	orr.w	r2, r0, r4
 8008508:	e7db      	b.n	80084c2 <__b2d+0x4a>
 800850a:	ea44 030c 	orr.w	r3, r4, ip
 800850e:	460a      	mov	r2, r1
 8008510:	e7d7      	b.n	80084c2 <__b2d+0x4a>
 8008512:	bf00      	nop
 8008514:	3ff00000 	.word	0x3ff00000

08008518 <__d2b>:
 8008518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800851c:	4689      	mov	r9, r1
 800851e:	2101      	movs	r1, #1
 8008520:	ec57 6b10 	vmov	r6, r7, d0
 8008524:	4690      	mov	r8, r2
 8008526:	f7ff fc09 	bl	8007d3c <_Balloc>
 800852a:	4604      	mov	r4, r0
 800852c:	b930      	cbnz	r0, 800853c <__d2b+0x24>
 800852e:	4602      	mov	r2, r0
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <__d2b+0xb0>)
 8008532:	4826      	ldr	r0, [pc, #152]	; (80085cc <__d2b+0xb4>)
 8008534:	f240 310a 	movw	r1, #778	; 0x30a
 8008538:	f000 fb4c 	bl	8008bd4 <__assert_func>
 800853c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008544:	bb35      	cbnz	r5, 8008594 <__d2b+0x7c>
 8008546:	2e00      	cmp	r6, #0
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	d028      	beq.n	800859e <__d2b+0x86>
 800854c:	4668      	mov	r0, sp
 800854e:	9600      	str	r6, [sp, #0]
 8008550:	f7ff fd06 	bl	8007f60 <__lo0bits>
 8008554:	9900      	ldr	r1, [sp, #0]
 8008556:	b300      	cbz	r0, 800859a <__d2b+0x82>
 8008558:	9a01      	ldr	r2, [sp, #4]
 800855a:	f1c0 0320 	rsb	r3, r0, #32
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	430b      	orrs	r3, r1
 8008564:	40c2      	lsrs	r2, r0
 8008566:	6163      	str	r3, [r4, #20]
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	61a3      	str	r3, [r4, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bf14      	ite	ne
 8008572:	2202      	movne	r2, #2
 8008574:	2201      	moveq	r2, #1
 8008576:	6122      	str	r2, [r4, #16]
 8008578:	b1d5      	cbz	r5, 80085b0 <__d2b+0x98>
 800857a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800857e:	4405      	add	r5, r0
 8008580:	f8c9 5000 	str.w	r5, [r9]
 8008584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008588:	f8c8 0000 	str.w	r0, [r8]
 800858c:	4620      	mov	r0, r4
 800858e:	b003      	add	sp, #12
 8008590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008598:	e7d5      	b.n	8008546 <__d2b+0x2e>
 800859a:	6161      	str	r1, [r4, #20]
 800859c:	e7e5      	b.n	800856a <__d2b+0x52>
 800859e:	a801      	add	r0, sp, #4
 80085a0:	f7ff fcde 	bl	8007f60 <__lo0bits>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	6163      	str	r3, [r4, #20]
 80085a8:	2201      	movs	r2, #1
 80085aa:	6122      	str	r2, [r4, #16]
 80085ac:	3020      	adds	r0, #32
 80085ae:	e7e3      	b.n	8008578 <__d2b+0x60>
 80085b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b8:	f8c9 0000 	str.w	r0, [r9]
 80085bc:	6918      	ldr	r0, [r3, #16]
 80085be:	f7ff fcaf 	bl	8007f20 <__hi0bits>
 80085c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085c6:	e7df      	b.n	8008588 <__d2b+0x70>
 80085c8:	080099d8 	.word	0x080099d8
 80085cc:	08009a64 	.word	0x08009a64

080085d0 <__ratio>:
 80085d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	4688      	mov	r8, r1
 80085d6:	4669      	mov	r1, sp
 80085d8:	4681      	mov	r9, r0
 80085da:	f7ff ff4d 	bl	8008478 <__b2d>
 80085de:	a901      	add	r1, sp, #4
 80085e0:	4640      	mov	r0, r8
 80085e2:	ec55 4b10 	vmov	r4, r5, d0
 80085e6:	ee10 aa10 	vmov	sl, s0
 80085ea:	f7ff ff45 	bl	8008478 <__b2d>
 80085ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80085f6:	1a59      	subs	r1, r3, r1
 80085f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008602:	ec57 6b10 	vmov	r6, r7, d0
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfd6      	itet	le
 800860a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800860e:	462a      	movgt	r2, r5
 8008610:	463a      	movle	r2, r7
 8008612:	46ab      	mov	fp, r5
 8008614:	bfd6      	itet	le
 8008616:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800861a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800861e:	ee00 3a90 	vmovle	s1, r3
 8008622:	ec4b ab17 	vmov	d7, sl, fp
 8008626:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800862a:	b003      	add	sp, #12
 800862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008630 <__copybits>:
 8008630:	3901      	subs	r1, #1
 8008632:	b570      	push	{r4, r5, r6, lr}
 8008634:	1149      	asrs	r1, r1, #5
 8008636:	6914      	ldr	r4, [r2, #16]
 8008638:	3101      	adds	r1, #1
 800863a:	f102 0314 	add.w	r3, r2, #20
 800863e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008642:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008646:	1f05      	subs	r5, r0, #4
 8008648:	42a3      	cmp	r3, r4
 800864a:	d30c      	bcc.n	8008666 <__copybits+0x36>
 800864c:	1aa3      	subs	r3, r4, r2
 800864e:	3b11      	subs	r3, #17
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	3211      	adds	r2, #17
 8008656:	42a2      	cmp	r2, r4
 8008658:	bf88      	it	hi
 800865a:	2300      	movhi	r3, #0
 800865c:	4418      	add	r0, r3
 800865e:	2300      	movs	r3, #0
 8008660:	4288      	cmp	r0, r1
 8008662:	d305      	bcc.n	8008670 <__copybits+0x40>
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	f853 6b04 	ldr.w	r6, [r3], #4
 800866a:	f845 6f04 	str.w	r6, [r5, #4]!
 800866e:	e7eb      	b.n	8008648 <__copybits+0x18>
 8008670:	f840 3b04 	str.w	r3, [r0], #4
 8008674:	e7f4      	b.n	8008660 <__copybits+0x30>

08008676 <__any_on>:
 8008676:	f100 0214 	add.w	r2, r0, #20
 800867a:	6900      	ldr	r0, [r0, #16]
 800867c:	114b      	asrs	r3, r1, #5
 800867e:	4298      	cmp	r0, r3
 8008680:	b510      	push	{r4, lr}
 8008682:	db11      	blt.n	80086a8 <__any_on+0x32>
 8008684:	dd0a      	ble.n	800869c <__any_on+0x26>
 8008686:	f011 011f 	ands.w	r1, r1, #31
 800868a:	d007      	beq.n	800869c <__any_on+0x26>
 800868c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008690:	fa24 f001 	lsr.w	r0, r4, r1
 8008694:	fa00 f101 	lsl.w	r1, r0, r1
 8008698:	428c      	cmp	r4, r1
 800869a:	d10b      	bne.n	80086b4 <__any_on+0x3e>
 800869c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d803      	bhi.n	80086ac <__any_on+0x36>
 80086a4:	2000      	movs	r0, #0
 80086a6:	bd10      	pop	{r4, pc}
 80086a8:	4603      	mov	r3, r0
 80086aa:	e7f7      	b.n	800869c <__any_on+0x26>
 80086ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086b0:	2900      	cmp	r1, #0
 80086b2:	d0f5      	beq.n	80086a0 <__any_on+0x2a>
 80086b4:	2001      	movs	r0, #1
 80086b6:	e7f6      	b.n	80086a6 <__any_on+0x30>

080086b8 <_calloc_r>:
 80086b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ba:	fba1 2402 	umull	r2, r4, r1, r2
 80086be:	b94c      	cbnz	r4, 80086d4 <_calloc_r+0x1c>
 80086c0:	4611      	mov	r1, r2
 80086c2:	9201      	str	r2, [sp, #4]
 80086c4:	f000 f87a 	bl	80087bc <_malloc_r>
 80086c8:	9a01      	ldr	r2, [sp, #4]
 80086ca:	4605      	mov	r5, r0
 80086cc:	b930      	cbnz	r0, 80086dc <_calloc_r+0x24>
 80086ce:	4628      	mov	r0, r5
 80086d0:	b003      	add	sp, #12
 80086d2:	bd30      	pop	{r4, r5, pc}
 80086d4:	220c      	movs	r2, #12
 80086d6:	6002      	str	r2, [r0, #0]
 80086d8:	2500      	movs	r5, #0
 80086da:	e7f8      	b.n	80086ce <_calloc_r+0x16>
 80086dc:	4621      	mov	r1, r4
 80086de:	f7fc fcc7 	bl	8005070 <memset>
 80086e2:	e7f4      	b.n	80086ce <_calloc_r+0x16>

080086e4 <_free_r>:
 80086e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d044      	beq.n	8008774 <_free_r+0x90>
 80086ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ee:	9001      	str	r0, [sp, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f1a1 0404 	sub.w	r4, r1, #4
 80086f6:	bfb8      	it	lt
 80086f8:	18e4      	addlt	r4, r4, r3
 80086fa:	f000 fab5 	bl	8008c68 <__malloc_lock>
 80086fe:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <_free_r+0x94>)
 8008700:	9801      	ldr	r0, [sp, #4]
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	b933      	cbnz	r3, 8008714 <_free_r+0x30>
 8008706:	6063      	str	r3, [r4, #4]
 8008708:	6014      	str	r4, [r2, #0]
 800870a:	b003      	add	sp, #12
 800870c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008710:	f000 bab0 	b.w	8008c74 <__malloc_unlock>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d908      	bls.n	800872a <_free_r+0x46>
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	1961      	adds	r1, r4, r5
 800871c:	428b      	cmp	r3, r1
 800871e:	bf01      	itttt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	1949      	addeq	r1, r1, r5
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	e7ed      	b.n	8008706 <_free_r+0x22>
 800872a:	461a      	mov	r2, r3
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b10b      	cbz	r3, 8008734 <_free_r+0x50>
 8008730:	42a3      	cmp	r3, r4
 8008732:	d9fa      	bls.n	800872a <_free_r+0x46>
 8008734:	6811      	ldr	r1, [r2, #0]
 8008736:	1855      	adds	r5, r2, r1
 8008738:	42a5      	cmp	r5, r4
 800873a:	d10b      	bne.n	8008754 <_free_r+0x70>
 800873c:	6824      	ldr	r4, [r4, #0]
 800873e:	4421      	add	r1, r4
 8008740:	1854      	adds	r4, r2, r1
 8008742:	42a3      	cmp	r3, r4
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	d1e0      	bne.n	800870a <_free_r+0x26>
 8008748:	681c      	ldr	r4, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	6053      	str	r3, [r2, #4]
 800874e:	4421      	add	r1, r4
 8008750:	6011      	str	r1, [r2, #0]
 8008752:	e7da      	b.n	800870a <_free_r+0x26>
 8008754:	d902      	bls.n	800875c <_free_r+0x78>
 8008756:	230c      	movs	r3, #12
 8008758:	6003      	str	r3, [r0, #0]
 800875a:	e7d6      	b.n	800870a <_free_r+0x26>
 800875c:	6825      	ldr	r5, [r4, #0]
 800875e:	1961      	adds	r1, r4, r5
 8008760:	428b      	cmp	r3, r1
 8008762:	bf04      	itt	eq
 8008764:	6819      	ldreq	r1, [r3, #0]
 8008766:	685b      	ldreq	r3, [r3, #4]
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	bf04      	itt	eq
 800876c:	1949      	addeq	r1, r1, r5
 800876e:	6021      	streq	r1, [r4, #0]
 8008770:	6054      	str	r4, [r2, #4]
 8008772:	e7ca      	b.n	800870a <_free_r+0x26>
 8008774:	b003      	add	sp, #12
 8008776:	bd30      	pop	{r4, r5, pc}
 8008778:	20000438 	.word	0x20000438

0800877c <sbrk_aligned>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4e0e      	ldr	r6, [pc, #56]	; (80087b8 <sbrk_aligned+0x3c>)
 8008780:	460c      	mov	r4, r1
 8008782:	6831      	ldr	r1, [r6, #0]
 8008784:	4605      	mov	r5, r0
 8008786:	b911      	cbnz	r1, 800878e <sbrk_aligned+0x12>
 8008788:	f000 f9f2 	bl	8008b70 <_sbrk_r>
 800878c:	6030      	str	r0, [r6, #0]
 800878e:	4621      	mov	r1, r4
 8008790:	4628      	mov	r0, r5
 8008792:	f000 f9ed 	bl	8008b70 <_sbrk_r>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	d00a      	beq.n	80087b0 <sbrk_aligned+0x34>
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d007      	beq.n	80087b4 <sbrk_aligned+0x38>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f9e2 	bl	8008b70 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d101      	bne.n	80087b4 <sbrk_aligned+0x38>
 80087b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80087b4:	4620      	mov	r0, r4
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	2000043c 	.word	0x2000043c

080087bc <_malloc_r>:
 80087bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c0:	1ccd      	adds	r5, r1, #3
 80087c2:	f025 0503 	bic.w	r5, r5, #3
 80087c6:	3508      	adds	r5, #8
 80087c8:	2d0c      	cmp	r5, #12
 80087ca:	bf38      	it	cc
 80087cc:	250c      	movcc	r5, #12
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	4607      	mov	r7, r0
 80087d2:	db01      	blt.n	80087d8 <_malloc_r+0x1c>
 80087d4:	42a9      	cmp	r1, r5
 80087d6:	d905      	bls.n	80087e4 <_malloc_r+0x28>
 80087d8:	230c      	movs	r3, #12
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	2600      	movs	r6, #0
 80087de:	4630      	mov	r0, r6
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e4:	4e2e      	ldr	r6, [pc, #184]	; (80088a0 <_malloc_r+0xe4>)
 80087e6:	f000 fa3f 	bl	8008c68 <__malloc_lock>
 80087ea:	6833      	ldr	r3, [r6, #0]
 80087ec:	461c      	mov	r4, r3
 80087ee:	bb34      	cbnz	r4, 800883e <_malloc_r+0x82>
 80087f0:	4629      	mov	r1, r5
 80087f2:	4638      	mov	r0, r7
 80087f4:	f7ff ffc2 	bl	800877c <sbrk_aligned>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	4604      	mov	r4, r0
 80087fc:	d14d      	bne.n	800889a <_malloc_r+0xde>
 80087fe:	6834      	ldr	r4, [r6, #0]
 8008800:	4626      	mov	r6, r4
 8008802:	2e00      	cmp	r6, #0
 8008804:	d140      	bne.n	8008888 <_malloc_r+0xcc>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	4631      	mov	r1, r6
 800880a:	4638      	mov	r0, r7
 800880c:	eb04 0803 	add.w	r8, r4, r3
 8008810:	f000 f9ae 	bl	8008b70 <_sbrk_r>
 8008814:	4580      	cmp	r8, r0
 8008816:	d13a      	bne.n	800888e <_malloc_r+0xd2>
 8008818:	6821      	ldr	r1, [r4, #0]
 800881a:	3503      	adds	r5, #3
 800881c:	1a6d      	subs	r5, r5, r1
 800881e:	f025 0503 	bic.w	r5, r5, #3
 8008822:	3508      	adds	r5, #8
 8008824:	2d0c      	cmp	r5, #12
 8008826:	bf38      	it	cc
 8008828:	250c      	movcc	r5, #12
 800882a:	4629      	mov	r1, r5
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff ffa5 	bl	800877c <sbrk_aligned>
 8008832:	3001      	adds	r0, #1
 8008834:	d02b      	beq.n	800888e <_malloc_r+0xd2>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	442b      	add	r3, r5
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	e00e      	b.n	800885c <_malloc_r+0xa0>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	1b52      	subs	r2, r2, r5
 8008842:	d41e      	bmi.n	8008882 <_malloc_r+0xc6>
 8008844:	2a0b      	cmp	r2, #11
 8008846:	d916      	bls.n	8008876 <_malloc_r+0xba>
 8008848:	1961      	adds	r1, r4, r5
 800884a:	42a3      	cmp	r3, r4
 800884c:	6025      	str	r5, [r4, #0]
 800884e:	bf18      	it	ne
 8008850:	6059      	strne	r1, [r3, #4]
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	bf08      	it	eq
 8008856:	6031      	streq	r1, [r6, #0]
 8008858:	5162      	str	r2, [r4, r5]
 800885a:	604b      	str	r3, [r1, #4]
 800885c:	4638      	mov	r0, r7
 800885e:	f104 060b 	add.w	r6, r4, #11
 8008862:	f000 fa07 	bl	8008c74 <__malloc_unlock>
 8008866:	f026 0607 	bic.w	r6, r6, #7
 800886a:	1d23      	adds	r3, r4, #4
 800886c:	1af2      	subs	r2, r6, r3
 800886e:	d0b6      	beq.n	80087de <_malloc_r+0x22>
 8008870:	1b9b      	subs	r3, r3, r6
 8008872:	50a3      	str	r3, [r4, r2]
 8008874:	e7b3      	b.n	80087de <_malloc_r+0x22>
 8008876:	6862      	ldr	r2, [r4, #4]
 8008878:	42a3      	cmp	r3, r4
 800887a:	bf0c      	ite	eq
 800887c:	6032      	streq	r2, [r6, #0]
 800887e:	605a      	strne	r2, [r3, #4]
 8008880:	e7ec      	b.n	800885c <_malloc_r+0xa0>
 8008882:	4623      	mov	r3, r4
 8008884:	6864      	ldr	r4, [r4, #4]
 8008886:	e7b2      	b.n	80087ee <_malloc_r+0x32>
 8008888:	4634      	mov	r4, r6
 800888a:	6876      	ldr	r6, [r6, #4]
 800888c:	e7b9      	b.n	8008802 <_malloc_r+0x46>
 800888e:	230c      	movs	r3, #12
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	4638      	mov	r0, r7
 8008894:	f000 f9ee 	bl	8008c74 <__malloc_unlock>
 8008898:	e7a1      	b.n	80087de <_malloc_r+0x22>
 800889a:	6025      	str	r5, [r4, #0]
 800889c:	e7de      	b.n	800885c <_malloc_r+0xa0>
 800889e:	bf00      	nop
 80088a0:	20000438 	.word	0x20000438

080088a4 <__ssputs_r>:
 80088a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	688e      	ldr	r6, [r1, #8]
 80088aa:	429e      	cmp	r6, r3
 80088ac:	4682      	mov	sl, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	4690      	mov	r8, r2
 80088b2:	461f      	mov	r7, r3
 80088b4:	d838      	bhi.n	8008928 <__ssputs_r+0x84>
 80088b6:	898a      	ldrh	r2, [r1, #12]
 80088b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088bc:	d032      	beq.n	8008924 <__ssputs_r+0x80>
 80088be:	6825      	ldr	r5, [r4, #0]
 80088c0:	6909      	ldr	r1, [r1, #16]
 80088c2:	eba5 0901 	sub.w	r9, r5, r1
 80088c6:	6965      	ldr	r5, [r4, #20]
 80088c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088d0:	3301      	adds	r3, #1
 80088d2:	444b      	add	r3, r9
 80088d4:	106d      	asrs	r5, r5, #1
 80088d6:	429d      	cmp	r5, r3
 80088d8:	bf38      	it	cc
 80088da:	461d      	movcc	r5, r3
 80088dc:	0553      	lsls	r3, r2, #21
 80088de:	d531      	bpl.n	8008944 <__ssputs_r+0xa0>
 80088e0:	4629      	mov	r1, r5
 80088e2:	f7ff ff6b 	bl	80087bc <_malloc_r>
 80088e6:	4606      	mov	r6, r0
 80088e8:	b950      	cbnz	r0, 8008900 <__ssputs_r+0x5c>
 80088ea:	230c      	movs	r3, #12
 80088ec:	f8ca 3000 	str.w	r3, [sl]
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	6921      	ldr	r1, [r4, #16]
 8008902:	464a      	mov	r2, r9
 8008904:	f7ff fa0c 	bl	8007d20 <memcpy>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800890e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	6126      	str	r6, [r4, #16]
 8008916:	6165      	str	r5, [r4, #20]
 8008918:	444e      	add	r6, r9
 800891a:	eba5 0509 	sub.w	r5, r5, r9
 800891e:	6026      	str	r6, [r4, #0]
 8008920:	60a5      	str	r5, [r4, #8]
 8008922:	463e      	mov	r6, r7
 8008924:	42be      	cmp	r6, r7
 8008926:	d900      	bls.n	800892a <__ssputs_r+0x86>
 8008928:	463e      	mov	r6, r7
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	4632      	mov	r2, r6
 800892e:	4641      	mov	r1, r8
 8008930:	f000 f980 	bl	8008c34 <memmove>
 8008934:	68a3      	ldr	r3, [r4, #8]
 8008936:	1b9b      	subs	r3, r3, r6
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4433      	add	r3, r6
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e7db      	b.n	80088fc <__ssputs_r+0x58>
 8008944:	462a      	mov	r2, r5
 8008946:	f000 f99b 	bl	8008c80 <_realloc_r>
 800894a:	4606      	mov	r6, r0
 800894c:	2800      	cmp	r0, #0
 800894e:	d1e1      	bne.n	8008914 <__ssputs_r+0x70>
 8008950:	6921      	ldr	r1, [r4, #16]
 8008952:	4650      	mov	r0, sl
 8008954:	f7ff fec6 	bl	80086e4 <_free_r>
 8008958:	e7c7      	b.n	80088ea <__ssputs_r+0x46>
	...

0800895c <_svfiprintf_r>:
 800895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	4698      	mov	r8, r3
 8008962:	898b      	ldrh	r3, [r1, #12]
 8008964:	061b      	lsls	r3, r3, #24
 8008966:	b09d      	sub	sp, #116	; 0x74
 8008968:	4607      	mov	r7, r0
 800896a:	460d      	mov	r5, r1
 800896c:	4614      	mov	r4, r2
 800896e:	d50e      	bpl.n	800898e <_svfiprintf_r+0x32>
 8008970:	690b      	ldr	r3, [r1, #16]
 8008972:	b963      	cbnz	r3, 800898e <_svfiprintf_r+0x32>
 8008974:	2140      	movs	r1, #64	; 0x40
 8008976:	f7ff ff21 	bl	80087bc <_malloc_r>
 800897a:	6028      	str	r0, [r5, #0]
 800897c:	6128      	str	r0, [r5, #16]
 800897e:	b920      	cbnz	r0, 800898a <_svfiprintf_r+0x2e>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008988:	e0d1      	b.n	8008b2e <_svfiprintf_r+0x1d2>
 800898a:	2340      	movs	r3, #64	; 0x40
 800898c:	616b      	str	r3, [r5, #20]
 800898e:	2300      	movs	r3, #0
 8008990:	9309      	str	r3, [sp, #36]	; 0x24
 8008992:	2320      	movs	r3, #32
 8008994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008998:	f8cd 800c 	str.w	r8, [sp, #12]
 800899c:	2330      	movs	r3, #48	; 0x30
 800899e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b48 <_svfiprintf_r+0x1ec>
 80089a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089a6:	f04f 0901 	mov.w	r9, #1
 80089aa:	4623      	mov	r3, r4
 80089ac:	469a      	mov	sl, r3
 80089ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b2:	b10a      	cbz	r2, 80089b8 <_svfiprintf_r+0x5c>
 80089b4:	2a25      	cmp	r2, #37	; 0x25
 80089b6:	d1f9      	bne.n	80089ac <_svfiprintf_r+0x50>
 80089b8:	ebba 0b04 	subs.w	fp, sl, r4
 80089bc:	d00b      	beq.n	80089d6 <_svfiprintf_r+0x7a>
 80089be:	465b      	mov	r3, fp
 80089c0:	4622      	mov	r2, r4
 80089c2:	4629      	mov	r1, r5
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff ff6d 	bl	80088a4 <__ssputs_r>
 80089ca:	3001      	adds	r0, #1
 80089cc:	f000 80aa 	beq.w	8008b24 <_svfiprintf_r+0x1c8>
 80089d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d2:	445a      	add	r2, fp
 80089d4:	9209      	str	r2, [sp, #36]	; 0x24
 80089d6:	f89a 3000 	ldrb.w	r3, [sl]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 80a2 	beq.w	8008b24 <_svfiprintf_r+0x1c8>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ea:	f10a 0a01 	add.w	sl, sl, #1
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	9307      	str	r3, [sp, #28]
 80089f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089f6:	931a      	str	r3, [sp, #104]	; 0x68
 80089f8:	4654      	mov	r4, sl
 80089fa:	2205      	movs	r2, #5
 80089fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a00:	4851      	ldr	r0, [pc, #324]	; (8008b48 <_svfiprintf_r+0x1ec>)
 8008a02:	f7f7 fc25 	bl	8000250 <memchr>
 8008a06:	9a04      	ldr	r2, [sp, #16]
 8008a08:	b9d8      	cbnz	r0, 8008a42 <_svfiprintf_r+0xe6>
 8008a0a:	06d0      	lsls	r0, r2, #27
 8008a0c:	bf44      	itt	mi
 8008a0e:	2320      	movmi	r3, #32
 8008a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a14:	0711      	lsls	r1, r2, #28
 8008a16:	bf44      	itt	mi
 8008a18:	232b      	movmi	r3, #43	; 0x2b
 8008a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a22:	2b2a      	cmp	r3, #42	; 0x2a
 8008a24:	d015      	beq.n	8008a52 <_svfiprintf_r+0xf6>
 8008a26:	9a07      	ldr	r2, [sp, #28]
 8008a28:	4654      	mov	r4, sl
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f04f 0c0a 	mov.w	ip, #10
 8008a30:	4621      	mov	r1, r4
 8008a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a36:	3b30      	subs	r3, #48	; 0x30
 8008a38:	2b09      	cmp	r3, #9
 8008a3a:	d94e      	bls.n	8008ada <_svfiprintf_r+0x17e>
 8008a3c:	b1b0      	cbz	r0, 8008a6c <_svfiprintf_r+0x110>
 8008a3e:	9207      	str	r2, [sp, #28]
 8008a40:	e014      	b.n	8008a6c <_svfiprintf_r+0x110>
 8008a42:	eba0 0308 	sub.w	r3, r0, r8
 8008a46:	fa09 f303 	lsl.w	r3, r9, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	46a2      	mov	sl, r4
 8008a50:	e7d2      	b.n	80089f8 <_svfiprintf_r+0x9c>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	1d19      	adds	r1, r3, #4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	9103      	str	r1, [sp, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfbb      	ittet	lt
 8008a5e:	425b      	neglt	r3, r3
 8008a60:	f042 0202 	orrlt.w	r2, r2, #2
 8008a64:	9307      	strge	r3, [sp, #28]
 8008a66:	9307      	strlt	r3, [sp, #28]
 8008a68:	bfb8      	it	lt
 8008a6a:	9204      	strlt	r2, [sp, #16]
 8008a6c:	7823      	ldrb	r3, [r4, #0]
 8008a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a70:	d10c      	bne.n	8008a8c <_svfiprintf_r+0x130>
 8008a72:	7863      	ldrb	r3, [r4, #1]
 8008a74:	2b2a      	cmp	r3, #42	; 0x2a
 8008a76:	d135      	bne.n	8008ae4 <_svfiprintf_r+0x188>
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	1d1a      	adds	r2, r3, #4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	9203      	str	r2, [sp, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	bfb8      	it	lt
 8008a84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a88:	3402      	adds	r4, #2
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b58 <_svfiprintf_r+0x1fc>
 8008a90:	7821      	ldrb	r1, [r4, #0]
 8008a92:	2203      	movs	r2, #3
 8008a94:	4650      	mov	r0, sl
 8008a96:	f7f7 fbdb 	bl	8000250 <memchr>
 8008a9a:	b140      	cbz	r0, 8008aae <_svfiprintf_r+0x152>
 8008a9c:	2340      	movs	r3, #64	; 0x40
 8008a9e:	eba0 000a 	sub.w	r0, r0, sl
 8008aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8008aa6:	9b04      	ldr	r3, [sp, #16]
 8008aa8:	4303      	orrs	r3, r0
 8008aaa:	3401      	adds	r4, #1
 8008aac:	9304      	str	r3, [sp, #16]
 8008aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab2:	4826      	ldr	r0, [pc, #152]	; (8008b4c <_svfiprintf_r+0x1f0>)
 8008ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ab8:	2206      	movs	r2, #6
 8008aba:	f7f7 fbc9 	bl	8000250 <memchr>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d038      	beq.n	8008b34 <_svfiprintf_r+0x1d8>
 8008ac2:	4b23      	ldr	r3, [pc, #140]	; (8008b50 <_svfiprintf_r+0x1f4>)
 8008ac4:	bb1b      	cbnz	r3, 8008b0e <_svfiprintf_r+0x1b2>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	3307      	adds	r3, #7
 8008aca:	f023 0307 	bic.w	r3, r3, #7
 8008ace:	3308      	adds	r3, #8
 8008ad0:	9303      	str	r3, [sp, #12]
 8008ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad4:	4433      	add	r3, r6
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	e767      	b.n	80089aa <_svfiprintf_r+0x4e>
 8008ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ade:	460c      	mov	r4, r1
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	e7a5      	b.n	8008a30 <_svfiprintf_r+0xd4>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	3401      	adds	r4, #1
 8008ae8:	9305      	str	r3, [sp, #20]
 8008aea:	4619      	mov	r1, r3
 8008aec:	f04f 0c0a 	mov.w	ip, #10
 8008af0:	4620      	mov	r0, r4
 8008af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af6:	3a30      	subs	r2, #48	; 0x30
 8008af8:	2a09      	cmp	r2, #9
 8008afa:	d903      	bls.n	8008b04 <_svfiprintf_r+0x1a8>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0c5      	beq.n	8008a8c <_svfiprintf_r+0x130>
 8008b00:	9105      	str	r1, [sp, #20]
 8008b02:	e7c3      	b.n	8008a8c <_svfiprintf_r+0x130>
 8008b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b08:	4604      	mov	r4, r0
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e7f0      	b.n	8008af0 <_svfiprintf_r+0x194>
 8008b0e:	ab03      	add	r3, sp, #12
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	462a      	mov	r2, r5
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <_svfiprintf_r+0x1f8>)
 8008b16:	a904      	add	r1, sp, #16
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7fc fb41 	bl	80051a0 <_printf_float>
 8008b1e:	1c42      	adds	r2, r0, #1
 8008b20:	4606      	mov	r6, r0
 8008b22:	d1d6      	bne.n	8008ad2 <_svfiprintf_r+0x176>
 8008b24:	89ab      	ldrh	r3, [r5, #12]
 8008b26:	065b      	lsls	r3, r3, #25
 8008b28:	f53f af2c 	bmi.w	8008984 <_svfiprintf_r+0x28>
 8008b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b2e:	b01d      	add	sp, #116	; 0x74
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	ab03      	add	r3, sp, #12
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	462a      	mov	r2, r5
 8008b3a:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <_svfiprintf_r+0x1f8>)
 8008b3c:	a904      	add	r1, sp, #16
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f7fc fdba 	bl	80056b8 <_printf_i>
 8008b44:	e7eb      	b.n	8008b1e <_svfiprintf_r+0x1c2>
 8008b46:	bf00      	nop
 8008b48:	08009bbc 	.word	0x08009bbc
 8008b4c:	08009bc6 	.word	0x08009bc6
 8008b50:	080051a1 	.word	0x080051a1
 8008b54:	080088a5 	.word	0x080088a5
 8008b58:	08009bc2 	.word	0x08009bc2
 8008b5c:	00000000 	.word	0x00000000

08008b60 <nan>:
 8008b60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b68 <nan+0x8>
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	00000000 	.word	0x00000000
 8008b6c:	7ff80000 	.word	0x7ff80000

08008b70 <_sbrk_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	; (8008b8c <_sbrk_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f8 fe3e 	bl	80017fc <_sbrk>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_sbrk_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_sbrk_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000440 	.word	0x20000440

08008b90 <strncmp>:
 8008b90:	b510      	push	{r4, lr}
 8008b92:	b17a      	cbz	r2, 8008bb4 <strncmp+0x24>
 8008b94:	4603      	mov	r3, r0
 8008b96:	3901      	subs	r1, #1
 8008b98:	1884      	adds	r4, r0, r2
 8008b9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ba2:	4290      	cmp	r0, r2
 8008ba4:	d101      	bne.n	8008baa <strncmp+0x1a>
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	d101      	bne.n	8008bae <strncmp+0x1e>
 8008baa:	1a80      	subs	r0, r0, r2
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d1f3      	bne.n	8008b9a <strncmp+0xa>
 8008bb2:	e7fa      	b.n	8008baa <strncmp+0x1a>
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	e7f9      	b.n	8008bac <strncmp+0x1c>

08008bb8 <__ascii_wctomb>:
 8008bb8:	b149      	cbz	r1, 8008bce <__ascii_wctomb+0x16>
 8008bba:	2aff      	cmp	r2, #255	; 0xff
 8008bbc:	bf85      	ittet	hi
 8008bbe:	238a      	movhi	r3, #138	; 0x8a
 8008bc0:	6003      	strhi	r3, [r0, #0]
 8008bc2:	700a      	strbls	r2, [r1, #0]
 8008bc4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008bc8:	bf98      	it	ls
 8008bca:	2001      	movls	r0, #1
 8008bcc:	4770      	bx	lr
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4770      	bx	lr
	...

08008bd4 <__assert_func>:
 8008bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <__assert_func+0x2c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4605      	mov	r5, r0
 8008be0:	68d8      	ldr	r0, [r3, #12]
 8008be2:	b14c      	cbz	r4, 8008bf8 <__assert_func+0x24>
 8008be4:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <__assert_func+0x30>)
 8008be6:	9100      	str	r1, [sp, #0]
 8008be8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bec:	4906      	ldr	r1, [pc, #24]	; (8008c08 <__assert_func+0x34>)
 8008bee:	462b      	mov	r3, r5
 8008bf0:	f000 f80e 	bl	8008c10 <fiprintf>
 8008bf4:	f000 fa8c 	bl	8009110 <abort>
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__assert_func+0x38>)
 8008bfa:	461c      	mov	r4, r3
 8008bfc:	e7f3      	b.n	8008be6 <__assert_func+0x12>
 8008bfe:	bf00      	nop
 8008c00:	2000000c 	.word	0x2000000c
 8008c04:	08009bcd 	.word	0x08009bcd
 8008c08:	08009bda 	.word	0x08009bda
 8008c0c:	08009c08 	.word	0x08009c08

08008c10 <fiprintf>:
 8008c10:	b40e      	push	{r1, r2, r3}
 8008c12:	b503      	push	{r0, r1, lr}
 8008c14:	4601      	mov	r1, r0
 8008c16:	ab03      	add	r3, sp, #12
 8008c18:	4805      	ldr	r0, [pc, #20]	; (8008c30 <fiprintf+0x20>)
 8008c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	f000 f885 	bl	8008d30 <_vfiprintf_r>
 8008c26:	b002      	add	sp, #8
 8008c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c2c:	b003      	add	sp, #12
 8008c2e:	4770      	bx	lr
 8008c30:	2000000c 	.word	0x2000000c

08008c34 <memmove>:
 8008c34:	4288      	cmp	r0, r1
 8008c36:	b510      	push	{r4, lr}
 8008c38:	eb01 0402 	add.w	r4, r1, r2
 8008c3c:	d902      	bls.n	8008c44 <memmove+0x10>
 8008c3e:	4284      	cmp	r4, r0
 8008c40:	4623      	mov	r3, r4
 8008c42:	d807      	bhi.n	8008c54 <memmove+0x20>
 8008c44:	1e43      	subs	r3, r0, #1
 8008c46:	42a1      	cmp	r1, r4
 8008c48:	d008      	beq.n	8008c5c <memmove+0x28>
 8008c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c52:	e7f8      	b.n	8008c46 <memmove+0x12>
 8008c54:	4402      	add	r2, r0
 8008c56:	4601      	mov	r1, r0
 8008c58:	428a      	cmp	r2, r1
 8008c5a:	d100      	bne.n	8008c5e <memmove+0x2a>
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c66:	e7f7      	b.n	8008c58 <memmove+0x24>

08008c68 <__malloc_lock>:
 8008c68:	4801      	ldr	r0, [pc, #4]	; (8008c70 <__malloc_lock+0x8>)
 8008c6a:	f000 bc11 	b.w	8009490 <__retarget_lock_acquire_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20000444 	.word	0x20000444

08008c74 <__malloc_unlock>:
 8008c74:	4801      	ldr	r0, [pc, #4]	; (8008c7c <__malloc_unlock+0x8>)
 8008c76:	f000 bc0c 	b.w	8009492 <__retarget_lock_release_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	20000444 	.word	0x20000444

08008c80 <_realloc_r>:
 8008c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c84:	4680      	mov	r8, r0
 8008c86:	4614      	mov	r4, r2
 8008c88:	460e      	mov	r6, r1
 8008c8a:	b921      	cbnz	r1, 8008c96 <_realloc_r+0x16>
 8008c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	4611      	mov	r1, r2
 8008c92:	f7ff bd93 	b.w	80087bc <_malloc_r>
 8008c96:	b92a      	cbnz	r2, 8008ca4 <_realloc_r+0x24>
 8008c98:	f7ff fd24 	bl	80086e4 <_free_r>
 8008c9c:	4625      	mov	r5, r4
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca4:	f000 fc5c 	bl	8009560 <_malloc_usable_size_r>
 8008ca8:	4284      	cmp	r4, r0
 8008caa:	4607      	mov	r7, r0
 8008cac:	d802      	bhi.n	8008cb4 <_realloc_r+0x34>
 8008cae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cb2:	d812      	bhi.n	8008cda <_realloc_r+0x5a>
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	f7ff fd80 	bl	80087bc <_malloc_r>
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d0ed      	beq.n	8008c9e <_realloc_r+0x1e>
 8008cc2:	42bc      	cmp	r4, r7
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	bf28      	it	cs
 8008cca:	463a      	movcs	r2, r7
 8008ccc:	f7ff f828 	bl	8007d20 <memcpy>
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	f7ff fd06 	bl	80086e4 <_free_r>
 8008cd8:	e7e1      	b.n	8008c9e <_realloc_r+0x1e>
 8008cda:	4635      	mov	r5, r6
 8008cdc:	e7df      	b.n	8008c9e <_realloc_r+0x1e>

08008cde <__sfputc_r>:
 8008cde:	6893      	ldr	r3, [r2, #8]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	b410      	push	{r4}
 8008ce6:	6093      	str	r3, [r2, #8]
 8008ce8:	da08      	bge.n	8008cfc <__sfputc_r+0x1e>
 8008cea:	6994      	ldr	r4, [r2, #24]
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	db01      	blt.n	8008cf4 <__sfputc_r+0x16>
 8008cf0:	290a      	cmp	r1, #10
 8008cf2:	d103      	bne.n	8008cfc <__sfputc_r+0x1e>
 8008cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf8:	f000 b94a 	b.w	8008f90 <__swbuf_r>
 8008cfc:	6813      	ldr	r3, [r2, #0]
 8008cfe:	1c58      	adds	r0, r3, #1
 8008d00:	6010      	str	r0, [r2, #0]
 8008d02:	7019      	strb	r1, [r3, #0]
 8008d04:	4608      	mov	r0, r1
 8008d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <__sfputs_r>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	4614      	mov	r4, r2
 8008d14:	18d5      	adds	r5, r2, r3
 8008d16:	42ac      	cmp	r4, r5
 8008d18:	d101      	bne.n	8008d1e <__sfputs_r+0x12>
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	e007      	b.n	8008d2e <__sfputs_r+0x22>
 8008d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d22:	463a      	mov	r2, r7
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff ffda 	bl	8008cde <__sfputc_r>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d1f3      	bne.n	8008d16 <__sfputs_r+0xa>
 8008d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d30 <_vfiprintf_r>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	460d      	mov	r5, r1
 8008d36:	b09d      	sub	sp, #116	; 0x74
 8008d38:	4614      	mov	r4, r2
 8008d3a:	4698      	mov	r8, r3
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	b118      	cbz	r0, 8008d48 <_vfiprintf_r+0x18>
 8008d40:	6983      	ldr	r3, [r0, #24]
 8008d42:	b90b      	cbnz	r3, 8008d48 <_vfiprintf_r+0x18>
 8008d44:	f000 fb06 	bl	8009354 <__sinit>
 8008d48:	4b89      	ldr	r3, [pc, #548]	; (8008f70 <_vfiprintf_r+0x240>)
 8008d4a:	429d      	cmp	r5, r3
 8008d4c:	d11b      	bne.n	8008d86 <_vfiprintf_r+0x56>
 8008d4e:	6875      	ldr	r5, [r6, #4]
 8008d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d52:	07d9      	lsls	r1, r3, #31
 8008d54:	d405      	bmi.n	8008d62 <_vfiprintf_r+0x32>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	059a      	lsls	r2, r3, #22
 8008d5a:	d402      	bmi.n	8008d62 <_vfiprintf_r+0x32>
 8008d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d5e:	f000 fb97 	bl	8009490 <__retarget_lock_acquire_recursive>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	071b      	lsls	r3, r3, #28
 8008d66:	d501      	bpl.n	8008d6c <_vfiprintf_r+0x3c>
 8008d68:	692b      	ldr	r3, [r5, #16]
 8008d6a:	b9eb      	cbnz	r3, 8008da8 <_vfiprintf_r+0x78>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f960 	bl	8009034 <__swsetup_r>
 8008d74:	b1c0      	cbz	r0, 8008da8 <_vfiprintf_r+0x78>
 8008d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d78:	07dc      	lsls	r4, r3, #31
 8008d7a:	d50e      	bpl.n	8008d9a <_vfiprintf_r+0x6a>
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d80:	b01d      	add	sp, #116	; 0x74
 8008d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d86:	4b7b      	ldr	r3, [pc, #492]	; (8008f74 <_vfiprintf_r+0x244>)
 8008d88:	429d      	cmp	r5, r3
 8008d8a:	d101      	bne.n	8008d90 <_vfiprintf_r+0x60>
 8008d8c:	68b5      	ldr	r5, [r6, #8]
 8008d8e:	e7df      	b.n	8008d50 <_vfiprintf_r+0x20>
 8008d90:	4b79      	ldr	r3, [pc, #484]	; (8008f78 <_vfiprintf_r+0x248>)
 8008d92:	429d      	cmp	r5, r3
 8008d94:	bf08      	it	eq
 8008d96:	68f5      	ldreq	r5, [r6, #12]
 8008d98:	e7da      	b.n	8008d50 <_vfiprintf_r+0x20>
 8008d9a:	89ab      	ldrh	r3, [r5, #12]
 8008d9c:	0598      	lsls	r0, r3, #22
 8008d9e:	d4ed      	bmi.n	8008d7c <_vfiprintf_r+0x4c>
 8008da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008da2:	f000 fb76 	bl	8009492 <__retarget_lock_release_recursive>
 8008da6:	e7e9      	b.n	8008d7c <_vfiprintf_r+0x4c>
 8008da8:	2300      	movs	r3, #0
 8008daa:	9309      	str	r3, [sp, #36]	; 0x24
 8008dac:	2320      	movs	r3, #32
 8008dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db6:	2330      	movs	r3, #48	; 0x30
 8008db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f7c <_vfiprintf_r+0x24c>
 8008dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dc0:	f04f 0901 	mov.w	r9, #1
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	469a      	mov	sl, r3
 8008dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dcc:	b10a      	cbz	r2, 8008dd2 <_vfiprintf_r+0xa2>
 8008dce:	2a25      	cmp	r2, #37	; 0x25
 8008dd0:	d1f9      	bne.n	8008dc6 <_vfiprintf_r+0x96>
 8008dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd6:	d00b      	beq.n	8008df0 <_vfiprintf_r+0xc0>
 8008dd8:	465b      	mov	r3, fp
 8008dda:	4622      	mov	r2, r4
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7ff ff94 	bl	8008d0c <__sfputs_r>
 8008de4:	3001      	adds	r0, #1
 8008de6:	f000 80aa 	beq.w	8008f3e <_vfiprintf_r+0x20e>
 8008dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dec:	445a      	add	r2, fp
 8008dee:	9209      	str	r2, [sp, #36]	; 0x24
 8008df0:	f89a 3000 	ldrb.w	r3, [sl]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 80a2 	beq.w	8008f3e <_vfiprintf_r+0x20e>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e04:	f10a 0a01 	add.w	sl, sl, #1
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e10:	931a      	str	r3, [sp, #104]	; 0x68
 8008e12:	4654      	mov	r4, sl
 8008e14:	2205      	movs	r2, #5
 8008e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1a:	4858      	ldr	r0, [pc, #352]	; (8008f7c <_vfiprintf_r+0x24c>)
 8008e1c:	f7f7 fa18 	bl	8000250 <memchr>
 8008e20:	9a04      	ldr	r2, [sp, #16]
 8008e22:	b9d8      	cbnz	r0, 8008e5c <_vfiprintf_r+0x12c>
 8008e24:	06d1      	lsls	r1, r2, #27
 8008e26:	bf44      	itt	mi
 8008e28:	2320      	movmi	r3, #32
 8008e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e2e:	0713      	lsls	r3, r2, #28
 8008e30:	bf44      	itt	mi
 8008e32:	232b      	movmi	r3, #43	; 0x2b
 8008e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e38:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e3e:	d015      	beq.n	8008e6c <_vfiprintf_r+0x13c>
 8008e40:	9a07      	ldr	r2, [sp, #28]
 8008e42:	4654      	mov	r4, sl
 8008e44:	2000      	movs	r0, #0
 8008e46:	f04f 0c0a 	mov.w	ip, #10
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e50:	3b30      	subs	r3, #48	; 0x30
 8008e52:	2b09      	cmp	r3, #9
 8008e54:	d94e      	bls.n	8008ef4 <_vfiprintf_r+0x1c4>
 8008e56:	b1b0      	cbz	r0, 8008e86 <_vfiprintf_r+0x156>
 8008e58:	9207      	str	r2, [sp, #28]
 8008e5a:	e014      	b.n	8008e86 <_vfiprintf_r+0x156>
 8008e5c:	eba0 0308 	sub.w	r3, r0, r8
 8008e60:	fa09 f303 	lsl.w	r3, r9, r3
 8008e64:	4313      	orrs	r3, r2
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	46a2      	mov	sl, r4
 8008e6a:	e7d2      	b.n	8008e12 <_vfiprintf_r+0xe2>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	1d19      	adds	r1, r3, #4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	9103      	str	r1, [sp, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bfbb      	ittet	lt
 8008e78:	425b      	neglt	r3, r3
 8008e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e7e:	9307      	strge	r3, [sp, #28]
 8008e80:	9307      	strlt	r3, [sp, #28]
 8008e82:	bfb8      	it	lt
 8008e84:	9204      	strlt	r2, [sp, #16]
 8008e86:	7823      	ldrb	r3, [r4, #0]
 8008e88:	2b2e      	cmp	r3, #46	; 0x2e
 8008e8a:	d10c      	bne.n	8008ea6 <_vfiprintf_r+0x176>
 8008e8c:	7863      	ldrb	r3, [r4, #1]
 8008e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e90:	d135      	bne.n	8008efe <_vfiprintf_r+0x1ce>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	1d1a      	adds	r2, r3, #4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	9203      	str	r2, [sp, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bfb8      	it	lt
 8008e9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ea2:	3402      	adds	r4, #2
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f8c <_vfiprintf_r+0x25c>
 8008eaa:	7821      	ldrb	r1, [r4, #0]
 8008eac:	2203      	movs	r2, #3
 8008eae:	4650      	mov	r0, sl
 8008eb0:	f7f7 f9ce 	bl	8000250 <memchr>
 8008eb4:	b140      	cbz	r0, 8008ec8 <_vfiprintf_r+0x198>
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	eba0 000a 	sub.w	r0, r0, sl
 8008ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8008ec0:	9b04      	ldr	r3, [sp, #16]
 8008ec2:	4303      	orrs	r3, r0
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ecc:	482c      	ldr	r0, [pc, #176]	; (8008f80 <_vfiprintf_r+0x250>)
 8008ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	f7f7 f9bc 	bl	8000250 <memchr>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d03f      	beq.n	8008f5c <_vfiprintf_r+0x22c>
 8008edc:	4b29      	ldr	r3, [pc, #164]	; (8008f84 <_vfiprintf_r+0x254>)
 8008ede:	bb1b      	cbnz	r3, 8008f28 <_vfiprintf_r+0x1f8>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	3307      	adds	r3, #7
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	3308      	adds	r3, #8
 8008eea:	9303      	str	r3, [sp, #12]
 8008eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eee:	443b      	add	r3, r7
 8008ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef2:	e767      	b.n	8008dc4 <_vfiprintf_r+0x94>
 8008ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef8:	460c      	mov	r4, r1
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7a5      	b.n	8008e4a <_vfiprintf_r+0x11a>
 8008efe:	2300      	movs	r3, #0
 8008f00:	3401      	adds	r4, #1
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 0c0a 	mov.w	ip, #10
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f10:	3a30      	subs	r2, #48	; 0x30
 8008f12:	2a09      	cmp	r2, #9
 8008f14:	d903      	bls.n	8008f1e <_vfiprintf_r+0x1ee>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0c5      	beq.n	8008ea6 <_vfiprintf_r+0x176>
 8008f1a:	9105      	str	r1, [sp, #20]
 8008f1c:	e7c3      	b.n	8008ea6 <_vfiprintf_r+0x176>
 8008f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f22:	4604      	mov	r4, r0
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7f0      	b.n	8008f0a <_vfiprintf_r+0x1da>
 8008f28:	ab03      	add	r3, sp, #12
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	4b16      	ldr	r3, [pc, #88]	; (8008f88 <_vfiprintf_r+0x258>)
 8008f30:	a904      	add	r1, sp, #16
 8008f32:	4630      	mov	r0, r6
 8008f34:	f7fc f934 	bl	80051a0 <_printf_float>
 8008f38:	4607      	mov	r7, r0
 8008f3a:	1c78      	adds	r0, r7, #1
 8008f3c:	d1d6      	bne.n	8008eec <_vfiprintf_r+0x1bc>
 8008f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f40:	07d9      	lsls	r1, r3, #31
 8008f42:	d405      	bmi.n	8008f50 <_vfiprintf_r+0x220>
 8008f44:	89ab      	ldrh	r3, [r5, #12]
 8008f46:	059a      	lsls	r2, r3, #22
 8008f48:	d402      	bmi.n	8008f50 <_vfiprintf_r+0x220>
 8008f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f4c:	f000 faa1 	bl	8009492 <__retarget_lock_release_recursive>
 8008f50:	89ab      	ldrh	r3, [r5, #12]
 8008f52:	065b      	lsls	r3, r3, #25
 8008f54:	f53f af12 	bmi.w	8008d7c <_vfiprintf_r+0x4c>
 8008f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f5a:	e711      	b.n	8008d80 <_vfiprintf_r+0x50>
 8008f5c:	ab03      	add	r3, sp, #12
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	462a      	mov	r2, r5
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <_vfiprintf_r+0x258>)
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	4630      	mov	r0, r6
 8008f68:	f7fc fba6 	bl	80056b8 <_printf_i>
 8008f6c:	e7e4      	b.n	8008f38 <_vfiprintf_r+0x208>
 8008f6e:	bf00      	nop
 8008f70:	08009c2c 	.word	0x08009c2c
 8008f74:	08009c4c 	.word	0x08009c4c
 8008f78:	08009c0c 	.word	0x08009c0c
 8008f7c:	08009bbc 	.word	0x08009bbc
 8008f80:	08009bc6 	.word	0x08009bc6
 8008f84:	080051a1 	.word	0x080051a1
 8008f88:	08008d0d 	.word	0x08008d0d
 8008f8c:	08009bc2 	.word	0x08009bc2

08008f90 <__swbuf_r>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	460e      	mov	r6, r1
 8008f94:	4614      	mov	r4, r2
 8008f96:	4605      	mov	r5, r0
 8008f98:	b118      	cbz	r0, 8008fa2 <__swbuf_r+0x12>
 8008f9a:	6983      	ldr	r3, [r0, #24]
 8008f9c:	b90b      	cbnz	r3, 8008fa2 <__swbuf_r+0x12>
 8008f9e:	f000 f9d9 	bl	8009354 <__sinit>
 8008fa2:	4b21      	ldr	r3, [pc, #132]	; (8009028 <__swbuf_r+0x98>)
 8008fa4:	429c      	cmp	r4, r3
 8008fa6:	d12b      	bne.n	8009000 <__swbuf_r+0x70>
 8008fa8:	686c      	ldr	r4, [r5, #4]
 8008faa:	69a3      	ldr	r3, [r4, #24]
 8008fac:	60a3      	str	r3, [r4, #8]
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	071a      	lsls	r2, r3, #28
 8008fb2:	d52f      	bpl.n	8009014 <__swbuf_r+0x84>
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	b36b      	cbz	r3, 8009014 <__swbuf_r+0x84>
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	6820      	ldr	r0, [r4, #0]
 8008fbc:	1ac0      	subs	r0, r0, r3
 8008fbe:	6963      	ldr	r3, [r4, #20]
 8008fc0:	b2f6      	uxtb	r6, r6
 8008fc2:	4283      	cmp	r3, r0
 8008fc4:	4637      	mov	r7, r6
 8008fc6:	dc04      	bgt.n	8008fd2 <__swbuf_r+0x42>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 f92e 	bl	800922c <_fflush_r>
 8008fd0:	bb30      	cbnz	r0, 8009020 <__swbuf_r+0x90>
 8008fd2:	68a3      	ldr	r3, [r4, #8]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	60a3      	str	r3, [r4, #8]
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	6022      	str	r2, [r4, #0]
 8008fde:	701e      	strb	r6, [r3, #0]
 8008fe0:	6963      	ldr	r3, [r4, #20]
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	4283      	cmp	r3, r0
 8008fe6:	d004      	beq.n	8008ff2 <__swbuf_r+0x62>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	07db      	lsls	r3, r3, #31
 8008fec:	d506      	bpl.n	8008ffc <__swbuf_r+0x6c>
 8008fee:	2e0a      	cmp	r6, #10
 8008ff0:	d104      	bne.n	8008ffc <__swbuf_r+0x6c>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f000 f919 	bl	800922c <_fflush_r>
 8008ffa:	b988      	cbnz	r0, 8009020 <__swbuf_r+0x90>
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <__swbuf_r+0x9c>)
 8009002:	429c      	cmp	r4, r3
 8009004:	d101      	bne.n	800900a <__swbuf_r+0x7a>
 8009006:	68ac      	ldr	r4, [r5, #8]
 8009008:	e7cf      	b.n	8008faa <__swbuf_r+0x1a>
 800900a:	4b09      	ldr	r3, [pc, #36]	; (8009030 <__swbuf_r+0xa0>)
 800900c:	429c      	cmp	r4, r3
 800900e:	bf08      	it	eq
 8009010:	68ec      	ldreq	r4, [r5, #12]
 8009012:	e7ca      	b.n	8008faa <__swbuf_r+0x1a>
 8009014:	4621      	mov	r1, r4
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f80c 	bl	8009034 <__swsetup_r>
 800901c:	2800      	cmp	r0, #0
 800901e:	d0cb      	beq.n	8008fb8 <__swbuf_r+0x28>
 8009020:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009024:	e7ea      	b.n	8008ffc <__swbuf_r+0x6c>
 8009026:	bf00      	nop
 8009028:	08009c2c 	.word	0x08009c2c
 800902c:	08009c4c 	.word	0x08009c4c
 8009030:	08009c0c 	.word	0x08009c0c

08009034 <__swsetup_r>:
 8009034:	4b32      	ldr	r3, [pc, #200]	; (8009100 <__swsetup_r+0xcc>)
 8009036:	b570      	push	{r4, r5, r6, lr}
 8009038:	681d      	ldr	r5, [r3, #0]
 800903a:	4606      	mov	r6, r0
 800903c:	460c      	mov	r4, r1
 800903e:	b125      	cbz	r5, 800904a <__swsetup_r+0x16>
 8009040:	69ab      	ldr	r3, [r5, #24]
 8009042:	b913      	cbnz	r3, 800904a <__swsetup_r+0x16>
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f985 	bl	8009354 <__sinit>
 800904a:	4b2e      	ldr	r3, [pc, #184]	; (8009104 <__swsetup_r+0xd0>)
 800904c:	429c      	cmp	r4, r3
 800904e:	d10f      	bne.n	8009070 <__swsetup_r+0x3c>
 8009050:	686c      	ldr	r4, [r5, #4]
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009058:	0719      	lsls	r1, r3, #28
 800905a:	d42c      	bmi.n	80090b6 <__swsetup_r+0x82>
 800905c:	06dd      	lsls	r5, r3, #27
 800905e:	d411      	bmi.n	8009084 <__swsetup_r+0x50>
 8009060:	2309      	movs	r3, #9
 8009062:	6033      	str	r3, [r6, #0]
 8009064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800906e:	e03e      	b.n	80090ee <__swsetup_r+0xba>
 8009070:	4b25      	ldr	r3, [pc, #148]	; (8009108 <__swsetup_r+0xd4>)
 8009072:	429c      	cmp	r4, r3
 8009074:	d101      	bne.n	800907a <__swsetup_r+0x46>
 8009076:	68ac      	ldr	r4, [r5, #8]
 8009078:	e7eb      	b.n	8009052 <__swsetup_r+0x1e>
 800907a:	4b24      	ldr	r3, [pc, #144]	; (800910c <__swsetup_r+0xd8>)
 800907c:	429c      	cmp	r4, r3
 800907e:	bf08      	it	eq
 8009080:	68ec      	ldreq	r4, [r5, #12]
 8009082:	e7e6      	b.n	8009052 <__swsetup_r+0x1e>
 8009084:	0758      	lsls	r0, r3, #29
 8009086:	d512      	bpl.n	80090ae <__swsetup_r+0x7a>
 8009088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800908a:	b141      	cbz	r1, 800909e <__swsetup_r+0x6a>
 800908c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009090:	4299      	cmp	r1, r3
 8009092:	d002      	beq.n	800909a <__swsetup_r+0x66>
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fb25 	bl	80086e4 <_free_r>
 800909a:	2300      	movs	r3, #0
 800909c:	6363      	str	r3, [r4, #52]	; 0x34
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	2300      	movs	r3, #0
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f043 0308 	orr.w	r3, r3, #8
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	b94b      	cbnz	r3, 80090ce <__swsetup_r+0x9a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c4:	d003      	beq.n	80090ce <__swsetup_r+0x9a>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 fa09 	bl	80094e0 <__smakebuf_r>
 80090ce:	89a0      	ldrh	r0, [r4, #12]
 80090d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090d4:	f010 0301 	ands.w	r3, r0, #1
 80090d8:	d00a      	beq.n	80090f0 <__swsetup_r+0xbc>
 80090da:	2300      	movs	r3, #0
 80090dc:	60a3      	str	r3, [r4, #8]
 80090de:	6963      	ldr	r3, [r4, #20]
 80090e0:	425b      	negs	r3, r3
 80090e2:	61a3      	str	r3, [r4, #24]
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	b943      	cbnz	r3, 80090fa <__swsetup_r+0xc6>
 80090e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090ec:	d1ba      	bne.n	8009064 <__swsetup_r+0x30>
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	0781      	lsls	r1, r0, #30
 80090f2:	bf58      	it	pl
 80090f4:	6963      	ldrpl	r3, [r4, #20]
 80090f6:	60a3      	str	r3, [r4, #8]
 80090f8:	e7f4      	b.n	80090e4 <__swsetup_r+0xb0>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e7f7      	b.n	80090ee <__swsetup_r+0xba>
 80090fe:	bf00      	nop
 8009100:	2000000c 	.word	0x2000000c
 8009104:	08009c2c 	.word	0x08009c2c
 8009108:	08009c4c 	.word	0x08009c4c
 800910c:	08009c0c 	.word	0x08009c0c

08009110 <abort>:
 8009110:	b508      	push	{r3, lr}
 8009112:	2006      	movs	r0, #6
 8009114:	f000 fa54 	bl	80095c0 <raise>
 8009118:	2001      	movs	r0, #1
 800911a:	f7f8 faf7 	bl	800170c <_exit>
	...

08009120 <__sflush_r>:
 8009120:	898a      	ldrh	r2, [r1, #12]
 8009122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009126:	4605      	mov	r5, r0
 8009128:	0710      	lsls	r0, r2, #28
 800912a:	460c      	mov	r4, r1
 800912c:	d458      	bmi.n	80091e0 <__sflush_r+0xc0>
 800912e:	684b      	ldr	r3, [r1, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc05      	bgt.n	8009140 <__sflush_r+0x20>
 8009134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	dc02      	bgt.n	8009140 <__sflush_r+0x20>
 800913a:	2000      	movs	r0, #0
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009142:	2e00      	cmp	r6, #0
 8009144:	d0f9      	beq.n	800913a <__sflush_r+0x1a>
 8009146:	2300      	movs	r3, #0
 8009148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800914c:	682f      	ldr	r7, [r5, #0]
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	d032      	beq.n	80091b8 <__sflush_r+0x98>
 8009152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	075a      	lsls	r2, r3, #29
 8009158:	d505      	bpl.n	8009166 <__sflush_r+0x46>
 800915a:	6863      	ldr	r3, [r4, #4]
 800915c:	1ac0      	subs	r0, r0, r3
 800915e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009160:	b10b      	cbz	r3, 8009166 <__sflush_r+0x46>
 8009162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009164:	1ac0      	subs	r0, r0, r3
 8009166:	2300      	movs	r3, #0
 8009168:	4602      	mov	r2, r0
 800916a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916c:	6a21      	ldr	r1, [r4, #32]
 800916e:	4628      	mov	r0, r5
 8009170:	47b0      	blx	r6
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	d106      	bne.n	8009186 <__sflush_r+0x66>
 8009178:	6829      	ldr	r1, [r5, #0]
 800917a:	291d      	cmp	r1, #29
 800917c:	d82c      	bhi.n	80091d8 <__sflush_r+0xb8>
 800917e:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <__sflush_r+0x108>)
 8009180:	40ca      	lsrs	r2, r1
 8009182:	07d6      	lsls	r6, r2, #31
 8009184:	d528      	bpl.n	80091d8 <__sflush_r+0xb8>
 8009186:	2200      	movs	r2, #0
 8009188:	6062      	str	r2, [r4, #4]
 800918a:	04d9      	lsls	r1, r3, #19
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	6022      	str	r2, [r4, #0]
 8009190:	d504      	bpl.n	800919c <__sflush_r+0x7c>
 8009192:	1c42      	adds	r2, r0, #1
 8009194:	d101      	bne.n	800919a <__sflush_r+0x7a>
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	b903      	cbnz	r3, 800919c <__sflush_r+0x7c>
 800919a:	6560      	str	r0, [r4, #84]	; 0x54
 800919c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800919e:	602f      	str	r7, [r5, #0]
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d0ca      	beq.n	800913a <__sflush_r+0x1a>
 80091a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d002      	beq.n	80091b2 <__sflush_r+0x92>
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff fa99 	bl	80086e4 <_free_r>
 80091b2:	2000      	movs	r0, #0
 80091b4:	6360      	str	r0, [r4, #52]	; 0x34
 80091b6:	e7c1      	b.n	800913c <__sflush_r+0x1c>
 80091b8:	6a21      	ldr	r1, [r4, #32]
 80091ba:	2301      	movs	r3, #1
 80091bc:	4628      	mov	r0, r5
 80091be:	47b0      	blx	r6
 80091c0:	1c41      	adds	r1, r0, #1
 80091c2:	d1c7      	bne.n	8009154 <__sflush_r+0x34>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0c4      	beq.n	8009154 <__sflush_r+0x34>
 80091ca:	2b1d      	cmp	r3, #29
 80091cc:	d001      	beq.n	80091d2 <__sflush_r+0xb2>
 80091ce:	2b16      	cmp	r3, #22
 80091d0:	d101      	bne.n	80091d6 <__sflush_r+0xb6>
 80091d2:	602f      	str	r7, [r5, #0]
 80091d4:	e7b1      	b.n	800913a <__sflush_r+0x1a>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	e7ad      	b.n	800913c <__sflush_r+0x1c>
 80091e0:	690f      	ldr	r7, [r1, #16]
 80091e2:	2f00      	cmp	r7, #0
 80091e4:	d0a9      	beq.n	800913a <__sflush_r+0x1a>
 80091e6:	0793      	lsls	r3, r2, #30
 80091e8:	680e      	ldr	r6, [r1, #0]
 80091ea:	bf08      	it	eq
 80091ec:	694b      	ldreq	r3, [r1, #20]
 80091ee:	600f      	str	r7, [r1, #0]
 80091f0:	bf18      	it	ne
 80091f2:	2300      	movne	r3, #0
 80091f4:	eba6 0807 	sub.w	r8, r6, r7
 80091f8:	608b      	str	r3, [r1, #8]
 80091fa:	f1b8 0f00 	cmp.w	r8, #0
 80091fe:	dd9c      	ble.n	800913a <__sflush_r+0x1a>
 8009200:	6a21      	ldr	r1, [r4, #32]
 8009202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009204:	4643      	mov	r3, r8
 8009206:	463a      	mov	r2, r7
 8009208:	4628      	mov	r0, r5
 800920a:	47b0      	blx	r6
 800920c:	2800      	cmp	r0, #0
 800920e:	dc06      	bgt.n	800921e <__sflush_r+0xfe>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800921c:	e78e      	b.n	800913c <__sflush_r+0x1c>
 800921e:	4407      	add	r7, r0
 8009220:	eba8 0800 	sub.w	r8, r8, r0
 8009224:	e7e9      	b.n	80091fa <__sflush_r+0xda>
 8009226:	bf00      	nop
 8009228:	20400001 	.word	0x20400001

0800922c <_fflush_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	690b      	ldr	r3, [r1, #16]
 8009230:	4605      	mov	r5, r0
 8009232:	460c      	mov	r4, r1
 8009234:	b913      	cbnz	r3, 800923c <_fflush_r+0x10>
 8009236:	2500      	movs	r5, #0
 8009238:	4628      	mov	r0, r5
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	b118      	cbz	r0, 8009246 <_fflush_r+0x1a>
 800923e:	6983      	ldr	r3, [r0, #24]
 8009240:	b90b      	cbnz	r3, 8009246 <_fflush_r+0x1a>
 8009242:	f000 f887 	bl	8009354 <__sinit>
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <_fflush_r+0x6c>)
 8009248:	429c      	cmp	r4, r3
 800924a:	d11b      	bne.n	8009284 <_fflush_r+0x58>
 800924c:	686c      	ldr	r4, [r5, #4]
 800924e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0ef      	beq.n	8009236 <_fflush_r+0xa>
 8009256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009258:	07d0      	lsls	r0, r2, #31
 800925a:	d404      	bmi.n	8009266 <_fflush_r+0x3a>
 800925c:	0599      	lsls	r1, r3, #22
 800925e:	d402      	bmi.n	8009266 <_fflush_r+0x3a>
 8009260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009262:	f000 f915 	bl	8009490 <__retarget_lock_acquire_recursive>
 8009266:	4628      	mov	r0, r5
 8009268:	4621      	mov	r1, r4
 800926a:	f7ff ff59 	bl	8009120 <__sflush_r>
 800926e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009270:	07da      	lsls	r2, r3, #31
 8009272:	4605      	mov	r5, r0
 8009274:	d4e0      	bmi.n	8009238 <_fflush_r+0xc>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	059b      	lsls	r3, r3, #22
 800927a:	d4dd      	bmi.n	8009238 <_fflush_r+0xc>
 800927c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800927e:	f000 f908 	bl	8009492 <__retarget_lock_release_recursive>
 8009282:	e7d9      	b.n	8009238 <_fflush_r+0xc>
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <_fflush_r+0x70>)
 8009286:	429c      	cmp	r4, r3
 8009288:	d101      	bne.n	800928e <_fflush_r+0x62>
 800928a:	68ac      	ldr	r4, [r5, #8]
 800928c:	e7df      	b.n	800924e <_fflush_r+0x22>
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <_fflush_r+0x74>)
 8009290:	429c      	cmp	r4, r3
 8009292:	bf08      	it	eq
 8009294:	68ec      	ldreq	r4, [r5, #12]
 8009296:	e7da      	b.n	800924e <_fflush_r+0x22>
 8009298:	08009c2c 	.word	0x08009c2c
 800929c:	08009c4c 	.word	0x08009c4c
 80092a0:	08009c0c 	.word	0x08009c0c

080092a4 <std>:
 80092a4:	2300      	movs	r3, #0
 80092a6:	b510      	push	{r4, lr}
 80092a8:	4604      	mov	r4, r0
 80092aa:	e9c0 3300 	strd	r3, r3, [r0]
 80092ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092b2:	6083      	str	r3, [r0, #8]
 80092b4:	8181      	strh	r1, [r0, #12]
 80092b6:	6643      	str	r3, [r0, #100]	; 0x64
 80092b8:	81c2      	strh	r2, [r0, #14]
 80092ba:	6183      	str	r3, [r0, #24]
 80092bc:	4619      	mov	r1, r3
 80092be:	2208      	movs	r2, #8
 80092c0:	305c      	adds	r0, #92	; 0x5c
 80092c2:	f7fb fed5 	bl	8005070 <memset>
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <std+0x38>)
 80092c8:	6263      	str	r3, [r4, #36]	; 0x24
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <std+0x3c>)
 80092cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ce:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <std+0x40>)
 80092d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092d2:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <std+0x44>)
 80092d4:	6224      	str	r4, [r4, #32]
 80092d6:	6323      	str	r3, [r4, #48]	; 0x30
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	080095f9 	.word	0x080095f9
 80092e0:	0800961b 	.word	0x0800961b
 80092e4:	08009653 	.word	0x08009653
 80092e8:	08009677 	.word	0x08009677

080092ec <_cleanup_r>:
 80092ec:	4901      	ldr	r1, [pc, #4]	; (80092f4 <_cleanup_r+0x8>)
 80092ee:	f000 b8af 	b.w	8009450 <_fwalk_reent>
 80092f2:	bf00      	nop
 80092f4:	0800922d 	.word	0x0800922d

080092f8 <__sfmoreglue>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	2268      	movs	r2, #104	; 0x68
 80092fc:	1e4d      	subs	r5, r1, #1
 80092fe:	4355      	muls	r5, r2
 8009300:	460e      	mov	r6, r1
 8009302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009306:	f7ff fa59 	bl	80087bc <_malloc_r>
 800930a:	4604      	mov	r4, r0
 800930c:	b140      	cbz	r0, 8009320 <__sfmoreglue+0x28>
 800930e:	2100      	movs	r1, #0
 8009310:	e9c0 1600 	strd	r1, r6, [r0]
 8009314:	300c      	adds	r0, #12
 8009316:	60a0      	str	r0, [r4, #8]
 8009318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800931c:	f7fb fea8 	bl	8005070 <memset>
 8009320:	4620      	mov	r0, r4
 8009322:	bd70      	pop	{r4, r5, r6, pc}

08009324 <__sfp_lock_acquire>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__sfp_lock_acquire+0x8>)
 8009326:	f000 b8b3 	b.w	8009490 <__retarget_lock_acquire_recursive>
 800932a:	bf00      	nop
 800932c:	20000445 	.word	0x20000445

08009330 <__sfp_lock_release>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__sfp_lock_release+0x8>)
 8009332:	f000 b8ae 	b.w	8009492 <__retarget_lock_release_recursive>
 8009336:	bf00      	nop
 8009338:	20000445 	.word	0x20000445

0800933c <__sinit_lock_acquire>:
 800933c:	4801      	ldr	r0, [pc, #4]	; (8009344 <__sinit_lock_acquire+0x8>)
 800933e:	f000 b8a7 	b.w	8009490 <__retarget_lock_acquire_recursive>
 8009342:	bf00      	nop
 8009344:	20000446 	.word	0x20000446

08009348 <__sinit_lock_release>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sinit_lock_release+0x8>)
 800934a:	f000 b8a2 	b.w	8009492 <__retarget_lock_release_recursive>
 800934e:	bf00      	nop
 8009350:	20000446 	.word	0x20000446

08009354 <__sinit>:
 8009354:	b510      	push	{r4, lr}
 8009356:	4604      	mov	r4, r0
 8009358:	f7ff fff0 	bl	800933c <__sinit_lock_acquire>
 800935c:	69a3      	ldr	r3, [r4, #24]
 800935e:	b11b      	cbz	r3, 8009368 <__sinit+0x14>
 8009360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009364:	f7ff bff0 	b.w	8009348 <__sinit_lock_release>
 8009368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800936c:	6523      	str	r3, [r4, #80]	; 0x50
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <__sinit+0x68>)
 8009370:	4a13      	ldr	r2, [pc, #76]	; (80093c0 <__sinit+0x6c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	62a2      	str	r2, [r4, #40]	; 0x28
 8009376:	42a3      	cmp	r3, r4
 8009378:	bf04      	itt	eq
 800937a:	2301      	moveq	r3, #1
 800937c:	61a3      	streq	r3, [r4, #24]
 800937e:	4620      	mov	r0, r4
 8009380:	f000 f820 	bl	80093c4 <__sfp>
 8009384:	6060      	str	r0, [r4, #4]
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f81c 	bl	80093c4 <__sfp>
 800938c:	60a0      	str	r0, [r4, #8]
 800938e:	4620      	mov	r0, r4
 8009390:	f000 f818 	bl	80093c4 <__sfp>
 8009394:	2200      	movs	r2, #0
 8009396:	60e0      	str	r0, [r4, #12]
 8009398:	2104      	movs	r1, #4
 800939a:	6860      	ldr	r0, [r4, #4]
 800939c:	f7ff ff82 	bl	80092a4 <std>
 80093a0:	68a0      	ldr	r0, [r4, #8]
 80093a2:	2201      	movs	r2, #1
 80093a4:	2109      	movs	r1, #9
 80093a6:	f7ff ff7d 	bl	80092a4 <std>
 80093aa:	68e0      	ldr	r0, [r4, #12]
 80093ac:	2202      	movs	r2, #2
 80093ae:	2112      	movs	r1, #18
 80093b0:	f7ff ff78 	bl	80092a4 <std>
 80093b4:	2301      	movs	r3, #1
 80093b6:	61a3      	str	r3, [r4, #24]
 80093b8:	e7d2      	b.n	8009360 <__sinit+0xc>
 80093ba:	bf00      	nop
 80093bc:	080097c8 	.word	0x080097c8
 80093c0:	080092ed 	.word	0x080092ed

080093c4 <__sfp>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4607      	mov	r7, r0
 80093c8:	f7ff ffac 	bl	8009324 <__sfp_lock_acquire>
 80093cc:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <__sfp+0x84>)
 80093ce:	681e      	ldr	r6, [r3, #0]
 80093d0:	69b3      	ldr	r3, [r6, #24]
 80093d2:	b913      	cbnz	r3, 80093da <__sfp+0x16>
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff ffbd 	bl	8009354 <__sinit>
 80093da:	3648      	adds	r6, #72	; 0x48
 80093dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	d503      	bpl.n	80093ec <__sfp+0x28>
 80093e4:	6833      	ldr	r3, [r6, #0]
 80093e6:	b30b      	cbz	r3, 800942c <__sfp+0x68>
 80093e8:	6836      	ldr	r6, [r6, #0]
 80093ea:	e7f7      	b.n	80093dc <__sfp+0x18>
 80093ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093f0:	b9d5      	cbnz	r5, 8009428 <__sfp+0x64>
 80093f2:	4b16      	ldr	r3, [pc, #88]	; (800944c <__sfp+0x88>)
 80093f4:	60e3      	str	r3, [r4, #12]
 80093f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093fa:	6665      	str	r5, [r4, #100]	; 0x64
 80093fc:	f000 f847 	bl	800948e <__retarget_lock_init_recursive>
 8009400:	f7ff ff96 	bl	8009330 <__sfp_lock_release>
 8009404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800940c:	6025      	str	r5, [r4, #0]
 800940e:	61a5      	str	r5, [r4, #24]
 8009410:	2208      	movs	r2, #8
 8009412:	4629      	mov	r1, r5
 8009414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009418:	f7fb fe2a 	bl	8005070 <memset>
 800941c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009424:	4620      	mov	r0, r4
 8009426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009428:	3468      	adds	r4, #104	; 0x68
 800942a:	e7d9      	b.n	80093e0 <__sfp+0x1c>
 800942c:	2104      	movs	r1, #4
 800942e:	4638      	mov	r0, r7
 8009430:	f7ff ff62 	bl	80092f8 <__sfmoreglue>
 8009434:	4604      	mov	r4, r0
 8009436:	6030      	str	r0, [r6, #0]
 8009438:	2800      	cmp	r0, #0
 800943a:	d1d5      	bne.n	80093e8 <__sfp+0x24>
 800943c:	f7ff ff78 	bl	8009330 <__sfp_lock_release>
 8009440:	230c      	movs	r3, #12
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	e7ee      	b.n	8009424 <__sfp+0x60>
 8009446:	bf00      	nop
 8009448:	080097c8 	.word	0x080097c8
 800944c:	ffff0001 	.word	0xffff0001

08009450 <_fwalk_reent>:
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	4606      	mov	r6, r0
 8009456:	4688      	mov	r8, r1
 8009458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800945c:	2700      	movs	r7, #0
 800945e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009462:	f1b9 0901 	subs.w	r9, r9, #1
 8009466:	d505      	bpl.n	8009474 <_fwalk_reent+0x24>
 8009468:	6824      	ldr	r4, [r4, #0]
 800946a:	2c00      	cmp	r4, #0
 800946c:	d1f7      	bne.n	800945e <_fwalk_reent+0xe>
 800946e:	4638      	mov	r0, r7
 8009470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009474:	89ab      	ldrh	r3, [r5, #12]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d907      	bls.n	800948a <_fwalk_reent+0x3a>
 800947a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800947e:	3301      	adds	r3, #1
 8009480:	d003      	beq.n	800948a <_fwalk_reent+0x3a>
 8009482:	4629      	mov	r1, r5
 8009484:	4630      	mov	r0, r6
 8009486:	47c0      	blx	r8
 8009488:	4307      	orrs	r7, r0
 800948a:	3568      	adds	r5, #104	; 0x68
 800948c:	e7e9      	b.n	8009462 <_fwalk_reent+0x12>

0800948e <__retarget_lock_init_recursive>:
 800948e:	4770      	bx	lr

08009490 <__retarget_lock_acquire_recursive>:
 8009490:	4770      	bx	lr

08009492 <__retarget_lock_release_recursive>:
 8009492:	4770      	bx	lr

08009494 <__swhatbuf_r>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	460e      	mov	r6, r1
 8009498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949c:	2900      	cmp	r1, #0
 800949e:	b096      	sub	sp, #88	; 0x58
 80094a0:	4614      	mov	r4, r2
 80094a2:	461d      	mov	r5, r3
 80094a4:	da08      	bge.n	80094b8 <__swhatbuf_r+0x24>
 80094a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	602a      	str	r2, [r5, #0]
 80094ae:	061a      	lsls	r2, r3, #24
 80094b0:	d410      	bmi.n	80094d4 <__swhatbuf_r+0x40>
 80094b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b6:	e00e      	b.n	80094d6 <__swhatbuf_r+0x42>
 80094b8:	466a      	mov	r2, sp
 80094ba:	f000 f903 	bl	80096c4 <_fstat_r>
 80094be:	2800      	cmp	r0, #0
 80094c0:	dbf1      	blt.n	80094a6 <__swhatbuf_r+0x12>
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094cc:	425a      	negs	r2, r3
 80094ce:	415a      	adcs	r2, r3
 80094d0:	602a      	str	r2, [r5, #0]
 80094d2:	e7ee      	b.n	80094b2 <__swhatbuf_r+0x1e>
 80094d4:	2340      	movs	r3, #64	; 0x40
 80094d6:	2000      	movs	r0, #0
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	b016      	add	sp, #88	; 0x58
 80094dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080094e0 <__smakebuf_r>:
 80094e0:	898b      	ldrh	r3, [r1, #12]
 80094e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094e4:	079d      	lsls	r5, r3, #30
 80094e6:	4606      	mov	r6, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	d507      	bpl.n	80094fc <__smakebuf_r+0x1c>
 80094ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	2301      	movs	r3, #1
 80094f6:	6163      	str	r3, [r4, #20]
 80094f8:	b002      	add	sp, #8
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	ab01      	add	r3, sp, #4
 80094fe:	466a      	mov	r2, sp
 8009500:	f7ff ffc8 	bl	8009494 <__swhatbuf_r>
 8009504:	9900      	ldr	r1, [sp, #0]
 8009506:	4605      	mov	r5, r0
 8009508:	4630      	mov	r0, r6
 800950a:	f7ff f957 	bl	80087bc <_malloc_r>
 800950e:	b948      	cbnz	r0, 8009524 <__smakebuf_r+0x44>
 8009510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009514:	059a      	lsls	r2, r3, #22
 8009516:	d4ef      	bmi.n	80094f8 <__smakebuf_r+0x18>
 8009518:	f023 0303 	bic.w	r3, r3, #3
 800951c:	f043 0302 	orr.w	r3, r3, #2
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	e7e3      	b.n	80094ec <__smakebuf_r+0xc>
 8009524:	4b0d      	ldr	r3, [pc, #52]	; (800955c <__smakebuf_r+0x7c>)
 8009526:	62b3      	str	r3, [r6, #40]	; 0x28
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	6020      	str	r0, [r4, #0]
 800952c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	9b00      	ldr	r3, [sp, #0]
 8009534:	6163      	str	r3, [r4, #20]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	6120      	str	r0, [r4, #16]
 800953a:	b15b      	cbz	r3, 8009554 <__smakebuf_r+0x74>
 800953c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009540:	4630      	mov	r0, r6
 8009542:	f000 f8d1 	bl	80096e8 <_isatty_r>
 8009546:	b128      	cbz	r0, 8009554 <__smakebuf_r+0x74>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	f043 0301 	orr.w	r3, r3, #1
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	89a0      	ldrh	r0, [r4, #12]
 8009556:	4305      	orrs	r5, r0
 8009558:	81a5      	strh	r5, [r4, #12]
 800955a:	e7cd      	b.n	80094f8 <__smakebuf_r+0x18>
 800955c:	080092ed 	.word	0x080092ed

08009560 <_malloc_usable_size_r>:
 8009560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009564:	1f18      	subs	r0, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	bfbc      	itt	lt
 800956a:	580b      	ldrlt	r3, [r1, r0]
 800956c:	18c0      	addlt	r0, r0, r3
 800956e:	4770      	bx	lr

08009570 <_raise_r>:
 8009570:	291f      	cmp	r1, #31
 8009572:	b538      	push	{r3, r4, r5, lr}
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	d904      	bls.n	8009584 <_raise_r+0x14>
 800957a:	2316      	movs	r3, #22
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009586:	b112      	cbz	r2, 800958e <_raise_r+0x1e>
 8009588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800958c:	b94b      	cbnz	r3, 80095a2 <_raise_r+0x32>
 800958e:	4620      	mov	r0, r4
 8009590:	f000 f830 	bl	80095f4 <_getpid_r>
 8009594:	462a      	mov	r2, r5
 8009596:	4601      	mov	r1, r0
 8009598:	4620      	mov	r0, r4
 800959a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800959e:	f000 b817 	b.w	80095d0 <_kill_r>
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d00a      	beq.n	80095bc <_raise_r+0x4c>
 80095a6:	1c59      	adds	r1, r3, #1
 80095a8:	d103      	bne.n	80095b2 <_raise_r+0x42>
 80095aa:	2316      	movs	r3, #22
 80095ac:	6003      	str	r3, [r0, #0]
 80095ae:	2001      	movs	r0, #1
 80095b0:	e7e7      	b.n	8009582 <_raise_r+0x12>
 80095b2:	2400      	movs	r4, #0
 80095b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095b8:	4628      	mov	r0, r5
 80095ba:	4798      	blx	r3
 80095bc:	2000      	movs	r0, #0
 80095be:	e7e0      	b.n	8009582 <_raise_r+0x12>

080095c0 <raise>:
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <raise+0xc>)
 80095c2:	4601      	mov	r1, r0
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	f7ff bfd3 	b.w	8009570 <_raise_r>
 80095ca:	bf00      	nop
 80095cc:	2000000c 	.word	0x2000000c

080095d0 <_kill_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	; (80095f0 <_kill_r+0x20>)
 80095d4:	2300      	movs	r3, #0
 80095d6:	4604      	mov	r4, r0
 80095d8:	4608      	mov	r0, r1
 80095da:	4611      	mov	r1, r2
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	f7f8 f885 	bl	80016ec <_kill>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	d102      	bne.n	80095ec <_kill_r+0x1c>
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	b103      	cbz	r3, 80095ec <_kill_r+0x1c>
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	bd38      	pop	{r3, r4, r5, pc}
 80095ee:	bf00      	nop
 80095f0:	20000440 	.word	0x20000440

080095f4 <_getpid_r>:
 80095f4:	f7f8 b872 	b.w	80016dc <_getpid>

080095f8 <__sread>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009600:	f000 f894 	bl	800972c <_read_r>
 8009604:	2800      	cmp	r0, #0
 8009606:	bfab      	itete	ge
 8009608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800960a:	89a3      	ldrhlt	r3, [r4, #12]
 800960c:	181b      	addge	r3, r3, r0
 800960e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009612:	bfac      	ite	ge
 8009614:	6563      	strge	r3, [r4, #84]	; 0x54
 8009616:	81a3      	strhlt	r3, [r4, #12]
 8009618:	bd10      	pop	{r4, pc}

0800961a <__swrite>:
 800961a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961e:	461f      	mov	r7, r3
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	05db      	lsls	r3, r3, #23
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4616      	mov	r6, r2
 800962a:	d505      	bpl.n	8009638 <__swrite+0x1e>
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	2302      	movs	r3, #2
 8009632:	2200      	movs	r2, #0
 8009634:	f000 f868 	bl	8009708 <_lseek_r>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	4632      	mov	r2, r6
 8009646:	463b      	mov	r3, r7
 8009648:	4628      	mov	r0, r5
 800964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	f000 b817 	b.w	8009680 <_write_r>

08009652 <__sseek>:
 8009652:	b510      	push	{r4, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965a:	f000 f855 	bl	8009708 <_lseek_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	bf15      	itete	ne
 8009664:	6560      	strne	r0, [r4, #84]	; 0x54
 8009666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800966a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800966e:	81a3      	strheq	r3, [r4, #12]
 8009670:	bf18      	it	ne
 8009672:	81a3      	strhne	r3, [r4, #12]
 8009674:	bd10      	pop	{r4, pc}

08009676 <__sclose>:
 8009676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967a:	f000 b813 	b.w	80096a4 <_close_r>
	...

08009680 <_write_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	; (80096a0 <_write_r+0x20>)
 8009684:	4604      	mov	r4, r0
 8009686:	4608      	mov	r0, r1
 8009688:	4611      	mov	r1, r2
 800968a:	2200      	movs	r2, #0
 800968c:	602a      	str	r2, [r5, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	f7f8 f863 	bl	800175a <_write>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_write_r+0x1e>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_write_r+0x1e>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	20000440 	.word	0x20000440

080096a4 <_close_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_close_r+0x1c>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	602b      	str	r3, [r5, #0]
 80096b0:	f7f8 f86f 	bl	8001792 <_close>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_close_r+0x1a>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_close_r+0x1a>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	20000440 	.word	0x20000440

080096c4 <_fstat_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d07      	ldr	r5, [pc, #28]	; (80096e4 <_fstat_r+0x20>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	4611      	mov	r1, r2
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	f7f8 f86a 	bl	80017aa <_fstat>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	d102      	bne.n	80096e0 <_fstat_r+0x1c>
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	b103      	cbz	r3, 80096e0 <_fstat_r+0x1c>
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	bd38      	pop	{r3, r4, r5, pc}
 80096e2:	bf00      	nop
 80096e4:	20000440 	.word	0x20000440

080096e8 <_isatty_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4d06      	ldr	r5, [pc, #24]	; (8009704 <_isatty_r+0x1c>)
 80096ec:	2300      	movs	r3, #0
 80096ee:	4604      	mov	r4, r0
 80096f0:	4608      	mov	r0, r1
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	f7f8 f869 	bl	80017ca <_isatty>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_isatty_r+0x1a>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_isatty_r+0x1a>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	20000440 	.word	0x20000440

08009708 <_lseek_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d07      	ldr	r5, [pc, #28]	; (8009728 <_lseek_r+0x20>)
 800970c:	4604      	mov	r4, r0
 800970e:	4608      	mov	r0, r1
 8009710:	4611      	mov	r1, r2
 8009712:	2200      	movs	r2, #0
 8009714:	602a      	str	r2, [r5, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	f7f8 f862 	bl	80017e0 <_lseek>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d102      	bne.n	8009726 <_lseek_r+0x1e>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	b103      	cbz	r3, 8009726 <_lseek_r+0x1e>
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	20000440 	.word	0x20000440

0800972c <_read_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d07      	ldr	r5, [pc, #28]	; (800974c <_read_r+0x20>)
 8009730:	4604      	mov	r4, r0
 8009732:	4608      	mov	r0, r1
 8009734:	4611      	mov	r1, r2
 8009736:	2200      	movs	r2, #0
 8009738:	602a      	str	r2, [r5, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f7f7 fff0 	bl	8001720 <_read>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d102      	bne.n	800974a <_read_r+0x1e>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	b103      	cbz	r3, 800974a <_read_r+0x1e>
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	bd38      	pop	{r3, r4, r5, pc}
 800974c:	20000440 	.word	0x20000440

08009750 <_init>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	bf00      	nop
 8009754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009756:	bc08      	pop	{r3}
 8009758:	469e      	mov	lr, r3
 800975a:	4770      	bx	lr

0800975c <_fini>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	bf00      	nop
 8009760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009762:	bc08      	pop	{r3}
 8009764:	469e      	mov	lr, r3
 8009766:	4770      	bx	lr
