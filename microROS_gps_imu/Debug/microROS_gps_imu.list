
microROS_gps_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014798  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  08014998  08014998  00024998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080159f0  080159f0  00030474  2**0
                  CONTENTS
  4 .ARM          00000008  080159f0  080159f0  000259f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159f8  080159f8  00030474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080159f8  080159f8  000259f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a00  08015a00  00025a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  20000000  08015a04  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000da0c  20000478  08015e78  00030478  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000de84  08015e78  0003de84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030474  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209f5  00000000  00000000  000304a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004156  00000000  00000000  00050e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00054ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00056928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d3a9  00000000  00000000  000580b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002114f  00000000  00000000  00085461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011691a  00000000  00000000  000a65b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000083  00000000  00000000  001bceca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d10  00000000  00000000  001bcf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000478 	.word	0x20000478
 800021c:	00000000 	.word	0x00000000
 8000220:	08014980 	.word	0x08014980

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000047c 	.word	0x2000047c
 800023c:	08014980 	.word	0x08014980

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_ldivmod>:
 8000304:	b97b      	cbnz	r3, 8000326 <__aeabi_ldivmod+0x22>
 8000306:	b972      	cbnz	r2, 8000326 <__aeabi_ldivmod+0x22>
 8000308:	2900      	cmp	r1, #0
 800030a:	bfbe      	ittt	lt
 800030c:	2000      	movlt	r0, #0
 800030e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000312:	e006      	blt.n	8000322 <__aeabi_ldivmod+0x1e>
 8000314:	bf08      	it	eq
 8000316:	2800      	cmpeq	r0, #0
 8000318:	bf1c      	itt	ne
 800031a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800031e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000322:	f000 b9bf 	b.w	80006a4 <__aeabi_idiv0>
 8000326:	f1ad 0c08 	sub.w	ip, sp, #8
 800032a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032e:	2900      	cmp	r1, #0
 8000330:	db09      	blt.n	8000346 <__aeabi_ldivmod+0x42>
 8000332:	2b00      	cmp	r3, #0
 8000334:	db1a      	blt.n	800036c <__aeabi_ldivmod+0x68>
 8000336:	f000 f84d 	bl	80003d4 <__udivmoddi4>
 800033a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800033e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000342:	b004      	add	sp, #16
 8000344:	4770      	bx	lr
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	db1b      	blt.n	8000388 <__aeabi_ldivmod+0x84>
 8000350:	f000 f840 	bl	80003d4 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	4770      	bx	lr
 800036c:	4252      	negs	r2, r2
 800036e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000372:	f000 f82f 	bl	80003d4 <__udivmoddi4>
 8000376:	f8dd e004 	ldr.w	lr, [sp, #4]
 800037a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037e:	b004      	add	sp, #16
 8000380:	4240      	negs	r0, r0
 8000382:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000386:	4770      	bx	lr
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	f000 f821 	bl	80003d4 <__udivmoddi4>
 8000392:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039a:	b004      	add	sp, #16
 800039c:	4252      	negs	r2, r2
 800039e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b8:	f000 b974 	b.w	80006a4 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9d08      	ldr	r5, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	468e      	mov	lr, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14d      	bne.n	800047e <__udivmoddi4+0xaa>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4694      	mov	ip, r2
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0xe8>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b152      	cbz	r2, 8000404 <__udivmoddi4+0x30>
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	f1c2 0120 	rsb	r1, r2, #32
 80003f6:	fa20 f101 	lsr.w	r1, r0, r1
 80003fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000402:	4094      	lsls	r4, r2
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	0c21      	lsrs	r1, r4, #16
 800040a:	fbbe f6f8 	udiv	r6, lr, r8
 800040e:	fa1f f78c 	uxth.w	r7, ip
 8000412:	fb08 e316 	mls	r3, r8, r6, lr
 8000416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800041a:	fb06 f107 	mul.w	r1, r6, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d90a      	bls.n	8000438 <__udivmoddi4+0x64>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800042a:	f080 811f 	bcs.w	800066c <__udivmoddi4+0x298>
 800042e:	4299      	cmp	r1, r3
 8000430:	f240 811c 	bls.w	800066c <__udivmoddi4+0x298>
 8000434:	3e02      	subs	r6, #2
 8000436:	4463      	add	r3, ip
 8000438:	1a5b      	subs	r3, r3, r1
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3310 	mls	r3, r8, r0, r3
 8000444:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000448:	fb00 f707 	mul.w	r7, r0, r7
 800044c:	42a7      	cmp	r7, r4
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x92>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000458:	f080 810a 	bcs.w	8000670 <__udivmoddi4+0x29c>
 800045c:	42a7      	cmp	r7, r4
 800045e:	f240 8107 	bls.w	8000670 <__udivmoddi4+0x29c>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	1be4      	subs	r4, r4, r7
 800046c:	2600      	movs	r6, #0
 800046e:	b11d      	cbz	r5, 8000478 <__udivmoddi4+0xa4>
 8000470:	40d4      	lsrs	r4, r2
 8000472:	2300      	movs	r3, #0
 8000474:	e9c5 4300 	strd	r4, r3, [r5]
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	428b      	cmp	r3, r1
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0xc2>
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80ef 	beq.w	8000666 <__udivmoddi4+0x292>
 8000488:	2600      	movs	r6, #0
 800048a:	e9c5 0100 	strd	r0, r1, [r5]
 800048e:	4630      	mov	r0, r6
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	fab3 f683 	clz	r6, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d14a      	bne.n	8000534 <__udivmoddi4+0x160>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xd4>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 80f9 	bhi.w	800069a <__udivmoddi4+0x2c6>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb61 0303 	sbc.w	r3, r1, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	469e      	mov	lr, r3
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e0      	beq.n	8000478 <__udivmoddi4+0xa4>
 80004b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ba:	e7dd      	b.n	8000478 <__udivmoddi4+0xa4>
 80004bc:	b902      	cbnz	r2, 80004c0 <__udivmoddi4+0xec>
 80004be:	deff      	udf	#255	; 0xff
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 8092 	bne.w	80005ee <__udivmoddi4+0x21a>
 80004ca:	eba1 010c 	sub.w	r1, r1, ip
 80004ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d2:	fa1f fe8c 	uxth.w	lr, ip
 80004d6:	2601      	movs	r6, #1
 80004d8:	0c20      	lsrs	r0, r4, #16
 80004da:	fbb1 f3f7 	udiv	r3, r1, r7
 80004de:	fb07 1113 	mls	r1, r7, r3, r1
 80004e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e6:	fb0e f003 	mul.w	r0, lr, r3
 80004ea:	4288      	cmp	r0, r1
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x12c>
 80004ee:	eb1c 0101 	adds.w	r1, ip, r1
 80004f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x12a>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f200 80cb 	bhi.w	8000694 <__udivmoddi4+0x2c0>
 80004fe:	4643      	mov	r3, r8
 8000500:	1a09      	subs	r1, r1, r0
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1110 	mls	r1, r7, r0, r1
 800050c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000510:	fb0e fe00 	mul.w	lr, lr, r0
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x156>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d202      	bcs.n	8000528 <__udivmoddi4+0x154>
 8000522:	45a6      	cmp	lr, r4
 8000524:	f200 80bb 	bhi.w	800069e <__udivmoddi4+0x2ca>
 8000528:	4608      	mov	r0, r1
 800052a:	eba4 040e 	sub.w	r4, r4, lr
 800052e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000532:	e79c      	b.n	800046e <__udivmoddi4+0x9a>
 8000534:	f1c6 0720 	rsb	r7, r6, #32
 8000538:	40b3      	lsls	r3, r6
 800053a:	fa22 fc07 	lsr.w	ip, r2, r7
 800053e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000542:	fa20 f407 	lsr.w	r4, r0, r7
 8000546:	fa01 f306 	lsl.w	r3, r1, r6
 800054a:	431c      	orrs	r4, r3
 800054c:	40f9      	lsrs	r1, r7
 800054e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000552:	fa00 f306 	lsl.w	r3, r0, r6
 8000556:	fbb1 f8f9 	udiv	r8, r1, r9
 800055a:	0c20      	lsrs	r0, r4, #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fb09 1118 	mls	r1, r9, r8, r1
 8000564:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000568:	fb08 f00e 	mul.w	r0, r8, lr
 800056c:	4288      	cmp	r0, r1
 800056e:	fa02 f206 	lsl.w	r2, r2, r6
 8000572:	d90b      	bls.n	800058c <__udivmoddi4+0x1b8>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800057c:	f080 8088 	bcs.w	8000690 <__udivmoddi4+0x2bc>
 8000580:	4288      	cmp	r0, r1
 8000582:	f240 8085 	bls.w	8000690 <__udivmoddi4+0x2bc>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f9 	udiv	r0, r1, r9
 8000594:	fb09 1110 	mls	r1, r9, r0, r1
 8000598:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800059c:	fb00 fe0e 	mul.w	lr, r0, lr
 80005a0:	458e      	cmp	lr, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x1e2>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005ac:	d26c      	bcs.n	8000688 <__udivmoddi4+0x2b4>
 80005ae:	458e      	cmp	lr, r1
 80005b0:	d96a      	bls.n	8000688 <__udivmoddi4+0x2b4>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ba:	fba0 9402 	umull	r9, r4, r0, r2
 80005be:	eba1 010e 	sub.w	r1, r1, lr
 80005c2:	42a1      	cmp	r1, r4
 80005c4:	46c8      	mov	r8, r9
 80005c6:	46a6      	mov	lr, r4
 80005c8:	d356      	bcc.n	8000678 <__udivmoddi4+0x2a4>
 80005ca:	d053      	beq.n	8000674 <__udivmoddi4+0x2a0>
 80005cc:	b15d      	cbz	r5, 80005e6 <__udivmoddi4+0x212>
 80005ce:	ebb3 0208 	subs.w	r2, r3, r8
 80005d2:	eb61 010e 	sbc.w	r1, r1, lr
 80005d6:	fa01 f707 	lsl.w	r7, r1, r7
 80005da:	fa22 f306 	lsr.w	r3, r2, r6
 80005de:	40f1      	lsrs	r1, r6
 80005e0:	431f      	orrs	r7, r3
 80005e2:	e9c5 7100 	strd	r7, r1, [r5]
 80005e6:	2600      	movs	r6, #0
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	40d8      	lsrs	r0, r3
 80005f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
 80005fc:	4091      	lsls	r1, r2
 80005fe:	4301      	orrs	r1, r0
 8000600:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000604:	fa1f fe8c 	uxth.w	lr, ip
 8000608:	fbb3 f0f7 	udiv	r0, r3, r7
 800060c:	fb07 3610 	mls	r6, r7, r0, r3
 8000610:	0c0b      	lsrs	r3, r1, #16
 8000612:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000616:	fb00 f60e 	mul.w	r6, r0, lr
 800061a:	429e      	cmp	r6, r3
 800061c:	fa04 f402 	lsl.w	r4, r4, r2
 8000620:	d908      	bls.n	8000634 <__udivmoddi4+0x260>
 8000622:	eb1c 0303 	adds.w	r3, ip, r3
 8000626:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062a:	d22f      	bcs.n	800068c <__udivmoddi4+0x2b8>
 800062c:	429e      	cmp	r6, r3
 800062e:	d92d      	bls.n	800068c <__udivmoddi4+0x2b8>
 8000630:	3802      	subs	r0, #2
 8000632:	4463      	add	r3, ip
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	b289      	uxth	r1, r1
 8000638:	fbb3 f6f7 	udiv	r6, r3, r7
 800063c:	fb07 3316 	mls	r3, r7, r6, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb06 f30e 	mul.w	r3, r6, lr
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x28a>
 800064c:	eb1c 0101 	adds.w	r1, ip, r1
 8000650:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000654:	d216      	bcs.n	8000684 <__udivmoddi4+0x2b0>
 8000656:	428b      	cmp	r3, r1
 8000658:	d914      	bls.n	8000684 <__udivmoddi4+0x2b0>
 800065a:	3e02      	subs	r6, #2
 800065c:	4461      	add	r1, ip
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000664:	e738      	b.n	80004d8 <__udivmoddi4+0x104>
 8000666:	462e      	mov	r6, r5
 8000668:	4628      	mov	r0, r5
 800066a:	e705      	b.n	8000478 <__udivmoddi4+0xa4>
 800066c:	4606      	mov	r6, r0
 800066e:	e6e3      	b.n	8000438 <__udivmoddi4+0x64>
 8000670:	4618      	mov	r0, r3
 8000672:	e6f8      	b.n	8000466 <__udivmoddi4+0x92>
 8000674:	454b      	cmp	r3, r9
 8000676:	d2a9      	bcs.n	80005cc <__udivmoddi4+0x1f8>
 8000678:	ebb9 0802 	subs.w	r8, r9, r2
 800067c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000680:	3801      	subs	r0, #1
 8000682:	e7a3      	b.n	80005cc <__udivmoddi4+0x1f8>
 8000684:	4646      	mov	r6, r8
 8000686:	e7ea      	b.n	800065e <__udivmoddi4+0x28a>
 8000688:	4620      	mov	r0, r4
 800068a:	e794      	b.n	80005b6 <__udivmoddi4+0x1e2>
 800068c:	4640      	mov	r0, r8
 800068e:	e7d1      	b.n	8000634 <__udivmoddi4+0x260>
 8000690:	46d0      	mov	r8, sl
 8000692:	e77b      	b.n	800058c <__udivmoddi4+0x1b8>
 8000694:	3b02      	subs	r3, #2
 8000696:	4461      	add	r1, ip
 8000698:	e732      	b.n	8000500 <__udivmoddi4+0x12c>
 800069a:	4630      	mov	r0, r6
 800069c:	e709      	b.n	80004b2 <__udivmoddi4+0xde>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	e742      	b.n	800052a <__udivmoddi4+0x156>

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <get_Accel>:

	return enableSuccess;
}

uint8_t get_Accel(mpu_6050_t *my_mpu_6050)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	6078      	str	r0, [r7, #4]
	/* flags that check if communication between i2c master and slave was successful */
	uint8_t i2c_Tx_flag = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = ACCEL_XOUT_H;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	223b      	movs	r2, #59	; 0x3b
 80006c2:	701a      	strb	r2, [r3, #0]

	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 1000);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	21d0      	movs	r1, #208	; 0xd0
 80006d6:	f001 fcd7 	bl	8002088 <HAL_I2C_Master_Transmit>
 80006da:	4603      	mov	r3, r0
 80006dc:	73bb      	strb	r3, [r7, #14]


	/* Retrieve the acceleration values from 6 registers
	 * ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ACCEL_YOUT_L, ACCEL_ZOUT_H, ACCEL_ZOUT_L respectively
	 */
	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 1000);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2306      	movs	r3, #6
 80006ee:	21d1      	movs	r1, #209	; 0xd1
 80006f0:	f001 fdbe 	bl	8002270 <HAL_I2C_Master_Receive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d104      	bne.n	8000708 <get_Accel+0x60>
 80006fe:	7b7b      	ldrb	r3, [r7, #13]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <get_Accel+0x60>
		i2c_success = HAL_OK;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]

	/* You are also supposed to check A0 Pin on MPU_6050 */

	return i2c_success;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f001 f935 	bl	8001986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f826 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 f8b0 	bl	8000884 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000724:	f000 f87e 	bl	8000824 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000728:	f005 fa62 	bl	8005bf0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microROS_tx */
  microROS_txHandle = osThreadNew(tx_data, NULL, &microROS_tx_attributes);
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <main+0x40>)
 800072e:	2100      	movs	r1, #0
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <main+0x44>)
 8000732:	f005 fac7 	bl	8005cc4 <osThreadNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <main+0x48>)
 800073a:	6013      	str	r3, [r2, #0]

  /* creation of data_aq */
  data_aqHandle = osThreadNew(getAG_data, NULL, &data_aq_attributes);
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <main+0x4c>)
 800073e:	2100      	movs	r1, #0
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <main+0x50>)
 8000742:	f005 fabf 	bl	8005cc4 <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <main+0x54>)
 800074a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800074c:	f005 fa84 	bl	8005c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x3c>
 8000752:	bf00      	nop
 8000754:	08014a44 	.word	0x08014a44
 8000758:	08000a8d 	.word	0x08000a8d
 800075c:	2000051c 	.word	0x2000051c
 8000760:	08014a68 	.word	0x08014a68
 8000764:	08000be5 	.word	0x08000be5
 8000768:	20000520 	.word	0x20000520

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f011 f91e 	bl	80119bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <SystemClock_Config+0xb0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <SystemClock_Config+0xb0>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <SystemClock_Config+0xb0>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <SystemClock_Config+0xb4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <SystemClock_Config+0xb4>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <SystemClock_Config+0xb4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f8ab 	bl	8002934 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007e4:	f000 fa2c 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fb43 	bl	8002e90 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000810:	f000 fa16 	bl	8000c40 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART3_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART3_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART3_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000868:	f003 fc70 	bl	800414c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f9e5 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000494 	.word	0x20000494
 8000880:	40004800 	.word	0x40004800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b77      	ldr	r3, [pc, #476]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a76      	ldr	r2, [pc, #472]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b74      	ldr	r3, [pc, #464]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4b71      	ldr	r3, [pc, #452]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a70      	ldr	r2, [pc, #448]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b6e      	ldr	r3, [pc, #440]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b6b      	ldr	r3, [pc, #428]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a6a      	ldr	r2, [pc, #424]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b68      	ldr	r3, [pc, #416]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a64      	ldr	r2, [pc, #400]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b62      	ldr	r3, [pc, #392]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5e      	ldr	r2, [pc, #376]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5c      	ldr	r3, [pc, #368]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a58      	ldr	r2, [pc, #352]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <MX_GPIO_Init+0x1f4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000930:	4852      	ldr	r0, [pc, #328]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000932:	f001 fb75 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4851      	ldr	r0, [pc, #324]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 800093c:	f001 fb70 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	484b      	ldr	r0, [pc, #300]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000958:	f001 f9b6 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800095c:	2332      	movs	r3, #50	; 0x32
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096c:	230b      	movs	r3, #11
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4843      	ldr	r0, [pc, #268]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000978:	f001 f9a6 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800097c:	2386      	movs	r3, #134	; 0x86
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098c:	230b      	movs	r3, #11
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	483c      	ldr	r0, [pc, #240]	; (8000a88 <MX_GPIO_Init+0x204>)
 8000998:	f001 f996 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800099c:	f244 0381 	movw	r3, #16513	; 0x4081
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4831      	ldr	r0, [pc, #196]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80009b6:	f001 f987 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009cc:	230b      	movs	r3, #11
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4829      	ldr	r0, [pc, #164]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80009d8:	f001 f976 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 80009f4:	f001 f968 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481d      	ldr	r0, [pc, #116]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 8000a0c:	f001 f95c 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a10:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a22:	230a      	movs	r3, #10
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4816      	ldr	r0, [pc, #88]	; (8000a88 <MX_GPIO_Init+0x204>)
 8000a2e:	f001 f94b 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4810      	ldr	r0, [pc, #64]	; (8000a88 <MX_GPIO_Init+0x204>)
 8000a48:	f001 f93e 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 8000a6a:	f001 f92d 	bl	8001cc8 <HAL_GPIO_Init>

}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	40021800 	.word	0x40021800
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020000 	.word	0x40020000

08000a8c <tx_data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tx_data */
void tx_data(void *argument)
{
 8000a8c:	b5b0      	push	{r4, r5, r7, lr}
 8000a8e:	b0c6      	sub	sp, #280	; 0x118
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	 rmw_uros_set_custom_transport(
 8000a94:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <tx_data+0x11c>)
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	4b44      	ldr	r3, [pc, #272]	; (8000bac <tx_data+0x120>)
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <tx_data+0x124>)
 8000a9e:	4a45      	ldr	r2, [pc, #276]	; (8000bb4 <tx_data+0x128>)
 8000aa0:	4945      	ldr	r1, [pc, #276]	; (8000bb8 <tx_data+0x12c>)
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f009 f8fc 	bl	8009ca0 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000aa8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000aac:	4618      	mov	r0, r3
 8000aae:	f009 f877 	bl	8009ba0 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000ab2:	4b42      	ldr	r3, [pc, #264]	; (8000bbc <tx_data+0x130>)
 8000ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000ab8:	4b41      	ldr	r3, [pc, #260]	; (8000bc0 <tx_data+0x134>)
 8000aba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000abe:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <tx_data+0x138>)
 8000ac0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000ac4:	4b40      	ldr	r3, [pc, #256]	; (8000bc8 <tx_data+0x13c>)
 8000ac6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000aca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f009 f874 	bl	8009bbc <rcutils_set_default_allocator>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	f083 0301 	eor.w	r3, r3, #1
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d004      	beq.n	8000aea <tx_data+0x5e>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000ae0:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8000ae4:	4839      	ldr	r0, [pc, #228]	; (8000bcc <tx_data+0x140>)
 8000ae6:	f011 fca9 	bl	801243c <iprintf>

	  example_interfaces__msg__Float32 floatData;

	  example_interfaces__msg__UInt8MultiArray arrayData;

	  allocator = rcl_get_default_allocator();
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f009 f883 	bl	8009bf8 <rcutils_get_default_allocator>
 8000af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000af6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000afa:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000afe:	461d      	mov	r5, r3
 8000b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000b08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b0c:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	f008 ff76 	bl	8009a04 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000b18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b1c:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8000b20:	4a2b      	ldr	r2, [pc, #172]	; (8000bd0 <tx_data+0x144>)
 8000b22:	492c      	ldr	r1, [pc, #176]	; (8000bd4 <tx_data+0x148>)
 8000b24:	f008 ffb8 	bl	8009a98 <rclc_node_init_default>

	  /* Creating a publisher that can tx uint8_t data */
	  rclc_publisher_init_default(
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(example_interfaces, msg, UInt8),
 8000b28:	f007 fe58 	bl	80087dc <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8>
 8000b2c:	4603      	mov	r3, r0
	  rclc_publisher_init_default(
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000b34:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <tx_data+0x14c>)
 8000b3a:	f008 ffef 	bl	8009b1c <rclc_publisher_init_default>
	    "cubemx_publisher");

	  uint8_t message[] = "Hello World";
 8000b3e:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <tx_data+0x150>)
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//
//	  floatData.data = 100;
//


	  aData.capacity = 10;
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  /* Allocates 10 * sizeof(std_msgs__msg__UInt8) bytes */
	  aData.data = (std_msgs__msg__UInt8*)malloc(aData.capacity * sizeof(std_msgs__msg__UInt8));
 8000b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000b54:	4618      	mov	r0, r3
 8000b56:	f010 ff13 	bl	8011980 <malloc>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	  aData.size = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  aData.data[0].data = 100;
 8000b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b6a:	2264      	movs	r2, #100	; 0x64
 8000b6c:	701a      	strb	r2, [r3, #0]
	  aData.size++;
 8000b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b72:	3301      	adds	r3, #1
 8000b74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


	  for(;;)
	  {
	    //rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
		rcl_ret_t ret = rcl_publish(&publisher, &aData, NULL);
 8000b78:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000b7c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000b80:	2200      	movs	r2, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f008 ff1a 	bl	80099bc <rcl_publish>
 8000b88:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	    if (ret != RCL_RET_OK)
 8000b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d004      	beq.n	8000b9e <tx_data+0x112>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8000b94:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <tx_data+0x154>)
 8000b9a:	f011 fc4f 	bl	801243c <iprintf>
	    }

	    //accel_data.data++;
	    //msg.data++;
	    osDelay(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f005 f936 	bl	8005e10 <osDelay>
	  {
 8000ba4:	e7e8      	b.n	8000b78 <tx_data+0xec>
 8000ba6:	bf00      	nop
 8000ba8:	08001881 	.word	0x08001881
 8000bac:	08001821 	.word	0x08001821
 8000bb0:	08001801 	.word	0x08001801
 8000bb4:	080017d9 	.word	0x080017d9
 8000bb8:	20000494 	.word	0x20000494
 8000bbc:	0800150d 	.word	0x0800150d
 8000bc0:	08001551 	.word	0x08001551
 8000bc4:	08001589 	.word	0x08001589
 8000bc8:	080015f5 	.word	0x080015f5
 8000bcc:	080149ac 	.word	0x080149ac
 8000bd0:	080149d4 	.word	0x080149d4
 8000bd4:	080149d8 	.word	0x080149d8
 8000bd8:	080149e4 	.word	0x080149e4
 8000bdc:	08014a14 	.word	0x08014a14
 8000be0:	080149f8 	.word	0x080149f8

08000be4 <getAG_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getAG_data */
void getAG_data(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getAG_data */
  /* Infinite loop */
	for(;;)
	{
		if (get_Accel(&my_imu) != HAL_OK)
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <getAG_data+0x2c>)
 8000bee:	f7ff fd5b 	bl	80006a8 <get_Accel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <getAG_data+0x1e>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <getAG_data+0x30>)
 8000bfc:	f001 fa29 	bl	8002052 <HAL_GPIO_TogglePin>
 8000c00:	e002      	b.n	8000c08 <getAG_data+0x24>
		else
		  TX_DATA = SEND_DATA;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <getAG_data+0x34>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
		/* Collect Data every 100ms */
		osDelay(100);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f005 f901 	bl	8005e10 <osDelay>
		if (get_Accel(&my_imu) != HAL_OK)
 8000c0e:	e7ed      	b.n	8000bec <getAG_data+0x8>
 8000c10:	20000524 	.word	0x20000524
 8000c14:	40020400 	.word	0x40020400
 8000c18:	20000558 	.word	0x20000558

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f000 feb7 	bl	80019a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001000 	.word	0x40001000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	210f      	movs	r1, #15
 8000c86:	f06f 0001 	mvn.w	r0, #1
 8000c8a:	f000 ff61 	bl	8001b50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ae      	sub	sp, #184	; 0xb8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2290      	movs	r2, #144	; 0x90
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f010 fe7d 	bl	80119bc <memset>
  if(huart->Instance==USART3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d144      	bne.n	8000d56 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fb2e 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ce6:	f7ff ffab 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2307      	movs	r3, #7
 8000d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_UART_MspInit+0xcc>)
 8000d42:	f000 ffc1 	bl	8001cc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2027      	movs	r0, #39	; 0x27
 8000d4c:	f000 ff00 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d50:	2027      	movs	r0, #39	; 0x27
 8000d52:	f000 ff19 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	37b8      	adds	r7, #184	; 0xb8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004800 	.word	0x40004800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020c00 	.word	0x40020c00

08000d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <HAL_InitTick+0xe0>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a32      	ldr	r2, [pc, #200]	; (8000e4c <HAL_InitTick+0xe0>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <HAL_InitTick+0xe0>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d94:	f107 0210 	add.w	r2, r7, #16
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fa9a 	bl	80032d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d103      	bne.n	8000db6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dae:	f002 fa6b 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8000db2:	6378      	str	r0, [r7, #52]	; 0x34
 8000db4:	e004      	b.n	8000dc0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000db6:	f002 fa67 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <HAL_InitTick+0xe4>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	0c9b      	lsrs	r3, r3, #18
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_InitTick+0xe8>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <HAL_InitTick+0xec>)
 8000dd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_InitTick+0xe8>)
 8000dd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_InitTick+0xe8>)
 8000dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_InitTick+0xe8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <HAL_InitTick+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_InitTick+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000df4:	4817      	ldr	r0, [pc, #92]	; (8000e54 <HAL_InitTick+0xe8>)
 8000df6:	f002 fec9 	bl	8003b8c <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d11b      	bne.n	8000e40 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e08:	4812      	ldr	r0, [pc, #72]	; (8000e54 <HAL_InitTick+0xe8>)
 8000e0a:	f002 ff21 	bl	8003c50 <HAL_TIM_Base_Start_IT>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d111      	bne.n	8000e40 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e1c:	2036      	movs	r0, #54	; 0x36
 8000e1e:	f000 feb3 	bl	8001b88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d808      	bhi.n	8000e3a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	2036      	movs	r0, #54	; 0x36
 8000e2e:	f000 fe8f 	bl	8001b50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_InitTick+0xf0>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	e002      	b.n	8000e40 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3738      	adds	r7, #56	; 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	2000055c 	.word	0x2000055c
 8000e58:	40001000 	.word	0x40001000
 8000e5c:	20000008 	.word	0x20000008

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USART3_IRQHandler+0x10>)
 8000e92:	f003 fb71 	bl	8004578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000494 	.word	0x20000494

08000ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIM6_DAC_IRQHandler+0x10>)
 8000ea6:	f002 ff4b 	bl	8003d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000055c 	.word	0x2000055c

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_kill>:

int _kill(int pid, int sig)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ece:	f010 fce5 	bl	801189c <__errno>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2216      	movs	r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_exit>:

void _exit (int status)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe7 	bl	8000ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef6:	e7fe      	b.n	8000ef6 <_exit+0x12>

08000ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4601      	mov	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
  }

  return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
  }
  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f92:	605a      	str	r2, [r3, #4]
  return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f010 fc4a 	bl	801189c <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20080000 	.word	0x20080000
 8001034:	00000400 	.word	0x00000400
 8001038:	200005ac 	.word	0x200005ac
 800103c:	2000de88 	.word	0x2000de88

08001040 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001070:	f005 ff38 	bl	8006ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001074:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <pvPortMallocMicroROS+0x180>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800107c:	f000 f98a 	bl	8001394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001080:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <pvPortMallocMicroROS+0x184>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	f040 8092 	bne.w	80011b2 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d01f      	beq.n	80010d4 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001094:	2208      	movs	r2, #8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d016      	beq.n	80010d4 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f023 0307 	bic.w	r3, r3, #7
 80010ac:	3308      	adds	r3, #8
 80010ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00c      	beq.n	80010d4 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010be:	b672      	cpsid	i
 80010c0:	f383 8811 	msr	BASEPRI, r3
 80010c4:	f3bf 8f6f 	isb	sy
 80010c8:	f3bf 8f4f 	dsb	sy
 80010cc:	b662      	cpsie	i
 80010ce:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80010d0:	bf00      	nop
 80010d2:	e7fe      	b.n	80010d2 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d06b      	beq.n	80011b2 <pvPortMallocMicroROS+0x14e>
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <pvPortMallocMicroROS+0x188>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d866      	bhi.n	80011b2 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <pvPortMallocMicroROS+0x18c>)
 80010e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80010e8:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <pvPortMallocMicroROS+0x18c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010ee:	e004      	b.n	80010fa <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	d903      	bls.n	800110c <pvPortMallocMicroROS+0xa8>
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f1      	bne.n	80010f0 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800110c:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <pvPortMallocMicroROS+0x180>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001112:	429a      	cmp	r2, r3
 8001114:	d04d      	beq.n	80011b2 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2208      	movs	r2, #8
 800111c:	4413      	add	r3, r2
 800111e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	1ad2      	subs	r2, r2, r3
 8001130:	2308      	movs	r3, #8
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	429a      	cmp	r2, r3
 8001136:	d921      	bls.n	800117c <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00c      	beq.n	8001164 <pvPortMallocMicroROS+0x100>
	__asm volatile
 800114a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114e:	b672      	cpsid	i
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	b662      	cpsie	i
 800115e:	613b      	str	r3, [r7, #16]
}
 8001160:	bf00      	nop
 8001162:	e7fe      	b.n	8001162 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001176:	69b8      	ldr	r0, [r7, #24]
 8001178:	f000 f96e 	bl	8001458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <pvPortMallocMicroROS+0x188>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <pvPortMallocMicroROS+0x188>)
 8001188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <pvPortMallocMicroROS+0x188>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <pvPortMallocMicroROS+0x190>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d203      	bcs.n	800119e <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <pvPortMallocMicroROS+0x188>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <pvPortMallocMicroROS+0x190>)
 800119c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <pvPortMallocMicroROS+0x184>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011b2:	f005 fea5 	bl	8006f00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00c      	beq.n	80011da <pvPortMallocMicroROS+0x176>
	__asm volatile
 80011c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c4:	b672      	cpsid	i
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	f3bf 8f6f 	isb	sy
 80011ce:	f3bf 8f4f 	dsb	sy
 80011d2:	b662      	cpsie	i
 80011d4:	60fb      	str	r3, [r7, #12]
}
 80011d6:	bf00      	nop
 80011d8:	e7fe      	b.n	80011d8 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 80011da:	69fb      	ldr	r3, [r7, #28]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200041b8 	.word	0x200041b8
 80011e8:	200041c4 	.word	0x200041c4
 80011ec:	200041bc 	.word	0x200041bc
 80011f0:	200041b0 	.word	0x200041b0
 80011f4:	200041c0 	.word	0x200041c0

080011f8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d04c      	beq.n	80012a4 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800120a:	2308      	movs	r3, #8
 800120c:	425b      	negs	r3, r3
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4413      	add	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <vPortFreeMicroROS+0xb4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10c      	bne.n	8001240 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122a:	b672      	cpsid	i
 800122c:	f383 8811 	msr	BASEPRI, r3
 8001230:	f3bf 8f6f 	isb	sy
 8001234:	f3bf 8f4f 	dsb	sy
 8001238:	b662      	cpsie	i
 800123a:	60fb      	str	r3, [r7, #12]
}
 800123c:	bf00      	nop
 800123e:	e7fe      	b.n	800123e <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00c      	beq.n	8001262 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124c:	b672      	cpsid	i
 800124e:	f383 8811 	msr	BASEPRI, r3
 8001252:	f3bf 8f6f 	isb	sy
 8001256:	f3bf 8f4f 	dsb	sy
 800125a:	b662      	cpsie	i
 800125c:	60bb      	str	r3, [r7, #8]
}
 800125e:	bf00      	nop
 8001260:	e7fe      	b.n	8001260 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <vPortFreeMicroROS+0xb4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d019      	beq.n	80012a4 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d115      	bne.n	80012a4 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <vPortFreeMicroROS+0xb4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001288:	f005 fe2c 	bl	8006ee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <vPortFreeMicroROS+0xb8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4413      	add	r3, r2
 8001296:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <vPortFreeMicroROS+0xb8>)
 8001298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800129a:	6938      	ldr	r0, [r7, #16]
 800129c:	f000 f8dc 	bl	8001458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80012a0:	f005 fe2e 	bl	8006f00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200041c4 	.word	0x200041c4
 80012b0:	200041bc 	.word	0x200041bc

080012b4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80012c0:	2308      	movs	r3, #8
 80012c2:	425b      	negs	r3, r3
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	4413      	add	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <getBlockSize+0x38>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

	return count;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200041c4 	.word	0x200041c4

080012f0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012fa:	f005 fdf3 	bl	8006ee4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f7ff feb0 	bl	8001064 <pvPortMallocMicroROS>
 8001304:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d017      	beq.n	800133c <pvPortReallocMicroROS+0x4c>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d014      	beq.n	800133c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffce 	bl	80012b4 <getBlockSize>
 8001318:	4603      	mov	r3, r0
 800131a:	2208      	movs	r2, #8
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d201      	bcs.n	800132c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f010 fb35 	bl	80119a0 <memcpy>

		vPortFreeMicroROS(pv);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff5e 	bl	80011f8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800133c:	f005 fde0 	bl	8006f00 <xTaskResumeAll>

	return newmem;
 8001340:	68bb      	ldr	r3, [r7, #8]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001354:	f005 fdc6 	bl	8006ee4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff fe7e 	bl	8001064 <pvPortMallocMicroROS>
 8001368:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800136e:	e004      	b.n	800137a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	613a      	str	r2, [r7, #16]
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	617a      	str	r2, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f5      	bne.n	8001370 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001384:	f005 fdbc 	bl	8006f00 <xTaskResumeAll>
  	return mem;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800139a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800139e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <prvHeapInit+0xac>)
 80013a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00c      	beq.n	80013c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3307      	adds	r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 0307 	bic.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <prvHeapInit+0xac>)
 80013c4:	4413      	add	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80013cc:	4a1d      	ldr	r2, [pc, #116]	; (8001444 <prvHeapInit+0xb0>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <prvHeapInit+0xb0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80013e0:	2208      	movs	r2, #8
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f023 0307 	bic.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <prvHeapInit+0xb4>)
 80013f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <prvHeapInit+0xb4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <prvHeapInit+0xb4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	1ad2      	subs	r2, r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <prvHeapInit+0xb4>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <prvHeapInit+0xb8>)
 8001422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a09      	ldr	r2, [pc, #36]	; (8001450 <prvHeapInit+0xbc>)
 800142a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <prvHeapInit+0xc0>)
 800142e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	200005b0 	.word	0x200005b0
 8001444:	200041b0 	.word	0x200041b0
 8001448:	200041b8 	.word	0x200041b8
 800144c:	200041c0 	.word	0x200041c0
 8001450:	200041bc 	.word	0x200041bc
 8001454:	200041c4 	.word	0x200041c4

08001458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <prvInsertBlockIntoFreeList+0xac>)
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e002      	b.n	800146c <prvInsertBlockIntoFreeList+0x14>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d8f7      	bhi.n	8001466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d108      	bne.n	800149a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	441a      	add	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	441a      	add	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d118      	bne.n	80014e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <prvInsertBlockIntoFreeList+0xb0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d00d      	beq.n	80014d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	441a      	add	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e008      	b.n	80014e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <prvInsertBlockIntoFreeList+0xb0>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e003      	b.n	80014e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d002      	beq.n	80014f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200041b0 	.word	0x200041b0
 8001508:	200041b8 	.word	0x200041b8

0800150c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <microros_allocate+0x3c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <microros_allocate+0x3c>)
 8001524:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <microros_allocate+0x40>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <microros_allocate+0x40>)
 8001534:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fd94 	bl	8001064 <pvPortMallocMicroROS>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200041c8 	.word	0x200041c8
 800154c:	200041cc 	.word	0x200041cc

08001550 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fea7 	bl	80012b4 <getBlockSize>
 8001566:	4603      	mov	r3, r0
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <microros_deallocate+0x34>)
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <microros_deallocate+0x34>)
 8001572:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fe3f 	bl	80011f8 <vPortFreeMicroROS>
  }
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200041cc 	.word	0x200041cc

08001588 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <microros_reallocate+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4413      	add	r3, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <microros_reallocate+0x64>)
 80015a2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <microros_reallocate+0x68>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4413      	add	r3, r2
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <microros_reallocate+0x68>)
 80015b2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80015ba:	68b8      	ldr	r0, [r7, #8]
 80015bc:	f7ff fd52 	bl	8001064 <pvPortMallocMicroROS>
 80015c0:	4603      	mov	r3, r0
 80015c2:	e00e      	b.n	80015e2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fe75 	bl	80012b4 <getBlockSize>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <microros_reallocate+0x68>)
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <microros_reallocate+0x68>)
 80015d6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff fe88 	bl	80012f0 <pvPortReallocMicroROS>
 80015e0:	4603      	mov	r3, r0
  }
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200041c8 	.word	0x200041c8
 80015f0:	200041cc 	.word	0x200041cc

080015f4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <microros_zero_allocate+0x48>)
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	4413      	add	r3, r2
 800160e:	461a      	mov	r2, r3
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <microros_zero_allocate+0x48>)
 8001612:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <microros_zero_allocate+0x4c>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	4413      	add	r3, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <microros_zero_allocate+0x4c>)
 8001626:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fe8d 	bl	800134a <pvPortCallocMicroROS>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200041c8 	.word	0x200041c8
 8001640:	200041cc 	.word	0x200041cc
 8001644:	00000000 	.word	0x00000000

08001648 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800165a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800165e:	a320      	add	r3, pc, #128	; (adr r3, 80016e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fe4e 	bl	8000304 <__aeabi_ldivmod>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001676:	a31a      	add	r3, pc, #104	; (adr r3, 80016e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe fe42 	bl	8000304 <__aeabi_ldivmod>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da20      	bge.n	80016ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <UTILS_NanosecondsToTimespec+0x90>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1712      	asrs	r2, r2, #28
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	6979      	ldr	r1, [r7, #20]
 80016a8:	17c8      	asrs	r0, r1, #31
 80016aa:	460c      	mov	r4, r1
 80016ac:	4605      	mov	r5, r0
 80016ae:	ebb2 0804 	subs.w	r8, r2, r4
 80016b2:	eb63 0905 	sbc.w	r9, r3, r5
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4906      	ldr	r1, [pc, #24]	; (80016dc <UTILS_NanosecondsToTimespec+0x94>)
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	441a      	add	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
    }
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016d8:	44b82fa1 	.word	0x44b82fa1
 80016dc:	3b9aca00 	.word	0x3b9aca00
 80016e0:	3b9aca00 	.word	0x3b9aca00
 80016e4:	00000000 	.word	0x00000000

080016e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b08e      	sub	sp, #56	; 0x38
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6278      	str	r0, [r7, #36]	; 0x24
 80016f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80016f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016f8:	2300      	movs	r3, #0
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	4618      	mov	r0, r3
 8001710:	f005 fe7c 	bl	800740c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	17da      	asrs	r2, r3, #31
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	61fa      	str	r2, [r7, #28]
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	69b9      	ldr	r1, [r7, #24]
 8001726:	000b      	movs	r3, r1
 8001728:	2200      	movs	r2, #0
 800172a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	2200      	movs	r2, #0
 8001732:	461c      	mov	r4, r3
 8001734:	4615      	mov	r5, r2
 8001736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800173a:	1911      	adds	r1, r2, r4
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	416b      	adcs	r3, r5
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001746:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800174a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	f04f 0400 	mov.w	r4, #0
 8001756:	f04f 0500 	mov.w	r5, #0
 800175a:	015d      	lsls	r5, r3, #5
 800175c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001760:	0154      	lsls	r4, r2, #5
 8001762:	4622      	mov	r2, r4
 8001764:	462b      	mov	r3, r5
 8001766:	ebb2 0800 	subs.w	r8, r2, r0
 800176a:	eb63 0901 	sbc.w	r9, r3, r1
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800177a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800177e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001782:	4690      	mov	r8, r2
 8001784:	4699      	mov	r9, r3
 8001786:	eb18 0a00 	adds.w	sl, r8, r0
 800178a:	eb49 0b01 	adc.w	fp, r9, r1
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800179a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800179e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017a2:	ebb2 040a 	subs.w	r4, r2, sl
 80017a6:	603c      	str	r4, [r7, #0]
 80017a8:	eb63 030b 	sbc.w	r3, r3, fp
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017b2:	4623      	mov	r3, r4
 80017b4:	181b      	adds	r3, r3, r0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	462b      	mov	r3, r5
 80017ba:	eb41 0303 	adc.w	r3, r1, r3
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	6a3a      	ldr	r2, [r7, #32]
 80017c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017c6:	f7ff ff3f 	bl	8001648 <UTILS_NanosecondsToTimespec>

    return 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	3738      	adds	r7, #56	; 0x38
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080017d8 <cubemx_transport_open>:
static uint8_t it_buffer[UART_IT_BUFFER_SIZE];
static uint8_t it_data;
static size_t it_head = 0, it_tail = 0;


bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80017e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_IT(uart, &it_data, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	4904      	ldr	r1, [pc, #16]	; (80017fc <cubemx_transport_open+0x24>)
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f002 fd59 	bl	80042a4 <HAL_UART_Receive_IT>
    return true;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200049d0 	.word	0x200049d0

08001800 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800180e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Abort_IT(uart);
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f002 fd8b 	bl	800432c <HAL_UART_Abort_IT>
    return true;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001834:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800183a:	2b20      	cmp	r3, #32
 800183c:	d11a      	bne.n	8001874 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_IT(uart, buf, len);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	b29b      	uxth	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f002 fcce 	bl	80041e8 <HAL_UART_Transmit_IT>
 800184c:	4603      	mov	r3, r0
 800184e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001850:	e002      	b.n	8001858 <cubemx_transport_write+0x38>
            osDelay(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f004 fadc 	bl	8005e10 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001858:	7cfb      	ldrb	r3, [r7, #19]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <cubemx_transport_write+0x46>
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001862:	2b20      	cmp	r3, #32
 8001864:	d1f5      	bne.n	8001852 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <cubemx_transport_write+0x50>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	e002      	b.n	8001876 <cubemx_transport_write+0x56>
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001874:	2300      	movs	r3, #0
    }
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
    size_t wrote = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 8001892:	e011      	b.n	80018b8 <cubemx_transport_read+0x38>
        buf[wrote] = it_buffer[it_head];
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <cubemx_transport_read+0x5c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	440b      	add	r3, r1
 800189e:	4910      	ldr	r1, [pc, #64]	; (80018e0 <cubemx_transport_read+0x60>)
 80018a0:	5c8a      	ldrb	r2, [r1, r2]
 80018a2:	701a      	strb	r2, [r3, #0]
        it_head = (it_head + 1) % UART_IT_BUFFER_SIZE;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <cubemx_transport_read+0x5c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <cubemx_transport_read+0x5c>)
 80018b0:	6013      	str	r3, [r2, #0]
        wrote++;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <cubemx_transport_read+0x5c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <cubemx_transport_read+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d003      	beq.n	80018cc <cubemx_transport_read+0x4c>
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d3e3      	bcc.n	8001894 <cubemx_transport_read+0x14>
    }

    return wrote;
 80018cc:	697b      	ldr	r3, [r7, #20]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200049d4 	.word	0x200049d4
 80018e0:	200041d0 	.word	0x200041d0
 80018e4:	200049d8 	.word	0x200049d8

080018e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
    if(it_tail == UART_IT_BUFFER_SIZE)
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_UART_RxCpltCallback+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f8:	d102      	bne.n	8001900 <HAL_UART_RxCpltCallback+0x18>
        it_tail = 0;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_UART_RxCpltCallback+0x40>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

    it_buffer[it_tail] = it_data;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_UART_RxCpltCallback+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_UART_RxCpltCallback+0x44>)
 8001906:	7811      	ldrb	r1, [r2, #0]
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_UART_RxCpltCallback+0x48>)
 800190a:	54d1      	strb	r1, [r2, r3]
    it_tail++;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_UART_RxCpltCallback+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <HAL_UART_RxCpltCallback+0x40>)
 8001914:	6013      	str	r3, [r2, #0]

    HAL_UART_Receive_IT(huart, &it_data, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	4904      	ldr	r1, [pc, #16]	; (800192c <HAL_UART_RxCpltCallback+0x44>)
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f002 fcc2 	bl	80042a4 <HAL_UART_Receive_IT>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200049d8 	.word	0x200049d8
 800192c:	200049d0 	.word	0x200049d0
 8001930:	200041d0 	.word	0x200041d0

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195e:	f7ff fb6f 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f00f ffe9 	bl	8011938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7fe fed5 	bl	8000714 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800196c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	20000474 	.word	0x20000474
  ldr r2, =_sidata
 8001978:	08015a04 	.word	0x08015a04
  ldr r2, =_sbss
 800197c:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 8001980:	2000de84 	.word	0x2000de84

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>

08001986 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198a:	2003      	movs	r0, #3
 800198c:	f000 f8d5 	bl	8001b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff f9eb 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001996:	f7ff f959 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	200049dc 	.word	0x200049dc

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200049dc 	.word	0x200049dc

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	05fa0000 	.word	0x05fa0000

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff4c 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b62:	f7ff ff61 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	6978      	ldr	r0, [r7, #20]
 8001b6e:	f7ff ffb1 	bl	8001ad4 <NVIC_EncodePriority>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff80 	bl	8001a80 <__NVIC_SetPriority>
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff54 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb2:	f7ff ff09 	bl	80019c8 <HAL_GetTick>
 8001bb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d008      	beq.n	8001bd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e052      	b.n	8001c7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0216 	bic.w	r2, r2, #22
 8001be4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d103      	bne.n	8001c06 <HAL_DMA_Abort+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0208 	bic.w	r2, r2, #8
 8001c14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c26:	e013      	b.n	8001c50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c28:	f7ff fece 	bl	80019c8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d90c      	bls.n	8001c50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e015      	b.n	8001c7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1e4      	bne.n	8001c28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	223f      	movs	r2, #63	; 0x3f
 8001c64:	409a      	lsls	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d004      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00c      	b.n	8001cbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e175      	b.n	8001fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8164 	bne.w	8001fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x56>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80be 	beq.w	8001fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e6a:	4a61      	ldr	r2, [pc, #388]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_GPIO_Init+0x32c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d037      	beq.n	8001f06 <HAL_GPIO_Init+0x23e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_GPIO_Init+0x330>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d031      	beq.n	8001f02 <HAL_GPIO_Init+0x23a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a56      	ldr	r2, [pc, #344]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x236>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_GPIO_Init+0x338>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x232>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a54      	ldr	r2, [pc, #336]	; (8002004 <HAL_GPIO_Init+0x33c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x22e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a53      	ldr	r2, [pc, #332]	; (8002008 <HAL_GPIO_Init+0x340>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x22a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x344>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_GPIO_Init+0x348>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x34c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x350>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x21a>
 8001ede:	2309      	movs	r3, #9
 8001ee0:	e012      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	e010      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e00e      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eea:	2307      	movs	r3, #7
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f06:	2300      	movs	r3, #0
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f18:	4935      	ldr	r1, [pc, #212]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b32      	ldr	r3, [pc, #200]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	f67f ae86 	bls.w	8001ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00
 8002014:	40022000 	.word	0x40022000
 8002018:	40022400 	.word	0x40022400
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43d9      	mvns	r1, r3
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	400b      	ands	r3, r1
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	460b      	mov	r3, r1
 8002096:	817b      	strh	r3, [r7, #10]
 8002098:	4613      	mov	r3, r2
 800209a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	f040 80da 	bne.w	800225e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_I2C_Master_Transmit+0x30>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0d3      	b.n	8002260 <HAL_I2C_Master_Transmit+0x1d8>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c0:	f7ff fc82 	bl	80019c8 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2319      	movs	r3, #25
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9e6 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0be      	b.n	8002260 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2221      	movs	r2, #33	; 0x21
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2210      	movs	r2, #16
 80020ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	893a      	ldrh	r2, [r7, #8]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	d90e      	bls.n	8002132 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	b2da      	uxtb	r2, r3
 8002120:	8979      	ldrh	r1, [r7, #10]
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_I2C_Master_Transmit+0x1e0>)
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fbd0 	bl	80028d0 <I2C_TransferConfig>
 8002130:	e06c      	b.n	800220c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	b2da      	uxtb	r2, r3
 8002142:	8979      	ldrh	r1, [r7, #10]
 8002144:	4b48      	ldr	r3, [pc, #288]	; (8002268 <HAL_I2C_Master_Transmit+0x1e0>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fbbf 	bl	80028d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002152:	e05b      	b.n	800220c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	6a39      	ldr	r1, [r7, #32]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f9e3 	bl	8002524 <I2C_WaitOnTXISFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e07b      	b.n	8002260 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d034      	beq.n	800220c <HAL_I2C_Master_Transmit+0x184>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d130      	bne.n	800220c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f975 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e04d      	b.n	8002260 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d90e      	bls.n	80021ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	8979      	ldrh	r1, [r7, #10]
 80021dc:	2300      	movs	r3, #0
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fb73 	bl	80028d0 <I2C_TransferConfig>
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	2300      	movs	r3, #0
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fb62 	bl	80028d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d19e      	bne.n	8002154 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f9c2 	bl	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e01a      	b.n	8002260 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2220      	movs	r2, #32
 8002230:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_I2C_Master_Transmit+0x1e4>)
 800223e:	400b      	ands	r3, r1
 8002240:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	80002000 	.word	0x80002000
 800226c:	fe00e800 	.word	0xfe00e800

08002270 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	461a      	mov	r2, r3
 800227c:	460b      	mov	r3, r1
 800227e:	817b      	strh	r3, [r7, #10]
 8002280:	4613      	mov	r3, r2
 8002282:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b20      	cmp	r3, #32
 800228e:	f040 80db 	bne.w	8002448 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2C_Master_Receive+0x30>
 800229c:	2302      	movs	r3, #2
 800229e:	e0d4      	b.n	800244a <HAL_I2C_Master_Receive+0x1da>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022a8:	f7ff fb8e 	bl	80019c8 <HAL_GetTick>
 80022ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2319      	movs	r3, #25
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f8f2 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0bf      	b.n	800244a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2222      	movs	r2, #34	; 0x22
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2210      	movs	r2, #16
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2bff      	cmp	r3, #255	; 0xff
 80022fa:	d90e      	bls.n	800231a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	b2da      	uxtb	r2, r3
 8002308:	8979      	ldrh	r1, [r7, #10]
 800230a:	4b52      	ldr	r3, [pc, #328]	; (8002454 <HAL_I2C_Master_Receive+0x1e4>)
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fadc 	bl	80028d0 <I2C_TransferConfig>
 8002318:	e06d      	b.n	80023f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	b2da      	uxtb	r2, r3
 800232a:	8979      	ldrh	r1, [r7, #10]
 800232c:	4b49      	ldr	r3, [pc, #292]	; (8002454 <HAL_I2C_Master_Receive+0x1e4>)
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 facb 	bl	80028d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800233a:	e05c      	b.n	80023f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	6a39      	ldr	r1, [r7, #32]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f96b 	bl	800261c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e07c      	b.n	800244a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d034      	beq.n	80023f6 <HAL_I2C_Master_Receive+0x186>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d130      	bne.n	80023f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2200      	movs	r2, #0
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f880 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e04d      	b.n	800244a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2bff      	cmp	r3, #255	; 0xff
 80023b6:	d90e      	bls.n	80023d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	22ff      	movs	r2, #255	; 0xff
 80023bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	8979      	ldrh	r1, [r7, #10]
 80023c6:	2300      	movs	r3, #0
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fa7e 	bl	80028d0 <I2C_TransferConfig>
 80023d4:	e00f      	b.n	80023f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	8979      	ldrh	r1, [r7, #10]
 80023e8:	2300      	movs	r3, #0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fa6d 	bl	80028d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d19d      	bne.n	800233c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6a39      	ldr	r1, [r7, #32]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f8cd 	bl	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e01a      	b.n	800244a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2220      	movs	r2, #32
 800241a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_I2C_Master_Receive+0x1e8>)
 8002428:	400b      	ands	r3, r1
 800242a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	80002400 	.word	0x80002400
 8002458:	fe00e800 	.word	0xfe00e800

0800245c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b02      	cmp	r3, #2
 8002470:	d103      	bne.n	800247a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d007      	beq.n	8002498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	619a      	str	r2, [r3, #24]
  }
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b4:	e022      	b.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024bc:	d01e      	beq.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024be:	f7ff fa83 	bl	80019c8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d113      	bne.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00f      	b.n	800251c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	429a      	cmp	r2, r3
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	429a      	cmp	r2, r3
 8002518:	d0cd      	beq.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002530:	e02c      	b.n	800258c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8ea 	bl	8002710 <I2C_IsErrorOccurred>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e02a      	b.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254c:	d01e      	beq.n	800258c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff fa3b 	bl	80019c8 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d113      	bne.n	800258c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e007      	b.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d1cb      	bne.n	8002532 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b0:	e028      	b.n	8002604 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f8aa 	bl	8002710 <I2C_IsErrorOccurred>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e026      	b.n	8002614 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c6:	f7ff f9ff 	bl	80019c8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d113      	bne.n	8002604 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d1cf      	bne.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002628:	e064      	b.n	80026f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f86e 	bl	8002710 <I2C_IsErrorOccurred>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e062      	b.n	8002704 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b20      	cmp	r3, #32
 800264a:	d138      	bne.n	80026be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d105      	bne.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e04e      	b.n	8002704 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d107      	bne.n	8002684 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2210      	movs	r2, #16
 800267a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2204      	movs	r2, #4
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
 8002682:	e002      	b.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e022      	b.n	8002704 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7ff f983 	bl	80019c8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10f      	bne.n	80026f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d193      	bne.n	800262a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	fe00e800 	.word	0xfe00e800

08002710 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d068      	beq.n	800280e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2210      	movs	r2, #16
 8002742:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002744:	e049      	b.n	80027da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274c:	d045      	beq.n	80027da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff f93b 	bl	80019c8 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_IsErrorOccurred+0x54>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13a      	bne.n	80027da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002776:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002786:	d121      	bne.n	80027cc <I2C_IsErrorOccurred+0xbc>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278e:	d01d      	beq.n	80027cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b20      	cmp	r3, #32
 8002794:	d01a      	beq.n	80027cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027a6:	f7ff f90f 	bl	80019c8 <HAL_GetTick>
 80027aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e00e      	b.n	80027cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027ae:	f7ff f90b 	bl	80019c8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b19      	cmp	r3, #25
 80027ba:	d907      	bls.n	80027cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f043 0320 	orr.w	r3, r3, #32
 80027c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80027ca:	e006      	b.n	80027da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d1e9      	bne.n	80027ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d003      	beq.n	80027f0 <I2C_IsErrorOccurred+0xe0>
 80027e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0aa      	beq.n	8002746 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2220      	movs	r2, #32
 80027fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002830:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002852:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002874:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800287c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01c      	beq.n	80028be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fde9 	bl	800245c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <I2C_IsErrorOccurred+0x1bc>)
 8002896:	400b      	ands	r3, r1
 8002898:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	fe00e800 	.word	0xfe00e800

080028d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	817b      	strh	r3, [r7, #10]
 80028de:	4613      	mov	r3, r2
 80028e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028e8:	7a7b      	ldrb	r3, [r7, #9]
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	0d5b      	lsrs	r3, r3, #21
 800290a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <I2C_TransferConfig+0x60>)
 8002910:	430b      	orrs	r3, r1
 8002912:	43db      	mvns	r3, r3
 8002914:	ea02 0103 	and.w	r1, r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	03ff63ff 	.word	0x03ff63ff

08002934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e29b      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8087 	beq.w	8002a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002958:	4b96      	ldr	r3, [pc, #600]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d00c      	beq.n	800297e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002964:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d112      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
 8002970:	4b90      	ldr	r3, [pc, #576]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297c:	d10b      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	4b8d      	ldr	r3, [pc, #564]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x130>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d168      	bne.n	8002a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e275      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x7a>
 80029a0:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a83      	ldr	r2, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x9c>
 80029b6:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b7c      	ldr	r3, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7b      	ldr	r2, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a75      	ldr	r2, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b73      	ldr	r3, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a72      	ldr	r2, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029f4:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6e      	ldr	r2, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6b      	ldr	r2, [pc, #428]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe ffd8 	bl	80019c8 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe ffd4 	bl	80019c8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e229      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe ffc4 	bl	80019c8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe ffc0 	bl	80019c8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e215      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x110>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d069      	beq.n	8002b46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x190>
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x17a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1e9      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	493d      	ldr	r1, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	e040      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d023      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe ff76 	bl	80019c8 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae0:	f7fe ff72 	bl	80019c8 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1c7      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4929      	ldr	r1, [pc, #164]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
 8002b12:	e018      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a26      	ldr	r2, [pc, #152]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe ff52 	bl	80019c8 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe ff4e 	bl	80019c8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1a3      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d038      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d019      	beq.n	8002b8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe ff2f 	bl	80019c8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe ff2b 	bl	80019c8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e180      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x23a>
 8002b8c:	e01a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe ff15 	bl	80019c8 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe ff11 	bl	80019c8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d903      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e166      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
 8002bb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80a4 	beq.w	8002d1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd2:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b89      	ldr	r3, [pc, #548]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a88      	ldr	r2, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b86      	ldr	r3, [pc, #536]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfa:	4b83      	ldr	r3, [pc, #524]	; (8002e08 <HAL_RCC_OscConfig+0x4d4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d118      	bne.n	8002c38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c06:	4b80      	ldr	r3, [pc, #512]	; (8002e08 <HAL_RCC_OscConfig+0x4d4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7f      	ldr	r2, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x4d4>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fed9 	bl	80019c8 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1a:	f7fe fed5 	bl	80019c8 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b64      	cmp	r3, #100	; 0x64
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e12a      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2c:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x4d4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x31a>
 8002c40:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a6f      	ldr	r2, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	e02d      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x33c>
 8002c56:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a67      	ldr	r2, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	e01c      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCC_OscConfig+0x35e>
 8002c78:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a61      	ldr	r2, [pc, #388]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a5e      	ldr	r2, [pc, #376]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e00b      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
 8002c92:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a5b      	ldr	r2, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fe89 	bl	80019c8 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fe85 	bl	80019c8 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0d8      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <HAL_RCC_OscConfig+0x386>
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe fe73 	bl	80019c8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fe6f 	bl	80019c8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0c2      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80ae 	beq.w	8002e80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d24:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d06d      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d14b      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fe40 	bl	80019c8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fe3c 	bl	80019c8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e091      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	071b      	lsls	r3, r3, #28
 8002d96:	491b      	ldr	r1, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe0e 	bl	80019c8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fe0a 	bl	80019c8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e05f      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x47c>
 8002dce:	e057      	b.n	8002e80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fdf4 	bl	80019c8 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe fdf0 	bl	80019c8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e045      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4b0>
 8002e02:	e03d      	b.n	8002e80 <HAL_RCC_OscConfig+0x54c>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_RCC_OscConfig+0x558>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d030      	beq.n	8002e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d129      	bne.n	8002e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d122      	bne.n	8002e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d119      	bne.n	8002e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d10f      	bne.n	8002e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0d0      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d910      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b67      	ldr	r3, [pc, #412]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	4965      	ldr	r1, [pc, #404]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b63      	ldr	r3, [pc, #396]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b8      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef0:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	494d      	ldr	r1, [pc, #308]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d040      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d115      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e07f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e073      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e06b      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4936      	ldr	r1, [pc, #216]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fe fd20 	bl	80019c8 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe fd1c 	bl	80019c8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e053      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b27      	ldr	r3, [pc, #156]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d210      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 020f 	bic.w	r2, r3, #15
 8002fca:	4922      	ldr	r1, [pc, #136]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e032      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4916      	ldr	r1, [pc, #88]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	490e      	ldr	r1, [pc, #56]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003022:	f000 f821 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003026:	4602      	mov	r2, r0
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	490a      	ldr	r1, [pc, #40]	; (800305c <HAL_RCC_ClockConfig+0x1cc>)
 8003034:	5ccb      	ldrb	r3, [r1, r3]
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1d0>)
 800303c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1d4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fe92 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023c00 	.word	0x40023c00
 8003058:	40023800 	.word	0x40023800
 800305c:	08014a8c 	.word	0x08014a8c
 8003060:	20000004 	.word	0x20000004
 8003064:	20000008 	.word	0x20000008

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b094      	sub	sp, #80	; 0x50
 800306e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	647b      	str	r3, [r7, #68]	; 0x44
 8003074:	2300      	movs	r3, #0
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003078:	2300      	movs	r3, #0
 800307a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003080:	4b79      	ldr	r3, [pc, #484]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d00d      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x40>
 800308c:	2b08      	cmp	r3, #8
 800308e:	f200 80e1 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x34>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800309a:	e0db      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b73      	ldr	r3, [pc, #460]	; (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a0:	e0db      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030a2:	4b72      	ldr	r3, [pc, #456]	; (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a6:	e0d8      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a8:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d063      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030be:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	2200      	movs	r2, #0
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
 80030d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	0159      	lsls	r1, r3, #5
 80030e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ec:	0150      	lsls	r0, r2, #5
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4621      	mov	r1, r4
 80030f4:	1a51      	subs	r1, r2, r1
 80030f6:	6139      	str	r1, [r7, #16]
 80030f8:	4629      	mov	r1, r5
 80030fa:	eb63 0301 	sbc.w	r3, r3, r1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800310c:	4659      	mov	r1, fp
 800310e:	018b      	lsls	r3, r1, #6
 8003110:	4651      	mov	r1, sl
 8003112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003116:	4651      	mov	r1, sl
 8003118:	018a      	lsls	r2, r1, #6
 800311a:	4651      	mov	r1, sl
 800311c:	ebb2 0801 	subs.w	r8, r2, r1
 8003120:	4659      	mov	r1, fp
 8003122:	eb63 0901 	sbc.w	r9, r3, r1
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313a:	4690      	mov	r8, r2
 800313c:	4699      	mov	r9, r3
 800313e:	4623      	mov	r3, r4
 8003140:	eb18 0303 	adds.w	r3, r8, r3
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	462b      	mov	r3, r5
 8003148:	eb49 0303 	adc.w	r3, r9, r3
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800315a:	4629      	mov	r1, r5
 800315c:	028b      	lsls	r3, r1, #10
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003164:	4621      	mov	r1, r4
 8003166:	028a      	lsls	r2, r1, #10
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316e:	2200      	movs	r2, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
 8003172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003178:	f7fd f914 	bl	80003a4 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003184:	e058      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	2200      	movs	r2, #0
 800318e:	4618      	mov	r0, r3
 8003190:	4611      	mov	r1, r2
 8003192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	0159      	lsls	r1, r3, #5
 80031ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b2:	0150      	lsls	r0, r2, #5
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4641      	mov	r1, r8
 80031ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d8:	ebb2 040a 	subs.w	r4, r2, sl
 80031dc:	eb63 050b 	sbc.w	r5, r3, fp
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	00eb      	lsls	r3, r5, #3
 80031ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ee:	00e2      	lsls	r2, r4, #3
 80031f0:	4614      	mov	r4, r2
 80031f2:	461d      	mov	r5, r3
 80031f4:	4643      	mov	r3, r8
 80031f6:	18e3      	adds	r3, r4, r3
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	464b      	mov	r3, r9
 80031fc:	eb45 0303 	adc.w	r3, r5, r3
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320e:	4629      	mov	r1, r5
 8003210:	028b      	lsls	r3, r1, #10
 8003212:	4621      	mov	r1, r4
 8003214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003218:	4621      	mov	r1, r4
 800321a:	028a      	lsls	r2, r1, #10
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	61fa      	str	r2, [r7, #28]
 8003228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322c:	f7fd f8ba 	bl	80003a4 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800324a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003252:	e002      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800325c:	4618      	mov	r0, r3
 800325e:	3750      	adds	r7, #80	; 0x50
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	00f42400 	.word	0x00f42400

08003270 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_RCC_GetHCLKFreq+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000004 	.word	0x20000004

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800328c:	f7ff fff0 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08014a9c 	.word	0x08014a9c

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b4:	f7ff ffdc 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0b5b      	lsrs	r3, r3, #13
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08014a9c 	.word	0x08014a9c

080032d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	220f      	movs	r2, #15
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RCC_GetClockConfig+0x60>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 020f 	and.w	r2, r3, #15
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	601a      	str	r2, [r3, #0]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40023c00 	.word	0x40023c00

0800333c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003364:	4b69      	ldr	r3, [pc, #420]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a68      	ldr	r2, [pc, #416]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800336e:	6093      	str	r3, [r2, #8]
 8003370:	4b66      	ldr	r3, [pc, #408]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	4964      	ldr	r1, [pc, #400]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	4959      	ldr	r1, [pc, #356]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d017      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033d2:	4b4e      	ldr	r3, [pc, #312]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	494a      	ldr	r1, [pc, #296]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033fe:	2301      	movs	r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 808b 	beq.w	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4a39      	ldr	r2, [pc, #228]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	; 0x40
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a34      	ldr	r2, [pc, #208]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003444:	f7fe fac0 	bl	80019c8 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe fabc 	bl	80019c8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e38f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800346a:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d035      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	429a      	cmp	r2, r3
 8003486:	d02e      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003490:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a1d      	ldr	r2, [pc, #116]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a1a      	ldr	r2, [pc, #104]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d114      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fa84 	bl	80019c8 <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	e00a      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fe fa80 	bl	80019c8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e351      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ee      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f2:	d111      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003502:	400b      	ands	r3, r1
 8003504:	4901      	ldr	r1, [pc, #4]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
 800350a:	e00b      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	0ffffcff 	.word	0x0ffffcff
 8003518:	4bac      	ldr	r3, [pc, #688]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4aab      	ldr	r2, [pc, #684]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003522:	6093      	str	r3, [r2, #8]
 8003524:	4ba9      	ldr	r3, [pc, #676]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	49a6      	ldr	r1, [pc, #664]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003532:	4313      	orrs	r3, r2
 8003534:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003542:	4ba2      	ldr	r3, [pc, #648]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003548:	4aa0      	ldr	r2, [pc, #640]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003552:	4b9e      	ldr	r3, [pc, #632]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003554:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	499b      	ldr	r1, [pc, #620]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003570:	4b96      	ldr	r3, [pc, #600]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357e:	4993      	ldr	r1, [pc, #588]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003592:	4b8e      	ldr	r3, [pc, #568]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a0:	498a      	ldr	r1, [pc, #552]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b4:	4b85      	ldr	r3, [pc, #532]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	4982      	ldr	r1, [pc, #520]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035d6:	4b7d      	ldr	r3, [pc, #500]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4979      	ldr	r1, [pc, #484]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f8:	4b74      	ldr	r3, [pc, #464]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4971      	ldr	r1, [pc, #452]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800361a:	4b6c      	ldr	r3, [pc, #432]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f023 020c 	bic.w	r2, r3, #12
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	4968      	ldr	r1, [pc, #416]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363c:	4b63      	ldr	r3, [pc, #396]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	4960      	ldr	r1, [pc, #384]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	4957      	ldr	r1, [pc, #348]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003680:	4b52      	ldr	r3, [pc, #328]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	494f      	ldr	r1, [pc, #316]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036a2:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	4946      	ldr	r1, [pc, #280]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036c4:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	493e      	ldr	r1, [pc, #248]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f4:	4935      	ldr	r1, [pc, #212]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003708:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	492d      	ldr	r1, [pc, #180]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003738:	4924      	ldr	r1, [pc, #144]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003748:	d101      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800374a:	2301      	movs	r3, #1
 800374c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800375a:	2301      	movs	r3, #1
 800375c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	4914      	ldr	r1, [pc, #80]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379c:	490b      	ldr	r1, [pc, #44]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	4902      	ldr	r1, [pc, #8]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037dc:	4b8a      	ldr	r3, [pc, #552]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	4986      	ldr	r1, [pc, #536]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003800:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003806:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	497d      	ldr	r1, [pc, #500]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d006      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80d6 	beq.w	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800382c:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a75      	ldr	r2, [pc, #468]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003838:	f7fe f8c6 	bl	80019c8 <HAL_GetTick>
 800383c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003840:	f7fe f8c2 	bl	80019c8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e195      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003852:	4b6d      	ldr	r3, [pc, #436]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d021      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11d      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003872:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003886:	0e1b      	lsrs	r3, r3, #24
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	019a      	lsls	r2, r3, #6
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	431a      	orrs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	071b      	lsls	r3, r3, #28
 80038a6:	4958      	ldr	r1, [pc, #352]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d02e      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d8:	d129      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038da:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ee:	0f1b      	lsrs	r3, r3, #28
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	493e      	ldr	r1, [pc, #248]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003916:	4b3c      	ldr	r3, [pc, #240]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	f023 021f 	bic.w	r2, r3, #31
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	3b01      	subs	r3, #1
 8003926:	4938      	ldr	r1, [pc, #224]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01d      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800393a:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003948:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394e:	0f1b      	lsrs	r3, r3, #28
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	019a      	lsls	r2, r3, #6
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	4926      	ldr	r1, [pc, #152]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d011      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	019a      	lsls	r2, r3, #6
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	041b      	lsls	r3, r3, #16
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	061b      	lsls	r3, r3, #24
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	071b      	lsls	r3, r3, #28
 800399e:	491a      	ldr	r1, [pc, #104]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b2:	f7fe f809 	bl	80019c8 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ba:	f7fe f805 	bl	80019c8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b64      	cmp	r3, #100	; 0x64
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0d8      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 80ce 	bne.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd ffec 	bl	80019c8 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f2:	e00b      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f4:	f7fd ffe8 	bl	80019c8 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d904      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0bb      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a18:	d0ec      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02e      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d12a      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a42:	4b51      	ldr	r3, [pc, #324]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a50:	4b4d      	ldr	r3, [pc, #308]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	0f1b      	lsrs	r3, r3, #28
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	019a      	lsls	r2, r3, #6
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	4944      	ldr	r1, [pc, #272]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a7e:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	493d      	ldr	r1, [pc, #244]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aac:	d11d      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	0e1b      	lsrs	r3, r3, #24
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003abc:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	0f1b      	lsrs	r3, r3, #28
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	019a      	lsls	r2, r3, #6
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	071b      	lsls	r3, r3, #28
 8003ae2:	4929      	ldr	r1, [pc, #164]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b04:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	019a      	lsls	r2, r3, #6
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	071b      	lsls	r3, r3, #28
 8003b2a:	4917      	ldr	r1, [pc, #92]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4911      	ldr	r1, [pc, #68]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fd ff38 	bl	80019c8 <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b5c:	f7fd ff34 	bl	80019c8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e007      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7a:	d1ef      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e049      	b.n	8003c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f841 	bl	8003c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fa00 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e054      	b.n	8003d12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d022      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d01d      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d018      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <HAL_TIM_Base_Start_IT+0xe0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d115      	bne.n	8003cfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_TIM_Base_Start_IT+0xec>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d015      	beq.n	8003d0e <HAL_TIM_Base_Start_IT+0xbe>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d011      	beq.n	8003d0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	e008      	b.n	8003d0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40010400 	.word	0x40010400
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40001800 	.word	0x40001800
 8003d3c:	00010007 	.word	0x00010007

08003d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d122      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0202 	mvn.w	r2, #2
 8003d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f905 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8f7 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f908 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0204 	mvn.w	r2, #4
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8db 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8cd 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f8de 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0208 	mvn.w	r2, #8
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8b1 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8a3 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8b4 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0210 	mvn.w	r2, #16
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f887 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f879 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f88a 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0201 	mvn.w	r2, #1
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fc feac 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f91a 	bl	8004124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efe:	d10e      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d107      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f90d 	bl	8004138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d10e      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d107      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f838 	bl	8003fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d10e      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d107      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f06f 0220 	mvn.w	r2, #32
 8003f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8cd 	bl	8004110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d00f      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d027      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2c      	ldr	r2, [pc, #176]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d023      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d017      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <TIM_Base_SetConfig+0x130>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <TIM_Base_SetConfig+0x134>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a24      	ldr	r2, [pc, #144]	; (8004108 <TIM_Base_SetConfig+0x138>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <TIM_Base_SetConfig+0x13c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d103      	bne.n	80040d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	615a      	str	r2, [r3, #20]
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800
 8004104:	40001800 	.word	0x40001800
 8004108:	40001c00 	.word	0x40001c00
 800410c:	40002000 	.word	0x40002000

08004110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e040      	b.n	80041e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fd94 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	; 0x24
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fd10 	bl	8004bb0 <UART_SetConfig>
 8004190:	4603      	mov	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e022      	b.n	80041e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 ff68 	bl	8005078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 ffef 	bl	80051bc <UART_CheckIdleState>
 80041de:	4603      	mov	r3, r0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b08b      	sub	sp, #44	; 0x2c
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d147      	bne.n	800428e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_UART_Transmit_IT+0x22>
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e040      	b.n	8004290 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2221      	movs	r2, #33	; 0x21
 8004236:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004240:	d107      	bne.n	8004252 <HAL_UART_Transmit_IT+0x6a>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <HAL_UART_Transmit_IT+0xb4>)
 800424e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004250:	e002      	b.n	8004258 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <HAL_UART_Transmit_IT+0xb8>)
 8004256:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	613b      	str	r3, [r7, #16]
   return(result);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	69f9      	ldr	r1, [r7, #28]
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	61bb      	str	r3, [r7, #24]
   return(result);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e6      	bne.n	8004258 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	372c      	adds	r7, #44	; 0x2c
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	08005803 	.word	0x08005803
 80042a0:	0800574d 	.word	0x0800574d

080042a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d132      	bne.n	8004322 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Receive_IT+0x24>
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e02b      	b.n	8004324 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d018      	beq.n	8004312 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	613b      	str	r3, [r7, #16]
   return(result);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	69f9      	ldr	r1, [r7, #28]
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	61bb      	str	r3, [r7, #24]
   return(result);
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e6      	bne.n	80042e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	461a      	mov	r2, r3
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f001 f863 	bl	80053e4 <UART_Start_Receive_IT>
 800431e:	4603      	mov	r3, r0
 8004320:	e000      	b.n	8004324 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b0a2      	sub	sp, #136	; 0x88
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8004334:	2301      	movs	r3, #1
 8004336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800434e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800435c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004362:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800436a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e4      	bne.n	800433a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3308      	adds	r3, #8
 8004376:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3308      	adds	r3, #8
 800438e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004390:	65ba      	str	r2, [r7, #88]	; 0x58
 8004392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800439e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e5      	bne.n	8004370 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d118      	bne.n	80043de <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043bc:	f023 0310 	bic.w	r3, r3, #16
 80043c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ca:	647b      	str	r3, [r7, #68]	; 0x44
 80043cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e6      	bne.n	80043ac <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00f      	beq.n	8004406 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d104      	bne.n	80043fe <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	4a5d      	ldr	r2, [pc, #372]	; (8004570 <HAL_UART_Abort_IT+0x244>)
 80043fa:	651a      	str	r2, [r3, #80]	; 0x50
 80043fc:	e003      	b.n	8004406 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	2200      	movs	r2, #0
 8004404:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00f      	beq.n	800442e <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d104      	bne.n	8004426 <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	4a54      	ldr	r2, [pc, #336]	; (8004574 <HAL_UART_Abort_IT+0x248>)
 8004422:	651a      	str	r2, [r3, #80]	; 0x50
 8004424:	e003      	b.n	800442e <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	2200      	movs	r2, #0
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d12d      	bne.n	8004498 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	623b      	str	r3, [r7, #32]
   return(result);
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004452:	677b      	str	r3, [r7, #116]	; 0x74
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800445c:	633a      	str	r2, [r7, #48]	; 0x30
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00f      	beq.n	8004498 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd fc01 	bl	8001c84 <HAL_DMA_Abort_IT>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	2200      	movs	r2, #0
 800448e:	651a      	str	r2, [r3, #80]	; 0x50
 8004490:	e002      	b.n	8004498 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d130      	bne.n	8004508 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044bc:	673b      	str	r3, [r7, #112]	; 0x70
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80044c6:	61fa      	str	r2, [r7, #28]
 80044c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69b9      	ldr	r1, [r7, #24]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	617b      	str	r3, [r7, #20]
   return(result);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fbcc 	bl	8001c84 <HAL_DMA_Abort_IT>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	2200      	movs	r2, #0
 80044f8:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004500:	e002      	b.n	8004508 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8004508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800450c:	2b01      	cmp	r3, #1
 800450e:	d12a      	bne.n	8004566 <HAL_UART_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	669a      	str	r2, [r3, #104]	; 0x68
    huart->TxISR = NULL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	220f      	movs	r2, #15
 800453a:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0208 	orr.w	r2, r2, #8
 800454a:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fb05 	bl	8004b70 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3788      	adds	r7, #136	; 0x88
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	08005665 	.word	0x08005665
 8004574:	080056d1 	.word	0x080056d1

08004578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b0ba      	sub	sp, #232	; 0xe8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800459e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80045a6:	4013      	ands	r3, r2
 80045a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d115      	bne.n	80045e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00f      	beq.n	80045e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 82ac 	beq.w	8004b2e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
      }
      return;
 80045de:	e2a6      	b.n	8004b2e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8117 	beq.w	8004818 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045fa:	4b85      	ldr	r3, [pc, #532]	; (8004810 <HAL_UART_IRQHandler+0x298>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 810a 	beq.w	8004818 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d011      	beq.n	8004634 <HAL_UART_IRQHandler+0xbc>
 8004610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d011      	beq.n	8004664 <HAL_UART_IRQHandler+0xec>
 8004640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2202      	movs	r2, #2
 8004652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d011      	beq.n	8004694 <HAL_UART_IRQHandler+0x11c>
 8004670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2204      	movs	r2, #4
 8004682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	f043 0202 	orr.w	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2208      	movs	r2, #8
 80046be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c6:	f043 0208 	orr.w	r2, r3, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d012      	beq.n	8004702 <HAL_UART_IRQHandler+0x18a>
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00c      	beq.n	8004702 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8212 	beq.w	8004b32 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800474e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004752:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04f      	beq.n	80047fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 ff08 	bl	8005570 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d141      	bne.n	80047f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3308      	adds	r3, #8
 8004774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800478c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800479a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800479e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1d9      	bne.n	800476e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d013      	beq.n	80047ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <HAL_UART_IRQHandler+0x29c>)
 80047c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd fa58 	bl	8001c84 <HAL_DMA_Abort_IT>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d017      	beq.n	800480a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047e4:	4610      	mov	r0, r2
 80047e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e00f      	b.n	800480a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f9b6 	bl	8004b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e00b      	b.n	800480a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f9b2 	bl	8004b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e007      	b.n	800480a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9ae 	bl	8004b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004808:	e193      	b.n	8004b32 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480a:	bf00      	nop
    return;
 800480c:	e191      	b.n	8004b32 <HAL_UART_IRQHandler+0x5ba>
 800480e:	bf00      	nop
 8004810:	04000120 	.word	0x04000120
 8004814:	08005639 	.word	0x08005639

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 814c 	bne.w	8004aba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8145 	beq.w	8004aba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 813e 	beq.w	8004aba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2210      	movs	r2, #16
 8004844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	f040 80b6 	bne.w	80049c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004862:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8165 	beq.w	8004b36 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004876:	429a      	cmp	r2, r3
 8004878:	f080 815d 	bcs.w	8004b36 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004890:	f000 8086 	beq.w	80049a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1da      	bne.n	8004894 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004902:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004906:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800490a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e1      	bne.n	80048de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3308      	adds	r3, #8
 8004920:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800492a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800493e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004940:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004944:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800494c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e3      	bne.n	800491a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800496e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004982:	65bb      	str	r3, [r7, #88]	; 0x58
 8004984:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e4      	bne.n	8004960 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd f902 	bl	8001ba4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8e2 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049c0:	e0b9      	b.n	8004b36 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80ab 	beq.w	8004b3a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80049e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a6 	beq.w	8004b3a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
 8004a12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e4      	bne.n	80049ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	623b      	str	r3, [r7, #32]
   return(result);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a48:	633a      	str	r2, [r7, #48]	; 0x30
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e3      	bne.n	8004a24 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	69b9      	ldr	r1, [r7, #24]
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e4      	bne.n	8004a70 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f866 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ab8:	e03f      	b.n	8004b3a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00e      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x56c>
 8004ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f85d 	bl	8004b9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae2:	e02d      	b.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01c      	beq.n	8004b3e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
    }
    return;
 8004b0c:	e017      	b.n	8004b3e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d012      	beq.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fecb 	bl	80058c2 <UART_EndTransmit_IT>
    return;
 8004b2c:	e008      	b.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b2e:	bf00      	nop
 8004b30:	e006      	b.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004b32:	bf00      	nop
 8004b34:	e004      	b.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004b3e:	bf00      	nop
  }

}
 8004b40:	37e8      	adds	r7, #232	; 0xe8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop

08004b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4ba6      	ldr	r3, [pc, #664]	; (8004e74 <UART_SetConfig+0x2c4>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a94      	ldr	r2, [pc, #592]	; (8004e78 <UART_SetConfig+0x2c8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d120      	bne.n	8004c6e <UART_SetConfig+0xbe>
 8004c2c:	4b93      	ldr	r3, [pc, #588]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d816      	bhi.n	8004c68 <UART_SetConfig+0xb8>
 8004c3a:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <UART_SetConfig+0x90>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c5d 	.word	0x08004c5d
 8004c48:	08004c57 	.word	0x08004c57
 8004c4c:	08004c63 	.word	0x08004c63
 8004c50:	2301      	movs	r3, #1
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e150      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e14d      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e14a      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e147      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e144      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a83      	ldr	r2, [pc, #524]	; (8004e80 <UART_SetConfig+0x2d0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d132      	bne.n	8004cde <UART_SetConfig+0x12e>
 8004c78:	4b80      	ldr	r3, [pc, #512]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d828      	bhi.n	8004cd8 <UART_SetConfig+0x128>
 8004c86:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <UART_SetConfig+0xdc>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004cc1 	.word	0x08004cc1
 8004c90:	08004cd9 	.word	0x08004cd9
 8004c94:	08004cd9 	.word	0x08004cd9
 8004c98:	08004cd9 	.word	0x08004cd9
 8004c9c:	08004ccd 	.word	0x08004ccd
 8004ca0:	08004cd9 	.word	0x08004cd9
 8004ca4:	08004cd9 	.word	0x08004cd9
 8004ca8:	08004cd9 	.word	0x08004cd9
 8004cac:	08004cc7 	.word	0x08004cc7
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004cd9 	.word	0x08004cd9
 8004cbc:	08004cd3 	.word	0x08004cd3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e118      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e115      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e112      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e10f      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e10c      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a68      	ldr	r2, [pc, #416]	; (8004e84 <UART_SetConfig+0x2d4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d120      	bne.n	8004d2a <UART_SetConfig+0x17a>
 8004ce8:	4b64      	ldr	r3, [pc, #400]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cf2:	2b30      	cmp	r3, #48	; 0x30
 8004cf4:	d013      	beq.n	8004d1e <UART_SetConfig+0x16e>
 8004cf6:	2b30      	cmp	r3, #48	; 0x30
 8004cf8:	d814      	bhi.n	8004d24 <UART_SetConfig+0x174>
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d009      	beq.n	8004d12 <UART_SetConfig+0x162>
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d810      	bhi.n	8004d24 <UART_SetConfig+0x174>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <UART_SetConfig+0x15c>
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d006      	beq.n	8004d18 <UART_SetConfig+0x168>
 8004d0a:	e00b      	b.n	8004d24 <UART_SetConfig+0x174>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e0f2      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d12:	2302      	movs	r3, #2
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e0ef      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e0ec      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e0e9      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d24:	2310      	movs	r3, #16
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e0e6      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a56      	ldr	r2, [pc, #344]	; (8004e88 <UART_SetConfig+0x2d8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d120      	bne.n	8004d76 <UART_SetConfig+0x1c6>
 8004d34:	4b51      	ldr	r3, [pc, #324]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d40:	d013      	beq.n	8004d6a <UART_SetConfig+0x1ba>
 8004d42:	2bc0      	cmp	r3, #192	; 0xc0
 8004d44:	d814      	bhi.n	8004d70 <UART_SetConfig+0x1c0>
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d009      	beq.n	8004d5e <UART_SetConfig+0x1ae>
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d810      	bhi.n	8004d70 <UART_SetConfig+0x1c0>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <UART_SetConfig+0x1a8>
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d006      	beq.n	8004d64 <UART_SetConfig+0x1b4>
 8004d56:	e00b      	b.n	8004d70 <UART_SetConfig+0x1c0>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e0cc      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e0c9      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d64:	2304      	movs	r3, #4
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e0c6      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e0c3      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d70:	2310      	movs	r3, #16
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e0c0      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a44      	ldr	r2, [pc, #272]	; (8004e8c <UART_SetConfig+0x2dc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d125      	bne.n	8004dcc <UART_SetConfig+0x21c>
 8004d80:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8e:	d017      	beq.n	8004dc0 <UART_SetConfig+0x210>
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d817      	bhi.n	8004dc6 <UART_SetConfig+0x216>
 8004d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d9a:	d00b      	beq.n	8004db4 <UART_SetConfig+0x204>
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da0:	d811      	bhi.n	8004dc6 <UART_SetConfig+0x216>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <UART_SetConfig+0x1fe>
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d006      	beq.n	8004dba <UART_SetConfig+0x20a>
 8004dac:	e00b      	b.n	8004dc6 <UART_SetConfig+0x216>
 8004dae:	2300      	movs	r3, #0
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e0a1      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004db4:	2302      	movs	r3, #2
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e09e      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e09b      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e098      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e095      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2f      	ldr	r2, [pc, #188]	; (8004e90 <UART_SetConfig+0x2e0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d125      	bne.n	8004e22 <UART_SetConfig+0x272>
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004de4:	d017      	beq.n	8004e16 <UART_SetConfig+0x266>
 8004de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dea:	d817      	bhi.n	8004e1c <UART_SetConfig+0x26c>
 8004dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df0:	d00b      	beq.n	8004e0a <UART_SetConfig+0x25a>
 8004df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df6:	d811      	bhi.n	8004e1c <UART_SetConfig+0x26c>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <UART_SetConfig+0x254>
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	d006      	beq.n	8004e10 <UART_SetConfig+0x260>
 8004e02:	e00b      	b.n	8004e1c <UART_SetConfig+0x26c>
 8004e04:	2301      	movs	r3, #1
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e076      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e073      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e10:	2304      	movs	r3, #4
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e070      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e16:	2308      	movs	r3, #8
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e06d      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e06a      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <UART_SetConfig+0x2e4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d138      	bne.n	8004e9e <UART_SetConfig+0x2ee>
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e3a:	d017      	beq.n	8004e6c <UART_SetConfig+0x2bc>
 8004e3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e40:	d82a      	bhi.n	8004e98 <UART_SetConfig+0x2e8>
 8004e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e46:	d00b      	beq.n	8004e60 <UART_SetConfig+0x2b0>
 8004e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4c:	d824      	bhi.n	8004e98 <UART_SetConfig+0x2e8>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <UART_SetConfig+0x2aa>
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e56:	d006      	beq.n	8004e66 <UART_SetConfig+0x2b6>
 8004e58:	e01e      	b.n	8004e98 <UART_SetConfig+0x2e8>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e04b      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e60:	2302      	movs	r3, #2
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e048      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e66:	2304      	movs	r3, #4
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e045      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e042      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e72:	bf00      	nop
 8004e74:	efff69f3 	.word	0xefff69f3
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40004400 	.word	0x40004400
 8004e84:	40004800 	.word	0x40004800
 8004e88:	40004c00 	.word	0x40004c00
 8004e8c:	40005000 	.word	0x40005000
 8004e90:	40011400 	.word	0x40011400
 8004e94:	40007800 	.word	0x40007800
 8004e98:	2310      	movs	r3, #16
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e02c      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a72      	ldr	r2, [pc, #456]	; (800506c <UART_SetConfig+0x4bc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d125      	bne.n	8004ef4 <UART_SetConfig+0x344>
 8004ea8:	4b71      	ldr	r3, [pc, #452]	; (8005070 <UART_SetConfig+0x4c0>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004eb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004eb6:	d017      	beq.n	8004ee8 <UART_SetConfig+0x338>
 8004eb8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ebc:	d817      	bhi.n	8004eee <UART_SetConfig+0x33e>
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec2:	d00b      	beq.n	8004edc <UART_SetConfig+0x32c>
 8004ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec8:	d811      	bhi.n	8004eee <UART_SetConfig+0x33e>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <UART_SetConfig+0x326>
 8004ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed2:	d006      	beq.n	8004ee2 <UART_SetConfig+0x332>
 8004ed4:	e00b      	b.n	8004eee <UART_SetConfig+0x33e>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e00d      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004edc:	2302      	movs	r3, #2
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e00a      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e007      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e004      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004eee:	2310      	movs	r3, #16
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e001      	b.n	8004ef8 <UART_SetConfig+0x348>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f00:	d15b      	bne.n	8004fba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d828      	bhi.n	8004f5a <UART_SetConfig+0x3aa>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x360>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f5b 	.word	0x08004f5b
 8004f20:	08004f4b 	.word	0x08004f4b
 8004f24:	08004f5b 	.word	0x08004f5b
 8004f28:	08004f5b 	.word	0x08004f5b
 8004f2c:	08004f5b 	.word	0x08004f5b
 8004f30:	08004f53 	.word	0x08004f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fe f9a8 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8004f38:	61b8      	str	r0, [r7, #24]
        break;
 8004f3a:	e013      	b.n	8004f64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f3c:	f7fe f9b8 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8004f40:	61b8      	str	r0, [r7, #24]
        break;
 8004f42:	e00f      	b.n	8004f64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f44:	4b4b      	ldr	r3, [pc, #300]	; (8005074 <UART_SetConfig+0x4c4>)
 8004f46:	61bb      	str	r3, [r7, #24]
        break;
 8004f48:	e00c      	b.n	8004f64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7fe f88d 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8004f4e:	61b8      	str	r0, [r7, #24]
        break;
 8004f50:	e008      	b.n	8004f64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f56:	61bb      	str	r3, [r7, #24]
        break;
 8004f58:	e004      	b.n	8004f64 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	77bb      	strb	r3, [r7, #30]
        break;
 8004f62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d074      	beq.n	8005054 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	005a      	lsls	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	441a      	add	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b0f      	cmp	r3, #15
 8004f84:	d916      	bls.n	8004fb4 <UART_SetConfig+0x404>
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d212      	bcs.n	8004fb4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f023 030f 	bic.w	r3, r3, #15
 8004f96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	89fb      	ldrh	r3, [r7, #14]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	89fa      	ldrh	r2, [r7, #14]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e04f      	b.n	8005054 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	77bb      	strb	r3, [r7, #30]
 8004fb8:	e04c      	b.n	8005054 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fba:	7ffb      	ldrb	r3, [r7, #31]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d828      	bhi.n	8005012 <UART_SetConfig+0x462>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x418>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005013 	.word	0x08005013
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7fe f94c 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8004ff0:	61b8      	str	r0, [r7, #24]
        break;
 8004ff2:	e013      	b.n	800501c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fe f95c 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	61b8      	str	r0, [r7, #24]
        break;
 8004ffa:	e00f      	b.n	800501c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <UART_SetConfig+0x4c4>)
 8004ffe:	61bb      	str	r3, [r7, #24]
        break;
 8005000:	e00c      	b.n	800501c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fe f831 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8005006:	61b8      	str	r0, [r7, #24]
        break;
 8005008:	e008      	b.n	800501c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	61bb      	str	r3, [r7, #24]
        break;
 8005010:	e004      	b.n	800501c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	77bb      	strb	r3, [r7, #30]
        break;
 800501a:	bf00      	nop
    }

    if (pclk != 0U)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d018      	beq.n	8005054 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085a      	lsrs	r2, r3, #1
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b0f      	cmp	r3, #15
 800503a:	d909      	bls.n	8005050 <UART_SetConfig+0x4a0>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005042:	d205      	bcs.n	8005050 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e001      	b.n	8005054 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005060:	7fbb      	ldrb	r3, [r7, #30]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40007c00 	.word	0x40007c00
 8005070:	40023800 	.word	0x40023800
 8005074:	00f42400 	.word	0x00f42400

08005078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005176:	d10a      	bne.n	800518e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051cc:	f7fc fbfc 	bl	80019c8 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d10e      	bne.n	80051fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f831 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e027      	b.n	800524e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d10e      	bne.n	800522a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f81b 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e011      	b.n	800524e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b09c      	sub	sp, #112	; 0x70
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005266:	e0a7      	b.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800526e:	f000 80a3 	beq.w	80053b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fc fba9 	bl	80019c8 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <UART_WaitOnFlagUntilTimeout+0x32>
 8005282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005284:	2b00      	cmp	r3, #0
 8005286:	d13f      	bne.n	8005308 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800529c:	667b      	str	r3, [r7, #100]	; 0x64
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e6      	bne.n	8005288 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	663b      	str	r3, [r7, #96]	; 0x60
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052da:	64ba      	str	r2, [r7, #72]	; 0x48
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e068      	b.n	80053da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d050      	beq.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005324:	d148      	bne.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800532e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
 8005350:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e6      	bne.n	8005330 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	613b      	str	r3, [r7, #16]
   return(result);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	66bb      	str	r3, [r7, #104]	; 0x68
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005382:	623a      	str	r2, [r7, #32]
 8005384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	69f9      	ldr	r1, [r7, #28]
 8005388:	6a3a      	ldr	r2, [r7, #32]
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e010      	b.n	80053da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69da      	ldr	r2, [r3, #28]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4013      	ands	r3, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	f43f af48 	beq.w	8005268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3770      	adds	r7, #112	; 0x70
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b097      	sub	sp, #92	; 0x5c
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	88fa      	ldrh	r2, [r7, #6]
 8005404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005416:	d10e      	bne.n	8005436 <UART_Start_Receive_IT+0x52>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <UART_Start_Receive_IT+0x48>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800542a:	e02d      	b.n	8005488 <UART_Start_Receive_IT+0xa4>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	22ff      	movs	r2, #255	; 0xff
 8005430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005434:	e028      	b.n	8005488 <UART_Start_Receive_IT+0xa4>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10d      	bne.n	800545a <UART_Start_Receive_IT+0x76>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <UART_Start_Receive_IT+0x6c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800544e:	e01b      	b.n	8005488 <UART_Start_Receive_IT+0xa4>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	227f      	movs	r2, #127	; 0x7f
 8005454:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005458:	e016      	b.n	8005488 <UART_Start_Receive_IT+0xa4>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005462:	d10d      	bne.n	8005480 <UART_Start_Receive_IT+0x9c>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <UART_Start_Receive_IT+0x92>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	227f      	movs	r2, #127	; 0x7f
 8005470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005474:	e008      	b.n	8005488 <UART_Start_Receive_IT+0xa4>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	223f      	movs	r2, #63	; 0x3f
 800547a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800547e:	e003      	b.n	8005488 <UART_Start_Receive_IT+0xa4>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2222      	movs	r2, #34	; 0x22
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	657b      	str	r3, [r7, #84]	; 0x54
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80054ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d4:	d107      	bne.n	80054e6 <UART_Start_Receive_IT+0x102>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a21      	ldr	r2, [pc, #132]	; (8005568 <UART_Start_Receive_IT+0x184>)
 80054e2:	669a      	str	r2, [r3, #104]	; 0x68
 80054e4:	e002      	b.n	80054ec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a20      	ldr	r2, [pc, #128]	; (800556c <UART_Start_Receive_IT+0x188>)
 80054ea:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d019      	beq.n	8005528 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_Start_Receive_IT+0x110>
 8005526:	e018      	b.n	800555a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	613b      	str	r3, [r7, #16]
   return(result);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f043 0320 	orr.w	r3, r3, #32
 800553c:	653b      	str	r3, [r7, #80]	; 0x50
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	69f9      	ldr	r1, [r7, #28]
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	61bb      	str	r3, [r7, #24]
   return(result);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e6      	bne.n	8005528 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	375c      	adds	r7, #92	; 0x5c
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	08005a7d 	.word	0x08005a7d
 800556c:	08005917 	.word	0x08005917

08005570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b095      	sub	sp, #84	; 0x54
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800558c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005596:	643b      	str	r3, [r7, #64]	; 0x40
 8005598:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800559c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e6      	bne.n	8005578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3308      	adds	r3, #8
 80055b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3308      	adds	r3, #8
 80055c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e5      	bne.n	80055aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d118      	bne.n	8005618 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f023 0310 	bic.w	r3, r3, #16
 80055fa:	647b      	str	r3, [r7, #68]	; 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6979      	ldr	r1, [r7, #20]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	613b      	str	r3, [r7, #16]
   return(result);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e6      	bne.n	80055e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800562c:	bf00      	nop
 800562e:	3754      	adds	r7, #84	; 0x54
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff fa80 	bl	8004b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	2200      	movs	r2, #0
 8005678:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11d      	bne.n	80056c8 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	220f      	movs	r2, #15
 80056aa:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff fa55 	bl	8004b70 <HAL_UART_AbortCpltCallback>
 80056c6:	e000      	b.n	80056ca <UART_DMATxAbortCallback+0x66>
      return;
 80056c8:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	2200      	movs	r2, #0
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d125      	bne.n	8005744 <UART_DMARxAbortCallback+0x74>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	220f      	movs	r2, #15
 8005716:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fa17 	bl	8004b70 <HAL_UART_AbortCpltCallback>
 8005742:	e000      	b.n	8005746 <UART_DMARxAbortCallback+0x76>
      return;
 8005744:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b08f      	sub	sp, #60	; 0x3c
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005758:	2b21      	cmp	r3, #33	; 0x21
 800575a:	d14c      	bne.n	80057f6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d132      	bne.n	80057ce <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	61fb      	str	r3, [r7, #28]
   return(result);
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005788:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e6      	bne.n	8005768 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	613b      	str	r3, [r7, #16]
   return(result);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e6      	bne.n	800579a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80057cc:	e013      	b.n	80057f6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057f6:	bf00      	nop
 80057f8:	373c      	adds	r7, #60	; 0x3c
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005802:	b480      	push	{r7}
 8005804:	b091      	sub	sp, #68	; 0x44
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580e:	2b21      	cmp	r3, #33	; 0x21
 8005810:	d151      	bne.n	80058b6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d132      	bne.n	8005884 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	623b      	str	r3, [r7, #32]
   return(result);
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005832:	63bb      	str	r3, [r7, #56]	; 0x38
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	633b      	str	r3, [r7, #48]	; 0x30
 800583e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e6      	bne.n	800581e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	60fb      	str	r3, [r7, #12]
   return(result);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	69b9      	ldr	r1, [r7, #24]
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	617b      	str	r3, [r7, #20]
   return(result);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e6      	bne.n	8005850 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005882:	e018      	b.n	80058b6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800588a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005898:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589e:	1c9a      	adds	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058b6:	bf00      	nop
 80058b8:	3744      	adds	r7, #68	; 0x44
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b088      	sub	sp, #32
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6979      	ldr	r1, [r7, #20]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	613b      	str	r3, [r7, #16]
   return(result);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e6      	bne.n	80058ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff f91d 	bl	8004b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800590e:	bf00      	nop
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b096      	sub	sp, #88	; 0x58
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592e:	2b22      	cmp	r3, #34	; 0x22
 8005930:	f040 8098 	bne.w	8005a64 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800593e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005942:	b2d9      	uxtb	r1, r3
 8005944:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005948:	b2da      	uxtb	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	400a      	ands	r2, r1
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d17b      	bne.n	8005a74 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005990:	653b      	str	r3, [r7, #80]	; 0x50
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
 800599c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e6      	bne.n	800597c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	623b      	str	r3, [r7, #32]
   return(result);
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ce:	633a      	str	r2, [r7, #48]	; 0x30
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e5      	bne.n	80059ae <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d12e      	bne.n	8005a5c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	69b9      	ldr	r1, [r7, #24]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e6      	bne.n	8005a04 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d103      	bne.n	8005a4c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff f895 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a5a:	e00b      	b.n	8005a74 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fb ff43 	bl	80018e8 <HAL_UART_RxCpltCallback>
}
 8005a62:	e007      	b.n	8005a74 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0208 	orr.w	r2, r2, #8
 8005a72:	619a      	str	r2, [r3, #24]
}
 8005a74:	bf00      	nop
 8005a76:	3758      	adds	r7, #88	; 0x58
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b096      	sub	sp, #88	; 0x58
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a94:	2b22      	cmp	r3, #34	; 0x22
 8005a96:	f040 8098 	bne.w	8005bca <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005aaa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005aae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d17b      	bne.n	8005bda <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
 8005b02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d12e      	bne.n	8005bc2 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d103      	bne.n	8005bb2 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fe ffe2 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bc0:	e00b      	b.n	8005bda <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb fe90 	bl	80018e8 <HAL_UART_RxCpltCallback>
}
 8005bc8:	e007      	b.n	8005bda <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0208 	orr.w	r2, r2, #8
 8005bd8:	619a      	str	r2, [r3, #24]
}
 8005bda:	bf00      	nop
 8005bdc:	3758      	adds	r7, #88	; 0x58
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005be2:	b480      	push	{r7}
 8005be4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005be6:	bf00      	nop
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf6:	f3ef 8305 	mrs	r3, IPSR
 8005bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c02:	f3ef 8310 	mrs	r3, PRIMASK
 8005c06:	607b      	str	r3, [r7, #4]
  return(result);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d105      	bne.n	8005c1a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c12:	603b      	str	r3, [r7, #0]
  return(result);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <osKernelInitialize+0x3a>
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <osKernelInitialize+0x64>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d103      	bne.n	8005c2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005c22:	f06f 0305 	mvn.w	r3, #5
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e00c      	b.n	8005c44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <osKernelInitialize+0x64>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <osKernelInitialize+0x64>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e002      	b.n	8005c44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c44:	68fb      	ldr	r3, [r7, #12]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	200049e0 	.word	0x200049e0

08005c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5e:	f3ef 8305 	mrs	r3, IPSR
 8005c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10f      	bne.n	8005c8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6e:	607b      	str	r3, [r7, #4]
  return(result);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d105      	bne.n	8005c82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c76:	f3ef 8311 	mrs	r3, BASEPRI
 8005c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <osKernelStart+0x3a>
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <osKernelStart+0x68>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d103      	bne.n	8005c92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005c8a:	f06f 0305 	mvn.w	r3, #5
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e010      	b.n	8005cb4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <osKernelStart+0x68>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d109      	bne.n	8005cae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c9a:	f7ff ffa2 	bl	8005be2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <osKernelStart+0x68>)
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ca4:	f001 f8b4 	bl	8006e10 <vTaskStartScheduler>
      stat = osOK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e002      	b.n	8005cb4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200049e0 	.word	0x200049e0

08005cc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b090      	sub	sp, #64	; 0x40
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd4:	f3ef 8305 	mrs	r3, IPSR
 8005cd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cda:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f040 808f 	bne.w	8005e00 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d105      	bne.n	8005cfa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cee:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf2:	617b      	str	r3, [r7, #20]
  return(result);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <osThreadNew+0x3e>
 8005cfa:	4b44      	ldr	r3, [pc, #272]	; (8005e0c <osThreadNew+0x148>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d07e      	beq.n	8005e00 <osThreadNew+0x13c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d07b      	beq.n	8005e00 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005d0c:	2318      	movs	r3, #24
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d045      	beq.n	8005dac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <osThreadNew+0x6a>
        name = attr->name;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <osThreadNew+0x90>
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	2b38      	cmp	r3, #56	; 0x38
 8005d46:	d805      	bhi.n	8005d54 <osThreadNew+0x90>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <osThreadNew+0x94>
        return (NULL);
 8005d54:	2300      	movs	r3, #0
 8005d56:	e054      	b.n	8005e02 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	089b      	lsrs	r3, r3, #2
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <osThreadNew+0xca>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b5b      	cmp	r3, #91	; 0x5b
 8005d76:	d90a      	bls.n	8005d8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <osThreadNew+0xca>
        mem = 1;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	e010      	b.n	8005db0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10c      	bne.n	8005db0 <osThreadNew+0xec>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d108      	bne.n	8005db0 <osThreadNew+0xec>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <osThreadNew+0xec>
          mem = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	e001      	b.n	8005db0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d110      	bne.n	8005dd8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dbe:	9202      	str	r2, [sp, #8]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fe3f 	bl	8006a50 <xTaskCreateStatic>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e013      	b.n	8005e00 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d110      	bne.n	8005e00 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f107 0310 	add.w	r3, r7, #16
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fe90 	bl	8006b16 <xTaskCreate>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d001      	beq.n	8005e00 <osThreadNew+0x13c>
          hTask = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e00:	693b      	ldr	r3, [r7, #16]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3730      	adds	r7, #48	; 0x30
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200049e0 	.word	0x200049e0

08005e10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e18:	f3ef 8305 	mrs	r3, IPSR
 8005e1c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10f      	bne.n	8005e44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e24:	f3ef 8310 	mrs	r3, PRIMASK
 8005e28:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e30:	f3ef 8311 	mrs	r3, BASEPRI
 8005e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <osDelay+0x3c>
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <osDelay+0x58>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d103      	bne.n	8005e4c <osDelay+0x3c>
    stat = osErrorISR;
 8005e44:	f06f 0305 	mvn.w	r3, #5
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e007      	b.n	8005e5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 ffa4 	bl	8006da4 <vTaskDelay>
    }
  }

  return (stat);
 8005e5c:	697b      	ldr	r3, [r7, #20]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200049e0 	.word	0x200049e0

08005e6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a06      	ldr	r2, [pc, #24]	; (8005e9c <vApplicationGetIdleTaskMemory+0x30>)
 8005e82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	601a      	str	r2, [r3, #0]
}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	200049e4 	.word	0x200049e4
 8005e9c:	20004a40 	.word	0x20004a40

08005ea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <vApplicationGetTimerTaskMemory+0x2c>)
 8005eb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a06      	ldr	r2, [pc, #24]	; (8005ed0 <vApplicationGetTimerTaskMemory+0x30>)
 8005eb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ebe:	601a      	str	r2, [r3, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20004c40 	.word	0x20004c40
 8005ed0:	20004c9c 	.word	0x20004c9c

08005ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f103 0208 	add.w	r2, r3, #8
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f103 0208 	add.w	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f103 0208 	add.w	r2, r3, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8c:	d103      	bne.n	8005f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e00c      	b.n	8005fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e002      	b.n	8005fa4 <vListInsert+0x2e>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d2f6      	bcs.n	8005f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	601a      	str	r2, [r3, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6892      	ldr	r2, [r2, #8]
 8005ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6852      	ldr	r2, [r2, #4]
 8006008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d103      	bne.n	800601c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	1e5a      	subs	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10c      	bne.n	800606a <xQueueGenericReset+0x2e>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	b672      	cpsid	i
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	b662      	cpsie	i
 8006064:	60bb      	str	r3, [r7, #8]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800606a:	f002 f8a7 	bl	80081bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	441a      	add	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	3b01      	subs	r3, #1
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	22ff      	movs	r2, #255	; 0xff
 80060ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	22ff      	movs	r2, #255	; 0xff
 80060b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d114      	bne.n	80060ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01a      	beq.n	80060fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3310      	adds	r3, #16
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 f937 	bl	8007340 <xTaskRemoveFromEventList>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d012      	beq.n	80060fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <xQueueGenericReset+0xd0>)
 80060da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	e009      	b.n	80060fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3310      	adds	r3, #16
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fef0 	bl	8005ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff feeb 	bl	8005ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060fe:	f002 f891 	bl	8008224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006102:	2301      	movs	r3, #1
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	; 0x38
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10c      	bne.n	800613e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	b672      	cpsid	i
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	b662      	cpsie	i
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10c      	bne.n	800615e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	b672      	cpsid	i
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	b662      	cpsie	i
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <xQueueGenericCreateStatic+0x5a>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <xQueueGenericCreateStatic+0x5e>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericCreateStatic+0x60>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10c      	bne.n	800618e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	b672      	cpsid	i
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	b662      	cpsie	i
 8006188:	623b      	str	r3, [r7, #32]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <xQueueGenericCreateStatic+0x8a>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <xQueueGenericCreateStatic+0x8e>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueGenericCreateStatic+0x90>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	b672      	cpsid	i
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	b662      	cpsie	i
 80061b8:	61fb      	str	r3, [r7, #28]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061be:	2350      	movs	r3, #80	; 0x50
 80061c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b50      	cmp	r3, #80	; 0x50
 80061c6:	d00c      	beq.n	80061e2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	b672      	cpsid	i
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	b662      	cpsie	i
 80061dc:	61bb      	str	r3, [r7, #24]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4613      	mov	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f805 	bl	8006214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800620c:	4618      	mov	r0, r3
 800620e:	3730      	adds	r7, #48	; 0x30
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e002      	b.n	8006236 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006242:	2101      	movs	r1, #1
 8006244:	69b8      	ldr	r0, [r7, #24]
 8006246:	f7ff fef9 	bl	800603c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08e      	sub	sp, #56	; 0x38
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10c      	bne.n	8006292 <xQueueGenericSend+0x36>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	b672      	cpsid	i
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	b662      	cpsie	i
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <xQueueGenericSend+0x44>
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <xQueueGenericSend+0x48>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <xQueueGenericSend+0x4a>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <xQueueGenericSend+0x68>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	b672      	cpsid	i
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	b662      	cpsie	i
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x76>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <xQueueGenericSend+0x7a>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericSend+0x7c>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10c      	bne.n	80062f6 <xQueueGenericSend+0x9a>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	b672      	cpsid	i
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	b662      	cpsie	i
 80062f0:	623b      	str	r3, [r7, #32]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062f6:	f001 fa11 	bl	800771c <xTaskGetSchedulerState>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <xQueueGenericSend+0xaa>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <xQueueGenericSend+0xae>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <xQueueGenericSend+0xb0>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10c      	bne.n	800632a <xQueueGenericSend+0xce>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	b672      	cpsid	i
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	b662      	cpsie	i
 8006324:	61fb      	str	r3, [r7, #28]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800632a:	f001 ff47 	bl	80081bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <xQueueGenericSend+0xe4>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d129      	bne.n	8006394 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006346:	f000 fa15 	bl	8006774 <prvCopyDataToQueue>
 800634a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d010      	beq.n	8006376 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	3324      	adds	r3, #36	; 0x24
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fff1 	bl	8007340 <xTaskRemoveFromEventList>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006364:	4b3f      	ldr	r3, [pc, #252]	; (8006464 <xQueueGenericSend+0x208>)
 8006366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	e00a      	b.n	800638c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800637c:	4b39      	ldr	r3, [pc, #228]	; (8006464 <xQueueGenericSend+0x208>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800638c:	f001 ff4a 	bl	8008224 <vPortExitCritical>
				return pdPASS;
 8006390:	2301      	movs	r3, #1
 8006392:	e063      	b.n	800645c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800639a:	f001 ff43 	bl	8008224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	e05c      	b.n	800645c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d106      	bne.n	80063b6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063a8:	f107 0314 	add.w	r3, r7, #20
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f855 	bl	800745c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063b2:	2301      	movs	r3, #1
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063b6:	f001 ff35 	bl	8008224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ba:	f000 fd93 	bl	8006ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063be:	f001 fefd 	bl	80081bc <vPortEnterCritical>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c8:	b25b      	sxtb	r3, r3
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ce:	d103      	bne.n	80063d8 <xQueueGenericSend+0x17c>
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSend+0x192>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ee:	f001 ff19 	bl	8008224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063f2:	1d3a      	adds	r2, r7, #4
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f844 	bl	8007488 <xTaskCheckForTimeOut>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d124      	bne.n	8006450 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006408:	f000 faac 	bl	8006964 <prvIsQueueFull>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d018      	beq.n	8006444 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	3310      	adds	r3, #16
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4611      	mov	r1, r2
 800641a:	4618      	mov	r0, r3
 800641c:	f000 ff3c 	bl	8007298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006422:	f000 fa37 	bl	8006894 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006426:	f000 fd6b 	bl	8006f00 <xTaskResumeAll>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	f47f af7c 	bne.w	800632a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <xQueueGenericSend+0x208>)
 8006434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	e772      	b.n	800632a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006446:	f000 fa25 	bl	8006894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800644a:	f000 fd59 	bl	8006f00 <xTaskResumeAll>
 800644e:	e76c      	b.n	800632a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006452:	f000 fa1f 	bl	8006894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006456:	f000 fd53 	bl	8006f00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800645a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800645c:	4618      	mov	r0, r3
 800645e:	3738      	adds	r7, #56	; 0x38
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	e000ed04 	.word	0xe000ed04

08006468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08e      	sub	sp, #56	; 0x38
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10c      	bne.n	800649a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <xQueueGenericSendFromISR+0x40>
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <xQueueGenericSendFromISR+0x44>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <xQueueGenericSendFromISR+0x46>
 80064ac:	2300      	movs	r3, #0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10c      	bne.n	80064cc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	b672      	cpsid	i
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	b662      	cpsie	i
 80064c6:	623b      	str	r3, [r7, #32]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d103      	bne.n	80064da <xQueueGenericSendFromISR+0x72>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <xQueueGenericSendFromISR+0x76>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <xQueueGenericSendFromISR+0x78>
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10c      	bne.n	80064fe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	b672      	cpsid	i
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	b662      	cpsie	i
 80064f8:	61fb      	str	r3, [r7, #28]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064fe:	f001 ff45 	bl	800838c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006502:	f3ef 8211 	mrs	r2, BASEPRI
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	b672      	cpsid	i
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	b662      	cpsie	i
 800651a:	61ba      	str	r2, [r7, #24]
 800651c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800651e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <xQueueGenericSendFromISR+0xcc>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d12c      	bne.n	800658e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006544:	f000 f916 	bl	8006774 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006548:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006550:	d112      	bne.n	8006578 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	3324      	adds	r3, #36	; 0x24
 800655e:	4618      	mov	r0, r3
 8006560:	f000 feee 	bl	8007340 <xTaskRemoveFromEventList>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00e      	beq.n	8006588 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e007      	b.n	8006588 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800657c:	3301      	adds	r3, #1
 800657e:	b2db      	uxtb	r3, r3
 8006580:	b25a      	sxtb	r2, r3
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006588:	2301      	movs	r3, #1
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800658c:	e001      	b.n	8006592 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800658e:	2300      	movs	r3, #0
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800659c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3738      	adds	r7, #56	; 0x38
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08c      	sub	sp, #48	; 0x30
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10c      	bne.n	80065dc <xQueueReceive+0x34>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	b672      	cpsid	i
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	b662      	cpsie	i
 80065d6:	623b      	str	r3, [r7, #32]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <xQueueReceive+0x42>
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <xQueueReceive+0x46>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueReceive+0x48>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10c      	bne.n	800660e <xQueueReceive+0x66>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	b672      	cpsid	i
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	b662      	cpsie	i
 8006608:	61fb      	str	r3, [r7, #28]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800660e:	f001 f885 	bl	800771c <xTaskGetSchedulerState>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <xQueueReceive+0x76>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <xQueueReceive+0x7a>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xQueueReceive+0x7c>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10c      	bne.n	8006642 <xQueueReceive+0x9a>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	b672      	cpsid	i
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	b662      	cpsie	i
 800663c:	61bb      	str	r3, [r7, #24]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006642:	f001 fdbb 	bl	80081bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01f      	beq.n	8006692 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	f000 f8f7 	bl	8006848 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	1e5a      	subs	r2, r3, #1
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00f      	beq.n	800668a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	3310      	adds	r3, #16
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fe66 	bl	8007340 <xTaskRemoveFromEventList>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800667a:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <xQueueReceive+0x1c8>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800668a:	f001 fdcb 	bl	8008224 <vPortExitCritical>
				return pdPASS;
 800668e:	2301      	movs	r3, #1
 8006690:	e069      	b.n	8006766 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006698:	f001 fdc4 	bl	8008224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800669c:	2300      	movs	r3, #0
 800669e:	e062      	b.n	8006766 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fed6 	bl	800745c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066b4:	f001 fdb6 	bl	8008224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066b8:	f000 fc14 	bl	8006ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066bc:	f001 fd7e 	bl	80081bc <vPortEnterCritical>
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066cc:	d103      	bne.n	80066d6 <xQueueReceive+0x12e>
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e2:	d103      	bne.n	80066ec <xQueueReceive+0x144>
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ec:	f001 fd9a 	bl	8008224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066f0:	1d3a      	adds	r2, r7, #4
 80066f2:	f107 0310 	add.w	r3, r7, #16
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fec5 	bl	8007488 <xTaskCheckForTimeOut>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d123      	bne.n	800674c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006706:	f000 f917 	bl	8006938 <prvIsQueueEmpty>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d017      	beq.n	8006740 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4611      	mov	r1, r2
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fdbd 	bl	8007298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800671e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006720:	f000 f8b8 	bl	8006894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006724:	f000 fbec 	bl	8006f00 <xTaskResumeAll>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d189      	bne.n	8006642 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800672e:	4b10      	ldr	r3, [pc, #64]	; (8006770 <xQueueReceive+0x1c8>)
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	e780      	b.n	8006642 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006742:	f000 f8a7 	bl	8006894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006746:	f000 fbdb 	bl	8006f00 <xTaskResumeAll>
 800674a:	e77a      	b.n	8006642 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800674c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674e:	f000 f8a1 	bl	8006894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006752:	f000 fbd5 	bl	8006f00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006758:	f000 f8ee 	bl	8006938 <prvIsQueueEmpty>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	f43f af6f 	beq.w	8006642 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006766:	4618      	mov	r0, r3
 8006768:	3730      	adds	r7, #48	; 0x30
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d14d      	bne.n	8006836 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 ffda 	bl	8007758 <xTaskPriorityDisinherit>
 80067a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	e043      	b.n	8006836 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d119      	bne.n	80067e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6858      	ldr	r0, [r3, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	461a      	mov	r2, r3
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	f00b f8ee 	bl	80119a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	441a      	add	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d32b      	bcc.n	8006836 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	605a      	str	r2, [r3, #4]
 80067e6:	e026      	b.n	8006836 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	68d8      	ldr	r0, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	461a      	mov	r2, r3
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	f00b f8d4 	bl	80119a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	425b      	negs	r3, r3
 8006802:	441a      	add	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d207      	bcs.n	8006824 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	425b      	negs	r3, r3
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d105      	bne.n	8006836 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3b01      	subs	r3, #1
 8006834:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800683e:	697b      	ldr	r3, [r7, #20]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d018      	beq.n	800688c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	441a      	add	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	d303      	bcc.n	800687c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68d9      	ldr	r1, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	461a      	mov	r2, r3
 8006886:	6838      	ldr	r0, [r7, #0]
 8006888:	f00b f88a 	bl	80119a0 <memcpy>
	}
}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800689c:	f001 fc8e 	bl	80081bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068a8:	e011      	b.n	80068ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d012      	beq.n	80068d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3324      	adds	r3, #36	; 0x24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fd42 	bl	8007340 <xTaskRemoveFromEventList>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068c2:	f000 fe47 	bl	8007554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	dce9      	bgt.n	80068aa <prvUnlockQueue+0x16>
 80068d6:	e000      	b.n	80068da <prvUnlockQueue+0x46>
					break;
 80068d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	22ff      	movs	r2, #255	; 0xff
 80068de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068e2:	f001 fc9f 	bl	8008224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068e6:	f001 fc69 	bl	80081bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068f2:	e011      	b.n	8006918 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d012      	beq.n	8006922 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3310      	adds	r3, #16
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fd1d 	bl	8007340 <xTaskRemoveFromEventList>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800690c:	f000 fe22 	bl	8007554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	3b01      	subs	r3, #1
 8006914:	b2db      	uxtb	r3, r3
 8006916:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800691c:	2b00      	cmp	r3, #0
 800691e:	dce9      	bgt.n	80068f4 <prvUnlockQueue+0x60>
 8006920:	e000      	b.n	8006924 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006922:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800692c:	f001 fc7a 	bl	8008224 <vPortExitCritical>
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006940:	f001 fc3c 	bl	80081bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e001      	b.n	8006956 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006956:	f001 fc65 	bl	8008224 <vPortExitCritical>

	return xReturn;
 800695a:	68fb      	ldr	r3, [r7, #12]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800696c:	f001 fc26 	bl	80081bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	429a      	cmp	r2, r3
 800697a:	d102      	bne.n	8006982 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	e001      	b.n	8006986 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006986:	f001 fc4d 	bl	8008224 <vPortExitCritical>

	return xReturn;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e014      	b.n	80069ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069a4:	4a0f      	ldr	r2, [pc, #60]	; (80069e4 <vQueueAddToRegistry+0x50>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069b0:	490c      	ldr	r1, [pc, #48]	; (80069e4 <vQueueAddToRegistry+0x50>)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <vQueueAddToRegistry+0x50>)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	4413      	add	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069c6:	e006      	b.n	80069d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3301      	adds	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b07      	cmp	r3, #7
 80069d2:	d9e7      	bls.n	80069a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2000509c 	.word	0x2000509c

080069e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069f8:	f001 fbe0 	bl	80081bc <vPortEnterCritical>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a08:	d103      	bne.n	8006a12 <vQueueWaitForMessageRestricted+0x2a>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a18:	b25b      	sxtb	r3, r3
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a1e:	d103      	bne.n	8006a28 <vQueueWaitForMessageRestricted+0x40>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a28:	f001 fbfc 	bl	8008224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	3324      	adds	r3, #36	; 0x24
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fc51 	bl	80072e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a42:	6978      	ldr	r0, [r7, #20]
 8006a44:	f7ff ff26 	bl	8006894 <prvUnlockQueue>
	}
 8006a48:	bf00      	nop
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10c      	bne.n	8006a7e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	b672      	cpsid	i
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	b662      	cpsie	i
 8006a78:	623b      	str	r3, [r7, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10c      	bne.n	8006a9e <xTaskCreateStatic+0x4e>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	b672      	cpsid	i
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	b662      	cpsie	i
 8006a98:	61fb      	str	r3, [r7, #28]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a9e:	235c      	movs	r3, #92	; 0x5c
 8006aa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b5c      	cmp	r3, #92	; 0x5c
 8006aa6:	d00c      	beq.n	8006ac2 <xTaskCreateStatic+0x72>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	61bb      	str	r3, [r7, #24]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ac2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01e      	beq.n	8006b08 <xTaskCreateStatic+0xb8>
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01b      	beq.n	8006b08 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9303      	str	r3, [sp, #12]
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	f107 0314 	add.w	r3, r7, #20
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f850 	bl	8006ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b02:	f000 f8df 	bl	8006cc4 <prvAddNewTaskToReadyList>
 8006b06:	e001      	b.n	8006b0c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b0c:	697b      	ldr	r3, [r7, #20]
	}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3728      	adds	r7, #40	; 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b08c      	sub	sp, #48	; 0x30
 8006b1a:	af04      	add	r7, sp, #16
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	603b      	str	r3, [r7, #0]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fc72 	bl	8008414 <pvPortMalloc>
 8006b30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b38:	205c      	movs	r0, #92	; 0x5c
 8006b3a:	f001 fc6b 	bl	8008414 <pvPortMalloc>
 8006b3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b4c:	e005      	b.n	8006b5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b4e:	6978      	ldr	r0, [r7, #20]
 8006b50:	f001 fd2a 	bl	80085a8 <vPortFree>
 8006b54:	e001      	b.n	8006b5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d017      	beq.n	8006b90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b68:	88fa      	ldrh	r2, [r7, #6]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f80e 	bl	8006ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b84:	69f8      	ldr	r0, [r7, #28]
 8006b86:	f000 f89d 	bl	8006cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	e002      	b.n	8006b96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b96:	69bb      	ldr	r3, [r7, #24]
	}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	21a5      	movs	r1, #165	; 0xa5
 8006bba:	f00a feff 	bl	80119bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006bc8:	440b      	add	r3, r1
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f023 0307 	bic.w	r3, r3, #7
 8006bd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	b672      	cpsid	i
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	b662      	cpsie	i
 8006bf6:	617b      	str	r3, [r7, #20]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01f      	beq.n	8006c42 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c02:	2300      	movs	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e012      	b.n	8006c2e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	7819      	ldrb	r1, [r3, #0]
 8006c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	3334      	adds	r3, #52	; 0x34
 8006c18:	460a      	mov	r2, r1
 8006c1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	2b0f      	cmp	r3, #15
 8006c32:	d9e9      	bls.n	8006c08 <prvInitialiseNewTask+0x68>
 8006c34:	e000      	b.n	8006c38 <prvInitialiseNewTask+0x98>
			{
				break;
 8006c36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c40:	e003      	b.n	8006c4a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	2b37      	cmp	r3, #55	; 0x37
 8006c4e:	d901      	bls.n	8006c54 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c50:	2337      	movs	r3, #55	; 0x37
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2200      	movs	r2, #0
 8006c64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff f952 	bl	8005f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	3318      	adds	r3, #24
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff f94d 	bl	8005f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	2200      	movs	r2, #0
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	68f9      	ldr	r1, [r7, #12]
 8006ca2:	69b8      	ldr	r0, [r7, #24]
 8006ca4:	f001 f97a 	bl	8007f9c <pxPortInitialiseStack>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cba:	bf00      	nop
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ccc:	f001 fa76 	bl	80081bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cd0:	4b2d      	ldr	r3, [pc, #180]	; (8006d88 <prvAddNewTaskToReadyList+0xc4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <prvAddNewTaskToReadyList+0xc4>)
 8006cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cda:	4b2c      	ldr	r3, [pc, #176]	; (8006d8c <prvAddNewTaskToReadyList+0xc8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ce2:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <prvAddNewTaskToReadyList+0xc8>)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ce8:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <prvAddNewTaskToReadyList+0xc4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d110      	bne.n	8006d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cf0:	f000 fc54 	bl	800759c <prvInitialiseTaskLists>
 8006cf4:	e00d      	b.n	8006d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cf6:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <prvAddNewTaskToReadyList+0xcc>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cfe:	4b23      	ldr	r3, [pc, #140]	; (8006d8c <prvAddNewTaskToReadyList+0xc8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d802      	bhi.n	8006d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d0c:	4a1f      	ldr	r2, [pc, #124]	; (8006d8c <prvAddNewTaskToReadyList+0xc8>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d12:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <prvAddNewTaskToReadyList+0xd0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3301      	adds	r3, #1
 8006d18:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <prvAddNewTaskToReadyList+0xd0>)
 8006d1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d1c:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <prvAddNewTaskToReadyList+0xd0>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <prvAddNewTaskToReadyList+0xd4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d903      	bls.n	8006d38 <prvAddNewTaskToReadyList+0x74>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <prvAddNewTaskToReadyList+0xd4>)
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <prvAddNewTaskToReadyList+0xd8>)
 8006d46:	441a      	add	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f7ff f8ed 	bl	8005f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d54:	f001 fa66 	bl	8008224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d58:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <prvAddNewTaskToReadyList+0xcc>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <prvAddNewTaskToReadyList+0xc8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d207      	bcs.n	8006d7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <prvAddNewTaskToReadyList+0xdc>)
 8006d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	200055b0 	.word	0x200055b0
 8006d8c:	200050dc 	.word	0x200050dc
 8006d90:	200055bc 	.word	0x200055bc
 8006d94:	200055cc 	.word	0x200055cc
 8006d98:	200055b8 	.word	0x200055b8
 8006d9c:	200050e0 	.word	0x200050e0
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d019      	beq.n	8006dea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <vTaskDelay+0x64>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <vTaskDelay+0x34>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	b672      	cpsid	i
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	b662      	cpsie	i
 8006dd2:	60bb      	str	r3, [r7, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006dd8:	f000 f884 	bl	8006ee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fd2c 	bl	800783c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006de4:	f000 f88c 	bl	8006f00 <xTaskResumeAll>
 8006de8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d107      	bne.n	8006e00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006df0:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <vTaskDelay+0x68>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200055d8 	.word	0x200055d8
 8006e0c:	e000ed04 	.word	0xe000ed04

08006e10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e1e:	463a      	mov	r2, r7
 8006e20:	1d39      	adds	r1, r7, #4
 8006e22:	f107 0308 	add.w	r3, r7, #8
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff f820 	bl	8005e6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	9202      	str	r2, [sp, #8]
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	2300      	movs	r3, #0
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	460a      	mov	r2, r1
 8006e3e:	4923      	ldr	r1, [pc, #140]	; (8006ecc <vTaskStartScheduler+0xbc>)
 8006e40:	4823      	ldr	r0, [pc, #140]	; (8006ed0 <vTaskStartScheduler+0xc0>)
 8006e42:	f7ff fe05 	bl	8006a50 <xTaskCreateStatic>
 8006e46:	4603      	mov	r3, r0
 8006e48:	4a22      	ldr	r2, [pc, #136]	; (8006ed4 <vTaskStartScheduler+0xc4>)
 8006e4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e4c:	4b21      	ldr	r3, [pc, #132]	; (8006ed4 <vTaskStartScheduler+0xc4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e54:	2301      	movs	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e001      	b.n	8006e5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d102      	bne.n	8006e6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e64:	f000 fd3e 	bl	80078e4 <xTimerCreateTimerTask>
 8006e68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d118      	bne.n	8006ea2 <vTaskStartScheduler+0x92>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	b672      	cpsid	i
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	b662      	cpsie	i
 8006e84:	613b      	str	r3, [r7, #16]
}
 8006e86:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e88:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <vTaskStartScheduler+0xc8>)
 8006e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e90:	4b12      	ldr	r3, [pc, #72]	; (8006edc <vTaskStartScheduler+0xcc>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <vTaskStartScheduler+0xd0>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e9c:	f001 f910 	bl	80080c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ea0:	e010      	b.n	8006ec4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea8:	d10c      	bne.n	8006ec4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	b672      	cpsid	i
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	b662      	cpsie	i
 8006ebe:	60fb      	str	r3, [r7, #12]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <vTaskStartScheduler+0xb2>
}
 8006ec4:	bf00      	nop
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	08014a20 	.word	0x08014a20
 8006ed0:	0800756d 	.word	0x0800756d
 8006ed4:	200055d4 	.word	0x200055d4
 8006ed8:	200055d0 	.word	0x200055d0
 8006edc:	200055bc 	.word	0x200055bc
 8006ee0:	200055b4 	.word	0x200055b4

08006ee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ee8:	4b04      	ldr	r3, [pc, #16]	; (8006efc <vTaskSuspendAll+0x18>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3301      	adds	r3, #1
 8006eee:	4a03      	ldr	r2, [pc, #12]	; (8006efc <vTaskSuspendAll+0x18>)
 8006ef0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006ef2:	bf00      	nop
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	200055d8 	.word	0x200055d8

08006f00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f0e:	4b43      	ldr	r3, [pc, #268]	; (800701c <xTaskResumeAll+0x11c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10c      	bne.n	8006f30 <xTaskResumeAll+0x30>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	b672      	cpsid	i
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	b662      	cpsie	i
 8006f2a:	603b      	str	r3, [r7, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f30:	f001 f944 	bl	80081bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f34:	4b39      	ldr	r3, [pc, #228]	; (800701c <xTaskResumeAll+0x11c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	4a38      	ldr	r2, [pc, #224]	; (800701c <xTaskResumeAll+0x11c>)
 8006f3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f3e:	4b37      	ldr	r3, [pc, #220]	; (800701c <xTaskResumeAll+0x11c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d162      	bne.n	800700c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f46:	4b36      	ldr	r3, [pc, #216]	; (8007020 <xTaskResumeAll+0x120>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d05e      	beq.n	800700c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f4e:	e02f      	b.n	8006fb0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f50:	4b34      	ldr	r3, [pc, #208]	; (8007024 <xTaskResumeAll+0x124>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff f843 	bl	8005fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff f83e 	bl	8005fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4b2d      	ldr	r3, [pc, #180]	; (8007028 <xTaskResumeAll+0x128>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d903      	bls.n	8006f80 <xTaskResumeAll+0x80>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <xTaskResumeAll+0x128>)
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4a27      	ldr	r2, [pc, #156]	; (800702c <xTaskResumeAll+0x12c>)
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f7fe ffc9 	bl	8005f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4b23      	ldr	r3, [pc, #140]	; (8007030 <xTaskResumeAll+0x130>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d302      	bcc.n	8006fb0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006faa:	4b22      	ldr	r3, [pc, #136]	; (8007034 <xTaskResumeAll+0x134>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fb0:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <xTaskResumeAll+0x124>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1cb      	bne.n	8006f50 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fbe:	f000 fb8d 	bl	80076dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006fc2:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <xTaskResumeAll+0x138>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fce:	f000 f847 	bl	8007060 <xTaskIncrementTick>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006fd8:	4b16      	ldr	r3, [pc, #88]	; (8007034 <xTaskResumeAll+0x134>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f1      	bne.n	8006fce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <xTaskResumeAll+0x138>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ff0:	4b10      	ldr	r3, [pc, #64]	; (8007034 <xTaskResumeAll+0x134>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <xTaskResumeAll+0x13c>)
 8006ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800700c:	f001 f90a 	bl	8008224 <vPortExitCritical>

	return xAlreadyYielded;
 8007010:	68bb      	ldr	r3, [r7, #8]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	200055d8 	.word	0x200055d8
 8007020:	200055b0 	.word	0x200055b0
 8007024:	20005570 	.word	0x20005570
 8007028:	200055b8 	.word	0x200055b8
 800702c:	200050e0 	.word	0x200050e0
 8007030:	200050dc 	.word	0x200050dc
 8007034:	200055c4 	.word	0x200055c4
 8007038:	200055c0 	.word	0x200055c0
 800703c:	e000ed04 	.word	0xe000ed04

08007040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007046:	4b05      	ldr	r3, [pc, #20]	; (800705c <xTaskGetTickCount+0x1c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800704c:	687b      	ldr	r3, [r7, #4]
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	200055b4 	.word	0x200055b4

08007060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706a:	4b50      	ldr	r3, [pc, #320]	; (80071ac <xTaskIncrementTick+0x14c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 808b 	bne.w	800718a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007074:	4b4e      	ldr	r3, [pc, #312]	; (80071b0 <xTaskIncrementTick+0x150>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800707c:	4a4c      	ldr	r2, [pc, #304]	; (80071b0 <xTaskIncrementTick+0x150>)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d122      	bne.n	80070ce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007088:	4b4a      	ldr	r3, [pc, #296]	; (80071b4 <xTaskIncrementTick+0x154>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <xTaskIncrementTick+0x4c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	b672      	cpsid	i
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	b662      	cpsie	i
 80070a6:	603b      	str	r3, [r7, #0]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <xTaskIncrementTick+0x4a>
 80070ac:	4b41      	ldr	r3, [pc, #260]	; (80071b4 <xTaskIncrementTick+0x154>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <xTaskIncrementTick+0x158>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a3f      	ldr	r2, [pc, #252]	; (80071b4 <xTaskIncrementTick+0x154>)
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	4a3f      	ldr	r2, [pc, #252]	; (80071b8 <xTaskIncrementTick+0x158>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	4b3e      	ldr	r3, [pc, #248]	; (80071bc <xTaskIncrementTick+0x15c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a3d      	ldr	r2, [pc, #244]	; (80071bc <xTaskIncrementTick+0x15c>)
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	f000 fb07 	bl	80076dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070ce:	4b3c      	ldr	r3, [pc, #240]	; (80071c0 <xTaskIncrementTick+0x160>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d349      	bcc.n	800716c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d8:	4b36      	ldr	r3, [pc, #216]	; (80071b4 <xTaskIncrementTick+0x154>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e2:	4b37      	ldr	r3, [pc, #220]	; (80071c0 <xTaskIncrementTick+0x160>)
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070e8:	601a      	str	r2, [r3, #0]
					break;
 80070ea:	e03f      	b.n	800716c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ec:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <xTaskIncrementTick+0x154>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d203      	bcs.n	800710c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007104:	4a2e      	ldr	r2, [pc, #184]	; (80071c0 <xTaskIncrementTick+0x160>)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800710a:	e02f      	b.n	800716c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	3304      	adds	r3, #4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe ff69 	bl	8005fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3318      	adds	r3, #24
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe ff60 	bl	8005fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <xTaskIncrementTick+0x164>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d903      	bls.n	800713c <xTaskIncrementTick+0xdc>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <xTaskIncrementTick+0x164>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <xTaskIncrementTick+0x168>)
 800714a:	441a      	add	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe feeb 	bl	8005f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <xTaskIncrementTick+0x16c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	429a      	cmp	r2, r3
 8007164:	d3b8      	bcc.n	80070d8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800716a:	e7b5      	b.n	80070d8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <xTaskIncrementTick+0x16c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4915      	ldr	r1, [pc, #84]	; (80071c8 <xTaskIncrementTick+0x168>)
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d907      	bls.n	8007194 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e004      	b.n	8007194 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <xTaskIncrementTick+0x170>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <xTaskIncrementTick+0x170>)
 8007192:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <xTaskIncrementTick+0x174>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071a0:	697b      	ldr	r3, [r7, #20]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200055d8 	.word	0x200055d8
 80071b0:	200055b4 	.word	0x200055b4
 80071b4:	20005568 	.word	0x20005568
 80071b8:	2000556c 	.word	0x2000556c
 80071bc:	200055c8 	.word	0x200055c8
 80071c0:	200055d0 	.word	0x200055d0
 80071c4:	200055b8 	.word	0x200055b8
 80071c8:	200050e0 	.word	0x200050e0
 80071cc:	200050dc 	.word	0x200050dc
 80071d0:	200055c0 	.word	0x200055c0
 80071d4:	200055c4 	.word	0x200055c4

080071d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071de:	4b29      	ldr	r3, [pc, #164]	; (8007284 <vTaskSwitchContext+0xac>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071e6:	4b28      	ldr	r3, [pc, #160]	; (8007288 <vTaskSwitchContext+0xb0>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071ec:	e043      	b.n	8007276 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80071ee:	4b26      	ldr	r3, [pc, #152]	; (8007288 <vTaskSwitchContext+0xb0>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f4:	4b25      	ldr	r3, [pc, #148]	; (800728c <vTaskSwitchContext+0xb4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e012      	b.n	8007222 <vTaskSwitchContext+0x4a>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10c      	bne.n	800721c <vTaskSwitchContext+0x44>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	b672      	cpsid	i
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	b662      	cpsie	i
 8007216:	607b      	str	r3, [r7, #4]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <vTaskSwitchContext+0x42>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3b01      	subs	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	491b      	ldr	r1, [pc, #108]	; (8007290 <vTaskSwitchContext+0xb8>)
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0e2      	beq.n	80071fc <vTaskSwitchContext+0x24>
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4a13      	ldr	r2, [pc, #76]	; (8007290 <vTaskSwitchContext+0xb8>)
 8007242:	4413      	add	r3, r2
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3308      	adds	r3, #8
 8007258:	429a      	cmp	r2, r3
 800725a:	d104      	bne.n	8007266 <vTaskSwitchContext+0x8e>
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <vTaskSwitchContext+0xbc>)
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	4a06      	ldr	r2, [pc, #24]	; (800728c <vTaskSwitchContext+0xb4>)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6013      	str	r3, [r2, #0]
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	200055d8 	.word	0x200055d8
 8007288:	200055c4 	.word	0x200055c4
 800728c:	200055b8 	.word	0x200055b8
 8007290:	200050e0 	.word	0x200050e0
 8007294:	200050dc 	.word	0x200050dc

08007298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10c      	bne.n	80072c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	b672      	cpsid	i
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	b662      	cpsie	i
 80072bc:	60fb      	str	r3, [r7, #12]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072c2:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <vTaskPlaceOnEventList+0x48>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3318      	adds	r3, #24
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fe fe53 	bl	8005f76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072d0:	2101      	movs	r1, #1
 80072d2:	6838      	ldr	r0, [r7, #0]
 80072d4:	f000 fab2 	bl	800783c <prvAddCurrentTaskToDelayedList>
}
 80072d8:	bf00      	nop
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	200050dc 	.word	0x200050dc

080072e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10c      	bne.n	8007310 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	b672      	cpsid	i
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	b662      	cpsie	i
 800730a:	617b      	str	r3, [r7, #20]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <vTaskPlaceOnEventListRestricted+0x58>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3318      	adds	r3, #24
 8007316:	4619      	mov	r1, r3
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7fe fe08 	bl	8005f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007328:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	68b8      	ldr	r0, [r7, #8]
 800732e:	f000 fa85 	bl	800783c <prvAddCurrentTaskToDelayedList>
	}
 8007332:	bf00      	nop
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	200050dc 	.word	0x200050dc

08007340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10c      	bne.n	8007370 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	b672      	cpsid	i
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	b662      	cpsie	i
 800736a:	60fb      	str	r3, [r7, #12]
}
 800736c:	bf00      	nop
 800736e:	e7fe      	b.n	800736e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	3318      	adds	r3, #24
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fe37 	bl	8005fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800737a:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <xTaskRemoveFromEventList+0xb4>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d11d      	bne.n	80073be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fe2e 	bl	8005fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <xTaskRemoveFromEventList+0xb8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d903      	bls.n	80073a0 <xTaskRemoveFromEventList+0x60>
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a16      	ldr	r2, [pc, #88]	; (80073f8 <xTaskRemoveFromEventList+0xb8>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <xTaskRemoveFromEventList+0xbc>)
 80073ae:	441a      	add	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe fdb9 	bl	8005f2e <vListInsertEnd>
 80073bc:	e005      	b.n	80073ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3318      	adds	r3, #24
 80073c2:	4619      	mov	r1, r3
 80073c4:	480e      	ldr	r0, [pc, #56]	; (8007400 <xTaskRemoveFromEventList+0xc0>)
 80073c6:	f7fe fdb2 	bl	8005f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ce:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <xTaskRemoveFromEventList+0xc4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d905      	bls.n	80073e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <xTaskRemoveFromEventList+0xc8>)
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	e001      	b.n	80073e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073e8:	697b      	ldr	r3, [r7, #20]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200055d8 	.word	0x200055d8
 80073f8:	200055b8 	.word	0x200055b8
 80073fc:	200050e0 	.word	0x200050e0
 8007400:	20005570 	.word	0x20005570
 8007404:	200050dc 	.word	0x200050dc
 8007408:	200055c4 	.word	0x200055c4

0800740c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10c      	bne.n	8007434 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	b672      	cpsid	i
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	b662      	cpsie	i
 800742e:	60fb      	str	r3, [r7, #12]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8007434:	f000 fec2 	bl	80081bc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007438:	4b06      	ldr	r3, [pc, #24]	; (8007454 <vTaskSetTimeOutState+0x48>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <vTaskSetTimeOutState+0x4c>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007448:	f000 feec 	bl	8008224 <vPortExitCritical>
}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	200055c8 	.word	0x200055c8
 8007458:	200055b4 	.word	0x200055b4

0800745c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <vTaskInternalSetTimeOutState+0x24>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800746c:	4b05      	ldr	r3, [pc, #20]	; (8007484 <vTaskInternalSetTimeOutState+0x28>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	605a      	str	r2, [r3, #4]
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	200055c8 	.word	0x200055c8
 8007484:	200055b4 	.word	0x200055b4

08007488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10c      	bne.n	80074b2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	b672      	cpsid	i
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	b662      	cpsie	i
 80074ac:	613b      	str	r3, [r7, #16]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10c      	bne.n	80074d2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	b672      	cpsid	i
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	b662      	cpsie	i
 80074cc:	60fb      	str	r3, [r7, #12]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80074d2:	f000 fe73 	bl	80081bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074d6:	4b1d      	ldr	r3, [pc, #116]	; (800754c <xTaskCheckForTimeOut+0xc4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ee:	d102      	bne.n	80074f6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	e023      	b.n	800753e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b15      	ldr	r3, [pc, #84]	; (8007550 <xTaskCheckForTimeOut+0xc8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d007      	beq.n	8007512 <xTaskCheckForTimeOut+0x8a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800750c:	2301      	movs	r3, #1
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	e015      	b.n	800753e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	429a      	cmp	r2, r3
 800751a:	d20b      	bcs.n	8007534 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	1ad2      	subs	r2, r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff ff97 	bl	800745c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	e004      	b.n	800753e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800753a:	2301      	movs	r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800753e:	f000 fe71 	bl	8008224 <vPortExitCritical>

	return xReturn;
 8007542:	69fb      	ldr	r3, [r7, #28]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3720      	adds	r7, #32
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200055b4 	.word	0x200055b4
 8007550:	200055c8 	.word	0x200055c8

08007554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <vTaskMissedYield+0x14>)
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]
}
 800755e:	bf00      	nop
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	200055c4 	.word	0x200055c4

0800756c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007574:	f000 f852 	bl	800761c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <prvIdleTask+0x28>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d9f9      	bls.n	8007574 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <prvIdleTask+0x2c>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007590:	e7f0      	b.n	8007574 <prvIdleTask+0x8>
 8007592:	bf00      	nop
 8007594:	200050e0 	.word	0x200050e0
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	e00c      	b.n	80075c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4a12      	ldr	r2, [pc, #72]	; (80075fc <prvInitialiseTaskLists+0x60>)
 80075b4:	4413      	add	r3, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fc8c 	bl	8005ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3301      	adds	r3, #1
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b37      	cmp	r3, #55	; 0x37
 80075c6:	d9ef      	bls.n	80075a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075c8:	480d      	ldr	r0, [pc, #52]	; (8007600 <prvInitialiseTaskLists+0x64>)
 80075ca:	f7fe fc83 	bl	8005ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075ce:	480d      	ldr	r0, [pc, #52]	; (8007604 <prvInitialiseTaskLists+0x68>)
 80075d0:	f7fe fc80 	bl	8005ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075d4:	480c      	ldr	r0, [pc, #48]	; (8007608 <prvInitialiseTaskLists+0x6c>)
 80075d6:	f7fe fc7d 	bl	8005ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075da:	480c      	ldr	r0, [pc, #48]	; (800760c <prvInitialiseTaskLists+0x70>)
 80075dc:	f7fe fc7a 	bl	8005ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075e0:	480b      	ldr	r0, [pc, #44]	; (8007610 <prvInitialiseTaskLists+0x74>)
 80075e2:	f7fe fc77 	bl	8005ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075e6:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <prvInitialiseTaskLists+0x78>)
 80075e8:	4a05      	ldr	r2, [pc, #20]	; (8007600 <prvInitialiseTaskLists+0x64>)
 80075ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075ec:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <prvInitialiseTaskLists+0x7c>)
 80075ee:	4a05      	ldr	r2, [pc, #20]	; (8007604 <prvInitialiseTaskLists+0x68>)
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200050e0 	.word	0x200050e0
 8007600:	20005540 	.word	0x20005540
 8007604:	20005554 	.word	0x20005554
 8007608:	20005570 	.word	0x20005570
 800760c:	20005584 	.word	0x20005584
 8007610:	2000559c 	.word	0x2000559c
 8007614:	20005568 	.word	0x20005568
 8007618:	2000556c 	.word	0x2000556c

0800761c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007622:	e019      	b.n	8007658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007624:	f000 fdca 	bl	80081bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007628:	4b10      	ldr	r3, [pc, #64]	; (800766c <prvCheckTasksWaitingTermination+0x50>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3304      	adds	r3, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe fcd7 	bl	8005fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <prvCheckTasksWaitingTermination+0x54>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3b01      	subs	r3, #1
 8007640:	4a0b      	ldr	r2, [pc, #44]	; (8007670 <prvCheckTasksWaitingTermination+0x54>)
 8007642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <prvCheckTasksWaitingTermination+0x58>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3b01      	subs	r3, #1
 800764a:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <prvCheckTasksWaitingTermination+0x58>)
 800764c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800764e:	f000 fde9 	bl	8008224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f810 	bl	8007678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <prvCheckTasksWaitingTermination+0x58>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e1      	bne.n	8007624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20005584 	.word	0x20005584
 8007670:	200055b0 	.word	0x200055b0
 8007674:	20005598 	.word	0x20005598

08007678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007686:	2b00      	cmp	r3, #0
 8007688:	d108      	bne.n	800769c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	4618      	mov	r0, r3
 8007690:	f000 ff8a 	bl	80085a8 <vPortFree>
				vPortFree( pxTCB );
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 ff87 	bl	80085a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800769a:	e01a      	b.n	80076d2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d103      	bne.n	80076ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 ff7e 	bl	80085a8 <vPortFree>
	}
 80076ac:	e011      	b.n	80076d2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d00c      	beq.n	80076d2 <prvDeleteTCB+0x5a>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	b672      	cpsid	i
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	b662      	cpsie	i
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <prvDeleteTCB+0x58>
	}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076e2:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <prvResetNextTaskUnblockTime+0x38>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <prvResetNextTaskUnblockTime+0x3c>)
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076f4:	e008      	b.n	8007708 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f6:	4b07      	ldr	r3, [pc, #28]	; (8007714 <prvResetNextTaskUnblockTime+0x38>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	4a04      	ldr	r2, [pc, #16]	; (8007718 <prvResetNextTaskUnblockTime+0x3c>)
 8007706:	6013      	str	r3, [r2, #0]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20005568 	.word	0x20005568
 8007718:	200055d0 	.word	0x200055d0

0800771c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <xTaskGetSchedulerState+0x34>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800772a:	2301      	movs	r3, #1
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	e008      	b.n	8007742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007730:	4b08      	ldr	r3, [pc, #32]	; (8007754 <xTaskGetSchedulerState+0x38>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007738:	2302      	movs	r3, #2
 800773a:	607b      	str	r3, [r7, #4]
 800773c:	e001      	b.n	8007742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007742:	687b      	ldr	r3, [r7, #4]
	}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	200055bc 	.word	0x200055bc
 8007754:	200055d8 	.word	0x200055d8

08007758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d05a      	beq.n	8007824 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800776e:	4b30      	ldr	r3, [pc, #192]	; (8007830 <xTaskPriorityDisinherit+0xd8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	429a      	cmp	r2, r3
 8007776:	d00c      	beq.n	8007792 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	b672      	cpsid	i
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	b662      	cpsie	i
 800778c:	60fb      	str	r3, [r7, #12]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10c      	bne.n	80077b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	b672      	cpsid	i
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	b662      	cpsie	i
 80077ae:	60bb      	str	r3, [r7, #8]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	1e5a      	subs	r2, r3, #1
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d02c      	beq.n	8007824 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d128      	bne.n	8007824 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fc06 	bl	8005fe8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <xTaskPriorityDisinherit+0xdc>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d903      	bls.n	8007804 <xTaskPriorityDisinherit+0xac>
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a0c      	ldr	r2, [pc, #48]	; (8007834 <xTaskPriorityDisinherit+0xdc>)
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4a09      	ldr	r2, [pc, #36]	; (8007838 <xTaskPriorityDisinherit+0xe0>)
 8007812:	441a      	add	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fe fb87 	bl	8005f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007824:	697b      	ldr	r3, [r7, #20]
	}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	200050dc 	.word	0x200050dc
 8007834:	200055b8 	.word	0x200055b8
 8007838:	200050e0 	.word	0x200050e0

0800783c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007846:	4b21      	ldr	r3, [pc, #132]	; (80078cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800784c:	4b20      	ldr	r3, [pc, #128]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3304      	adds	r3, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fbc8 	bl	8005fe8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800785e:	d10a      	bne.n	8007876 <prvAddCurrentTaskToDelayedList+0x3a>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007866:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4819      	ldr	r0, [pc, #100]	; (80078d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007870:	f7fe fb5d 	bl	8005f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007874:	e026      	b.n	80078c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4413      	add	r3, r2
 800787c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800787e:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	429a      	cmp	r2, r3
 800788c:	d209      	bcs.n	80078a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f7fe fb6b 	bl	8005f76 <vListInsert>
}
 80078a0:	e010      	b.n	80078c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fb61 	bl	8005f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078b4:	4b0a      	ldr	r3, [pc, #40]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d202      	bcs.n	80078c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078be:	4a08      	ldr	r2, [pc, #32]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6013      	str	r3, [r2, #0]
}
 80078c4:	bf00      	nop
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200055b4 	.word	0x200055b4
 80078d0:	200050dc 	.word	0x200050dc
 80078d4:	2000559c 	.word	0x2000559c
 80078d8:	2000556c 	.word	0x2000556c
 80078dc:	20005568 	.word	0x20005568
 80078e0:	200055d0 	.word	0x200055d0

080078e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078ee:	f000 fb15 	bl	8007f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078f2:	4b1d      	ldr	r3, [pc, #116]	; (8007968 <xTimerCreateTimerTask+0x84>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d021      	beq.n	800793e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007902:	1d3a      	adds	r2, r7, #4
 8007904:	f107 0108 	add.w	r1, r7, #8
 8007908:	f107 030c 	add.w	r3, r7, #12
 800790c:	4618      	mov	r0, r3
 800790e:	f7fe fac7 	bl	8005ea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	9202      	str	r2, [sp, #8]
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	2302      	movs	r3, #2
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2300      	movs	r3, #0
 8007922:	460a      	mov	r2, r1
 8007924:	4911      	ldr	r1, [pc, #68]	; (800796c <xTimerCreateTimerTask+0x88>)
 8007926:	4812      	ldr	r0, [pc, #72]	; (8007970 <xTimerCreateTimerTask+0x8c>)
 8007928:	f7ff f892 	bl	8006a50 <xTaskCreateStatic>
 800792c:	4603      	mov	r3, r0
 800792e:	4a11      	ldr	r2, [pc, #68]	; (8007974 <xTimerCreateTimerTask+0x90>)
 8007930:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <xTimerCreateTimerTask+0x90>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800793a:	2301      	movs	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10c      	bne.n	800795e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	b672      	cpsid	i
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	b662      	cpsie	i
 8007958:	613b      	str	r3, [r7, #16]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800795e:	697b      	ldr	r3, [r7, #20]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	2000560c 	.word	0x2000560c
 800796c:	08014a28 	.word	0x08014a28
 8007970:	08007ab5 	.word	0x08007ab5
 8007974:	20005610 	.word	0x20005610

08007978 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	; 0x28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007986:	2300      	movs	r3, #0
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10c      	bne.n	80079aa <xTimerGenericCommand+0x32>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	b672      	cpsid	i
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	b662      	cpsie	i
 80079a4:	623b      	str	r3, [r7, #32]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079aa:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <xTimerGenericCommand+0x9c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02a      	beq.n	8007a08 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b05      	cmp	r3, #5
 80079c2:	dc18      	bgt.n	80079f6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079c4:	f7ff feaa 	bl	800771c <xTaskGetSchedulerState>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d109      	bne.n	80079e2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079ce:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <xTimerGenericCommand+0x9c>)
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	f107 0110 	add.w	r1, r7, #16
 80079d6:	2300      	movs	r3, #0
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	f7fe fc3f 	bl	800625c <xQueueGenericSend>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24
 80079e0:	e012      	b.n	8007a08 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <xTimerGenericCommand+0x9c>)
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	f107 0110 	add.w	r1, r7, #16
 80079ea:	2300      	movs	r3, #0
 80079ec:	2200      	movs	r2, #0
 80079ee:	f7fe fc35 	bl	800625c <xQueueGenericSend>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24
 80079f4:	e008      	b.n	8007a08 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <xTimerGenericCommand+0x9c>)
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f107 0110 	add.w	r1, r7, #16
 80079fe:	2300      	movs	r3, #0
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	f7fe fd31 	bl	8006468 <xQueueGenericSendFromISR>
 8007a06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3728      	adds	r7, #40	; 0x28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000560c 	.word	0x2000560c

08007a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a22:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <prvProcessExpiredTimer+0x98>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fad9 	bl	8005fe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d024      	beq.n	8007a8e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	18d1      	adds	r1, r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	6978      	ldr	r0, [r7, #20]
 8007a52:	f000 f8d3 	bl	8007bfc <prvInsertTimerInActiveList>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d021      	beq.n	8007aa0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	2300      	movs	r3, #0
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	2100      	movs	r1, #0
 8007a66:	6978      	ldr	r0, [r7, #20]
 8007a68:	f7ff ff86 	bl	8007978 <xTimerGenericCommand>
 8007a6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d115      	bne.n	8007aa0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	b672      	cpsid	i
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	b662      	cpsie	i
 8007a88:	60fb      	str	r3, [r7, #12]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a94:	f023 0301 	bic.w	r3, r3, #1
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	6978      	ldr	r0, [r7, #20]
 8007aa6:	4798      	blx	r3
}
 8007aa8:	bf00      	nop
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20005604 	.word	0x20005604

08007ab4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007abc:	f107 0308 	add.w	r3, r7, #8
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f857 	bl	8007b74 <prvGetNextExpireTime>
 8007ac6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	4619      	mov	r1, r3
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f803 	bl	8007ad8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ad2:	f000 f8d5 	bl	8007c80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ad6:	e7f1      	b.n	8007abc <prvTimerTask+0x8>

08007ad8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ae2:	f7ff f9ff 	bl	8006ee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ae6:	f107 0308 	add.w	r3, r7, #8
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f866 	bl	8007bbc <prvSampleTimeNow>
 8007af0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d130      	bne.n	8007b5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <prvProcessTimerOrBlockTask+0x3c>
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d806      	bhi.n	8007b14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b06:	f7ff f9fb 	bl	8006f00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff ff83 	bl	8007a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b12:	e024      	b.n	8007b5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d008      	beq.n	8007b2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b1a:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <prvProcessTimerOrBlockTask+0x90>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <prvProcessTimerOrBlockTask+0x50>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <prvProcessTimerOrBlockTask+0x52>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b2c:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <prvProcessTimerOrBlockTask+0x94>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f7fe ff55 	bl	80069e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b3e:	f7ff f9df 	bl	8006f00 <xTaskResumeAll>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10a      	bne.n	8007b5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b48:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <prvProcessTimerOrBlockTask+0x98>)
 8007b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	f3bf 8f6f 	isb	sy
}
 8007b58:	e001      	b.n	8007b5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b5a:	f7ff f9d1 	bl	8006f00 <xTaskResumeAll>
}
 8007b5e:	bf00      	nop
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20005608 	.word	0x20005608
 8007b6c:	2000560c 	.word	0x2000560c
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <prvGetNextExpireTime+0x44>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <prvGetNextExpireTime+0x16>
 8007b86:	2201      	movs	r2, #1
 8007b88:	e000      	b.n	8007b8c <prvGetNextExpireTime+0x18>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d105      	bne.n	8007ba4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <prvGetNextExpireTime+0x44>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	e001      	b.n	8007ba8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20005604 	.word	0x20005604

08007bbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bc4:	f7ff fa3c 	bl	8007040 <xTaskGetTickCount>
 8007bc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bca:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <prvSampleTimeNow+0x3c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d205      	bcs.n	8007be0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bd4:	f000 f93c 	bl	8007e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e002      	b.n	8007be6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007be6:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <prvSampleTimeNow+0x3c>)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bec:	68fb      	ldr	r3, [r7, #12]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20005614 	.word	0x20005614

08007bfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d812      	bhi.n	8007c48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d302      	bcc.n	8007c36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c30:	2301      	movs	r3, #1
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	e01b      	b.n	8007c6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c36:	4b10      	ldr	r3, [pc, #64]	; (8007c78 <prvInsertTimerInActiveList+0x7c>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fe f998 	bl	8005f76 <vListInsert>
 8007c46:	e012      	b.n	8007c6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d206      	bcs.n	8007c5e <prvInsertTimerInActiveList+0x62>
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d302      	bcc.n	8007c5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	e007      	b.n	8007c6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <prvInsertTimerInActiveList+0x80>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4619      	mov	r1, r3
 8007c68:	4610      	mov	r0, r2
 8007c6a:	f7fe f984 	bl	8005f76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c6e:	697b      	ldr	r3, [r7, #20]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20005608 	.word	0x20005608
 8007c7c:	20005604 	.word	0x20005604

08007c80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08e      	sub	sp, #56	; 0x38
 8007c84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c86:	e0d0      	b.n	8007e2a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da1a      	bge.n	8007cc4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c8e:	1d3b      	adds	r3, r7, #4
 8007c90:	3304      	adds	r3, #4
 8007c92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10c      	bne.n	8007cb4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	b672      	cpsid	i
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	b662      	cpsie	i
 8007cae:	61fb      	str	r3, [r7, #28]
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cba:	6850      	ldr	r0, [r2, #4]
 8007cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cbe:	6892      	ldr	r2, [r2, #8]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f2c0 80ae 	blt.w	8007e28 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe f983 	bl	8005fe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff ff69 	bl	8007bbc <prvSampleTimeNow>
 8007cea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	f200 809b 	bhi.w	8007e2a <prvProcessReceivedCommands+0x1aa>
 8007cf4:	a201      	add	r2, pc, #4	; (adr r2, 8007cfc <prvProcessReceivedCommands+0x7c>)
 8007cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfa:	bf00      	nop
 8007cfc:	08007d25 	.word	0x08007d25
 8007d00:	08007d25 	.word	0x08007d25
 8007d04:	08007d25 	.word	0x08007d25
 8007d08:	08007d9d 	.word	0x08007d9d
 8007d0c:	08007db1 	.word	0x08007db1
 8007d10:	08007dff 	.word	0x08007dff
 8007d14:	08007d25 	.word	0x08007d25
 8007d18:	08007d25 	.word	0x08007d25
 8007d1c:	08007d9d 	.word	0x08007d9d
 8007d20:	08007db1 	.word	0x08007db1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d2a:	f043 0301 	orr.w	r3, r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	18d1      	adds	r1, r2, r3
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d44:	f7ff ff5a 	bl	8007bfc <prvInsertTimerInActiveList>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d06d      	beq.n	8007e2a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d062      	beq.n	8007e2a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	441a      	add	r2, r3
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	2300      	movs	r3, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d76:	f7ff fdff 	bl	8007978 <xTimerGenericCommand>
 8007d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d153      	bne.n	8007e2a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	b672      	cpsid	i
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	b662      	cpsie	i
 8007d96:	61bb      	str	r3, [r7, #24]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007dae:	e03c      	b.n	8007e2a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10c      	bne.n	8007dea <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	b672      	cpsid	i
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	b662      	cpsie	i
 8007de4:	617b      	str	r3, [r7, #20]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	18d1      	adds	r1, r2, r3
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df8:	f7ff ff00 	bl	8007bfc <prvInsertTimerInActiveList>
					break;
 8007dfc:	e015      	b.n	8007e2a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0e:	f000 fbcb 	bl	80085a8 <vPortFree>
 8007e12:	e00a      	b.n	8007e2a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e1a:	f023 0301 	bic.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e26:	e000      	b.n	8007e2a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e2a:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <prvProcessReceivedCommands+0x1cc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	1d39      	adds	r1, r7, #4
 8007e30:	2200      	movs	r2, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fbb8 	bl	80065a8 <xQueueReceive>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f47f af24 	bne.w	8007c88 <prvProcessReceivedCommands+0x8>
	}
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
 8007e44:	3730      	adds	r7, #48	; 0x30
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	2000560c 	.word	0x2000560c

08007e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e56:	e04a      	b.n	8007eee <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e58:	4b2e      	ldr	r3, [pc, #184]	; (8007f14 <prvSwitchTimerLists+0xc4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e62:	4b2c      	ldr	r3, [pc, #176]	; (8007f14 <prvSwitchTimerLists+0xc4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe f8b9 	bl	8005fe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d030      	beq.n	8007eee <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4413      	add	r3, r2
 8007e94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d90e      	bls.n	8007ebc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eaa:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <prvSwitchTimerLists+0xc4>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	f7fe f85e 	bl	8005f76 <vListInsert>
 8007eba:	e018      	b.n	8007eee <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff fd56 	bl	8007978 <xTimerGenericCommand>
 8007ecc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10c      	bne.n	8007eee <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	b672      	cpsid	i
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	b662      	cpsie	i
 8007ee8:	603b      	str	r3, [r7, #0]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <prvSwitchTimerLists+0xc4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1af      	bne.n	8007e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <prvSwitchTimerLists+0xc4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007efe:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <prvSwitchTimerLists+0xc8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a04      	ldr	r2, [pc, #16]	; (8007f14 <prvSwitchTimerLists+0xc4>)
 8007f04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f06:	4a04      	ldr	r2, [pc, #16]	; (8007f18 <prvSwitchTimerLists+0xc8>)
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	6013      	str	r3, [r2, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20005604 	.word	0x20005604
 8007f18:	20005608 	.word	0x20005608

08007f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f22:	f000 f94b 	bl	80081bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <prvCheckForValidListAndQueue+0x60>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d120      	bne.n	8007f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f2e:	4814      	ldr	r0, [pc, #80]	; (8007f80 <prvCheckForValidListAndQueue+0x64>)
 8007f30:	f7fd ffd0 	bl	8005ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f34:	4813      	ldr	r0, [pc, #76]	; (8007f84 <prvCheckForValidListAndQueue+0x68>)
 8007f36:	f7fd ffcd 	bl	8005ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f3a:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <prvCheckForValidListAndQueue+0x6c>)
 8007f3c:	4a10      	ldr	r2, [pc, #64]	; (8007f80 <prvCheckForValidListAndQueue+0x64>)
 8007f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f40:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <prvCheckForValidListAndQueue+0x70>)
 8007f42:	4a10      	ldr	r2, [pc, #64]	; (8007f84 <prvCheckForValidListAndQueue+0x68>)
 8007f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f46:	2300      	movs	r3, #0
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <prvCheckForValidListAndQueue+0x74>)
 8007f4c:	4a11      	ldr	r2, [pc, #68]	; (8007f94 <prvCheckForValidListAndQueue+0x78>)
 8007f4e:	2110      	movs	r1, #16
 8007f50:	200a      	movs	r0, #10
 8007f52:	f7fe f8dd 	bl	8006110 <xQueueGenericCreateStatic>
 8007f56:	4603      	mov	r3, r0
 8007f58:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <prvCheckForValidListAndQueue+0x60>)
 8007f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f5c:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <prvCheckForValidListAndQueue+0x60>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <prvCheckForValidListAndQueue+0x60>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	490b      	ldr	r1, [pc, #44]	; (8007f98 <prvCheckForValidListAndQueue+0x7c>)
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fd12 	bl	8006994 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f70:	f000 f958 	bl	8008224 <vPortExitCritical>
}
 8007f74:	bf00      	nop
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	2000560c 	.word	0x2000560c
 8007f80:	200055dc 	.word	0x200055dc
 8007f84:	200055f0 	.word	0x200055f0
 8007f88:	20005604 	.word	0x20005604
 8007f8c:	20005608 	.word	0x20005608
 8007f90:	200056b8 	.word	0x200056b8
 8007f94:	20005618 	.word	0x20005618
 8007f98:	08014a30 	.word	0x08014a30

08007f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3b04      	subs	r3, #4
 8007fac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3b04      	subs	r3, #4
 8007fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0201 	bic.w	r2, r3, #1
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3b04      	subs	r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fcc:	4a0c      	ldr	r2, [pc, #48]	; (8008000 <pxPortInitialiseStack+0x64>)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3b14      	subs	r3, #20
 8007fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f06f 0202 	mvn.w	r2, #2
 8007fea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3b20      	subs	r3, #32
 8007ff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	08008005 	.word	0x08008005

08008004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800800e:	4b14      	ldr	r3, [pc, #80]	; (8008060 <prvTaskExitError+0x5c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008016:	d00c      	beq.n	8008032 <prvTaskExitError+0x2e>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	b672      	cpsid	i
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	b662      	cpsie	i
 800802c:	60fb      	str	r3, [r7, #12]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <prvTaskExitError+0x2c>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	b672      	cpsid	i
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	b662      	cpsie	i
 8008046:	60bb      	str	r3, [r7, #8]
}
 8008048:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800804a:	bf00      	nop
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0fc      	beq.n	800804c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	20000010 	.word	0x20000010
	...

08008070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <pxCurrentTCBConst2>)
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	f380 8809 	msr	PSP, r0
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f380 8811 	msr	BASEPRI, r0
 800808a:	4770      	bx	lr
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst2>:
 8008090:	200050dc 	.word	0x200050dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008098:	4808      	ldr	r0, [pc, #32]	; (80080bc <prvPortStartFirstTask+0x24>)
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	6800      	ldr	r0, [r0, #0]
 800809e:	f380 8808 	msr	MSP, r0
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8814 	msr	CONTROL, r0
 80080aa:	b662      	cpsie	i
 80080ac:	b661      	cpsie	f
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	df00      	svc	0
 80080b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ba:	bf00      	nop
 80080bc:	e000ed08 	.word	0xe000ed08

080080c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080c6:	4b37      	ldr	r3, [pc, #220]	; (80081a4 <xPortStartScheduler+0xe4>)
 80080c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	22ff      	movs	r2, #255	; 0xff
 80080d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <xPortStartScheduler+0xe8>)
 80080ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080ee:	4b2f      	ldr	r3, [pc, #188]	; (80081ac <xPortStartScheduler+0xec>)
 80080f0:	2207      	movs	r2, #7
 80080f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080f4:	e009      	b.n	800810a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80080f6:	4b2d      	ldr	r3, [pc, #180]	; (80081ac <xPortStartScheduler+0xec>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	4a2b      	ldr	r2, [pc, #172]	; (80081ac <xPortStartScheduler+0xec>)
 80080fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d0ef      	beq.n	80080f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008116:	4b25      	ldr	r3, [pc, #148]	; (80081ac <xPortStartScheduler+0xec>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f1c3 0307 	rsb	r3, r3, #7
 800811e:	2b04      	cmp	r3, #4
 8008120:	d00c      	beq.n	800813c <xPortStartScheduler+0x7c>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	b672      	cpsid	i
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	b662      	cpsie	i
 8008136:	60bb      	str	r3, [r7, #8]
}
 8008138:	bf00      	nop
 800813a:	e7fe      	b.n	800813a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800813c:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <xPortStartScheduler+0xec>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	021b      	lsls	r3, r3, #8
 8008142:	4a1a      	ldr	r2, [pc, #104]	; (80081ac <xPortStartScheduler+0xec>)
 8008144:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008146:	4b19      	ldr	r3, [pc, #100]	; (80081ac <xPortStartScheduler+0xec>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800814e:	4a17      	ldr	r2, [pc, #92]	; (80081ac <xPortStartScheduler+0xec>)
 8008150:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <xPortStartScheduler+0xf0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a14      	ldr	r2, [pc, #80]	; (80081b0 <xPortStartScheduler+0xf0>)
 8008160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008164:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008166:	4b12      	ldr	r3, [pc, #72]	; (80081b0 <xPortStartScheduler+0xf0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a11      	ldr	r2, [pc, #68]	; (80081b0 <xPortStartScheduler+0xf0>)
 800816c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008170:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008172:	f000 f8dd 	bl	8008330 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008176:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <xPortStartScheduler+0xf4>)
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800817c:	f000 f8fc 	bl	8008378 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008180:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <xPortStartScheduler+0xf8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a0c      	ldr	r2, [pc, #48]	; (80081b8 <xPortStartScheduler+0xf8>)
 8008186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800818a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800818c:	f7ff ff84 	bl	8008098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008190:	f7ff f822 	bl	80071d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008194:	f7ff ff36 	bl	8008004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	e000e400 	.word	0xe000e400
 80081a8:	20005708 	.word	0x20005708
 80081ac:	2000570c 	.word	0x2000570c
 80081b0:	e000ed20 	.word	0xe000ed20
 80081b4:	20000010 	.word	0x20000010
 80081b8:	e000ef34 	.word	0xe000ef34

080081bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	607b      	str	r3, [r7, #4]
}
 80081d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081da:	4b10      	ldr	r3, [pc, #64]	; (800821c <vPortEnterCritical+0x60>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3301      	adds	r3, #1
 80081e0:	4a0e      	ldr	r2, [pc, #56]	; (800821c <vPortEnterCritical+0x60>)
 80081e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <vPortEnterCritical+0x60>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d111      	bne.n	8008210 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081ec:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <vPortEnterCritical+0x64>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <vPortEnterCritical+0x54>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	b672      	cpsid	i
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	b662      	cpsie	i
 800820a:	603b      	str	r3, [r7, #0]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <vPortEnterCritical+0x52>
	}
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	20000010 	.word	0x20000010
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800822a:	4b13      	ldr	r3, [pc, #76]	; (8008278 <vPortExitCritical+0x54>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10c      	bne.n	800824c <vPortExitCritical+0x28>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	b672      	cpsid	i
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	b662      	cpsie	i
 8008246:	607b      	str	r3, [r7, #4]
}
 8008248:	bf00      	nop
 800824a:	e7fe      	b.n	800824a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <vPortExitCritical+0x54>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3b01      	subs	r3, #1
 8008252:	4a09      	ldr	r2, [pc, #36]	; (8008278 <vPortExitCritical+0x54>)
 8008254:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008256:	4b08      	ldr	r3, [pc, #32]	; (8008278 <vPortExitCritical+0x54>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d105      	bne.n	800826a <vPortExitCritical+0x46>
 800825e:	2300      	movs	r3, #0
 8008260:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	f383 8811 	msr	BASEPRI, r3
}
 8008268:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20000010 	.word	0x20000010
 800827c:	00000000 	.word	0x00000000

08008280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008280:	f3ef 8009 	mrs	r0, PSP
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <pxCurrentTCBConst>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	f01e 0f10 	tst.w	lr, #16
 8008290:	bf08      	it	eq
 8008292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829a:	6010      	str	r0, [r2, #0]
 800829c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082a4:	b672      	cpsid	i
 80082a6:	f380 8811 	msr	BASEPRI, r0
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	b662      	cpsie	i
 80082b4:	f7fe ff90 	bl	80071d8 <vTaskSwitchContext>
 80082b8:	f04f 0000 	mov.w	r0, #0
 80082bc:	f380 8811 	msr	BASEPRI, r0
 80082c0:	bc09      	pop	{r0, r3}
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	6808      	ldr	r0, [r1, #0]
 80082c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	f01e 0f10 	tst.w	lr, #16
 80082ce:	bf08      	it	eq
 80082d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082d4:	f380 8809 	msr	PSP, r0
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <pxCurrentTCBConst>:
 80082e0:	200050dc 	.word	0x200050dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop

080082e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	b672      	cpsid	i
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	b662      	cpsie	i
 8008302:	607b      	str	r3, [r7, #4]
}
 8008304:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008306:	f7fe feab 	bl	8007060 <xTaskIncrementTick>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008310:	4b06      	ldr	r3, [pc, #24]	; (800832c <SysTick_Handler+0x44>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	2300      	movs	r3, #0
 800831a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	f383 8811 	msr	BASEPRI, r3
}
 8008322:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	e000ed04 	.word	0xe000ed04

08008330 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <vPortSetupTimerInterrupt+0x34>)
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800833a:	4b0b      	ldr	r3, [pc, #44]	; (8008368 <vPortSetupTimerInterrupt+0x38>)
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <vPortSetupTimerInterrupt+0x3c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a0a      	ldr	r2, [pc, #40]	; (8008370 <vPortSetupTimerInterrupt+0x40>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	099b      	lsrs	r3, r3, #6
 800834c:	4a09      	ldr	r2, [pc, #36]	; (8008374 <vPortSetupTimerInterrupt+0x44>)
 800834e:	3b01      	subs	r3, #1
 8008350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008352:	4b04      	ldr	r3, [pc, #16]	; (8008364 <vPortSetupTimerInterrupt+0x34>)
 8008354:	2207      	movs	r2, #7
 8008356:	601a      	str	r2, [r3, #0]
}
 8008358:	bf00      	nop
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	e000e010 	.word	0xe000e010
 8008368:	e000e018 	.word	0xe000e018
 800836c:	20000004 	.word	0x20000004
 8008370:	10624dd3 	.word	0x10624dd3
 8008374:	e000e014 	.word	0xe000e014

08008378 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008378:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008388 <vPortEnableVFP+0x10>
 800837c:	6801      	ldr	r1, [r0, #0]
 800837e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008382:	6001      	str	r1, [r0, #0]
 8008384:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008386:	bf00      	nop
 8008388:	e000ed88 	.word	0xe000ed88

0800838c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008392:	f3ef 8305 	mrs	r3, IPSR
 8008396:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b0f      	cmp	r3, #15
 800839c:	d916      	bls.n	80083cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800839e:	4a19      	ldr	r2, [pc, #100]	; (8008404 <vPortValidateInterruptPriority+0x78>)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083a8:	4b17      	ldr	r3, [pc, #92]	; (8008408 <vPortValidateInterruptPriority+0x7c>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	7afa      	ldrb	r2, [r7, #11]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d20c      	bcs.n	80083cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	b672      	cpsid	i
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	b662      	cpsie	i
 80083c6:	607b      	str	r3, [r7, #4]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083cc:	4b0f      	ldr	r3, [pc, #60]	; (800840c <vPortValidateInterruptPriority+0x80>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083d4:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <vPortValidateInterruptPriority+0x84>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d90c      	bls.n	80083f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	b672      	cpsid	i
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	b662      	cpsie	i
 80083f0:	603b      	str	r3, [r7, #0]
}
 80083f2:	bf00      	nop
 80083f4:	e7fe      	b.n	80083f4 <vPortValidateInterruptPriority+0x68>
	}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	e000e3f0 	.word	0xe000e3f0
 8008408:	20005708 	.word	0x20005708
 800840c:	e000ed0c 	.word	0xe000ed0c
 8008410:	2000570c 	.word	0x2000570c

08008414 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b08a      	sub	sp, #40	; 0x28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008420:	f7fe fd60 	bl	8006ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008424:	4b5b      	ldr	r3, [pc, #364]	; (8008594 <pvPortMalloc+0x180>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800842c:	f000 f91a 	bl	8008664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008430:	4b59      	ldr	r3, [pc, #356]	; (8008598 <pvPortMalloc+0x184>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4013      	ands	r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 8092 	bne.w	8008562 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01f      	beq.n	8008484 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008444:	2208      	movs	r2, #8
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4413      	add	r3, r2
 800844a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f003 0307 	and.w	r3, r3, #7
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f023 0307 	bic.w	r3, r3, #7
 800845c:	3308      	adds	r3, #8
 800845e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <pvPortMalloc+0x70>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	b672      	cpsid	i
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	b662      	cpsie	i
 800847e:	617b      	str	r3, [r7, #20]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d06b      	beq.n	8008562 <pvPortMalloc+0x14e>
 800848a:	4b44      	ldr	r3, [pc, #272]	; (800859c <pvPortMalloc+0x188>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	429a      	cmp	r2, r3
 8008492:	d866      	bhi.n	8008562 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008494:	4b42      	ldr	r3, [pc, #264]	; (80085a0 <pvPortMalloc+0x18c>)
 8008496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008498:	4b41      	ldr	r3, [pc, #260]	; (80085a0 <pvPortMalloc+0x18c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800849e:	e004      	b.n	80084aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d903      	bls.n	80084bc <pvPortMalloc+0xa8>
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f1      	bne.n	80084a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084bc:	4b35      	ldr	r3, [pc, #212]	; (8008594 <pvPortMalloc+0x180>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d04d      	beq.n	8008562 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2208      	movs	r2, #8
 80084cc:	4413      	add	r3, r2
 80084ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	2308      	movs	r3, #8
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d921      	bls.n	800852c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <pvPortMalloc+0x100>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	b672      	cpsid	i
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	b662      	cpsie	i
 800850e:	613b      	str	r3, [r7, #16]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008526:	69b8      	ldr	r0, [r7, #24]
 8008528:	f000 f8fe 	bl	8008728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800852c:	4b1b      	ldr	r3, [pc, #108]	; (800859c <pvPortMalloc+0x188>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	4a19      	ldr	r2, [pc, #100]	; (800859c <pvPortMalloc+0x188>)
 8008538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800853a:	4b18      	ldr	r3, [pc, #96]	; (800859c <pvPortMalloc+0x188>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b19      	ldr	r3, [pc, #100]	; (80085a4 <pvPortMalloc+0x190>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d203      	bcs.n	800854e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008546:	4b15      	ldr	r3, [pc, #84]	; (800859c <pvPortMalloc+0x188>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a16      	ldr	r2, [pc, #88]	; (80085a4 <pvPortMalloc+0x190>)
 800854c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	4b11      	ldr	r3, [pc, #68]	; (8008598 <pvPortMalloc+0x184>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	431a      	orrs	r2, r3
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008562:	f7fe fccd 	bl	8006f00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00c      	beq.n	800858a <pvPortMalloc+0x176>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	b672      	cpsid	i
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	b662      	cpsie	i
 8008584:	60fb      	str	r3, [r7, #12]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <pvPortMalloc+0x174>
	return pvReturn;
 800858a:	69fb      	ldr	r3, [r7, #28]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3728      	adds	r7, #40	; 0x28
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20009318 	.word	0x20009318
 8008598:	20009324 	.word	0x20009324
 800859c:	2000931c 	.word	0x2000931c
 80085a0:	20009310 	.word	0x20009310
 80085a4:	20009320 	.word	0x20009320

080085a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d04c      	beq.n	8008654 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085ba:	2308      	movs	r3, #8
 80085bc:	425b      	negs	r3, r3
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4413      	add	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b23      	ldr	r3, [pc, #140]	; (800865c <vPortFree+0xb4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4013      	ands	r3, r2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10c      	bne.n	80085f0 <vPortFree+0x48>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	b672      	cpsid	i
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	b662      	cpsie	i
 80085ea:	60fb      	str	r3, [r7, #12]
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <vPortFree+0x6a>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	b672      	cpsid	i
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	b662      	cpsie	i
 800860c:	60bb      	str	r3, [r7, #8]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <vPortFree+0xb4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4013      	ands	r3, r2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d019      	beq.n	8008654 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d115      	bne.n	8008654 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <vPortFree+0xb4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	43db      	mvns	r3, r3
 8008632:	401a      	ands	r2, r3
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008638:	f7fe fc54 	bl	8006ee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <vPortFree+0xb8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4413      	add	r3, r2
 8008646:	4a06      	ldr	r2, [pc, #24]	; (8008660 <vPortFree+0xb8>)
 8008648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800864a:	6938      	ldr	r0, [r7, #16]
 800864c:	f000 f86c 	bl	8008728 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008650:	f7fe fc56 	bl	8006f00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008654:	bf00      	nop
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	20009324 	.word	0x20009324
 8008660:	2000931c 	.word	0x2000931c

08008664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800866a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800866e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008670:	4b27      	ldr	r3, [pc, #156]	; (8008710 <prvHeapInit+0xac>)
 8008672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f003 0307 	and.w	r3, r3, #7
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00c      	beq.n	8008698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3307      	adds	r3, #7
 8008682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0307 	bic.w	r3, r3, #7
 800868a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	4a1f      	ldr	r2, [pc, #124]	; (8008710 <prvHeapInit+0xac>)
 8008694:	4413      	add	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800869c:	4a1d      	ldr	r2, [pc, #116]	; (8008714 <prvHeapInit+0xb0>)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086a2:	4b1c      	ldr	r3, [pc, #112]	; (8008714 <prvHeapInit+0xb0>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4413      	add	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086b0:	2208      	movs	r2, #8
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0307 	bic.w	r3, r3, #7
 80086be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4a15      	ldr	r2, [pc, #84]	; (8008718 <prvHeapInit+0xb4>)
 80086c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <prvHeapInit+0xb4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2200      	movs	r2, #0
 80086cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086ce:	4b12      	ldr	r3, [pc, #72]	; (8008718 <prvHeapInit+0xb4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	1ad2      	subs	r2, r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086e4:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <prvHeapInit+0xb4>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	4a0a      	ldr	r2, [pc, #40]	; (800871c <prvHeapInit+0xb8>)
 80086f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	4a09      	ldr	r2, [pc, #36]	; (8008720 <prvHeapInit+0xbc>)
 80086fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086fc:	4b09      	ldr	r3, [pc, #36]	; (8008724 <prvHeapInit+0xc0>)
 80086fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008702:	601a      	str	r2, [r3, #0]
}
 8008704:	bf00      	nop
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	20005710 	.word	0x20005710
 8008714:	20009310 	.word	0x20009310
 8008718:	20009318 	.word	0x20009318
 800871c:	20009320 	.word	0x20009320
 8008720:	2000931c 	.word	0x2000931c
 8008724:	20009324 	.word	0x20009324

08008728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008730:	4b28      	ldr	r3, [pc, #160]	; (80087d4 <prvInsertBlockIntoFreeList+0xac>)
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e002      	b.n	800873c <prvInsertBlockIntoFreeList+0x14>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d8f7      	bhi.n	8008736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	4413      	add	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d108      	bne.n	800876a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	441a      	add	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	441a      	add	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d118      	bne.n	80087b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d00d      	beq.n	80087a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	441a      	add	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e008      	b.n	80087b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <prvInsertBlockIntoFreeList+0xb0>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	e003      	b.n	80087b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d002      	beq.n	80087c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087c6:	bf00      	nop
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20009310 	.word	0x20009310
 80087d8:	20009318 	.word	0x20009318

080087dc <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8>:
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x14>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	b10a      	cbz	r2, 80087e6 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0xa>
 80087e2:	4803      	ldr	r0, [pc, #12]	; (80087f0 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x14>)
 80087e4:	4770      	bx	lr
 80087e6:	4a03      	ldr	r2, [pc, #12]	; (80087f4 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x18>)
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x14>)
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	4770      	bx	lr
 80087f0:	2000001c 	.word	0x2000001c
 80087f4:	200000d0 	.word	0x200000d0

080087f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8>:
 80087f8:	4a02      	ldr	r2, [pc, #8]	; (8008804 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0xc>)
 80087fa:	4b03      	ldr	r3, [pc, #12]	; (8008808 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x10>)
 80087fc:	6812      	ldr	r2, [r2, #0]
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	200000d0 	.word	0x200000d0
 8008808:	2000001c 	.word	0x2000001c

0800880c <example_interfaces__msg__UInt8__rosidl_typesupport_introspection_c__UInt8_init_function>:
 800880c:	f001 bf38 	b.w	800a680 <example_interfaces__msg__UInt8__init>

08008810 <example_interfaces__msg__UInt8__rosidl_typesupport_introspection_c__UInt8_fini_function>:
 8008810:	f001 bf3a 	b.w	800a688 <example_interfaces__msg__UInt8__fini>

08008814 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8>:
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x14>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	b10a      	cbz	r2, 800881e <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0xa>
 800881a:	4803      	ldr	r0, [pc, #12]	; (8008828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x14>)
 800881c:	4770      	bx	lr
 800881e:	4a03      	ldr	r2, [pc, #12]	; (800882c <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x18>)
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x14>)
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	4770      	bx	lr
 8008828:	20000070 	.word	0x20000070
 800882c:	200000d4 	.word	0x200000d4

08008830 <_UInt8__max_serialized_size>:
 8008830:	2101      	movs	r1, #1
 8008832:	2000      	movs	r0, #0
 8008834:	b508      	push	{r3, lr}
 8008836:	f000 ff6f 	bl	8009718 <ucdr_alignment>
 800883a:	3001      	adds	r0, #1
 800883c:	bd08      	pop	{r3, pc}
 800883e:	bf00      	nop

08008840 <_UInt8__cdr_deserialize>:
 8008840:	b109      	cbz	r1, 8008846 <_UInt8__cdr_deserialize+0x6>
 8008842:	f000 b867 	b.w	8008914 <ucdr_deserialize_uint8_t>
 8008846:	4608      	mov	r0, r1
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop

0800884c <get_serialized_size_example_interfaces__msg__UInt8>:
 800884c:	b138      	cbz	r0, 800885e <get_serialized_size_example_interfaces__msg__UInt8+0x12>
 800884e:	b508      	push	{r3, lr}
 8008850:	460b      	mov	r3, r1
 8008852:	2101      	movs	r1, #1
 8008854:	4618      	mov	r0, r3
 8008856:	f000 ff5f 	bl	8009718 <ucdr_alignment>
 800885a:	3001      	adds	r0, #1
 800885c:	bd08      	pop	{r3, pc}
 800885e:	4770      	bx	lr

08008860 <_UInt8__cdr_serialize>:
 8008860:	460a      	mov	r2, r1
 8008862:	b118      	cbz	r0, 800886c <_UInt8__cdr_serialize+0xc>
 8008864:	7801      	ldrb	r1, [r0, #0]
 8008866:	4610      	mov	r0, r2
 8008868:	f000 b83e 	b.w	80088e8 <ucdr_serialize_uint8_t>
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop

08008870 <_UInt8__get_serialized_size>:
 8008870:	b130      	cbz	r0, 8008880 <_UInt8__get_serialized_size+0x10>
 8008872:	2101      	movs	r1, #1
 8008874:	2000      	movs	r0, #0
 8008876:	b508      	push	{r3, lr}
 8008878:	f000 ff4e 	bl	8009718 <ucdr_alignment>
 800887c:	3001      	adds	r0, #1
 800887e:	bd08      	pop	{r3, pc}
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop

08008884 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__UInt8>:
 8008884:	4800      	ldr	r0, [pc, #0]	; (8008888 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__UInt8+0x4>)
 8008886:	4770      	bx	lr
 8008888:	20000088 	.word	0x20000088

0800888c <ucdr_serialize_bool>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	460d      	mov	r5, r1
 8008890:	2101      	movs	r1, #1
 8008892:	4604      	mov	r4, r0
 8008894:	f000 fef4 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008898:	b148      	cbz	r0, 80088ae <ucdr_serialize_bool+0x22>
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	2101      	movs	r1, #1
 800889e:	701d      	strb	r5, [r3, #0]
 80088a0:	68a2      	ldr	r2, [r4, #8]
 80088a2:	6923      	ldr	r3, [r4, #16]
 80088a4:	440a      	add	r2, r1
 80088a6:	7561      	strb	r1, [r4, #21]
 80088a8:	440b      	add	r3, r1
 80088aa:	60a2      	str	r2, [r4, #8]
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	7da0      	ldrb	r0, [r4, #22]
 80088b0:	f080 0001 	eor.w	r0, r0, #1
 80088b4:	bd38      	pop	{r3, r4, r5, pc}
 80088b6:	bf00      	nop

080088b8 <ucdr_deserialize_bool>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	460d      	mov	r5, r1
 80088bc:	2101      	movs	r1, #1
 80088be:	4604      	mov	r4, r0
 80088c0:	f000 fede 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80088c4:	b160      	cbz	r0, 80088e0 <ucdr_deserialize_bool+0x28>
 80088c6:	68a2      	ldr	r2, [r4, #8]
 80088c8:	2101      	movs	r1, #1
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	f812 0b01 	ldrb.w	r0, [r2], #1
 80088d0:	440b      	add	r3, r1
 80088d2:	3800      	subs	r0, #0
 80088d4:	bf18      	it	ne
 80088d6:	2001      	movne	r0, #1
 80088d8:	7028      	strb	r0, [r5, #0]
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	7561      	strb	r1, [r4, #21]
 80088e0:	7da0      	ldrb	r0, [r4, #22]
 80088e2:	f080 0001 	eor.w	r0, r0, #1
 80088e6:	bd38      	pop	{r3, r4, r5, pc}

080088e8 <ucdr_serialize_uint8_t>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	460d      	mov	r5, r1
 80088ec:	2101      	movs	r1, #1
 80088ee:	4604      	mov	r4, r0
 80088f0:	f000 fec6 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80088f4:	b148      	cbz	r0, 800890a <ucdr_serialize_uint8_t+0x22>
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	2101      	movs	r1, #1
 80088fa:	701d      	strb	r5, [r3, #0]
 80088fc:	68a2      	ldr	r2, [r4, #8]
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	440a      	add	r2, r1
 8008902:	7561      	strb	r1, [r4, #21]
 8008904:	440b      	add	r3, r1
 8008906:	60a2      	str	r2, [r4, #8]
 8008908:	6123      	str	r3, [r4, #16]
 800890a:	7da0      	ldrb	r0, [r4, #22]
 800890c:	f080 0001 	eor.w	r0, r0, #1
 8008910:	bd38      	pop	{r3, r4, r5, pc}
 8008912:	bf00      	nop

08008914 <ucdr_deserialize_uint8_t>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	460d      	mov	r5, r1
 8008918:	2101      	movs	r1, #1
 800891a:	4604      	mov	r4, r0
 800891c:	f000 feb0 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008920:	b150      	cbz	r0, 8008938 <ucdr_deserialize_uint8_t+0x24>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	2101      	movs	r1, #1
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	702b      	strb	r3, [r5, #0]
 800892a:	68a2      	ldr	r2, [r4, #8]
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	440a      	add	r2, r1
 8008930:	7561      	strb	r1, [r4, #21]
 8008932:	440b      	add	r3, r1
 8008934:	60a2      	str	r2, [r4, #8]
 8008936:	6123      	str	r3, [r4, #16]
 8008938:	7da0      	ldrb	r0, [r4, #22]
 800893a:	f080 0001 	eor.w	r0, r0, #1
 800893e:	bd38      	pop	{r3, r4, r5, pc}

08008940 <ucdr_serialize_uint16_t>:
 8008940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008944:	460b      	mov	r3, r1
 8008946:	b082      	sub	sp, #8
 8008948:	4604      	mov	r4, r0
 800894a:	2102      	movs	r1, #2
 800894c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008950:	f000 feea 	bl	8009728 <ucdr_buffer_alignment>
 8008954:	4601      	mov	r1, r0
 8008956:	4620      	mov	r0, r4
 8008958:	7d67      	ldrb	r7, [r4, #21]
 800895a:	f000 ff2d 	bl	80097b8 <ucdr_advance_buffer>
 800895e:	2102      	movs	r1, #2
 8008960:	4620      	mov	r0, r4
 8008962:	f000 fe81 	bl	8009668 <ucdr_check_buffer_available_for>
 8008966:	bb78      	cbnz	r0, 80089c8 <ucdr_serialize_uint16_t+0x88>
 8008968:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800896c:	42ab      	cmp	r3, r5
 800896e:	d926      	bls.n	80089be <ucdr_serialize_uint16_t+0x7e>
 8008970:	1b5e      	subs	r6, r3, r5
 8008972:	60a3      	str	r3, [r4, #8]
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	4620      	mov	r0, r4
 8008978:	f1c6 0802 	rsb	r8, r6, #2
 800897c:	4433      	add	r3, r6
 800897e:	4641      	mov	r1, r8
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	f000 fe7d 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008986:	2800      	cmp	r0, #0
 8008988:	d03b      	beq.n	8008a02 <ucdr_serialize_uint16_t+0xc2>
 800898a:	7d23      	ldrb	r3, [r4, #20]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d04a      	beq.n	8008a26 <ucdr_serialize_uint16_t+0xe6>
 8008990:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008994:	702b      	strb	r3, [r5, #0]
 8008996:	2e00      	cmp	r6, #0
 8008998:	d040      	beq.n	8008a1c <ucdr_serialize_uint16_t+0xdc>
 800899a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800899e:	706b      	strb	r3, [r5, #1]
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	2102      	movs	r1, #2
 80089a4:	68a2      	ldr	r2, [r4, #8]
 80089a6:	3302      	adds	r3, #2
 80089a8:	7da0      	ldrb	r0, [r4, #22]
 80089aa:	4442      	add	r2, r8
 80089ac:	7561      	strb	r1, [r4, #21]
 80089ae:	1b9e      	subs	r6, r3, r6
 80089b0:	f080 0001 	eor.w	r0, r0, #1
 80089b4:	60a2      	str	r2, [r4, #8]
 80089b6:	6126      	str	r6, [r4, #16]
 80089b8:	b002      	add	sp, #8
 80089ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089be:	2102      	movs	r1, #2
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fe5d 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80089c6:	b190      	cbz	r0, 80089ee <ucdr_serialize_uint16_t+0xae>
 80089c8:	7d23      	ldrb	r3, [r4, #20]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	68a3      	ldr	r3, [r4, #8]
 80089ce:	d014      	beq.n	80089fa <ucdr_serialize_uint16_t+0xba>
 80089d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80089d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089d8:	7019      	strb	r1, [r3, #0]
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	705a      	strb	r2, [r3, #1]
 80089de:	2102      	movs	r1, #2
 80089e0:	68a2      	ldr	r2, [r4, #8]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	440a      	add	r2, r1
 80089e6:	7561      	strb	r1, [r4, #21]
 80089e8:	440b      	add	r3, r1
 80089ea:	60a2      	str	r2, [r4, #8]
 80089ec:	6123      	str	r3, [r4, #16]
 80089ee:	7da0      	ldrb	r0, [r4, #22]
 80089f0:	f080 0001 	eor.w	r0, r0, #1
 80089f4:	b002      	add	sp, #8
 80089f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80089fe:	801a      	strh	r2, [r3, #0]
 8008a00:	e7ed      	b.n	80089de <ucdr_serialize_uint16_t+0x9e>
 8008a02:	68a2      	ldr	r2, [r4, #8]
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	7da0      	ldrb	r0, [r4, #22]
 8008a08:	1b92      	subs	r2, r2, r6
 8008a0a:	1b9b      	subs	r3, r3, r6
 8008a0c:	7567      	strb	r7, [r4, #21]
 8008a0e:	f080 0001 	eor.w	r0, r0, #1
 8008a12:	60a2      	str	r2, [r4, #8]
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	b002      	add	sp, #8
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	68a3      	ldr	r3, [r4, #8]
 8008a1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	e7bc      	b.n	80089a0 <ucdr_serialize_uint16_t+0x60>
 8008a26:	4628      	mov	r0, r5
 8008a28:	f10d 0506 	add.w	r5, sp, #6
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f008 ffb6 	bl	80119a0 <memcpy>
 8008a34:	4642      	mov	r2, r8
 8008a36:	19a9      	adds	r1, r5, r6
 8008a38:	68a0      	ldr	r0, [r4, #8]
 8008a3a:	f008 ffb1 	bl	80119a0 <memcpy>
 8008a3e:	e7af      	b.n	80089a0 <ucdr_serialize_uint16_t+0x60>

08008a40 <ucdr_serialize_endian_uint16_t>:
 8008a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	b083      	sub	sp, #12
 8008a48:	460d      	mov	r5, r1
 8008a4a:	2102      	movs	r1, #2
 8008a4c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008a50:	f000 fe6a 	bl	8009728 <ucdr_buffer_alignment>
 8008a54:	4601      	mov	r1, r0
 8008a56:	4620      	mov	r0, r4
 8008a58:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008a5c:	f000 feac 	bl	80097b8 <ucdr_advance_buffer>
 8008a60:	2102      	movs	r1, #2
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fe00 	bl	8009668 <ucdr_check_buffer_available_for>
 8008a68:	bb70      	cbnz	r0, 8008ac8 <ucdr_serialize_endian_uint16_t+0x88>
 8008a6a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008a6e:	42be      	cmp	r6, r7
 8008a70:	d925      	bls.n	8008abe <ucdr_serialize_endian_uint16_t+0x7e>
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	4620      	mov	r0, r4
 8008a76:	60a6      	str	r6, [r4, #8]
 8008a78:	1bf6      	subs	r6, r6, r7
 8008a7a:	4433      	add	r3, r6
 8008a7c:	f1c6 0902 	rsb	r9, r6, #2
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	4649      	mov	r1, r9
 8008a84:	f000 fdfc 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d039      	beq.n	8008b00 <ucdr_serialize_endian_uint16_t+0xc0>
 8008a8c:	2d01      	cmp	r5, #1
 8008a8e:	d04a      	beq.n	8008b26 <ucdr_serialize_endian_uint16_t+0xe6>
 8008a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a94:	703b      	strb	r3, [r7, #0]
 8008a96:	2e00      	cmp	r6, #0
 8008a98:	d040      	beq.n	8008b1c <ucdr_serialize_endian_uint16_t+0xdc>
 8008a9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a9e:	707b      	strb	r3, [r7, #1]
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	68a2      	ldr	r2, [r4, #8]
 8008aa6:	7da0      	ldrb	r0, [r4, #22]
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	444a      	add	r2, r9
 8008aac:	7561      	strb	r1, [r4, #21]
 8008aae:	1b9b      	subs	r3, r3, r6
 8008ab0:	f080 0001 	eor.w	r0, r0, #1
 8008ab4:	60a2      	str	r2, [r4, #8]
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	b003      	add	sp, #12
 8008aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008abe:	2102      	movs	r1, #2
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fddd 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008ac6:	b188      	cbz	r0, 8008aec <ucdr_serialize_endian_uint16_t+0xac>
 8008ac8:	2d01      	cmp	r5, #1
 8008aca:	68a3      	ldr	r3, [r4, #8]
 8008acc:	d014      	beq.n	8008af8 <ucdr_serialize_endian_uint16_t+0xb8>
 8008ace:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008ad2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ad6:	7019      	strb	r1, [r3, #0]
 8008ad8:	68a3      	ldr	r3, [r4, #8]
 8008ada:	705a      	strb	r2, [r3, #1]
 8008adc:	2102      	movs	r1, #2
 8008ade:	68a2      	ldr	r2, [r4, #8]
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	7561      	strb	r1, [r4, #21]
 8008ae6:	440b      	add	r3, r1
 8008ae8:	60a2      	str	r2, [r4, #8]
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	7da0      	ldrb	r0, [r4, #22]
 8008aee:	f080 0001 	eor.w	r0, r0, #1
 8008af2:	b003      	add	sp, #12
 8008af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008af8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008afc:	801a      	strh	r2, [r3, #0]
 8008afe:	e7ed      	b.n	8008adc <ucdr_serialize_endian_uint16_t+0x9c>
 8008b00:	68a2      	ldr	r2, [r4, #8]
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	7da0      	ldrb	r0, [r4, #22]
 8008b06:	1b92      	subs	r2, r2, r6
 8008b08:	1b9b      	subs	r3, r3, r6
 8008b0a:	f884 8015 	strb.w	r8, [r4, #21]
 8008b0e:	f080 0001 	eor.w	r0, r0, #1
 8008b12:	60a2      	str	r2, [r4, #8]
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	b003      	add	sp, #12
 8008b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b1c:	68a3      	ldr	r3, [r4, #8]
 8008b1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	e7bc      	b.n	8008aa0 <ucdr_serialize_endian_uint16_t+0x60>
 8008b26:	f10d 0506 	add.w	r5, sp, #6
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f008 ff36 	bl	80119a0 <memcpy>
 8008b34:	464a      	mov	r2, r9
 8008b36:	19a9      	adds	r1, r5, r6
 8008b38:	68a0      	ldr	r0, [r4, #8]
 8008b3a:	f008 ff31 	bl	80119a0 <memcpy>
 8008b3e:	e7af      	b.n	8008aa0 <ucdr_serialize_endian_uint16_t+0x60>

08008b40 <ucdr_deserialize_uint16_t>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	4604      	mov	r4, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	2102      	movs	r1, #2
 8008b4a:	f000 fded 	bl	8009728 <ucdr_buffer_alignment>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	4620      	mov	r0, r4
 8008b52:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008b56:	f000 fe2f 	bl	80097b8 <ucdr_advance_buffer>
 8008b5a:	2102      	movs	r1, #2
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 fd83 	bl	8009668 <ucdr_check_buffer_available_for>
 8008b62:	bb60      	cbnz	r0, 8008bbe <ucdr_deserialize_uint16_t+0x7e>
 8008b64:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008b68:	42be      	cmp	r6, r7
 8008b6a:	d923      	bls.n	8008bb4 <ucdr_deserialize_uint16_t+0x74>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	60a6      	str	r6, [r4, #8]
 8008b72:	1bf6      	subs	r6, r6, r7
 8008b74:	4433      	add	r3, r6
 8008b76:	f1c6 0902 	rsb	r9, r6, #2
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f000 fd7f 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d034      	beq.n	8008bf0 <ucdr_deserialize_uint16_t+0xb0>
 8008b86:	7d23      	ldrb	r3, [r4, #20]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d042      	beq.n	8008c12 <ucdr_deserialize_uint16_t+0xd2>
 8008b8c:	787b      	ldrb	r3, [r7, #1]
 8008b8e:	702b      	strb	r3, [r5, #0]
 8008b90:	2e00      	cmp	r6, #0
 8008b92:	d03a      	beq.n	8008c0a <ucdr_deserialize_uint16_t+0xca>
 8008b94:	783b      	ldrb	r3, [r7, #0]
 8008b96:	706b      	strb	r3, [r5, #1]
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	2102      	movs	r1, #2
 8008b9c:	68a2      	ldr	r2, [r4, #8]
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	7da0      	ldrb	r0, [r4, #22]
 8008ba2:	444a      	add	r2, r9
 8008ba4:	7561      	strb	r1, [r4, #21]
 8008ba6:	1b9b      	subs	r3, r3, r6
 8008ba8:	f080 0001 	eor.w	r0, r0, #1
 8008bac:	60a2      	str	r2, [r4, #8]
 8008bae:	6123      	str	r3, [r4, #16]
 8008bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 fd62 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008bbc:	b180      	cbz	r0, 8008be0 <ucdr_deserialize_uint16_t+0xa0>
 8008bbe:	7d23      	ldrb	r3, [r4, #20]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	68a3      	ldr	r3, [r4, #8]
 8008bc4:	d011      	beq.n	8008bea <ucdr_deserialize_uint16_t+0xaa>
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	702b      	strb	r3, [r5, #0]
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	706b      	strb	r3, [r5, #1]
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	68a2      	ldr	r2, [r4, #8]
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	7561      	strb	r1, [r4, #21]
 8008bda:	440b      	add	r3, r1
 8008bdc:	60a2      	str	r2, [r4, #8]
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	7da0      	ldrb	r0, [r4, #22]
 8008be2:	f080 0001 	eor.w	r0, r0, #1
 8008be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	802b      	strh	r3, [r5, #0]
 8008bee:	e7ef      	b.n	8008bd0 <ucdr_deserialize_uint16_t+0x90>
 8008bf0:	68a2      	ldr	r2, [r4, #8]
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	1b92      	subs	r2, r2, r6
 8008bf6:	7da0      	ldrb	r0, [r4, #22]
 8008bf8:	1b9b      	subs	r3, r3, r6
 8008bfa:	f884 8015 	strb.w	r8, [r4, #21]
 8008bfe:	f080 0001 	eor.w	r0, r0, #1
 8008c02:	60a2      	str	r2, [r4, #8]
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c0a:	68a3      	ldr	r3, [r4, #8]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	706b      	strb	r3, [r5, #1]
 8008c10:	e7c2      	b.n	8008b98 <ucdr_deserialize_uint16_t+0x58>
 8008c12:	4639      	mov	r1, r7
 8008c14:	4632      	mov	r2, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	f008 fec2 	bl	80119a0 <memcpy>
 8008c1c:	464a      	mov	r2, r9
 8008c1e:	19a8      	adds	r0, r5, r6
 8008c20:	68a1      	ldr	r1, [r4, #8]
 8008c22:	f008 febd 	bl	80119a0 <memcpy>
 8008c26:	e7b7      	b.n	8008b98 <ucdr_deserialize_uint16_t+0x58>

08008c28 <ucdr_deserialize_endian_uint16_t>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	460e      	mov	r6, r1
 8008c30:	2102      	movs	r1, #2
 8008c32:	4615      	mov	r5, r2
 8008c34:	f000 fd78 	bl	8009728 <ucdr_buffer_alignment>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008c40:	f000 fdba 	bl	80097b8 <ucdr_advance_buffer>
 8008c44:	2102      	movs	r1, #2
 8008c46:	4620      	mov	r0, r4
 8008c48:	f000 fd0e 	bl	8009668 <ucdr_check_buffer_available_for>
 8008c4c:	bb70      	cbnz	r0, 8008cac <ucdr_deserialize_endian_uint16_t+0x84>
 8008c4e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8008c52:	454f      	cmp	r7, r9
 8008c54:	d925      	bls.n	8008ca2 <ucdr_deserialize_endian_uint16_t+0x7a>
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	60a7      	str	r7, [r4, #8]
 8008c5c:	eba7 0709 	sub.w	r7, r7, r9
 8008c60:	443b      	add	r3, r7
 8008c62:	f1c7 0a02 	rsb	sl, r7, #2
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	4651      	mov	r1, sl
 8008c6a:	f000 fd09 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d034      	beq.n	8008cdc <ucdr_deserialize_endian_uint16_t+0xb4>
 8008c72:	2e01      	cmp	r6, #1
 8008c74:	d043      	beq.n	8008cfe <ucdr_deserialize_endian_uint16_t+0xd6>
 8008c76:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008c7a:	702b      	strb	r3, [r5, #0]
 8008c7c:	2f00      	cmp	r7, #0
 8008c7e:	d03a      	beq.n	8008cf6 <ucdr_deserialize_endian_uint16_t+0xce>
 8008c80:	f899 3000 	ldrb.w	r3, [r9]
 8008c84:	706b      	strb	r3, [r5, #1]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	2102      	movs	r1, #2
 8008c8a:	68a2      	ldr	r2, [r4, #8]
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	7da0      	ldrb	r0, [r4, #22]
 8008c90:	4452      	add	r2, sl
 8008c92:	7561      	strb	r1, [r4, #21]
 8008c94:	1bdb      	subs	r3, r3, r7
 8008c96:	f080 0001 	eor.w	r0, r0, #1
 8008c9a:	60a2      	str	r2, [r4, #8]
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca2:	2102      	movs	r1, #2
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f000 fceb 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008caa:	b178      	cbz	r0, 8008ccc <ucdr_deserialize_endian_uint16_t+0xa4>
 8008cac:	2e01      	cmp	r6, #1
 8008cae:	68a3      	ldr	r3, [r4, #8]
 8008cb0:	d011      	beq.n	8008cd6 <ucdr_deserialize_endian_uint16_t+0xae>
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	702b      	strb	r3, [r5, #0]
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	706b      	strb	r3, [r5, #1]
 8008cbc:	2102      	movs	r1, #2
 8008cbe:	68a2      	ldr	r2, [r4, #8]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	440a      	add	r2, r1
 8008cc4:	7561      	strb	r1, [r4, #21]
 8008cc6:	440b      	add	r3, r1
 8008cc8:	60a2      	str	r2, [r4, #8]
 8008cca:	6123      	str	r3, [r4, #16]
 8008ccc:	7da0      	ldrb	r0, [r4, #22]
 8008cce:	f080 0001 	eor.w	r0, r0, #1
 8008cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	802b      	strh	r3, [r5, #0]
 8008cda:	e7ef      	b.n	8008cbc <ucdr_deserialize_endian_uint16_t+0x94>
 8008cdc:	68a2      	ldr	r2, [r4, #8]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	1bd2      	subs	r2, r2, r7
 8008ce2:	7da0      	ldrb	r0, [r4, #22]
 8008ce4:	1bdb      	subs	r3, r3, r7
 8008ce6:	f884 8015 	strb.w	r8, [r4, #21]
 8008cea:	f080 0001 	eor.w	r0, r0, #1
 8008cee:	60a2      	str	r2, [r4, #8]
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	706b      	strb	r3, [r5, #1]
 8008cfc:	e7c3      	b.n	8008c86 <ucdr_deserialize_endian_uint16_t+0x5e>
 8008cfe:	4649      	mov	r1, r9
 8008d00:	463a      	mov	r2, r7
 8008d02:	4628      	mov	r0, r5
 8008d04:	f008 fe4c 	bl	80119a0 <memcpy>
 8008d08:	4652      	mov	r2, sl
 8008d0a:	19e8      	adds	r0, r5, r7
 8008d0c:	68a1      	ldr	r1, [r4, #8]
 8008d0e:	f008 fe47 	bl	80119a0 <memcpy>
 8008d12:	e7b8      	b.n	8008c86 <ucdr_deserialize_endian_uint16_t+0x5e>

08008d14 <ucdr_serialize_uint32_t>:
 8008d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	9101      	str	r1, [sp, #4]
 8008d1e:	2104      	movs	r1, #4
 8008d20:	f000 fd02 	bl	8009728 <ucdr_buffer_alignment>
 8008d24:	4601      	mov	r1, r0
 8008d26:	4620      	mov	r0, r4
 8008d28:	7d67      	ldrb	r7, [r4, #21]
 8008d2a:	f000 fd45 	bl	80097b8 <ucdr_advance_buffer>
 8008d2e:	2104      	movs	r1, #4
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fc99 	bl	8009668 <ucdr_check_buffer_available_for>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d139      	bne.n	8008dae <ucdr_serialize_uint32_t+0x9a>
 8008d3a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008d3e:	42ab      	cmp	r3, r5
 8008d40:	d930      	bls.n	8008da4 <ucdr_serialize_uint32_t+0x90>
 8008d42:	1b5e      	subs	r6, r3, r5
 8008d44:	60a3      	str	r3, [r4, #8]
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f1c6 0804 	rsb	r8, r6, #4
 8008d4e:	4433      	add	r3, r6
 8008d50:	4641      	mov	r1, r8
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	f000 fc94 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d04c      	beq.n	8008df6 <ucdr_serialize_uint32_t+0xe2>
 8008d5c:	7d23      	ldrb	r3, [r4, #20]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d063      	beq.n	8008e2a <ucdr_serialize_uint32_t+0x116>
 8008d62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d66:	702b      	strb	r3, [r5, #0]
 8008d68:	2e00      	cmp	r6, #0
 8008d6a:	d051      	beq.n	8008e10 <ucdr_serialize_uint32_t+0xfc>
 8008d6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d70:	2e01      	cmp	r6, #1
 8008d72:	706b      	strb	r3, [r5, #1]
 8008d74:	d050      	beq.n	8008e18 <ucdr_serialize_uint32_t+0x104>
 8008d76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008d7a:	2e02      	cmp	r6, #2
 8008d7c:	70ab      	strb	r3, [r5, #2]
 8008d7e:	d04f      	beq.n	8008e20 <ucdr_serialize_uint32_t+0x10c>
 8008d80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008d84:	70eb      	strb	r3, [r5, #3]
 8008d86:	6923      	ldr	r3, [r4, #16]
 8008d88:	2104      	movs	r1, #4
 8008d8a:	68a2      	ldr	r2, [r4, #8]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	7da0      	ldrb	r0, [r4, #22]
 8008d90:	4442      	add	r2, r8
 8008d92:	7561      	strb	r1, [r4, #21]
 8008d94:	1b9e      	subs	r6, r3, r6
 8008d96:	f080 0001 	eor.w	r0, r0, #1
 8008d9a:	60a2      	str	r2, [r4, #8]
 8008d9c:	6126      	str	r6, [r4, #16]
 8008d9e:	b002      	add	sp, #8
 8008da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da4:	2104      	movs	r1, #4
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fc6a 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008dac:	b1d0      	cbz	r0, 8008de4 <ucdr_serialize_uint32_t+0xd0>
 8008dae:	7d23      	ldrb	r3, [r4, #20]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	68a3      	ldr	r3, [r4, #8]
 8008db4:	d01c      	beq.n	8008df0 <ucdr_serialize_uint32_t+0xdc>
 8008db6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008dba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008dbe:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008dc2:	7018      	strb	r0, [r3, #0]
 8008dc4:	68a3      	ldr	r3, [r4, #8]
 8008dc6:	705a      	strb	r2, [r3, #1]
 8008dc8:	68a3      	ldr	r3, [r4, #8]
 8008dca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008dce:	7099      	strb	r1, [r3, #2]
 8008dd0:	68a3      	ldr	r3, [r4, #8]
 8008dd2:	70da      	strb	r2, [r3, #3]
 8008dd4:	2104      	movs	r1, #4
 8008dd6:	68a2      	ldr	r2, [r4, #8]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	440a      	add	r2, r1
 8008ddc:	7561      	strb	r1, [r4, #21]
 8008dde:	440b      	add	r3, r1
 8008de0:	60a2      	str	r2, [r4, #8]
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	7da0      	ldrb	r0, [r4, #22]
 8008de6:	f080 0001 	eor.w	r0, r0, #1
 8008dea:	b002      	add	sp, #8
 8008dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df0:	9a01      	ldr	r2, [sp, #4]
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e7ee      	b.n	8008dd4 <ucdr_serialize_uint32_t+0xc0>
 8008df6:	68a2      	ldr	r2, [r4, #8]
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	7da0      	ldrb	r0, [r4, #22]
 8008dfc:	1b92      	subs	r2, r2, r6
 8008dfe:	1b9b      	subs	r3, r3, r6
 8008e00:	7567      	strb	r7, [r4, #21]
 8008e02:	f080 0001 	eor.w	r0, r0, #1
 8008e06:	60a2      	str	r2, [r4, #8]
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	b002      	add	sp, #8
 8008e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e10:	68a3      	ldr	r3, [r4, #8]
 8008e12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	68a3      	ldr	r3, [r4, #8]
 8008e1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e26:	701a      	strb	r2, [r3, #0]
 8008e28:	e7ad      	b.n	8008d86 <ucdr_serialize_uint32_t+0x72>
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	ad01      	add	r5, sp, #4
 8008e2e:	4632      	mov	r2, r6
 8008e30:	4629      	mov	r1, r5
 8008e32:	f008 fdb5 	bl	80119a0 <memcpy>
 8008e36:	4642      	mov	r2, r8
 8008e38:	19a9      	adds	r1, r5, r6
 8008e3a:	68a0      	ldr	r0, [r4, #8]
 8008e3c:	f008 fdb0 	bl	80119a0 <memcpy>
 8008e40:	e7a1      	b.n	8008d86 <ucdr_serialize_uint32_t+0x72>
 8008e42:	bf00      	nop

08008e44 <ucdr_serialize_endian_uint32_t>:
 8008e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e48:	4604      	mov	r4, r0
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	2104      	movs	r1, #4
 8008e50:	9201      	str	r2, [sp, #4]
 8008e52:	f000 fc69 	bl	8009728 <ucdr_buffer_alignment>
 8008e56:	4601      	mov	r1, r0
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008e5e:	f000 fcab 	bl	80097b8 <ucdr_advance_buffer>
 8008e62:	2104      	movs	r1, #4
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 fbff 	bl	8009668 <ucdr_check_buffer_available_for>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d138      	bne.n	8008ee0 <ucdr_serialize_endian_uint32_t+0x9c>
 8008e6e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008e72:	42b7      	cmp	r7, r6
 8008e74:	d92f      	bls.n	8008ed6 <ucdr_serialize_endian_uint32_t+0x92>
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	4620      	mov	r0, r4
 8008e7a:	60a7      	str	r7, [r4, #8]
 8008e7c:	1bbf      	subs	r7, r7, r6
 8008e7e:	443b      	add	r3, r7
 8008e80:	f1c7 0904 	rsb	r9, r7, #4
 8008e84:	6123      	str	r3, [r4, #16]
 8008e86:	4649      	mov	r1, r9
 8008e88:	f000 fbfa 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d04a      	beq.n	8008f26 <ucdr_serialize_endian_uint32_t+0xe2>
 8008e90:	2d01      	cmp	r5, #1
 8008e92:	d063      	beq.n	8008f5c <ucdr_serialize_endian_uint32_t+0x118>
 8008e94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e98:	7033      	strb	r3, [r6, #0]
 8008e9a:	2f00      	cmp	r7, #0
 8008e9c:	d051      	beq.n	8008f42 <ucdr_serialize_endian_uint32_t+0xfe>
 8008e9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ea2:	2f01      	cmp	r7, #1
 8008ea4:	7073      	strb	r3, [r6, #1]
 8008ea6:	d050      	beq.n	8008f4a <ucdr_serialize_endian_uint32_t+0x106>
 8008ea8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008eac:	2f02      	cmp	r7, #2
 8008eae:	70b3      	strb	r3, [r6, #2]
 8008eb0:	d04f      	beq.n	8008f52 <ucdr_serialize_endian_uint32_t+0x10e>
 8008eb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008eb6:	70f3      	strb	r3, [r6, #3]
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	2104      	movs	r1, #4
 8008ebc:	68a2      	ldr	r2, [r4, #8]
 8008ebe:	7da0      	ldrb	r0, [r4, #22]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	444a      	add	r2, r9
 8008ec4:	7561      	strb	r1, [r4, #21]
 8008ec6:	1bdb      	subs	r3, r3, r7
 8008ec8:	f080 0001 	eor.w	r0, r0, #1
 8008ecc:	60a2      	str	r2, [r4, #8]
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	b003      	add	sp, #12
 8008ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fbd1 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008ede:	b1c8      	cbz	r0, 8008f14 <ucdr_serialize_endian_uint32_t+0xd0>
 8008ee0:	2d01      	cmp	r5, #1
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	d01c      	beq.n	8008f20 <ucdr_serialize_endian_uint32_t+0xdc>
 8008ee6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008eea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008eee:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008ef2:	7018      	strb	r0, [r3, #0]
 8008ef4:	68a3      	ldr	r3, [r4, #8]
 8008ef6:	705a      	strb	r2, [r3, #1]
 8008ef8:	68a3      	ldr	r3, [r4, #8]
 8008efa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008efe:	7099      	strb	r1, [r3, #2]
 8008f00:	68a3      	ldr	r3, [r4, #8]
 8008f02:	70da      	strb	r2, [r3, #3]
 8008f04:	2104      	movs	r1, #4
 8008f06:	68a2      	ldr	r2, [r4, #8]
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	7561      	strb	r1, [r4, #21]
 8008f0e:	440b      	add	r3, r1
 8008f10:	60a2      	str	r2, [r4, #8]
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	7da0      	ldrb	r0, [r4, #22]
 8008f16:	f080 0001 	eor.w	r0, r0, #1
 8008f1a:	b003      	add	sp, #12
 8008f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f20:	9a01      	ldr	r2, [sp, #4]
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e7ee      	b.n	8008f04 <ucdr_serialize_endian_uint32_t+0xc0>
 8008f26:	68a2      	ldr	r2, [r4, #8]
 8008f28:	6923      	ldr	r3, [r4, #16]
 8008f2a:	7da0      	ldrb	r0, [r4, #22]
 8008f2c:	1bd2      	subs	r2, r2, r7
 8008f2e:	1bdb      	subs	r3, r3, r7
 8008f30:	f884 8015 	strb.w	r8, [r4, #21]
 8008f34:	f080 0001 	eor.w	r0, r0, #1
 8008f38:	60a2      	str	r2, [r4, #8]
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	b003      	add	sp, #12
 8008f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f50:	701a      	strb	r2, [r3, #0]
 8008f52:	68a3      	ldr	r3, [r4, #8]
 8008f54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	e7ad      	b.n	8008eb8 <ucdr_serialize_endian_uint32_t+0x74>
 8008f5c:	ad01      	add	r5, sp, #4
 8008f5e:	463a      	mov	r2, r7
 8008f60:	4630      	mov	r0, r6
 8008f62:	4629      	mov	r1, r5
 8008f64:	f008 fd1c 	bl	80119a0 <memcpy>
 8008f68:	464a      	mov	r2, r9
 8008f6a:	19e9      	adds	r1, r5, r7
 8008f6c:	68a0      	ldr	r0, [r4, #8]
 8008f6e:	f008 fd17 	bl	80119a0 <memcpy>
 8008f72:	e7a1      	b.n	8008eb8 <ucdr_serialize_endian_uint32_t+0x74>

08008f74 <ucdr_deserialize_uint32_t>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	4604      	mov	r4, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	f000 fbd3 	bl	8009728 <ucdr_buffer_alignment>
 8008f82:	4601      	mov	r1, r0
 8008f84:	4620      	mov	r0, r4
 8008f86:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008f8a:	f000 fc15 	bl	80097b8 <ucdr_advance_buffer>
 8008f8e:	2104      	movs	r1, #4
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fb69 	bl	8009668 <ucdr_check_buffer_available_for>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d138      	bne.n	800900c <ucdr_deserialize_uint32_t+0x98>
 8008f9a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008f9e:	42b7      	cmp	r7, r6
 8008fa0:	d92f      	bls.n	8009002 <ucdr_deserialize_uint32_t+0x8e>
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	60a7      	str	r7, [r4, #8]
 8008fa8:	1bbf      	subs	r7, r7, r6
 8008faa:	443b      	add	r3, r7
 8008fac:	f1c7 0904 	rsb	r9, r7, #4
 8008fb0:	6123      	str	r3, [r4, #16]
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	f000 fb64 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d046      	beq.n	800904a <ucdr_deserialize_uint32_t+0xd6>
 8008fbc:	7d23      	ldrb	r3, [r4, #20]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d05c      	beq.n	800907c <ucdr_deserialize_uint32_t+0x108>
 8008fc2:	78f3      	ldrb	r3, [r6, #3]
 8008fc4:	702b      	strb	r3, [r5, #0]
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	d04c      	beq.n	8009064 <ucdr_deserialize_uint32_t+0xf0>
 8008fca:	78b3      	ldrb	r3, [r6, #2]
 8008fcc:	2f01      	cmp	r7, #1
 8008fce:	706b      	strb	r3, [r5, #1]
 8008fd0:	f105 0302 	add.w	r3, r5, #2
 8008fd4:	d04a      	beq.n	800906c <ucdr_deserialize_uint32_t+0xf8>
 8008fd6:	7873      	ldrb	r3, [r6, #1]
 8008fd8:	2f02      	cmp	r7, #2
 8008fda:	70ab      	strb	r3, [r5, #2]
 8008fdc:	f105 0303 	add.w	r3, r5, #3
 8008fe0:	d048      	beq.n	8009074 <ucdr_deserialize_uint32_t+0x100>
 8008fe2:	7833      	ldrb	r3, [r6, #0]
 8008fe4:	70eb      	strb	r3, [r5, #3]
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	2104      	movs	r1, #4
 8008fea:	68a2      	ldr	r2, [r4, #8]
 8008fec:	3304      	adds	r3, #4
 8008fee:	7da0      	ldrb	r0, [r4, #22]
 8008ff0:	444a      	add	r2, r9
 8008ff2:	7561      	strb	r1, [r4, #21]
 8008ff4:	1bdb      	subs	r3, r3, r7
 8008ff6:	f080 0001 	eor.w	r0, r0, #1
 8008ffa:	60a2      	str	r2, [r4, #8]
 8008ffc:	6123      	str	r3, [r4, #16]
 8008ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009002:	2104      	movs	r1, #4
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fb3b 	bl	8009680 <ucdr_check_final_buffer_behavior>
 800900a:	b1b0      	cbz	r0, 800903a <ucdr_deserialize_uint32_t+0xc6>
 800900c:	7d23      	ldrb	r3, [r4, #20]
 800900e:	2b01      	cmp	r3, #1
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	d017      	beq.n	8009044 <ucdr_deserialize_uint32_t+0xd0>
 8009014:	78db      	ldrb	r3, [r3, #3]
 8009016:	702b      	strb	r3, [r5, #0]
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	789b      	ldrb	r3, [r3, #2]
 800901c:	706b      	strb	r3, [r5, #1]
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	785b      	ldrb	r3, [r3, #1]
 8009022:	70ab      	strb	r3, [r5, #2]
 8009024:	68a3      	ldr	r3, [r4, #8]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	70eb      	strb	r3, [r5, #3]
 800902a:	2104      	movs	r1, #4
 800902c:	68a2      	ldr	r2, [r4, #8]
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	440a      	add	r2, r1
 8009032:	7561      	strb	r1, [r4, #21]
 8009034:	440b      	add	r3, r1
 8009036:	60a2      	str	r2, [r4, #8]
 8009038:	6123      	str	r3, [r4, #16]
 800903a:	7da0      	ldrb	r0, [r4, #22]
 800903c:	f080 0001 	eor.w	r0, r0, #1
 8009040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	e7ef      	b.n	800902a <ucdr_deserialize_uint32_t+0xb6>
 800904a:	68a2      	ldr	r2, [r4, #8]
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	1bd2      	subs	r2, r2, r7
 8009050:	7da0      	ldrb	r0, [r4, #22]
 8009052:	1bdb      	subs	r3, r3, r7
 8009054:	f884 8015 	strb.w	r8, [r4, #21]
 8009058:	f080 0001 	eor.w	r0, r0, #1
 800905c:	60a2      	str	r2, [r4, #8]
 800905e:	6123      	str	r3, [r4, #16]
 8009060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009064:	68a3      	ldr	r3, [r4, #8]
 8009066:	789b      	ldrb	r3, [r3, #2]
 8009068:	706b      	strb	r3, [r5, #1]
 800906a:	1cab      	adds	r3, r5, #2
 800906c:	68a2      	ldr	r2, [r4, #8]
 800906e:	7852      	ldrb	r2, [r2, #1]
 8009070:	f803 2b01 	strb.w	r2, [r3], #1
 8009074:	68a2      	ldr	r2, [r4, #8]
 8009076:	7812      	ldrb	r2, [r2, #0]
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	e7b4      	b.n	8008fe6 <ucdr_deserialize_uint32_t+0x72>
 800907c:	4631      	mov	r1, r6
 800907e:	463a      	mov	r2, r7
 8009080:	4628      	mov	r0, r5
 8009082:	f008 fc8d 	bl	80119a0 <memcpy>
 8009086:	464a      	mov	r2, r9
 8009088:	19e8      	adds	r0, r5, r7
 800908a:	68a1      	ldr	r1, [r4, #8]
 800908c:	f008 fc88 	bl	80119a0 <memcpy>
 8009090:	e7a9      	b.n	8008fe6 <ucdr_deserialize_uint32_t+0x72>
 8009092:	bf00      	nop

08009094 <ucdr_deserialize_endian_uint32_t>:
 8009094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009098:	4604      	mov	r4, r0
 800909a:	460e      	mov	r6, r1
 800909c:	2104      	movs	r1, #4
 800909e:	4615      	mov	r5, r2
 80090a0:	f000 fb42 	bl	8009728 <ucdr_buffer_alignment>
 80090a4:	4601      	mov	r1, r0
 80090a6:	4620      	mov	r0, r4
 80090a8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80090ac:	f000 fb84 	bl	80097b8 <ucdr_advance_buffer>
 80090b0:	2104      	movs	r1, #4
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 fad8 	bl	8009668 <ucdr_check_buffer_available_for>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d13c      	bne.n	8009136 <ucdr_deserialize_endian_uint32_t+0xa2>
 80090bc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80090c0:	42bb      	cmp	r3, r7
 80090c2:	d933      	bls.n	800912c <ucdr_deserialize_endian_uint32_t+0x98>
 80090c4:	eba3 0907 	sub.w	r9, r3, r7
 80090c8:	60a3      	str	r3, [r4, #8]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	4620      	mov	r0, r4
 80090ce:	f1c9 0a04 	rsb	sl, r9, #4
 80090d2:	444b      	add	r3, r9
 80090d4:	4651      	mov	r1, sl
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	f000 fad2 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d048      	beq.n	8009172 <ucdr_deserialize_endian_uint32_t+0xde>
 80090e0:	2e01      	cmp	r6, #1
 80090e2:	d061      	beq.n	80091a8 <ucdr_deserialize_endian_uint32_t+0x114>
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	702b      	strb	r3, [r5, #0]
 80090e8:	f1b9 0f00 	cmp.w	r9, #0
 80090ec:	d050      	beq.n	8009190 <ucdr_deserialize_endian_uint32_t+0xfc>
 80090ee:	78bb      	ldrb	r3, [r7, #2]
 80090f0:	f1b9 0f01 	cmp.w	r9, #1
 80090f4:	706b      	strb	r3, [r5, #1]
 80090f6:	f105 0302 	add.w	r3, r5, #2
 80090fa:	d04d      	beq.n	8009198 <ucdr_deserialize_endian_uint32_t+0x104>
 80090fc:	787b      	ldrb	r3, [r7, #1]
 80090fe:	f1b9 0f02 	cmp.w	r9, #2
 8009102:	70ab      	strb	r3, [r5, #2]
 8009104:	f105 0303 	add.w	r3, r5, #3
 8009108:	d04a      	beq.n	80091a0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800910a:	783b      	ldrb	r3, [r7, #0]
 800910c:	70eb      	strb	r3, [r5, #3]
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	2104      	movs	r1, #4
 8009112:	68a2      	ldr	r2, [r4, #8]
 8009114:	3304      	adds	r3, #4
 8009116:	7da0      	ldrb	r0, [r4, #22]
 8009118:	4452      	add	r2, sl
 800911a:	7561      	strb	r1, [r4, #21]
 800911c:	eba3 0309 	sub.w	r3, r3, r9
 8009120:	f080 0001 	eor.w	r0, r0, #1
 8009124:	60a2      	str	r2, [r4, #8]
 8009126:	6123      	str	r3, [r4, #16]
 8009128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912c:	2104      	movs	r1, #4
 800912e:	4620      	mov	r0, r4
 8009130:	f000 faa6 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8009134:	b1a8      	cbz	r0, 8009162 <ucdr_deserialize_endian_uint32_t+0xce>
 8009136:	2e01      	cmp	r6, #1
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	d017      	beq.n	800916c <ucdr_deserialize_endian_uint32_t+0xd8>
 800913c:	78db      	ldrb	r3, [r3, #3]
 800913e:	702b      	strb	r3, [r5, #0]
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	789b      	ldrb	r3, [r3, #2]
 8009144:	706b      	strb	r3, [r5, #1]
 8009146:	68a3      	ldr	r3, [r4, #8]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	70ab      	strb	r3, [r5, #2]
 800914c:	68a3      	ldr	r3, [r4, #8]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	70eb      	strb	r3, [r5, #3]
 8009152:	2104      	movs	r1, #4
 8009154:	68a2      	ldr	r2, [r4, #8]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	440a      	add	r2, r1
 800915a:	7561      	strb	r1, [r4, #21]
 800915c:	440b      	add	r3, r1
 800915e:	60a2      	str	r2, [r4, #8]
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	7da0      	ldrb	r0, [r4, #22]
 8009164:	f080 0001 	eor.w	r0, r0, #1
 8009168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	602b      	str	r3, [r5, #0]
 8009170:	e7ef      	b.n	8009152 <ucdr_deserialize_endian_uint32_t+0xbe>
 8009172:	68a2      	ldr	r2, [r4, #8]
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	eba2 0209 	sub.w	r2, r2, r9
 800917a:	7da0      	ldrb	r0, [r4, #22]
 800917c:	eba3 0309 	sub.w	r3, r3, r9
 8009180:	f884 8015 	strb.w	r8, [r4, #21]
 8009184:	f080 0001 	eor.w	r0, r0, #1
 8009188:	60a2      	str	r2, [r4, #8]
 800918a:	6123      	str	r3, [r4, #16]
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	68a3      	ldr	r3, [r4, #8]
 8009192:	789b      	ldrb	r3, [r3, #2]
 8009194:	706b      	strb	r3, [r5, #1]
 8009196:	1cab      	adds	r3, r5, #2
 8009198:	68a2      	ldr	r2, [r4, #8]
 800919a:	7852      	ldrb	r2, [r2, #1]
 800919c:	f803 2b01 	strb.w	r2, [r3], #1
 80091a0:	68a2      	ldr	r2, [r4, #8]
 80091a2:	7812      	ldrb	r2, [r2, #0]
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	e7b2      	b.n	800910e <ucdr_deserialize_endian_uint32_t+0x7a>
 80091a8:	4639      	mov	r1, r7
 80091aa:	464a      	mov	r2, r9
 80091ac:	4628      	mov	r0, r5
 80091ae:	f008 fbf7 	bl	80119a0 <memcpy>
 80091b2:	4652      	mov	r2, sl
 80091b4:	eb05 0009 	add.w	r0, r5, r9
 80091b8:	68a1      	ldr	r1, [r4, #8]
 80091ba:	f008 fbf1 	bl	80119a0 <memcpy>
 80091be:	e7a6      	b.n	800910e <ucdr_deserialize_endian_uint32_t+0x7a>

080091c0 <ucdr_serialize_uint64_t>:
 80091c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c4:	4604      	mov	r4, r0
 80091c6:	b082      	sub	sp, #8
 80091c8:	2108      	movs	r1, #8
 80091ca:	e9cd 2300 	strd	r2, r3, [sp]
 80091ce:	f000 faab 	bl	8009728 <ucdr_buffer_alignment>
 80091d2:	4601      	mov	r1, r0
 80091d4:	4620      	mov	r0, r4
 80091d6:	7d67      	ldrb	r7, [r4, #21]
 80091d8:	f000 faee 	bl	80097b8 <ucdr_advance_buffer>
 80091dc:	2108      	movs	r1, #8
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 fa42 	bl	8009668 <ucdr_check_buffer_available_for>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d14e      	bne.n	8009286 <ucdr_serialize_uint64_t+0xc6>
 80091e8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80091ec:	42ab      	cmp	r3, r5
 80091ee:	d945      	bls.n	800927c <ucdr_serialize_uint64_t+0xbc>
 80091f0:	1b5e      	subs	r6, r3, r5
 80091f2:	60a3      	str	r3, [r4, #8]
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	4620      	mov	r0, r4
 80091f8:	f1c6 0808 	rsb	r8, r6, #8
 80091fc:	4433      	add	r3, r6
 80091fe:	4641      	mov	r1, r8
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	f000 fa3d 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8009206:	2800      	cmp	r0, #0
 8009208:	d074      	beq.n	80092f4 <ucdr_serialize_uint64_t+0x134>
 800920a:	7d23      	ldrb	r3, [r4, #20]
 800920c:	2b01      	cmp	r3, #1
 800920e:	f000 809b 	beq.w	8009348 <ucdr_serialize_uint64_t+0x188>
 8009212:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009216:	702b      	strb	r3, [r5, #0]
 8009218:	2e00      	cmp	r6, #0
 800921a:	d078      	beq.n	800930e <ucdr_serialize_uint64_t+0x14e>
 800921c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009220:	2e01      	cmp	r6, #1
 8009222:	706b      	strb	r3, [r5, #1]
 8009224:	d077      	beq.n	8009316 <ucdr_serialize_uint64_t+0x156>
 8009226:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800922a:	2e02      	cmp	r6, #2
 800922c:	70ab      	strb	r3, [r5, #2]
 800922e:	d076      	beq.n	800931e <ucdr_serialize_uint64_t+0x15e>
 8009230:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009234:	2e03      	cmp	r6, #3
 8009236:	70eb      	strb	r3, [r5, #3]
 8009238:	d075      	beq.n	8009326 <ucdr_serialize_uint64_t+0x166>
 800923a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800923e:	2e04      	cmp	r6, #4
 8009240:	712b      	strb	r3, [r5, #4]
 8009242:	d074      	beq.n	800932e <ucdr_serialize_uint64_t+0x16e>
 8009244:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009248:	2e05      	cmp	r6, #5
 800924a:	716b      	strb	r3, [r5, #5]
 800924c:	d073      	beq.n	8009336 <ucdr_serialize_uint64_t+0x176>
 800924e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009252:	2e06      	cmp	r6, #6
 8009254:	71ab      	strb	r3, [r5, #6]
 8009256:	d072      	beq.n	800933e <ucdr_serialize_uint64_t+0x17e>
 8009258:	f89d 3000 	ldrb.w	r3, [sp]
 800925c:	71eb      	strb	r3, [r5, #7]
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	2108      	movs	r1, #8
 8009262:	68a2      	ldr	r2, [r4, #8]
 8009264:	3308      	adds	r3, #8
 8009266:	7da0      	ldrb	r0, [r4, #22]
 8009268:	4442      	add	r2, r8
 800926a:	7561      	strb	r1, [r4, #21]
 800926c:	1b9e      	subs	r6, r3, r6
 800926e:	f080 0001 	eor.w	r0, r0, #1
 8009272:	60a2      	str	r2, [r4, #8]
 8009274:	6126      	str	r6, [r4, #16]
 8009276:	b002      	add	sp, #8
 8009278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800927c:	2108      	movs	r1, #8
 800927e:	4620      	mov	r0, r4
 8009280:	f000 f9fe 	bl	8009680 <ucdr_check_final_buffer_behavior>
 8009284:	b350      	cbz	r0, 80092dc <ucdr_serialize_uint64_t+0x11c>
 8009286:	7d23      	ldrb	r3, [r4, #20]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d02d      	beq.n	80092e8 <ucdr_serialize_uint64_t+0x128>
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009292:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009296:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800929a:	7018      	strb	r0, [r3, #0]
 800929c:	68a3      	ldr	r3, [r4, #8]
 800929e:	705a      	strb	r2, [r3, #1]
 80092a0:	68a3      	ldr	r3, [r4, #8]
 80092a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80092a6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80092aa:	7099      	strb	r1, [r3, #2]
 80092ac:	68a3      	ldr	r3, [r4, #8]
 80092ae:	70da      	strb	r2, [r3, #3]
 80092b0:	68a3      	ldr	r3, [r4, #8]
 80092b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80092b6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80092ba:	7118      	strb	r0, [r3, #4]
 80092bc:	68a3      	ldr	r3, [r4, #8]
 80092be:	715a      	strb	r2, [r3, #5]
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	f89d 2000 	ldrb.w	r2, [sp]
 80092c6:	7199      	strb	r1, [r3, #6]
 80092c8:	68a3      	ldr	r3, [r4, #8]
 80092ca:	71da      	strb	r2, [r3, #7]
 80092cc:	2108      	movs	r1, #8
 80092ce:	68a2      	ldr	r2, [r4, #8]
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	440a      	add	r2, r1
 80092d4:	7561      	strb	r1, [r4, #21]
 80092d6:	440b      	add	r3, r1
 80092d8:	60a2      	str	r2, [r4, #8]
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	7da0      	ldrb	r0, [r4, #22]
 80092de:	f080 0001 	eor.w	r0, r0, #1
 80092e2:	b002      	add	sp, #8
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	466b      	mov	r3, sp
 80092ea:	68a2      	ldr	r2, [r4, #8]
 80092ec:	cb03      	ldmia	r3!, {r0, r1}
 80092ee:	6010      	str	r0, [r2, #0]
 80092f0:	6051      	str	r1, [r2, #4]
 80092f2:	e7eb      	b.n	80092cc <ucdr_serialize_uint64_t+0x10c>
 80092f4:	68a2      	ldr	r2, [r4, #8]
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	7da0      	ldrb	r0, [r4, #22]
 80092fa:	1b92      	subs	r2, r2, r6
 80092fc:	1b9b      	subs	r3, r3, r6
 80092fe:	7567      	strb	r7, [r4, #21]
 8009300:	f080 0001 	eor.w	r0, r0, #1
 8009304:	60a2      	str	r2, [r4, #8]
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	b002      	add	sp, #8
 800930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930e:	68a3      	ldr	r3, [r4, #8]
 8009310:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009314:	701a      	strb	r2, [r3, #0]
 8009316:	68a3      	ldr	r3, [r4, #8]
 8009318:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800931c:	701a      	strb	r2, [r3, #0]
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	f89d 2000 	ldrb.w	r2, [sp]
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	e78a      	b.n	800925e <ucdr_serialize_uint64_t+0x9e>
 8009348:	4628      	mov	r0, r5
 800934a:	466d      	mov	r5, sp
 800934c:	4632      	mov	r2, r6
 800934e:	4629      	mov	r1, r5
 8009350:	f008 fb26 	bl	80119a0 <memcpy>
 8009354:	4642      	mov	r2, r8
 8009356:	19a9      	adds	r1, r5, r6
 8009358:	68a0      	ldr	r0, [r4, #8]
 800935a:	f008 fb21 	bl	80119a0 <memcpy>
 800935e:	e77e      	b.n	800925e <ucdr_serialize_uint64_t+0x9e>

08009360 <ucdr_serialize_int16_t>:
 8009360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009364:	460b      	mov	r3, r1
 8009366:	b082      	sub	sp, #8
 8009368:	4604      	mov	r4, r0
 800936a:	2102      	movs	r1, #2
 800936c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009370:	f000 f9da 	bl	8009728 <ucdr_buffer_alignment>
 8009374:	4601      	mov	r1, r0
 8009376:	4620      	mov	r0, r4
 8009378:	7d67      	ldrb	r7, [r4, #21]
 800937a:	f000 fa1d 	bl	80097b8 <ucdr_advance_buffer>
 800937e:	2102      	movs	r1, #2
 8009380:	4620      	mov	r0, r4
 8009382:	f000 f971 	bl	8009668 <ucdr_check_buffer_available_for>
 8009386:	bb78      	cbnz	r0, 80093e8 <ucdr_serialize_int16_t+0x88>
 8009388:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800938c:	42ab      	cmp	r3, r5
 800938e:	d926      	bls.n	80093de <ucdr_serialize_int16_t+0x7e>
 8009390:	1b5e      	subs	r6, r3, r5
 8009392:	60a3      	str	r3, [r4, #8]
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	4620      	mov	r0, r4
 8009398:	f1c6 0802 	rsb	r8, r6, #2
 800939c:	4433      	add	r3, r6
 800939e:	4641      	mov	r1, r8
 80093a0:	6123      	str	r3, [r4, #16]
 80093a2:	f000 f96d 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d03b      	beq.n	8009422 <ucdr_serialize_int16_t+0xc2>
 80093aa:	7d23      	ldrb	r3, [r4, #20]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d04a      	beq.n	8009446 <ucdr_serialize_int16_t+0xe6>
 80093b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80093b4:	702b      	strb	r3, [r5, #0]
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	d040      	beq.n	800943c <ucdr_serialize_int16_t+0xdc>
 80093ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80093be:	706b      	strb	r3, [r5, #1]
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	2102      	movs	r1, #2
 80093c4:	68a2      	ldr	r2, [r4, #8]
 80093c6:	3302      	adds	r3, #2
 80093c8:	7da0      	ldrb	r0, [r4, #22]
 80093ca:	4442      	add	r2, r8
 80093cc:	7561      	strb	r1, [r4, #21]
 80093ce:	1b9e      	subs	r6, r3, r6
 80093d0:	f080 0001 	eor.w	r0, r0, #1
 80093d4:	60a2      	str	r2, [r4, #8]
 80093d6:	6126      	str	r6, [r4, #16]
 80093d8:	b002      	add	sp, #8
 80093da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093de:	2102      	movs	r1, #2
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 f94d 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80093e6:	b190      	cbz	r0, 800940e <ucdr_serialize_int16_t+0xae>
 80093e8:	7d23      	ldrb	r3, [r4, #20]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	68a3      	ldr	r3, [r4, #8]
 80093ee:	d014      	beq.n	800941a <ucdr_serialize_int16_t+0xba>
 80093f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80093f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80093f8:	7019      	strb	r1, [r3, #0]
 80093fa:	68a3      	ldr	r3, [r4, #8]
 80093fc:	705a      	strb	r2, [r3, #1]
 80093fe:	2102      	movs	r1, #2
 8009400:	68a2      	ldr	r2, [r4, #8]
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	440a      	add	r2, r1
 8009406:	7561      	strb	r1, [r4, #21]
 8009408:	440b      	add	r3, r1
 800940a:	60a2      	str	r2, [r4, #8]
 800940c:	6123      	str	r3, [r4, #16]
 800940e:	7da0      	ldrb	r0, [r4, #22]
 8009410:	f080 0001 	eor.w	r0, r0, #1
 8009414:	b002      	add	sp, #8
 8009416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800941e:	801a      	strh	r2, [r3, #0]
 8009420:	e7ed      	b.n	80093fe <ucdr_serialize_int16_t+0x9e>
 8009422:	68a2      	ldr	r2, [r4, #8]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	7da0      	ldrb	r0, [r4, #22]
 8009428:	1b92      	subs	r2, r2, r6
 800942a:	1b9b      	subs	r3, r3, r6
 800942c:	7567      	strb	r7, [r4, #21]
 800942e:	f080 0001 	eor.w	r0, r0, #1
 8009432:	60a2      	str	r2, [r4, #8]
 8009434:	6123      	str	r3, [r4, #16]
 8009436:	b002      	add	sp, #8
 8009438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800943c:	68a3      	ldr	r3, [r4, #8]
 800943e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009442:	701a      	strb	r2, [r3, #0]
 8009444:	e7bc      	b.n	80093c0 <ucdr_serialize_int16_t+0x60>
 8009446:	4628      	mov	r0, r5
 8009448:	f10d 0506 	add.w	r5, sp, #6
 800944c:	4632      	mov	r2, r6
 800944e:	4629      	mov	r1, r5
 8009450:	f008 faa6 	bl	80119a0 <memcpy>
 8009454:	4642      	mov	r2, r8
 8009456:	19a9      	adds	r1, r5, r6
 8009458:	68a0      	ldr	r0, [r4, #8]
 800945a:	f008 faa1 	bl	80119a0 <memcpy>
 800945e:	e7af      	b.n	80093c0 <ucdr_serialize_int16_t+0x60>

08009460 <ucdr_deserialize_int16_t>:
 8009460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009464:	4604      	mov	r4, r0
 8009466:	460d      	mov	r5, r1
 8009468:	2102      	movs	r1, #2
 800946a:	f000 f95d 	bl	8009728 <ucdr_buffer_alignment>
 800946e:	4601      	mov	r1, r0
 8009470:	4620      	mov	r0, r4
 8009472:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009476:	f000 f99f 	bl	80097b8 <ucdr_advance_buffer>
 800947a:	2102      	movs	r1, #2
 800947c:	4620      	mov	r0, r4
 800947e:	f000 f8f3 	bl	8009668 <ucdr_check_buffer_available_for>
 8009482:	bb60      	cbnz	r0, 80094de <ucdr_deserialize_int16_t+0x7e>
 8009484:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009488:	42be      	cmp	r6, r7
 800948a:	d923      	bls.n	80094d4 <ucdr_deserialize_int16_t+0x74>
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	4620      	mov	r0, r4
 8009490:	60a6      	str	r6, [r4, #8]
 8009492:	1bf6      	subs	r6, r6, r7
 8009494:	4433      	add	r3, r6
 8009496:	f1c6 0902 	rsb	r9, r6, #2
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	4649      	mov	r1, r9
 800949e:	f000 f8ef 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d034      	beq.n	8009510 <ucdr_deserialize_int16_t+0xb0>
 80094a6:	7d23      	ldrb	r3, [r4, #20]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d042      	beq.n	8009532 <ucdr_deserialize_int16_t+0xd2>
 80094ac:	787b      	ldrb	r3, [r7, #1]
 80094ae:	702b      	strb	r3, [r5, #0]
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	d03a      	beq.n	800952a <ucdr_deserialize_int16_t+0xca>
 80094b4:	783b      	ldrb	r3, [r7, #0]
 80094b6:	706b      	strb	r3, [r5, #1]
 80094b8:	6923      	ldr	r3, [r4, #16]
 80094ba:	2102      	movs	r1, #2
 80094bc:	68a2      	ldr	r2, [r4, #8]
 80094be:	3302      	adds	r3, #2
 80094c0:	7da0      	ldrb	r0, [r4, #22]
 80094c2:	444a      	add	r2, r9
 80094c4:	7561      	strb	r1, [r4, #21]
 80094c6:	1b9b      	subs	r3, r3, r6
 80094c8:	f080 0001 	eor.w	r0, r0, #1
 80094cc:	60a2      	str	r2, [r4, #8]
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d4:	2102      	movs	r1, #2
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 f8d2 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80094dc:	b180      	cbz	r0, 8009500 <ucdr_deserialize_int16_t+0xa0>
 80094de:	7d23      	ldrb	r3, [r4, #20]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	d011      	beq.n	800950a <ucdr_deserialize_int16_t+0xaa>
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	702b      	strb	r3, [r5, #0]
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	706b      	strb	r3, [r5, #1]
 80094f0:	2102      	movs	r1, #2
 80094f2:	68a2      	ldr	r2, [r4, #8]
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	440a      	add	r2, r1
 80094f8:	7561      	strb	r1, [r4, #21]
 80094fa:	440b      	add	r3, r1
 80094fc:	60a2      	str	r2, [r4, #8]
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	7da0      	ldrb	r0, [r4, #22]
 8009502:	f080 0001 	eor.w	r0, r0, #1
 8009506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	802b      	strh	r3, [r5, #0]
 800950e:	e7ef      	b.n	80094f0 <ucdr_deserialize_int16_t+0x90>
 8009510:	68a2      	ldr	r2, [r4, #8]
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	1b92      	subs	r2, r2, r6
 8009516:	7da0      	ldrb	r0, [r4, #22]
 8009518:	1b9b      	subs	r3, r3, r6
 800951a:	f884 8015 	strb.w	r8, [r4, #21]
 800951e:	f080 0001 	eor.w	r0, r0, #1
 8009522:	60a2      	str	r2, [r4, #8]
 8009524:	6123      	str	r3, [r4, #16]
 8009526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800952a:	68a3      	ldr	r3, [r4, #8]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	706b      	strb	r3, [r5, #1]
 8009530:	e7c2      	b.n	80094b8 <ucdr_deserialize_int16_t+0x58>
 8009532:	4639      	mov	r1, r7
 8009534:	4632      	mov	r2, r6
 8009536:	4628      	mov	r0, r5
 8009538:	f008 fa32 	bl	80119a0 <memcpy>
 800953c:	464a      	mov	r2, r9
 800953e:	19a8      	adds	r0, r5, r6
 8009540:	68a1      	ldr	r1, [r4, #8]
 8009542:	f008 fa2d 	bl	80119a0 <memcpy>
 8009546:	e7b7      	b.n	80094b8 <ucdr_deserialize_int16_t+0x58>

08009548 <ucdr_deserialize_int32_t>:
 8009548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800954c:	4604      	mov	r4, r0
 800954e:	460d      	mov	r5, r1
 8009550:	2104      	movs	r1, #4
 8009552:	f000 f8e9 	bl	8009728 <ucdr_buffer_alignment>
 8009556:	4601      	mov	r1, r0
 8009558:	4620      	mov	r0, r4
 800955a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800955e:	f000 f92b 	bl	80097b8 <ucdr_advance_buffer>
 8009562:	2104      	movs	r1, #4
 8009564:	4620      	mov	r0, r4
 8009566:	f000 f87f 	bl	8009668 <ucdr_check_buffer_available_for>
 800956a:	2800      	cmp	r0, #0
 800956c:	d138      	bne.n	80095e0 <ucdr_deserialize_int32_t+0x98>
 800956e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009572:	42b7      	cmp	r7, r6
 8009574:	d92f      	bls.n	80095d6 <ucdr_deserialize_int32_t+0x8e>
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	4620      	mov	r0, r4
 800957a:	60a7      	str	r7, [r4, #8]
 800957c:	1bbf      	subs	r7, r7, r6
 800957e:	443b      	add	r3, r7
 8009580:	f1c7 0904 	rsb	r9, r7, #4
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	4649      	mov	r1, r9
 8009588:	f000 f87a 	bl	8009680 <ucdr_check_final_buffer_behavior>
 800958c:	2800      	cmp	r0, #0
 800958e:	d046      	beq.n	800961e <ucdr_deserialize_int32_t+0xd6>
 8009590:	7d23      	ldrb	r3, [r4, #20]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d05c      	beq.n	8009650 <ucdr_deserialize_int32_t+0x108>
 8009596:	78f3      	ldrb	r3, [r6, #3]
 8009598:	702b      	strb	r3, [r5, #0]
 800959a:	2f00      	cmp	r7, #0
 800959c:	d04c      	beq.n	8009638 <ucdr_deserialize_int32_t+0xf0>
 800959e:	78b3      	ldrb	r3, [r6, #2]
 80095a0:	2f01      	cmp	r7, #1
 80095a2:	706b      	strb	r3, [r5, #1]
 80095a4:	f105 0302 	add.w	r3, r5, #2
 80095a8:	d04a      	beq.n	8009640 <ucdr_deserialize_int32_t+0xf8>
 80095aa:	7873      	ldrb	r3, [r6, #1]
 80095ac:	2f02      	cmp	r7, #2
 80095ae:	70ab      	strb	r3, [r5, #2]
 80095b0:	f105 0303 	add.w	r3, r5, #3
 80095b4:	d048      	beq.n	8009648 <ucdr_deserialize_int32_t+0x100>
 80095b6:	7833      	ldrb	r3, [r6, #0]
 80095b8:	70eb      	strb	r3, [r5, #3]
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	2104      	movs	r1, #4
 80095be:	68a2      	ldr	r2, [r4, #8]
 80095c0:	3304      	adds	r3, #4
 80095c2:	7da0      	ldrb	r0, [r4, #22]
 80095c4:	444a      	add	r2, r9
 80095c6:	7561      	strb	r1, [r4, #21]
 80095c8:	1bdb      	subs	r3, r3, r7
 80095ca:	f080 0001 	eor.w	r0, r0, #1
 80095ce:	60a2      	str	r2, [r4, #8]
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d6:	2104      	movs	r1, #4
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 f851 	bl	8009680 <ucdr_check_final_buffer_behavior>
 80095de:	b1b0      	cbz	r0, 800960e <ucdr_deserialize_int32_t+0xc6>
 80095e0:	7d23      	ldrb	r3, [r4, #20]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	68a3      	ldr	r3, [r4, #8]
 80095e6:	d017      	beq.n	8009618 <ucdr_deserialize_int32_t+0xd0>
 80095e8:	78db      	ldrb	r3, [r3, #3]
 80095ea:	702b      	strb	r3, [r5, #0]
 80095ec:	68a3      	ldr	r3, [r4, #8]
 80095ee:	789b      	ldrb	r3, [r3, #2]
 80095f0:	706b      	strb	r3, [r5, #1]
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	70ab      	strb	r3, [r5, #2]
 80095f8:	68a3      	ldr	r3, [r4, #8]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	70eb      	strb	r3, [r5, #3]
 80095fe:	2104      	movs	r1, #4
 8009600:	68a2      	ldr	r2, [r4, #8]
 8009602:	6923      	ldr	r3, [r4, #16]
 8009604:	440a      	add	r2, r1
 8009606:	7561      	strb	r1, [r4, #21]
 8009608:	440b      	add	r3, r1
 800960a:	60a2      	str	r2, [r4, #8]
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	7da0      	ldrb	r0, [r4, #22]
 8009610:	f080 0001 	eor.w	r0, r0, #1
 8009614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	e7ef      	b.n	80095fe <ucdr_deserialize_int32_t+0xb6>
 800961e:	68a2      	ldr	r2, [r4, #8]
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	1bd2      	subs	r2, r2, r7
 8009624:	7da0      	ldrb	r0, [r4, #22]
 8009626:	1bdb      	subs	r3, r3, r7
 8009628:	f884 8015 	strb.w	r8, [r4, #21]
 800962c:	f080 0001 	eor.w	r0, r0, #1
 8009630:	60a2      	str	r2, [r4, #8]
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009638:	68a3      	ldr	r3, [r4, #8]
 800963a:	789b      	ldrb	r3, [r3, #2]
 800963c:	706b      	strb	r3, [r5, #1]
 800963e:	1cab      	adds	r3, r5, #2
 8009640:	68a2      	ldr	r2, [r4, #8]
 8009642:	7852      	ldrb	r2, [r2, #1]
 8009644:	f803 2b01 	strb.w	r2, [r3], #1
 8009648:	68a2      	ldr	r2, [r4, #8]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	e7b4      	b.n	80095ba <ucdr_deserialize_int32_t+0x72>
 8009650:	4631      	mov	r1, r6
 8009652:	463a      	mov	r2, r7
 8009654:	4628      	mov	r0, r5
 8009656:	f008 f9a3 	bl	80119a0 <memcpy>
 800965a:	464a      	mov	r2, r9
 800965c:	19e8      	adds	r0, r5, r7
 800965e:	68a1      	ldr	r1, [r4, #8]
 8009660:	f008 f99e 	bl	80119a0 <memcpy>
 8009664:	e7a9      	b.n	80095ba <ucdr_deserialize_int32_t+0x72>
 8009666:	bf00      	nop

08009668 <ucdr_check_buffer_available_for>:
 8009668:	7d83      	ldrb	r3, [r0, #22]
 800966a:	b93b      	cbnz	r3, 800967c <ucdr_check_buffer_available_for+0x14>
 800966c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009670:	4419      	add	r1, r3
 8009672:	4288      	cmp	r0, r1
 8009674:	bf34      	ite	cc
 8009676:	2000      	movcc	r0, #0
 8009678:	2001      	movcs	r0, #1
 800967a:	4770      	bx	lr
 800967c:	2000      	movs	r0, #0
 800967e:	4770      	bx	lr

08009680 <ucdr_check_final_buffer_behavior>:
 8009680:	7d83      	ldrb	r3, [r0, #22]
 8009682:	b943      	cbnz	r3, 8009696 <ucdr_check_final_buffer_behavior+0x16>
 8009684:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009688:	b510      	push	{r4, lr}
 800968a:	4291      	cmp	r1, r2
 800968c:	4604      	mov	r4, r0
 800968e:	d205      	bcs.n	800969c <ucdr_check_final_buffer_behavior+0x1c>
 8009690:	2301      	movs	r3, #1
 8009692:	4618      	mov	r0, r3
 8009694:	bd10      	pop	{r4, pc}
 8009696:	2300      	movs	r3, #0
 8009698:	4618      	mov	r0, r3
 800969a:	4770      	bx	lr
 800969c:	6982      	ldr	r2, [r0, #24]
 800969e:	b13a      	cbz	r2, 80096b0 <ucdr_check_final_buffer_behavior+0x30>
 80096a0:	69c1      	ldr	r1, [r0, #28]
 80096a2:	4790      	blx	r2
 80096a4:	f080 0301 	eor.w	r3, r0, #1
 80096a8:	75a0      	strb	r0, [r4, #22]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	4618      	mov	r0, r3
 80096ae:	bd10      	pop	{r4, pc}
 80096b0:	2001      	movs	r0, #1
 80096b2:	75a0      	strb	r0, [r4, #22]
 80096b4:	e7fa      	b.n	80096ac <ucdr_check_final_buffer_behavior+0x2c>
 80096b6:	bf00      	nop

080096b8 <ucdr_set_on_full_buffer_callback>:
 80096b8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop

080096c0 <ucdr_init_buffer_origin_offset_endian>:
 80096c0:	b410      	push	{r4}
 80096c2:	9c01      	ldr	r4, [sp, #4]
 80096c4:	440a      	add	r2, r1
 80096c6:	6001      	str	r1, [r0, #0]
 80096c8:	6042      	str	r2, [r0, #4]
 80096ca:	190a      	adds	r2, r1, r4
 80096cc:	441c      	add	r4, r3
 80096ce:	6082      	str	r2, [r0, #8]
 80096d0:	2200      	movs	r2, #0
 80096d2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80096d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80096da:	7542      	strb	r2, [r0, #21]
 80096dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e0:	7582      	strb	r2, [r0, #22]
 80096e2:	7503      	strb	r3, [r0, #20]
 80096e4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop

080096ec <ucdr_init_buffer_origin_offset>:
 80096ec:	b510      	push	{r4, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	9c04      	ldr	r4, [sp, #16]
 80096f2:	9400      	str	r4, [sp, #0]
 80096f4:	2401      	movs	r4, #1
 80096f6:	9401      	str	r4, [sp, #4]
 80096f8:	f7ff ffe2 	bl	80096c0 <ucdr_init_buffer_origin_offset_endian>
 80096fc:	b002      	add	sp, #8
 80096fe:	bd10      	pop	{r4, pc}

08009700 <ucdr_init_buffer_origin>:
 8009700:	b510      	push	{r4, lr}
 8009702:	2400      	movs	r4, #0
 8009704:	b082      	sub	sp, #8
 8009706:	9400      	str	r4, [sp, #0]
 8009708:	f7ff fff0 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800970c:	b002      	add	sp, #8
 800970e:	bd10      	pop	{r4, pc}

08009710 <ucdr_init_buffer>:
 8009710:	2300      	movs	r3, #0
 8009712:	f7ff bff5 	b.w	8009700 <ucdr_init_buffer_origin>
 8009716:	bf00      	nop

08009718 <ucdr_alignment>:
 8009718:	fbb0 f2f1 	udiv	r2, r0, r1
 800971c:	fb02 0011 	mls	r0, r2, r1, r0
 8009720:	1e4b      	subs	r3, r1, #1
 8009722:	1a08      	subs	r0, r1, r0
 8009724:	4018      	ands	r0, r3
 8009726:	4770      	bx	lr

08009728 <ucdr_buffer_alignment>:
 8009728:	7d43      	ldrb	r3, [r0, #21]
 800972a:	428b      	cmp	r3, r1
 800972c:	d209      	bcs.n	8009742 <ucdr_buffer_alignment+0x1a>
 800972e:	6903      	ldr	r3, [r0, #16]
 8009730:	1e4a      	subs	r2, r1, #1
 8009732:	fbb3 f0f1 	udiv	r0, r3, r1
 8009736:	fb01 3010 	mls	r0, r1, r0, r3
 800973a:	1a09      	subs	r1, r1, r0
 800973c:	ea01 0002 	and.w	r0, r1, r2
 8009740:	4770      	bx	lr
 8009742:	2000      	movs	r0, #0
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop

08009748 <ucdr_align_to>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4604      	mov	r4, r0
 800974c:	460d      	mov	r5, r1
 800974e:	f7ff ffeb 	bl	8009728 <ucdr_buffer_alignment>
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	7565      	strb	r5, [r4, #21]
 8009756:	181a      	adds	r2, r3, r0
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	4418      	add	r0, r3
 800975c:	6863      	ldr	r3, [r4, #4]
 800975e:	4293      	cmp	r3, r2
 8009760:	6120      	str	r0, [r4, #16]
 8009762:	bf28      	it	cs
 8009764:	4613      	movcs	r3, r2
 8009766:	60a3      	str	r3, [r4, #8]
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop

0800976c <ucdr_buffer_length>:
 800976c:	6882      	ldr	r2, [r0, #8]
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	1a10      	subs	r0, r2, r0
 8009772:	4770      	bx	lr

08009774 <ucdr_buffer_remaining>:
 8009774:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009778:	1a10      	subs	r0, r2, r0
 800977a:	4770      	bx	lr

0800977c <ucdr_check_final_buffer_behavior_array>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	7d83      	ldrb	r3, [r0, #22]
 8009780:	b9a3      	cbnz	r3, 80097ac <ucdr_check_final_buffer_behavior_array+0x30>
 8009782:	4604      	mov	r4, r0
 8009784:	460d      	mov	r5, r1
 8009786:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800978a:	429a      	cmp	r2, r3
 800978c:	d300      	bcc.n	8009790 <ucdr_check_final_buffer_behavior_array+0x14>
 800978e:	b931      	cbnz	r1, 800979e <ucdr_check_final_buffer_behavior_array+0x22>
 8009790:	4620      	mov	r0, r4
 8009792:	f7ff ffef 	bl	8009774 <ucdr_buffer_remaining>
 8009796:	42a8      	cmp	r0, r5
 8009798:	bf28      	it	cs
 800979a:	4628      	movcs	r0, r5
 800979c:	bd38      	pop	{r3, r4, r5, pc}
 800979e:	6983      	ldr	r3, [r0, #24]
 80097a0:	b133      	cbz	r3, 80097b0 <ucdr_check_final_buffer_behavior_array+0x34>
 80097a2:	69c1      	ldr	r1, [r0, #28]
 80097a4:	4798      	blx	r3
 80097a6:	75a0      	strb	r0, [r4, #22]
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d0f1      	beq.n	8009790 <ucdr_check_final_buffer_behavior_array+0x14>
 80097ac:	2000      	movs	r0, #0
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	2301      	movs	r3, #1
 80097b2:	7583      	strb	r3, [r0, #22]
 80097b4:	e7fa      	b.n	80097ac <ucdr_check_final_buffer_behavior_array+0x30>
 80097b6:	bf00      	nop

080097b8 <ucdr_advance_buffer>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4604      	mov	r4, r0
 80097bc:	460d      	mov	r5, r1
 80097be:	f7ff ff53 	bl	8009668 <ucdr_check_buffer_available_for>
 80097c2:	b178      	cbz	r0, 80097e4 <ucdr_advance_buffer+0x2c>
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	68a2      	ldr	r2, [r4, #8]
 80097c8:	442b      	add	r3, r5
 80097ca:	442a      	add	r2, r5
 80097cc:	6123      	str	r3, [r4, #16]
 80097ce:	2301      	movs	r3, #1
 80097d0:	60a2      	str	r2, [r4, #8]
 80097d2:	7563      	strb	r3, [r4, #21]
 80097d4:	bd38      	pop	{r3, r4, r5, pc}
 80097d6:	68a2      	ldr	r2, [r4, #8]
 80097d8:	1a2d      	subs	r5, r5, r0
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	4402      	add	r2, r0
 80097de:	4418      	add	r0, r3
 80097e0:	60a2      	str	r2, [r4, #8]
 80097e2:	6120      	str	r0, [r4, #16]
 80097e4:	4629      	mov	r1, r5
 80097e6:	2201      	movs	r2, #1
 80097e8:	4620      	mov	r0, r4
 80097ea:	f7ff ffc7 	bl	800977c <ucdr_check_final_buffer_behavior_array>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d1f1      	bne.n	80097d6 <ucdr_advance_buffer+0x1e>
 80097f2:	2301      	movs	r3, #1
 80097f4:	7563      	strb	r3, [r4, #21]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}

080097f8 <rcl_get_zero_initialized_publisher>:
 80097f8:	4b01      	ldr	r3, [pc, #4]	; (8009800 <rcl_get_zero_initialized_publisher+0x8>)
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	08014c48 	.word	0x08014c48

08009804 <rcl_publisher_init>:
 8009804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	b088      	sub	sp, #32
 800980a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800980c:	2e00      	cmp	r6, #0
 800980e:	d06c      	beq.n	80098ea <rcl_publisher_init+0xe6>
 8009810:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8009814:	4605      	mov	r5, r0
 8009816:	460f      	mov	r7, r1
 8009818:	4690      	mov	r8, r2
 800981a:	4650      	mov	r0, sl
 800981c:	4699      	mov	r9, r3
 800981e:	f000 f9f9 	bl	8009c14 <rcutils_allocator_is_valid>
 8009822:	f080 0401 	eor.w	r4, r0, #1
 8009826:	b2e4      	uxtb	r4, r4
 8009828:	2c00      	cmp	r4, #0
 800982a:	d15e      	bne.n	80098ea <rcl_publisher_init+0xe6>
 800982c:	2d00      	cmp	r5, #0
 800982e:	d05c      	beq.n	80098ea <rcl_publisher_init+0xe6>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	b123      	cbz	r3, 800983e <rcl_publisher_init+0x3a>
 8009834:	2464      	movs	r4, #100	; 0x64
 8009836:	4620      	mov	r0, r4
 8009838:	b008      	add	sp, #32
 800983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983e:	4638      	mov	r0, r7
 8009840:	f003 ffde 	bl	800d800 <rcl_node_is_valid>
 8009844:	2800      	cmp	r0, #0
 8009846:	d055      	beq.n	80098f4 <rcl_publisher_init+0xf0>
 8009848:	f1b8 0f00 	cmp.w	r8, #0
 800984c:	d04d      	beq.n	80098ea <rcl_publisher_init+0xe6>
 800984e:	fab9 f389 	clz	r3, r9
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d047      	beq.n	80098ea <rcl_publisher_init+0xe6>
 800985a:	aa07      	add	r2, sp, #28
 800985c:	9307      	str	r3, [sp, #28]
 800985e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009862:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8009866:	9205      	str	r2, [sp, #20]
 8009868:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800986c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009870:	4649      	mov	r1, r9
 8009872:	4638      	mov	r0, r7
 8009874:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8009878:	f004 f83a 	bl	800d8f0 <rcl_node_resolve_name>
 800987c:	2800      	cmp	r0, #0
 800987e:	d150      	bne.n	8009922 <rcl_publisher_init+0x11e>
 8009880:	21c8      	movs	r1, #200	; 0xc8
 8009882:	2001      	movs	r0, #1
 8009884:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 8009888:	4798      	blx	r3
 800988a:	6028      	str	r0, [r5, #0]
 800988c:	2800      	cmp	r0, #0
 800988e:	d050      	beq.n	8009932 <rcl_publisher_init+0x12e>
 8009890:	4638      	mov	r0, r7
 8009892:	f003 ffd7 	bl	800d844 <rcl_node_get_rmw_handle>
 8009896:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800989a:	4641      	mov	r1, r8
 800989c:	9a07      	ldr	r2, [sp, #28]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	4633      	mov	r3, r6
 80098a2:	682c      	ldr	r4, [r5, #0]
 80098a4:	f000 fa76 	bl	8009d94 <rmw_create_publisher>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80098ae:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80098b2:	b370      	cbz	r0, 8009912 <rcl_publisher_init+0x10e>
 80098b4:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80098b8:	f000 fb50 	bl	8009f5c <rmw_publisher_get_actual_qos>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	4604      	mov	r4, r0
 80098c0:	b9d0      	cbnz	r0, 80098f8 <rcl_publisher_init+0xf4>
 80098c2:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 80098c6:	4631      	mov	r1, r6
 80098c8:	4618      	mov	r0, r3
 80098ca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80098ce:	2270      	movs	r2, #112	; 0x70
 80098d0:	f008 f866 	bl	80119a0 <memcpy>
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 80098da:	9807      	ldr	r0, [sp, #28]
 80098dc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80098de:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80098e0:	4798      	blx	r3
 80098e2:	4620      	mov	r0, r4
 80098e4:	b008      	add	sp, #32
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	240b      	movs	r4, #11
 80098ec:	4620      	mov	r0, r4
 80098ee:	b008      	add	sp, #32
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f4:	24c8      	movs	r4, #200	; 0xc8
 80098f6:	e79e      	b.n	8009836 <rcl_publisher_init+0x32>
 80098f8:	b1cb      	cbz	r3, 800992e <rcl_publisher_init+0x12a>
 80098fa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80098fe:	b142      	cbz	r2, 8009912 <rcl_publisher_init+0x10e>
 8009900:	4638      	mov	r0, r7
 8009902:	f003 ff9f 	bl	800d844 <rcl_node_get_rmw_handle>
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800990c:	f000 fb3a 	bl	8009f84 <rmw_destroy_publisher>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009916:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8009918:	2401      	movs	r4, #1
 800991a:	4790      	blx	r2
 800991c:	2300      	movs	r3, #0
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	e7db      	b.n	80098da <rcl_publisher_init+0xd6>
 8009922:	2867      	cmp	r0, #103	; 0x67
 8009924:	d007      	beq.n	8009936 <rcl_publisher_init+0x132>
 8009926:	2869      	cmp	r0, #105	; 0x69
 8009928:	d005      	beq.n	8009936 <rcl_publisher_init+0x132>
 800992a:	280a      	cmp	r0, #10
 800992c:	d001      	beq.n	8009932 <rcl_publisher_init+0x12e>
 800992e:	2401      	movs	r4, #1
 8009930:	e7d3      	b.n	80098da <rcl_publisher_init+0xd6>
 8009932:	240a      	movs	r4, #10
 8009934:	e7d1      	b.n	80098da <rcl_publisher_init+0xd6>
 8009936:	2467      	movs	r4, #103	; 0x67
 8009938:	e7cf      	b.n	80098da <rcl_publisher_init+0xd6>
 800993a:	bf00      	nop

0800993c <rcl_publisher_get_default_options>:
 800993c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800993e:	4d1d      	ldr	r5, [pc, #116]	; (80099b4 <rcl_publisher_get_default_options+0x78>)
 8009940:	b08b      	sub	sp, #44	; 0x2c
 8009942:	2250      	movs	r2, #80	; 0x50
 8009944:	491c      	ldr	r1, [pc, #112]	; (80099b8 <rcl_publisher_get_default_options+0x7c>)
 8009946:	4604      	mov	r4, r0
 8009948:	4628      	mov	r0, r5
 800994a:	f008 f829 	bl	80119a0 <memcpy>
 800994e:	a802      	add	r0, sp, #8
 8009950:	f000 f952 	bl	8009bf8 <rcutils_get_default_allocator>
 8009954:	f10d 0c08 	add.w	ip, sp, #8
 8009958:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800995c:	466e      	mov	r6, sp
 800995e:	2700      	movs	r7, #0
 8009960:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009964:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009968:	f8dc 3000 	ldr.w	r3, [ip]
 800996c:	4630      	mov	r0, r6
 800996e:	f8ce 3000 	str.w	r3, [lr]
 8009972:	f000 f991 	bl	8009c98 <rmw_get_default_publisher_options>
 8009976:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800997a:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800997e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009982:	e883 0003 	stmia.w	r3, {r0, r1}
 8009986:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800998a:	f003 ff61 	bl	800d850 <rcl_get_disable_loaned_message>
 800998e:	b958      	cbnz	r0, 80099a8 <rcl_publisher_get_default_options+0x6c>
 8009990:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8009994:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 8009998:	2270      	movs	r2, #112	; 0x70
 800999a:	4906      	ldr	r1, [pc, #24]	; (80099b4 <rcl_publisher_get_default_options+0x78>)
 800999c:	4620      	mov	r0, r4
 800999e:	f007 ffff 	bl	80119a0 <memcpy>
 80099a2:	4620      	mov	r0, r4
 80099a4:	b00b      	add	sp, #44	; 0x2c
 80099a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a8:	f000 f95a 	bl	8009c60 <rcutils_reset_error>
 80099ac:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 80099b0:	e7f2      	b.n	8009998 <rcl_publisher_get_default_options+0x5c>
 80099b2:	bf00      	nop
 80099b4:	20009328 	.word	0x20009328
 80099b8:	08014c50 	.word	0x08014c50

080099bc <rcl_publish>:
 80099bc:	b1f8      	cbz	r0, 80099fe <rcl_publish+0x42>
 80099be:	6803      	ldr	r3, [r0, #0]
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4604      	mov	r4, r0
 80099c4:	b1b3      	cbz	r3, 80099f4 <rcl_publish+0x38>
 80099c6:	4616      	mov	r6, r2
 80099c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80099cc:	b192      	cbz	r2, 80099f4 <rcl_publish+0x38>
 80099ce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80099d2:	460d      	mov	r5, r1
 80099d4:	f003 fb18 	bl	800d008 <rcl_context_is_valid>
 80099d8:	b160      	cbz	r0, 80099f4 <rcl_publish+0x38>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80099e0:	b140      	cbz	r0, 80099f4 <rcl_publish+0x38>
 80099e2:	b155      	cbz	r5, 80099fa <rcl_publish+0x3e>
 80099e4:	4632      	mov	r2, r6
 80099e6:	4629      	mov	r1, r5
 80099e8:	f000 f974 	bl	8009cd4 <rmw_publish>
 80099ec:	3800      	subs	r0, #0
 80099ee:	bf18      	it	ne
 80099f0:	2001      	movne	r0, #1
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099f8:	bd70      	pop	{r4, r5, r6, pc}
 80099fa:	200b      	movs	r0, #11
 80099fc:	bd70      	pop	{r4, r5, r6, pc}
 80099fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a02:	4770      	bx	lr

08009a04 <rclc_support_init>:
 8009a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	b086      	sub	sp, #24
 8009a0a:	b3bb      	cbz	r3, 8009a7c <rclc_support_init+0x78>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	b3a8      	cbz	r0, 8009a7c <rclc_support_init+0x78>
 8009a10:	461c      	mov	r4, r3
 8009a12:	460f      	mov	r7, r1
 8009a14:	4690      	mov	r8, r2
 8009a16:	f003 fc97 	bl	800d348 <rcl_get_zero_initialized_init_options>
 8009a1a:	f104 050c 	add.w	r5, r4, #12
 8009a1e:	9005      	str	r0, [sp, #20]
 8009a20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a24:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009a28:	a805      	add	r0, sp, #20
 8009a2a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009a2e:	f003 fc8d 	bl	800d34c <rcl_init_options_init>
 8009a32:	4605      	mov	r5, r0
 8009a34:	b9e0      	cbnz	r0, 8009a70 <rclc_support_init+0x6c>
 8009a36:	ad02      	add	r5, sp, #8
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f003 fadb 	bl	800cff4 <rcl_get_zero_initialized_context>
 8009a3e:	4633      	mov	r3, r6
 8009a40:	aa05      	add	r2, sp, #20
 8009a42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a46:	e886 0003 	stmia.w	r6, {r0, r1}
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f003 fb41 	bl	800d0d4 <rcl_init>
 8009a52:	4605      	mov	r5, r0
 8009a54:	b9b8      	cbnz	r0, 8009a86 <rclc_support_init+0x82>
 8009a56:	4622      	mov	r2, r4
 8009a58:	f106 010c 	add.w	r1, r6, #12
 8009a5c:	2003      	movs	r0, #3
 8009a5e:	60b4      	str	r4, [r6, #8]
 8009a60:	f004 f934 	bl	800dccc <rcl_clock_init>
 8009a64:	4605      	mov	r5, r0
 8009a66:	b970      	cbnz	r0, 8009a86 <rclc_support_init+0x82>
 8009a68:	a805      	add	r0, sp, #20
 8009a6a:	f003 fccb 	bl	800d404 <rcl_init_options_fini>
 8009a6e:	b108      	cbz	r0, 8009a74 <rclc_support_init+0x70>
 8009a70:	f000 f8f6 	bl	8009c60 <rcutils_reset_error>
 8009a74:	4628      	mov	r0, r5
 8009a76:	b006      	add	sp, #24
 8009a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a7c:	250b      	movs	r5, #11
 8009a7e:	4628      	mov	r0, r5
 8009a80:	b006      	add	sp, #24
 8009a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a86:	f000 f8eb 	bl	8009c60 <rcutils_reset_error>
 8009a8a:	a805      	add	r0, sp, #20
 8009a8c:	f003 fcba 	bl	800d404 <rcl_init_options_fini>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d0ef      	beq.n	8009a74 <rclc_support_init+0x70>
 8009a94:	e7ec      	b.n	8009a70 <rclc_support_init+0x6c>
 8009a96:	bf00      	nop

08009a98 <rclc_node_init_default>:
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bf18      	it	ne
 8009a9c:	2a00      	cmpne	r2, #0
 8009a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aa2:	4616      	mov	r6, r2
 8009aa4:	bf0c      	ite	eq
 8009aa6:	2201      	moveq	r2, #1
 8009aa8:	2200      	movne	r2, #0
 8009aaa:	b0a3      	sub	sp, #140	; 0x8c
 8009aac:	2900      	cmp	r1, #0
 8009aae:	bf08      	it	eq
 8009ab0:	f042 0201 	orreq.w	r2, r2, #1
 8009ab4:	bb22      	cbnz	r2, 8009b00 <rclc_node_init_default+0x68>
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	b310      	cbz	r0, 8009b00 <rclc_node_init_default+0x68>
 8009aba:	f10d 0810 	add.w	r8, sp, #16
 8009abe:	461f      	mov	r7, r3
 8009ac0:	460d      	mov	r5, r1
 8009ac2:	f10d 0918 	add.w	r9, sp, #24
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f003 fd48 	bl	800d55c <rcl_get_zero_initialized_node>
 8009acc:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009ad0:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	f003 fedb 	bl	800d890 <rcl_node_get_default_options>
 8009ada:	4640      	mov	r0, r8
 8009adc:	f003 fd3e 	bl	800d55c <rcl_get_zero_initialized_node>
 8009ae0:	f8cd 9000 	str.w	r9, [sp]
 8009ae4:	463b      	mov	r3, r7
 8009ae6:	4632      	mov	r2, r6
 8009ae8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009aec:	e884 0003 	stmia.w	r4, {r0, r1}
 8009af0:	4629      	mov	r1, r5
 8009af2:	4620      	mov	r0, r4
 8009af4:	f003 fd3c 	bl	800d570 <rcl_node_init>
 8009af8:	b930      	cbnz	r0, 8009b08 <rclc_node_init_default+0x70>
 8009afa:	b023      	add	sp, #140	; 0x8c
 8009afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b00:	200b      	movs	r0, #11
 8009b02:	b023      	add	sp, #140	; 0x8c
 8009b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b08:	9003      	str	r0, [sp, #12]
 8009b0a:	f000 f8a9 	bl	8009c60 <rcutils_reset_error>
 8009b0e:	f000 f8a7 	bl	8009c60 <rcutils_reset_error>
 8009b12:	9803      	ldr	r0, [sp, #12]
 8009b14:	b023      	add	sp, #140	; 0x8c
 8009b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b1a:	bf00      	nop

08009b1c <rclc_publisher_init_default>:
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bf18      	it	ne
 8009b20:	2a00      	cmpne	r2, #0
 8009b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	4616      	mov	r6, r2
 8009b28:	bf0c      	ite	eq
 8009b2a:	2201      	moveq	r2, #1
 8009b2c:	2200      	movne	r2, #0
 8009b2e:	b0a0      	sub	sp, #128	; 0x80
 8009b30:	2900      	cmp	r1, #0
 8009b32:	bf08      	it	eq
 8009b34:	f042 0201 	orreq.w	r2, r2, #1
 8009b38:	bb1a      	cbnz	r2, 8009b82 <rclc_publisher_init_default+0x66>
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	b308      	cbz	r0, 8009b82 <rclc_publisher_init_default+0x66>
 8009b3e:	f10d 0810 	add.w	r8, sp, #16
 8009b42:	461f      	mov	r7, r3
 8009b44:	460d      	mov	r5, r1
 8009b46:	f7ff fe57 	bl	80097f8 <rcl_get_zero_initialized_publisher>
 8009b4a:	6020      	str	r0, [r4, #0]
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	f7ff fef5 	bl	800993c <rcl_publisher_get_default_options>
 8009b52:	2250      	movs	r2, #80	; 0x50
 8009b54:	490d      	ldr	r1, [pc, #52]	; (8009b8c <rclc_publisher_init_default+0x70>)
 8009b56:	4640      	mov	r0, r8
 8009b58:	f007 ff22 	bl	80119a0 <memcpy>
 8009b5c:	463b      	mov	r3, r7
 8009b5e:	4632      	mov	r2, r6
 8009b60:	4629      	mov	r1, r5
 8009b62:	4620      	mov	r0, r4
 8009b64:	f8cd 8000 	str.w	r8, [sp]
 8009b68:	f7ff fe4c 	bl	8009804 <rcl_publisher_init>
 8009b6c:	b910      	cbnz	r0, 8009b74 <rclc_publisher_init_default+0x58>
 8009b6e:	b020      	add	sp, #128	; 0x80
 8009b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b74:	9003      	str	r0, [sp, #12]
 8009b76:	f000 f873 	bl	8009c60 <rcutils_reset_error>
 8009b7a:	9803      	ldr	r0, [sp, #12]
 8009b7c:	b020      	add	sp, #128	; 0x80
 8009b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b82:	200b      	movs	r0, #11
 8009b84:	b020      	add	sp, #128	; 0x80
 8009b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b8a:	bf00      	nop
 8009b8c:	08014ca0 	.word	0x08014ca0

08009b90 <__default_zero_allocate>:
 8009b90:	f007 be7c 	b.w	801188c <calloc>

08009b94 <__default_reallocate>:
 8009b94:	f008 bcd6 	b.w	8012544 <realloc>

08009b98 <__default_deallocate>:
 8009b98:	f007 befa 	b.w	8011990 <free>

08009b9c <__default_allocate>:
 8009b9c:	f007 bef0 	b.w	8011980 <malloc>

08009ba0 <rcutils_get_zero_initialized_allocator>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	4c05      	ldr	r4, [pc, #20]	; (8009bb8 <rcutils_get_zero_initialized_allocator+0x18>)
 8009ba4:	4686      	mov	lr, r0
 8009ba6:	4684      	mov	ip, r0
 8009ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009baa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	4670      	mov	r0, lr
 8009bb2:	f8cc 3000 	str.w	r3, [ip]
 8009bb6:	bd10      	pop	{r4, pc}
 8009bb8:	08014cf0 	.word	0x08014cf0

08009bbc <rcutils_set_default_allocator>:
 8009bbc:	b1a8      	cbz	r0, 8009bea <rcutils_set_default_allocator+0x2e>
 8009bbe:	6802      	ldr	r2, [r0, #0]
 8009bc0:	b1a2      	cbz	r2, 8009bec <rcutils_set_default_allocator+0x30>
 8009bc2:	6841      	ldr	r1, [r0, #4]
 8009bc4:	b1a1      	cbz	r1, 8009bf0 <rcutils_set_default_allocator+0x34>
 8009bc6:	b410      	push	{r4}
 8009bc8:	68c4      	ldr	r4, [r0, #12]
 8009bca:	b164      	cbz	r4, 8009be6 <rcutils_set_default_allocator+0x2a>
 8009bcc:	6880      	ldr	r0, [r0, #8]
 8009bce:	b138      	cbz	r0, 8009be0 <rcutils_set_default_allocator+0x24>
 8009bd0:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <rcutils_set_default_allocator+0x38>)
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8009bda:	2001      	movs	r0, #1
 8009bdc:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8009be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	4620      	mov	r0, r4
 8009be8:	e7fa      	b.n	8009be0 <rcutils_set_default_allocator+0x24>
 8009bea:	4770      	bx	lr
 8009bec:	4610      	mov	r0, r2
 8009bee:	4770      	bx	lr
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	4770      	bx	lr
 8009bf4:	200000bc 	.word	0x200000bc

08009bf8 <rcutils_get_default_allocator>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4c05      	ldr	r4, [pc, #20]	; (8009c10 <rcutils_get_default_allocator+0x18>)
 8009bfc:	4686      	mov	lr, r0
 8009bfe:	4684      	mov	ip, r0
 8009c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	4670      	mov	r0, lr
 8009c0a:	f8cc 3000 	str.w	r3, [ip]
 8009c0e:	bd10      	pop	{r4, pc}
 8009c10:	200000bc 	.word	0x200000bc

08009c14 <rcutils_allocator_is_valid>:
 8009c14:	b158      	cbz	r0, 8009c2e <rcutils_allocator_is_valid+0x1a>
 8009c16:	6803      	ldr	r3, [r0, #0]
 8009c18:	b143      	cbz	r3, 8009c2c <rcutils_allocator_is_valid+0x18>
 8009c1a:	6843      	ldr	r3, [r0, #4]
 8009c1c:	b133      	cbz	r3, 8009c2c <rcutils_allocator_is_valid+0x18>
 8009c1e:	68c3      	ldr	r3, [r0, #12]
 8009c20:	b123      	cbz	r3, 8009c2c <rcutils_allocator_is_valid+0x18>
 8009c22:	6880      	ldr	r0, [r0, #8]
 8009c24:	3800      	subs	r0, #0
 8009c26:	bf18      	it	ne
 8009c28:	2001      	movne	r0, #1
 8009c2a:	4770      	bx	lr
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	4770      	bx	lr

08009c30 <rcutils_get_error_string>:
 8009c30:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <rcutils_get_error_string+0x1c>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	b13b      	cbz	r3, 8009c46 <rcutils_get_error_string+0x16>
 8009c36:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <rcutils_get_error_string+0x20>)
 8009c38:	781a      	ldrb	r2, [r3, #0]
 8009c3a:	b90a      	cbnz	r2, 8009c40 <rcutils_get_error_string+0x10>
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <rcutils_get_error_string+0x24>)
 8009c42:	7818      	ldrb	r0, [r3, #0]
 8009c44:	4770      	bx	lr
 8009c46:	4b04      	ldr	r3, [pc, #16]	; (8009c58 <rcutils_get_error_string+0x28>)
 8009c48:	7818      	ldrb	r0, [r3, #0]
 8009c4a:	4770      	bx	lr
 8009c4c:	20009398 	.word	0x20009398
 8009c50:	200093b1 	.word	0x200093b1
 8009c54:	200093b0 	.word	0x200093b0
 8009c58:	08014d04 	.word	0x08014d04
 8009c5c:	00000000 	.word	0x00000000

08009c60 <rcutils_reset_error>:
 8009c60:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009c80 <rcutils_reset_error+0x20>
 8009c64:	2300      	movs	r3, #0
 8009c66:	4a08      	ldr	r2, [pc, #32]	; (8009c88 <rcutils_reset_error+0x28>)
 8009c68:	4808      	ldr	r0, [pc, #32]	; (8009c8c <rcutils_reset_error+0x2c>)
 8009c6a:	8013      	strh	r3, [r2, #0]
 8009c6c:	4908      	ldr	r1, [pc, #32]	; (8009c90 <rcutils_reset_error+0x30>)
 8009c6e:	7003      	strb	r3, [r0, #0]
 8009c70:	700b      	strb	r3, [r1, #0]
 8009c72:	ed82 7b02 	vstr	d7, [r2, #8]
 8009c76:	4a07      	ldr	r2, [pc, #28]	; (8009c94 <rcutils_reset_error+0x34>)
 8009c78:	7013      	strb	r3, [r2, #0]
 8009c7a:	4770      	bx	lr
 8009c7c:	f3af 8000 	nop.w
	...
 8009c88:	200093a0 	.word	0x200093a0
 8009c8c:	200093b1 	.word	0x200093b1
 8009c90:	200093b0 	.word	0x200093b0
 8009c94:	20009398 	.word	0x20009398

08009c98 <rmw_get_default_publisher_options>:
 8009c98:	2200      	movs	r2, #0
 8009c9a:	6002      	str	r2, [r0, #0]
 8009c9c:	7102      	strb	r2, [r0, #4]
 8009c9e:	4770      	bx	lr

08009ca0 <rmw_uros_set_custom_transport>:
 8009ca0:	b470      	push	{r4, r5, r6}
 8009ca2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8009ca6:	b162      	cbz	r2, 8009cc2 <rmw_uros_set_custom_transport+0x22>
 8009ca8:	b15b      	cbz	r3, 8009cc2 <rmw_uros_set_custom_transport+0x22>
 8009caa:	b155      	cbz	r5, 8009cc2 <rmw_uros_set_custom_transport+0x22>
 8009cac:	b14e      	cbz	r6, 8009cc2 <rmw_uros_set_custom_transport+0x22>
 8009cae:	4c06      	ldr	r4, [pc, #24]	; (8009cc8 <rmw_uros_set_custom_transport+0x28>)
 8009cb0:	7020      	strb	r0, [r4, #0]
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	6166      	str	r6, [r4, #20]
 8009cb6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009cba:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009cbe:	bc70      	pop	{r4, r5, r6}
 8009cc0:	4770      	bx	lr
 8009cc2:	200b      	movs	r0, #11
 8009cc4:	bc70      	pop	{r4, r5, r6}
 8009cc6:	4770      	bx	lr
 8009cc8:	200093b4 	.word	0x200093b4

08009ccc <flush_session>:
 8009ccc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8009cce:	f001 bb09 	b.w	800b2e4 <uxr_run_session_until_confirm_delivery>
 8009cd2:	bf00      	nop

08009cd4 <rmw_publish>:
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d053      	beq.n	8009d80 <rmw_publish+0xac>
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	460d      	mov	r5, r1
 8009cdc:	b08e      	sub	sp, #56	; 0x38
 8009cde:	2900      	cmp	r1, #0
 8009ce0:	d04b      	beq.n	8009d7a <rmw_publish+0xa6>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	6800      	ldr	r0, [r0, #0]
 8009ce6:	f000 fc57 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d045      	beq.n	8009d7a <rmw_publish+0xa6>
 8009cee:	6866      	ldr	r6, [r4, #4]
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	d042      	beq.n	8009d7a <rmw_publish+0xa6>
 8009cf4:	69b4      	ldr	r4, [r6, #24]
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	4798      	blx	r3
 8009cfc:	69f3      	ldr	r3, [r6, #28]
 8009cfe:	9005      	str	r0, [sp, #20]
 8009d00:	b113      	cbz	r3, 8009d08 <rmw_publish+0x34>
 8009d02:	a805      	add	r0, sp, #20
 8009d04:	4798      	blx	r3
 8009d06:	9805      	ldr	r0, [sp, #20]
 8009d08:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	9000      	str	r0, [sp, #0]
 8009d10:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8009d14:	6972      	ldr	r2, [r6, #20]
 8009d16:	ab06      	add	r3, sp, #24
 8009d18:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8009d1a:	f002 f8e1 	bl	800bee0 <uxr_prepare_output_stream>
 8009d1e:	b1d8      	cbz	r0, 8009d58 <rmw_publish+0x84>
 8009d20:	68a3      	ldr	r3, [r4, #8]
 8009d22:	a906      	add	r1, sp, #24
 8009d24:	4628      	mov	r0, r5
 8009d26:	4798      	blx	r3
 8009d28:	6a33      	ldr	r3, [r6, #32]
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	b10b      	cbz	r3, 8009d32 <rmw_publish+0x5e>
 8009d2e:	a806      	add	r0, sp, #24
 8009d30:	4798      	blx	r3
 8009d32:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009d3c:	d022      	beq.n	8009d84 <rmw_publish+0xb0>
 8009d3e:	6918      	ldr	r0, [r3, #16]
 8009d40:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8009d42:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009d46:	f001 facd 	bl	800b2e4 <uxr_run_session_until_confirm_delivery>
 8009d4a:	4020      	ands	r0, r4
 8009d4c:	b2c4      	uxtb	r4, r0
 8009d4e:	f084 0001 	eor.w	r0, r4, #1
 8009d52:	b2c0      	uxtb	r0, r0
 8009d54:	b00e      	add	sp, #56	; 0x38
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009d5c:	6918      	ldr	r0, [r3, #16]
 8009d5e:	9b05      	ldr	r3, [sp, #20]
 8009d60:	9602      	str	r6, [sp, #8]
 8009d62:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <rmw_publish+0xbc>)
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	ab06      	add	r3, sp, #24
 8009d6e:	6972      	ldr	r2, [r6, #20]
 8009d70:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8009d72:	f002 f8e5 	bl	800bf40 <uxr_prepare_output_stream_fragmented>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d1d2      	bne.n	8009d20 <rmw_publish+0x4c>
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	b00e      	add	sp, #56	; 0x38
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	2001      	movs	r0, #1
 8009d82:	4770      	bx	lr
 8009d84:	6918      	ldr	r0, [r3, #16]
 8009d86:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009d8a:	f000 ff2b 	bl	800abe4 <uxr_flash_output_streams>
 8009d8e:	e7de      	b.n	8009d4e <rmw_publish+0x7a>
 8009d90:	08009ccd 	.word	0x08009ccd

08009d94 <rmw_create_publisher>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	b087      	sub	sp, #28
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f000 80d2 	beq.w	8009f44 <rmw_create_publisher+0x1b0>
 8009da0:	460e      	mov	r6, r1
 8009da2:	2900      	cmp	r1, #0
 8009da4:	f000 80ce 	beq.w	8009f44 <rmw_create_publisher+0x1b0>
 8009da8:	4604      	mov	r4, r0
 8009daa:	6800      	ldr	r0, [r0, #0]
 8009dac:	4615      	mov	r5, r2
 8009dae:	461f      	mov	r7, r3
 8009db0:	f000 fbf2 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 8009db4:	f080 0001 	eor.w	r0, r0, #1
 8009db8:	b2c0      	uxtb	r0, r0
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f040 80c2 	bne.w	8009f44 <rmw_create_publisher+0x1b0>
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	f000 80bf 	beq.w	8009f44 <rmw_create_publisher+0x1b0>
 8009dc6:	782b      	ldrb	r3, [r5, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 80bb 	beq.w	8009f44 <rmw_create_publisher+0x1b0>
 8009dce:	2f00      	cmp	r7, #0
 8009dd0:	f000 80b8 	beq.w	8009f44 <rmw_create_publisher+0x1b0>
 8009dd4:	485e      	ldr	r0, [pc, #376]	; (8009f50 <rmw_create_publisher+0x1bc>)
 8009dd6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009dda:	f004 fd1b 	bl	800e814 <get_memory>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f000 80b0 	beq.w	8009f44 <rmw_create_publisher+0x1b0>
 8009de4:	6884      	ldr	r4, [r0, #8]
 8009de6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8009dea:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8009dee:	f004 fd35 	bl	800e85c <rmw_get_implementation_identifier>
 8009df2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8009df6:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f7f6 fa7a 	bl	80002f4 <strlen>
 8009e00:	3001      	adds	r0, #1
 8009e02:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8009e06:	283c      	cmp	r0, #60	; 0x3c
 8009e08:	f200 808f 	bhi.w	8009f2a <rmw_create_publisher+0x196>
 8009e0c:	462b      	mov	r3, r5
 8009e0e:	4a51      	ldr	r2, [pc, #324]	; (8009f54 <rmw_create_publisher+0x1c0>)
 8009e10:	213c      	movs	r1, #60	; 0x3c
 8009e12:	4650      	mov	r0, sl
 8009e14:	f008 fbae 	bl	8012574 <sniprintf>
 8009e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	2250      	movs	r2, #80	; 0x50
 8009e20:	67e3      	str	r3, [r4, #124]	; 0x7c
 8009e22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009e26:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8009e2a:	f007 fdb9 	bl	80119a0 <memcpy>
 8009e2e:	7a3b      	ldrb	r3, [r7, #8]
 8009e30:	4630      	mov	r0, r6
 8009e32:	4949      	ldr	r1, [pc, #292]	; (8009f58 <rmw_create_publisher+0x1c4>)
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e3a:	bf0c      	ite	eq
 8009e3c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8009e40:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8009e44:	67a3      	str	r3, [r4, #120]	; 0x78
 8009e46:	2300      	movs	r3, #0
 8009e48:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009e4c:	f000 fbb2 	bl	800a5b4 <get_message_typesupport_handle>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d06a      	beq.n	8009f2a <rmw_create_publisher+0x196>
 8009e54:	6842      	ldr	r2, [r0, #4]
 8009e56:	61a2      	str	r2, [r4, #24]
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	d066      	beq.n	8009f2a <rmw_create_publisher+0x196>
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	463b      	mov	r3, r7
 8009e60:	4648      	mov	r0, r9
 8009e62:	f004 ff39 	bl	800ecd8 <create_topic>
 8009e66:	6260      	str	r0, [r4, #36]	; 0x24
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d062      	beq.n	8009f32 <rmw_create_publisher+0x19e>
 8009e6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e70:	2103      	movs	r1, #3
 8009e72:	2506      	movs	r5, #6
 8009e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e78:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8009e7c:	1c42      	adds	r2, r0, #1
 8009e7e:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8009e82:	f000 fd5d 	bl	800a940 <uxr_object_id>
 8009e86:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009e8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e8e:	6120      	str	r0, [r4, #16]
 8009e90:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8009e94:	6910      	ldr	r0, [r2, #16]
 8009e96:	9500      	str	r5, [sp, #0]
 8009e98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009e9c:	6819      	ldr	r1, [r3, #0]
 8009e9e:	6922      	ldr	r2, [r4, #16]
 8009ea0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009ea4:	f000 fca6 	bl	800a7f4 <uxr_buffer_create_publisher_bin>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009eae:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8009eb2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8009eb6:	f000 faf5 	bl	800a4a4 <run_xrce_session>
 8009eba:	b3b0      	cbz	r0, 8009f2a <rmw_create_publisher+0x196>
 8009ebc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ec0:	2105      	movs	r1, #5
 8009ec2:	f10d 0a10 	add.w	sl, sp, #16
 8009ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eca:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8009ece:	1c42      	adds	r2, r0, #1
 8009ed0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8009ed4:	f000 fd34 	bl	800a940 <uxr_object_id>
 8009ed8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009edc:	4639      	mov	r1, r7
 8009ede:	6160      	str	r0, [r4, #20]
 8009ee0:	691e      	ldr	r6, [r3, #16]
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ee8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8009eec:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8009ef0:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8009ef4:	f000 faf2 	bl	800a4dc <convert_qos_profile>
 8009ef8:	9503      	str	r5, [sp, #12]
 8009efa:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009efe:	9001      	str	r0, [sp, #4]
 8009f00:	4630      	mov	r0, r6
 8009f02:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009f06:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009f12:	f000 fc9f 	bl	800a854 <uxr_buffer_create_datawriter_bin>
 8009f16:	4602      	mov	r2, r0
 8009f18:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009f1c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8009f20:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8009f24:	f000 fabe 	bl	800a4a4 <run_xrce_session>
 8009f28:	b970      	cbnz	r0, 8009f48 <rmw_create_publisher+0x1b4>
 8009f2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f2c:	b108      	cbz	r0, 8009f32 <rmw_create_publisher+0x19e>
 8009f2e:	f000 fa53 	bl	800a3d8 <rmw_uxrce_fini_topic_memory>
 8009f32:	4640      	mov	r0, r8
 8009f34:	f04f 0800 	mov.w	r8, #0
 8009f38:	f000 f9f6 	bl	800a328 <rmw_uxrce_fini_publisher_memory>
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	b007      	add	sp, #28
 8009f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f44:	f04f 0800 	mov.w	r8, #0
 8009f48:	4640      	mov	r0, r8
 8009f4a:	b007      	add	sp, #28
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	2000dcac 	.word	0x2000dcac
 8009f54:	08014d18 	.word	0x08014d18
 8009f58:	08014ba4 	.word	0x08014ba4

08009f5c <rmw_publisher_get_actual_qos>:
 8009f5c:	b178      	cbz	r0, 8009f7e <rmw_publisher_get_actual_qos+0x22>
 8009f5e:	b510      	push	{r4, lr}
 8009f60:	fab1 f481 	clz	r4, r1
 8009f64:	0964      	lsrs	r4, r4, #5
 8009f66:	b141      	cbz	r1, 8009f7a <rmw_publisher_get_actual_qos+0x1e>
 8009f68:	6843      	ldr	r3, [r0, #4]
 8009f6a:	2250      	movs	r2, #80	; 0x50
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009f72:	f007 fd15 	bl	80119a0 <memcpy>
 8009f76:	4620      	mov	r0, r4
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	200b      	movs	r0, #11
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	200b      	movs	r0, #11
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop

08009f84 <rmw_destroy_publisher>:
 8009f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	b128      	cbz	r0, 8009f96 <rmw_destroy_publisher+0x12>
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	6800      	ldr	r0, [r0, #0]
 8009f8e:	460d      	mov	r5, r1
 8009f90:	f000 fb02 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 8009f94:	b918      	cbnz	r0, 8009f9e <rmw_destroy_publisher+0x1a>
 8009f96:	2401      	movs	r4, #1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9e:	6863      	ldr	r3, [r4, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d0f8      	beq.n	8009f96 <rmw_destroy_publisher+0x12>
 8009fa4:	fab5 f485 	clz	r4, r5
 8009fa8:	0964      	lsrs	r4, r4, #5
 8009faa:	2d00      	cmp	r5, #0
 8009fac:	d0f3      	beq.n	8009f96 <rmw_destroy_publisher+0x12>
 8009fae:	6828      	ldr	r0, [r5, #0]
 8009fb0:	f000 faf2 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d0ee      	beq.n	8009f96 <rmw_destroy_publisher+0x12>
 8009fb8:	686e      	ldr	r6, [r5, #4]
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d0eb      	beq.n	8009f96 <rmw_destroy_publisher+0x12>
 8009fbe:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8009fc0:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8009fc4:	f004 fed8 	bl	800ed78 <destroy_topic>
 8009fc8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009fcc:	6972      	ldr	r2, [r6, #20]
 8009fce:	6918      	ldr	r0, [r3, #16]
 8009fd0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8009fd4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009fd8:	6819      	ldr	r1, [r3, #0]
 8009fda:	f000 fb57 	bl	800a68c <uxr_buffer_delete_entity>
 8009fde:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	6932      	ldr	r2, [r6, #16]
 8009fe6:	6918      	ldr	r0, [r3, #16]
 8009fe8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8009fec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	f000 fb4b 	bl	800a68c <uxr_buffer_delete_entity>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	6938      	ldr	r0, [r7, #16]
 8009ffa:	4642      	mov	r2, r8
 8009ffc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800a000:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800a004:	f000 fa4e 	bl	800a4a4 <run_xrce_session>
 800a008:	693f      	ldr	r7, [r7, #16]
 800a00a:	4632      	mov	r2, r6
 800a00c:	4606      	mov	r6, r0
 800a00e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800a012:	4638      	mov	r0, r7
 800a014:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800a018:	f000 fa44 	bl	800a4a4 <run_xrce_session>
 800a01c:	b126      	cbz	r6, 800a028 <rmw_destroy_publisher+0xa4>
 800a01e:	b118      	cbz	r0, 800a028 <rmw_destroy_publisher+0xa4>
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f981 	bl	800a328 <rmw_uxrce_fini_publisher_memory>
 800a026:	e7b7      	b.n	8009f98 <rmw_destroy_publisher+0x14>
 800a028:	2402      	movs	r4, #2
 800a02a:	e7f9      	b.n	800a020 <rmw_destroy_publisher+0x9c>

0800a02c <rmw_uxrce_init_service_memory>:
 800a02c:	b1e2      	cbz	r2, 800a068 <rmw_uxrce_init_service_memory+0x3c>
 800a02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a032:	7b05      	ldrb	r5, [r0, #12]
 800a034:	4606      	mov	r6, r0
 800a036:	b9ad      	cbnz	r5, 800a064 <rmw_uxrce_init_service_memory+0x38>
 800a038:	23c8      	movs	r3, #200	; 0xc8
 800a03a:	4617      	mov	r7, r2
 800a03c:	460c      	mov	r4, r1
 800a03e:	46a8      	mov	r8, r5
 800a040:	6083      	str	r3, [r0, #8]
 800a042:	f240 1301 	movw	r3, #257	; 0x101
 800a046:	e9c0 5500 	strd	r5, r5, [r0]
 800a04a:	8183      	strh	r3, [r0, #12]
 800a04c:	3501      	adds	r5, #1
 800a04e:	4621      	mov	r1, r4
 800a050:	4630      	mov	r0, r6
 800a052:	f004 fbef 	bl	800e834 <put_memory>
 800a056:	42af      	cmp	r7, r5
 800a058:	60a4      	str	r4, [r4, #8]
 800a05a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a05e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800a062:	d1f3      	bne.n	800a04c <rmw_uxrce_init_service_memory+0x20>
 800a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop

0800a06c <rmw_uxrce_init_client_memory>:
 800a06c:	b1e2      	cbz	r2, 800a0a8 <rmw_uxrce_init_client_memory+0x3c>
 800a06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a072:	7b05      	ldrb	r5, [r0, #12]
 800a074:	4606      	mov	r6, r0
 800a076:	b9ad      	cbnz	r5, 800a0a4 <rmw_uxrce_init_client_memory+0x38>
 800a078:	23c8      	movs	r3, #200	; 0xc8
 800a07a:	4617      	mov	r7, r2
 800a07c:	460c      	mov	r4, r1
 800a07e:	46a8      	mov	r8, r5
 800a080:	6083      	str	r3, [r0, #8]
 800a082:	f240 1301 	movw	r3, #257	; 0x101
 800a086:	e9c0 5500 	strd	r5, r5, [r0]
 800a08a:	8183      	strh	r3, [r0, #12]
 800a08c:	3501      	adds	r5, #1
 800a08e:	4621      	mov	r1, r4
 800a090:	4630      	mov	r0, r6
 800a092:	f004 fbcf 	bl	800e834 <put_memory>
 800a096:	42af      	cmp	r7, r5
 800a098:	60a4      	str	r4, [r4, #8]
 800a09a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a09e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800a0a2:	d1f3      	bne.n	800a08c <rmw_uxrce_init_client_memory+0x20>
 800a0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop

0800a0ac <rmw_uxrce_init_publisher_memory>:
 800a0ac:	b1e2      	cbz	r2, 800a0e8 <rmw_uxrce_init_publisher_memory+0x3c>
 800a0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b2:	7b05      	ldrb	r5, [r0, #12]
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	b9ad      	cbnz	r5, 800a0e4 <rmw_uxrce_init_publisher_memory+0x38>
 800a0b8:	23d8      	movs	r3, #216	; 0xd8
 800a0ba:	4617      	mov	r7, r2
 800a0bc:	460c      	mov	r4, r1
 800a0be:	46a8      	mov	r8, r5
 800a0c0:	6083      	str	r3, [r0, #8]
 800a0c2:	f240 1301 	movw	r3, #257	; 0x101
 800a0c6:	e9c0 5500 	strd	r5, r5, [r0]
 800a0ca:	8183      	strh	r3, [r0, #12]
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f004 fbaf 	bl	800e834 <put_memory>
 800a0d6:	42af      	cmp	r7, r5
 800a0d8:	60a4      	str	r4, [r4, #8]
 800a0da:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800a0de:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800a0e2:	d1f3      	bne.n	800a0cc <rmw_uxrce_init_publisher_memory+0x20>
 800a0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop

0800a0ec <rmw_uxrce_init_subscription_memory>:
 800a0ec:	b1e2      	cbz	r2, 800a128 <rmw_uxrce_init_subscription_memory+0x3c>
 800a0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f2:	7b05      	ldrb	r5, [r0, #12]
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	b9ad      	cbnz	r5, 800a124 <rmw_uxrce_init_subscription_memory+0x38>
 800a0f8:	23d8      	movs	r3, #216	; 0xd8
 800a0fa:	4617      	mov	r7, r2
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	46a8      	mov	r8, r5
 800a100:	6083      	str	r3, [r0, #8]
 800a102:	f240 1301 	movw	r3, #257	; 0x101
 800a106:	e9c0 5500 	strd	r5, r5, [r0]
 800a10a:	8183      	strh	r3, [r0, #12]
 800a10c:	3501      	adds	r5, #1
 800a10e:	4621      	mov	r1, r4
 800a110:	4630      	mov	r0, r6
 800a112:	f004 fb8f 	bl	800e834 <put_memory>
 800a116:	42af      	cmp	r7, r5
 800a118:	60a4      	str	r4, [r4, #8]
 800a11a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800a11e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800a122:	d1f3      	bne.n	800a10c <rmw_uxrce_init_subscription_memory+0x20>
 800a124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop

0800a12c <rmw_uxrce_init_node_memory>:
 800a12c:	b1e2      	cbz	r2, 800a168 <rmw_uxrce_init_node_memory+0x3c>
 800a12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a132:	7b05      	ldrb	r5, [r0, #12]
 800a134:	4606      	mov	r6, r0
 800a136:	b9ad      	cbnz	r5, 800a164 <rmw_uxrce_init_node_memory+0x38>
 800a138:	23a4      	movs	r3, #164	; 0xa4
 800a13a:	4617      	mov	r7, r2
 800a13c:	460c      	mov	r4, r1
 800a13e:	46a8      	mov	r8, r5
 800a140:	6083      	str	r3, [r0, #8]
 800a142:	f240 1301 	movw	r3, #257	; 0x101
 800a146:	e9c0 5500 	strd	r5, r5, [r0]
 800a14a:	8183      	strh	r3, [r0, #12]
 800a14c:	3501      	adds	r5, #1
 800a14e:	4621      	mov	r1, r4
 800a150:	4630      	mov	r0, r6
 800a152:	f004 fb6f 	bl	800e834 <put_memory>
 800a156:	42af      	cmp	r7, r5
 800a158:	60a4      	str	r4, [r4, #8]
 800a15a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800a15e:	f804 8c98 	strb.w	r8, [r4, #-152]
 800a162:	d1f3      	bne.n	800a14c <rmw_uxrce_init_node_memory+0x20>
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop

0800a16c <rmw_uxrce_init_session_memory>:
 800a16c:	b1ea      	cbz	r2, 800a1aa <rmw_uxrce_init_session_memory+0x3e>
 800a16e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a172:	7b05      	ldrb	r5, [r0, #12]
 800a174:	4606      	mov	r6, r0
 800a176:	b9b5      	cbnz	r5, 800a1a6 <rmw_uxrce_init_session_memory+0x3a>
 800a178:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800a17c:	f240 1301 	movw	r3, #257	; 0x101
 800a180:	4617      	mov	r7, r2
 800a182:	460c      	mov	r4, r1
 800a184:	46a9      	mov	r9, r5
 800a186:	f8c0 8008 	str.w	r8, [r0, #8]
 800a18a:	8183      	strh	r3, [r0, #12]
 800a18c:	e9c0 5500 	strd	r5, r5, [r0]
 800a190:	3501      	adds	r5, #1
 800a192:	4621      	mov	r1, r4
 800a194:	4630      	mov	r0, r6
 800a196:	f004 fb4d 	bl	800e834 <put_memory>
 800a19a:	42af      	cmp	r7, r5
 800a19c:	60a4      	str	r4, [r4, #8]
 800a19e:	f884 900c 	strb.w	r9, [r4, #12]
 800a1a2:	4444      	add	r4, r8
 800a1a4:	d1f4      	bne.n	800a190 <rmw_uxrce_init_session_memory+0x24>
 800a1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1aa:	4770      	bx	lr

0800a1ac <rmw_uxrce_init_topic_memory>:
 800a1ac:	b1e2      	cbz	r2, 800a1e8 <rmw_uxrce_init_topic_memory+0x3c>
 800a1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	7b05      	ldrb	r5, [r0, #12]
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	b9ad      	cbnz	r5, 800a1e4 <rmw_uxrce_init_topic_memory+0x38>
 800a1b8:	231c      	movs	r3, #28
 800a1ba:	4617      	mov	r7, r2
 800a1bc:	460c      	mov	r4, r1
 800a1be:	46a8      	mov	r8, r5
 800a1c0:	6083      	str	r3, [r0, #8]
 800a1c2:	f240 1301 	movw	r3, #257	; 0x101
 800a1c6:	e9c0 5500 	strd	r5, r5, [r0]
 800a1ca:	8183      	strh	r3, [r0, #12]
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f004 fb2f 	bl	800e834 <put_memory>
 800a1d6:	42af      	cmp	r7, r5
 800a1d8:	60a4      	str	r4, [r4, #8]
 800a1da:	f104 041c 	add.w	r4, r4, #28
 800a1de:	f804 8c10 	strb.w	r8, [r4, #-16]
 800a1e2:	d1f3      	bne.n	800a1cc <rmw_uxrce_init_topic_memory+0x20>
 800a1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop

0800a1ec <rmw_uxrce_init_static_input_buffer_memory>:
 800a1ec:	b1ea      	cbz	r2, 800a22a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f2:	7b05      	ldrb	r5, [r0, #12]
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	b9b5      	cbnz	r5, 800a226 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a1f8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800a1fc:	4617      	mov	r7, r2
 800a1fe:	460c      	mov	r4, r1
 800a200:	46a8      	mov	r8, r5
 800a202:	6083      	str	r3, [r0, #8]
 800a204:	f240 1301 	movw	r3, #257	; 0x101
 800a208:	e9c0 5500 	strd	r5, r5, [r0]
 800a20c:	8183      	strh	r3, [r0, #12]
 800a20e:	3501      	adds	r5, #1
 800a210:	4621      	mov	r1, r4
 800a212:	4630      	mov	r0, r6
 800a214:	f004 fb0e 	bl	800e834 <put_memory>
 800a218:	42af      	cmp	r7, r5
 800a21a:	60a4      	str	r4, [r4, #8]
 800a21c:	f884 800c 	strb.w	r8, [r4, #12]
 800a220:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800a224:	d1f3      	bne.n	800a20e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800a226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a22a:	4770      	bx	lr

0800a22c <rmw_uxrce_init_init_options_impl_memory>:
 800a22c:	b1e2      	cbz	r2, 800a268 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800a22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	7b05      	ldrb	r5, [r0, #12]
 800a234:	4606      	mov	r6, r0
 800a236:	b9ad      	cbnz	r5, 800a264 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800a238:	232c      	movs	r3, #44	; 0x2c
 800a23a:	4617      	mov	r7, r2
 800a23c:	460c      	mov	r4, r1
 800a23e:	46a8      	mov	r8, r5
 800a240:	6083      	str	r3, [r0, #8]
 800a242:	f240 1301 	movw	r3, #257	; 0x101
 800a246:	e9c0 5500 	strd	r5, r5, [r0]
 800a24a:	8183      	strh	r3, [r0, #12]
 800a24c:	3501      	adds	r5, #1
 800a24e:	4621      	mov	r1, r4
 800a250:	4630      	mov	r0, r6
 800a252:	f004 faef 	bl	800e834 <put_memory>
 800a256:	42af      	cmp	r7, r5
 800a258:	60a4      	str	r4, [r4, #8]
 800a25a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800a25e:	f804 8c20 	strb.w	r8, [r4, #-32]
 800a262:	d1f3      	bne.n	800a24c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800a264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop

0800a26c <rmw_uxrce_init_wait_set_memory>:
 800a26c:	b1e2      	cbz	r2, 800a2a8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800a26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	7b05      	ldrb	r5, [r0, #12]
 800a274:	4606      	mov	r6, r0
 800a276:	b9ad      	cbnz	r5, 800a2a4 <rmw_uxrce_init_wait_set_memory+0x38>
 800a278:	231c      	movs	r3, #28
 800a27a:	4617      	mov	r7, r2
 800a27c:	460c      	mov	r4, r1
 800a27e:	46a8      	mov	r8, r5
 800a280:	6083      	str	r3, [r0, #8]
 800a282:	f240 1301 	movw	r3, #257	; 0x101
 800a286:	e9c0 5500 	strd	r5, r5, [r0]
 800a28a:	8183      	strh	r3, [r0, #12]
 800a28c:	3501      	adds	r5, #1
 800a28e:	4621      	mov	r1, r4
 800a290:	4630      	mov	r0, r6
 800a292:	f004 facf 	bl	800e834 <put_memory>
 800a296:	42af      	cmp	r7, r5
 800a298:	60a4      	str	r4, [r4, #8]
 800a29a:	f104 041c 	add.w	r4, r4, #28
 800a29e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800a2a2:	d1f3      	bne.n	800a28c <rmw_uxrce_init_wait_set_memory+0x20>
 800a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop

0800a2ac <rmw_uxrce_init_guard_condition_memory>:
 800a2ac:	b1e2      	cbz	r2, 800a2e8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800a2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b2:	7b05      	ldrb	r5, [r0, #12]
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	b9ad      	cbnz	r5, 800a2e4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	4617      	mov	r7, r2
 800a2bc:	460c      	mov	r4, r1
 800a2be:	46a8      	mov	r8, r5
 800a2c0:	6083      	str	r3, [r0, #8]
 800a2c2:	f240 1301 	movw	r3, #257	; 0x101
 800a2c6:	e9c0 5500 	strd	r5, r5, [r0]
 800a2ca:	8183      	strh	r3, [r0, #12]
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f004 faaf 	bl	800e834 <put_memory>
 800a2d6:	42af      	cmp	r7, r5
 800a2d8:	60a4      	str	r4, [r4, #8]
 800a2da:	f104 0420 	add.w	r4, r4, #32
 800a2de:	f804 8c14 	strb.w	r8, [r4, #-20]
 800a2e2:	d1f3      	bne.n	800a2cc <rmw_uxrce_init_guard_condition_memory+0x20>
 800a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop

0800a2ec <rmw_uxrce_fini_session_memory>:
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <rmw_uxrce_fini_session_memory+0x8>)
 800a2f0:	f004 baa0 	b.w	800e834 <put_memory>
 800a2f4:	2000dccc 	.word	0x2000dccc

0800a2f8 <rmw_uxrce_fini_node_memory>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	6800      	ldr	r0, [r0, #0]
 800a2fe:	b128      	cbz	r0, 800a30c <rmw_uxrce_fini_node_memory+0x14>
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <rmw_uxrce_fini_node_memory+0x28>)
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	f7f5 ffec 	bl	80002e0 <strcmp>
 800a308:	b940      	cbnz	r0, 800a31c <rmw_uxrce_fini_node_memory+0x24>
 800a30a:	6020      	str	r0, [r4, #0]
 800a30c:	6861      	ldr	r1, [r4, #4]
 800a30e:	b129      	cbz	r1, 800a31c <rmw_uxrce_fini_node_memory+0x24>
 800a310:	2500      	movs	r5, #0
 800a312:	4804      	ldr	r0, [pc, #16]	; (800a324 <rmw_uxrce_fini_node_memory+0x2c>)
 800a314:	610d      	str	r5, [r1, #16]
 800a316:	f004 fa8d 	bl	800e834 <put_memory>
 800a31a:	6065      	str	r5, [r4, #4]
 800a31c:	bd38      	pop	{r3, r4, r5, pc}
 800a31e:	bf00      	nop
 800a320:	08015238 	.word	0x08015238
 800a324:	2000dc9c 	.word	0x2000dc9c

0800a328 <rmw_uxrce_fini_publisher_memory>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	4604      	mov	r4, r0
 800a32c:	6800      	ldr	r0, [r0, #0]
 800a32e:	b128      	cbz	r0, 800a33c <rmw_uxrce_fini_publisher_memory+0x14>
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <rmw_uxrce_fini_publisher_memory+0x24>)
 800a332:	6819      	ldr	r1, [r3, #0]
 800a334:	f7f5 ffd4 	bl	80002e0 <strcmp>
 800a338:	b938      	cbnz	r0, 800a34a <rmw_uxrce_fini_publisher_memory+0x22>
 800a33a:	6020      	str	r0, [r4, #0]
 800a33c:	6861      	ldr	r1, [r4, #4]
 800a33e:	b121      	cbz	r1, 800a34a <rmw_uxrce_fini_publisher_memory+0x22>
 800a340:	4803      	ldr	r0, [pc, #12]	; (800a350 <rmw_uxrce_fini_publisher_memory+0x28>)
 800a342:	f004 fa77 	bl	800e834 <put_memory>
 800a346:	2300      	movs	r3, #0
 800a348:	6063      	str	r3, [r4, #4]
 800a34a:	bd10      	pop	{r4, pc}
 800a34c:	08015238 	.word	0x08015238
 800a350:	2000dcac 	.word	0x2000dcac

0800a354 <rmw_uxrce_fini_subscription_memory>:
 800a354:	b510      	push	{r4, lr}
 800a356:	4604      	mov	r4, r0
 800a358:	6800      	ldr	r0, [r0, #0]
 800a35a:	b128      	cbz	r0, 800a368 <rmw_uxrce_fini_subscription_memory+0x14>
 800a35c:	4b06      	ldr	r3, [pc, #24]	; (800a378 <rmw_uxrce_fini_subscription_memory+0x24>)
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	f7f5 ffbe 	bl	80002e0 <strcmp>
 800a364:	b938      	cbnz	r0, 800a376 <rmw_uxrce_fini_subscription_memory+0x22>
 800a366:	6020      	str	r0, [r4, #0]
 800a368:	6861      	ldr	r1, [r4, #4]
 800a36a:	b121      	cbz	r1, 800a376 <rmw_uxrce_fini_subscription_memory+0x22>
 800a36c:	4803      	ldr	r0, [pc, #12]	; (800a37c <rmw_uxrce_fini_subscription_memory+0x28>)
 800a36e:	f004 fa61 	bl	800e834 <put_memory>
 800a372:	2300      	movs	r3, #0
 800a374:	6063      	str	r3, [r4, #4]
 800a376:	bd10      	pop	{r4, pc}
 800a378:	08015238 	.word	0x08015238
 800a37c:	2000dcec 	.word	0x2000dcec

0800a380 <rmw_uxrce_fini_service_memory>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4604      	mov	r4, r0
 800a384:	6800      	ldr	r0, [r0, #0]
 800a386:	b128      	cbz	r0, 800a394 <rmw_uxrce_fini_service_memory+0x14>
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <rmw_uxrce_fini_service_memory+0x24>)
 800a38a:	6819      	ldr	r1, [r3, #0]
 800a38c:	f7f5 ffa8 	bl	80002e0 <strcmp>
 800a390:	b938      	cbnz	r0, 800a3a2 <rmw_uxrce_fini_service_memory+0x22>
 800a392:	6020      	str	r0, [r4, #0]
 800a394:	6861      	ldr	r1, [r4, #4]
 800a396:	b121      	cbz	r1, 800a3a2 <rmw_uxrce_fini_service_memory+0x22>
 800a398:	4803      	ldr	r0, [pc, #12]	; (800a3a8 <rmw_uxrce_fini_service_memory+0x28>)
 800a39a:	f004 fa4b 	bl	800e834 <put_memory>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	6063      	str	r3, [r4, #4]
 800a3a2:	bd10      	pop	{r4, pc}
 800a3a4:	08015238 	.word	0x08015238
 800a3a8:	2000dcbc 	.word	0x2000dcbc

0800a3ac <rmw_uxrce_fini_client_memory>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	6800      	ldr	r0, [r0, #0]
 800a3b2:	b128      	cbz	r0, 800a3c0 <rmw_uxrce_fini_client_memory+0x14>
 800a3b4:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <rmw_uxrce_fini_client_memory+0x24>)
 800a3b6:	6819      	ldr	r1, [r3, #0]
 800a3b8:	f7f5 ff92 	bl	80002e0 <strcmp>
 800a3bc:	b938      	cbnz	r0, 800a3ce <rmw_uxrce_fini_client_memory+0x22>
 800a3be:	6020      	str	r0, [r4, #0]
 800a3c0:	6861      	ldr	r1, [r4, #4]
 800a3c2:	b121      	cbz	r1, 800a3ce <rmw_uxrce_fini_client_memory+0x22>
 800a3c4:	4803      	ldr	r0, [pc, #12]	; (800a3d4 <rmw_uxrce_fini_client_memory+0x28>)
 800a3c6:	f004 fa35 	bl	800e834 <put_memory>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	6063      	str	r3, [r4, #4]
 800a3ce:	bd10      	pop	{r4, pc}
 800a3d0:	08015238 	.word	0x08015238
 800a3d4:	200093d0 	.word	0x200093d0

0800a3d8 <rmw_uxrce_fini_topic_memory>:
 800a3d8:	b510      	push	{r4, lr}
 800a3da:	4604      	mov	r4, r0
 800a3dc:	4803      	ldr	r0, [pc, #12]	; (800a3ec <rmw_uxrce_fini_topic_memory+0x14>)
 800a3de:	4621      	mov	r1, r4
 800a3e0:	f004 fa28 	bl	800e834 <put_memory>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61a3      	str	r3, [r4, #24]
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2000dcfc 	.word	0x2000dcfc

0800a3f0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	492b      	ldr	r1, [pc, #172]	; (800a4a0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800a3f4:	b530      	push	{r4, r5, lr}
 800a3f6:	680d      	ldr	r5, [r1, #0]
 800a3f8:	ac03      	add	r4, sp, #12
 800a3fa:	e884 000c 	stmia.w	r4, {r2, r3}
 800a3fe:	461c      	mov	r4, r3
 800a400:	2d00      	cmp	r5, #0
 800a402:	d04b      	beq.n	800a49c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800a404:	462b      	mov	r3, r5
 800a406:	2100      	movs	r1, #0
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800a410:	4290      	cmp	r0, r2
 800a412:	bf08      	it	eq
 800a414:	3101      	addeq	r1, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1f6      	bne.n	800a408 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800a41a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d029      	beq.n	800a476 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a422:	d820      	bhi.n	800a466 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800a424:	428c      	cmp	r4, r1
 800a426:	d828      	bhi.n	800a47a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800a428:	fab4 f284 	clz	r2, r4
 800a42c:	0952      	lsrs	r2, r2, #5
 800a42e:	b324      	cbz	r4, 800a47a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800a430:	b1dd      	cbz	r5, 800a46a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800a432:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a436:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800a43a:	e001      	b.n	800a440 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800a43c:	686d      	ldr	r5, [r5, #4]
 800a43e:	b1ad      	cbz	r5, 800a46c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800a440:	68ab      	ldr	r3, [r5, #8]
 800a442:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800a446:	4288      	cmp	r0, r1
 800a448:	d1f8      	bne.n	800a43c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800a44a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800a44e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800a452:	4561      	cmp	r1, ip
 800a454:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a458:	eb73 0e04 	sbcs.w	lr, r3, r4
 800a45c:	daee      	bge.n	800a43c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800a45e:	468c      	mov	ip, r1
 800a460:	461c      	mov	r4, r3
 800a462:	462a      	mov	r2, r5
 800a464:	e7ea      	b.n	800a43c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800a466:	2b03      	cmp	r3, #3
 800a468:	d0dc      	beq.n	800a424 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800a46a:	2200      	movs	r2, #0
 800a46c:	4610      	mov	r0, r2
 800a46e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a472:	b002      	add	sp, #8
 800a474:	4770      	bx	lr
 800a476:	428c      	cmp	r4, r1
 800a478:	d905      	bls.n	800a486 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800a47a:	4809      	ldr	r0, [pc, #36]	; (800a4a0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800a47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a480:	b002      	add	sp, #8
 800a482:	f004 b9c7 	b.w	800e814 <get_memory>
 800a486:	fab4 f284 	clz	r2, r4
 800a48a:	0952      	lsrs	r2, r2, #5
 800a48c:	2c00      	cmp	r4, #0
 800a48e:	d1ed      	bne.n	800a46c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800a490:	4803      	ldr	r0, [pc, #12]	; (800a4a0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800a492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a496:	b002      	add	sp, #8
 800a498:	f004 b9bc 	b.w	800e814 <get_memory>
 800a49c:	4629      	mov	r1, r5
 800a49e:	e7bc      	b.n	800a41a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800a4a0:	2000dcdc 	.word	0x2000dcdc

0800a4a4 <run_xrce_session>:
 800a4a4:	b510      	push	{r4, lr}
 800a4a6:	788c      	ldrb	r4, [r1, #2]
 800a4a8:	b086      	sub	sp, #24
 800a4aa:	2c01      	cmp	r4, #1
 800a4ac:	f8ad 200e 	strh.w	r2, [sp, #14]
 800a4b0:	d00c      	beq.n	800a4cc <run_xrce_session+0x28>
 800a4b2:	2401      	movs	r4, #1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f10d 020e 	add.w	r2, sp, #14
 800a4ba:	f10d 0317 	add.w	r3, sp, #23
 800a4be:	9400      	str	r4, [sp, #0]
 800a4c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a4c4:	f000 ff32 	bl	800b32c <uxr_run_session_until_all_status>
 800a4c8:	b006      	add	sp, #24
 800a4ca:	bd10      	pop	{r4, pc}
 800a4cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a4d0:	f000 fb88 	bl	800abe4 <uxr_flash_output_streams>
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	b006      	add	sp, #24
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	bf00      	nop

0800a4dc <convert_qos_profile>:
 800a4dc:	7a4a      	ldrb	r2, [r1, #9]
 800a4de:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a4e2:	2a02      	cmp	r2, #2
 800a4e4:	bf18      	it	ne
 800a4e6:	2200      	movne	r2, #0
 800a4e8:	7002      	strb	r2, [r0, #0]
 800a4ea:	f1ac 0202 	sub.w	r2, ip, #2
 800a4ee:	fab2 f282 	clz	r2, r2
 800a4f2:	0952      	lsrs	r2, r2, #5
 800a4f4:	7042      	strb	r2, [r0, #1]
 800a4f6:	780a      	ldrb	r2, [r1, #0]
 800a4f8:	8889      	ldrh	r1, [r1, #4]
 800a4fa:	f1a2 0202 	sub.w	r2, r2, #2
 800a4fe:	8081      	strh	r1, [r0, #4]
 800a500:	fab2 f282 	clz	r2, r2
 800a504:	0952      	lsrs	r2, r2, #5
 800a506:	7082      	strb	r2, [r0, #2]
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop

0800a50c <generate_type_name>:
 800a50c:	2300      	movs	r3, #0
 800a50e:	b530      	push	{r4, r5, lr}
 800a510:	700b      	strb	r3, [r1, #0]
 800a512:	b087      	sub	sp, #28
 800a514:	6803      	ldr	r3, [r0, #0]
 800a516:	4614      	mov	r4, r2
 800a518:	b1bb      	cbz	r3, 800a54a <generate_type_name+0x3e>
 800a51a:	4a0e      	ldr	r2, [pc, #56]	; (800a554 <generate_type_name+0x48>)
 800a51c:	4615      	mov	r5, r2
 800a51e:	9500      	str	r5, [sp, #0]
 800a520:	9203      	str	r2, [sp, #12]
 800a522:	4d0d      	ldr	r5, [pc, #52]	; (800a558 <generate_type_name+0x4c>)
 800a524:	6842      	ldr	r2, [r0, #4]
 800a526:	4608      	mov	r0, r1
 800a528:	490c      	ldr	r1, [pc, #48]	; (800a55c <generate_type_name+0x50>)
 800a52a:	9204      	str	r2, [sp, #16]
 800a52c:	9105      	str	r1, [sp, #20]
 800a52e:	9102      	str	r1, [sp, #8]
 800a530:	4621      	mov	r1, r4
 800a532:	4a0b      	ldr	r2, [pc, #44]	; (800a560 <generate_type_name+0x54>)
 800a534:	9501      	str	r5, [sp, #4]
 800a536:	f008 f81d 	bl	8012574 <sniprintf>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	bfa8      	it	ge
 800a53e:	4284      	cmpge	r4, r0
 800a540:	bfcc      	ite	gt
 800a542:	2001      	movgt	r0, #1
 800a544:	2000      	movle	r0, #0
 800a546:	b007      	add	sp, #28
 800a548:	bd30      	pop	{r4, r5, pc}
 800a54a:	4b06      	ldr	r3, [pc, #24]	; (800a564 <generate_type_name+0x58>)
 800a54c:	4a01      	ldr	r2, [pc, #4]	; (800a554 <generate_type_name+0x48>)
 800a54e:	461d      	mov	r5, r3
 800a550:	e7e5      	b.n	800a51e <generate_type_name+0x12>
 800a552:	bf00      	nop
 800a554:	08014d08 	.word	0x08014d08
 800a558:	08014d20 	.word	0x08014d20
 800a55c:	08014d1c 	.word	0x08014d1c
 800a560:	08014d0c 	.word	0x08014d0c
 800a564:	08015010 	.word	0x08015010

0800a568 <generate_topic_name>:
 800a568:	b530      	push	{r4, r5, lr}
 800a56a:	4614      	mov	r4, r2
 800a56c:	b083      	sub	sp, #12
 800a56e:	4605      	mov	r5, r0
 800a570:	4b07      	ldr	r3, [pc, #28]	; (800a590 <generate_topic_name+0x28>)
 800a572:	4a08      	ldr	r2, [pc, #32]	; (800a594 <generate_topic_name+0x2c>)
 800a574:	4608      	mov	r0, r1
 800a576:	9500      	str	r5, [sp, #0]
 800a578:	4621      	mov	r1, r4
 800a57a:	f007 fffb 	bl	8012574 <sniprintf>
 800a57e:	2800      	cmp	r0, #0
 800a580:	bfa8      	it	ge
 800a582:	4284      	cmpge	r4, r0
 800a584:	bfcc      	ite	gt
 800a586:	2001      	movgt	r0, #1
 800a588:	2000      	movle	r0, #0
 800a58a:	b003      	add	sp, #12
 800a58c:	bd30      	pop	{r4, r5, pc}
 800a58e:	bf00      	nop
 800a590:	08014d2c 	.word	0x08014d2c
 800a594:	08014d24 	.word	0x08014d24

0800a598 <is_uxrce_rmw_identifier_valid>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	b140      	cbz	r0, 800a5b0 <is_uxrce_rmw_identifier_valid+0x18>
 800a59e:	f004 f95d 	bl	800e85c <rmw_get_implementation_identifier>
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f7f5 fe9b 	bl	80002e0 <strcmp>
 800a5aa:	fab0 f080 	clz	r0, r0
 800a5ae:	0940      	lsrs	r0, r0, #5
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	bf00      	nop

0800a5b4 <get_message_typesupport_handle>:
 800a5b4:	6883      	ldr	r3, [r0, #8]
 800a5b6:	4718      	bx	r3

0800a5b8 <get_message_typesupport_handle_function>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	6800      	ldr	r0, [r0, #0]
 800a5be:	f7f5 fe8f 	bl	80002e0 <strcmp>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	bf0c      	ite	eq
 800a5c6:	4620      	moveq	r0, r4
 800a5c8:	2000      	movne	r0, #0
 800a5ca:	bd10      	pop	{r4, pc}

0800a5cc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d0:	6805      	ldr	r5, [r0, #0]
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	460e      	mov	r6, r1
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f7f5 fe82 	bl	80002e0 <strcmp>
 800a5dc:	b1c8      	cbz	r0, 800a612 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800a5de:	4b11      	ldr	r3, [pc, #68]	; (800a624 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	429d      	cmp	r5, r3
 800a5e4:	d112      	bne.n	800a60c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a5e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a5ea:	f8d8 4000 	ldr.w	r4, [r8]
 800a5ee:	b16c      	cbz	r4, 800a60c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a5f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a5f4:	2700      	movs	r7, #0
 800a5f6:	3d04      	subs	r5, #4
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800a5fe:	f7f5 fe6f 	bl	80002e0 <strcmp>
 800a602:	00bb      	lsls	r3, r7, #2
 800a604:	b140      	cbz	r0, 800a618 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800a606:	3701      	adds	r7, #1
 800a608:	42bc      	cmp	r4, r7
 800a60a:	d1f5      	bne.n	800a5f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800a60c:	2000      	movs	r0, #0
 800a60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a612:	4620      	mov	r0, r4
 800a614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a618:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a620:	58d3      	ldr	r3, [r2, r3]
 800a622:	4718      	bx	r3
 800a624:	200000d0 	.word	0x200000d0

0800a628 <example_interfaces__msg__UInt8__get_type_hash>:
 800a628:	4800      	ldr	r0, [pc, #0]	; (800a62c <example_interfaces__msg__UInt8__get_type_hash+0x4>)
 800a62a:	4770      	bx	lr
 800a62c:	20000148 	.word	0x20000148

0800a630 <example_interfaces__msg__UInt8__get_type_description>:
 800a630:	4b03      	ldr	r3, [pc, #12]	; (800a640 <example_interfaces__msg__UInt8__get_type_description+0x10>)
 800a632:	781a      	ldrb	r2, [r3, #0]
 800a634:	b90a      	cbnz	r2, 800a63a <example_interfaces__msg__UInt8__get_type_description+0xa>
 800a636:	2201      	movs	r2, #1
 800a638:	701a      	strb	r2, [r3, #0]
 800a63a:	4802      	ldr	r0, [pc, #8]	; (800a644 <example_interfaces__msg__UInt8__get_type_description+0x14>)
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	2000dd1d 	.word	0x2000dd1d
 800a644:	08014d48 	.word	0x08014d48

0800a648 <example_interfaces__msg__UInt8__get_type_description_sources>:
 800a648:	4b09      	ldr	r3, [pc, #36]	; (800a670 <example_interfaces__msg__UInt8__get_type_description_sources+0x28>)
 800a64a:	781a      	ldrb	r2, [r3, #0]
 800a64c:	b96a      	cbnz	r2, 800a66a <example_interfaces__msg__UInt8__get_type_description_sources+0x22>
 800a64e:	2201      	movs	r2, #1
 800a650:	b430      	push	{r4, r5}
 800a652:	4d08      	ldr	r5, [pc, #32]	; (800a674 <example_interfaces__msg__UInt8__get_type_description_sources+0x2c>)
 800a654:	4c08      	ldr	r4, [pc, #32]	; (800a678 <example_interfaces__msg__UInt8__get_type_description_sources+0x30>)
 800a656:	701a      	strb	r2, [r3, #0]
 800a658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a65a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a65c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a65e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	4806      	ldr	r0, [pc, #24]	; (800a67c <example_interfaces__msg__UInt8__get_type_description_sources+0x34>)
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bc30      	pop	{r4, r5}
 800a668:	4770      	bx	lr
 800a66a:	4804      	ldr	r0, [pc, #16]	; (800a67c <example_interfaces__msg__UInt8__get_type_description_sources+0x34>)
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	2000dd1c 	.word	0x2000dd1c
 800a674:	08014d6c 	.word	0x08014d6c
 800a678:	2000dd20 	.word	0x2000dd20
 800a67c:	08014d90 	.word	0x08014d90

0800a680 <example_interfaces__msg__UInt8__init>:
 800a680:	3800      	subs	r0, #0
 800a682:	bf18      	it	ne
 800a684:	2001      	movne	r0, #1
 800a686:	4770      	bx	lr

0800a688 <example_interfaces__msg__UInt8__fini>:
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop

0800a68c <uxr_buffer_delete_entity>:
 800a68c:	b510      	push	{r4, lr}
 800a68e:	2300      	movs	r3, #0
 800a690:	b08e      	sub	sp, #56	; 0x38
 800a692:	4604      	mov	r4, r0
 800a694:	9103      	str	r1, [sp, #12]
 800a696:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a69a:	2303      	movs	r3, #3
 800a69c:	2204      	movs	r2, #4
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	ab06      	add	r3, sp, #24
 800a6a2:	f001 f86f 	bl	800b784 <uxr_prepare_stream_to_write_submessage>
 800a6a6:	b918      	cbnz	r0, 800a6b0 <uxr_buffer_delete_entity+0x24>
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	b00e      	add	sp, #56	; 0x38
 800a6ae:	bd10      	pop	{r4, pc}
 800a6b0:	9902      	ldr	r1, [sp, #8]
 800a6b2:	aa05      	add	r2, sp, #20
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f001 f9a1 	bl	800b9fc <uxr_init_base_object_request>
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	a905      	add	r1, sp, #20
 800a6be:	a806      	add	r0, sp, #24
 800a6c0:	f002 fb0a 	bl	800ccd8 <uxr_serialize_DELETE_Payload>
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	b00e      	add	sp, #56	; 0x38
 800a6c8:	bd10      	pop	{r4, pc}
 800a6ca:	bf00      	nop

0800a6cc <uxr_common_create_entity>:
 800a6cc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	f1bc 0f01 	cmp.w	ip, #1
 800a6d6:	b08c      	sub	sp, #48	; 0x30
 800a6d8:	4604      	mov	r4, r0
 800a6da:	9202      	str	r2, [sp, #8]
 800a6dc:	bf0c      	ite	eq
 800a6de:	f003 0201 	andeq.w	r2, r3, #1
 800a6e2:	2200      	movne	r2, #0
 800a6e4:	330e      	adds	r3, #14
 800a6e6:	9103      	str	r1, [sp, #12]
 800a6e8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800a6ec:	441a      	add	r2, r3
 800a6ee:	ab04      	add	r3, sp, #16
 800a6f0:	9101      	str	r1, [sp, #4]
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	b292      	uxth	r2, r2
 800a6f6:	9100      	str	r1, [sp, #0]
 800a6f8:	9903      	ldr	r1, [sp, #12]
 800a6fa:	f001 f843 	bl	800b784 <uxr_prepare_stream_to_write_submessage>
 800a6fe:	b918      	cbnz	r0, 800a708 <uxr_common_create_entity+0x3c>
 800a700:	4604      	mov	r4, r0
 800a702:	4620      	mov	r0, r4
 800a704:	b00c      	add	sp, #48	; 0x30
 800a706:	bd10      	pop	{r4, pc}
 800a708:	9902      	ldr	r1, [sp, #8]
 800a70a:	4620      	mov	r0, r4
 800a70c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a70e:	f001 f975 	bl	800b9fc <uxr_init_base_object_request>
 800a712:	4604      	mov	r4, r0
 800a714:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a716:	a804      	add	r0, sp, #16
 800a718:	f002 fa38 	bl	800cb8c <uxr_serialize_CREATE_Payload>
 800a71c:	4620      	mov	r0, r4
 800a71e:	b00c      	add	sp, #48	; 0x30
 800a720:	bd10      	pop	{r4, pc}
 800a722:	bf00      	nop

0800a724 <uxr_buffer_create_participant_bin>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800a72a:	4605      	mov	r5, r0
 800a72c:	ac11      	add	r4, sp, #68	; 0x44
 800a72e:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800a732:	2303      	movs	r3, #3
 800a734:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800a738:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a73c:	7223      	strb	r3, [r4, #8]
 800a73e:	2300      	movs	r3, #0
 800a740:	2201      	movs	r2, #1
 800a742:	f88d 3014 	strb.w	r3, [sp, #20]
 800a746:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800a748:	7122      	strb	r2, [r4, #4]
 800a74a:	b1cb      	cbz	r3, 800a780 <uxr_buffer_create_participant_bin+0x5c>
 800a74c:	f88d 201c 	strb.w	r2, [sp, #28]
 800a750:	9308      	str	r3, [sp, #32]
 800a752:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a756:	a915      	add	r1, sp, #84	; 0x54
 800a758:	a809      	add	r0, sp, #36	; 0x24
 800a75a:	f7fe ffd9 	bl	8009710 <ucdr_init_buffer>
 800a75e:	a905      	add	r1, sp, #20
 800a760:	a809      	add	r0, sp, #36	; 0x24
 800a762:	f001 fee9 	bl	800c538 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800a766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a768:	9600      	str	r6, [sp, #0]
 800a76a:	4628      	mov	r0, r5
 800a76c:	9401      	str	r4, [sp, #4]
 800a76e:	60e3      	str	r3, [r4, #12]
 800a770:	b29b      	uxth	r3, r3
 800a772:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a776:	f7ff ffa9 	bl	800a6cc <uxr_common_create_entity>
 800a77a:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	f88d 301c 	strb.w	r3, [sp, #28]
 800a784:	e7e5      	b.n	800a752 <uxr_buffer_create_participant_bin+0x2e>
 800a786:	bf00      	nop

0800a788 <uxr_buffer_create_topic_bin>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800a78e:	4605      	mov	r5, r0
 800a790:	4618      	mov	r0, r3
 800a792:	9105      	str	r1, [sp, #20]
 800a794:	a997      	add	r1, sp, #604	; 0x25c
 800a796:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800a79a:	ac13      	add	r4, sp, #76	; 0x4c
 800a79c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800a7a6:	f000 f8ed 	bl	800a984 <uxr_object_id_to_raw>
 800a7aa:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800a7ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7b0:	a917      	add	r1, sp, #92	; 0x5c
 800a7b2:	a80b      	add	r0, sp, #44	; 0x2c
 800a7b4:	9306      	str	r3, [sp, #24]
 800a7b6:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800a7b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f88d 301c 	strb.w	r3, [sp, #28]
 800a7cc:	f7fe ffa0 	bl	8009710 <ucdr_init_buffer>
 800a7d0:	a906      	add	r1, sp, #24
 800a7d2:	a80b      	add	r0, sp, #44	; 0x2c
 800a7d4:	f001 fed2 	bl	800c57c <uxr_serialize_OBJK_Topic_Binary>
 800a7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7da:	4628      	mov	r0, r5
 800a7dc:	9600      	str	r6, [sp, #0]
 800a7de:	9316      	str	r3, [sp, #88]	; 0x58
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	9401      	str	r4, [sp, #4]
 800a7e4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a7e8:	f7ff ff70 	bl	800a6cc <uxr_common_create_entity>
 800a7ec:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}
 800a7f2:	bf00      	nop

0800a7f4 <uxr_buffer_create_publisher_bin>:
 800a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7f6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800a7fa:	2603      	movs	r6, #3
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	4618      	mov	r0, r3
 800a800:	9105      	str	r1, [sp, #20]
 800a802:	a992      	add	r1, sp, #584	; 0x248
 800a804:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800a808:	ac0e      	add	r4, sp, #56	; 0x38
 800a80a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800a80e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a812:	f000 f8b7 	bl	800a984 <uxr_object_id_to_raw>
 800a816:	2300      	movs	r3, #0
 800a818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a81c:	a912      	add	r1, sp, #72	; 0x48
 800a81e:	a806      	add	r0, sp, #24
 800a820:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800a824:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800a828:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800a82c:	f7fe ff70 	bl	8009710 <ucdr_init_buffer>
 800a830:	a993      	add	r1, sp, #588	; 0x24c
 800a832:	a806      	add	r0, sp, #24
 800a834:	f001 ff56 	bl	800c6e4 <uxr_serialize_OBJK_Publisher_Binary>
 800a838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a83a:	4628      	mov	r0, r5
 800a83c:	9700      	str	r7, [sp, #0]
 800a83e:	9311      	str	r3, [sp, #68]	; 0x44
 800a840:	b29b      	uxth	r3, r3
 800a842:	9401      	str	r4, [sp, #4]
 800a844:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a848:	f7ff ff40 	bl	800a6cc <uxr_common_create_entity>
 800a84c:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800a850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a852:	bf00      	nop

0800a854 <uxr_buffer_create_datawriter_bin>:
 800a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a858:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a85c:	4606      	mov	r6, r0
 800a85e:	4618      	mov	r0, r3
 800a860:	2703      	movs	r7, #3
 800a862:	ac1d      	add	r4, sp, #116	; 0x74
 800a864:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800a868:	9105      	str	r1, [sp, #20]
 800a86a:	a9a1      	add	r1, sp, #644	; 0x284
 800a86c:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800a870:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a874:	2305      	movs	r3, #5
 800a876:	7123      	strb	r3, [r4, #4]
 800a878:	f000 f884 	bl	800a984 <uxr_object_id_to_raw>
 800a87c:	a90e      	add	r1, sp, #56	; 0x38
 800a87e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800a880:	7227      	strb	r7, [r4, #8]
 800a882:	f000 f87f 	bl	800a984 <uxr_object_id_to_raw>
 800a886:	2300      	movs	r3, #0
 800a888:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800a88c:	3d00      	subs	r5, #0
 800a88e:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800a892:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800a896:	bf18      	it	ne
 800a898:	2501      	movne	r5, #1
 800a89a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800a89e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800a8a2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800a8a6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800a8b0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800a8b4:	bb8a      	cbnz	r2, 800a91a <uxr_buffer_create_datawriter_bin+0xc6>
 800a8b6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800a8ba:	f04f 0c13 	mov.w	ip, #19
 800a8be:	250b      	movs	r5, #11
 800a8c0:	2221      	movs	r2, #33	; 0x21
 800a8c2:	2111      	movs	r1, #17
 800a8c4:	2009      	movs	r0, #9
 800a8c6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a8ca:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800a8ce:	b923      	cbnz	r3, 800a8da <uxr_buffer_create_datawriter_bin+0x86>
 800a8d0:	4672      	mov	r2, lr
 800a8d2:	4661      	mov	r1, ip
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800a8da:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d025      	beq.n	800a92e <uxr_buffer_create_datawriter_bin+0xda>
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d029      	beq.n	800a93a <uxr_buffer_create_datawriter_bin+0xe6>
 800a8e6:	b32b      	cbz	r3, 800a934 <uxr_buffer_create_datawriter_bin+0xe0>
 800a8e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8ec:	a921      	add	r1, sp, #132	; 0x84
 800a8ee:	a806      	add	r0, sp, #24
 800a8f0:	f7fe ff0e 	bl	8009710 <ucdr_init_buffer>
 800a8f4:	a90e      	add	r1, sp, #56	; 0x38
 800a8f6:	a806      	add	r0, sp, #24
 800a8f8:	f001 ff6a 	bl	800c7d0 <uxr_serialize_OBJK_DataWriter_Binary>
 800a8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8fe:	f8cd 8000 	str.w	r8, [sp]
 800a902:	4630      	mov	r0, r6
 800a904:	9401      	str	r4, [sp, #4]
 800a906:	60e3      	str	r3, [r4, #12]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a90e:	f7ff fedd 	bl	800a6cc <uxr_common_create_entity>
 800a912:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a91a:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800a91e:	f04f 0c12 	mov.w	ip, #18
 800a922:	250a      	movs	r5, #10
 800a924:	2220      	movs	r2, #32
 800a926:	2110      	movs	r1, #16
 800a928:	2008      	movs	r0, #8
 800a92a:	2702      	movs	r7, #2
 800a92c:	e7cd      	b.n	800a8ca <uxr_buffer_create_datawriter_bin+0x76>
 800a92e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800a932:	e7d9      	b.n	800a8e8 <uxr_buffer_create_datawriter_bin+0x94>
 800a934:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800a938:	e7d6      	b.n	800a8e8 <uxr_buffer_create_datawriter_bin+0x94>
 800a93a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800a93e:	e7d3      	b.n	800a8e8 <uxr_buffer_create_datawriter_bin+0x94>

0800a940 <uxr_object_id>:
 800a940:	b082      	sub	sp, #8
 800a942:	2300      	movs	r3, #0
 800a944:	f88d 1006 	strb.w	r1, [sp, #6]
 800a948:	f360 030f 	bfi	r3, r0, #0, #16
 800a94c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a950:	f362 431f 	bfi	r3, r2, #16, #16
 800a954:	4618      	mov	r0, r3
 800a956:	b002      	add	sp, #8
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop

0800a95c <uxr_object_id_from_raw>:
 800a95c:	7843      	ldrb	r3, [r0, #1]
 800a95e:	b082      	sub	sp, #8
 800a960:	7801      	ldrb	r1, [r0, #0]
 800a962:	2000      	movs	r0, #0
 800a964:	091a      	lsrs	r2, r3, #4
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a96e:	f88d 3006 	strb.w	r3, [sp, #6]
 800a972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a976:	f362 000f 	bfi	r0, r2, #0, #16
 800a97a:	f363 401f 	bfi	r0, r3, #16, #16
 800a97e:	b002      	add	sp, #8
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop

0800a984 <uxr_object_id_to_raw>:
 800a984:	4602      	mov	r2, r0
 800a986:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800a98a:	b082      	sub	sp, #8
 800a98c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800a990:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800a994:	f881 c000 	strb.w	ip, [r1]
 800a998:	7048      	strb	r0, [r1, #1]
 800a99a:	b002      	add	sp, #8
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop

0800a9a0 <on_get_fragmentation_info>:
 800a9a0:	b500      	push	{lr}
 800a9a2:	b08b      	sub	sp, #44	; 0x2c
 800a9a4:	4601      	mov	r1, r0
 800a9a6:	2204      	movs	r2, #4
 800a9a8:	a802      	add	r0, sp, #8
 800a9aa:	f7fe feb1 	bl	8009710 <ucdr_init_buffer>
 800a9ae:	f10d 0305 	add.w	r3, sp, #5
 800a9b2:	f10d 0206 	add.w	r2, sp, #6
 800a9b6:	a901      	add	r1, sp, #4
 800a9b8:	a802      	add	r0, sp, #8
 800a9ba:	f001 f9a9 	bl	800bd10 <uxr_read_submessage_header>
 800a9be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a9c2:	2b0d      	cmp	r3, #13
 800a9c4:	d003      	beq.n	800a9ce <on_get_fragmentation_info+0x2e>
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	b00b      	add	sp, #44	; 0x2c
 800a9ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a9d2:	f013 0f02 	tst.w	r3, #2
 800a9d6:	bf14      	ite	ne
 800a9d8:	2002      	movne	r0, #2
 800a9da:	2001      	moveq	r0, #1
 800a9dc:	b00b      	add	sp, #44	; 0x2c
 800a9de:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9e2:	bf00      	nop

0800a9e4 <read_submessage_get_info>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	2500      	movs	r5, #0
 800a9e8:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800a9ec:	460e      	mov	r6, r1
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	f44f 7224 	mov.w	r2, #656	; 0x290
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	a810      	add	r0, sp, #64	; 0x40
 800a9f8:	9503      	str	r5, [sp, #12]
 800a9fa:	9504      	str	r5, [sp, #16]
 800a9fc:	f006 ffde 	bl	80119bc <memset>
 800aa00:	a903      	add	r1, sp, #12
 800aa02:	4630      	mov	r0, r6
 800aa04:	f002 f952 	bl	800ccac <uxr_deserialize_GET_INFO_Payload>
 800aa08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800aa12:	f000 ffeb 	bl	800b9ec <uxr_session_header_offset>
 800aa16:	462b      	mov	r3, r5
 800aa18:	220c      	movs	r2, #12
 800aa1a:	a905      	add	r1, sp, #20
 800aa1c:	9000      	str	r0, [sp, #0]
 800aa1e:	a808      	add	r0, sp, #32
 800aa20:	f7fe fe64 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800aa24:	a910      	add	r1, sp, #64	; 0x40
 800aa26:	a808      	add	r0, sp, #32
 800aa28:	f002 f9b4 	bl	800cd94 <uxr_serialize_INFO_Payload>
 800aa2c:	9b08      	ldr	r3, [sp, #32]
 800aa2e:	462a      	mov	r2, r5
 800aa30:	4629      	mov	r1, r5
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 ff86 	bl	800b944 <uxr_stamp_session_header>
 800aa38:	a808      	add	r0, sp, #32
 800aa3a:	f7fe fe97 	bl	800976c <ucdr_buffer_length>
 800aa3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aa40:	4602      	mov	r2, r0
 800aa42:	a905      	add	r1, sp, #20
 800aa44:	e9d3 0400 	ldrd	r0, r4, [r3]
 800aa48:	47a0      	blx	r4
 800aa4a:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800aa4e:	bd70      	pop	{r4, r5, r6, pc}

0800aa50 <write_submessage_acknack.isra.0>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	b092      	sub	sp, #72	; 0x48
 800aa54:	4605      	mov	r5, r0
 800aa56:	460e      	mov	r6, r1
 800aa58:	4614      	mov	r4, r2
 800aa5a:	f000 ffc7 	bl	800b9ec <uxr_session_header_offset>
 800aa5e:	a905      	add	r1, sp, #20
 800aa60:	9000      	str	r0, [sp, #0]
 800aa62:	2300      	movs	r3, #0
 800aa64:	a80a      	add	r0, sp, #40	; 0x28
 800aa66:	2211      	movs	r2, #17
 800aa68:	f7fe fe40 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800aa6c:	2218      	movs	r2, #24
 800aa6e:	2300      	movs	r3, #0
 800aa70:	210a      	movs	r1, #10
 800aa72:	fb02 5404 	mla	r4, r2, r4, r5
 800aa76:	a80a      	add	r0, sp, #40	; 0x28
 800aa78:	2205      	movs	r2, #5
 800aa7a:	3450      	adds	r4, #80	; 0x50
 800aa7c:	f001 f92e 	bl	800bcdc <uxr_buffer_submessage_header>
 800aa80:	a903      	add	r1, sp, #12
 800aa82:	4620      	mov	r0, r4
 800aa84:	f004 ff76 	bl	800f974 <uxr_compute_acknack>
 800aa88:	ba40      	rev16	r0, r0
 800aa8a:	a903      	add	r1, sp, #12
 800aa8c:	f88d 6010 	strb.w	r6, [sp, #16]
 800aa90:	f8ad 000e 	strh.w	r0, [sp, #14]
 800aa94:	a80a      	add	r0, sp, #40	; 0x28
 800aa96:	f002 f9ef 	bl	800ce78 <uxr_serialize_ACKNACK_Payload>
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	f000 ff4f 	bl	800b944 <uxr_stamp_session_header>
 800aaa6:	a80a      	add	r0, sp, #40	; 0x28
 800aaa8:	f7fe fe60 	bl	800976c <ucdr_buffer_length>
 800aaac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800aaae:	4602      	mov	r2, r0
 800aab0:	a905      	add	r1, sp, #20
 800aab2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800aab6:	47a0      	blx	r4
 800aab8:	b012      	add	sp, #72	; 0x48
 800aaba:	bd70      	pop	{r4, r5, r6, pc}
 800aabc:	0000      	movs	r0, r0
	...

0800aac0 <uxr_init_session>:
 800aac0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800aaf8 <uxr_init_session+0x38>
 800aac4:	2300      	movs	r3, #0
 800aac6:	b510      	push	{r4, lr}
 800aac8:	4604      	mov	r4, r0
 800aaca:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800aace:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800aad2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800aad6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800aada:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800aade:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800aae2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800aae6:	2181      	movs	r1, #129	; 0x81
 800aae8:	f000 fe90 	bl	800b80c <uxr_init_session_info>
 800aaec:	f104 0008 	add.w	r0, r4, #8
 800aaf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf4:	f001 b80e 	b.w	800bb14 <uxr_init_stream_storage>
	...

0800ab00 <uxr_set_status_callback>:
 800ab00:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop

0800ab08 <uxr_set_topic_callback>:
 800ab08:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop

0800ab10 <uxr_set_request_callback>:
 800ab10:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop

0800ab18 <uxr_set_reply_callback>:
 800ab18:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop

0800ab20 <uxr_create_output_best_effort_stream>:
 800ab20:	b510      	push	{r4, lr}
 800ab22:	4604      	mov	r4, r0
 800ab24:	b084      	sub	sp, #16
 800ab26:	e9cd 2100 	strd	r2, r1, [sp]
 800ab2a:	f000 ff5f 	bl	800b9ec <uxr_session_header_offset>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f104 0008 	add.w	r0, r4, #8
 800ab34:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ab38:	b004      	add	sp, #16
 800ab3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab3e:	f001 b82f 	b.w	800bba0 <uxr_add_output_best_effort_buffer>
 800ab42:	bf00      	nop

0800ab44 <uxr_create_output_reliable_stream>:
 800ab44:	b530      	push	{r4, r5, lr}
 800ab46:	b089      	sub	sp, #36	; 0x24
 800ab48:	4604      	mov	r4, r0
 800ab4a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ab4e:	9303      	str	r3, [sp, #12]
 800ab50:	f000 ff4c 	bl	800b9ec <uxr_session_header_offset>
 800ab54:	4605      	mov	r5, r0
 800ab56:	9905      	ldr	r1, [sp, #20]
 800ab58:	f104 0008 	add.w	r0, r4, #8
 800ab5c:	9500      	str	r5, [sp, #0]
 800ab5e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ab62:	f001 f831 	bl	800bbc8 <uxr_add_output_reliable_buffer>
 800ab66:	2200      	movs	r2, #0
 800ab68:	fa5f fc80 	uxtb.w	ip, r0
 800ab6c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800ab70:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800ab74:	0e03      	lsrs	r3, r0, #24
 800ab76:	f36c 0207 	bfi	r2, ip, #0, #8
 800ab7a:	f364 220f 	bfi	r2, r4, #8, #8
 800ab7e:	f361 4217 	bfi	r2, r1, #16, #8
 800ab82:	f363 621f 	bfi	r2, r3, #24, #8
 800ab86:	4610      	mov	r0, r2
 800ab88:	b009      	add	sp, #36	; 0x24
 800ab8a:	bd30      	pop	{r4, r5, pc}

0800ab8c <uxr_create_input_best_effort_stream>:
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	3008      	adds	r0, #8
 800ab90:	b002      	add	sp, #8
 800ab92:	f001 b833 	b.w	800bbfc <uxr_add_input_best_effort_buffer>
 800ab96:	bf00      	nop

0800ab98 <uxr_create_input_reliable_stream>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	4c0c      	ldr	r4, [pc, #48]	; (800abcc <uxr_create_input_reliable_stream+0x34>)
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	3008      	adds	r0, #8
 800aba0:	9400      	str	r4, [sp, #0]
 800aba2:	f001 f841 	bl	800bc28 <uxr_add_input_reliable_buffer>
 800aba6:	2200      	movs	r2, #0
 800aba8:	fa5f fe80 	uxtb.w	lr, r0
 800abac:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800abb0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800abb4:	0e03      	lsrs	r3, r0, #24
 800abb6:	f36e 0207 	bfi	r2, lr, #0, #8
 800abba:	f36c 220f 	bfi	r2, ip, #8, #8
 800abbe:	f361 4217 	bfi	r2, r1, #16, #8
 800abc2:	f363 621f 	bfi	r2, r3, #24, #8
 800abc6:	4610      	mov	r0, r2
 800abc8:	b004      	add	sp, #16
 800abca:	bd10      	pop	{r4, pc}
 800abcc:	0800a9a1 	.word	0x0800a9a1

0800abd0 <uxr_epoch_nanos>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	4604      	mov	r4, r0
 800abd4:	f001 f8e4 	bl	800bda0 <uxr_nanos>
 800abd8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800abdc:	1ac0      	subs	r0, r0, r3
 800abde:	eb61 0102 	sbc.w	r1, r1, r2
 800abe2:	bd10      	pop	{r4, pc}

0800abe4 <uxr_flash_output_streams>:
 800abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe8:	7e03      	ldrb	r3, [r0, #24]
 800abea:	b084      	sub	sp, #16
 800abec:	4604      	mov	r4, r0
 800abee:	b1fb      	cbz	r3, 800ac30 <uxr_flash_output_streams+0x4c>
 800abf0:	f04f 0900 	mov.w	r9, #0
 800abf4:	f10d 0802 	add.w	r8, sp, #2
 800abf8:	af03      	add	r7, sp, #12
 800abfa:	ae02      	add	r6, sp, #8
 800abfc:	4648      	mov	r0, r9
 800abfe:	2201      	movs	r2, #1
 800ac00:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ac04:	4611      	mov	r1, r2
 800ac06:	3508      	adds	r5, #8
 800ac08:	f000 ff2a 	bl	800ba60 <uxr_stream_id>
 800ac0c:	4684      	mov	ip, r0
 800ac0e:	4643      	mov	r3, r8
 800ac10:	463a      	mov	r2, r7
 800ac12:	4631      	mov	r1, r6
 800ac14:	4628      	mov	r0, r5
 800ac16:	f8cd c004 	str.w	ip, [sp, #4]
 800ac1a:	f004 ff35 	bl	800fa88 <uxr_prepare_best_effort_buffer_to_send>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d13d      	bne.n	800ac9e <uxr_flash_output_streams+0xba>
 800ac22:	f109 0901 	add.w	r9, r9, #1
 800ac26:	7e23      	ldrb	r3, [r4, #24]
 800ac28:	fa5f f089 	uxtb.w	r0, r9
 800ac2c:	4283      	cmp	r3, r0
 800ac2e:	d8e6      	bhi.n	800abfe <uxr_flash_output_streams+0x1a>
 800ac30:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ac34:	b383      	cbz	r3, 800ac98 <uxr_flash_output_streams+0xb4>
 800ac36:	f04f 0900 	mov.w	r9, #0
 800ac3a:	f10d 0802 	add.w	r8, sp, #2
 800ac3e:	af03      	add	r7, sp, #12
 800ac40:	ae02      	add	r6, sp, #8
 800ac42:	4648      	mov	r0, r9
 800ac44:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ac48:	2201      	movs	r2, #1
 800ac4a:	2102      	movs	r1, #2
 800ac4c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ac50:	f000 ff06 	bl	800ba60 <uxr_stream_id>
 800ac54:	9001      	str	r0, [sp, #4]
 800ac56:	3520      	adds	r5, #32
 800ac58:	e00c      	b.n	800ac74 <uxr_flash_output_streams+0x90>
 800ac5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ac5e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ac62:	9b02      	ldr	r3, [sp, #8]
 800ac64:	f000 fe6e 	bl	800b944 <uxr_stamp_session_header>
 800ac68:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac6a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ac6e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800ac72:	47d0      	blx	sl
 800ac74:	4643      	mov	r3, r8
 800ac76:	463a      	mov	r2, r7
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f005 f928 	bl	800fed0 <uxr_prepare_next_reliable_buffer_to_send>
 800ac80:	4603      	mov	r3, r0
 800ac82:	4620      	mov	r0, r4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e8      	bne.n	800ac5a <uxr_flash_output_streams+0x76>
 800ac88:	f109 0901 	add.w	r9, r9, #1
 800ac8c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ac90:	fa5f f089 	uxtb.w	r0, r9
 800ac94:	4283      	cmp	r3, r0
 800ac96:	d8d5      	bhi.n	800ac44 <uxr_flash_output_streams+0x60>
 800ac98:	b004      	add	sp, #16
 800ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9e:	9b02      	ldr	r3, [sp, #8]
 800aca0:	4620      	mov	r0, r4
 800aca2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aca6:	f109 0901 	add.w	r9, r9, #1
 800acaa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800acae:	f000 fe49 	bl	800b944 <uxr_stamp_session_header>
 800acb2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800acb4:	9a03      	ldr	r2, [sp, #12]
 800acb6:	685d      	ldr	r5, [r3, #4]
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	9902      	ldr	r1, [sp, #8]
 800acbc:	47a8      	blx	r5
 800acbe:	7e23      	ldrb	r3, [r4, #24]
 800acc0:	fa5f f089 	uxtb.w	r0, r9
 800acc4:	4283      	cmp	r3, r0
 800acc6:	d89a      	bhi.n	800abfe <uxr_flash_output_streams+0x1a>
 800acc8:	e7b2      	b.n	800ac30 <uxr_flash_output_streams+0x4c>
 800acca:	bf00      	nop

0800accc <read_submessage_info>:
 800accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	460d      	mov	r5, r1
 800acd2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800acd6:	4606      	mov	r6, r0
 800acd8:	4669      	mov	r1, sp
 800acda:	4628      	mov	r0, r5
 800acdc:	f001 fef8 	bl	800cad0 <uxr_deserialize_BaseObjectReply>
 800ace0:	4604      	mov	r4, r0
 800ace2:	a902      	add	r1, sp, #8
 800ace4:	4628      	mov	r0, r5
 800ace6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800acea:	f7fd fde5 	bl	80088b8 <ucdr_deserialize_bool>
 800acee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800acf2:	4004      	ands	r4, r0
 800acf4:	b2e4      	uxtb	r4, r4
 800acf6:	b95b      	cbnz	r3, 800ad10 <read_submessage_info+0x44>
 800acf8:	a987      	add	r1, sp, #540	; 0x21c
 800acfa:	4628      	mov	r0, r5
 800acfc:	f7fd fddc 	bl	80088b8 <ucdr_deserialize_bool>
 800ad00:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800ad04:	4680      	mov	r8, r0
 800ad06:	b94b      	cbnz	r3, 800ad1c <read_submessage_info+0x50>
 800ad08:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	a903      	add	r1, sp, #12
 800ad12:	4628      	mov	r0, r5
 800ad14:	f001 fd88 	bl	800c828 <uxr_deserialize_ObjectVariant>
 800ad18:	4004      	ands	r4, r0
 800ad1a:	e7ed      	b.n	800acf8 <read_submessage_info+0x2c>
 800ad1c:	a988      	add	r1, sp, #544	; 0x220
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f7fd fdf8 	bl	8008914 <ucdr_deserialize_uint8_t>
 800ad24:	ea14 0f08 	tst.w	r4, r8
 800ad28:	d0ee      	beq.n	800ad08 <read_submessage_info+0x3c>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d0ec      	beq.n	800ad08 <read_submessage_info+0x3c>
 800ad2e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800ad32:	2b0d      	cmp	r3, #13
 800ad34:	d1e8      	bne.n	800ad08 <read_submessage_info+0x3c>
 800ad36:	a98a      	add	r1, sp, #552	; 0x228
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f7fe fb91 	bl	8009460 <ucdr_deserialize_int16_t>
 800ad3e:	b138      	cbz	r0, 800ad50 <read_submessage_info+0x84>
 800ad40:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dd06      	ble.n	800ad56 <read_submessage_info+0x8a>
 800ad48:	2f00      	cmp	r7, #0
 800ad4a:	bf14      	ite	ne
 800ad4c:	2001      	movne	r0, #1
 800ad4e:	2002      	moveq	r0, #2
 800ad50:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 800ad54:	e7d8      	b.n	800ad08 <read_submessage_info+0x3c>
 800ad56:	2000      	movs	r0, #0
 800ad58:	e7fa      	b.n	800ad50 <read_submessage_info+0x84>
 800ad5a:	bf00      	nop

0800ad5c <read_submessage_list>:
 800ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad60:	4604      	mov	r4, r0
 800ad62:	b097      	sub	sp, #92	; 0x5c
 800ad64:	460d      	mov	r5, r1
 800ad66:	4ec1      	ldr	r6, [pc, #772]	; (800b06c <read_submessage_list+0x310>)
 800ad68:	9209      	str	r2, [sp, #36]	; 0x24
 800ad6a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800ad6e:	aa0c      	add	r2, sp, #48	; 0x30
 800ad70:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 ffcb 	bl	800bd10 <uxr_read_submessage_header>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f000 8142 	beq.w	800b004 <read_submessage_list+0x2a8>
 800ad80:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800ad84:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800ad88:	3b02      	subs	r3, #2
 800ad8a:	2b0d      	cmp	r3, #13
 800ad8c:	d8ed      	bhi.n	800ad6a <read_submessage_list+0xe>
 800ad8e:	a101      	add	r1, pc, #4	; (adr r1, 800ad94 <read_submessage_list+0x38>)
 800ad90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad94:	0800affb 	.word	0x0800affb
 800ad98:	0800ad6b 	.word	0x0800ad6b
 800ad9c:	0800afeb 	.word	0x0800afeb
 800ada0:	0800af89 	.word	0x0800af89
 800ada4:	0800af7f 	.word	0x0800af7f
 800ada8:	0800ad6b 	.word	0x0800ad6b
 800adac:	0800ad6b 	.word	0x0800ad6b
 800adb0:	0800aed5 	.word	0x0800aed5
 800adb4:	0800ae67 	.word	0x0800ae67
 800adb8:	0800ae27 	.word	0x0800ae27
 800adbc:	0800ad6b 	.word	0x0800ad6b
 800adc0:	0800ad6b 	.word	0x0800ad6b
 800adc4:	0800ad6b 	.word	0x0800ad6b
 800adc8:	0800adcd 	.word	0x0800adcd
 800adcc:	a910      	add	r1, sp, #64	; 0x40
 800adce:	4628      	mov	r0, r5
 800add0:	f002 f8a6 	bl	800cf20 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800add4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800add8:	f1b8 0f00 	cmp.w	r8, #0
 800addc:	f000 811a 	beq.w	800b014 <read_submessage_list+0x2b8>
 800ade0:	f000 ffde 	bl	800bda0 <uxr_nanos>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800adec:	2100      	movs	r1, #0
 800adee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800adf0:	9006      	str	r0, [sp, #24]
 800adf2:	468c      	mov	ip, r1
 800adf4:	9815      	ldr	r0, [sp, #84]	; 0x54
 800adf6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800adfa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800adfc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800ae00:	468c      	mov	ip, r1
 800ae02:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ae04:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800ae08:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800ae0c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 800ae10:	fbc7 0106 	smlal	r0, r1, r7, r6
 800ae14:	e9cd 0100 	strd	r0, r1, [sp]
 800ae18:	4620      	mov	r0, r4
 800ae1a:	47c0      	blx	r8
 800ae1c:	f04f 0301 	mov.w	r3, #1
 800ae20:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800ae24:	e7a1      	b.n	800ad6a <read_submessage_list+0xe>
 800ae26:	a910      	add	r1, sp, #64	; 0x40
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f002 f865 	bl	800cef8 <uxr_deserialize_HEARTBEAT_Payload>
 800ae2e:	2100      	movs	r1, #0
 800ae30:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ae34:	f000 fe42 	bl	800babc <uxr_stream_id_from_raw>
 800ae38:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800ae3c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ae3e:	f104 0008 	add.w	r0, r4, #8
 800ae42:	4641      	mov	r1, r8
 800ae44:	f000 ff28 	bl	800bc98 <uxr_get_input_reliable_stream>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d08e      	beq.n	800ad6a <read_submessage_list+0xe>
 800ae4c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800ae50:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800ae54:	f004 fd82 	bl	800f95c <uxr_process_heartbeat>
 800ae58:	4642      	mov	r2, r8
 800ae5a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f7ff fdf6 	bl	800aa50 <write_submessage_acknack.isra.0>
 800ae64:	e781      	b.n	800ad6a <read_submessage_list+0xe>
 800ae66:	a910      	add	r1, sp, #64	; 0x40
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f002 f81d 	bl	800cea8 <uxr_deserialize_ACKNACK_Payload>
 800ae6e:	2100      	movs	r1, #0
 800ae70:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ae74:	f000 fe22 	bl	800babc <uxr_stream_id_from_raw>
 800ae78:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ae7c:	900d      	str	r0, [sp, #52]	; 0x34
 800ae7e:	f104 0008 	add.w	r0, r4, #8
 800ae82:	f000 fef3 	bl	800bc6c <uxr_get_output_reliable_stream>
 800ae86:	4680      	mov	r8, r0
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	f43f af6e 	beq.w	800ad6a <read_submessage_list+0xe>
 800ae8e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800ae92:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800ae96:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800ae9a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ae9e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800aea2:	b289      	uxth	r1, r1
 800aea4:	f005 f8bc 	bl	8010020 <uxr_process_acknack>
 800aea8:	4640      	mov	r0, r8
 800aeaa:	f005 f87d 	bl	800ffa8 <uxr_begin_output_nack_buffer_it>
 800aeae:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800aeb2:	e005      	b.n	800aec0 <read_submessage_list+0x164>
 800aeb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aeb6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800aeba:	e9d3 0900 	ldrd	r0, r9, [r3]
 800aebe:	47c8      	blx	r9
 800aec0:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800aec4:	aa0f      	add	r2, sp, #60	; 0x3c
 800aec6:	4651      	mov	r1, sl
 800aec8:	4640      	mov	r0, r8
 800aeca:	f005 f86f 	bl	800ffac <uxr_next_reliable_nack_buffer_to_send>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d1f0      	bne.n	800aeb4 <read_submessage_list+0x158>
 800aed2:	e74a      	b.n	800ad6a <read_submessage_list+0xe>
 800aed4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800aed8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800aedc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800aee0:	4628      	mov	r0, r5
 800aee2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800aee6:	4651      	mov	r1, sl
 800aee8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aeec:	f1a8 0804 	sub.w	r8, r8, #4
 800aef0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800aef4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800aef8:	fa1f f888 	uxth.w	r8, r8
 800aefc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800af00:	f009 090e 	and.w	r9, r9, #14
 800af04:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800af08:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800af0c:	f001 fd2e 	bl	800c96c <uxr_deserialize_BaseObjectRequest>
 800af10:	4650      	mov	r0, sl
 800af12:	a90f      	add	r1, sp, #60	; 0x3c
 800af14:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800af18:	f000 fd90 	bl	800ba3c <uxr_parse_base_object_request>
 800af1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af1e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800af22:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800af26:	9110      	str	r1, [sp, #64]	; 0x40
 800af28:	f1bb 0f00 	cmp.w	fp, #0
 800af2c:	d006      	beq.n	800af3c <read_submessage_list+0x1e0>
 800af2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800af32:	4652      	mov	r2, sl
 800af34:	4620      	mov	r0, r4
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	2300      	movs	r3, #0
 800af3a:	47d8      	blx	fp
 800af3c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800af3e:	b182      	cbz	r2, 800af62 <read_submessage_list+0x206>
 800af40:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800af42:	f04f 0c00 	mov.w	ip, #0
 800af46:	3902      	subs	r1, #2
 800af48:	e003      	b.n	800af52 <read_submessage_list+0x1f6>
 800af4a:	f10c 0c01 	add.w	ip, ip, #1
 800af4e:	4594      	cmp	ip, r2
 800af50:	d007      	beq.n	800af62 <read_submessage_list+0x206>
 800af52:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800af56:	4553      	cmp	r3, sl
 800af58:	d1f7      	bne.n	800af4a <read_submessage_list+0x1ee>
 800af5a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800af5c:	2200      	movs	r2, #0
 800af5e:	f803 200c 	strb.w	r2, [r3, ip]
 800af62:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800af66:	464b      	mov	r3, r9
 800af68:	4642      	mov	r2, r8
 800af6a:	4620      	mov	r0, r4
 800af6c:	9102      	str	r1, [sp, #8]
 800af6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af70:	9101      	str	r1, [sp, #4]
 800af72:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af74:	9100      	str	r1, [sp, #0]
 800af76:	4629      	mov	r1, r5
 800af78:	f005 f8da 	bl	8010130 <read_submessage_format>
 800af7c:	e6f5      	b.n	800ad6a <read_submessage_list+0xe>
 800af7e:	4629      	mov	r1, r5
 800af80:	4620      	mov	r0, r4
 800af82:	f7ff fea3 	bl	800accc <read_submessage_info>
 800af86:	e6f0      	b.n	800ad6a <read_submessage_list+0xe>
 800af88:	2a00      	cmp	r2, #0
 800af8a:	d03e      	beq.n	800b00a <read_submessage_list+0x2ae>
 800af8c:	a910      	add	r1, sp, #64	; 0x40
 800af8e:	4628      	mov	r0, r5
 800af90:	f001 fee2 	bl	800cd58 <uxr_deserialize_STATUS_Payload>
 800af94:	a90e      	add	r1, sp, #56	; 0x38
 800af96:	aa0d      	add	r2, sp, #52	; 0x34
 800af98:	a810      	add	r0, sp, #64	; 0x40
 800af9a:	f000 fd4f 	bl	800ba3c <uxr_parse_base_object_request>
 800af9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afa0:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800afa4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800afa8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800afac:	910f      	str	r1, [sp, #60]	; 0x3c
 800afae:	f1ba 0f00 	cmp.w	sl, #0
 800afb2:	d006      	beq.n	800afc2 <read_submessage_list+0x266>
 800afb4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800afb8:	4642      	mov	r2, r8
 800afba:	4620      	mov	r0, r4
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	464b      	mov	r3, r9
 800afc0:	47d0      	blx	sl
 800afc2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	f43f aed0 	beq.w	800ad6a <read_submessage_list+0xe>
 800afca:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800afcc:	2100      	movs	r1, #0
 800afce:	3802      	subs	r0, #2
 800afd0:	e003      	b.n	800afda <read_submessage_list+0x27e>
 800afd2:	3101      	adds	r1, #1
 800afd4:	4291      	cmp	r1, r2
 800afd6:	f43f aec8 	beq.w	800ad6a <read_submessage_list+0xe>
 800afda:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800afde:	4543      	cmp	r3, r8
 800afe0:	d1f7      	bne.n	800afd2 <read_submessage_list+0x276>
 800afe2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800afe4:	f803 9001 	strb.w	r9, [r3, r1]
 800afe8:	e6bf      	b.n	800ad6a <read_submessage_list+0xe>
 800afea:	2a00      	cmp	r2, #0
 800afec:	f47f aebd 	bne.w	800ad6a <read_submessage_list+0xe>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 fc66 	bl	800b8c4 <uxr_read_create_session_status>
 800aff8:	e6b7      	b.n	800ad6a <read_submessage_list+0xe>
 800affa:	4629      	mov	r1, r5
 800affc:	4620      	mov	r0, r4
 800affe:	f7ff fcf1 	bl	800a9e4 <read_submessage_get_info>
 800b002:	e6b2      	b.n	800ad6a <read_submessage_list+0xe>
 800b004:	b017      	add	sp, #92	; 0x5c
 800b006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00a:	4629      	mov	r1, r5
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 fc67 	bl	800b8e0 <uxr_read_delete_session_status>
 800b012:	e6aa      	b.n	800ad6a <read_submessage_list+0xe>
 800b014:	f000 fec4 	bl	800bda0 <uxr_nanos>
 800b018:	4642      	mov	r2, r8
 800b01a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b01e:	fbc7 3206 	smlal	r3, r2, r7, r6
 800b022:	1818      	adds	r0, r3, r0
 800b024:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b026:	eb42 0101 	adc.w	r1, r2, r1
 800b02a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b02c:	4642      	mov	r2, r8
 800b02e:	fbc7 3206 	smlal	r3, r2, r7, r6
 800b032:	469c      	mov	ip, r3
 800b034:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 800b038:	fbc3 7806 	smlal	r7, r8, r3, r6
 800b03c:	4643      	mov	r3, r8
 800b03e:	eb1c 0c07 	adds.w	ip, ip, r7
 800b042:	eb42 0203 	adc.w	r2, r2, r3
 800b046:	ebb0 030c 	subs.w	r3, r0, ip
 800b04a:	eb61 0202 	sbc.w	r2, r1, r2
 800b04e:	2a00      	cmp	r2, #0
 800b050:	db08      	blt.n	800b064 <read_submessage_list+0x308>
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800b058:	1052      	asrs	r2, r2, #1
 800b05a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800b05e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 800b062:	e6db      	b.n	800ae1c <read_submessage_list+0xc0>
 800b064:	3301      	adds	r3, #1
 800b066:	f142 0200 	adc.w	r2, r2, #0
 800b06a:	e7f2      	b.n	800b052 <read_submessage_list+0x2f6>
 800b06c:	3b9aca00 	.word	0x3b9aca00

0800b070 <listen_message_reliably>:
 800b070:	1e0b      	subs	r3, r1, #0
 800b072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b076:	bfb8      	it	lt
 800b078:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800b07c:	b09d      	sub	sp, #116	; 0x74
 800b07e:	4680      	mov	r8, r0
 800b080:	9305      	str	r3, [sp, #20]
 800b082:	f000 fe71 	bl	800bd68 <uxr_millis>
 800b086:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800b08a:	4681      	mov	r9, r0
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	f000 809a 	beq.w	800b1c6 <listen_message_reliably+0x156>
 800b092:	2600      	movs	r6, #0
 800b094:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b098:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b09c:	460f      	mov	r7, r1
 800b09e:	4630      	mov	r0, r6
 800b0a0:	9303      	str	r3, [sp, #12]
 800b0a2:	e00e      	b.n	800b0c2 <listen_message_reliably+0x52>
 800b0a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0a6:	3601      	adds	r6, #1
 800b0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0aa:	455a      	cmp	r2, fp
 800b0ac:	9903      	ldr	r1, [sp, #12]
 800b0ae:	b2f0      	uxtb	r0, r6
 800b0b0:	eb73 0101 	sbcs.w	r1, r3, r1
 800b0b4:	da01      	bge.n	800b0ba <listen_message_reliably+0x4a>
 800b0b6:	4693      	mov	fp, r2
 800b0b8:	9303      	str	r3, [sp, #12]
 800b0ba:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b0be:	4283      	cmp	r3, r0
 800b0c0:	d95f      	bls.n	800b182 <listen_message_reliably+0x112>
 800b0c2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	00e4      	lsls	r4, r4, #3
 800b0cc:	f000 fcc8 	bl	800ba60 <uxr_stream_id>
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	f104 0520 	add.w	r5, r4, #32
 800b0d6:	463b      	mov	r3, r7
 800b0d8:	464a      	mov	r2, r9
 800b0da:	9109      	str	r1, [sp, #36]	; 0x24
 800b0dc:	4445      	add	r5, r8
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f004 ff36 	bl	800ff50 <uxr_update_output_stream_heartbeat_timestamp>
 800b0e4:	eb08 0304 	add.w	r3, r8, r4
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d0db      	beq.n	800b0a4 <listen_message_reliably+0x34>
 800b0ec:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800b0f0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800b0f4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	3501      	adds	r5, #1
 800b0fc:	4444      	add	r4, r8
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	f000 fc74 	bl	800b9ec <uxr_session_header_offset>
 800b104:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b108:	2300      	movs	r3, #0
 800b10a:	2211      	movs	r2, #17
 800b10c:	a90c      	add	r1, sp, #48	; 0x30
 800b10e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800b112:	9000      	str	r0, [sp, #0]
 800b114:	4650      	mov	r0, sl
 800b116:	3601      	adds	r6, #1
 800b118:	f7fe fae8 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800b11c:	2300      	movs	r3, #0
 800b11e:	2205      	movs	r2, #5
 800b120:	210b      	movs	r1, #11
 800b122:	4650      	mov	r0, sl
 800b124:	f000 fdda 	bl	800bcdc <uxr_buffer_submessage_header>
 800b128:	2101      	movs	r1, #1
 800b12a:	8968      	ldrh	r0, [r5, #10]
 800b12c:	f005 f8ca 	bl	80102c4 <uxr_seq_num_add>
 800b130:	892b      	ldrh	r3, [r5, #8]
 800b132:	4602      	mov	r2, r0
 800b134:	a90a      	add	r1, sp, #40	; 0x28
 800b136:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800b13a:	4650      	mov	r0, sl
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800b142:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800b146:	f001 fec3 	bl	800ced0 <uxr_serialize_HEARTBEAT_Payload>
 800b14a:	2200      	movs	r2, #0
 800b14c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b14e:	4640      	mov	r0, r8
 800b150:	4611      	mov	r1, r2
 800b152:	f000 fbf7 	bl	800b944 <uxr_stamp_session_header>
 800b156:	4650      	mov	r0, sl
 800b158:	f7fe fb08 	bl	800976c <ucdr_buffer_length>
 800b15c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b160:	4602      	mov	r2, r0
 800b162:	a90c      	add	r1, sp, #48	; 0x30
 800b164:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b168:	47a8      	blx	r5
 800b16a:	9903      	ldr	r1, [sp, #12]
 800b16c:	b2f0      	uxtb	r0, r6
 800b16e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800b172:	455a      	cmp	r2, fp
 800b174:	eb73 0101 	sbcs.w	r1, r3, r1
 800b178:	db9d      	blt.n	800b0b6 <listen_message_reliably+0x46>
 800b17a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800b17e:	4283      	cmp	r3, r0
 800b180:	d89f      	bhi.n	800b0c2 <listen_message_reliably+0x52>
 800b182:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b186:	9a03      	ldr	r2, [sp, #12]
 800b188:	429a      	cmp	r2, r3
 800b18a:	bf08      	it	eq
 800b18c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800b190:	d019      	beq.n	800b1c6 <listen_message_reliably+0x156>
 800b192:	ebab 0309 	sub.w	r3, fp, r9
 800b196:	2b00      	cmp	r3, #0
 800b198:	9d05      	ldr	r5, [sp, #20]
 800b19a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 800b19e:	aa08      	add	r2, sp, #32
 800b1a0:	bf08      	it	eq
 800b1a2:	2301      	moveq	r3, #1
 800b1a4:	a907      	add	r1, sp, #28
 800b1a6:	6884      	ldr	r4, [r0, #8]
 800b1a8:	429d      	cmp	r5, r3
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	bfa8      	it	ge
 800b1ae:	461d      	movge	r5, r3
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	47a0      	blx	r4
 800b1b4:	b948      	cbnz	r0, 800b1ca <listen_message_reliably+0x15a>
 800b1b6:	9b05      	ldr	r3, [sp, #20]
 800b1b8:	1b5b      	subs	r3, r3, r5
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	f73f af60 	bgt.w	800b082 <listen_message_reliably+0x12>
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	e012      	b.n	800b1ec <listen_message_reliably+0x17c>
 800b1c6:	9b05      	ldr	r3, [sp, #20]
 800b1c8:	e7e5      	b.n	800b196 <listen_message_reliably+0x126>
 800b1ca:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	2500      	movs	r5, #0
 800b1d2:	a80c      	add	r0, sp, #48	; 0x30
 800b1d4:	f7fe fa9c 	bl	8009710 <ucdr_init_buffer>
 800b1d8:	f10d 031a 	add.w	r3, sp, #26
 800b1dc:	aa06      	add	r2, sp, #24
 800b1de:	a90c      	add	r1, sp, #48	; 0x30
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	f88d 5018 	strb.w	r5, [sp, #24]
 800b1e6:	f000 fbc1 	bl	800b96c <uxr_read_session_header>
 800b1ea:	b918      	cbnz	r0, 800b1f4 <listen_message_reliably+0x184>
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	b01d      	add	sp, #116	; 0x74
 800b1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b1fa:	f000 fc5f 	bl	800babc <uxr_stream_id_from_raw>
 800b1fe:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b202:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800b206:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b20a:	2e01      	cmp	r6, #1
 800b20c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800b210:	d04b      	beq.n	800b2aa <listen_message_reliably+0x23a>
 800b212:	2e02      	cmp	r6, #2
 800b214:	d00f      	beq.n	800b236 <listen_message_reliably+0x1c6>
 800b216:	2e00      	cmp	r6, #0
 800b218:	d1e8      	bne.n	800b1ec <listen_message_reliably+0x17c>
 800b21a:	4631      	mov	r1, r6
 800b21c:	4630      	mov	r0, r6
 800b21e:	f000 fc4d 	bl	800babc <uxr_stream_id_from_raw>
 800b222:	4602      	mov	r2, r0
 800b224:	a90c      	add	r1, sp, #48	; 0x30
 800b226:	4640      	mov	r0, r8
 800b228:	920a      	str	r2, [sp, #40]	; 0x28
 800b22a:	f7ff fd97 	bl	800ad5c <read_submessage_list>
 800b22e:	4620      	mov	r0, r4
 800b230:	b01d      	add	sp, #116	; 0x74
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	4629      	mov	r1, r5
 800b238:	f108 0008 	add.w	r0, r8, #8
 800b23c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800b240:	f000 fd2a 	bl	800bc98 <uxr_get_input_reliable_stream>
 800b244:	4607      	mov	r7, r0
 800b246:	b338      	cbz	r0, 800b298 <listen_message_reliably+0x228>
 800b248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b24a:	a80c      	add	r0, sp, #48	; 0x30
 800b24c:	9203      	str	r2, [sp, #12]
 800b24e:	f7fe fa91 	bl	8009774 <ucdr_buffer_remaining>
 800b252:	4603      	mov	r3, r0
 800b254:	f10d 0019 	add.w	r0, sp, #25
 800b258:	9a03      	ldr	r2, [sp, #12]
 800b25a:	4651      	mov	r1, sl
 800b25c:	9000      	str	r0, [sp, #0]
 800b25e:	4638      	mov	r0, r7
 800b260:	f004 fa80 	bl	800f764 <uxr_receive_reliable_message>
 800b264:	b1c0      	cbz	r0, 800b298 <listen_message_reliably+0x228>
 800b266:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b26a:	b393      	cbz	r3, 800b2d2 <listen_message_reliably+0x262>
 800b26c:	ae14      	add	r6, sp, #80	; 0x50
 800b26e:	f04f 0a02 	mov.w	sl, #2
 800b272:	e00a      	b.n	800b28a <listen_message_reliably+0x21a>
 800b274:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800b278:	4631      	mov	r1, r6
 800b27a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800b27e:	4640      	mov	r0, r8
 800b280:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800b284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b286:	f7ff fd69 	bl	800ad5c <read_submessage_list>
 800b28a:	2204      	movs	r2, #4
 800b28c:	4631      	mov	r1, r6
 800b28e:	4638      	mov	r0, r7
 800b290:	f004 faea 	bl	800f868 <uxr_next_input_reliable_buffer_available>
 800b294:	2800      	cmp	r0, #0
 800b296:	d1ed      	bne.n	800b274 <listen_message_reliably+0x204>
 800b298:	4640      	mov	r0, r8
 800b29a:	462a      	mov	r2, r5
 800b29c:	4649      	mov	r1, r9
 800b29e:	f7ff fbd7 	bl	800aa50 <write_submessage_acknack.isra.0>
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	b01d      	add	sp, #116	; 0x74
 800b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	f108 0008 	add.w	r0, r8, #8
 800b2b0:	f000 fce8 	bl	800bc84 <uxr_get_input_best_effort_stream>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d099      	beq.n	800b1ec <listen_message_reliably+0x17c>
 800b2b8:	4651      	mov	r1, sl
 800b2ba:	f004 f9c9 	bl	800f650 <uxr_receive_best_effort_message>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d094      	beq.n	800b1ec <listen_message_reliably+0x17c>
 800b2c2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b2c6:	a90c      	add	r1, sp, #48	; 0x30
 800b2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	f7ff fd46 	bl	800ad5c <read_submessage_list>
 800b2d0:	e78c      	b.n	800b1ec <listen_message_reliably+0x17c>
 800b2d2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b2d6:	a90c      	add	r1, sp, #48	; 0x30
 800b2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2da:	4640      	mov	r0, r8
 800b2dc:	f7ff fd3e 	bl	800ad5c <read_submessage_list>
 800b2e0:	e7c4      	b.n	800b26c <listen_message_reliably+0x1fc>
 800b2e2:	bf00      	nop

0800b2e4 <uxr_run_session_until_confirm_delivery>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	f000 fd3c 	bl	800bd68 <uxr_millis>
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f106 0808 	add.w	r8, r6, #8
 800b2f8:	f7ff fc74 	bl	800abe4 <uxr_flash_output_streams>
 800b2fc:	2d00      	cmp	r5, #0
 800b2fe:	db10      	blt.n	800b322 <uxr_run_session_until_confirm_delivery+0x3e>
 800b300:	462c      	mov	r4, r5
 800b302:	e006      	b.n	800b312 <uxr_run_session_until_confirm_delivery+0x2e>
 800b304:	f7ff feb4 	bl	800b070 <listen_message_reliably>
 800b308:	f000 fd2e 	bl	800bd68 <uxr_millis>
 800b30c:	1bc3      	subs	r3, r0, r7
 800b30e:	1aec      	subs	r4, r5, r3
 800b310:	d407      	bmi.n	800b322 <uxr_run_session_until_confirm_delivery+0x3e>
 800b312:	4640      	mov	r0, r8
 800b314:	f000 fccc 	bl	800bcb0 <uxr_output_streams_confirmed>
 800b318:	4603      	mov	r3, r0
 800b31a:	4621      	mov	r1, r4
 800b31c:	4630      	mov	r0, r6
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0f0      	beq.n	800b304 <uxr_run_session_until_confirm_delivery+0x20>
 800b322:	4640      	mov	r0, r8
 800b324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b328:	f000 bcc2 	b.w	800bcb0 <uxr_output_streams_confirmed>

0800b32c <uxr_run_session_until_all_status>:
 800b32c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b330:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b334:	4606      	mov	r6, r0
 800b336:	4688      	mov	r8, r1
 800b338:	4692      	mov	sl, r2
 800b33a:	461f      	mov	r7, r3
 800b33c:	f7ff fc52 	bl	800abe4 <uxr_flash_output_streams>
 800b340:	f1bb 0f00 	cmp.w	fp, #0
 800b344:	d004      	beq.n	800b350 <uxr_run_session_until_all_status+0x24>
 800b346:	465a      	mov	r2, fp
 800b348:	21ff      	movs	r1, #255	; 0xff
 800b34a:	4638      	mov	r0, r7
 800b34c:	f006 fb36 	bl	80119bc <memset>
 800b350:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800b354:	1e7d      	subs	r5, r7, #1
 800b356:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 800b35a:	f000 fd05 	bl	800bd68 <uxr_millis>
 800b35e:	4641      	mov	r1, r8
 800b360:	4681      	mov	r9, r0
 800b362:	4630      	mov	r0, r6
 800b364:	f7ff fe84 	bl	800b070 <listen_message_reliably>
 800b368:	f000 fcfe 	bl	800bd68 <uxr_millis>
 800b36c:	eba0 0009 	sub.w	r0, r0, r9
 800b370:	eba8 0100 	sub.w	r1, r8, r0
 800b374:	f1bb 0f00 	cmp.w	fp, #0
 800b378:	d029      	beq.n	800b3ce <uxr_run_session_until_all_status+0xa2>
 800b37a:	46ae      	mov	lr, r5
 800b37c:	f04f 0c00 	mov.w	ip, #0
 800b380:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800b384:	2cff      	cmp	r4, #255	; 0xff
 800b386:	d015      	beq.n	800b3b4 <uxr_run_session_until_all_status+0x88>
 800b388:	f10c 0c01 	add.w	ip, ip, #1
 800b38c:	45e3      	cmp	fp, ip
 800b38e:	d8f7      	bhi.n	800b380 <uxr_run_session_until_all_status+0x54>
 800b390:	2300      	movs	r3, #0
 800b392:	67f3      	str	r3, [r6, #124]	; 0x7c
 800b394:	e000      	b.n	800b398 <uxr_run_session_until_all_status+0x6c>
 800b396:	b158      	cbz	r0, 800b3b0 <uxr_run_session_until_all_status+0x84>
 800b398:	462b      	mov	r3, r5
 800b39a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800b39e:	3302      	adds	r3, #2
 800b3a0:	2801      	cmp	r0, #1
 800b3a2:	eba3 0307 	sub.w	r3, r3, r7
 800b3a6:	bf8c      	ite	hi
 800b3a8:	2000      	movhi	r0, #0
 800b3aa:	2001      	movls	r0, #1
 800b3ac:	459b      	cmp	fp, r3
 800b3ae:	d8f2      	bhi.n	800b396 <uxr_run_session_until_all_status+0x6a>
 800b3b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800b3b8:	f10c 0c01 	add.w	ip, ip, #1
 800b3bc:	45dc      	cmp	ip, fp
 800b3be:	d201      	bcs.n	800b3c4 <uxr_run_session_until_all_status+0x98>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d0dd      	beq.n	800b380 <uxr_run_session_until_all_status+0x54>
 800b3c4:	2900      	cmp	r1, #0
 800b3c6:	dde3      	ble.n	800b390 <uxr_run_session_until_all_status+0x64>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1ca      	bne.n	800b362 <uxr_run_session_until_all_status+0x36>
 800b3cc:	e7e0      	b.n	800b390 <uxr_run_session_until_all_status+0x64>
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800b3d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3d8 <wait_session_status>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	4604      	mov	r4, r0
 800b3de:	b09d      	sub	sp, #116	; 0x74
 800b3e0:	20ff      	movs	r0, #255	; 0xff
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	7160      	strb	r0, [r4, #5]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 80b6 	beq.w	800b558 <wait_session_status+0x180>
 800b3ec:	4689      	mov	r9, r1
 800b3ee:	4692      	mov	sl, r2
 800b3f0:	f04f 0b00 	mov.w	fp, #0
 800b3f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b3fe:	47a8      	blx	r5
 800b400:	f000 fcb2 	bl	800bd68 <uxr_millis>
 800b404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b408:	4605      	mov	r5, r0
 800b40a:	e009      	b.n	800b420 <wait_session_status+0x48>
 800b40c:	f000 fcac 	bl	800bd68 <uxr_millis>
 800b410:	1b40      	subs	r0, r0, r5
 800b412:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd40      	ble.n	800b49c <wait_session_status+0xc4>
 800b41a:	7960      	ldrb	r0, [r4, #5]
 800b41c:	28ff      	cmp	r0, #255	; 0xff
 800b41e:	d145      	bne.n	800b4ac <wait_session_status+0xd4>
 800b420:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b422:	a908      	add	r1, sp, #32
 800b424:	6896      	ldr	r6, [r2, #8]
 800b426:	6810      	ldr	r0, [r2, #0]
 800b428:	aa09      	add	r2, sp, #36	; 0x24
 800b42a:	47b0      	blx	r6
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d0ed      	beq.n	800b40c <wait_session_status+0x34>
 800b430:	a80c      	add	r0, sp, #48	; 0x30
 800b432:	2600      	movs	r6, #0
 800b434:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b438:	f7fe f96a 	bl	8009710 <ucdr_init_buffer>
 800b43c:	f10d 031e 	add.w	r3, sp, #30
 800b440:	aa07      	add	r2, sp, #28
 800b442:	a90c      	add	r1, sp, #48	; 0x30
 800b444:	4620      	mov	r0, r4
 800b446:	f88d 601c 	strb.w	r6, [sp, #28]
 800b44a:	f000 fa8f 	bl	800b96c <uxr_read_session_header>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d0dc      	beq.n	800b40c <wait_session_status+0x34>
 800b452:	4631      	mov	r1, r6
 800b454:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b458:	f000 fb30 	bl	800babc <uxr_stream_id_from_raw>
 800b45c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b460:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b464:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b468:	2f01      	cmp	r7, #1
 800b46a:	9302      	str	r3, [sp, #8]
 800b46c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800b470:	d05c      	beq.n	800b52c <wait_session_status+0x154>
 800b472:	2f02      	cmp	r7, #2
 800b474:	d020      	beq.n	800b4b8 <wait_session_status+0xe0>
 800b476:	2f00      	cmp	r7, #0
 800b478:	d1c8      	bne.n	800b40c <wait_session_status+0x34>
 800b47a:	4639      	mov	r1, r7
 800b47c:	4638      	mov	r0, r7
 800b47e:	f000 fb1d 	bl	800babc <uxr_stream_id_from_raw>
 800b482:	a90c      	add	r1, sp, #48	; 0x30
 800b484:	4602      	mov	r2, r0
 800b486:	900b      	str	r0, [sp, #44]	; 0x2c
 800b488:	4620      	mov	r0, r4
 800b48a:	f7ff fc67 	bl	800ad5c <read_submessage_list>
 800b48e:	f000 fc6b 	bl	800bd68 <uxr_millis>
 800b492:	1b40      	subs	r0, r0, r5
 800b494:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dcbe      	bgt.n	800b41a <wait_session_status+0x42>
 800b49c:	f10b 0b01 	add.w	fp, fp, #1
 800b4a0:	9b03      	ldr	r3, [sp, #12]
 800b4a2:	7960      	ldrb	r0, [r4, #5]
 800b4a4:	455b      	cmp	r3, fp
 800b4a6:	d001      	beq.n	800b4ac <wait_session_status+0xd4>
 800b4a8:	28ff      	cmp	r0, #255	; 0xff
 800b4aa:	d0a3      	beq.n	800b3f4 <wait_session_status+0x1c>
 800b4ac:	38ff      	subs	r0, #255	; 0xff
 800b4ae:	bf18      	it	ne
 800b4b0:	2001      	movne	r0, #1
 800b4b2:	b01d      	add	sp, #116	; 0x74
 800b4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800b4bc:	4631      	mov	r1, r6
 800b4be:	f104 0008 	add.w	r0, r4, #8
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	f000 fbe8 	bl	800bc98 <uxr_get_input_reliable_stream>
 800b4c8:	4680      	mov	r8, r0
 800b4ca:	b348      	cbz	r0, 800b520 <wait_session_status+0x148>
 800b4cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4ce:	a80c      	add	r0, sp, #48	; 0x30
 800b4d0:	9205      	str	r2, [sp, #20]
 800b4d2:	f7fe f94f 	bl	8009774 <ucdr_buffer_remaining>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f10d 001d 	add.w	r0, sp, #29
 800b4dc:	9a05      	ldr	r2, [sp, #20]
 800b4de:	9000      	str	r0, [sp, #0]
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	9902      	ldr	r1, [sp, #8]
 800b4e4:	f004 f93e 	bl	800f764 <uxr_receive_reliable_message>
 800b4e8:	b1d0      	cbz	r0, 800b520 <wait_session_status+0x148>
 800b4ea:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d03a      	beq.n	800b568 <wait_session_status+0x190>
 800b4f2:	9f04      	ldr	r7, [sp, #16]
 800b4f4:	e00a      	b.n	800b50c <wait_session_status+0x134>
 800b4f6:	f04f 0302 	mov.w	r3, #2
 800b4fa:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800b4fe:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800b502:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800b506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b508:	f7ff fc28 	bl	800ad5c <read_submessage_list>
 800b50c:	a914      	add	r1, sp, #80	; 0x50
 800b50e:	2204      	movs	r2, #4
 800b510:	4640      	mov	r0, r8
 800b512:	f004 f9a9 	bl	800f868 <uxr_next_input_reliable_buffer_available>
 800b516:	4603      	mov	r3, r0
 800b518:	a914      	add	r1, sp, #80	; 0x50
 800b51a:	4620      	mov	r0, r4
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1ea      	bne.n	800b4f6 <wait_session_status+0x11e>
 800b520:	4632      	mov	r2, r6
 800b522:	9904      	ldr	r1, [sp, #16]
 800b524:	4620      	mov	r0, r4
 800b526:	f7ff fa93 	bl	800aa50 <write_submessage_acknack.isra.0>
 800b52a:	e76f      	b.n	800b40c <wait_session_status+0x34>
 800b52c:	4631      	mov	r1, r6
 800b52e:	f104 0008 	add.w	r0, r4, #8
 800b532:	f000 fba7 	bl	800bc84 <uxr_get_input_best_effort_stream>
 800b536:	2800      	cmp	r0, #0
 800b538:	f43f af68 	beq.w	800b40c <wait_session_status+0x34>
 800b53c:	9902      	ldr	r1, [sp, #8]
 800b53e:	f004 f887 	bl	800f650 <uxr_receive_best_effort_message>
 800b542:	2800      	cmp	r0, #0
 800b544:	f43f af62 	beq.w	800b40c <wait_session_status+0x34>
 800b548:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800b54c:	a90c      	add	r1, sp, #48	; 0x30
 800b54e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b550:	4620      	mov	r0, r4
 800b552:	f7ff fc03 	bl	800ad5c <read_submessage_list>
 800b556:	e759      	b.n	800b40c <wait_session_status+0x34>
 800b558:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b55a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b55e:	47a0      	blx	r4
 800b560:	2001      	movs	r0, #1
 800b562:	b01d      	add	sp, #116	; 0x74
 800b564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b568:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800b56c:	a90c      	add	r1, sp, #48	; 0x30
 800b56e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b570:	4620      	mov	r0, r4
 800b572:	f7ff fbf3 	bl	800ad5c <read_submessage_list>
 800b576:	e7bc      	b.n	800b4f2 <wait_session_status+0x11a>

0800b578 <uxr_delete_session_retries>:
 800b578:	b530      	push	{r4, r5, lr}
 800b57a:	b08f      	sub	sp, #60	; 0x3c
 800b57c:	4604      	mov	r4, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	f000 fa34 	bl	800b9ec <uxr_session_header_offset>
 800b584:	2300      	movs	r3, #0
 800b586:	2210      	movs	r2, #16
 800b588:	a902      	add	r1, sp, #8
 800b58a:	9000      	str	r0, [sp, #0]
 800b58c:	a806      	add	r0, sp, #24
 800b58e:	f7fe f8ad 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800b592:	a906      	add	r1, sp, #24
 800b594:	4620      	mov	r0, r4
 800b596:	f000 f979 	bl	800b88c <uxr_buffer_delete_session>
 800b59a:	2200      	movs	r2, #0
 800b59c:	9b06      	ldr	r3, [sp, #24]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	f000 f9cf 	bl	800b944 <uxr_stamp_session_header>
 800b5a6:	a806      	add	r0, sp, #24
 800b5a8:	f7fe f8e0 	bl	800976c <ucdr_buffer_length>
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	a902      	add	r1, sp, #8
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f7ff ff10 	bl	800b3d8 <wait_session_status>
 800b5b8:	b118      	cbz	r0, 800b5c2 <uxr_delete_session_retries+0x4a>
 800b5ba:	7960      	ldrb	r0, [r4, #5]
 800b5bc:	fab0 f080 	clz	r0, r0
 800b5c0:	0940      	lsrs	r0, r0, #5
 800b5c2:	b00f      	add	sp, #60	; 0x3c
 800b5c4:	bd30      	pop	{r4, r5, pc}
 800b5c6:	bf00      	nop

0800b5c8 <uxr_create_session>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	f100 0b08 	add.w	fp, r0, #8
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	b0ab      	sub	sp, #172	; 0xac
 800b5d4:	4658      	mov	r0, fp
 800b5d6:	465e      	mov	r6, fp
 800b5d8:	f000 faa6 	bl	800bb28 <uxr_reset_stream_storage>
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 fa05 	bl	800b9ec <uxr_session_header_offset>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	221c      	movs	r2, #28
 800b5e6:	a90b      	add	r1, sp, #44	; 0x2c
 800b5e8:	9000      	str	r0, [sp, #0]
 800b5ea:	a812      	add	r0, sp, #72	; 0x48
 800b5ec:	f7fe f87e 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800b5f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b5f2:	a912      	add	r1, sp, #72	; 0x48
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	8a1a      	ldrh	r2, [r3, #16]
 800b5f8:	3a04      	subs	r2, #4
 800b5fa:	b292      	uxth	r2, r2
 800b5fc:	f000 f91c 	bl	800b838 <uxr_buffer_create_session>
 800b600:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b602:	4620      	mov	r0, r4
 800b604:	f000 f98a 	bl	800b91c <uxr_stamp_create_session_header>
 800b608:	a812      	add	r0, sp, #72	; 0x48
 800b60a:	f7fe f8af 	bl	800976c <ucdr_buffer_length>
 800b60e:	23ff      	movs	r3, #255	; 0xff
 800b610:	4681      	mov	r9, r0
 800b612:	7163      	strb	r3, [r4, #5]
 800b614:	230a      	movs	r3, #10
 800b616:	9303      	str	r3, [sp, #12]
 800b618:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b61a:	464a      	mov	r2, r9
 800b61c:	a90b      	add	r1, sp, #44	; 0x2c
 800b61e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b622:	47a8      	blx	r5
 800b624:	f000 fba0 	bl	800bd68 <uxr_millis>
 800b628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b62c:	4605      	mov	r5, r0
 800b62e:	e009      	b.n	800b644 <uxr_create_session+0x7c>
 800b630:	f000 fb9a 	bl	800bd68 <uxr_millis>
 800b634:	1b40      	subs	r0, r0, r5
 800b636:	7962      	ldrb	r2, [r4, #5]
 800b638:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dd38      	ble.n	800b6b2 <uxr_create_session+0xea>
 800b640:	2aff      	cmp	r2, #255	; 0xff
 800b642:	d13c      	bne.n	800b6be <uxr_create_session+0xf6>
 800b644:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b646:	a907      	add	r1, sp, #28
 800b648:	6897      	ldr	r7, [r2, #8]
 800b64a:	6810      	ldr	r0, [r2, #0]
 800b64c:	aa08      	add	r2, sp, #32
 800b64e:	47b8      	blx	r7
 800b650:	2800      	cmp	r0, #0
 800b652:	d0ed      	beq.n	800b630 <uxr_create_session+0x68>
 800b654:	a81a      	add	r0, sp, #104	; 0x68
 800b656:	2700      	movs	r7, #0
 800b658:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b65c:	f7fe f858 	bl	8009710 <ucdr_init_buffer>
 800b660:	f10d 031a 	add.w	r3, sp, #26
 800b664:	aa06      	add	r2, sp, #24
 800b666:	a91a      	add	r1, sp, #104	; 0x68
 800b668:	4620      	mov	r0, r4
 800b66a:	f88d 7018 	strb.w	r7, [sp, #24]
 800b66e:	f000 f97d 	bl	800b96c <uxr_read_session_header>
 800b672:	2800      	cmp	r0, #0
 800b674:	d0dc      	beq.n	800b630 <uxr_create_session+0x68>
 800b676:	4639      	mov	r1, r7
 800b678:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b67c:	f000 fa1e 	bl	800babc <uxr_stream_id_from_raw>
 800b680:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b684:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800b688:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800b68c:	2f01      	cmp	r7, #1
 800b68e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800b692:	d053      	beq.n	800b73c <uxr_create_session+0x174>
 800b694:	2f02      	cmp	r7, #2
 800b696:	d018      	beq.n	800b6ca <uxr_create_session+0x102>
 800b698:	2f00      	cmp	r7, #0
 800b69a:	d1c9      	bne.n	800b630 <uxr_create_session+0x68>
 800b69c:	4639      	mov	r1, r7
 800b69e:	4638      	mov	r0, r7
 800b6a0:	f000 fa0c 	bl	800babc <uxr_stream_id_from_raw>
 800b6a4:	a91a      	add	r1, sp, #104	; 0x68
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	900a      	str	r0, [sp, #40]	; 0x28
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f7ff fb56 	bl	800ad5c <read_submessage_list>
 800b6b0:	e7be      	b.n	800b630 <uxr_create_session+0x68>
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	d001      	beq.n	800b6be <uxr_create_session+0xf6>
 800b6ba:	2aff      	cmp	r2, #255	; 0xff
 800b6bc:	d0ac      	beq.n	800b618 <uxr_create_session+0x50>
 800b6be:	2a00      	cmp	r2, #0
 800b6c0:	d051      	beq.n	800b766 <uxr_create_session+0x19e>
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	b02b      	add	sp, #172	; 0xac
 800b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b6ce:	4641      	mov	r1, r8
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	9304      	str	r3, [sp, #16]
 800b6d4:	f000 fae0 	bl	800bc98 <uxr_get_input_reliable_stream>
 800b6d8:	4682      	mov	sl, r0
 800b6da:	b348      	cbz	r0, 800b730 <uxr_create_session+0x168>
 800b6dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b6de:	a81a      	add	r0, sp, #104	; 0x68
 800b6e0:	9205      	str	r2, [sp, #20]
 800b6e2:	f7fe f847 	bl	8009774 <ucdr_buffer_remaining>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f10d 0019 	add.w	r0, sp, #25
 800b6ec:	9a05      	ldr	r2, [sp, #20]
 800b6ee:	4659      	mov	r1, fp
 800b6f0:	9000      	str	r0, [sp, #0]
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	f004 f836 	bl	800f764 <uxr_receive_reliable_message>
 800b6f8:	b1d0      	cbz	r0, 800b730 <uxr_create_session+0x168>
 800b6fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d038      	beq.n	800b774 <uxr_create_session+0x1ac>
 800b702:	9f04      	ldr	r7, [sp, #16]
 800b704:	e00a      	b.n	800b71c <uxr_create_session+0x154>
 800b706:	f04f 0302 	mov.w	r3, #2
 800b70a:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800b70e:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800b712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b718:	f7ff fb20 	bl	800ad5c <read_submessage_list>
 800b71c:	a922      	add	r1, sp, #136	; 0x88
 800b71e:	2204      	movs	r2, #4
 800b720:	4650      	mov	r0, sl
 800b722:	f004 f8a1 	bl	800f868 <uxr_next_input_reliable_buffer_available>
 800b726:	4603      	mov	r3, r0
 800b728:	a922      	add	r1, sp, #136	; 0x88
 800b72a:	4620      	mov	r0, r4
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1ea      	bne.n	800b706 <uxr_create_session+0x13e>
 800b730:	4642      	mov	r2, r8
 800b732:	9904      	ldr	r1, [sp, #16]
 800b734:	4620      	mov	r0, r4
 800b736:	f7ff f98b 	bl	800aa50 <write_submessage_acknack.isra.0>
 800b73a:	e779      	b.n	800b630 <uxr_create_session+0x68>
 800b73c:	4641      	mov	r1, r8
 800b73e:	4630      	mov	r0, r6
 800b740:	f000 faa0 	bl	800bc84 <uxr_get_input_best_effort_stream>
 800b744:	2800      	cmp	r0, #0
 800b746:	f43f af73 	beq.w	800b630 <uxr_create_session+0x68>
 800b74a:	4659      	mov	r1, fp
 800b74c:	f003 ff80 	bl	800f650 <uxr_receive_best_effort_message>
 800b750:	2800      	cmp	r0, #0
 800b752:	f43f af6d 	beq.w	800b630 <uxr_create_session+0x68>
 800b756:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800b75a:	a91a      	add	r1, sp, #104	; 0x68
 800b75c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff fafc 	bl	800ad5c <read_submessage_list>
 800b764:	e764      	b.n	800b630 <uxr_create_session+0x68>
 800b766:	4630      	mov	r0, r6
 800b768:	f000 f9de 	bl	800bb28 <uxr_reset_stream_storage>
 800b76c:	2001      	movs	r0, #1
 800b76e:	b02b      	add	sp, #172	; 0xac
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b774:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800b778:	a91a      	add	r1, sp, #104	; 0x68
 800b77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7ff faed 	bl	800ad5c <read_submessage_list>
 800b782:	e7be      	b.n	800b702 <uxr_create_session+0x13a>

0800b784 <uxr_prepare_stream_to_write_submessage>:
 800b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	4604      	mov	r4, r0
 800b78c:	4610      	mov	r0, r2
 800b78e:	4615      	mov	r5, r2
 800b790:	461e      	mov	r6, r3
 800b792:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800b796:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800b79a:	f105 0904 	add.w	r9, r5, #4
 800b79e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800b7a2:	9101      	str	r1, [sp, #4]
 800b7a4:	f000 fada 	bl	800bd5c <uxr_submessage_padding>
 800b7a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b7ac:	4481      	add	r9, r0
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d01d      	beq.n	800b7ee <uxr_prepare_stream_to_write_submessage+0x6a>
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d116      	bne.n	800b7e4 <uxr_prepare_stream_to_write_submessage+0x60>
 800b7b6:	f104 0008 	add.w	r0, r4, #8
 800b7ba:	4651      	mov	r1, sl
 800b7bc:	f000 fa56 	bl	800bc6c <uxr_get_output_reliable_stream>
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	b158      	cbz	r0, 800b7dc <uxr_prepare_stream_to_write_submessage+0x58>
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	f004 fa14 	bl	800fbf4 <uxr_prepare_reliable_buffer_to_write>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	b12c      	cbz	r4, 800b7dc <uxr_prepare_stream_to_write_submessage+0x58>
 800b7d0:	4643      	mov	r3, r8
 800b7d2:	b2aa      	uxth	r2, r5
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 fa80 	bl	800bcdc <uxr_buffer_submessage_header>
 800b7dc:	4620      	mov	r0, r4
 800b7de:	b002      	add	sp, #8
 800b7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e4:	2400      	movs	r4, #0
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	b002      	add	sp, #8
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	f104 0008 	add.w	r0, r4, #8
 800b7f2:	4651      	mov	r1, sl
 800b7f4:	f000 fa32 	bl	800bc5c <uxr_get_output_best_effort_stream>
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0ee      	beq.n	800b7dc <uxr_prepare_stream_to_write_submessage+0x58>
 800b7fe:	4649      	mov	r1, r9
 800b800:	4632      	mov	r2, r6
 800b802:	f004 f921 	bl	800fa48 <uxr_prepare_best_effort_buffer_to_write>
 800b806:	4604      	mov	r4, r0
 800b808:	e7e1      	b.n	800b7ce <uxr_prepare_stream_to_write_submessage+0x4a>
 800b80a:	bf00      	nop

0800b80c <uxr_init_session_info>:
 800b80c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800b810:	23ff      	movs	r3, #255	; 0xff
 800b812:	7102      	strb	r2, [r0, #4]
 800b814:	f880 c001 	strb.w	ip, [r0, #1]
 800b818:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b81c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800b820:	7001      	strb	r1, [r0, #0]
 800b822:	f880 c002 	strb.w	ip, [r0, #2]
 800b826:	7143      	strb	r3, [r0, #5]
 800b828:	70c2      	strb	r2, [r0, #3]
 800b82a:	b500      	push	{lr}
 800b82c:	f04f 0e09 	mov.w	lr, #9
 800b830:	f8a0 e006 	strh.w	lr, [r0, #6]
 800b834:	f85d fb04 	ldr.w	pc, [sp], #4

0800b838 <uxr_buffer_create_session>:
 800b838:	b530      	push	{r4, r5, lr}
 800b83a:	2300      	movs	r3, #0
 800b83c:	b089      	sub	sp, #36	; 0x24
 800b83e:	4d12      	ldr	r5, [pc, #72]	; (800b888 <uxr_buffer_create_session+0x50>)
 800b840:	460c      	mov	r4, r1
 800b842:	9307      	str	r3, [sp, #28]
 800b844:	4619      	mov	r1, r3
 800b846:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b84a:	2201      	movs	r2, #1
 800b84c:	9301      	str	r3, [sp, #4]
 800b84e:	80c2      	strh	r2, [r0, #6]
 800b850:	f88d 2004 	strb.w	r2, [sp, #4]
 800b854:	682a      	ldr	r2, [r5, #0]
 800b856:	9303      	str	r3, [sp, #12]
 800b858:	9200      	str	r2, [sp, #0]
 800b85a:	88aa      	ldrh	r2, [r5, #4]
 800b85c:	9306      	str	r3, [sp, #24]
 800b85e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b862:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800b866:	9202      	str	r2, [sp, #8]
 800b868:	7802      	ldrb	r2, [r0, #0]
 800b86a:	4620      	mov	r0, r4
 800b86c:	f88d 200c 	strb.w	r2, [sp, #12]
 800b870:	2210      	movs	r2, #16
 800b872:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800b876:	f000 fa31 	bl	800bcdc <uxr_buffer_submessage_header>
 800b87a:	4669      	mov	r1, sp
 800b87c:	4620      	mov	r0, r4
 800b87e:	f001 f983 	bl	800cb88 <uxr_serialize_CREATE_CLIENT_Payload>
 800b882:	b009      	add	sp, #36	; 0x24
 800b884:	bd30      	pop	{r4, r5, pc}
 800b886:	bf00      	nop
 800b888:	08014a38 	.word	0x08014a38

0800b88c <uxr_buffer_delete_session>:
 800b88c:	4a0c      	ldr	r2, [pc, #48]	; (800b8c0 <uxr_buffer_delete_session+0x34>)
 800b88e:	2302      	movs	r3, #2
 800b890:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800b894:	b510      	push	{r4, lr}
 800b896:	460c      	mov	r4, r1
 800b898:	b082      	sub	sp, #8
 800b89a:	8911      	ldrh	r1, [r2, #8]
 800b89c:	2204      	movs	r2, #4
 800b89e:	80c3      	strh	r3, [r0, #6]
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f8ad 1006 	strh.w	r1, [sp, #6]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	2103      	movs	r1, #3
 800b8aa:	f8ad c004 	strh.w	ip, [sp, #4]
 800b8ae:	f000 fa15 	bl	800bcdc <uxr_buffer_submessage_header>
 800b8b2:	a901      	add	r1, sp, #4
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f001 fa0f 	bl	800ccd8 <uxr_serialize_DELETE_Payload>
 800b8ba:	b002      	add	sp, #8
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	bf00      	nop
 800b8c0:	08014a38 	.word	0x08014a38

0800b8c4 <uxr_read_create_session_status>:
 800b8c4:	b510      	push	{r4, lr}
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	b088      	sub	sp, #32
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	a901      	add	r1, sp, #4
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f001 fa12 	bl	800ccf8 <uxr_deserialize_STATUS_AGENT_Payload>
 800b8d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b8d8:	7163      	strb	r3, [r4, #5]
 800b8da:	b008      	add	sp, #32
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	bf00      	nop

0800b8e0 <uxr_read_delete_session_status>:
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	a902      	add	r1, sp, #8
 800b8ea:	f001 fa35 	bl	800cd58 <uxr_deserialize_STATUS_Payload>
 800b8ee:	88e3      	ldrh	r3, [r4, #6]
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d001      	beq.n	800b8f8 <uxr_read_delete_session_status+0x18>
 800b8f4:	b004      	add	sp, #16
 800b8f6:	bd10      	pop	{r4, pc}
 800b8f8:	f10d 000a 	add.w	r0, sp, #10
 800b8fc:	f7ff f82e 	bl	800a95c <uxr_object_id_from_raw>
 800b900:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b904:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b908:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d1f0      	bne.n	800b8f4 <uxr_read_delete_session_status+0x14>
 800b912:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b916:	7163      	strb	r3, [r4, #5]
 800b918:	e7ec      	b.n	800b8f4 <uxr_read_delete_session_status+0x14>
 800b91a:	bf00      	nop

0800b91c <uxr_stamp_create_session_header>:
 800b91c:	b510      	push	{r4, lr}
 800b91e:	2208      	movs	r2, #8
 800b920:	b08a      	sub	sp, #40	; 0x28
 800b922:	4604      	mov	r4, r0
 800b924:	eb0d 0002 	add.w	r0, sp, r2
 800b928:	f7fd fef2 	bl	8009710 <ucdr_init_buffer>
 800b92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b930:	2300      	movs	r3, #0
 800b932:	a802      	add	r0, sp, #8
 800b934:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b938:	9400      	str	r4, [sp, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	f000 fbca 	bl	800c0d4 <uxr_serialize_message_header>
 800b940:	b00a      	add	sp, #40	; 0x28
 800b942:	bd10      	pop	{r4, pc}

0800b944 <uxr_stamp_session_header>:
 800b944:	b530      	push	{r4, r5, lr}
 800b946:	b08d      	sub	sp, #52	; 0x34
 800b948:	4604      	mov	r4, r0
 800b94a:	460d      	mov	r5, r1
 800b94c:	4619      	mov	r1, r3
 800b94e:	a804      	add	r0, sp, #16
 800b950:	9203      	str	r2, [sp, #12]
 800b952:	2208      	movs	r2, #8
 800b954:	f7fd fedc 	bl	8009710 <ucdr_init_buffer>
 800b958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	462a      	mov	r2, r5
 800b960:	a804      	add	r0, sp, #16
 800b962:	9400      	str	r4, [sp, #0]
 800b964:	f000 fbb6 	bl	800c0d4 <uxr_serialize_message_header>
 800b968:	b00d      	add	sp, #52	; 0x34
 800b96a:	bd30      	pop	{r4, r5, pc}

0800b96c <uxr_read_session_header>:
 800b96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b970:	4607      	mov	r7, r0
 800b972:	b084      	sub	sp, #16
 800b974:	4608      	mov	r0, r1
 800b976:	460c      	mov	r4, r1
 800b978:	4615      	mov	r5, r2
 800b97a:	461e      	mov	r6, r3
 800b97c:	f7fd fefa 	bl	8009774 <ucdr_buffer_remaining>
 800b980:	2808      	cmp	r0, #8
 800b982:	d803      	bhi.n	800b98c <uxr_read_session_header+0x20>
 800b984:	2000      	movs	r0, #0
 800b986:	b004      	add	sp, #16
 800b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b98c:	f10d 080c 	add.w	r8, sp, #12
 800b990:	4633      	mov	r3, r6
 800b992:	462a      	mov	r2, r5
 800b994:	4620      	mov	r0, r4
 800b996:	f10d 010b 	add.w	r1, sp, #11
 800b99a:	f8cd 8000 	str.w	r8, [sp]
 800b99e:	f000 fbb7 	bl	800c110 <uxr_deserialize_message_header>
 800b9a2:	783a      	ldrb	r2, [r7, #0]
 800b9a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d1eb      	bne.n	800b984 <uxr_read_session_header+0x18>
 800b9ac:	061b      	lsls	r3, r3, #24
 800b9ae:	d41b      	bmi.n	800b9e8 <uxr_read_session_header+0x7c>
 800b9b0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b9b4:	787b      	ldrb	r3, [r7, #1]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d003      	beq.n	800b9c2 <uxr_read_session_header+0x56>
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	f080 0001 	eor.w	r0, r0, #1
 800b9c0:	e7e1      	b.n	800b986 <uxr_read_session_header+0x1a>
 800b9c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800b9c6:	1cb8      	adds	r0, r7, #2
 800b9c8:	78bb      	ldrb	r3, [r7, #2]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d1f5      	bne.n	800b9ba <uxr_read_session_header+0x4e>
 800b9ce:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b9d2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d1ef      	bne.n	800b9ba <uxr_read_session_header+0x4e>
 800b9da:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b9de:	7843      	ldrb	r3, [r0, #1]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d1ea      	bne.n	800b9ba <uxr_read_session_header+0x4e>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e7e9      	b.n	800b9bc <uxr_read_session_header+0x50>
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	e7cc      	b.n	800b986 <uxr_read_session_header+0x1a>

0800b9ec <uxr_session_header_offset>:
 800b9ec:	f990 3000 	ldrsb.w	r3, [r0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bfac      	ite	ge
 800b9f4:	2008      	movge	r0, #8
 800b9f6:	2004      	movlt	r0, #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop

0800b9fc <uxr_init_base_object_request>:
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800ba04:	9101      	str	r1, [sp, #4]
 800ba06:	88c3      	ldrh	r3, [r0, #6]
 800ba08:	f1a3 010a 	sub.w	r1, r3, #10
 800ba0c:	b289      	uxth	r1, r1
 800ba0e:	42a1      	cmp	r1, r4
 800ba10:	d80f      	bhi.n	800ba32 <uxr_init_base_object_request+0x36>
 800ba12:	3301      	adds	r3, #1
 800ba14:	b29c      	uxth	r4, r3
 800ba16:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	80c4      	strh	r4, [r0, #6]
 800ba1e:	1c91      	adds	r1, r2, #2
 800ba20:	9801      	ldr	r0, [sp, #4]
 800ba22:	f882 c000 	strb.w	ip, [r2]
 800ba26:	7053      	strb	r3, [r2, #1]
 800ba28:	f7fe ffac 	bl	800a984 <uxr_object_id_to_raw>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	b002      	add	sp, #8
 800ba30:	bd10      	pop	{r4, pc}
 800ba32:	230a      	movs	r3, #10
 800ba34:	f04f 0c00 	mov.w	ip, #0
 800ba38:	461c      	mov	r4, r3
 800ba3a:	e7ef      	b.n	800ba1c <uxr_init_base_object_request+0x20>

0800ba3c <uxr_parse_base_object_request>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	4604      	mov	r4, r0
 800ba40:	3002      	adds	r0, #2
 800ba42:	460d      	mov	r5, r1
 800ba44:	4616      	mov	r6, r2
 800ba46:	f7fe ff89 	bl	800a95c <uxr_object_id_from_raw>
 800ba4a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ba4e:	8028      	strh	r0, [r5, #0]
 800ba50:	806b      	strh	r3, [r5, #2]
 800ba52:	7822      	ldrb	r2, [r4, #0]
 800ba54:	7863      	ldrb	r3, [r4, #1]
 800ba56:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ba5a:	8033      	strh	r3, [r6, #0]
 800ba5c:	bd70      	pop	{r4, r5, r6, pc}
 800ba5e:	bf00      	nop

0800ba60 <uxr_stream_id>:
 800ba60:	2901      	cmp	r1, #1
 800ba62:	4684      	mov	ip, r0
 800ba64:	b500      	push	{lr}
 800ba66:	b083      	sub	sp, #12
 800ba68:	d01f      	beq.n	800baaa <uxr_stream_id+0x4a>
 800ba6a:	2902      	cmp	r1, #2
 800ba6c:	f04f 0e00 	mov.w	lr, #0
 800ba70:	d020      	beq.n	800bab4 <uxr_stream_id+0x54>
 800ba72:	2300      	movs	r3, #0
 800ba74:	2000      	movs	r0, #0
 800ba76:	f36e 0307 	bfi	r3, lr, #0, #8
 800ba7a:	f36c 230f 	bfi	r3, ip, #8, #8
 800ba7e:	f361 4317 	bfi	r3, r1, #16, #8
 800ba82:	f362 631f 	bfi	r3, r2, #24, #8
 800ba86:	fa5f fc83 	uxtb.w	ip, r3
 800ba8a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ba8e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ba92:	0e1b      	lsrs	r3, r3, #24
 800ba94:	f36c 0007 	bfi	r0, ip, #0, #8
 800ba98:	f361 200f 	bfi	r0, r1, #8, #8
 800ba9c:	f362 4017 	bfi	r0, r2, #16, #8
 800baa0:	f363 601f 	bfi	r0, r3, #24, #8
 800baa4:	b003      	add	sp, #12
 800baa6:	f85d fb04 	ldr.w	pc, [sp], #4
 800baaa:	f100 0e01 	add.w	lr, r0, #1
 800baae:	fa5f fe8e 	uxtb.w	lr, lr
 800bab2:	e7de      	b.n	800ba72 <uxr_stream_id+0x12>
 800bab4:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 800bab8:	e7db      	b.n	800ba72 <uxr_stream_id+0x12>
 800baba:	bf00      	nop

0800babc <uxr_stream_id_from_raw>:
 800babc:	b082      	sub	sp, #8
 800babe:	b130      	cbz	r0, 800bace <uxr_stream_id_from_raw+0x12>
 800bac0:	0603      	lsls	r3, r0, #24
 800bac2:	d421      	bmi.n	800bb08 <uxr_stream_id_from_raw+0x4c>
 800bac4:	1e42      	subs	r2, r0, #1
 800bac6:	f04f 0c01 	mov.w	ip, #1
 800baca:	b2d2      	uxtb	r2, r2
 800bacc:	e001      	b.n	800bad2 <uxr_stream_id_from_raw+0x16>
 800bace:	4684      	mov	ip, r0
 800bad0:	4602      	mov	r2, r0
 800bad2:	2300      	movs	r3, #0
 800bad4:	f360 0307 	bfi	r3, r0, #0, #8
 800bad8:	2000      	movs	r0, #0
 800bada:	f362 230f 	bfi	r3, r2, #8, #8
 800bade:	f36c 4317 	bfi	r3, ip, #16, #8
 800bae2:	f361 631f 	bfi	r3, r1, #24, #8
 800bae6:	fa5f fc83 	uxtb.w	ip, r3
 800baea:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800baee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800baf2:	0e1b      	lsrs	r3, r3, #24
 800baf4:	f36c 0007 	bfi	r0, ip, #0, #8
 800baf8:	f361 200f 	bfi	r0, r1, #8, #8
 800bafc:	f362 4017 	bfi	r0, r2, #16, #8
 800bb00:	f363 601f 	bfi	r0, r3, #24, #8
 800bb04:	b002      	add	sp, #8
 800bb06:	4770      	bx	lr
 800bb08:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800bb0c:	f04f 0c02 	mov.w	ip, #2
 800bb10:	e7df      	b.n	800bad2 <uxr_stream_id_from_raw+0x16>
 800bb12:	bf00      	nop

0800bb14 <uxr_init_stream_storage>:
 800bb14:	2300      	movs	r3, #0
 800bb16:	7403      	strb	r3, [r0, #16]
 800bb18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800bb1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800bb20:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop

0800bb28 <uxr_reset_stream_storage>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	7c03      	ldrb	r3, [r0, #16]
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	b14b      	cbz	r3, 800bb44 <uxr_reset_stream_storage+0x1c>
 800bb30:	4606      	mov	r6, r0
 800bb32:	2500      	movs	r5, #0
 800bb34:	4630      	mov	r0, r6
 800bb36:	3501      	adds	r5, #1
 800bb38:	f003 ff80 	bl	800fa3c <uxr_reset_output_best_effort_stream>
 800bb3c:	7c23      	ldrb	r3, [r4, #16]
 800bb3e:	3610      	adds	r6, #16
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	d8f7      	bhi.n	800bb34 <uxr_reset_stream_storage+0xc>
 800bb44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb48:	b15b      	cbz	r3, 800bb62 <uxr_reset_stream_storage+0x3a>
 800bb4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb4e:	2500      	movs	r5, #0
 800bb50:	4630      	mov	r0, r6
 800bb52:	3501      	adds	r5, #1
 800bb54:	f003 fd78 	bl	800f648 <uxr_reset_input_best_effort_stream>
 800bb58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb5c:	3602      	adds	r6, #2
 800bb5e:	42ab      	cmp	r3, r5
 800bb60:	d8f6      	bhi.n	800bb50 <uxr_reset_stream_storage+0x28>
 800bb62:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bb66:	b15b      	cbz	r3, 800bb80 <uxr_reset_stream_storage+0x58>
 800bb68:	f104 0618 	add.w	r6, r4, #24
 800bb6c:	2500      	movs	r5, #0
 800bb6e:	4630      	mov	r0, r6
 800bb70:	3501      	adds	r5, #1
 800bb72:	f004 f811 	bl	800fb98 <uxr_reset_output_reliable_stream>
 800bb76:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bb7a:	3628      	adds	r6, #40	; 0x28
 800bb7c:	42ab      	cmp	r3, r5
 800bb7e:	d8f6      	bhi.n	800bb6e <uxr_reset_stream_storage+0x46>
 800bb80:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bb84:	b15b      	cbz	r3, 800bb9e <uxr_reset_stream_storage+0x76>
 800bb86:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	3501      	adds	r5, #1
 800bb90:	f003 fdc6 	bl	800f720 <uxr_reset_input_reliable_stream>
 800bb94:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bb98:	3618      	adds	r6, #24
 800bb9a:	42ab      	cmp	r3, r5
 800bb9c:	d8f6      	bhi.n	800bb8c <uxr_reset_stream_storage+0x64>
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}

0800bba0 <uxr_add_output_best_effort_buffer>:
 800bba0:	b510      	push	{r4, lr}
 800bba2:	7c04      	ldrb	r4, [r0, #16]
 800bba4:	b082      	sub	sp, #8
 800bba6:	f104 0c01 	add.w	ip, r4, #1
 800bbaa:	f880 c010 	strb.w	ip, [r0, #16]
 800bbae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800bbb2:	f003 ff39 	bl	800fa28 <uxr_init_output_best_effort_stream>
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4611      	mov	r1, r2
 800bbbc:	b002      	add	sp, #8
 800bbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbc2:	f7ff bf4d 	b.w	800ba60 <uxr_stream_id>
 800bbc6:	bf00      	nop

0800bbc8 <uxr_add_output_reliable_buffer>:
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	4684      	mov	ip, r0
 800bbce:	2028      	movs	r0, #40	; 0x28
 800bbd0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800bbd4:	9400      	str	r4, [sp, #0]
 800bbd6:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800bbda:	fb00 c004 	mla	r0, r0, r4, ip
 800bbde:	f104 0e01 	add.w	lr, r4, #1
 800bbe2:	3018      	adds	r0, #24
 800bbe4:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800bbe8:	f003 ff9e 	bl	800fb28 <uxr_init_output_reliable_stream>
 800bbec:	2201      	movs	r2, #1
 800bbee:	2102      	movs	r1, #2
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	b004      	add	sp, #16
 800bbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbf8:	f7ff bf32 	b.w	800ba60 <uxr_stream_id>

0800bbfc <uxr_add_input_best_effort_buffer>:
 800bbfc:	b510      	push	{r4, lr}
 800bbfe:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800bc02:	b082      	sub	sp, #8
 800bc04:	1c62      	adds	r2, r4, #1
 800bc06:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800bc0a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800bc0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800bc12:	f003 fd15 	bl	800f640 <uxr_init_input_best_effort_stream>
 800bc16:	2200      	movs	r2, #0
 800bc18:	2101      	movs	r1, #1
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	b002      	add	sp, #8
 800bc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc22:	f7ff bf1d 	b.w	800ba60 <uxr_stream_id>
 800bc26:	bf00      	nop

0800bc28 <uxr_add_input_reliable_buffer>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	4684      	mov	ip, r0
 800bc2e:	2018      	movs	r0, #24
 800bc30:	9c06      	ldr	r4, [sp, #24]
 800bc32:	9400      	str	r4, [sp, #0]
 800bc34:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800bc38:	fb00 c004 	mla	r0, r0, r4, ip
 800bc3c:	f104 0e01 	add.w	lr, r4, #1
 800bc40:	3048      	adds	r0, #72	; 0x48
 800bc42:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800bc46:	f003 fd45 	bl	800f6d4 <uxr_init_input_reliable_stream>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2102      	movs	r1, #2
 800bc4e:	4620      	mov	r0, r4
 800bc50:	b004      	add	sp, #16
 800bc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc56:	f7ff bf03 	b.w	800ba60 <uxr_stream_id>
 800bc5a:	bf00      	nop

0800bc5c <uxr_get_output_best_effort_stream>:
 800bc5c:	7c03      	ldrb	r3, [r0, #16]
 800bc5e:	428b      	cmp	r3, r1
 800bc60:	bf8c      	ite	hi
 800bc62:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800bc66:	2000      	movls	r0, #0
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop

0800bc6c <uxr_get_output_reliable_stream>:
 800bc6c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bc70:	428b      	cmp	r3, r1
 800bc72:	d904      	bls.n	800bc7e <uxr_get_output_reliable_stream+0x12>
 800bc74:	2328      	movs	r3, #40	; 0x28
 800bc76:	fb03 0001 	mla	r0, r3, r1, r0
 800bc7a:	3018      	adds	r0, #24
 800bc7c:	4770      	bx	lr
 800bc7e:	2000      	movs	r0, #0
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop

0800bc84 <uxr_get_input_best_effort_stream>:
 800bc84:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800bc88:	428b      	cmp	r3, r1
 800bc8a:	d903      	bls.n	800bc94 <uxr_get_input_best_effort_stream+0x10>
 800bc8c:	3121      	adds	r1, #33	; 0x21
 800bc8e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bc92:	4770      	bx	lr
 800bc94:	2000      	movs	r0, #0
 800bc96:	4770      	bx	lr

0800bc98 <uxr_get_input_reliable_stream>:
 800bc98:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	d904      	bls.n	800bcaa <uxr_get_input_reliable_stream+0x12>
 800bca0:	2318      	movs	r3, #24
 800bca2:	fb03 0001 	mla	r0, r3, r1, r0
 800bca6:	3048      	adds	r0, #72	; 0x48
 800bca8:	4770      	bx	lr
 800bcaa:	2000      	movs	r0, #0
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop

0800bcb0 <uxr_output_streams_confirmed>:
 800bcb0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bcb4:	b183      	cbz	r3, 800bcd8 <uxr_output_streams_confirmed+0x28>
 800bcb6:	b570      	push	{r4, r5, r6, lr}
 800bcb8:	4606      	mov	r6, r0
 800bcba:	f100 0518 	add.w	r5, r0, #24
 800bcbe:	2400      	movs	r4, #0
 800bcc0:	e000      	b.n	800bcc4 <uxr_output_streams_confirmed+0x14>
 800bcc2:	b140      	cbz	r0, 800bcd6 <uxr_output_streams_confirmed+0x26>
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	3401      	adds	r4, #1
 800bcc8:	f004 f9da 	bl	8010080 <uxr_is_output_up_to_date>
 800bccc:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800bcd0:	3528      	adds	r5, #40	; 0x28
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	d8f5      	bhi.n	800bcc2 <uxr_output_streams_confirmed+0x12>
 800bcd6:	bd70      	pop	{r4, r5, r6, pc}
 800bcd8:	2001      	movs	r0, #1
 800bcda:	4770      	bx	lr

0800bcdc <uxr_buffer_submessage_header>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	460e      	mov	r6, r1
 800bce0:	2104      	movs	r1, #4
 800bce2:	4604      	mov	r4, r0
 800bce4:	4615      	mov	r5, r2
 800bce6:	461f      	mov	r7, r3
 800bce8:	f7fd fd2e 	bl	8009748 <ucdr_align_to>
 800bcec:	2301      	movs	r3, #1
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	ea47 0203 	orr.w	r2, r7, r3
 800bcf6:	7523      	strb	r3, [r4, #20]
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	f000 fa29 	bl	800c150 <uxr_serialize_submessage_header>
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f7fd fd38 	bl	8009774 <ucdr_buffer_remaining>
 800bd04:	42a8      	cmp	r0, r5
 800bd06:	bf34      	ite	cc
 800bd08:	2000      	movcc	r0, #0
 800bd0a:	2001      	movcs	r0, #1
 800bd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd0e:	bf00      	nop

0800bd10 <uxr_read_submessage_header>:
 800bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd14:	4604      	mov	r4, r0
 800bd16:	460d      	mov	r5, r1
 800bd18:	2104      	movs	r1, #4
 800bd1a:	4616      	mov	r6, r2
 800bd1c:	4698      	mov	r8, r3
 800bd1e:	f7fd fd13 	bl	8009748 <ucdr_align_to>
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7fd fd26 	bl	8009774 <ucdr_buffer_remaining>
 800bd28:	2803      	cmp	r0, #3
 800bd2a:	bf8c      	ite	hi
 800bd2c:	2701      	movhi	r7, #1
 800bd2e:	2700      	movls	r7, #0
 800bd30:	d802      	bhi.n	800bd38 <uxr_read_submessage_header+0x28>
 800bd32:	4638      	mov	r0, r7
 800bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd38:	4633      	mov	r3, r6
 800bd3a:	4642      	mov	r2, r8
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f000 fa1a 	bl	800c178 <uxr_deserialize_submessage_header>
 800bd44:	f898 3000 	ldrb.w	r3, [r8]
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f003 0201 	and.w	r2, r3, #1
 800bd4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bd52:	f888 3000 	strb.w	r3, [r8]
 800bd56:	7522      	strb	r2, [r4, #20]
 800bd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd5c <uxr_submessage_padding>:
 800bd5c:	f010 0003 	ands.w	r0, r0, #3
 800bd60:	bf18      	it	ne
 800bd62:	f1c0 0004 	rsbne	r0, r0, #4
 800bd66:	4770      	bx	lr

0800bd68 <uxr_millis>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	4669      	mov	r1, sp
 800bd70:	f7f5 fcba 	bl	80016e8 <clock_gettime>
 800bd74:	4908      	ldr	r1, [pc, #32]	; (800bd98 <uxr_millis+0x30>)
 800bd76:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800bd7a:	fba0 0301 	umull	r0, r3, r0, r1
 800bd7e:	1900      	adds	r0, r0, r4
 800bd80:	fb01 3102 	mla	r1, r1, r2, r3
 800bd84:	4a05      	ldr	r2, [pc, #20]	; (800bd9c <uxr_millis+0x34>)
 800bd86:	f04f 0300 	mov.w	r3, #0
 800bd8a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800bd8e:	f7f4 fab9 	bl	8000304 <__aeabi_ldivmod>
 800bd92:	b004      	add	sp, #16
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	bf00      	nop
 800bd98:	3b9aca00 	.word	0x3b9aca00
 800bd9c:	000f4240 	.word	0x000f4240

0800bda0 <uxr_nanos>:
 800bda0:	b510      	push	{r4, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	2001      	movs	r0, #1
 800bda6:	4669      	mov	r1, sp
 800bda8:	f7f5 fc9e 	bl	80016e8 <clock_gettime>
 800bdac:	4a06      	ldr	r2, [pc, #24]	; (800bdc8 <uxr_nanos+0x28>)
 800bdae:	9800      	ldr	r0, [sp, #0]
 800bdb0:	9902      	ldr	r1, [sp, #8]
 800bdb2:	fba0 0302 	umull	r0, r3, r0, r2
 800bdb6:	9c01      	ldr	r4, [sp, #4]
 800bdb8:	1840      	adds	r0, r0, r1
 800bdba:	fb02 3304 	mla	r3, r2, r4, r3
 800bdbe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800bdc2:	b004      	add	sp, #16
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	3b9aca00 	.word	0x3b9aca00

0800bdcc <on_full_output_buffer_fragmented>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	b08a      	sub	sp, #40	; 0x28
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800bdda:	f104 0008 	add.w	r0, r4, #8
 800bdde:	f7ff ff45 	bl	800bc6c <uxr_get_output_reliable_stream>
 800bde2:	4605      	mov	r5, r0
 800bde4:	f004 f956 	bl	8010094 <get_available_free_slots>
 800bde8:	b968      	cbnz	r0, 800be06 <on_full_output_buffer_fragmented+0x3a>
 800bdea:	4620      	mov	r0, r4
 800bdec:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800bdf0:	4798      	blx	r3
 800bdf2:	b918      	cbnz	r0, 800bdfc <on_full_output_buffer_fragmented+0x30>
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	b00a      	add	sp, #40	; 0x28
 800bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f004 f949 	bl	8010094 <get_available_free_slots>
 800be02:	2800      	cmp	r0, #0
 800be04:	d0f6      	beq.n	800bdf4 <on_full_output_buffer_fragmented+0x28>
 800be06:	8929      	ldrh	r1, [r5, #8]
 800be08:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800be0c:	89eb      	ldrh	r3, [r5, #14]
 800be0e:	7b28      	ldrb	r0, [r5, #12]
 800be10:	686f      	ldr	r7, [r5, #4]
 800be12:	1a12      	subs	r2, r2, r0
 800be14:	fbb3 f0f1 	udiv	r0, r3, r1
 800be18:	fbb7 f7f1 	udiv	r7, r7, r1
 800be1c:	fb01 3110 	mls	r1, r1, r0, r3
 800be20:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800be24:	b289      	uxth	r1, r1
 800be26:	fb07 f101 	mul.w	r1, r7, r1
 800be2a:	3f04      	subs	r7, #4
 800be2c:	443a      	add	r2, r7
 800be2e:	3104      	adds	r1, #4
 800be30:	fa1f f882 	uxth.w	r8, r2
 800be34:	463a      	mov	r2, r7
 800be36:	eba3 0308 	sub.w	r3, r3, r8
 800be3a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	4419      	add	r1, r3
 800be42:	2300      	movs	r3, #0
 800be44:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800be48:	9000      	str	r0, [sp, #0]
 800be4a:	a802      	add	r0, sp, #8
 800be4c:	f7fd fc4e 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800be50:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800be54:	f102 0308 	add.w	r3, r2, #8
 800be58:	42bb      	cmp	r3, r7
 800be5a:	d927      	bls.n	800beac <on_full_output_buffer_fragmented+0xe0>
 800be5c:	4642      	mov	r2, r8
 800be5e:	2300      	movs	r3, #0
 800be60:	210d      	movs	r1, #13
 800be62:	a802      	add	r0, sp, #8
 800be64:	f7ff ff3a 	bl	800bcdc <uxr_buffer_submessage_header>
 800be68:	8929      	ldrh	r1, [r5, #8]
 800be6a:	89eb      	ldrh	r3, [r5, #14]
 800be6c:	686a      	ldr	r2, [r5, #4]
 800be6e:	fbb3 f0f1 	udiv	r0, r3, r1
 800be72:	fbb2 f2f1 	udiv	r2, r2, r1
 800be76:	fb01 3310 	mls	r3, r1, r0, r3
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	fb02 f303 	mul.w	r3, r2, r3
 800be80:	682a      	ldr	r2, [r5, #0]
 800be82:	50d7      	str	r7, [r2, r3]
 800be84:	2101      	movs	r1, #1
 800be86:	89e8      	ldrh	r0, [r5, #14]
 800be88:	f004 fa1c 	bl	80102c4 <uxr_seq_num_add>
 800be8c:	9904      	ldr	r1, [sp, #16]
 800be8e:	9a03      	ldr	r2, [sp, #12]
 800be90:	81e8      	strh	r0, [r5, #14]
 800be92:	4630      	mov	r0, r6
 800be94:	1a52      	subs	r2, r2, r1
 800be96:	f7fd fc3b 	bl	8009710 <ucdr_init_buffer>
 800be9a:	4630      	mov	r0, r6
 800be9c:	4622      	mov	r2, r4
 800be9e:	490f      	ldr	r1, [pc, #60]	; (800bedc <on_full_output_buffer_fragmented+0x110>)
 800bea0:	f7fd fc0a 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 800bea4:	2000      	movs	r0, #0
 800bea6:	b00a      	add	sp, #40	; 0x28
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beac:	b292      	uxth	r2, r2
 800beae:	2302      	movs	r3, #2
 800beb0:	210d      	movs	r1, #13
 800beb2:	a802      	add	r0, sp, #8
 800beb4:	f7ff ff12 	bl	800bcdc <uxr_buffer_submessage_header>
 800beb8:	8928      	ldrh	r0, [r5, #8]
 800beba:	89eb      	ldrh	r3, [r5, #14]
 800bebc:	6869      	ldr	r1, [r5, #4]
 800bebe:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800bec2:	fbb3 f7f0 	udiv	r7, r3, r0
 800bec6:	fbb1 f1f0 	udiv	r1, r1, r0
 800beca:	fb00 3317 	mls	r3, r0, r7, r3
 800bece:	3208      	adds	r2, #8
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	fb01 f303 	mul.w	r3, r1, r3
 800bed6:	6829      	ldr	r1, [r5, #0]
 800bed8:	50ca      	str	r2, [r1, r3]
 800beda:	e7d3      	b.n	800be84 <on_full_output_buffer_fragmented+0xb8>
 800bedc:	0800bdcd 	.word	0x0800bdcd

0800bee0 <uxr_prepare_output_stream>:
 800bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bee2:	b087      	sub	sp, #28
 800bee4:	2707      	movs	r7, #7
 800bee6:	2500      	movs	r5, #0
 800bee8:	461c      	mov	r4, r3
 800beea:	4606      	mov	r6, r0
 800beec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800bef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bef2:	e9cd 7500 	strd	r7, r5, [sp]
 800bef6:	3204      	adds	r2, #4
 800bef8:	f7ff fc44 	bl	800b784 <uxr_prepare_stream_to_write_submessage>
 800befc:	f080 0201 	eor.w	r2, r0, #1
 800bf00:	b2d2      	uxtb	r2, r2
 800bf02:	75a2      	strb	r2, [r4, #22]
 800bf04:	b112      	cbz	r2, 800bf0c <uxr_prepare_output_stream+0x2c>
 800bf06:	4628      	mov	r0, r5
 800bf08:	b007      	add	sp, #28
 800bf0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf0c:	aa05      	add	r2, sp, #20
 800bf0e:	9902      	ldr	r1, [sp, #8]
 800bf10:	4630      	mov	r0, r6
 800bf12:	f7ff fd73 	bl	800b9fc <uxr_init_base_object_request>
 800bf16:	a905      	add	r1, sp, #20
 800bf18:	4605      	mov	r5, r0
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 ff9c 	bl	800ce58 <uxr_serialize_WRITE_DATA_Payload_Data>
 800bf20:	69a6      	ldr	r6, [r4, #24]
 800bf22:	69e7      	ldr	r7, [r4, #28]
 800bf24:	4620      	mov	r0, r4
 800bf26:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800bf2a:	1a52      	subs	r2, r2, r1
 800bf2c:	f7fd fbf0 	bl	8009710 <ucdr_init_buffer>
 800bf30:	4620      	mov	r0, r4
 800bf32:	463a      	mov	r2, r7
 800bf34:	4631      	mov	r1, r6
 800bf36:	f7fd fbbf 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	b007      	add	sp, #28
 800bf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf40 <uxr_prepare_output_stream_fragmented>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	b091      	sub	sp, #68	; 0x44
 800bf46:	4605      	mov	r5, r0
 800bf48:	3008      	adds	r0, #8
 800bf4a:	461e      	mov	r6, r3
 800bf4c:	9105      	str	r1, [sp, #20]
 800bf4e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800bf52:	9204      	str	r2, [sp, #16]
 800bf54:	f7ff fe8a 	bl	800bc6c <uxr_get_output_reliable_stream>
 800bf58:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	f000 8093 	beq.w	800c088 <uxr_prepare_output_stream_fragmented+0x148>
 800bf62:	4604      	mov	r4, r0
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f000 808f 	beq.w	800c088 <uxr_prepare_output_stream_fragmented+0x148>
 800bf6a:	f004 f893 	bl	8010094 <get_available_free_slots>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f000 8085 	beq.w	800c07e <uxr_prepare_output_stream_fragmented+0x13e>
 800bf74:	8923      	ldrh	r3, [r4, #8]
 800bf76:	89e7      	ldrh	r7, [r4, #14]
 800bf78:	6862      	ldr	r2, [r4, #4]
 800bf7a:	fbb7 f9f3 	udiv	r9, r7, r3
 800bf7e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf82:	fb03 7919 	mls	r9, r3, r9, r7
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	f1a2 0b04 	sub.w	fp, r2, #4
 800bf8c:	9203      	str	r2, [sp, #12]
 800bf8e:	fa1f f989 	uxth.w	r9, r9
 800bf92:	fb02 f909 	mul.w	r9, r2, r9
 800bf96:	f109 0904 	add.w	r9, r9, #4
 800bf9a:	4499      	add	r9, r3
 800bf9c:	7b23      	ldrb	r3, [r4, #12]
 800bf9e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800bfa2:	4543      	cmp	r3, r8
 800bfa4:	d37c      	bcc.n	800c0a0 <uxr_prepare_output_stream_fragmented+0x160>
 800bfa6:	f1ab 0a04 	sub.w	sl, fp, #4
 800bfaa:	465a      	mov	r2, fp
 800bfac:	4649      	mov	r1, r9
 800bfae:	a808      	add	r0, sp, #32
 800bfb0:	ebaa 0a03 	sub.w	sl, sl, r3
 800bfb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bfb6:	f8cd 8000 	str.w	r8, [sp]
 800bfba:	3308      	adds	r3, #8
 800bfbc:	fa1f fa8a 	uxth.w	sl, sl
 800bfc0:	9302      	str	r3, [sp, #8]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	f7fd fb92 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800bfc8:	9b02      	ldr	r3, [sp, #8]
 800bfca:	4652      	mov	r2, sl
 800bfcc:	210d      	movs	r1, #13
 800bfce:	455b      	cmp	r3, fp
 800bfd0:	bf34      	ite	cc
 800bfd2:	2302      	movcc	r3, #2
 800bfd4:	2300      	movcs	r3, #0
 800bfd6:	a808      	add	r0, sp, #32
 800bfd8:	f7ff fe80 	bl	800bcdc <uxr_buffer_submessage_header>
 800bfdc:	8921      	ldrh	r1, [r4, #8]
 800bfde:	6863      	ldr	r3, [r4, #4]
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	fbb7 f2f1 	udiv	r2, r7, r1
 800bfe6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfea:	fb01 7212 	mls	r2, r1, r2, r7
 800bfee:	2101      	movs	r1, #1
 800bff0:	b292      	uxth	r2, r2
 800bff2:	fb02 f303 	mul.w	r3, r2, r3
 800bff6:	6822      	ldr	r2, [r4, #0]
 800bff8:	f842 b003 	str.w	fp, [r2, r3]
 800bffc:	f004 f962 	bl	80102c4 <uxr_seq_num_add>
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	f108 0104 	add.w	r1, r8, #4
 800c006:	4607      	mov	r7, r0
 800c008:	f1a3 0208 	sub.w	r2, r3, #8
 800c00c:	4630      	mov	r0, r6
 800c00e:	4449      	add	r1, r9
 800c010:	eba2 0208 	sub.w	r2, r2, r8
 800c014:	f7fd fb7c 	bl	8009710 <ucdr_init_buffer>
 800c018:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c01a:	2107      	movs	r1, #7
 800c01c:	81e7      	strh	r7, [r4, #14]
 800c01e:	1d1a      	adds	r2, r3, #4
 800c020:	2300      	movs	r3, #0
 800c022:	4630      	mov	r0, r6
 800c024:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c028:	bf28      	it	cs
 800c02a:	461a      	movcs	r2, r3
 800c02c:	b292      	uxth	r2, r2
 800c02e:	f7ff fe55 	bl	800bcdc <uxr_buffer_submessage_header>
 800c032:	aa07      	add	r2, sp, #28
 800c034:	9904      	ldr	r1, [sp, #16]
 800c036:	4628      	mov	r0, r5
 800c038:	f7ff fce0 	bl	800b9fc <uxr_init_base_object_request>
 800c03c:	4604      	mov	r4, r0
 800c03e:	b320      	cbz	r0, 800c08a <uxr_prepare_output_stream_fragmented+0x14a>
 800c040:	a907      	add	r1, sp, #28
 800c042:	4630      	mov	r0, r6
 800c044:	f000 ff08 	bl	800ce58 <uxr_serialize_WRITE_DATA_Payload_Data>
 800c048:	4630      	mov	r0, r6
 800c04a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800c04e:	1a52      	subs	r2, r2, r1
 800c050:	f7fd fb5e 	bl	8009710 <ucdr_init_buffer>
 800c054:	9b05      	ldr	r3, [sp, #20]
 800c056:	9a02      	ldr	r2, [sp, #8]
 800c058:	4630      	mov	r0, r6
 800c05a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800c05e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c060:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800c064:	462a      	mov	r2, r5
 800c066:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800c06a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c06c:	4918      	ldr	r1, [pc, #96]	; (800c0d0 <uxr_prepare_output_stream_fragmented+0x190>)
 800c06e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800c072:	f7fd fb21 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 800c076:	4620      	mov	r0, r4
 800c078:	b011      	add	sp, #68	; 0x44
 800c07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c080:	4628      	mov	r0, r5
 800c082:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c084:	4798      	blx	r3
 800c086:	b920      	cbnz	r0, 800c092 <uxr_prepare_output_stream_fragmented+0x152>
 800c088:	2400      	movs	r4, #0
 800c08a:	4620      	mov	r0, r4
 800c08c:	b011      	add	sp, #68	; 0x44
 800c08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c092:	4620      	mov	r0, r4
 800c094:	f003 fffe 	bl	8010094 <get_available_free_slots>
 800c098:	2800      	cmp	r0, #0
 800c09a:	f47f af6b 	bne.w	800bf74 <uxr_prepare_output_stream_fragmented+0x34>
 800c09e:	e7f3      	b.n	800c088 <uxr_prepare_output_stream_fragmented+0x148>
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	f004 f90e 	bl	80102c4 <uxr_seq_num_add>
 800c0a8:	8922      	ldrh	r2, [r4, #8]
 800c0aa:	6863      	ldr	r3, [r4, #4]
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	fbb3 f9f2 	udiv	r9, r3, r2
 800c0b2:	fbb0 f3f2 	udiv	r3, r0, r2
 800c0b6:	fb02 0313 	mls	r3, r2, r3, r0
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	fb03 f909 	mul.w	r9, r3, r9
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	f109 0904 	add.w	r9, r9, #4
 800c0c6:	4499      	add	r9, r3
 800c0c8:	7b23      	ldrb	r3, [r4, #12]
 800c0ca:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800c0ce:	e76a      	b.n	800bfa6 <uxr_prepare_output_stream_fragmented+0x66>
 800c0d0:	0800bdcd 	.word	0x0800bdcd

0800c0d4 <uxr_serialize_message_header>:
 800c0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0d6:	4616      	mov	r6, r2
 800c0d8:	b083      	sub	sp, #12
 800c0da:	4604      	mov	r4, r0
 800c0dc:	460d      	mov	r5, r1
 800c0de:	9301      	str	r3, [sp, #4]
 800c0e0:	9f08      	ldr	r7, [sp, #32]
 800c0e2:	f7fc fc01 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f7fc fbfd 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c0ee:	9a01      	ldr	r2, [sp, #4]
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7fc fca4 	bl	8008a40 <ucdr_serialize_endian_uint16_t>
 800c0f8:	062b      	lsls	r3, r5, #24
 800c0fa:	d501      	bpl.n	800c100 <uxr_serialize_message_header+0x2c>
 800c0fc:	b003      	add	sp, #12
 800c0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c100:	2204      	movs	r2, #4
 800c102:	4639      	mov	r1, r7
 800c104:	4620      	mov	r0, r4
 800c106:	b003      	add	sp, #12
 800c108:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c10c:	f003 b89e 	b.w	800f24c <ucdr_serialize_array_uint8_t>

0800c110 <uxr_deserialize_message_header>:
 800c110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c112:	4616      	mov	r6, r2
 800c114:	b083      	sub	sp, #12
 800c116:	4604      	mov	r4, r0
 800c118:	460d      	mov	r5, r1
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	9f08      	ldr	r7, [sp, #32]
 800c11e:	f7fc fbf9 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c122:	4631      	mov	r1, r6
 800c124:	4620      	mov	r0, r4
 800c126:	f7fc fbf5 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c12a:	9a01      	ldr	r2, [sp, #4]
 800c12c:	2101      	movs	r1, #1
 800c12e:	4620      	mov	r0, r4
 800c130:	f7fc fd7a 	bl	8008c28 <ucdr_deserialize_endian_uint16_t>
 800c134:	f995 3000 	ldrsb.w	r3, [r5]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	da01      	bge.n	800c140 <uxr_deserialize_message_header+0x30>
 800c13c:	b003      	add	sp, #12
 800c13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c140:	2204      	movs	r2, #4
 800c142:	4639      	mov	r1, r7
 800c144:	4620      	mov	r0, r4
 800c146:	b003      	add	sp, #12
 800c148:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c14c:	f003 b8e2 	b.w	800f314 <ucdr_deserialize_array_uint8_t>

0800c150 <uxr_serialize_submessage_header>:
 800c150:	b530      	push	{r4, r5, lr}
 800c152:	4615      	mov	r5, r2
 800c154:	b083      	sub	sp, #12
 800c156:	4604      	mov	r4, r0
 800c158:	9301      	str	r3, [sp, #4]
 800c15a:	f7fc fbc5 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c15e:	4629      	mov	r1, r5
 800c160:	4620      	mov	r0, r4
 800c162:	f7fc fbc1 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c166:	9a01      	ldr	r2, [sp, #4]
 800c168:	2101      	movs	r1, #1
 800c16a:	4620      	mov	r0, r4
 800c16c:	b003      	add	sp, #12
 800c16e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c172:	f7fc bc65 	b.w	8008a40 <ucdr_serialize_endian_uint16_t>
 800c176:	bf00      	nop

0800c178 <uxr_deserialize_submessage_header>:
 800c178:	b530      	push	{r4, r5, lr}
 800c17a:	4615      	mov	r5, r2
 800c17c:	b083      	sub	sp, #12
 800c17e:	4604      	mov	r4, r0
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	f7fc fbc7 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c186:	4629      	mov	r1, r5
 800c188:	4620      	mov	r0, r4
 800c18a:	f7fc fbc3 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c18e:	9a01      	ldr	r2, [sp, #4]
 800c190:	2101      	movs	r1, #1
 800c192:	4620      	mov	r0, r4
 800c194:	b003      	add	sp, #12
 800c196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c19a:	f7fc bd45 	b.w	8008c28 <ucdr_deserialize_endian_uint16_t>
 800c19e:	bf00      	nop

0800c1a0 <uxr_serialize_CLIENT_Representation>:
 800c1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a4:	2204      	movs	r2, #4
 800c1a6:	460e      	mov	r6, r1
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	f003 f84f 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	1d31      	adds	r1, r6, #4
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f003 f849 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c1ba:	4038      	ands	r0, r7
 800c1bc:	2202      	movs	r2, #2
 800c1be:	1db1      	adds	r1, r6, #6
 800c1c0:	b2c7      	uxtb	r7, r0
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f003 f842 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c1c8:	2204      	movs	r2, #4
 800c1ca:	4007      	ands	r7, r0
 800c1cc:	f106 0108 	add.w	r1, r6, #8
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f003 f83b 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c1d6:	4007      	ands	r7, r0
 800c1d8:	7b31      	ldrb	r1, [r6, #12]
 800c1da:	4628      	mov	r0, r5
 800c1dc:	f7fc fb84 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c1e0:	7b71      	ldrb	r1, [r6, #13]
 800c1e2:	4007      	ands	r7, r0
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f7fc fb51 	bl	800888c <ucdr_serialize_bool>
 800c1ea:	7b73      	ldrb	r3, [r6, #13]
 800c1ec:	ea07 0800 	and.w	r8, r7, r0
 800c1f0:	b93b      	cbnz	r3, 800c202 <uxr_serialize_CLIENT_Representation+0x62>
 800c1f2:	8bb1      	ldrh	r1, [r6, #28]
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	f7fc fba3 	bl	8008940 <ucdr_serialize_uint16_t>
 800c1fa:	ea08 0000 	and.w	r0, r8, r0
 800c1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c202:	6931      	ldr	r1, [r6, #16]
 800c204:	4628      	mov	r0, r5
 800c206:	f7fc fd85 	bl	8008d14 <ucdr_serialize_uint32_t>
 800c20a:	6933      	ldr	r3, [r6, #16]
 800c20c:	b1e3      	cbz	r3, 800c248 <uxr_serialize_CLIENT_Representation+0xa8>
 800c20e:	b1c0      	cbz	r0, 800c242 <uxr_serialize_CLIENT_Representation+0xa2>
 800c210:	4637      	mov	r7, r6
 800c212:	f04f 0900 	mov.w	r9, #0
 800c216:	e000      	b.n	800c21a <uxr_serialize_CLIENT_Representation+0x7a>
 800c218:	b19c      	cbz	r4, 800c242 <uxr_serialize_CLIENT_Representation+0xa2>
 800c21a:	6979      	ldr	r1, [r7, #20]
 800c21c:	4628      	mov	r0, r5
 800c21e:	f003 f939 	bl	800f494 <ucdr_serialize_string>
 800c222:	69b9      	ldr	r1, [r7, #24]
 800c224:	4604      	mov	r4, r0
 800c226:	4628      	mov	r0, r5
 800c228:	f003 f934 	bl	800f494 <ucdr_serialize_string>
 800c22c:	f109 0901 	add.w	r9, r9, #1
 800c230:	6933      	ldr	r3, [r6, #16]
 800c232:	4004      	ands	r4, r0
 800c234:	3708      	adds	r7, #8
 800c236:	4599      	cmp	r9, r3
 800c238:	b2e4      	uxtb	r4, r4
 800c23a:	d3ed      	bcc.n	800c218 <uxr_serialize_CLIENT_Representation+0x78>
 800c23c:	ea08 0804 	and.w	r8, r8, r4
 800c240:	e7d7      	b.n	800c1f2 <uxr_serialize_CLIENT_Representation+0x52>
 800c242:	f04f 0800 	mov.w	r8, #0
 800c246:	e7d4      	b.n	800c1f2 <uxr_serialize_CLIENT_Representation+0x52>
 800c248:	ea08 0800 	and.w	r8, r8, r0
 800c24c:	e7d1      	b.n	800c1f2 <uxr_serialize_CLIENT_Representation+0x52>
 800c24e:	bf00      	nop

0800c250 <uxr_deserialize_CLIENT_Representation>:
 800c250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c254:	2204      	movs	r2, #4
 800c256:	460c      	mov	r4, r1
 800c258:	4605      	mov	r5, r0
 800c25a:	f003 f85b 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c25e:	4607      	mov	r7, r0
 800c260:	2202      	movs	r2, #2
 800c262:	1d21      	adds	r1, r4, #4
 800c264:	4628      	mov	r0, r5
 800c266:	f003 f855 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c26a:	4038      	ands	r0, r7
 800c26c:	2202      	movs	r2, #2
 800c26e:	1da1      	adds	r1, r4, #6
 800c270:	b2c6      	uxtb	r6, r0
 800c272:	4628      	mov	r0, r5
 800c274:	f003 f84e 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c278:	2204      	movs	r2, #4
 800c27a:	4006      	ands	r6, r0
 800c27c:	f104 0108 	add.w	r1, r4, #8
 800c280:	4628      	mov	r0, r5
 800c282:	f003 f847 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c286:	4006      	ands	r6, r0
 800c288:	f104 010c 	add.w	r1, r4, #12
 800c28c:	4628      	mov	r0, r5
 800c28e:	f7fc fb41 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c292:	f104 010d 	add.w	r1, r4, #13
 800c296:	ea06 0700 	and.w	r7, r6, r0
 800c29a:	4628      	mov	r0, r5
 800c29c:	f7fc fb0c 	bl	80088b8 <ucdr_deserialize_bool>
 800c2a0:	7b63      	ldrb	r3, [r4, #13]
 800c2a2:	4007      	ands	r7, r0
 800c2a4:	b93b      	cbnz	r3, 800c2b6 <uxr_deserialize_CLIENT_Representation+0x66>
 800c2a6:	f104 011c 	add.w	r1, r4, #28
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f7fc fc48 	bl	8008b40 <ucdr_deserialize_uint16_t>
 800c2b0:	4038      	ands	r0, r7
 800c2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b6:	f104 0110 	add.w	r1, r4, #16
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f7fc fe5a 	bl	8008f74 <ucdr_deserialize_uint32_t>
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d903      	bls.n	800c2ce <uxr_deserialize_CLIENT_Representation+0x7e>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	2700      	movs	r7, #0
 800c2ca:	75ab      	strb	r3, [r5, #22]
 800c2cc:	e7eb      	b.n	800c2a6 <uxr_deserialize_CLIENT_Representation+0x56>
 800c2ce:	b30b      	cbz	r3, 800c314 <uxr_deserialize_CLIENT_Representation+0xc4>
 800c2d0:	b1f0      	cbz	r0, 800c310 <uxr_deserialize_CLIENT_Representation+0xc0>
 800c2d2:	46a0      	mov	r8, r4
 800c2d4:	f04f 0900 	mov.w	r9, #0
 800c2d8:	e000      	b.n	800c2dc <uxr_deserialize_CLIENT_Representation+0x8c>
 800c2da:	b1ce      	cbz	r6, 800c310 <uxr_deserialize_CLIENT_Representation+0xc0>
 800c2dc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c2e0:	f108 0808 	add.w	r8, r8, #8
 800c2e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f003 f8e3 	bl	800f4b4 <ucdr_deserialize_string>
 800c2ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	f109 0901 	add.w	r9, r9, #1
 800c2fe:	f003 f8d9 	bl	800f4b4 <ucdr_deserialize_string>
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	4006      	ands	r6, r0
 800c306:	4599      	cmp	r9, r3
 800c308:	b2f6      	uxtb	r6, r6
 800c30a:	d3e6      	bcc.n	800c2da <uxr_deserialize_CLIENT_Representation+0x8a>
 800c30c:	4037      	ands	r7, r6
 800c30e:	e7ca      	b.n	800c2a6 <uxr_deserialize_CLIENT_Representation+0x56>
 800c310:	2700      	movs	r7, #0
 800c312:	e7c8      	b.n	800c2a6 <uxr_deserialize_CLIENT_Representation+0x56>
 800c314:	4007      	ands	r7, r0
 800c316:	e7c6      	b.n	800c2a6 <uxr_deserialize_CLIENT_Representation+0x56>

0800c318 <uxr_serialize_AGENT_Representation>:
 800c318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c31c:	2204      	movs	r2, #4
 800c31e:	460f      	mov	r7, r1
 800c320:	4605      	mov	r5, r0
 800c322:	f002 ff93 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c326:	4604      	mov	r4, r0
 800c328:	2202      	movs	r2, #2
 800c32a:	1d39      	adds	r1, r7, #4
 800c32c:	4628      	mov	r0, r5
 800c32e:	f002 ff8d 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c332:	4020      	ands	r0, r4
 800c334:	2202      	movs	r2, #2
 800c336:	1db9      	adds	r1, r7, #6
 800c338:	b2c4      	uxtb	r4, r0
 800c33a:	4628      	mov	r0, r5
 800c33c:	f002 ff86 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c340:	7a39      	ldrb	r1, [r7, #8]
 800c342:	4004      	ands	r4, r0
 800c344:	4628      	mov	r0, r5
 800c346:	f7fc faa1 	bl	800888c <ucdr_serialize_bool>
 800c34a:	7a3b      	ldrb	r3, [r7, #8]
 800c34c:	ea00 0804 	and.w	r8, r0, r4
 800c350:	b913      	cbnz	r3, 800c358 <uxr_serialize_AGENT_Representation+0x40>
 800c352:	4640      	mov	r0, r8
 800c354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c358:	68f9      	ldr	r1, [r7, #12]
 800c35a:	4628      	mov	r0, r5
 800c35c:	f7fc fcda 	bl	8008d14 <ucdr_serialize_uint32_t>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	b303      	cbz	r3, 800c3a6 <uxr_serialize_AGENT_Representation+0x8e>
 800c364:	b1d0      	cbz	r0, 800c39c <uxr_serialize_AGENT_Representation+0x84>
 800c366:	463e      	mov	r6, r7
 800c368:	f04f 0900 	mov.w	r9, #0
 800c36c:	e000      	b.n	800c370 <uxr_serialize_AGENT_Representation+0x58>
 800c36e:	b1ac      	cbz	r4, 800c39c <uxr_serialize_AGENT_Representation+0x84>
 800c370:	6931      	ldr	r1, [r6, #16]
 800c372:	4628      	mov	r0, r5
 800c374:	f003 f88e 	bl	800f494 <ucdr_serialize_string>
 800c378:	6971      	ldr	r1, [r6, #20]
 800c37a:	4604      	mov	r4, r0
 800c37c:	4628      	mov	r0, r5
 800c37e:	f003 f889 	bl	800f494 <ucdr_serialize_string>
 800c382:	f109 0901 	add.w	r9, r9, #1
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4004      	ands	r4, r0
 800c38a:	3608      	adds	r6, #8
 800c38c:	4599      	cmp	r9, r3
 800c38e:	b2e4      	uxtb	r4, r4
 800c390:	d3ed      	bcc.n	800c36e <uxr_serialize_AGENT_Representation+0x56>
 800c392:	ea08 0804 	and.w	r8, r8, r4
 800c396:	4640      	mov	r0, r8
 800c398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39c:	f04f 0800 	mov.w	r8, #0
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a6:	ea08 0800 	and.w	r8, r8, r0
 800c3aa:	e7d2      	b.n	800c352 <uxr_serialize_AGENT_Representation+0x3a>

0800c3ac <uxr_serialize_DATAWRITER_Representation>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	7809      	ldrb	r1, [r1, #0]
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	f7fc fa98 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	b130      	cbz	r0, 800c3ca <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c3bc:	782b      	ldrb	r3, [r5, #0]
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d00c      	beq.n	800c3dc <uxr_serialize_DATAWRITER_Representation+0x30>
 800c3c2:	2b03      	cmp	r3, #3
 800c3c4:	d010      	beq.n	800c3e8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d008      	beq.n	800c3dc <uxr_serialize_DATAWRITER_Representation+0x30>
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f002 ff3b 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c3d6:	4020      	ands	r0, r4
 800c3d8:	b2c0      	uxtb	r0, r0
 800c3da:	bd70      	pop	{r4, r5, r6, pc}
 800c3dc:	6869      	ldr	r1, [r5, #4]
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f003 f858 	bl	800f494 <ucdr_serialize_string>
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	e7f0      	b.n	800c3ca <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800c3f0:	3104      	adds	r1, #4
 800c3f2:	f003 f823 	bl	800f43c <ucdr_serialize_sequence_uint8_t>
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	e7e7      	b.n	800c3ca <uxr_serialize_DATAWRITER_Representation+0x1e>
 800c3fa:	bf00      	nop

0800c3fc <uxr_serialize_ObjectVariant.part.0>:
 800c3fc:	b570      	push	{r4, r5, r6, lr}
 800c3fe:	780b      	ldrb	r3, [r1, #0]
 800c400:	460c      	mov	r4, r1
 800c402:	4605      	mov	r5, r0
 800c404:	3b01      	subs	r3, #1
 800c406:	2b0d      	cmp	r3, #13
 800c408:	d854      	bhi.n	800c4b4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c40a:	e8df f003 	tbb	[pc, r3]
 800c40e:	0730      	.short	0x0730
 800c410:	07071b1b 	.word	0x07071b1b
 800c414:	0c530707 	.word	0x0c530707
 800c418:	494e0c0c 	.word	0x494e0c0c
 800c41c:	3104      	adds	r1, #4
 800c41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c422:	f7ff bfc3 	b.w	800c3ac <uxr_serialize_DATAWRITER_Representation>
 800c426:	7909      	ldrb	r1, [r1, #4]
 800c428:	f7fc fa5e 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c42c:	b1e8      	cbz	r0, 800c46a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800c42e:	7923      	ldrb	r3, [r4, #4]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d001      	beq.n	800c438 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800c434:	2b02      	cmp	r3, #2
 800c436:	d13d      	bne.n	800c4b4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800c438:	68a1      	ldr	r1, [r4, #8]
 800c43a:	4628      	mov	r0, r5
 800c43c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c440:	f003 b828 	b.w	800f494 <ucdr_serialize_string>
 800c444:	7909      	ldrb	r1, [r1, #4]
 800c446:	f7fc fa4f 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c44a:	4606      	mov	r6, r0
 800c44c:	b120      	cbz	r0, 800c458 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c44e:	7923      	ldrb	r3, [r4, #4]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d039      	beq.n	800c4c8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800c454:	2b03      	cmp	r3, #3
 800c456:	d02f      	beq.n	800c4b8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800c458:	2202      	movs	r2, #2
 800c45a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800c45e:	4628      	mov	r0, r5
 800c460:	f002 fef4 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c464:	4030      	ands	r0, r6
 800c466:	b2c0      	uxtb	r0, r0
 800c468:	bd70      	pop	{r4, r5, r6, pc}
 800c46a:	2000      	movs	r0, #0
 800c46c:	bd70      	pop	{r4, r5, r6, pc}
 800c46e:	7909      	ldrb	r1, [r1, #4]
 800c470:	f7fc fa3a 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c474:	4606      	mov	r6, r0
 800c476:	b158      	cbz	r0, 800c490 <uxr_serialize_ObjectVariant.part.0+0x94>
 800c478:	7923      	ldrb	r3, [r4, #4]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d003      	beq.n	800c486 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d028      	beq.n	800c4d4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800c482:	2b01      	cmp	r3, #1
 800c484:	d104      	bne.n	800c490 <uxr_serialize_ObjectVariant.part.0+0x94>
 800c486:	68a1      	ldr	r1, [r4, #8]
 800c488:	4628      	mov	r0, r5
 800c48a:	f003 f803 	bl	800f494 <ucdr_serialize_string>
 800c48e:	4606      	mov	r6, r0
 800c490:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800c494:	4628      	mov	r0, r5
 800c496:	f7fc ff63 	bl	8009360 <ucdr_serialize_int16_t>
 800c49a:	4030      	ands	r0, r6
 800c49c:	b2c0      	uxtb	r0, r0
 800c49e:	bd70      	pop	{r4, r5, r6, pc}
 800c4a0:	3104      	adds	r1, #4
 800c4a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4a6:	f7ff be7b 	b.w	800c1a0 <uxr_serialize_CLIENT_Representation>
 800c4aa:	3104      	adds	r1, #4
 800c4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4b0:	f7ff bf32 	b.w	800c318 <uxr_serialize_AGENT_Representation>
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	68a2      	ldr	r2, [r4, #8]
 800c4ba:	f104 010c 	add.w	r1, r4, #12
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f002 ffbc 	bl	800f43c <ucdr_serialize_sequence_uint8_t>
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	e7c7      	b.n	800c458 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c4c8:	68a1      	ldr	r1, [r4, #8]
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f002 ffe2 	bl	800f494 <ucdr_serialize_string>
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	e7c1      	b.n	800c458 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800c4d4:	68a2      	ldr	r2, [r4, #8]
 800c4d6:	f104 010c 	add.w	r1, r4, #12
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f002 ffae 	bl	800f43c <ucdr_serialize_sequence_uint8_t>
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	e7d5      	b.n	800c490 <uxr_serialize_ObjectVariant.part.0+0x94>

0800c4e4 <uxr_deserialize_DATAWRITER_Representation>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	f7fc fa13 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	b130      	cbz	r0, 800c500 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c4f2:	782b      	ldrb	r3, [r5, #0]
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d00c      	beq.n	800c512 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d012      	beq.n	800c522 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d008      	beq.n	800c512 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800c500:	2202      	movs	r2, #2
 800c502:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800c506:	4630      	mov	r0, r6
 800c508:	f002 ff04 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c50c:	4020      	ands	r0, r4
 800c50e:	b2c0      	uxtb	r0, r0
 800c510:	bd70      	pop	{r4, r5, r6, pc}
 800c512:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c516:	6869      	ldr	r1, [r5, #4]
 800c518:	4630      	mov	r0, r6
 800c51a:	f002 ffcb 	bl	800f4b4 <ucdr_deserialize_string>
 800c51e:	4604      	mov	r4, r0
 800c520:	e7ee      	b.n	800c500 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c522:	1d2b      	adds	r3, r5, #4
 800c524:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c528:	f105 0108 	add.w	r1, r5, #8
 800c52c:	4630      	mov	r0, r6
 800c52e:	f002 ff97 	bl	800f460 <ucdr_deserialize_sequence_uint8_t>
 800c532:	4604      	mov	r4, r0
 800c534:	e7e4      	b.n	800c500 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800c536:	bf00      	nop

0800c538 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	460d      	mov	r5, r1
 800c53c:	7809      	ldrb	r1, [r1, #0]
 800c53e:	4606      	mov	r6, r0
 800c540:	f7fc f9a4 	bl	800888c <ucdr_serialize_bool>
 800c544:	782b      	ldrb	r3, [r5, #0]
 800c546:	4604      	mov	r4, r0
 800c548:	b94b      	cbnz	r3, 800c55e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c54a:	7a29      	ldrb	r1, [r5, #8]
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7fc f99d 	bl	800888c <ucdr_serialize_bool>
 800c552:	7a2b      	ldrb	r3, [r5, #8]
 800c554:	4004      	ands	r4, r0
 800c556:	b2e4      	uxtb	r4, r4
 800c558:	b943      	cbnz	r3, 800c56c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c55a:	4620      	mov	r0, r4
 800c55c:	bd70      	pop	{r4, r5, r6, pc}
 800c55e:	6869      	ldr	r1, [r5, #4]
 800c560:	4630      	mov	r0, r6
 800c562:	f002 ff97 	bl	800f494 <ucdr_serialize_string>
 800c566:	4004      	ands	r4, r0
 800c568:	b2e4      	uxtb	r4, r4
 800c56a:	e7ee      	b.n	800c54a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c56c:	68e9      	ldr	r1, [r5, #12]
 800c56e:	4630      	mov	r0, r6
 800c570:	f002 ff90 	bl	800f494 <ucdr_serialize_string>
 800c574:	4004      	ands	r4, r0
 800c576:	4620      	mov	r0, r4
 800c578:	bd70      	pop	{r4, r5, r6, pc}
 800c57a:	bf00      	nop

0800c57c <uxr_serialize_OBJK_Topic_Binary>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	460d      	mov	r5, r1
 800c580:	4606      	mov	r6, r0
 800c582:	6809      	ldr	r1, [r1, #0]
 800c584:	f002 ff86 	bl	800f494 <ucdr_serialize_string>
 800c588:	4604      	mov	r4, r0
 800c58a:	7929      	ldrb	r1, [r5, #4]
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7fc f97d 	bl	800888c <ucdr_serialize_bool>
 800c592:	792b      	ldrb	r3, [r5, #4]
 800c594:	4004      	ands	r4, r0
 800c596:	b2e4      	uxtb	r4, r4
 800c598:	b943      	cbnz	r3, 800c5ac <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c59a:	7b29      	ldrb	r1, [r5, #12]
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7fc f975 	bl	800888c <ucdr_serialize_bool>
 800c5a2:	7b2b      	ldrb	r3, [r5, #12]
 800c5a4:	4004      	ands	r4, r0
 800c5a6:	b93b      	cbnz	r3, 800c5b8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	68a9      	ldr	r1, [r5, #8]
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f002 ff70 	bl	800f494 <ucdr_serialize_string>
 800c5b4:	4004      	ands	r4, r0
 800c5b6:	e7f0      	b.n	800c59a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c5b8:	6929      	ldr	r1, [r5, #16]
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f002 ff6a 	bl	800f494 <ucdr_serialize_string>
 800c5c0:	4004      	ands	r4, r0
 800c5c2:	b2e4      	uxtb	r4, r4
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}

0800c5c8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	7809      	ldrb	r1, [r1, #0]
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	f7fc f95b 	bl	800888c <ucdr_serialize_bool>
 800c5d6:	7823      	ldrb	r3, [r4, #0]
 800c5d8:	4605      	mov	r5, r0
 800c5da:	b96b      	cbnz	r3, 800c5f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c5dc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7fc f953 	bl	800888c <ucdr_serialize_bool>
 800c5e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c5ea:	4005      	ands	r5, r0
 800c5ec:	b2ed      	uxtb	r5, r5
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d169      	bne.n	800c6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	6861      	ldr	r1, [r4, #4]
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f7fc fb8a 	bl	8008d14 <ucdr_serialize_uint32_t>
 800c600:	6863      	ldr	r3, [r4, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d06b      	beq.n	800c6de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c606:	2800      	cmp	r0, #0
 800c608:	d067      	beq.n	800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c60a:	68a1      	ldr	r1, [r4, #8]
 800c60c:	4630      	mov	r0, r6
 800c60e:	f002 ff41 	bl	800f494 <ucdr_serialize_string>
 800c612:	6863      	ldr	r3, [r4, #4]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d953      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d05e      	beq.n	800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c61c:	68e1      	ldr	r1, [r4, #12]
 800c61e:	4630      	mov	r0, r6
 800c620:	f002 ff38 	bl	800f494 <ucdr_serialize_string>
 800c624:	6863      	ldr	r3, [r4, #4]
 800c626:	2b02      	cmp	r3, #2
 800c628:	d94a      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d055      	beq.n	800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c62e:	6921      	ldr	r1, [r4, #16]
 800c630:	4630      	mov	r0, r6
 800c632:	f002 ff2f 	bl	800f494 <ucdr_serialize_string>
 800c636:	6863      	ldr	r3, [r4, #4]
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d941      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d04c      	beq.n	800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c640:	6961      	ldr	r1, [r4, #20]
 800c642:	4630      	mov	r0, r6
 800c644:	f002 ff26 	bl	800f494 <ucdr_serialize_string>
 800c648:	6863      	ldr	r3, [r4, #4]
 800c64a:	2b04      	cmp	r3, #4
 800c64c:	d938      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d043      	beq.n	800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c652:	69a1      	ldr	r1, [r4, #24]
 800c654:	4630      	mov	r0, r6
 800c656:	f002 ff1d 	bl	800f494 <ucdr_serialize_string>
 800c65a:	6863      	ldr	r3, [r4, #4]
 800c65c:	2b05      	cmp	r3, #5
 800c65e:	d92f      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c660:	2800      	cmp	r0, #0
 800c662:	d03a      	beq.n	800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c664:	69e1      	ldr	r1, [r4, #28]
 800c666:	4630      	mov	r0, r6
 800c668:	f002 ff14 	bl	800f494 <ucdr_serialize_string>
 800c66c:	6863      	ldr	r3, [r4, #4]
 800c66e:	2b06      	cmp	r3, #6
 800c670:	d926      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c672:	b390      	cbz	r0, 800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c674:	6a21      	ldr	r1, [r4, #32]
 800c676:	4630      	mov	r0, r6
 800c678:	f002 ff0c 	bl	800f494 <ucdr_serialize_string>
 800c67c:	6863      	ldr	r3, [r4, #4]
 800c67e:	2b07      	cmp	r3, #7
 800c680:	d91e      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c682:	b350      	cbz	r0, 800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c684:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c686:	4630      	mov	r0, r6
 800c688:	f002 ff04 	bl	800f494 <ucdr_serialize_string>
 800c68c:	6863      	ldr	r3, [r4, #4]
 800c68e:	2b08      	cmp	r3, #8
 800c690:	d916      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c692:	b310      	cbz	r0, 800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c694:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c696:	4630      	mov	r0, r6
 800c698:	f002 fefc 	bl	800f494 <ucdr_serialize_string>
 800c69c:	6863      	ldr	r3, [r4, #4]
 800c69e:	2b09      	cmp	r3, #9
 800c6a0:	d90e      	bls.n	800c6c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c6a2:	b1d0      	cbz	r0, 800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c6a4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800c6a8:	2709      	movs	r7, #9
 800c6aa:	e000      	b.n	800c6ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c6ac:	b1a8      	cbz	r0, 800c6da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c6ae:	f858 1b04 	ldr.w	r1, [r8], #4
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f002 feee 	bl	800f494 <ucdr_serialize_string>
 800c6b8:	3701      	adds	r7, #1
 800c6ba:	6862      	ldr	r2, [r4, #4]
 800c6bc:	4297      	cmp	r7, r2
 800c6be:	d3f5      	bcc.n	800c6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c6c0:	4005      	ands	r5, r0
 800c6c2:	b2ed      	uxtb	r5, r5
 800c6c4:	e78a      	b.n	800c5dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c6c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c6c8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f002 feb5 	bl	800f43c <ucdr_serialize_sequence_uint8_t>
 800c6d2:	4005      	ands	r5, r0
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6da:	2500      	movs	r5, #0
 800c6dc:	e77e      	b.n	800c5dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c6de:	4028      	ands	r0, r5
 800c6e0:	b2c5      	uxtb	r5, r0
 800c6e2:	e77b      	b.n	800c5dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c6e4 <uxr_serialize_OBJK_Publisher_Binary>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	460d      	mov	r5, r1
 800c6e8:	7809      	ldrb	r1, [r1, #0]
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	f7fc f8ce 	bl	800888c <ucdr_serialize_bool>
 800c6f0:	782b      	ldrb	r3, [r5, #0]
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	b94b      	cbnz	r3, 800c70a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c6f6:	7a29      	ldrb	r1, [r5, #8]
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f7fc f8c7 	bl	800888c <ucdr_serialize_bool>
 800c6fe:	7a2b      	ldrb	r3, [r5, #8]
 800c700:	4004      	ands	r4, r0
 800c702:	b2e4      	uxtb	r4, r4
 800c704:	b943      	cbnz	r3, 800c718 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800c706:	4620      	mov	r0, r4
 800c708:	bd70      	pop	{r4, r5, r6, pc}
 800c70a:	6869      	ldr	r1, [r5, #4]
 800c70c:	4630      	mov	r0, r6
 800c70e:	f002 fec1 	bl	800f494 <ucdr_serialize_string>
 800c712:	4004      	ands	r4, r0
 800c714:	b2e4      	uxtb	r4, r4
 800c716:	e7ee      	b.n	800c6f6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800c718:	f105 010c 	add.w	r1, r5, #12
 800c71c:	4630      	mov	r0, r6
 800c71e:	f7ff ff53 	bl	800c5c8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c722:	4004      	ands	r4, r0
 800c724:	4620      	mov	r0, r4
 800c726:	bd70      	pop	{r4, r5, r6, pc}

0800c728 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800c728:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800c72c:	4688      	mov	r8, r1
 800c72e:	4681      	mov	r9, r0
 800c730:	8809      	ldrh	r1, [r1, #0]
 800c732:	f7fc f905 	bl	8008940 <ucdr_serialize_uint16_t>
 800c736:	4606      	mov	r6, r0
 800c738:	f898 1002 	ldrb.w	r1, [r8, #2]
 800c73c:	4648      	mov	r0, r9
 800c73e:	f7fc f8a5 	bl	800888c <ucdr_serialize_bool>
 800c742:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c746:	4006      	ands	r6, r0
 800c748:	b2f5      	uxtb	r5, r6
 800c74a:	b9eb      	cbnz	r3, 800c788 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800c74c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800c750:	4648      	mov	r0, r9
 800c752:	f7fc f89b 	bl	800888c <ucdr_serialize_bool>
 800c756:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c75a:	4005      	ands	r5, r0
 800c75c:	bb7b      	cbnz	r3, 800c7be <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800c75e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800c762:	4648      	mov	r0, r9
 800c764:	f7fc f892 	bl	800888c <ucdr_serialize_bool>
 800c768:	f898 300c 	ldrb.w	r3, [r8, #12]
 800c76c:	4005      	ands	r5, r0
 800c76e:	b9f3      	cbnz	r3, 800c7ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800c770:	f898 1014 	ldrb.w	r1, [r8, #20]
 800c774:	4648      	mov	r0, r9
 800c776:	f7fc f889 	bl	800888c <ucdr_serialize_bool>
 800c77a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800c77e:	4005      	ands	r5, r0
 800c780:	b94b      	cbnz	r3, 800c796 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800c782:	4628      	mov	r0, r5
 800c784:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c788:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800c78c:	4648      	mov	r0, r9
 800c78e:	f7fc f8d7 	bl	8008940 <ucdr_serialize_uint16_t>
 800c792:	4005      	ands	r5, r0
 800c794:	e7da      	b.n	800c74c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800c796:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c79a:	f108 011c 	add.w	r1, r8, #28
 800c79e:	4648      	mov	r0, r9
 800c7a0:	f002 fe4c 	bl	800f43c <ucdr_serialize_sequence_uint8_t>
 800c7a4:	4028      	ands	r0, r5
 800c7a6:	b2c5      	uxtb	r5, r0
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c7ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c7b2:	4648      	mov	r0, r9
 800c7b4:	f7fc faae 	bl	8008d14 <ucdr_serialize_uint32_t>
 800c7b8:	4028      	ands	r0, r5
 800c7ba:	b2c5      	uxtb	r5, r0
 800c7bc:	e7d8      	b.n	800c770 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800c7be:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c7c2:	4648      	mov	r0, r9
 800c7c4:	f7fc faa6 	bl	8008d14 <ucdr_serialize_uint32_t>
 800c7c8:	4028      	ands	r0, r5
 800c7ca:	b2c5      	uxtb	r5, r0
 800c7cc:	e7c7      	b.n	800c75e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800c7ce:	bf00      	nop

0800c7d0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	460d      	mov	r5, r1
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	f002 fd38 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800c7dc:	4604      	mov	r4, r0
 800c7de:	78a9      	ldrb	r1, [r5, #2]
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7fc f853 	bl	800888c <ucdr_serialize_bool>
 800c7e6:	78ab      	ldrb	r3, [r5, #2]
 800c7e8:	4004      	ands	r4, r0
 800c7ea:	b2e4      	uxtb	r4, r4
 800c7ec:	b90b      	cbnz	r3, 800c7f2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f2:	f105 0108 	add.w	r1, r5, #8
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7ff ff96 	bl	800c728 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800c802:	4630      	mov	r0, r6
 800c804:	f7fc f842 	bl	800888c <ucdr_serialize_bool>
 800c808:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800c80c:	4038      	ands	r0, r7
 800c80e:	b2c7      	uxtb	r7, r0
 800c810:	b913      	cbnz	r3, 800c818 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800c812:	403c      	ands	r4, r7
 800c814:	4620      	mov	r0, r4
 800c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c818:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7fc fccf 	bl	80091c0 <ucdr_serialize_uint64_t>
 800c822:	4007      	ands	r7, r0
 800c824:	e7f5      	b.n	800c812 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800c826:	bf00      	nop

0800c828 <uxr_deserialize_ObjectVariant>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	4605      	mov	r5, r0
 800c82c:	460e      	mov	r6, r1
 800c82e:	f7fc f871 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c832:	b168      	cbz	r0, 800c850 <uxr_deserialize_ObjectVariant+0x28>
 800c834:	7833      	ldrb	r3, [r6, #0]
 800c836:	4604      	mov	r4, r0
 800c838:	3b01      	subs	r3, #1
 800c83a:	2b0d      	cmp	r3, #13
 800c83c:	d809      	bhi.n	800c852 <uxr_deserialize_ObjectVariant+0x2a>
 800c83e:	e8df f003 	tbb	[pc, r3]
 800c842:	0a41      	.short	0x0a41
 800c844:	0a0a2323 	.word	0x0a0a2323
 800c848:	10080a0a 	.word	0x10080a0a
 800c84c:	565c1010 	.word	0x565c1010
 800c850:	2400      	movs	r4, #0
 800c852:	4620      	mov	r0, r4
 800c854:	bd70      	pop	{r4, r5, r6, pc}
 800c856:	1d31      	adds	r1, r6, #4
 800c858:	4628      	mov	r0, r5
 800c85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c85e:	f7ff be41 	b.w	800c4e4 <uxr_deserialize_DATAWRITER_Representation>
 800c862:	1d31      	adds	r1, r6, #4
 800c864:	4628      	mov	r0, r5
 800c866:	f7fc f855 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d0f0      	beq.n	800c850 <uxr_deserialize_ObjectVariant+0x28>
 800c86e:	7933      	ldrb	r3, [r6, #4]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d001      	beq.n	800c878 <uxr_deserialize_ObjectVariant+0x50>
 800c874:	2b02      	cmp	r3, #2
 800c876:	d1ec      	bne.n	800c852 <uxr_deserialize_ObjectVariant+0x2a>
 800c878:	68b1      	ldr	r1, [r6, #8]
 800c87a:	4628      	mov	r0, r5
 800c87c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c884:	f002 be16 	b.w	800f4b4 <ucdr_deserialize_string>
 800c888:	1d31      	adds	r1, r6, #4
 800c88a:	4628      	mov	r0, r5
 800c88c:	f7fc f842 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c890:	4604      	mov	r4, r0
 800c892:	b170      	cbz	r0, 800c8b2 <uxr_deserialize_ObjectVariant+0x8a>
 800c894:	7933      	ldrb	r3, [r6, #4]
 800c896:	2b02      	cmp	r3, #2
 800c898:	d04c      	beq.n	800c934 <uxr_deserialize_ObjectVariant+0x10c>
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d109      	bne.n	800c8b2 <uxr_deserialize_ObjectVariant+0x8a>
 800c89e:	f106 0308 	add.w	r3, r6, #8
 800c8a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8a6:	f106 010c 	add.w	r1, r6, #12
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f002 fdd8 	bl	800f460 <ucdr_deserialize_sequence_uint8_t>
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f002 fd2b 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c8be:	4020      	ands	r0, r4
 800c8c0:	b2c4      	uxtb	r4, r0
 800c8c2:	e7c6      	b.n	800c852 <uxr_deserialize_ObjectVariant+0x2a>
 800c8c4:	1d31      	adds	r1, r6, #4
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f7fc f824 	bl	8008914 <ucdr_deserialize_uint8_t>
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	b130      	cbz	r0, 800c8de <uxr_deserialize_ObjectVariant+0xb6>
 800c8d0:	7933      	ldrb	r3, [r6, #4]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d036      	beq.n	800c944 <uxr_deserialize_ObjectVariant+0x11c>
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d03c      	beq.n	800c954 <uxr_deserialize_ObjectVariant+0x12c>
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d032      	beq.n	800c944 <uxr_deserialize_ObjectVariant+0x11c>
 800c8de:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f7fc fdbc 	bl	8009460 <ucdr_deserialize_int16_t>
 800c8e8:	4020      	ands	r0, r4
 800c8ea:	b2c4      	uxtb	r4, r0
 800c8ec:	e7b1      	b.n	800c852 <uxr_deserialize_ObjectVariant+0x2a>
 800c8ee:	1d31      	adds	r1, r6, #4
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8f6:	f7ff bcab 	b.w	800c250 <uxr_deserialize_CLIENT_Representation>
 800c8fa:	2204      	movs	r2, #4
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	18b1      	adds	r1, r6, r2
 800c900:	f002 fd08 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c904:	4604      	mov	r4, r0
 800c906:	2202      	movs	r2, #2
 800c908:	f106 0108 	add.w	r1, r6, #8
 800c90c:	4628      	mov	r0, r5
 800c90e:	f002 fd01 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c912:	4004      	ands	r4, r0
 800c914:	2202      	movs	r2, #2
 800c916:	f106 010a 	add.w	r1, r6, #10
 800c91a:	4628      	mov	r0, r5
 800c91c:	b2e4      	uxtb	r4, r4
 800c91e:	f002 fcf9 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c922:	4603      	mov	r3, r0
 800c924:	f106 010c 	add.w	r1, r6, #12
 800c928:	4628      	mov	r0, r5
 800c92a:	401c      	ands	r4, r3
 800c92c:	f7fb ffc4 	bl	80088b8 <ucdr_deserialize_bool>
 800c930:	4004      	ands	r4, r0
 800c932:	e78e      	b.n	800c852 <uxr_deserialize_ObjectVariant+0x2a>
 800c934:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c938:	68b1      	ldr	r1, [r6, #8]
 800c93a:	4628      	mov	r0, r5
 800c93c:	f002 fdba 	bl	800f4b4 <ucdr_deserialize_string>
 800c940:	4604      	mov	r4, r0
 800c942:	e7b6      	b.n	800c8b2 <uxr_deserialize_ObjectVariant+0x8a>
 800c944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c948:	68b1      	ldr	r1, [r6, #8]
 800c94a:	4628      	mov	r0, r5
 800c94c:	f002 fdb2 	bl	800f4b4 <ucdr_deserialize_string>
 800c950:	4604      	mov	r4, r0
 800c952:	e7c4      	b.n	800c8de <uxr_deserialize_ObjectVariant+0xb6>
 800c954:	f106 0308 	add.w	r3, r6, #8
 800c958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c95c:	f106 010c 	add.w	r1, r6, #12
 800c960:	4628      	mov	r0, r5
 800c962:	f002 fd7d 	bl	800f460 <ucdr_deserialize_sequence_uint8_t>
 800c966:	4604      	mov	r4, r0
 800c968:	e7b9      	b.n	800c8de <uxr_deserialize_ObjectVariant+0xb6>
 800c96a:	bf00      	nop

0800c96c <uxr_deserialize_BaseObjectRequest>:
 800c96c:	b570      	push	{r4, r5, r6, lr}
 800c96e:	2202      	movs	r2, #2
 800c970:	4605      	mov	r5, r0
 800c972:	460e      	mov	r6, r1
 800c974:	f002 fcce 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c978:	2202      	movs	r2, #2
 800c97a:	4604      	mov	r4, r0
 800c97c:	4628      	mov	r0, r5
 800c97e:	18b1      	adds	r1, r6, r2
 800c980:	f002 fcc8 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800c984:	4020      	ands	r0, r4
 800c986:	b2c0      	uxtb	r0, r0
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	bf00      	nop

0800c98c <uxr_serialize_ActivityInfoVariant>:
 800c98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c990:	460e      	mov	r6, r1
 800c992:	7809      	ldrb	r1, [r1, #0]
 800c994:	4680      	mov	r8, r0
 800c996:	f7fb ffa7 	bl	80088e8 <ucdr_serialize_uint8_t>
 800c99a:	4607      	mov	r7, r0
 800c99c:	b138      	cbz	r0, 800c9ae <uxr_serialize_ActivityInfoVariant+0x22>
 800c99e:	7833      	ldrb	r3, [r6, #0]
 800c9a0:	2b06      	cmp	r3, #6
 800c9a2:	f000 8081 	beq.w	800caa8 <uxr_serialize_ActivityInfoVariant+0x11c>
 800c9a6:	2b0d      	cmp	r3, #13
 800c9a8:	d014      	beq.n	800c9d4 <uxr_serialize_ActivityInfoVariant+0x48>
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	d002      	beq.n	800c9b4 <uxr_serialize_ActivityInfoVariant+0x28>
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	f7fc fcd1 	bl	8009360 <ucdr_serialize_int16_t>
 800c9be:	4607      	mov	r7, r0
 800c9c0:	4640      	mov	r0, r8
 800c9c2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800c9c6:	f7fc fbfb 	bl	80091c0 <ucdr_serialize_uint64_t>
 800c9ca:	4038      	ands	r0, r7
 800c9cc:	b2c7      	uxtb	r7, r0
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800c9d8:	4640      	mov	r0, r8
 800c9da:	f7fc fcc1 	bl	8009360 <ucdr_serialize_int16_t>
 800c9de:	68f1      	ldr	r1, [r6, #12]
 800c9e0:	4607      	mov	r7, r0
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	f7fc f996 	bl	8008d14 <ucdr_serialize_uint32_t>
 800c9e8:	68f3      	ldr	r3, [r6, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0ed      	beq.n	800c9ca <uxr_serialize_ActivityInfoVariant+0x3e>
 800c9ee:	b318      	cbz	r0, 800ca38 <uxr_serialize_ActivityInfoVariant+0xac>
 800c9f0:	f106 090c 	add.w	r9, r6, #12
 800c9f4:	2400      	movs	r4, #0
 800c9f6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c9fa:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800c9fe:	7c29      	ldrb	r1, [r5, #16]
 800ca00:	4640      	mov	r0, r8
 800ca02:	f7fb ff71 	bl	80088e8 <ucdr_serialize_uint8_t>
 800ca06:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800ca0a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d051      	beq.n	800cab6 <uxr_serialize_ActivityInfoVariant+0x12a>
 800ca12:	7c2b      	ldrb	r3, [r5, #16]
 800ca14:	00c9      	lsls	r1, r1, #3
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d854      	bhi.n	800cac4 <uxr_serialize_ActivityInfoVariant+0x138>
 800ca1a:	e8df f003 	tbb	[pc, r3]
 800ca1e:	2133      	.short	0x2133
 800ca20:	020f      	.short	0x020f
 800ca22:	4449      	add	r1, r9
 800ca24:	4640      	mov	r0, r8
 800ca26:	6889      	ldr	r1, [r1, #8]
 800ca28:	f002 fd34 	bl	800f494 <ucdr_serialize_string>
 800ca2c:	3401      	adds	r4, #1
 800ca2e:	68f2      	ldr	r2, [r6, #12]
 800ca30:	4294      	cmp	r4, r2
 800ca32:	d244      	bcs.n	800cabe <uxr_serialize_ActivityInfoVariant+0x132>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d1de      	bne.n	800c9f6 <uxr_serialize_ActivityInfoVariant+0x6a>
 800ca38:	2700      	movs	r7, #0
 800ca3a:	e7b8      	b.n	800c9ae <uxr_serialize_ActivityInfoVariant+0x22>
 800ca3c:	3108      	adds	r1, #8
 800ca3e:	44a2      	add	sl, r4
 800ca40:	2210      	movs	r2, #16
 800ca42:	4640      	mov	r0, r8
 800ca44:	4449      	add	r1, r9
 800ca46:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800ca4a:	f002 fbff 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ca4e:	4605      	mov	r5, r0
 800ca50:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 800ca54:	4640      	mov	r0, r8
 800ca56:	f7fc f95d 	bl	8008d14 <ucdr_serialize_uint32_t>
 800ca5a:	4028      	ands	r0, r5
 800ca5c:	b2c0      	uxtb	r0, r0
 800ca5e:	e7e5      	b.n	800ca2c <uxr_serialize_ActivityInfoVariant+0xa0>
 800ca60:	3108      	adds	r1, #8
 800ca62:	44a2      	add	sl, r4
 800ca64:	2204      	movs	r2, #4
 800ca66:	4640      	mov	r0, r8
 800ca68:	4449      	add	r1, r9
 800ca6a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800ca6e:	f002 fbed 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ca72:	4605      	mov	r5, r0
 800ca74:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 800ca78:	4640      	mov	r0, r8
 800ca7a:	f7fb ff61 	bl	8008940 <ucdr_serialize_uint16_t>
 800ca7e:	4028      	ands	r0, r5
 800ca80:	b2c0      	uxtb	r0, r0
 800ca82:	e7d3      	b.n	800ca2c <uxr_serialize_ActivityInfoVariant+0xa0>
 800ca84:	3108      	adds	r1, #8
 800ca86:	44a2      	add	sl, r4
 800ca88:	2202      	movs	r2, #2
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	4449      	add	r1, r9
 800ca8e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800ca92:	f002 fbdb 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ca96:	4605      	mov	r5, r0
 800ca98:	f89a 1016 	ldrb.w	r1, [sl, #22]
 800ca9c:	4640      	mov	r0, r8
 800ca9e:	f7fb ff23 	bl	80088e8 <ucdr_serialize_uint8_t>
 800caa2:	4028      	ands	r0, r5
 800caa4:	b2c0      	uxtb	r0, r0
 800caa6:	e7c1      	b.n	800ca2c <uxr_serialize_ActivityInfoVariant+0xa0>
 800caa8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800caac:	4640      	mov	r0, r8
 800caae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab2:	f7fc bc55 	b.w	8009360 <ucdr_serialize_int16_t>
 800cab6:	3401      	adds	r4, #1
 800cab8:	68f2      	ldr	r2, [r6, #12]
 800caba:	42a2      	cmp	r2, r4
 800cabc:	d8bc      	bhi.n	800ca38 <uxr_serialize_ActivityInfoVariant+0xac>
 800cabe:	4007      	ands	r7, r0
 800cac0:	b2ff      	uxtb	r7, r7
 800cac2:	e774      	b.n	800c9ae <uxr_serialize_ActivityInfoVariant+0x22>
 800cac4:	3401      	adds	r4, #1
 800cac6:	68f3      	ldr	r3, [r6, #12]
 800cac8:	3518      	adds	r5, #24
 800caca:	429c      	cmp	r4, r3
 800cacc:	d397      	bcc.n	800c9fe <uxr_serialize_ActivityInfoVariant+0x72>
 800cace:	e76e      	b.n	800c9ae <uxr_serialize_ActivityInfoVariant+0x22>

0800cad0 <uxr_deserialize_BaseObjectReply>:
 800cad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad4:	2202      	movs	r2, #2
 800cad6:	4606      	mov	r6, r0
 800cad8:	460f      	mov	r7, r1
 800cada:	f002 fc1b 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cade:	2202      	movs	r2, #2
 800cae0:	4605      	mov	r5, r0
 800cae2:	4630      	mov	r0, r6
 800cae4:	18b9      	adds	r1, r7, r2
 800cae6:	f002 fc15 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800caea:	4680      	mov	r8, r0
 800caec:	1d39      	adds	r1, r7, #4
 800caee:	4630      	mov	r0, r6
 800caf0:	f7fb ff10 	bl	8008914 <ucdr_deserialize_uint8_t>
 800caf4:	ea05 0508 	and.w	r5, r5, r8
 800caf8:	4604      	mov	r4, r0
 800cafa:	1d79      	adds	r1, r7, #5
 800cafc:	4630      	mov	r0, r6
 800cafe:	402c      	ands	r4, r5
 800cb00:	f7fb ff08 	bl	8008914 <ucdr_deserialize_uint8_t>
 800cb04:	4020      	ands	r0, r4
 800cb06:	b2c0      	uxtb	r0, r0
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb0c <uxr_serialize_ReadSpecification>:
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	460e      	mov	r6, r1
 800cb10:	4607      	mov	r7, r0
 800cb12:	7809      	ldrb	r1, [r1, #0]
 800cb14:	f7fb fee8 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cb18:	4604      	mov	r4, r0
 800cb1a:	7871      	ldrb	r1, [r6, #1]
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f7fb fee3 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cb22:	4004      	ands	r4, r0
 800cb24:	78b1      	ldrb	r1, [r6, #2]
 800cb26:	4638      	mov	r0, r7
 800cb28:	f7fb feb0 	bl	800888c <ucdr_serialize_bool>
 800cb2c:	78b3      	ldrb	r3, [r6, #2]
 800cb2e:	b2e4      	uxtb	r4, r4
 800cb30:	4004      	ands	r4, r0
 800cb32:	b943      	cbnz	r3, 800cb46 <uxr_serialize_ReadSpecification+0x3a>
 800cb34:	7a31      	ldrb	r1, [r6, #8]
 800cb36:	4638      	mov	r0, r7
 800cb38:	f7fb fea8 	bl	800888c <ucdr_serialize_bool>
 800cb3c:	7a33      	ldrb	r3, [r6, #8]
 800cb3e:	4004      	ands	r4, r0
 800cb40:	b93b      	cbnz	r3, 800cb52 <uxr_serialize_ReadSpecification+0x46>
 800cb42:	4620      	mov	r0, r4
 800cb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb46:	6871      	ldr	r1, [r6, #4]
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f002 fca3 	bl	800f494 <ucdr_serialize_string>
 800cb4e:	4004      	ands	r4, r0
 800cb50:	e7f0      	b.n	800cb34 <uxr_serialize_ReadSpecification+0x28>
 800cb52:	8971      	ldrh	r1, [r6, #10]
 800cb54:	4638      	mov	r0, r7
 800cb56:	f7fb fef3 	bl	8008940 <ucdr_serialize_uint16_t>
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	89b1      	ldrh	r1, [r6, #12]
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f7fb feee 	bl	8008940 <ucdr_serialize_uint16_t>
 800cb64:	4005      	ands	r5, r0
 800cb66:	89f1      	ldrh	r1, [r6, #14]
 800cb68:	4638      	mov	r0, r7
 800cb6a:	b2ed      	uxtb	r5, r5
 800cb6c:	f7fb fee8 	bl	8008940 <ucdr_serialize_uint16_t>
 800cb70:	8a31      	ldrh	r1, [r6, #16]
 800cb72:	4025      	ands	r5, r4
 800cb74:	4604      	mov	r4, r0
 800cb76:	4638      	mov	r0, r7
 800cb78:	4025      	ands	r5, r4
 800cb7a:	f7fb fee1 	bl	8008940 <ucdr_serialize_uint16_t>
 800cb7e:	ea00 0405 	and.w	r4, r0, r5
 800cb82:	4620      	mov	r0, r4
 800cb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb86:	bf00      	nop

0800cb88 <uxr_serialize_CREATE_CLIENT_Payload>:
 800cb88:	f7ff bb0a 	b.w	800c1a0 <uxr_serialize_CLIENT_Representation>

0800cb8c <uxr_serialize_CREATE_Payload>:
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	2202      	movs	r2, #2
 800cb90:	4607      	mov	r7, r0
 800cb92:	460e      	mov	r6, r1
 800cb94:	f002 fb5a 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cb98:	2202      	movs	r2, #2
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	4638      	mov	r0, r7
 800cb9e:	18b1      	adds	r1, r6, r2
 800cba0:	f002 fb54 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cba4:	7931      	ldrb	r1, [r6, #4]
 800cba6:	4604      	mov	r4, r0
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f7fb fe9d 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cbae:	b170      	cbz	r0, 800cbce <uxr_serialize_CREATE_Payload+0x42>
 800cbb0:	7933      	ldrb	r3, [r6, #4]
 800cbb2:	402c      	ands	r4, r5
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	b2e4      	uxtb	r4, r4
 800cbb8:	2b0d      	cmp	r3, #13
 800cbba:	d809      	bhi.n	800cbd0 <uxr_serialize_CREATE_Payload+0x44>
 800cbbc:	e8df f003 	tbb	[pc, r3]
 800cbc0:	23230a4c 	.word	0x23230a4c
 800cbc4:	0a0a0a0a 	.word	0x0a0a0a0a
 800cbc8:	12121208 	.word	0x12121208
 800cbcc:	3e45      	.short	0x3e45
 800cbce:	2400      	movs	r4, #0
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbd4:	f106 0108 	add.w	r1, r6, #8
 800cbd8:	4638      	mov	r0, r7
 800cbda:	f7ff fbe7 	bl	800c3ac <uxr_serialize_DATAWRITER_Representation>
 800cbde:	4004      	ands	r4, r0
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe4:	7a31      	ldrb	r1, [r6, #8]
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	f7fb fe7e 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d0ee      	beq.n	800cbce <uxr_serialize_CREATE_Payload+0x42>
 800cbf0:	7a33      	ldrb	r3, [r6, #8]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d001      	beq.n	800cbfa <uxr_serialize_CREATE_Payload+0x6e>
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d1ea      	bne.n	800cbd0 <uxr_serialize_CREATE_Payload+0x44>
 800cbfa:	68f1      	ldr	r1, [r6, #12]
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f002 fc49 	bl	800f494 <ucdr_serialize_string>
 800cc02:	4004      	ands	r4, r0
 800cc04:	e7e4      	b.n	800cbd0 <uxr_serialize_CREATE_Payload+0x44>
 800cc06:	7a31      	ldrb	r1, [r6, #8]
 800cc08:	4638      	mov	r0, r7
 800cc0a:	f7fb fe6d 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cc0e:	4605      	mov	r5, r0
 800cc10:	b158      	cbz	r0, 800cc2a <uxr_serialize_CREATE_Payload+0x9e>
 800cc12:	7a33      	ldrb	r3, [r6, #8]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d034      	beq.n	800cc82 <uxr_serialize_CREATE_Payload+0xf6>
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	d106      	bne.n	800cc2a <uxr_serialize_CREATE_Payload+0x9e>
 800cc1c:	68f2      	ldr	r2, [r6, #12]
 800cc1e:	f106 0110 	add.w	r1, r6, #16
 800cc22:	4638      	mov	r0, r7
 800cc24:	f002 fc0a 	bl	800f43c <ucdr_serialize_sequence_uint8_t>
 800cc28:	4605      	mov	r5, r0
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800cc30:	4638      	mov	r0, r7
 800cc32:	f002 fb0b 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cc36:	4028      	ands	r0, r5
 800cc38:	4004      	ands	r4, r0
 800cc3a:	e7c9      	b.n	800cbd0 <uxr_serialize_CREATE_Payload+0x44>
 800cc3c:	f106 0108 	add.w	r1, r6, #8
 800cc40:	4638      	mov	r0, r7
 800cc42:	f7ff faad 	bl	800c1a0 <uxr_serialize_CLIENT_Representation>
 800cc46:	4004      	ands	r4, r0
 800cc48:	e7c2      	b.n	800cbd0 <uxr_serialize_CREATE_Payload+0x44>
 800cc4a:	f106 0108 	add.w	r1, r6, #8
 800cc4e:	4638      	mov	r0, r7
 800cc50:	f7ff fb62 	bl	800c318 <uxr_serialize_AGENT_Representation>
 800cc54:	4004      	ands	r4, r0
 800cc56:	e7bb      	b.n	800cbd0 <uxr_serialize_CREATE_Payload+0x44>
 800cc58:	7a31      	ldrb	r1, [r6, #8]
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f7fb fe44 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cc60:	4605      	mov	r5, r0
 800cc62:	b130      	cbz	r0, 800cc72 <uxr_serialize_CREATE_Payload+0xe6>
 800cc64:	7a33      	ldrb	r3, [r6, #8]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d011      	beq.n	800cc8e <uxr_serialize_CREATE_Payload+0x102>
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d015      	beq.n	800cc9a <uxr_serialize_CREATE_Payload+0x10e>
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d00d      	beq.n	800cc8e <uxr_serialize_CREATE_Payload+0x102>
 800cc72:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800cc76:	4638      	mov	r0, r7
 800cc78:	f7fc fb72 	bl	8009360 <ucdr_serialize_int16_t>
 800cc7c:	4028      	ands	r0, r5
 800cc7e:	4004      	ands	r4, r0
 800cc80:	e7a6      	b.n	800cbd0 <uxr_serialize_CREATE_Payload+0x44>
 800cc82:	68f1      	ldr	r1, [r6, #12]
 800cc84:	4638      	mov	r0, r7
 800cc86:	f002 fc05 	bl	800f494 <ucdr_serialize_string>
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	e7cd      	b.n	800cc2a <uxr_serialize_CREATE_Payload+0x9e>
 800cc8e:	68f1      	ldr	r1, [r6, #12]
 800cc90:	4638      	mov	r0, r7
 800cc92:	f002 fbff 	bl	800f494 <ucdr_serialize_string>
 800cc96:	4605      	mov	r5, r0
 800cc98:	e7eb      	b.n	800cc72 <uxr_serialize_CREATE_Payload+0xe6>
 800cc9a:	68f2      	ldr	r2, [r6, #12]
 800cc9c:	f106 0110 	add.w	r1, r6, #16
 800cca0:	4638      	mov	r0, r7
 800cca2:	f002 fbcb 	bl	800f43c <ucdr_serialize_sequence_uint8_t>
 800cca6:	4605      	mov	r5, r0
 800cca8:	e7e3      	b.n	800cc72 <uxr_serialize_CREATE_Payload+0xe6>
 800ccaa:	bf00      	nop

0800ccac <uxr_deserialize_GET_INFO_Payload>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	2202      	movs	r2, #2
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	460e      	mov	r6, r1
 800ccb4:	f002 fb2e 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800ccb8:	2202      	movs	r2, #2
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	18b1      	adds	r1, r6, r2
 800ccc0:	f002 fb28 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	1d31      	adds	r1, r6, #4
 800ccc8:	4628      	mov	r0, r5
 800ccca:	401c      	ands	r4, r3
 800cccc:	f7fc f952 	bl	8008f74 <ucdr_deserialize_uint32_t>
 800ccd0:	b2e4      	uxtb	r4, r4
 800ccd2:	4020      	ands	r0, r4
 800ccd4:	bd70      	pop	{r4, r5, r6, pc}
 800ccd6:	bf00      	nop

0800ccd8 <uxr_serialize_DELETE_Payload>:
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	2202      	movs	r2, #2
 800ccdc:	4605      	mov	r5, r0
 800ccde:	460e      	mov	r6, r1
 800cce0:	f002 fab4 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cce4:	2202      	movs	r2, #2
 800cce6:	4604      	mov	r4, r0
 800cce8:	4628      	mov	r0, r5
 800ccea:	18b1      	adds	r1, r6, r2
 800ccec:	f002 faae 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ccf0:	4020      	ands	r0, r4
 800ccf2:	b2c0      	uxtb	r0, r0
 800ccf4:	bd70      	pop	{r4, r5, r6, pc}
 800ccf6:	bf00      	nop

0800ccf8 <uxr_deserialize_STATUS_AGENT_Payload>:
 800ccf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccfc:	460e      	mov	r6, r1
 800ccfe:	4605      	mov	r5, r0
 800cd00:	f7fb fe08 	bl	8008914 <ucdr_deserialize_uint8_t>
 800cd04:	4604      	mov	r4, r0
 800cd06:	1c71      	adds	r1, r6, #1
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f7fb fe03 	bl	8008914 <ucdr_deserialize_uint8_t>
 800cd0e:	2204      	movs	r2, #4
 800cd10:	4681      	mov	r9, r0
 800cd12:	4628      	mov	r0, r5
 800cd14:	18b1      	adds	r1, r6, r2
 800cd16:	f002 fafd 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cd1a:	f106 0108 	add.w	r1, r6, #8
 800cd1e:	4680      	mov	r8, r0
 800cd20:	2202      	movs	r2, #2
 800cd22:	4628      	mov	r0, r5
 800cd24:	f002 faf6 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cd28:	ea04 0309 	and.w	r3, r4, r9
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	2202      	movs	r2, #2
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	f106 010a 	add.w	r1, r6, #10
 800cd36:	4628      	mov	r0, r5
 800cd38:	ea03 0408 	and.w	r4, r3, r8
 800cd3c:	f002 faea 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cd40:	4603      	mov	r3, r0
 800cd42:	4628      	mov	r0, r5
 800cd44:	403c      	ands	r4, r7
 800cd46:	f106 010c 	add.w	r1, r6, #12
 800cd4a:	461d      	mov	r5, r3
 800cd4c:	f7fb fdb4 	bl	80088b8 <ucdr_deserialize_bool>
 800cd50:	4025      	ands	r5, r4
 800cd52:	4028      	ands	r0, r5
 800cd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cd58 <uxr_deserialize_STATUS_Payload>:
 800cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5c:	2202      	movs	r2, #2
 800cd5e:	4606      	mov	r6, r0
 800cd60:	460f      	mov	r7, r1
 800cd62:	f002 fad7 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cd66:	2202      	movs	r2, #2
 800cd68:	4605      	mov	r5, r0
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	18b9      	adds	r1, r7, r2
 800cd6e:	f002 fad1 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cd72:	4680      	mov	r8, r0
 800cd74:	1d39      	adds	r1, r7, #4
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7fb fdcc 	bl	8008914 <ucdr_deserialize_uint8_t>
 800cd7c:	ea05 0508 	and.w	r5, r5, r8
 800cd80:	4604      	mov	r4, r0
 800cd82:	1d79      	adds	r1, r7, #5
 800cd84:	4630      	mov	r0, r6
 800cd86:	402c      	ands	r4, r5
 800cd88:	f7fb fdc4 	bl	8008914 <ucdr_deserialize_uint8_t>
 800cd8c:	4020      	ands	r0, r4
 800cd8e:	b2c0      	uxtb	r0, r0
 800cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cd94 <uxr_serialize_INFO_Payload>:
 800cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd98:	2202      	movs	r2, #2
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	f002 fa55 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cda2:	2202      	movs	r2, #2
 800cda4:	4680      	mov	r8, r0
 800cda6:	4628      	mov	r0, r5
 800cda8:	18a1      	adds	r1, r4, r2
 800cdaa:	f002 fa4f 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800cdae:	4607      	mov	r7, r0
 800cdb0:	7921      	ldrb	r1, [r4, #4]
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f7fb fd98 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cdb8:	ea08 0807 	and.w	r8, r8, r7
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	7961      	ldrb	r1, [r4, #5]
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	ea06 0608 	and.w	r6, r6, r8
 800cdc6:	f7fb fd8f 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cdca:	7a21      	ldrb	r1, [r4, #8]
 800cdcc:	4030      	ands	r0, r6
 800cdce:	b2c7      	uxtb	r7, r0
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f7fb fd5b 	bl	800888c <ucdr_serialize_bool>
 800cdd6:	7a23      	ldrb	r3, [r4, #8]
 800cdd8:	4606      	mov	r6, r0
 800cdda:	b96b      	cbnz	r3, 800cdf8 <uxr_serialize_INFO_Payload+0x64>
 800cddc:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7fb fd53 	bl	800888c <ucdr_serialize_bool>
 800cde6:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800cdea:	4030      	ands	r0, r6
 800cdec:	b2c6      	uxtb	r6, r0
 800cdee:	b983      	cbnz	r3, 800ce12 <uxr_serialize_INFO_Payload+0x7e>
 800cdf0:	ea06 0007 	and.w	r0, r6, r7
 800cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf8:	7b21      	ldrb	r1, [r4, #12]
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f7fb fd74 	bl	80088e8 <ucdr_serialize_uint8_t>
 800ce00:	b188      	cbz	r0, 800ce26 <uxr_serialize_INFO_Payload+0x92>
 800ce02:	f104 010c 	add.w	r1, r4, #12
 800ce06:	4628      	mov	r0, r5
 800ce08:	f7ff faf8 	bl	800c3fc <uxr_serialize_ObjectVariant.part.0>
 800ce0c:	4030      	ands	r0, r6
 800ce0e:	b2c6      	uxtb	r6, r0
 800ce10:	e7e4      	b.n	800cddc <uxr_serialize_INFO_Payload+0x48>
 800ce12:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800ce16:	4628      	mov	r0, r5
 800ce18:	f7ff fdb8 	bl	800c98c <uxr_serialize_ActivityInfoVariant>
 800ce1c:	4006      	ands	r6, r0
 800ce1e:	ea06 0007 	and.w	r0, r6, r7
 800ce22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce26:	4606      	mov	r6, r0
 800ce28:	e7d8      	b.n	800cddc <uxr_serialize_INFO_Payload+0x48>
 800ce2a:	bf00      	nop

0800ce2c <uxr_serialize_READ_DATA_Payload>:
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	2202      	movs	r2, #2
 800ce30:	4605      	mov	r5, r0
 800ce32:	460e      	mov	r6, r1
 800ce34:	f002 fa0a 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ce38:	2202      	movs	r2, #2
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	18b1      	adds	r1, r6, r2
 800ce40:	f002 fa04 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ce44:	4603      	mov	r3, r0
 800ce46:	1d31      	adds	r1, r6, #4
 800ce48:	4628      	mov	r0, r5
 800ce4a:	401c      	ands	r4, r3
 800ce4c:	f7ff fe5e 	bl	800cb0c <uxr_serialize_ReadSpecification>
 800ce50:	b2e4      	uxtb	r4, r4
 800ce52:	4020      	ands	r0, r4
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
 800ce56:	bf00      	nop

0800ce58 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	460e      	mov	r6, r1
 800ce60:	f002 f9f4 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ce64:	2202      	movs	r2, #2
 800ce66:	4604      	mov	r4, r0
 800ce68:	4628      	mov	r0, r5
 800ce6a:	18b1      	adds	r1, r6, r2
 800ce6c:	f002 f9ee 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ce70:	4020      	ands	r0, r4
 800ce72:	b2c0      	uxtb	r0, r0
 800ce74:	bd70      	pop	{r4, r5, r6, pc}
 800ce76:	bf00      	nop

0800ce78 <uxr_serialize_ACKNACK_Payload>:
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	460e      	mov	r6, r1
 800ce80:	f834 1b02 	ldrh.w	r1, [r4], #2
 800ce84:	f7fb fd5c 	bl	8008940 <ucdr_serialize_uint16_t>
 800ce88:	2202      	movs	r2, #2
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f002 f9dc 	bl	800f24c <ucdr_serialize_array_uint8_t>
 800ce94:	4603      	mov	r3, r0
 800ce96:	7931      	ldrb	r1, [r6, #4]
 800ce98:	4628      	mov	r0, r5
 800ce9a:	401c      	ands	r4, r3
 800ce9c:	f7fb fd24 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cea0:	b2e4      	uxtb	r4, r4
 800cea2:	4020      	ands	r0, r4
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
 800cea6:	bf00      	nop

0800cea8 <uxr_deserialize_ACKNACK_Payload>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	460e      	mov	r6, r1
 800ceac:	4605      	mov	r5, r0
 800ceae:	f7fb fe47 	bl	8008b40 <ucdr_deserialize_uint16_t>
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	18b1      	adds	r1, r6, r2
 800ceba:	f002 fa2b 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cebe:	4603      	mov	r3, r0
 800cec0:	1d31      	adds	r1, r6, #4
 800cec2:	4628      	mov	r0, r5
 800cec4:	401c      	ands	r4, r3
 800cec6:	f7fb fd25 	bl	8008914 <ucdr_deserialize_uint8_t>
 800ceca:	b2e4      	uxtb	r4, r4
 800cecc:	4020      	ands	r0, r4
 800cece:	bd70      	pop	{r4, r5, r6, pc}

0800ced0 <uxr_serialize_HEARTBEAT_Payload>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	460d      	mov	r5, r1
 800ced4:	4606      	mov	r6, r0
 800ced6:	8809      	ldrh	r1, [r1, #0]
 800ced8:	f7fb fd32 	bl	8008940 <ucdr_serialize_uint16_t>
 800cedc:	8869      	ldrh	r1, [r5, #2]
 800cede:	4604      	mov	r4, r0
 800cee0:	4630      	mov	r0, r6
 800cee2:	f7fb fd2d 	bl	8008940 <ucdr_serialize_uint16_t>
 800cee6:	4603      	mov	r3, r0
 800cee8:	7929      	ldrb	r1, [r5, #4]
 800ceea:	4630      	mov	r0, r6
 800ceec:	401c      	ands	r4, r3
 800ceee:	f7fb fcfb 	bl	80088e8 <ucdr_serialize_uint8_t>
 800cef2:	b2e4      	uxtb	r4, r4
 800cef4:	4020      	ands	r0, r4
 800cef6:	bd70      	pop	{r4, r5, r6, pc}

0800cef8 <uxr_deserialize_HEARTBEAT_Payload>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	460e      	mov	r6, r1
 800cefc:	4605      	mov	r5, r0
 800cefe:	f7fb fe1f 	bl	8008b40 <ucdr_deserialize_uint16_t>
 800cf02:	4604      	mov	r4, r0
 800cf04:	1cb1      	adds	r1, r6, #2
 800cf06:	4628      	mov	r0, r5
 800cf08:	f7fb fe1a 	bl	8008b40 <ucdr_deserialize_uint16_t>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	1d31      	adds	r1, r6, #4
 800cf10:	4628      	mov	r0, r5
 800cf12:	401c      	ands	r4, r3
 800cf14:	f7fb fcfe 	bl	8008914 <ucdr_deserialize_uint8_t>
 800cf18:	b2e4      	uxtb	r4, r4
 800cf1a:	4020      	ands	r0, r4
 800cf1c:	bd70      	pop	{r4, r5, r6, pc}
 800cf1e:	bf00      	nop

0800cf20 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800cf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf24:	460e      	mov	r6, r1
 800cf26:	4605      	mov	r5, r0
 800cf28:	f7fc fb0e 	bl	8009548 <ucdr_deserialize_int32_t>
 800cf2c:	4607      	mov	r7, r0
 800cf2e:	1d31      	adds	r1, r6, #4
 800cf30:	4628      	mov	r0, r5
 800cf32:	f7fc f81f 	bl	8008f74 <ucdr_deserialize_uint32_t>
 800cf36:	4680      	mov	r8, r0
 800cf38:	f106 0108 	add.w	r1, r6, #8
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f7fc fb03 	bl	8009548 <ucdr_deserialize_int32_t>
 800cf42:	ea07 0708 	and.w	r7, r7, r8
 800cf46:	4604      	mov	r4, r0
 800cf48:	f106 010c 	add.w	r1, r6, #12
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	403c      	ands	r4, r7
 800cf50:	f7fc f810 	bl	8008f74 <ucdr_deserialize_uint32_t>
 800cf54:	f106 0110 	add.w	r1, r6, #16
 800cf58:	4004      	ands	r4, r0
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	f7fc faf4 	bl	8009548 <ucdr_deserialize_int32_t>
 800cf60:	4603      	mov	r3, r0
 800cf62:	b2e4      	uxtb	r4, r4
 800cf64:	4628      	mov	r0, r5
 800cf66:	461d      	mov	r5, r3
 800cf68:	f106 0114 	add.w	r1, r6, #20
 800cf6c:	f7fc f802 	bl	8008f74 <ucdr_deserialize_uint32_t>
 800cf70:	402c      	ands	r4, r5
 800cf72:	4020      	ands	r0, r4
 800cf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf78 <uxr_deserialize_SampleIdentity>:
 800cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	460d      	mov	r5, r1
 800cf80:	220c      	movs	r2, #12
 800cf82:	f002 f9c7 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cf86:	2203      	movs	r2, #3
 800cf88:	f105 010c 	add.w	r1, r5, #12
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f002 f9c0 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 800cf94:	f105 010f 	add.w	r1, r5, #15
 800cf98:	4680      	mov	r8, r0
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f7fb fcba 	bl	8008914 <ucdr_deserialize_uint8_t>
 800cfa0:	f105 0110 	add.w	r1, r5, #16
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f7fc face 	bl	8009548 <ucdr_deserialize_int32_t>
 800cfac:	ea07 0708 	and.w	r7, r7, r8
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	403e      	ands	r6, r7
 800cfb6:	f105 0114 	add.w	r1, r5, #20
 800cfba:	461c      	mov	r4, r3
 800cfbc:	f7fb ffda 	bl	8008f74 <ucdr_deserialize_uint32_t>
 800cfc0:	4034      	ands	r4, r6
 800cfc2:	4020      	ands	r0, r4
 800cfc4:	b2c0      	uxtb	r0, r0
 800cfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfca:	bf00      	nop

0800cfcc <rcl_convert_rmw_ret_to_rcl_ret>:
 800cfcc:	280b      	cmp	r0, #11
 800cfce:	dc0d      	bgt.n	800cfec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	db09      	blt.n	800cfe8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800cfd4:	280b      	cmp	r0, #11
 800cfd6:	d807      	bhi.n	800cfe8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800cfd8:	e8df f000 	tbb	[pc, r0]
 800cfdc:	07060607 	.word	0x07060607
 800cfe0:	06060606 	.word	0x06060606
 800cfe4:	07070606 	.word	0x07070606
 800cfe8:	2001      	movs	r0, #1
 800cfea:	4770      	bx	lr
 800cfec:	28cb      	cmp	r0, #203	; 0xcb
 800cfee:	bf18      	it	ne
 800cff0:	2001      	movne	r0, #1
 800cff2:	4770      	bx	lr

0800cff4 <rcl_get_zero_initialized_context>:
 800cff4:	4a03      	ldr	r2, [pc, #12]	; (800d004 <rcl_get_zero_initialized_context+0x10>)
 800cff6:	4603      	mov	r3, r0
 800cff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cffc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d000:	4618      	mov	r0, r3
 800d002:	4770      	bx	lr
 800d004:	08014d9c 	.word	0x08014d9c

0800d008 <rcl_context_is_valid>:
 800d008:	b118      	cbz	r0, 800d012 <rcl_context_is_valid+0xa>
 800d00a:	6840      	ldr	r0, [r0, #4]
 800d00c:	3800      	subs	r0, #0
 800d00e:	bf18      	it	ne
 800d010:	2001      	movne	r0, #1
 800d012:	4770      	bx	lr

0800d014 <__cleanup_context>:
 800d014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d018:	4606      	mov	r6, r0
 800d01a:	2300      	movs	r3, #0
 800d01c:	6800      	ldr	r0, [r0, #0]
 800d01e:	6073      	str	r3, [r6, #4]
 800d020:	2800      	cmp	r0, #0
 800d022:	d049      	beq.n	800d0b8 <__cleanup_context+0xa4>
 800d024:	6947      	ldr	r7, [r0, #20]
 800d026:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d02a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d02e:	b137      	cbz	r7, 800d03e <__cleanup_context+0x2a>
 800d030:	3014      	adds	r0, #20
 800d032:	f000 f9e7 	bl	800d404 <rcl_init_options_fini>
 800d036:	4607      	mov	r7, r0
 800d038:	2800      	cmp	r0, #0
 800d03a:	d144      	bne.n	800d0c6 <__cleanup_context+0xb2>
 800d03c:	6830      	ldr	r0, [r6, #0]
 800d03e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d040:	b143      	cbz	r3, 800d054 <__cleanup_context+0x40>
 800d042:	3028      	adds	r0, #40	; 0x28
 800d044:	f001 fe16 	bl	800ec74 <rmw_context_fini>
 800d048:	b118      	cbz	r0, 800d052 <__cleanup_context+0x3e>
 800d04a:	2f00      	cmp	r7, #0
 800d04c:	d03e      	beq.n	800d0cc <__cleanup_context+0xb8>
 800d04e:	f7fc fe07 	bl	8009c60 <rcutils_reset_error>
 800d052:	6830      	ldr	r0, [r6, #0]
 800d054:	6a03      	ldr	r3, [r0, #32]
 800d056:	b1db      	cbz	r3, 800d090 <__cleanup_context+0x7c>
 800d058:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800d05c:	2a01      	cmp	r2, #1
 800d05e:	f17c 0100 	sbcs.w	r1, ip, #0
 800d062:	db11      	blt.n	800d088 <__cleanup_context+0x74>
 800d064:	2400      	movs	r4, #0
 800d066:	4625      	mov	r5, r4
 800d068:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d06c:	4649      	mov	r1, r9
 800d06e:	b1b8      	cbz	r0, 800d0a0 <__cleanup_context+0x8c>
 800d070:	47c0      	blx	r8
 800d072:	6833      	ldr	r3, [r6, #0]
 800d074:	3401      	adds	r4, #1
 800d076:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800d07a:	f145 0500 	adc.w	r5, r5, #0
 800d07e:	6a1b      	ldr	r3, [r3, #32]
 800d080:	4294      	cmp	r4, r2
 800d082:	eb75 010c 	sbcs.w	r1, r5, ip
 800d086:	dbef      	blt.n	800d068 <__cleanup_context+0x54>
 800d088:	4618      	mov	r0, r3
 800d08a:	4649      	mov	r1, r9
 800d08c:	47c0      	blx	r8
 800d08e:	6830      	ldr	r0, [r6, #0]
 800d090:	4649      	mov	r1, r9
 800d092:	47c0      	blx	r8
 800d094:	2300      	movs	r3, #0
 800d096:	4638      	mov	r0, r7
 800d098:	e9c6 3300 	strd	r3, r3, [r6]
 800d09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a0:	3401      	adds	r4, #1
 800d0a2:	f145 0500 	adc.w	r5, r5, #0
 800d0a6:	4294      	cmp	r4, r2
 800d0a8:	eb75 010c 	sbcs.w	r1, r5, ip
 800d0ac:	dbdc      	blt.n	800d068 <__cleanup_context+0x54>
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	47c0      	blx	r8
 800d0b4:	6830      	ldr	r0, [r6, #0]
 800d0b6:	e7eb      	b.n	800d090 <__cleanup_context+0x7c>
 800d0b8:	4607      	mov	r7, r0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	4638      	mov	r0, r7
 800d0be:	e9c6 3300 	strd	r3, r3, [r6]
 800d0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c6:	f7fc fdcb 	bl	8009c60 <rcutils_reset_error>
 800d0ca:	e7b7      	b.n	800d03c <__cleanup_context+0x28>
 800d0cc:	f7ff ff7e 	bl	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	e7bc      	b.n	800d04e <__cleanup_context+0x3a>

0800d0d4 <rcl_init>:
 800d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	1e05      	subs	r5, r0, #0
 800d0da:	b0a7      	sub	sp, #156	; 0x9c
 800d0dc:	460e      	mov	r6, r1
 800d0de:	4690      	mov	r8, r2
 800d0e0:	461f      	mov	r7, r3
 800d0e2:	f340 80a0 	ble.w	800d226 <rcl_init+0x152>
 800d0e6:	2900      	cmp	r1, #0
 800d0e8:	f000 80a0 	beq.w	800d22c <rcl_init+0x158>
 800d0ec:	f1a1 0e04 	sub.w	lr, r1, #4
 800d0f0:	f04f 0c00 	mov.w	ip, #0
 800d0f4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800d0f8:	f10c 0c01 	add.w	ip, ip, #1
 800d0fc:	2c00      	cmp	r4, #0
 800d0fe:	f000 8095 	beq.w	800d22c <rcl_init+0x158>
 800d102:	4565      	cmp	r5, ip
 800d104:	d1f6      	bne.n	800d0f4 <rcl_init+0x20>
 800d106:	f1b8 0f00 	cmp.w	r8, #0
 800d10a:	f000 808f 	beq.w	800d22c <rcl_init+0x158>
 800d10e:	f8d8 4000 	ldr.w	r4, [r8]
 800d112:	2c00      	cmp	r4, #0
 800d114:	f000 808a 	beq.w	800d22c <rcl_init+0x158>
 800d118:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800d11c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d11e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	a821      	add	r0, sp, #132	; 0x84
 800d126:	f8cc 3000 	str.w	r3, [ip]
 800d12a:	f7fc fd73 	bl	8009c14 <rcutils_allocator_is_valid>
 800d12e:	f080 0001 	eor.w	r0, r0, #1
 800d132:	b2c0      	uxtb	r0, r0
 800d134:	2800      	cmp	r0, #0
 800d136:	d179      	bne.n	800d22c <rcl_init+0x158>
 800d138:	2f00      	cmp	r7, #0
 800d13a:	d077      	beq.n	800d22c <rcl_init+0x158>
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d179      	bne.n	800d236 <rcl_init+0x162>
 800d142:	2198      	movs	r1, #152	; 0x98
 800d144:	2001      	movs	r0, #1
 800d146:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800d14a:	4798      	blx	r3
 800d14c:	4604      	mov	r4, r0
 800d14e:	6038      	str	r0, [r7, #0]
 800d150:	2800      	cmp	r0, #0
 800d152:	f000 80cd 	beq.w	800d2f0 <rcl_init+0x21c>
 800d156:	a802      	add	r0, sp, #8
 800d158:	f001 f9e2 	bl	800e520 <rmw_get_zero_initialized_context>
 800d15c:	a902      	add	r1, sp, #8
 800d15e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d162:	2270      	movs	r2, #112	; 0x70
 800d164:	f004 fc1c 	bl	80119a0 <memcpy>
 800d168:	f8d7 e000 	ldr.w	lr, [r7]
 800d16c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800d170:	4674      	mov	r4, lr
 800d172:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d178:	f8dc 3000 	ldr.w	r3, [ip]
 800d17c:	f10e 0114 	add.w	r1, lr, #20
 800d180:	4640      	mov	r0, r8
 800d182:	6023      	str	r3, [r4, #0]
 800d184:	f000 f968 	bl	800d458 <rcl_init_options_copy>
 800d188:	4604      	mov	r4, r0
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d144      	bne.n	800d218 <rcl_init+0x144>
 800d18e:	f8d7 9000 	ldr.w	r9, [r7]
 800d192:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800d196:	f8c9 0020 	str.w	r0, [r9, #32]
 800d19a:	f8c9 5018 	str.w	r5, [r9, #24]
 800d19e:	f8c9 a01c 	str.w	sl, [r9, #28]
 800d1a2:	2d00      	cmp	r5, #0
 800d1a4:	d04e      	beq.n	800d244 <rcl_init+0x170>
 800d1a6:	2e00      	cmp	r6, #0
 800d1a8:	d04c      	beq.n	800d244 <rcl_init+0x170>
 800d1aa:	2104      	movs	r1, #4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800d1b2:	4798      	blx	r3
 800d1b4:	f8c9 0020 	str.w	r0, [r9, #32]
 800d1b8:	f8d7 9000 	ldr.w	r9, [r7]
 800d1bc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800d1c0:	46cb      	mov	fp, r9
 800d1c2:	b343      	cbz	r3, 800d216 <rcl_init+0x142>
 800d1c4:	2d01      	cmp	r5, #1
 800d1c6:	f17a 0300 	sbcs.w	r3, sl, #0
 800d1ca:	db3b      	blt.n	800d244 <rcl_init+0x170>
 800d1cc:	2400      	movs	r4, #0
 800d1ce:	3e04      	subs	r6, #4
 800d1d0:	46a1      	mov	r9, r4
 800d1d2:	e00b      	b.n	800d1ec <rcl_init+0x118>
 800d1d4:	6831      	ldr	r1, [r6, #0]
 800d1d6:	f004 fbe3 	bl	80119a0 <memcpy>
 800d1da:	3401      	adds	r4, #1
 800d1dc:	f149 0900 	adc.w	r9, r9, #0
 800d1e0:	45ca      	cmp	sl, r9
 800d1e2:	bf08      	it	eq
 800d1e4:	42a5      	cmpeq	r5, r4
 800d1e6:	d02b      	beq.n	800d240 <rcl_init+0x16c>
 800d1e8:	f8d7 b000 	ldr.w	fp, [r7]
 800d1ec:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800d1f0:	f7f3 f880 	bl	80002f4 <strlen>
 800d1f4:	1c42      	adds	r2, r0, #1
 800d1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	9925      	ldr	r1, [sp, #148]	; 0x94
 800d1fc:	f8db b020 	ldr.w	fp, [fp, #32]
 800d200:	9201      	str	r2, [sp, #4]
 800d202:	4798      	blx	r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800d20a:	6a1b      	ldr	r3, [r3, #32]
 800d20c:	9a01      	ldr	r2, [sp, #4]
 800d20e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d212:	2800      	cmp	r0, #0
 800d214:	d1de      	bne.n	800d1d4 <rcl_init+0x100>
 800d216:	240a      	movs	r4, #10
 800d218:	4638      	mov	r0, r7
 800d21a:	f7ff fefb 	bl	800d014 <__cleanup_context>
 800d21e:	4620      	mov	r0, r4
 800d220:	b027      	add	sp, #156	; 0x9c
 800d222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d226:	2900      	cmp	r1, #0
 800d228:	f43f af6d 	beq.w	800d106 <rcl_init+0x32>
 800d22c:	240b      	movs	r4, #11
 800d22e:	4620      	mov	r0, r4
 800d230:	b027      	add	sp, #156	; 0x9c
 800d232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d236:	2464      	movs	r4, #100	; 0x64
 800d238:	4620      	mov	r0, r4
 800d23a:	b027      	add	sp, #156	; 0x9c
 800d23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d240:	f8d7 9000 	ldr.w	r9, [r7]
 800d244:	493f      	ldr	r1, [pc, #252]	; (800d344 <rcl_init+0x270>)
 800d246:	680b      	ldr	r3, [r1, #0]
 800d248:	3301      	adds	r3, #1
 800d24a:	d04c      	beq.n	800d2e6 <rcl_init+0x212>
 800d24c:	461a      	mov	r2, r3
 800d24e:	2000      	movs	r0, #0
 800d250:	600b      	str	r3, [r1, #0]
 800d252:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800d256:	607b      	str	r3, [r7, #4]
 800d258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d25a:	3301      	adds	r3, #1
 800d25c:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800d260:	d05d      	beq.n	800d31e <rcl_init+0x24a>
 800d262:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800d266:	2b00      	cmp	r3, #0
 800d268:	d044      	beq.n	800d2f4 <rcl_init+0x220>
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d04e      	beq.n	800d30c <rcl_init+0x238>
 800d26e:	f8d8 3000 	ldr.w	r3, [r8]
 800d272:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800d276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d05a      	beq.n	800d334 <rcl_init+0x260>
 800d27e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d280:	b953      	cbnz	r3, 800d298 <rcl_init+0x1c4>
 800d282:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800d286:	2801      	cmp	r0, #1
 800d288:	d008      	beq.n	800d29c <rcl_init+0x1c8>
 800d28a:	a921      	add	r1, sp, #132	; 0x84
 800d28c:	4630      	mov	r0, r6
 800d28e:	f003 fd01 	bl	8010c94 <rcl_get_discovery_static_peers>
 800d292:	4604      	mov	r4, r0
 800d294:	2800      	cmp	r0, #0
 800d296:	d1bf      	bne.n	800d218 <rcl_init+0x144>
 800d298:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800d29c:	f003 fcf0 	bl	8010c80 <rcl_automatic_discovery_range_to_string>
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	aa20      	add	r2, sp, #128	; 0x80
 800d2a4:	a91f      	add	r1, sp, #124	; 0x7c
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d2aa:	f000 fdf3 	bl	800de94 <rcl_validate_enclave_name>
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d1b1      	bne.n	800d218 <rcl_init+0x144>
 800d2b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d2b6:	bb83      	cbnz	r3, 800d31a <rcl_init+0x246>
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	694b      	ldr	r3, [r1, #20]
 800d2bc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d2c0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d2c2:	f000 fc97 	bl	800dbf4 <rcl_get_security_options_from_environment>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d1a5      	bne.n	800d218 <rcl_init+0x144>
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	6948      	ldr	r0, [r1, #20]
 800d2d0:	3128      	adds	r1, #40	; 0x28
 800d2d2:	3018      	adds	r0, #24
 800d2d4:	f001 fb98 	bl	800ea08 <rmw_init>
 800d2d8:	4604      	mov	r4, r0
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d0a7      	beq.n	800d22e <rcl_init+0x15a>
 800d2de:	f7ff fe75 	bl	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	e798      	b.n	800d218 <rcl_init+0x144>
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	600a      	str	r2, [r1, #0]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	e7b0      	b.n	800d252 <rcl_init+0x17e>
 800d2f0:	240a      	movs	r4, #10
 800d2f2:	e79c      	b.n	800d22e <rcl_init+0x15a>
 800d2f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800d2f8:	f000 f90c 	bl	800d514 <rcl_get_localhost_only>
 800d2fc:	4604      	mov	r4, r0
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d18a      	bne.n	800d218 <rcl_init+0x144>
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800d308:	6955      	ldr	r5, [r2, #20]
 800d30a:	e7ae      	b.n	800d26a <rcl_init+0x196>
 800d30c:	2302      	movs	r3, #2
 800d30e:	2200      	movs	r2, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800d316:	63ea      	str	r2, [r5, #60]	; 0x3c
 800d318:	e7c0      	b.n	800d29c <rcl_init+0x1c8>
 800d31a:	2401      	movs	r4, #1
 800d31c:	e77c      	b.n	800d218 <rcl_init+0x144>
 800d31e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800d322:	f003 fd1d 	bl	8010d60 <rcl_get_default_domain_id>
 800d326:	4604      	mov	r4, r0
 800d328:	2800      	cmp	r0, #0
 800d32a:	f47f af75 	bne.w	800d218 <rcl_init+0x144>
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	695d      	ldr	r5, [r3, #20]
 800d332:	e796      	b.n	800d262 <rcl_init+0x18e>
 800d334:	4630      	mov	r0, r6
 800d336:	f003 fc61 	bl	8010bfc <rcl_get_automatic_discovery_range>
 800d33a:	4604      	mov	r4, r0
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d09e      	beq.n	800d27e <rcl_init+0x1aa>
 800d340:	e76a      	b.n	800d218 <rcl_init+0x144>
 800d342:	bf00      	nop
 800d344:	2000dd44 	.word	0x2000dd44

0800d348 <rcl_get_zero_initialized_init_options>:
 800d348:	2000      	movs	r0, #0
 800d34a:	4770      	bx	lr

0800d34c <rcl_init_options_init>:
 800d34c:	b084      	sub	sp, #16
 800d34e:	b570      	push	{r4, r5, r6, lr}
 800d350:	b09e      	sub	sp, #120	; 0x78
 800d352:	ad23      	add	r5, sp, #140	; 0x8c
 800d354:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d358:	2800      	cmp	r0, #0
 800d35a:	d046      	beq.n	800d3ea <rcl_init_options_init+0x9e>
 800d35c:	6803      	ldr	r3, [r0, #0]
 800d35e:	4604      	mov	r4, r0
 800d360:	b133      	cbz	r3, 800d370 <rcl_init_options_init+0x24>
 800d362:	2564      	movs	r5, #100	; 0x64
 800d364:	4628      	mov	r0, r5
 800d366:	b01e      	add	sp, #120	; 0x78
 800d368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d36c:	b004      	add	sp, #16
 800d36e:	4770      	bx	lr
 800d370:	4628      	mov	r0, r5
 800d372:	f7fc fc4f 	bl	8009c14 <rcutils_allocator_is_valid>
 800d376:	2800      	cmp	r0, #0
 800d378:	d037      	beq.n	800d3ea <rcl_init_options_init+0x9e>
 800d37a:	46ae      	mov	lr, r5
 800d37c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800d380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d388:	f8de 3000 	ldr.w	r3, [lr]
 800d38c:	2070      	movs	r0, #112	; 0x70
 800d38e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d390:	f8cc 3000 	str.w	r3, [ip]
 800d394:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d396:	4798      	blx	r3
 800d398:	4606      	mov	r6, r0
 800d39a:	6020      	str	r0, [r4, #0]
 800d39c:	b338      	cbz	r0, 800d3ee <rcl_init_options_init+0xa2>
 800d39e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800d3a2:	4686      	mov	lr, r0
 800d3a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d3ac:	f8dc 3000 	ldr.w	r3, [ip]
 800d3b0:	a802      	add	r0, sp, #8
 800d3b2:	f8ce 3000 	str.w	r3, [lr]
 800d3b6:	f001 f8c7 	bl	800e548 <rmw_get_zero_initialized_init_options>
 800d3ba:	2258      	movs	r2, #88	; 0x58
 800d3bc:	a902      	add	r1, sp, #8
 800d3be:	f106 0018 	add.w	r0, r6, #24
 800d3c2:	f004 faed 	bl	80119a0 <memcpy>
 800d3c6:	ab26      	add	r3, sp, #152	; 0x98
 800d3c8:	6826      	ldr	r6, [r4, #0]
 800d3ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d3ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d3d2:	f106 0018 	add.w	r0, r6, #24
 800d3d6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800d3da:	f001 fa45 	bl	800e868 <rmw_init_options_init>
 800d3de:	4605      	mov	r5, r0
 800d3e0:	b938      	cbnz	r0, 800d3f2 <rcl_init_options_init+0xa6>
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 800d3e8:	e7bc      	b.n	800d364 <rcl_init_options_init+0x18>
 800d3ea:	250b      	movs	r5, #11
 800d3ec:	e7ba      	b.n	800d364 <rcl_init_options_init+0x18>
 800d3ee:	250a      	movs	r5, #10
 800d3f0:	e7b8      	b.n	800d364 <rcl_init_options_init+0x18>
 800d3f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d3f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d3f6:	6820      	ldr	r0, [r4, #0]
 800d3f8:	4798      	blx	r3
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7ff fde6 	bl	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>
 800d400:	4605      	mov	r5, r0
 800d402:	e7af      	b.n	800d364 <rcl_init_options_init+0x18>

0800d404 <rcl_init_options_fini>:
 800d404:	b530      	push	{r4, r5, lr}
 800d406:	b087      	sub	sp, #28
 800d408:	b1f0      	cbz	r0, 800d448 <rcl_init_options_fini+0x44>
 800d40a:	6803      	ldr	r3, [r0, #0]
 800d40c:	4604      	mov	r4, r0
 800d40e:	b1db      	cbz	r3, 800d448 <rcl_init_options_fini+0x44>
 800d410:	469c      	mov	ip, r3
 800d412:	f10d 0e04 	add.w	lr, sp, #4
 800d416:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d41a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d41e:	f8dc 3000 	ldr.w	r3, [ip]
 800d422:	a801      	add	r0, sp, #4
 800d424:	f8ce 3000 	str.w	r3, [lr]
 800d428:	f7fc fbf4 	bl	8009c14 <rcutils_allocator_is_valid>
 800d42c:	b160      	cbz	r0, 800d448 <rcl_init_options_fini+0x44>
 800d42e:	6820      	ldr	r0, [r4, #0]
 800d430:	3018      	adds	r0, #24
 800d432:	f001 fab3 	bl	800e99c <rmw_init_options_fini>
 800d436:	4605      	mov	r5, r0
 800d438:	b950      	cbnz	r0, 800d450 <rcl_init_options_fini+0x4c>
 800d43a:	6820      	ldr	r0, [r4, #0]
 800d43c:	9b02      	ldr	r3, [sp, #8]
 800d43e:	9905      	ldr	r1, [sp, #20]
 800d440:	4798      	blx	r3
 800d442:	4628      	mov	r0, r5
 800d444:	b007      	add	sp, #28
 800d446:	bd30      	pop	{r4, r5, pc}
 800d448:	250b      	movs	r5, #11
 800d44a:	4628      	mov	r0, r5
 800d44c:	b007      	add	sp, #28
 800d44e:	bd30      	pop	{r4, r5, pc}
 800d450:	f7ff fdbc 	bl	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>
 800d454:	4605      	mov	r5, r0
 800d456:	e7f8      	b.n	800d44a <rcl_init_options_fini+0x46>

0800d458 <rcl_init_options_copy>:
 800d458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d45a:	b09d      	sub	sp, #116	; 0x74
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d04d      	beq.n	800d4fc <rcl_init_options_copy+0xa4>
 800d460:	4604      	mov	r4, r0
 800d462:	6800      	ldr	r0, [r0, #0]
 800d464:	2800      	cmp	r0, #0
 800d466:	d049      	beq.n	800d4fc <rcl_init_options_copy+0xa4>
 800d468:	460d      	mov	r5, r1
 800d46a:	f7fc fbd3 	bl	8009c14 <rcutils_allocator_is_valid>
 800d46e:	2d00      	cmp	r5, #0
 800d470:	d044      	beq.n	800d4fc <rcl_init_options_copy+0xa4>
 800d472:	f080 0001 	eor.w	r0, r0, #1
 800d476:	b2c0      	uxtb	r0, r0
 800d478:	2800      	cmp	r0, #0
 800d47a:	d13f      	bne.n	800d4fc <rcl_init_options_copy+0xa4>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	b11b      	cbz	r3, 800d488 <rcl_init_options_copy+0x30>
 800d480:	2464      	movs	r4, #100	; 0x64
 800d482:	4620      	mov	r0, r4
 800d484:	b01d      	add	sp, #116	; 0x74
 800d486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d488:	6826      	ldr	r6, [r4, #0]
 800d48a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800d48e:	46b6      	mov	lr, r6
 800d490:	6837      	ldr	r7, [r6, #0]
 800d492:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d49a:	f8de 3000 	ldr.w	r3, [lr]
 800d49e:	2070      	movs	r0, #112	; 0x70
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f8cc 3000 	str.w	r3, [ip]
 800d4a6:	47b8      	blx	r7
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	6028      	str	r0, [r5, #0]
 800d4ac:	b350      	cbz	r0, 800d504 <rcl_init_options_copy+0xac>
 800d4ae:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800d4b2:	4686      	mov	lr, r0
 800d4b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4bc:	f8dc 3000 	ldr.w	r3, [ip]
 800d4c0:	4668      	mov	r0, sp
 800d4c2:	f8ce 3000 	str.w	r3, [lr]
 800d4c6:	f001 f83f 	bl	800e548 <rmw_get_zero_initialized_init_options>
 800d4ca:	2258      	movs	r2, #88	; 0x58
 800d4cc:	4669      	mov	r1, sp
 800d4ce:	f106 0018 	add.w	r0, r6, #24
 800d4d2:	f004 fa65 	bl	80119a0 <memcpy>
 800d4d6:	6820      	ldr	r0, [r4, #0]
 800d4d8:	6829      	ldr	r1, [r5, #0]
 800d4da:	3018      	adds	r0, #24
 800d4dc:	3118      	adds	r1, #24
 800d4de:	f001 fa2b 	bl	800e938 <rmw_init_options_copy>
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d0cc      	beq.n	800d482 <rcl_init_options_copy+0x2a>
 800d4e8:	f7fc fba2 	bl	8009c30 <rcutils_get_error_string>
 800d4ec:	f7fc fbb8 	bl	8009c60 <rcutils_reset_error>
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f7ff ff87 	bl	800d404 <rcl_init_options_fini>
 800d4f6:	b138      	cbz	r0, 800d508 <rcl_init_options_copy+0xb0>
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	e7c2      	b.n	800d482 <rcl_init_options_copy+0x2a>
 800d4fc:	240b      	movs	r4, #11
 800d4fe:	4620      	mov	r0, r4
 800d500:	b01d      	add	sp, #116	; 0x74
 800d502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d504:	240a      	movs	r4, #10
 800d506:	e7bc      	b.n	800d482 <rcl_init_options_copy+0x2a>
 800d508:	4620      	mov	r0, r4
 800d50a:	b01d      	add	sp, #116	; 0x74
 800d50c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d510:	f7ff bd5c 	b.w	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>

0800d514 <rcl_get_localhost_only>:
 800d514:	b510      	push	{r4, lr}
 800d516:	2300      	movs	r3, #0
 800d518:	b082      	sub	sp, #8
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	b1c0      	cbz	r0, 800d550 <rcl_get_localhost_only+0x3c>
 800d51e:	4604      	mov	r4, r0
 800d520:	a901      	add	r1, sp, #4
 800d522:	480d      	ldr	r0, [pc, #52]	; (800d558 <rcl_get_localhost_only+0x44>)
 800d524:	f000 fcfe 	bl	800df24 <rcutils_get_env>
 800d528:	b110      	cbz	r0, 800d530 <rcl_get_localhost_only+0x1c>
 800d52a:	2001      	movs	r0, #1
 800d52c:	b002      	add	sp, #8
 800d52e:	bd10      	pop	{r4, pc}
 800d530:	9b01      	ldr	r3, [sp, #4]
 800d532:	b10b      	cbz	r3, 800d538 <rcl_get_localhost_only+0x24>
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	b923      	cbnz	r3, 800d542 <rcl_get_localhost_only+0x2e>
 800d538:	2300      	movs	r3, #0
 800d53a:	4618      	mov	r0, r3
 800d53c:	7023      	strb	r3, [r4, #0]
 800d53e:	b002      	add	sp, #8
 800d540:	bd10      	pop	{r4, pc}
 800d542:	2b31      	cmp	r3, #49	; 0x31
 800d544:	bf0c      	ite	eq
 800d546:	2301      	moveq	r3, #1
 800d548:	2302      	movne	r3, #2
 800d54a:	7023      	strb	r3, [r4, #0]
 800d54c:	b002      	add	sp, #8
 800d54e:	bd10      	pop	{r4, pc}
 800d550:	200b      	movs	r0, #11
 800d552:	b002      	add	sp, #8
 800d554:	bd10      	pop	{r4, pc}
 800d556:	bf00      	nop
 800d558:	08014da4 	.word	0x08014da4

0800d55c <rcl_get_zero_initialized_node>:
 800d55c:	4a03      	ldr	r2, [pc, #12]	; (800d56c <rcl_get_zero_initialized_node+0x10>)
 800d55e:	4603      	mov	r3, r0
 800d560:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d564:	e883 0003 	stmia.w	r3, {r0, r1}
 800d568:	4618      	mov	r0, r3
 800d56a:	4770      	bx	lr
 800d56c:	08014de8 	.word	0x08014de8

0800d570 <rcl_node_init>:
 800d570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	b0ab      	sub	sp, #172	; 0xac
 800d576:	4604      	mov	r4, r0
 800d578:	460e      	mov	r6, r1
 800d57a:	4615      	mov	r5, r2
 800d57c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 800d580:	a825      	add	r0, sp, #148	; 0x94
 800d582:	461f      	mov	r7, r3
 800d584:	f003 fe12 	bl	80111ac <rcl_guard_condition_get_default_options>
 800d588:	f1b8 0f00 	cmp.w	r8, #0
 800d58c:	f000 80f3 	beq.w	800d776 <rcl_node_init+0x206>
 800d590:	4640      	mov	r0, r8
 800d592:	f7fc fb3f 	bl	8009c14 <rcutils_allocator_is_valid>
 800d596:	2d00      	cmp	r5, #0
 800d598:	bf18      	it	ne
 800d59a:	2c00      	cmpne	r4, #0
 800d59c:	f080 0001 	eor.w	r0, r0, #1
 800d5a0:	bf0c      	ite	eq
 800d5a2:	f04f 0c01 	moveq.w	ip, #1
 800d5a6:	f04f 0c00 	movne.w	ip, #0
 800d5aa:	2e00      	cmp	r6, #0
 800d5ac:	bf08      	it	eq
 800d5ae:	f04c 0c01 	orreq.w	ip, ip, #1
 800d5b2:	ea4c 0c00 	orr.w	ip, ip, r0
 800d5b6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800d5ba:	f040 80dc 	bne.w	800d776 <rcl_node_init+0x206>
 800d5be:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800d5c2:	f1ba 0f00 	cmp.w	sl, #0
 800d5c6:	f040 80fc 	bne.w	800d7c2 <rcl_node_init+0x252>
 800d5ca:	2f00      	cmp	r7, #0
 800d5cc:	f000 80d3 	beq.w	800d776 <rcl_node_init+0x206>
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	f7ff fd19 	bl	800d008 <rcl_context_is_valid>
 800d5d6:	4683      	mov	fp, r0
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	f000 80d2 	beq.w	800d782 <rcl_node_init+0x212>
 800d5de:	4652      	mov	r2, sl
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	a924      	add	r1, sp, #144	; 0x90
 800d5e4:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 800d5e8:	f001 f8b4 	bl	800e754 <rmw_validate_node_name>
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	f040 80c3 	bne.w	800d77a <rcl_node_init+0x20a>
 800d5f4:	9824      	ldr	r0, [sp, #144]	; 0x90
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f040 80f1 	bne.w	800d7de <rcl_node_init+0x26e>
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f7f2 fe79 	bl	80002f4 <strlen>
 800d602:	2800      	cmp	r0, #0
 800d604:	f040 80c0 	bne.w	800d788 <rcl_node_init+0x218>
 800d608:	4d79      	ldr	r5, [pc, #484]	; (800d7f0 <rcl_node_init+0x280>)
 800d60a:	a924      	add	r1, sp, #144	; 0x90
 800d60c:	2200      	movs	r2, #0
 800d60e:	4628      	mov	r0, r5
 800d610:	f001 f882 	bl	800e718 <rmw_validate_namespace>
 800d614:	4682      	mov	sl, r0
 800d616:	2800      	cmp	r0, #0
 800d618:	f040 80af 	bne.w	800d77a <rcl_node_init+0x20a>
 800d61c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800d61e:	2800      	cmp	r0, #0
 800d620:	f040 80d5 	bne.w	800d7ce <rcl_node_init+0x25e>
 800d624:	f8d8 3000 	ldr.w	r3, [r8]
 800d628:	2080      	movs	r0, #128	; 0x80
 800d62a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d62e:	4798      	blx	r3
 800d630:	4682      	mov	sl, r0
 800d632:	6060      	str	r0, [r4, #4]
 800d634:	2800      	cmp	r0, #0
 800d636:	f000 80cf 	beq.w	800d7d8 <rcl_node_init+0x268>
 800d63a:	2200      	movs	r2, #0
 800d63c:	2300      	movs	r3, #0
 800d63e:	a808      	add	r0, sp, #32
 800d640:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800d644:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 800d648:	f000 f922 	bl	800d890 <rcl_node_get_default_options>
 800d64c:	a908      	add	r1, sp, #32
 800d64e:	4650      	mov	r0, sl
 800d650:	2270      	movs	r2, #112	; 0x70
 800d652:	f004 f9a5 	bl	80119a0 <memcpy>
 800d656:	6861      	ldr	r1, [r4, #4]
 800d658:	4640      	mov	r0, r8
 800d65a:	6027      	str	r7, [r4, #0]
 800d65c:	f000 f926 	bl	800d8ac <rcl_node_options_copy>
 800d660:	2800      	cmp	r0, #0
 800d662:	d158      	bne.n	800d716 <rcl_node_init+0x1a6>
 800d664:	4628      	mov	r0, r5
 800d666:	f7f2 fe45 	bl	80002f4 <strlen>
 800d66a:	4428      	add	r0, r5
 800d66c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800d670:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800d674:	2b2f      	cmp	r3, #47	; 0x2f
 800d676:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	bf0c      	ite	eq
 800d67e:	4b5d      	ldreq	r3, [pc, #372]	; (800d7f4 <rcl_node_init+0x284>)
 800d680:	4b5d      	ldrne	r3, [pc, #372]	; (800d7f8 <rcl_node_init+0x288>)
 800d682:	9302      	str	r3, [sp, #8]
 800d684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d688:	9301      	str	r3, [sp, #4]
 800d68a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800d68e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d692:	f000 fc6f 	bl	800df74 <rcutils_format_string_limit>
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 800d69c:	4631      	mov	r1, r6
 800d69e:	6818      	ldr	r0, [r3, #0]
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	6866      	ldr	r6, [r4, #4]
 800d6a4:	3028      	adds	r0, #40	; 0x28
 800d6a6:	f001 fc09 	bl	800eebc <rmw_create_node>
 800d6aa:	6863      	ldr	r3, [r4, #4]
 800d6ac:	6730      	str	r0, [r6, #112]	; 0x70
 800d6ae:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d032      	beq.n	800d71a <rcl_node_init+0x1aa>
 800d6b4:	f001 fc92 	bl	800efdc <rmw_node_get_graph_guard_condition>
 800d6b8:	4682      	mov	sl, r0
 800d6ba:	b360      	cbz	r0, 800d716 <rcl_node_init+0x1a6>
 800d6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d6c0:	2008      	movs	r0, #8
 800d6c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d6c6:	6866      	ldr	r6, [r4, #4]
 800d6c8:	4798      	blx	r3
 800d6ca:	6863      	ldr	r3, [r4, #4]
 800d6cc:	6770      	str	r0, [r6, #116]	; 0x74
 800d6ce:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 800d6d2:	f1bb 0f00 	cmp.w	fp, #0
 800d6d6:	d020      	beq.n	800d71a <rcl_node_init+0x1aa>
 800d6d8:	a806      	add	r0, sp, #24
 800d6da:	ae25      	add	r6, sp, #148	; 0x94
 800d6dc:	f003 fcda 	bl	8011094 <rcl_get_zero_initialized_guard_condition>
 800d6e0:	a806      	add	r0, sp, #24
 800d6e2:	6863      	ldr	r3, [r4, #4]
 800d6e4:	46c4      	mov	ip, r8
 800d6e6:	c803      	ldmia	r0, {r0, r1}
 800d6e8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 800d6ec:	e88b 0003 	stmia.w	fp, {r0, r1}
 800d6f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d6f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d6f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d6fa:	6033      	str	r3, [r6, #0]
 800d6fc:	ab2a      	add	r3, sp, #168	; 0xa8
 800d6fe:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800d702:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d706:	4651      	mov	r1, sl
 800d708:	463a      	mov	r2, r7
 800d70a:	4670      	mov	r0, lr
 800d70c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d70e:	f003 fccb 	bl	80110a8 <rcl_guard_condition_init_from_rmw>
 800d712:	4682      	mov	sl, r0
 800d714:	b328      	cbz	r0, 800d762 <rcl_node_init+0x1f2>
 800d716:	6863      	ldr	r3, [r4, #4]
 800d718:	b1f3      	cbz	r3, 800d758 <rcl_node_init+0x1e8>
 800d71a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d71c:	b128      	cbz	r0, 800d72a <rcl_node_init+0x1ba>
 800d71e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d722:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d726:	4798      	blx	r3
 800d728:	6863      	ldr	r3, [r4, #4]
 800d72a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d72c:	b110      	cbz	r0, 800d734 <rcl_node_init+0x1c4>
 800d72e:	f001 fbd7 	bl	800eee0 <rmw_destroy_node>
 800d732:	6863      	ldr	r3, [r4, #4]
 800d734:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d736:	b148      	cbz	r0, 800d74c <rcl_node_init+0x1dc>
 800d738:	f003 fd12 	bl	8011160 <rcl_guard_condition_fini>
 800d73c:	6863      	ldr	r3, [r4, #4]
 800d73e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d742:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d744:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d748:	4798      	blx	r3
 800d74a:	6863      	ldr	r3, [r4, #4]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d752:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d756:	4798      	blx	r3
 800d758:	2300      	movs	r3, #0
 800d75a:	f04f 0a01 	mov.w	sl, #1
 800d75e:	e9c4 3300 	strd	r3, r3, [r4]
 800d762:	f1b9 0f00 	cmp.w	r9, #0
 800d766:	d008      	beq.n	800d77a <rcl_node_init+0x20a>
 800d768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d76c:	4628      	mov	r0, r5
 800d76e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d772:	4798      	blx	r3
 800d774:	e001      	b.n	800d77a <rcl_node_init+0x20a>
 800d776:	f04f 0a0b 	mov.w	sl, #11
 800d77a:	4650      	mov	r0, sl
 800d77c:	b02b      	add	sp, #172	; 0xac
 800d77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d782:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800d786:	e7f8      	b.n	800d77a <rcl_node_init+0x20a>
 800d788:	782b      	ldrb	r3, [r5, #0]
 800d78a:	2b2f      	cmp	r3, #47	; 0x2f
 800d78c:	f43f af3d 	beq.w	800d60a <rcl_node_init+0x9a>
 800d790:	9503      	str	r5, [sp, #12]
 800d792:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	4b18      	ldr	r3, [pc, #96]	; (800d7fc <rcl_node_init+0x28c>)
 800d79a:	9302      	str	r3, [sp, #8]
 800d79c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7a0:	9301      	str	r3, [sp, #4]
 800d7a2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800d7a6:	f000 fbe5 	bl	800df74 <rcutils_format_string_limit>
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	b1e0      	cbz	r0, 800d7e8 <rcl_node_init+0x278>
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	a924      	add	r1, sp, #144	; 0x90
 800d7b2:	9224      	str	r2, [sp, #144]	; 0x90
 800d7b4:	f000 ffb0 	bl	800e718 <rmw_validate_namespace>
 800d7b8:	4682      	mov	sl, r0
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d1d4      	bne.n	800d768 <rcl_node_init+0x1f8>
 800d7be:	46d9      	mov	r9, fp
 800d7c0:	e72c      	b.n	800d61c <rcl_node_init+0xac>
 800d7c2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800d7c6:	4650      	mov	r0, sl
 800d7c8:	b02b      	add	sp, #172	; 0xac
 800d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ce:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800d7d2:	f000 ffb3 	bl	800e73c <rmw_namespace_validation_result_string>
 800d7d6:	e7c4      	b.n	800d762 <rcl_node_init+0x1f2>
 800d7d8:	f04f 0a0a 	mov.w	sl, #10
 800d7dc:	e7c1      	b.n	800d762 <rcl_node_init+0x1f2>
 800d7de:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800d7e2:	f001 f80b 	bl	800e7fc <rmw_node_name_validation_result_string>
 800d7e6:	e7c8      	b.n	800d77a <rcl_node_init+0x20a>
 800d7e8:	f04f 0a0a 	mov.w	sl, #10
 800d7ec:	e7c5      	b.n	800d77a <rcl_node_init+0x20a>
 800d7ee:	bf00      	nop
 800d7f0:	08014dbc 	.word	0x08014dbc
 800d7f4:	08014d24 	.word	0x08014d24
 800d7f8:	08014dc4 	.word	0x08014dc4
 800d7fc:	08014dc0 	.word	0x08014dc0

0800d800 <rcl_node_is_valid>:
 800d800:	b130      	cbz	r0, 800d810 <rcl_node_is_valid+0x10>
 800d802:	6843      	ldr	r3, [r0, #4]
 800d804:	b123      	cbz	r3, 800d810 <rcl_node_is_valid+0x10>
 800d806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d808:	b113      	cbz	r3, 800d810 <rcl_node_is_valid+0x10>
 800d80a:	6800      	ldr	r0, [r0, #0]
 800d80c:	f7ff bbfc 	b.w	800d008 <rcl_context_is_valid>
 800d810:	2000      	movs	r0, #0
 800d812:	4770      	bx	lr

0800d814 <rcl_node_get_name>:
 800d814:	b120      	cbz	r0, 800d820 <rcl_node_get_name+0xc>
 800d816:	6840      	ldr	r0, [r0, #4]
 800d818:	b110      	cbz	r0, 800d820 <rcl_node_get_name+0xc>
 800d81a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800d81c:	b100      	cbz	r0, 800d820 <rcl_node_get_name+0xc>
 800d81e:	6880      	ldr	r0, [r0, #8]
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop

0800d824 <rcl_node_get_namespace>:
 800d824:	b120      	cbz	r0, 800d830 <rcl_node_get_namespace+0xc>
 800d826:	6840      	ldr	r0, [r0, #4]
 800d828:	b110      	cbz	r0, 800d830 <rcl_node_get_namespace+0xc>
 800d82a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800d82c:	b100      	cbz	r0, 800d830 <rcl_node_get_namespace+0xc>
 800d82e:	68c0      	ldr	r0, [r0, #12]
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop

0800d834 <rcl_node_get_options>:
 800d834:	b128      	cbz	r0, 800d842 <rcl_node_get_options+0xe>
 800d836:	6840      	ldr	r0, [r0, #4]
 800d838:	b118      	cbz	r0, 800d842 <rcl_node_get_options+0xe>
 800d83a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	bf08      	it	eq
 800d840:	2000      	moveq	r0, #0
 800d842:	4770      	bx	lr

0800d844 <rcl_node_get_rmw_handle>:
 800d844:	b110      	cbz	r0, 800d84c <rcl_node_get_rmw_handle+0x8>
 800d846:	6840      	ldr	r0, [r0, #4]
 800d848:	b100      	cbz	r0, 800d84c <rcl_node_get_rmw_handle+0x8>
 800d84a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop

0800d850 <rcl_get_disable_loaned_message>:
 800d850:	b510      	push	{r4, lr}
 800d852:	2300      	movs	r3, #0
 800d854:	b082      	sub	sp, #8
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	b1a0      	cbz	r0, 800d884 <rcl_get_disable_loaned_message+0x34>
 800d85a:	4604      	mov	r4, r0
 800d85c:	a901      	add	r1, sp, #4
 800d85e:	480b      	ldr	r0, [pc, #44]	; (800d88c <rcl_get_disable_loaned_message+0x3c>)
 800d860:	f000 fb60 	bl	800df24 <rcutils_get_env>
 800d864:	b110      	cbz	r0, 800d86c <rcl_get_disable_loaned_message+0x1c>
 800d866:	2001      	movs	r0, #1
 800d868:	b002      	add	sp, #8
 800d86a:	bd10      	pop	{r4, pc}
 800d86c:	9a01      	ldr	r2, [sp, #4]
 800d86e:	2000      	movs	r0, #0
 800d870:	7813      	ldrb	r3, [r2, #0]
 800d872:	3b31      	subs	r3, #49	; 0x31
 800d874:	bf08      	it	eq
 800d876:	7853      	ldrbeq	r3, [r2, #1]
 800d878:	fab3 f383 	clz	r3, r3
 800d87c:	095b      	lsrs	r3, r3, #5
 800d87e:	7023      	strb	r3, [r4, #0]
 800d880:	b002      	add	sp, #8
 800d882:	bd10      	pop	{r4, pc}
 800d884:	200b      	movs	r0, #11
 800d886:	b002      	add	sp, #8
 800d888:	bd10      	pop	{r4, pc}
 800d88a:	bf00      	nop
 800d88c:	08014dcc 	.word	0x08014dcc

0800d890 <rcl_node_get_default_options>:
 800d890:	b510      	push	{r4, lr}
 800d892:	4604      	mov	r4, r0
 800d894:	2270      	movs	r2, #112	; 0x70
 800d896:	2100      	movs	r1, #0
 800d898:	f004 f890 	bl	80119bc <memset>
 800d89c:	4620      	mov	r0, r4
 800d89e:	f7fc f9ab 	bl	8009bf8 <rcutils_get_default_allocator>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	7523      	strb	r3, [r4, #20]
 800d8a8:	bd10      	pop	{r4, pc}
 800d8aa:	bf00      	nop

0800d8ac <rcl_node_options_copy>:
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	bf18      	it	ne
 800d8b0:	4288      	cmpne	r0, r1
 800d8b2:	d01b      	beq.n	800d8ec <rcl_node_options_copy+0x40>
 800d8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b6:	fab1 f681 	clz	r6, r1
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	0976      	lsrs	r6, r6, #5
 800d8be:	b199      	cbz	r1, 800d8e8 <rcl_node_options_copy+0x3c>
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	8a87      	ldrh	r7, [r0, #20]
 800d8c4:	4684      	mov	ip, r0
 800d8c6:	468e      	mov	lr, r1
 800d8c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d8ce:	682b      	ldr	r3, [r5, #0]
 800d8d0:	2250      	movs	r2, #80	; 0x50
 800d8d2:	f10c 0118 	add.w	r1, ip, #24
 800d8d6:	f104 0018 	add.w	r0, r4, #24
 800d8da:	f8ce 3000 	str.w	r3, [lr]
 800d8de:	82a7      	strh	r7, [r4, #20]
 800d8e0:	f004 f85e 	bl	80119a0 <memcpy>
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8e8:	200b      	movs	r0, #11
 800d8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ec:	200b      	movs	r0, #11
 800d8ee:	4770      	bx	lr

0800d8f0 <rcl_node_resolve_name>:
 800d8f0:	b082      	sub	sp, #8
 800d8f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f6:	b091      	sub	sp, #68	; 0x44
 800d8f8:	ac1a      	add	r4, sp, #104	; 0x68
 800d8fa:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800d8fe:	e884 000c 	stmia.w	r4, {r2, r3}
 800d902:	2800      	cmp	r0, #0
 800d904:	d03d      	beq.n	800d982 <rcl_node_resolve_name+0x92>
 800d906:	460c      	mov	r4, r1
 800d908:	4605      	mov	r5, r0
 800d90a:	f7ff ff93 	bl	800d834 <rcl_node_get_options>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d03a      	beq.n	800d988 <rcl_node_resolve_name+0x98>
 800d912:	4628      	mov	r0, r5
 800d914:	f7ff ff7e 	bl	800d814 <rcl_node_get_name>
 800d918:	4606      	mov	r6, r0
 800d91a:	4628      	mov	r0, r5
 800d91c:	ad0b      	add	r5, sp, #44	; 0x2c
 800d91e:	f7ff ff81 	bl	800d824 <rcl_node_get_namespace>
 800d922:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800d926:	4607      	mov	r7, r0
 800d928:	46ac      	mov	ip, r5
 800d92a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d92e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d932:	f8de 3000 	ldr.w	r3, [lr]
 800d936:	f8cc 3000 	str.w	r3, [ip]
 800d93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d93c:	b30b      	cbz	r3, 800d982 <rcl_node_resolve_name+0x92>
 800d93e:	4689      	mov	r9, r1
 800d940:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d944:	f000 fc98 	bl	800e278 <rcutils_get_zero_initialized_string_map>
 800d948:	ab10      	add	r3, sp, #64	; 0x40
 800d94a:	9008      	str	r0, [sp, #32]
 800d94c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d950:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d954:	2100      	movs	r1, #0
 800d956:	a808      	add	r0, sp, #32
 800d958:	e895 000c 	ldmia.w	r5, {r2, r3}
 800d95c:	f000 fcde 	bl	800e31c <rcutils_string_map_init>
 800d960:	4683      	mov	fp, r0
 800d962:	b1a0      	cbz	r0, 800d98e <rcl_node_resolve_name+0x9e>
 800d964:	f7fc f964 	bl	8009c30 <rcutils_get_error_string>
 800d968:	f7fc f97a 	bl	8009c60 <rcutils_reset_error>
 800d96c:	f1bb 0f0a 	cmp.w	fp, #10
 800d970:	bf18      	it	ne
 800d972:	f04f 0b01 	movne.w	fp, #1
 800d976:	4658      	mov	r0, fp
 800d978:	b011      	add	sp, #68	; 0x44
 800d97a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97e:	b002      	add	sp, #8
 800d980:	4770      	bx	lr
 800d982:	f04f 0b0b 	mov.w	fp, #11
 800d986:	e7f6      	b.n	800d976 <rcl_node_resolve_name+0x86>
 800d988:	f04f 0b01 	mov.w	fp, #1
 800d98c:	e7f3      	b.n	800d976 <rcl_node_resolve_name+0x86>
 800d98e:	9009      	str	r0, [sp, #36]	; 0x24
 800d990:	9007      	str	r0, [sp, #28]
 800d992:	a808      	add	r0, sp, #32
 800d994:	f003 fb78 	bl	8011088 <rcl_get_default_topic_name_substitutions>
 800d998:	4683      	mov	fp, r0
 800d99a:	b180      	cbz	r0, 800d9be <rcl_node_resolve_name+0xce>
 800d99c:	280a      	cmp	r0, #10
 800d99e:	a808      	add	r0, sp, #32
 800d9a0:	bf18      	it	ne
 800d9a2:	f04f 0b01 	movne.w	fp, #1
 800d9a6:	f000 fcf7 	bl	800e398 <rcutils_string_map_fini>
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	d15b      	bne.n	800da68 <rcl_node_resolve_name+0x178>
 800d9b0:	4651      	mov	r1, sl
 800d9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9b4:	47c8      	blx	r9
 800d9b6:	4651      	mov	r1, sl
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	47c8      	blx	r9
 800d9bc:	e7db      	b.n	800d976 <rcl_node_resolve_name+0x86>
 800d9be:	ab09      	add	r3, sp, #36	; 0x24
 800d9c0:	46ec      	mov	ip, sp
 800d9c2:	9305      	str	r3, [sp, #20]
 800d9c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9ca:	682b      	ldr	r3, [r5, #0]
 800d9cc:	463a      	mov	r2, r7
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f8cc 3000 	str.w	r3, [ip]
 800d9d6:	ab08      	add	r3, sp, #32
 800d9d8:	f003 f9f6 	bl	8010dc8 <rcl_expand_topic_name>
 800d9dc:	4683      	mov	fp, r0
 800d9de:	b9d8      	cbnz	r0, 800da18 <rcl_node_resolve_name+0x128>
 800d9e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	9009      	str	r0, [sp, #36]	; 0x24
 800d9e6:	a90a      	add	r1, sp, #40	; 0x28
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f000 fdc5 	bl	800e578 <rmw_validate_full_topic_name>
 800d9ee:	bb50      	cbnz	r0, 800da46 <rcl_node_resolve_name+0x156>
 800d9f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d9f2:	2d00      	cmp	r5, #0
 800d9f4:	d140      	bne.n	800da78 <rcl_node_resolve_name+0x188>
 800d9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9f8:	a808      	add	r0, sp, #32
 800d9fa:	601c      	str	r4, [r3, #0]
 800d9fc:	f000 fccc 	bl	800e398 <rcutils_string_map_fini>
 800da00:	4683      	mov	fp, r0
 800da02:	2800      	cmp	r0, #0
 800da04:	d043      	beq.n	800da8e <rcl_node_resolve_name+0x19e>
 800da06:	f7fc f913 	bl	8009c30 <rcutils_get_error_string>
 800da0a:	46a8      	mov	r8, r5
 800da0c:	f04f 0b01 	mov.w	fp, #1
 800da10:	462c      	mov	r4, r5
 800da12:	f7fc f925 	bl	8009c60 <rcutils_reset_error>
 800da16:	e00a      	b.n	800da2e <rcl_node_resolve_name+0x13e>
 800da18:	2867      	cmp	r0, #103	; 0x67
 800da1a:	bf14      	ite	ne
 800da1c:	f04f 0800 	movne.w	r8, #0
 800da20:	f008 0801 	andeq.w	r8, r8, #1
 800da24:	9c07      	ldr	r4, [sp, #28]
 800da26:	a808      	add	r0, sp, #32
 800da28:	f000 fcb6 	bl	800e398 <rcutils_string_map_fini>
 800da2c:	bb50      	cbnz	r0, 800da84 <rcl_node_resolve_name+0x194>
 800da2e:	4651      	mov	r1, sl
 800da30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da32:	47c8      	blx	r9
 800da34:	4651      	mov	r1, sl
 800da36:	4620      	mov	r0, r4
 800da38:	47c8      	blx	r9
 800da3a:	f1b8 0f00 	cmp.w	r8, #0
 800da3e:	bf18      	it	ne
 800da40:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800da44:	e797      	b.n	800d976 <rcl_node_resolve_name+0x86>
 800da46:	f7fc f8f3 	bl	8009c30 <rcutils_get_error_string>
 800da4a:	f7fc f909 	bl	8009c60 <rcutils_reset_error>
 800da4e:	a808      	add	r0, sp, #32
 800da50:	f000 fca2 	bl	800e398 <rcutils_string_map_fini>
 800da54:	b998      	cbnz	r0, 800da7e <rcl_node_resolve_name+0x18e>
 800da56:	4651      	mov	r1, sl
 800da58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da5a:	47c8      	blx	r9
 800da5c:	4651      	mov	r1, sl
 800da5e:	4620      	mov	r0, r4
 800da60:	f04f 0b01 	mov.w	fp, #1
 800da64:	47c8      	blx	r9
 800da66:	e786      	b.n	800d976 <rcl_node_resolve_name+0x86>
 800da68:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800da6c:	f7fc f8e0 	bl	8009c30 <rcutils_get_error_string>
 800da70:	f7fc f8f6 	bl	8009c60 <rcutils_reset_error>
 800da74:	4644      	mov	r4, r8
 800da76:	e7da      	b.n	800da2e <rcl_node_resolve_name+0x13e>
 800da78:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da7c:	e7d3      	b.n	800da26 <rcl_node_resolve_name+0x136>
 800da7e:	46d8      	mov	r8, fp
 800da80:	f04f 0b01 	mov.w	fp, #1
 800da84:	f7fc f8d4 	bl	8009c30 <rcutils_get_error_string>
 800da88:	f7fc f8ea 	bl	8009c60 <rcutils_reset_error>
 800da8c:	e7cf      	b.n	800da2e <rcl_node_resolve_name+0x13e>
 800da8e:	4651      	mov	r1, sl
 800da90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da92:	47c8      	blx	r9
 800da94:	4651      	mov	r1, sl
 800da96:	4658      	mov	r0, fp
 800da98:	47c8      	blx	r9
 800da9a:	e76c      	b.n	800d976 <rcl_node_resolve_name+0x86>

0800da9c <exact_match_lookup>:
 800da9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9e:	f102 0708 	add.w	r7, r2, #8
 800daa2:	460b      	mov	r3, r1
 800daa4:	b085      	sub	sp, #20
 800daa6:	4614      	mov	r4, r2
 800daa8:	4606      	mov	r6, r0
 800daaa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800daae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dab2:	4618      	mov	r0, r3
 800dab4:	4919      	ldr	r1, [pc, #100]	; (800db1c <exact_match_lookup+0x80>)
 800dab6:	e894 000c 	ldmia.w	r4, {r2, r3}
 800daba:	f000 fa4d 	bl	800df58 <rcutils_join_path>
 800dabe:	7833      	ldrb	r3, [r6, #0]
 800dac0:	4605      	mov	r5, r0
 800dac2:	2b2f      	cmp	r3, #47	; 0x2f
 800dac4:	d023      	beq.n	800db0e <exact_match_lookup+0x72>
 800dac6:	f104 030c 	add.w	r3, r4, #12
 800daca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dace:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dad2:	1c70      	adds	r0, r6, #1
 800dad4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800dad8:	f000 fa44 	bl	800df64 <rcutils_to_native_path>
 800dadc:	4606      	mov	r6, r0
 800dade:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800dae2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dae6:	4631      	mov	r1, r6
 800dae8:	4628      	mov	r0, r5
 800daea:	e894 000c 	ldmia.w	r4, {r2, r3}
 800daee:	f000 fa33 	bl	800df58 <rcutils_join_path>
 800daf2:	4603      	mov	r3, r0
 800daf4:	4630      	mov	r0, r6
 800daf6:	6862      	ldr	r2, [r4, #4]
 800daf8:	461e      	mov	r6, r3
 800dafa:	6921      	ldr	r1, [r4, #16]
 800dafc:	4790      	blx	r2
 800dafe:	4628      	mov	r0, r5
 800db00:	4635      	mov	r5, r6
 800db02:	6863      	ldr	r3, [r4, #4]
 800db04:	6921      	ldr	r1, [r4, #16]
 800db06:	4798      	blx	r3
 800db08:	4628      	mov	r0, r5
 800db0a:	b005      	add	sp, #20
 800db0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db0e:	7873      	ldrb	r3, [r6, #1]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1d8      	bne.n	800dac6 <exact_match_lookup+0x2a>
 800db14:	4628      	mov	r0, r5
 800db16:	b005      	add	sp, #20
 800db18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db1a:	bf00      	nop
 800db1c:	08014e2c 	.word	0x08014e2c

0800db20 <rcl_get_secure_root>:
 800db20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db24:	b085      	sub	sp, #20
 800db26:	b168      	cbz	r0, 800db44 <rcl_get_secure_root+0x24>
 800db28:	4607      	mov	r7, r0
 800db2a:	4608      	mov	r0, r1
 800db2c:	460c      	mov	r4, r1
 800db2e:	f7fc f871 	bl	8009c14 <rcutils_allocator_is_valid>
 800db32:	b138      	cbz	r0, 800db44 <rcl_get_secure_root+0x24>
 800db34:	2300      	movs	r3, #0
 800db36:	482d      	ldr	r0, [pc, #180]	; (800dbec <rcl_get_secure_root+0xcc>)
 800db38:	a903      	add	r1, sp, #12
 800db3a:	9303      	str	r3, [sp, #12]
 800db3c:	f000 f9f2 	bl	800df24 <rcutils_get_env>
 800db40:	4605      	mov	r5, r0
 800db42:	b120      	cbz	r0, 800db4e <rcl_get_secure_root+0x2e>
 800db44:	2500      	movs	r5, #0
 800db46:	4628      	mov	r0, r5
 800db48:	b005      	add	sp, #20
 800db4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db4e:	9b03      	ldr	r3, [sp, #12]
 800db50:	781a      	ldrb	r2, [r3, #0]
 800db52:	2a00      	cmp	r2, #0
 800db54:	d0f6      	beq.n	800db44 <rcl_get_secure_root+0x24>
 800db56:	f104 090c 	add.w	r9, r4, #12
 800db5a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db5e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db62:	4618      	mov	r0, r3
 800db64:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800db68:	f000 fb3e 	bl	800e1e8 <rcutils_strdup>
 800db6c:	4680      	mov	r8, r0
 800db6e:	2800      	cmp	r0, #0
 800db70:	d0e8      	beq.n	800db44 <rcl_get_secure_root+0x24>
 800db72:	a903      	add	r1, sp, #12
 800db74:	481e      	ldr	r0, [pc, #120]	; (800dbf0 <rcl_get_secure_root+0xd0>)
 800db76:	9503      	str	r5, [sp, #12]
 800db78:	f000 f9d4 	bl	800df24 <rcutils_get_env>
 800db7c:	b160      	cbz	r0, 800db98 <rcl_get_secure_root+0x78>
 800db7e:	2600      	movs	r6, #0
 800db80:	4630      	mov	r0, r6
 800db82:	6863      	ldr	r3, [r4, #4]
 800db84:	6921      	ldr	r1, [r4, #16]
 800db86:	4798      	blx	r3
 800db88:	4640      	mov	r0, r8
 800db8a:	6863      	ldr	r3, [r4, #4]
 800db8c:	6921      	ldr	r1, [r4, #16]
 800db8e:	4798      	blx	r3
 800db90:	4628      	mov	r0, r5
 800db92:	b005      	add	sp, #20
 800db94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db98:	9b03      	ldr	r3, [sp, #12]
 800db9a:	781e      	ldrb	r6, [r3, #0]
 800db9c:	b1f6      	cbz	r6, 800dbdc <rcl_get_secure_root+0xbc>
 800db9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800dba2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dba6:	4618      	mov	r0, r3
 800dba8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800dbac:	f000 fb1c 	bl	800e1e8 <rcutils_strdup>
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d0e3      	beq.n	800db7e <rcl_get_secure_root+0x5e>
 800dbb6:	4622      	mov	r2, r4
 800dbb8:	4641      	mov	r1, r8
 800dbba:	f7ff ff6f 	bl	800da9c <exact_match_lookup>
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	d0dd      	beq.n	800db80 <rcl_get_secure_root+0x60>
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f000 f9c5 	bl	800df54 <rcutils_is_directory>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d1d7      	bne.n	800db80 <rcl_get_secure_root+0x60>
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	6921      	ldr	r1, [r4, #16]
 800dbd4:	461d      	mov	r5, r3
 800dbd6:	6863      	ldr	r3, [r4, #4]
 800dbd8:	4798      	blx	r3
 800dbda:	e7d1      	b.n	800db80 <rcl_get_secure_root+0x60>
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4638      	mov	r0, r7
 800dbe0:	4641      	mov	r1, r8
 800dbe2:	f7ff ff5b 	bl	800da9c <exact_match_lookup>
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	e7ea      	b.n	800dbc0 <rcl_get_secure_root+0xa0>
 800dbea:	bf00      	nop
 800dbec:	08014e38 	.word	0x08014e38
 800dbf0:	08014e50 	.word	0x08014e50

0800dbf4 <rcl_get_security_options_from_environment>:
 800dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	460f      	mov	r7, r1
 800dc00:	4821      	ldr	r0, [pc, #132]	; (800dc88 <rcl_get_security_options_from_environment+0x94>)
 800dc02:	a901      	add	r1, sp, #4
 800dc04:	4690      	mov	r8, r2
 800dc06:	9301      	str	r3, [sp, #4]
 800dc08:	f000 f98c 	bl	800df24 <rcutils_get_env>
 800dc0c:	b120      	cbz	r0, 800dc18 <rcl_get_security_options_from_environment+0x24>
 800dc0e:	2501      	movs	r5, #1
 800dc10:	4628      	mov	r0, r5
 800dc12:	b002      	add	sp, #8
 800dc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc18:	4604      	mov	r4, r0
 800dc1a:	491c      	ldr	r1, [pc, #112]	; (800dc8c <rcl_get_security_options_from_environment+0x98>)
 800dc1c:	9801      	ldr	r0, [sp, #4]
 800dc1e:	f7f2 fb5f 	bl	80002e0 <strcmp>
 800dc22:	4605      	mov	r5, r0
 800dc24:	b9f0      	cbnz	r0, 800dc64 <rcl_get_security_options_from_environment+0x70>
 800dc26:	9001      	str	r0, [sp, #4]
 800dc28:	f1b8 0f00 	cmp.w	r8, #0
 800dc2c:	d021      	beq.n	800dc72 <rcl_get_security_options_from_environment+0x7e>
 800dc2e:	a901      	add	r1, sp, #4
 800dc30:	4817      	ldr	r0, [pc, #92]	; (800dc90 <rcl_get_security_options_from_environment+0x9c>)
 800dc32:	f000 f977 	bl	800df24 <rcutils_get_env>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d1e9      	bne.n	800dc0e <rcl_get_security_options_from_environment+0x1a>
 800dc3a:	4916      	ldr	r1, [pc, #88]	; (800dc94 <rcl_get_security_options_from_environment+0xa0>)
 800dc3c:	9801      	ldr	r0, [sp, #4]
 800dc3e:	f7f2 fb4f 	bl	80002e0 <strcmp>
 800dc42:	4603      	mov	r3, r0
 800dc44:	4639      	mov	r1, r7
 800dc46:	4630      	mov	r0, r6
 800dc48:	fab3 f383 	clz	r3, r3
 800dc4c:	095b      	lsrs	r3, r3, #5
 800dc4e:	f888 3000 	strb.w	r3, [r8]
 800dc52:	f7ff ff65 	bl	800db20 <rcl_get_secure_root>
 800dc56:	b170      	cbz	r0, 800dc76 <rcl_get_security_options_from_environment+0x82>
 800dc58:	f8c8 0004 	str.w	r0, [r8, #4]
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	b002      	add	sp, #8
 800dc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc64:	4625      	mov	r5, r4
 800dc66:	f888 4000 	strb.w	r4, [r8]
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	b002      	add	sp, #8
 800dc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc72:	250b      	movs	r5, #11
 800dc74:	e7cc      	b.n	800dc10 <rcl_get_security_options_from_environment+0x1c>
 800dc76:	f898 5000 	ldrb.w	r5, [r8]
 800dc7a:	f1a5 0501 	sub.w	r5, r5, #1
 800dc7e:	fab5 f585 	clz	r5, r5
 800dc82:	096d      	lsrs	r5, r5, #5
 800dc84:	e7c4      	b.n	800dc10 <rcl_get_security_options_from_environment+0x1c>
 800dc86:	bf00      	nop
 800dc88:	08014df0 	.word	0x08014df0
 800dc8c:	08014e04 	.word	0x08014e04
 800dc90:	08014e0c 	.word	0x08014e0c
 800dc94:	08014e24 	.word	0x08014e24

0800dc98 <rcl_get_system_time>:
 800dc98:	4608      	mov	r0, r1
 800dc9a:	f000 bbf1 	b.w	800e480 <rcutils_system_time_now>
 800dc9e:	bf00      	nop

0800dca0 <rcl_get_steady_time>:
 800dca0:	4608      	mov	r0, r1
 800dca2:	f000 bc15 	b.w	800e4d0 <rcutils_steady_time_now>
 800dca6:	bf00      	nop

0800dca8 <rcl_get_ros_time>:
 800dca8:	7a03      	ldrb	r3, [r0, #8]
 800dcaa:	b510      	push	{r4, lr}
 800dcac:	460c      	mov	r4, r1
 800dcae:	b143      	cbz	r3, 800dcc2 <rcl_get_ros_time+0x1a>
 800dcb0:	2105      	movs	r1, #5
 800dcb2:	f000 f901 	bl	800deb8 <__atomic_load_8>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	2000      	movs	r0, #0
 800dcbc:	e9c4 2300 	strd	r2, r3, [r4]
 800dcc0:	bd10      	pop	{r4, pc}
 800dcc2:	4608      	mov	r0, r1
 800dcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcc8:	f000 bbda 	b.w	800e480 <rcutils_system_time_now>

0800dccc <rcl_clock_init>:
 800dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcce:	4605      	mov	r5, r0
 800dcd0:	4610      	mov	r0, r2
 800dcd2:	4614      	mov	r4, r2
 800dcd4:	460e      	mov	r6, r1
 800dcd6:	f7fb ff9d 	bl	8009c14 <rcutils_allocator_is_valid>
 800dcda:	b128      	cbz	r0, 800dce8 <rcl_clock_init+0x1c>
 800dcdc:	2d03      	cmp	r5, #3
 800dcde:	d803      	bhi.n	800dce8 <rcl_clock_init+0x1c>
 800dce0:	e8df f005 	tbb	[pc, r5]
 800dce4:	0659301f 	.word	0x0659301f
 800dce8:	f04f 0c0b 	mov.w	ip, #11
 800dcec:	4660      	mov	r0, ip
 800dcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcf0:	2c00      	cmp	r4, #0
 800dcf2:	d0f9      	beq.n	800dce8 <rcl_clock_init+0x1c>
 800dcf4:	fab6 f386 	clz	r3, r6
 800dcf8:	095b      	lsrs	r3, r3, #5
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	d0f4      	beq.n	800dce8 <rcl_clock_init+0x1c>
 800dcfe:	6133      	str	r3, [r6, #16]
 800dd00:	469c      	mov	ip, r3
 800dd02:	f106 0514 	add.w	r5, r6, #20
 800dd06:	4f32      	ldr	r7, [pc, #200]	; (800ddd0 <rcl_clock_init+0x104>)
 800dd08:	f04f 0e03 	mov.w	lr, #3
 800dd0c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dd10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	4660      	mov	r0, ip
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	60f7      	str	r7, [r6, #12]
 800dd1c:	f886 e000 	strb.w	lr, [r6]
 800dd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	d0e0      	beq.n	800dce8 <rcl_clock_init+0x1c>
 800dd26:	2300      	movs	r3, #0
 800dd28:	f106 0514 	add.w	r5, r6, #20
 800dd2c:	7033      	strb	r3, [r6, #0]
 800dd2e:	469c      	mov	ip, r3
 800dd30:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800dd34:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800dd38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd3c:	6823      	ldr	r3, [r4, #0]
 800dd3e:	4660      	mov	r0, ip
 800dd40:	602b      	str	r3, [r5, #0]
 800dd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd44:	2c00      	cmp	r4, #0
 800dd46:	d0cf      	beq.n	800dce8 <rcl_clock_init+0x1c>
 800dd48:	fab6 f586 	clz	r5, r6
 800dd4c:	096d      	lsrs	r5, r5, #5
 800dd4e:	2e00      	cmp	r6, #0
 800dd50:	d0ca      	beq.n	800dce8 <rcl_clock_init+0x1c>
 800dd52:	46a6      	mov	lr, r4
 800dd54:	7035      	strb	r5, [r6, #0]
 800dd56:	f106 0c14 	add.w	ip, r6, #20
 800dd5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dd5e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800dd62:	e9c6 5503 	strd	r5, r5, [r6, #12]
 800dd66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd6a:	f8de 3000 	ldr.w	r3, [lr]
 800dd6e:	2010      	movs	r0, #16
 800dd70:	f8cc 3000 	str.w	r3, [ip]
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	6921      	ldr	r1, [r4, #16]
 800dd78:	4798      	blx	r3
 800dd7a:	6130      	str	r0, [r6, #16]
 800dd7c:	b320      	cbz	r0, 800ddc8 <rcl_clock_init+0xfc>
 800dd7e:	2200      	movs	r2, #0
 800dd80:	2300      	movs	r3, #0
 800dd82:	46ac      	mov	ip, r5
 800dd84:	7205      	strb	r5, [r0, #8]
 800dd86:	e9c0 2300 	strd	r2, r3, [r0]
 800dd8a:	4a12      	ldr	r2, [pc, #72]	; (800ddd4 <rcl_clock_init+0x108>)
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	4660      	mov	r0, ip
 800dd90:	60f2      	str	r2, [r6, #12]
 800dd92:	7033      	strb	r3, [r6, #0]
 800dd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd96:	2c00      	cmp	r4, #0
 800dd98:	d0a6      	beq.n	800dce8 <rcl_clock_init+0x1c>
 800dd9a:	fab6 f386 	clz	r3, r6
 800dd9e:	095b      	lsrs	r3, r3, #5
 800dda0:	2e00      	cmp	r6, #0
 800dda2:	d0a1      	beq.n	800dce8 <rcl_clock_init+0x1c>
 800dda4:	6133      	str	r3, [r6, #16]
 800dda6:	469c      	mov	ip, r3
 800dda8:	f106 0514 	add.w	r5, r6, #20
 800ddac:	f8df e028 	ldr.w	lr, [pc, #40]	; 800ddd8 <rcl_clock_init+0x10c>
 800ddb0:	2702      	movs	r7, #2
 800ddb2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ddb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	4660      	mov	r0, ip
 800ddbe:	602b      	str	r3, [r5, #0]
 800ddc0:	f8c6 e00c 	str.w	lr, [r6, #12]
 800ddc4:	7037      	strb	r7, [r6, #0]
 800ddc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddc8:	f04f 0c0a 	mov.w	ip, #10
 800ddcc:	e78e      	b.n	800dcec <rcl_clock_init+0x20>
 800ddce:	bf00      	nop
 800ddd0:	0800dca1 	.word	0x0800dca1
 800ddd4:	0800dca9 	.word	0x0800dca9
 800ddd8:	0800dc99 	.word	0x0800dc99

0800dddc <rcl_validate_enclave_name_with_size>:
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d049      	beq.n	800de74 <rcl_validate_enclave_name_with_size+0x98>
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	4615      	mov	r5, r2
 800dde4:	b0c2      	sub	sp, #264	; 0x108
 800dde6:	b19a      	cbz	r2, 800de10 <rcl_validate_enclave_name_with_size+0x34>
 800dde8:	461e      	mov	r6, r3
 800ddea:	466a      	mov	r2, sp
 800ddec:	ab01      	add	r3, sp, #4
 800ddee:	460c      	mov	r4, r1
 800ddf0:	f000 fc3e 	bl	800e670 <rmw_validate_namespace_with_size>
 800ddf4:	4684      	mov	ip, r0
 800ddf6:	b9b8      	cbnz	r0, 800de28 <rcl_validate_enclave_name_with_size+0x4c>
 800ddf8:	9900      	ldr	r1, [sp, #0]
 800ddfa:	b171      	cbz	r1, 800de1a <rcl_validate_enclave_name_with_size+0x3e>
 800ddfc:	2907      	cmp	r1, #7
 800ddfe:	d019      	beq.n	800de34 <rcl_validate_enclave_name_with_size+0x58>
 800de00:	1e4b      	subs	r3, r1, #1
 800de02:	2b05      	cmp	r3, #5
 800de04:	d83a      	bhi.n	800de7c <rcl_validate_enclave_name_with_size+0xa0>
 800de06:	e8df f003 	tbb	[pc, r3]
 800de0a:	2926      	.short	0x2926
 800de0c:	1d322f2c 	.word	0x1d322f2c
 800de10:	f04f 0c0b 	mov.w	ip, #11
 800de14:	4660      	mov	r0, ip
 800de16:	b042      	add	sp, #264	; 0x108
 800de18:	bd70      	pop	{r4, r5, r6, pc}
 800de1a:	2907      	cmp	r1, #7
 800de1c:	d00a      	beq.n	800de34 <rcl_validate_enclave_name_with_size+0x58>
 800de1e:	2300      	movs	r3, #0
 800de20:	4660      	mov	r0, ip
 800de22:	602b      	str	r3, [r5, #0]
 800de24:	b042      	add	sp, #264	; 0x108
 800de26:	bd70      	pop	{r4, r5, r6, pc}
 800de28:	f7ff f8d0 	bl	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>
 800de2c:	4684      	mov	ip, r0
 800de2e:	4660      	mov	r0, ip
 800de30:	b042      	add	sp, #264	; 0x108
 800de32:	bd70      	pop	{r4, r5, r6, pc}
 800de34:	2cff      	cmp	r4, #255	; 0xff
 800de36:	d9f2      	bls.n	800de1e <rcl_validate_enclave_name_with_size+0x42>
 800de38:	6029      	str	r1, [r5, #0]
 800de3a:	2e00      	cmp	r6, #0
 800de3c:	d0ea      	beq.n	800de14 <rcl_validate_enclave_name_with_size+0x38>
 800de3e:	23fe      	movs	r3, #254	; 0xfe
 800de40:	6033      	str	r3, [r6, #0]
 800de42:	e7e7      	b.n	800de14 <rcl_validate_enclave_name_with_size+0x38>
 800de44:	2306      	movs	r3, #6
 800de46:	602b      	str	r3, [r5, #0]
 800de48:	2e00      	cmp	r6, #0
 800de4a:	d0e3      	beq.n	800de14 <rcl_validate_enclave_name_with_size+0x38>
 800de4c:	9b01      	ldr	r3, [sp, #4]
 800de4e:	4660      	mov	r0, ip
 800de50:	6033      	str	r3, [r6, #0]
 800de52:	b042      	add	sp, #264	; 0x108
 800de54:	bd70      	pop	{r4, r5, r6, pc}
 800de56:	2301      	movs	r3, #1
 800de58:	602b      	str	r3, [r5, #0]
 800de5a:	e7f5      	b.n	800de48 <rcl_validate_enclave_name_with_size+0x6c>
 800de5c:	2302      	movs	r3, #2
 800de5e:	602b      	str	r3, [r5, #0]
 800de60:	e7f2      	b.n	800de48 <rcl_validate_enclave_name_with_size+0x6c>
 800de62:	2303      	movs	r3, #3
 800de64:	602b      	str	r3, [r5, #0]
 800de66:	e7ef      	b.n	800de48 <rcl_validate_enclave_name_with_size+0x6c>
 800de68:	2304      	movs	r3, #4
 800de6a:	602b      	str	r3, [r5, #0]
 800de6c:	e7ec      	b.n	800de48 <rcl_validate_enclave_name_with_size+0x6c>
 800de6e:	2305      	movs	r3, #5
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	e7e9      	b.n	800de48 <rcl_validate_enclave_name_with_size+0x6c>
 800de74:	f04f 0c0b 	mov.w	ip, #11
 800de78:	4660      	mov	r0, ip
 800de7a:	4770      	bx	lr
 800de7c:	460b      	mov	r3, r1
 800de7e:	4a04      	ldr	r2, [pc, #16]	; (800de90 <rcl_validate_enclave_name_with_size+0xb4>)
 800de80:	f44f 7180 	mov.w	r1, #256	; 0x100
 800de84:	a802      	add	r0, sp, #8
 800de86:	f000 f961 	bl	800e14c <rcutils_snprintf>
 800de8a:	f04f 0c01 	mov.w	ip, #1
 800de8e:	e7c1      	b.n	800de14 <rcl_validate_enclave_name_with_size+0x38>
 800de90:	08014e70 	.word	0x08014e70

0800de94 <rcl_validate_enclave_name>:
 800de94:	b168      	cbz	r0, 800deb2 <rcl_validate_enclave_name+0x1e>
 800de96:	b570      	push	{r4, r5, r6, lr}
 800de98:	460d      	mov	r5, r1
 800de9a:	4616      	mov	r6, r2
 800de9c:	4604      	mov	r4, r0
 800de9e:	f7f2 fa29 	bl	80002f4 <strlen>
 800dea2:	4633      	mov	r3, r6
 800dea4:	4601      	mov	r1, r0
 800dea6:	462a      	mov	r2, r5
 800dea8:	4620      	mov	r0, r4
 800deaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800deae:	f7ff bf95 	b.w	800dddc <rcl_validate_enclave_name_with_size>
 800deb2:	200b      	movs	r0, #11
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop

0800deb8 <__atomic_load_8>:
 800deb8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800debc:	4a16      	ldr	r2, [pc, #88]	; (800df18 <__atomic_load_8+0x60>)
 800debe:	4b17      	ldr	r3, [pc, #92]	; (800df1c <__atomic_load_8+0x64>)
 800dec0:	f04f 0c01 	mov.w	ip, #1
 800dec4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800dec8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800decc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ded0:	fb02 f101 	mul.w	r1, r2, r1
 800ded4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ded8:	fba3 2301 	umull	r2, r3, r3, r1
 800dedc:	091b      	lsrs	r3, r3, #4
 800dede:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dee2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800dee6:	b4d0      	push	{r4, r6, r7}
 800dee8:	1ac9      	subs	r1, r1, r3
 800deea:	4c0d      	ldr	r4, [pc, #52]	; (800df20 <__atomic_load_8+0x68>)
 800deec:	1862      	adds	r2, r4, r1
 800deee:	e8d2 3f4f 	ldrexb	r3, [r2]
 800def2:	e8c2 cf46 	strexb	r6, ip, [r2]
 800def6:	2e00      	cmp	r6, #0
 800def8:	d1f9      	bne.n	800deee <__atomic_load_8+0x36>
 800defa:	b2db      	uxtb	r3, r3
 800defc:	f3bf 8f5b 	dmb	ish
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1f4      	bne.n	800deee <__atomic_load_8+0x36>
 800df04:	e9d0 6700 	ldrd	r6, r7, [r0]
 800df08:	f3bf 8f5b 	dmb	ish
 800df0c:	5463      	strb	r3, [r4, r1]
 800df0e:	4630      	mov	r0, r6
 800df10:	4639      	mov	r1, r7
 800df12:	bcd0      	pop	{r4, r6, r7}
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	27d4eb2d 	.word	0x27d4eb2d
 800df1c:	b21642c9 	.word	0xb21642c9
 800df20:	2000dd48 	.word	0x2000dd48

0800df24 <rcutils_get_env>:
 800df24:	b168      	cbz	r0, 800df42 <rcutils_get_env+0x1e>
 800df26:	b510      	push	{r4, lr}
 800df28:	460c      	mov	r4, r1
 800df2a:	b129      	cbz	r1, 800df38 <rcutils_get_env+0x14>
 800df2c:	f003 fcbc 	bl	80118a8 <getenv>
 800df30:	b120      	cbz	r0, 800df3c <rcutils_get_env+0x18>
 800df32:	6020      	str	r0, [r4, #0]
 800df34:	2000      	movs	r0, #0
 800df36:	bd10      	pop	{r4, pc}
 800df38:	4803      	ldr	r0, [pc, #12]	; (800df48 <rcutils_get_env+0x24>)
 800df3a:	bd10      	pop	{r4, pc}
 800df3c:	4b03      	ldr	r3, [pc, #12]	; (800df4c <rcutils_get_env+0x28>)
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	bd10      	pop	{r4, pc}
 800df42:	4803      	ldr	r0, [pc, #12]	; (800df50 <rcutils_get_env+0x2c>)
 800df44:	4770      	bx	lr
 800df46:	bf00      	nop
 800df48:	08014eec 	.word	0x08014eec
 800df4c:	08015010 	.word	0x08015010
 800df50:	08014ed0 	.word	0x08014ed0

0800df54 <rcutils_is_directory>:
 800df54:	2000      	movs	r0, #0
 800df56:	4770      	bx	lr

0800df58 <rcutils_join_path>:
 800df58:	b082      	sub	sp, #8
 800df5a:	2000      	movs	r0, #0
 800df5c:	e88d 000c 	stmia.w	sp, {r2, r3}
 800df60:	b002      	add	sp, #8
 800df62:	4770      	bx	lr

0800df64 <rcutils_to_native_path>:
 800df64:	b084      	sub	sp, #16
 800df66:	2000      	movs	r0, #0
 800df68:	f10d 0c04 	add.w	ip, sp, #4
 800df6c:	b004      	add	sp, #16
 800df6e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800df72:	4770      	bx	lr

0800df74 <rcutils_format_string_limit>:
 800df74:	b40f      	push	{r0, r1, r2, r3}
 800df76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df78:	b083      	sub	sp, #12
 800df7a:	ac08      	add	r4, sp, #32
 800df7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800df7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df82:	b326      	cbz	r6, 800dfce <rcutils_format_string_limit+0x5a>
 800df84:	a808      	add	r0, sp, #32
 800df86:	f7fb fe45 	bl	8009c14 <rcutils_allocator_is_valid>
 800df8a:	b300      	cbz	r0, 800dfce <rcutils_format_string_limit+0x5a>
 800df8c:	2100      	movs	r1, #0
 800df8e:	ab0f      	add	r3, sp, #60	; 0x3c
 800df90:	4632      	mov	r2, r6
 800df92:	4608      	mov	r0, r1
 800df94:	e9cd 3300 	strd	r3, r3, [sp]
 800df98:	f000 f906 	bl	800e1a8 <rcutils_vsnprintf>
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	4605      	mov	r5, r0
 800dfa0:	d015      	beq.n	800dfce <rcutils_format_string_limit+0x5a>
 800dfa2:	1c47      	adds	r7, r0, #1
 800dfa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa6:	429f      	cmp	r7, r3
 800dfa8:	d901      	bls.n	800dfae <rcutils_format_string_limit+0x3a>
 800dfaa:	1e5d      	subs	r5, r3, #1
 800dfac:	461f      	mov	r7, r3
 800dfae:	9b08      	ldr	r3, [sp, #32]
 800dfb0:	4638      	mov	r0, r7
 800dfb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfb4:	4798      	blx	r3
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	b148      	cbz	r0, 800dfce <rcutils_format_string_limit+0x5a>
 800dfba:	4632      	mov	r2, r6
 800dfbc:	4639      	mov	r1, r7
 800dfbe:	9b01      	ldr	r3, [sp, #4]
 800dfc0:	f000 f8f2 	bl	800e1a8 <rcutils_vsnprintf>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	db09      	blt.n	800dfdc <rcutils_format_string_limit+0x68>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	5563      	strb	r3, [r4, r5]
 800dfcc:	e000      	b.n	800dfd0 <rcutils_format_string_limit+0x5c>
 800dfce:	2400      	movs	r4, #0
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	b003      	add	sp, #12
 800dfd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dfd8:	b004      	add	sp, #16
 800dfda:	4770      	bx	lr
 800dfdc:	4620      	mov	r0, r4
 800dfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfe2:	2400      	movs	r4, #0
 800dfe4:	4798      	blx	r3
 800dfe6:	e7f3      	b.n	800dfd0 <rcutils_format_string_limit+0x5c>

0800dfe8 <rcutils_repl_str>:
 800dfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	ed2d 8b02 	vpush	{d8}
 800dff0:	b087      	sub	sp, #28
 800dff2:	2600      	movs	r6, #0
 800dff4:	4680      	mov	r8, r0
 800dff6:	468a      	mov	sl, r1
 800dff8:	9000      	str	r0, [sp, #0]
 800dffa:	4608      	mov	r0, r1
 800dffc:	ee08 2a10 	vmov	s16, r2
 800e000:	4699      	mov	r9, r3
 800e002:	2510      	movs	r5, #16
 800e004:	f7f2 f976 	bl	80002f4 <strlen>
 800e008:	4637      	mov	r7, r6
 800e00a:	46b3      	mov	fp, r6
 800e00c:	9001      	str	r0, [sp, #4]
 800e00e:	e01e      	b.n	800e04e <rcutils_repl_str+0x66>
 800e010:	f10b 0b01 	add.w	fp, fp, #1
 800e014:	9b01      	ldr	r3, [sp, #4]
 800e016:	455e      	cmp	r6, fp
 800e018:	eb04 0803 	add.w	r8, r4, r3
 800e01c:	d211      	bcs.n	800e042 <rcutils_repl_str+0x5a>
 800e01e:	442e      	add	r6, r5
 800e020:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e024:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e02c:	00b1      	lsls	r1, r6, #2
 800e02e:	4798      	blx	r3
 800e030:	2800      	cmp	r0, #0
 800e032:	f000 8088 	beq.w	800e146 <rcutils_repl_str+0x15e>
 800e036:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e03a:	4607      	mov	r7, r0
 800e03c:	bf28      	it	cs
 800e03e:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800e042:	9a00      	ldr	r2, [sp, #0]
 800e044:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800e048:	1aa4      	subs	r4, r4, r2
 800e04a:	f843 4c04 	str.w	r4, [r3, #-4]
 800e04e:	4651      	mov	r1, sl
 800e050:	4640      	mov	r0, r8
 800e052:	f004 faff 	bl	8012654 <strstr>
 800e056:	4604      	mov	r4, r0
 800e058:	4638      	mov	r0, r7
 800e05a:	2c00      	cmp	r4, #0
 800e05c:	d1d8      	bne.n	800e010 <rcutils_repl_str+0x28>
 800e05e:	4640      	mov	r0, r8
 800e060:	f7f2 f948 	bl	80002f4 <strlen>
 800e064:	9b00      	ldr	r3, [sp, #0]
 800e066:	eba8 0803 	sub.w	r8, r8, r3
 800e06a:	eb08 0400 	add.w	r4, r8, r0
 800e06e:	9402      	str	r4, [sp, #8]
 800e070:	f1bb 0f00 	cmp.w	fp, #0
 800e074:	d045      	beq.n	800e102 <rcutils_repl_str+0x11a>
 800e076:	ee18 0a10 	vmov	r0, s16
 800e07a:	f7f2 f93b 	bl	80002f4 <strlen>
 800e07e:	9a01      	ldr	r2, [sp, #4]
 800e080:	4606      	mov	r6, r0
 800e082:	f8d9 3000 	ldr.w	r3, [r9]
 800e086:	1a82      	subs	r2, r0, r2
 800e088:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e08c:	fb0b 4202 	mla	r2, fp, r2, r4
 800e090:	1c50      	adds	r0, r2, #1
 800e092:	9205      	str	r2, [sp, #20]
 800e094:	4798      	blx	r3
 800e096:	4682      	mov	sl, r0
 800e098:	2800      	cmp	r0, #0
 800e09a:	d054      	beq.n	800e146 <rcutils_repl_str+0x15e>
 800e09c:	683a      	ldr	r2, [r7, #0]
 800e09e:	463d      	mov	r5, r7
 800e0a0:	9900      	ldr	r1, [sp, #0]
 800e0a2:	2401      	movs	r4, #1
 800e0a4:	f003 fc7c 	bl	80119a0 <memcpy>
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 800e0ae:	eb0a 0803 	add.w	r8, sl, r3
 800e0b2:	ee18 7a10 	vmov	r7, s16
 800e0b6:	f8dd a000 	ldr.w	sl, [sp]
 800e0ba:	f8cd 9000 	str.w	r9, [sp]
 800e0be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e0c2:	4632      	mov	r2, r6
 800e0c4:	4639      	mov	r1, r7
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	44b0      	add	r8, r6
 800e0ca:	f003 fc69 	bl	80119a0 <memcpy>
 800e0ce:	f855 2b04 	ldr.w	r2, [r5], #4
 800e0d2:	45a3      	cmp	fp, r4
 800e0d4:	444a      	add	r2, r9
 800e0d6:	eb0a 0102 	add.w	r1, sl, r2
 800e0da:	d02a      	beq.n	800e132 <rcutils_repl_str+0x14a>
 800e0dc:	6828      	ldr	r0, [r5, #0]
 800e0de:	1a82      	subs	r2, r0, r2
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	4490      	add	r8, r2
 800e0e4:	f003 fc5c 	bl	80119a0 <memcpy>
 800e0e8:	1c62      	adds	r2, r4, #1
 800e0ea:	45a3      	cmp	fp, r4
 800e0ec:	4614      	mov	r4, r2
 800e0ee:	d8e8      	bhi.n	800e0c2 <rcutils_repl_str+0xda>
 800e0f0:	f8dd 9000 	ldr.w	r9, [sp]
 800e0f4:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	9a05      	ldr	r2, [sp, #20]
 800e0fc:	f80a 3002 	strb.w	r3, [sl, r2]
 800e100:	e00b      	b.n	800e11a <rcutils_repl_str+0x132>
 800e102:	4620      	mov	r0, r4
 800e104:	f8d9 3000 	ldr.w	r3, [r9]
 800e108:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e10c:	3001      	adds	r0, #1
 800e10e:	4798      	blx	r3
 800e110:	4682      	mov	sl, r0
 800e112:	b110      	cbz	r0, 800e11a <rcutils_repl_str+0x132>
 800e114:	9900      	ldr	r1, [sp, #0]
 800e116:	f004 fa6e 	bl	80125f6 <strcpy>
 800e11a:	4638      	mov	r0, r7
 800e11c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e120:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e124:	4798      	blx	r3
 800e126:	4650      	mov	r0, sl
 800e128:	b007      	add	sp, #28
 800e12a:	ecbd 8b02 	vpop	{d8}
 800e12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e132:	9b02      	ldr	r3, [sp, #8]
 800e134:	4640      	mov	r0, r8
 800e136:	f8dd 9000 	ldr.w	r9, [sp]
 800e13a:	1a9a      	subs	r2, r3, r2
 800e13c:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800e140:	f003 fc2e 	bl	80119a0 <memcpy>
 800e144:	e7d8      	b.n	800e0f8 <rcutils_repl_str+0x110>
 800e146:	f04f 0a00 	mov.w	sl, #0
 800e14a:	e7e6      	b.n	800e11a <rcutils_repl_str+0x132>

0800e14c <rcutils_snprintf>:
 800e14c:	b40c      	push	{r2, r3}
 800e14e:	b530      	push	{r4, r5, lr}
 800e150:	b083      	sub	sp, #12
 800e152:	ab06      	add	r3, sp, #24
 800e154:	f853 2b04 	ldr.w	r2, [r3], #4
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	b1e2      	cbz	r2, 800e196 <rcutils_snprintf+0x4a>
 800e15c:	fab0 f480 	clz	r4, r0
 800e160:	fab1 f581 	clz	r5, r1
 800e164:	ea50 0c01 	orrs.w	ip, r0, r1
 800e168:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e16c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e170:	d008      	beq.n	800e184 <rcutils_snprintf+0x38>
 800e172:	b984      	cbnz	r4, 800e196 <rcutils_snprintf+0x4a>
 800e174:	b97d      	cbnz	r5, 800e196 <rcutils_snprintf+0x4a>
 800e176:	f004 fb2b 	bl	80127d0 <vsniprintf>
 800e17a:	b003      	add	sp, #12
 800e17c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e180:	b002      	add	sp, #8
 800e182:	4770      	bx	lr
 800e184:	4661      	mov	r1, ip
 800e186:	4660      	mov	r0, ip
 800e188:	f004 fb22 	bl	80127d0 <vsniprintf>
 800e18c:	b003      	add	sp, #12
 800e18e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e192:	b002      	add	sp, #8
 800e194:	4770      	bx	lr
 800e196:	f003 fb81 	bl	801189c <__errno>
 800e19a:	2216      	movs	r2, #22
 800e19c:	4603      	mov	r3, r0
 800e19e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	e7e9      	b.n	800e17a <rcutils_snprintf+0x2e>
 800e1a6:	bf00      	nop

0800e1a8 <rcutils_vsnprintf>:
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	b1b2      	cbz	r2, 800e1da <rcutils_vsnprintf+0x32>
 800e1ac:	fab0 f480 	clz	r4, r0
 800e1b0:	fab1 f581 	clz	r5, r1
 800e1b4:	ea50 0c01 	orrs.w	ip, r0, r1
 800e1b8:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e1bc:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e1c0:	d005      	beq.n	800e1ce <rcutils_vsnprintf+0x26>
 800e1c2:	b954      	cbnz	r4, 800e1da <rcutils_vsnprintf+0x32>
 800e1c4:	b94d      	cbnz	r5, 800e1da <rcutils_vsnprintf+0x32>
 800e1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1ca:	f004 bb01 	b.w	80127d0 <vsniprintf>
 800e1ce:	4661      	mov	r1, ip
 800e1d0:	4660      	mov	r0, ip
 800e1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1d6:	f004 bafb 	b.w	80127d0 <vsniprintf>
 800e1da:	f003 fb5f 	bl	801189c <__errno>
 800e1de:	2316      	movs	r3, #22
 800e1e0:	6003      	str	r3, [r0, #0]
 800e1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}

0800e1e8 <rcutils_strdup>:
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ec:	ac07      	add	r4, sp, #28
 800e1ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e1f6:	b1d0      	cbz	r0, 800e22e <rcutils_strdup+0x46>
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1fe:	2100      	movs	r1, #0
 800e200:	f7f2 f81e 	bl	8000240 <memchr>
 800e204:	b180      	cbz	r0, 800e228 <rcutils_strdup+0x40>
 800e206:	1b46      	subs	r6, r0, r5
 800e208:	1c70      	adds	r0, r6, #1
 800e20a:	4639      	mov	r1, r7
 800e20c:	47a0      	blx	r4
 800e20e:	4604      	mov	r4, r0
 800e210:	b128      	cbz	r0, 800e21e <rcutils_strdup+0x36>
 800e212:	4632      	mov	r2, r6
 800e214:	4629      	mov	r1, r5
 800e216:	f003 fbc3 	bl	80119a0 <memcpy>
 800e21a:	2300      	movs	r3, #0
 800e21c:	55a3      	strb	r3, [r4, r6]
 800e21e:	4620      	mov	r0, r4
 800e220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e224:	b004      	add	sp, #16
 800e226:	4770      	bx	lr
 800e228:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e22c:	e7ed      	b.n	800e20a <rcutils_strdup+0x22>
 800e22e:	4604      	mov	r4, r0
 800e230:	e7f5      	b.n	800e21e <rcutils_strdup+0x36>
 800e232:	bf00      	nop

0800e234 <rcutils_strndup>:
 800e234:	b082      	sub	sp, #8
 800e236:	b570      	push	{r4, r5, r6, lr}
 800e238:	ac04      	add	r4, sp, #16
 800e23a:	4606      	mov	r6, r0
 800e23c:	e884 000c 	stmia.w	r4, {r2, r3}
 800e240:	b1b8      	cbz	r0, 800e272 <rcutils_strndup+0x3e>
 800e242:	460c      	mov	r4, r1
 800e244:	460a      	mov	r2, r1
 800e246:	2100      	movs	r1, #0
 800e248:	f7f1 fffa 	bl	8000240 <memchr>
 800e24c:	b100      	cbz	r0, 800e250 <rcutils_strndup+0x1c>
 800e24e:	1b84      	subs	r4, r0, r6
 800e250:	9b04      	ldr	r3, [sp, #16]
 800e252:	1c60      	adds	r0, r4, #1
 800e254:	9908      	ldr	r1, [sp, #32]
 800e256:	4798      	blx	r3
 800e258:	4605      	mov	r5, r0
 800e25a:	b128      	cbz	r0, 800e268 <rcutils_strndup+0x34>
 800e25c:	4622      	mov	r2, r4
 800e25e:	4631      	mov	r1, r6
 800e260:	f003 fb9e 	bl	80119a0 <memcpy>
 800e264:	2300      	movs	r3, #0
 800e266:	552b      	strb	r3, [r5, r4]
 800e268:	4628      	mov	r0, r5
 800e26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e26e:	b002      	add	sp, #8
 800e270:	4770      	bx	lr
 800e272:	4605      	mov	r5, r0
 800e274:	e7f8      	b.n	800e268 <rcutils_strndup+0x34>
 800e276:	bf00      	nop

0800e278 <rcutils_get_zero_initialized_string_map>:
 800e278:	2000      	movs	r0, #0
 800e27a:	4b01      	ldr	r3, [pc, #4]	; (800e280 <rcutils_get_zero_initialized_string_map+0x8>)
 800e27c:	6018      	str	r0, [r3, #0]
 800e27e:	4770      	bx	lr
 800e280:	2000dd60 	.word	0x2000dd60

0800e284 <rcutils_string_map_reserve>:
 800e284:	2800      	cmp	r0, #0
 800e286:	d03e      	beq.n	800e306 <rcutils_string_map_reserve+0x82>
 800e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28a:	6805      	ldr	r5, [r0, #0]
 800e28c:	4606      	mov	r6, r0
 800e28e:	460c      	mov	r4, r1
 800e290:	b12d      	cbz	r5, 800e29e <rcutils_string_map_reserve+0x1a>
 800e292:	68ab      	ldr	r3, [r5, #8]
 800e294:	42a3      	cmp	r3, r4
 800e296:	d904      	bls.n	800e2a2 <rcutils_string_map_reserve+0x1e>
 800e298:	461c      	mov	r4, r3
 800e29a:	2d00      	cmp	r5, #0
 800e29c:	d1f9      	bne.n	800e292 <rcutils_string_map_reserve+0xe>
 800e29e:	201f      	movs	r0, #31
 800e2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a2:	686b      	ldr	r3, [r5, #4]
 800e2a4:	42a3      	cmp	r3, r4
 800e2a6:	d02a      	beq.n	800e2fe <rcutils_string_map_reserve+0x7a>
 800e2a8:	69e9      	ldr	r1, [r5, #28]
 800e2aa:	b304      	cbz	r4, 800e2ee <rcutils_string_map_reserve+0x6a>
 800e2ac:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800e2b0:	d227      	bcs.n	800e302 <rcutils_string_map_reserve+0x7e>
 800e2b2:	00e7      	lsls	r7, r4, #3
 800e2b4:	460a      	mov	r2, r1
 800e2b6:	696b      	ldr	r3, [r5, #20]
 800e2b8:	6828      	ldr	r0, [r5, #0]
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	4798      	blx	r3
 800e2be:	b300      	cbz	r0, 800e302 <rcutils_string_map_reserve+0x7e>
 800e2c0:	6835      	ldr	r5, [r6, #0]
 800e2c2:	686a      	ldr	r2, [r5, #4]
 800e2c4:	6028      	str	r0, [r5, #0]
 800e2c6:	42a2      	cmp	r2, r4
 800e2c8:	d216      	bcs.n	800e2f8 <rcutils_string_map_reserve+0x74>
 800e2ca:	43d1      	mvns	r1, r2
 800e2cc:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 800e2d0:	4421      	add	r1, r4
 800e2d2:	2909      	cmp	r1, #9
 800e2d4:	d919      	bls.n	800e30a <rcutils_string_map_reserve+0x86>
 800e2d6:	0759      	lsls	r1, r3, #29
 800e2d8:	d117      	bne.n	800e30a <rcutils_string_map_reserve+0x86>
 800e2da:	1aa1      	subs	r1, r4, r2
 800e2dc:	2600      	movs	r6, #0
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2700      	movs	r7, #0
 800e2e2:	3201      	adds	r2, #1
 800e2e4:	4291      	cmp	r1, r2
 800e2e6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e2ea:	d8fa      	bhi.n	800e2e2 <rcutils_string_map_reserve+0x5e>
 800e2ec:	e004      	b.n	800e2f8 <rcutils_string_map_reserve+0x74>
 800e2ee:	692b      	ldr	r3, [r5, #16]
 800e2f0:	6828      	ldr	r0, [r5, #0]
 800e2f2:	4798      	blx	r3
 800e2f4:	6835      	ldr	r5, [r6, #0]
 800e2f6:	602c      	str	r4, [r5, #0]
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	606c      	str	r4, [r5, #4]
 800e2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2fe:	2000      	movs	r0, #0
 800e300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e302:	200a      	movs	r0, #10
 800e304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e306:	200b      	movs	r0, #11
 800e308:	4770      	bx	lr
 800e30a:	4438      	add	r0, r7
 800e30c:	2200      	movs	r2, #0
 800e30e:	e9c3 2200 	strd	r2, r2, [r3]
 800e312:	3308      	adds	r3, #8
 800e314:	4283      	cmp	r3, r0
 800e316:	d1fa      	bne.n	800e30e <rcutils_string_map_reserve+0x8a>
 800e318:	e7ee      	b.n	800e2f8 <rcutils_string_map_reserve+0x74>
 800e31a:	bf00      	nop

0800e31c <rcutils_string_map_init>:
 800e31c:	b082      	sub	sp, #8
 800e31e:	b570      	push	{r4, r5, r6, lr}
 800e320:	ac04      	add	r4, sp, #16
 800e322:	e884 000c 	stmia.w	r4, {r2, r3}
 800e326:	b378      	cbz	r0, 800e388 <rcutils_string_map_init+0x6c>
 800e328:	6806      	ldr	r6, [r0, #0]
 800e32a:	4604      	mov	r4, r0
 800e32c:	b12e      	cbz	r6, 800e33a <rcutils_string_map_init+0x1e>
 800e32e:	251e      	movs	r5, #30
 800e330:	4628      	mov	r0, r5
 800e332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e336:	b002      	add	sp, #8
 800e338:	4770      	bx	lr
 800e33a:	a804      	add	r0, sp, #16
 800e33c:	460d      	mov	r5, r1
 800e33e:	f7fb fc69 	bl	8009c14 <rcutils_allocator_is_valid>
 800e342:	b308      	cbz	r0, 800e388 <rcutils_string_map_init+0x6c>
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	2020      	movs	r0, #32
 800e348:	9908      	ldr	r1, [sp, #32]
 800e34a:	4798      	blx	r3
 800e34c:	6020      	str	r0, [r4, #0]
 800e34e:	b308      	cbz	r0, 800e394 <rcutils_string_map_init+0x78>
 800e350:	f10d 0e10 	add.w	lr, sp, #16
 800e354:	6086      	str	r6, [r0, #8]
 800e356:	f100 0c0c 	add.w	ip, r0, #12
 800e35a:	e9c0 6600 	strd	r6, r6, [r0]
 800e35e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e366:	f8de 3000 	ldr.w	r3, [lr]
 800e36a:	4629      	mov	r1, r5
 800e36c:	4620      	mov	r0, r4
 800e36e:	f8cc 3000 	str.w	r3, [ip]
 800e372:	f7ff ff87 	bl	800e284 <rcutils_string_map_reserve>
 800e376:	4605      	mov	r5, r0
 800e378:	2800      	cmp	r0, #0
 800e37a:	d0d9      	beq.n	800e330 <rcutils_string_map_init+0x14>
 800e37c:	9b05      	ldr	r3, [sp, #20]
 800e37e:	9908      	ldr	r1, [sp, #32]
 800e380:	6820      	ldr	r0, [r4, #0]
 800e382:	4798      	blx	r3
 800e384:	6026      	str	r6, [r4, #0]
 800e386:	e7d3      	b.n	800e330 <rcutils_string_map_init+0x14>
 800e388:	250b      	movs	r5, #11
 800e38a:	4628      	mov	r0, r5
 800e38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e390:	b002      	add	sp, #8
 800e392:	4770      	bx	lr
 800e394:	250a      	movs	r5, #10
 800e396:	e7cb      	b.n	800e330 <rcutils_string_map_init+0x14>

0800e398 <rcutils_string_map_fini>:
 800e398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e39c:	b083      	sub	sp, #12
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d03e      	beq.n	800e420 <rcutils_string_map_fini+0x88>
 800e3a2:	6804      	ldr	r4, [r0, #0]
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	2c00      	cmp	r4, #0
 800e3a8:	d036      	beq.n	800e418 <rcutils_string_map_fini+0x80>
 800e3aa:	6863      	ldr	r3, [r4, #4]
 800e3ac:	b34b      	cbz	r3, 800e402 <rcutils_string_map_fini+0x6a>
 800e3ae:	2500      	movs	r5, #0
 800e3b0:	6822      	ldr	r2, [r4, #0]
 800e3b2:	462f      	mov	r7, r5
 800e3b4:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800e3b8:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800e3bc:	b1f0      	cbz	r0, 800e3fc <rcutils_string_map_fini+0x64>
 800e3be:	69e1      	ldr	r1, [r4, #28]
 800e3c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e3c4:	9101      	str	r1, [sp, #4]
 800e3c6:	47c8      	blx	r9
 800e3c8:	6823      	ldr	r3, [r4, #0]
 800e3ca:	9901      	ldr	r1, [sp, #4]
 800e3cc:	eb03 0208 	add.w	r2, r3, r8
 800e3d0:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	6850      	ldr	r0, [r2, #4]
 800e3d8:	47c8      	blx	r9
 800e3da:	68a3      	ldr	r3, [r4, #8]
 800e3dc:	6822      	ldr	r2, [r4, #0]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	4442      	add	r2, r8
 800e3e2:	6057      	str	r7, [r2, #4]
 800e3e4:	60a3      	str	r3, [r4, #8]
 800e3e6:	6834      	ldr	r4, [r6, #0]
 800e3e8:	6863      	ldr	r3, [r4, #4]
 800e3ea:	429d      	cmp	r5, r3
 800e3ec:	d209      	bcs.n	800e402 <rcutils_string_map_fini+0x6a>
 800e3ee:	6822      	ldr	r2, [r4, #0]
 800e3f0:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800e3f4:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d1e0      	bne.n	800e3be <rcutils_string_map_fini+0x26>
 800e3fc:	3501      	adds	r5, #1
 800e3fe:	429d      	cmp	r5, r3
 800e400:	d3d8      	bcc.n	800e3b4 <rcutils_string_map_fini+0x1c>
 800e402:	2100      	movs	r1, #0
 800e404:	4630      	mov	r0, r6
 800e406:	f7ff ff3d 	bl	800e284 <rcutils_string_map_reserve>
 800e40a:	4604      	mov	r4, r0
 800e40c:	b920      	cbnz	r0, 800e418 <rcutils_string_map_fini+0x80>
 800e40e:	6830      	ldr	r0, [r6, #0]
 800e410:	6903      	ldr	r3, [r0, #16]
 800e412:	69c1      	ldr	r1, [r0, #28]
 800e414:	4798      	blx	r3
 800e416:	6034      	str	r4, [r6, #0]
 800e418:	4620      	mov	r0, r4
 800e41a:	b003      	add	sp, #12
 800e41c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e420:	240b      	movs	r4, #11
 800e422:	4620      	mov	r0, r4
 800e424:	b003      	add	sp, #12
 800e426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e42a:	bf00      	nop

0800e42c <rcutils_string_map_getn>:
 800e42c:	b338      	cbz	r0, 800e47e <rcutils_string_map_getn+0x52>
 800e42e:	6803      	ldr	r3, [r0, #0]
 800e430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e434:	4688      	mov	r8, r1
 800e436:	b1d9      	cbz	r1, 800e470 <rcutils_string_map_getn+0x44>
 800e438:	fab3 f483 	clz	r4, r3
 800e43c:	0964      	lsrs	r4, r4, #5
 800e43e:	b1bb      	cbz	r3, 800e470 <rcutils_string_map_getn+0x44>
 800e440:	4691      	mov	r9, r2
 800e442:	e9d3 7600 	ldrd	r7, r6, [r3]
 800e446:	b19e      	cbz	r6, 800e470 <rcutils_string_map_getn+0x44>
 800e448:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 800e44c:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 800e450:	3401      	adds	r4, #1
 800e452:	4628      	mov	r0, r5
 800e454:	b155      	cbz	r5, 800e46c <rcutils_string_map_getn+0x40>
 800e456:	f7f1 ff4d 	bl	80002f4 <strlen>
 800e45a:	4602      	mov	r2, r0
 800e45c:	4629      	mov	r1, r5
 800e45e:	4640      	mov	r0, r8
 800e460:	454a      	cmp	r2, r9
 800e462:	bf38      	it	cc
 800e464:	464a      	movcc	r2, r9
 800e466:	f004 f8ce 	bl	8012606 <strncmp>
 800e46a:	b120      	cbz	r0, 800e476 <rcutils_string_map_getn+0x4a>
 800e46c:	42a6      	cmp	r6, r4
 800e46e:	d1eb      	bne.n	800e448 <rcutils_string_map_getn+0x1c>
 800e470:	2000      	movs	r0, #0
 800e472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e476:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47e:	4770      	bx	lr

0800e480 <rcutils_system_time_now>:
 800e480:	b310      	cbz	r0, 800e4c8 <rcutils_system_time_now+0x48>
 800e482:	b570      	push	{r4, r5, r6, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	4604      	mov	r4, r0
 800e488:	2001      	movs	r0, #1
 800e48a:	4669      	mov	r1, sp
 800e48c:	f7f3 f92c 	bl	80016e8 <clock_gettime>
 800e490:	2800      	cmp	r0, #0
 800e492:	db16      	blt.n	800e4c2 <rcutils_system_time_now+0x42>
 800e494:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e498:	2900      	cmp	r1, #0
 800e49a:	db12      	blt.n	800e4c2 <rcutils_system_time_now+0x42>
 800e49c:	ea53 0201 	orrs.w	r2, r3, r1
 800e4a0:	9d02      	ldr	r5, [sp, #8]
 800e4a2:	d101      	bne.n	800e4a8 <rcutils_system_time_now+0x28>
 800e4a4:	2d00      	cmp	r5, #0
 800e4a6:	db0c      	blt.n	800e4c2 <rcutils_system_time_now+0x42>
 800e4a8:	4e08      	ldr	r6, [pc, #32]	; (800e4cc <rcutils_system_time_now+0x4c>)
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	fba3 3206 	umull	r3, r2, r3, r6
 800e4b0:	195b      	adds	r3, r3, r5
 800e4b2:	fb06 2201 	mla	r2, r6, r1, r2
 800e4b6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800e4ba:	e9c4 3200 	strd	r3, r2, [r4]
 800e4be:	b004      	add	sp, #16
 800e4c0:	bd70      	pop	{r4, r5, r6, pc}
 800e4c2:	2002      	movs	r0, #2
 800e4c4:	b004      	add	sp, #16
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	200b      	movs	r0, #11
 800e4ca:	4770      	bx	lr
 800e4cc:	3b9aca00 	.word	0x3b9aca00

0800e4d0 <rcutils_steady_time_now>:
 800e4d0:	b310      	cbz	r0, 800e518 <rcutils_steady_time_now+0x48>
 800e4d2:	b570      	push	{r4, r5, r6, lr}
 800e4d4:	b084      	sub	sp, #16
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	2000      	movs	r0, #0
 800e4da:	4669      	mov	r1, sp
 800e4dc:	f7f3 f904 	bl	80016e8 <clock_gettime>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	db16      	blt.n	800e512 <rcutils_steady_time_now+0x42>
 800e4e4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e4e8:	2900      	cmp	r1, #0
 800e4ea:	db12      	blt.n	800e512 <rcutils_steady_time_now+0x42>
 800e4ec:	ea53 0201 	orrs.w	r2, r3, r1
 800e4f0:	9d02      	ldr	r5, [sp, #8]
 800e4f2:	d101      	bne.n	800e4f8 <rcutils_steady_time_now+0x28>
 800e4f4:	2d00      	cmp	r5, #0
 800e4f6:	db0c      	blt.n	800e512 <rcutils_steady_time_now+0x42>
 800e4f8:	4e08      	ldr	r6, [pc, #32]	; (800e51c <rcutils_steady_time_now+0x4c>)
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	fba3 3206 	umull	r3, r2, r3, r6
 800e500:	195b      	adds	r3, r3, r5
 800e502:	fb06 2201 	mla	r2, r6, r1, r2
 800e506:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800e50a:	e9c4 3200 	strd	r3, r2, [r4]
 800e50e:	b004      	add	sp, #16
 800e510:	bd70      	pop	{r4, r5, r6, pc}
 800e512:	2002      	movs	r0, #2
 800e514:	b004      	add	sp, #16
 800e516:	bd70      	pop	{r4, r5, r6, pc}
 800e518:	200b      	movs	r0, #11
 800e51a:	4770      	bx	lr
 800e51c:	3b9aca00 	.word	0x3b9aca00

0800e520 <rmw_get_zero_initialized_context>:
 800e520:	b510      	push	{r4, lr}
 800e522:	4604      	mov	r4, r0
 800e524:	3010      	adds	r0, #16
 800e526:	f000 f80f 	bl	800e548 <rmw_get_zero_initialized_init_options>
 800e52a:	2300      	movs	r3, #0
 800e52c:	4620      	mov	r0, r4
 800e52e:	60a3      	str	r3, [r4, #8]
 800e530:	66a3      	str	r3, [r4, #104]	; 0x68
 800e532:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e534:	ed9f 7b02 	vldr	d7, [pc, #8]	; 800e540 <rmw_get_zero_initialized_context+0x20>
 800e538:	ed84 7b00 	vstr	d7, [r4]
 800e53c:	bd10      	pop	{r4, pc}
 800e53e:	bf00      	nop
	...

0800e548 <rmw_get_zero_initialized_init_options>:
 800e548:	b510      	push	{r4, lr}
 800e54a:	4604      	mov	r4, r0
 800e54c:	2258      	movs	r2, #88	; 0x58
 800e54e:	2100      	movs	r1, #0
 800e550:	f003 fa34 	bl	80119bc <memset>
 800e554:	f104 0010 	add.w	r0, r4, #16
 800e558:	f000 f80a 	bl	800e570 <rmw_get_default_security_options>
 800e55c:	f104 001c 	add.w	r0, r4, #28
 800e560:	f003 f80a 	bl	8011578 <rmw_get_zero_initialized_discovery_options>
 800e564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e568:	4620      	mov	r0, r4
 800e56a:	60e3      	str	r3, [r4, #12]
 800e56c:	bd10      	pop	{r4, pc}
 800e56e:	bf00      	nop

0800e570 <rmw_get_default_security_options>:
 800e570:	2200      	movs	r2, #0
 800e572:	7002      	strb	r2, [r0, #0]
 800e574:	6042      	str	r2, [r0, #4]
 800e576:	4770      	bx	lr

0800e578 <rmw_validate_full_topic_name>:
 800e578:	2800      	cmp	r0, #0
 800e57a:	d05d      	beq.n	800e638 <rmw_validate_full_topic_name+0xc0>
 800e57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e580:	460d      	mov	r5, r1
 800e582:	2900      	cmp	r1, #0
 800e584:	d05a      	beq.n	800e63c <rmw_validate_full_topic_name+0xc4>
 800e586:	4604      	mov	r4, r0
 800e588:	4616      	mov	r6, r2
 800e58a:	f7f1 feb3 	bl	80002f4 <strlen>
 800e58e:	b150      	cbz	r0, 800e5a6 <rmw_validate_full_topic_name+0x2e>
 800e590:	7823      	ldrb	r3, [r4, #0]
 800e592:	2b2f      	cmp	r3, #47	; 0x2f
 800e594:	d00e      	beq.n	800e5b4 <rmw_validate_full_topic_name+0x3c>
 800e596:	2302      	movs	r3, #2
 800e598:	602b      	str	r3, [r5, #0]
 800e59a:	b146      	cbz	r6, 800e5ae <rmw_validate_full_topic_name+0x36>
 800e59c:	2300      	movs	r3, #0
 800e59e:	4618      	mov	r0, r3
 800e5a0:	6033      	str	r3, [r6, #0]
 800e5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	2e00      	cmp	r6, #0
 800e5ac:	d1f6      	bne.n	800e59c <rmw_validate_full_topic_name+0x24>
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b4:	1e43      	subs	r3, r0, #1
 800e5b6:	5ce2      	ldrb	r2, [r4, r3]
 800e5b8:	2a2f      	cmp	r2, #47	; 0x2f
 800e5ba:	d041      	beq.n	800e640 <rmw_validate_full_topic_name+0xc8>
 800e5bc:	1e62      	subs	r2, r4, #1
 800e5be:	f1c4 0e01 	rsb	lr, r4, #1
 800e5c2:	eb02 0800 	add.w	r8, r2, r0
 800e5c6:	eb0e 0702 	add.w	r7, lr, r2
 800e5ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e5ce:	f023 0120 	bic.w	r1, r3, #32
 800e5d2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 800e5d6:	3941      	subs	r1, #65	; 0x41
 800e5d8:	2919      	cmp	r1, #25
 800e5da:	d90f      	bls.n	800e5fc <rmw_validate_full_topic_name+0x84>
 800e5dc:	f1bc 0f0a 	cmp.w	ip, #10
 800e5e0:	d90c      	bls.n	800e5fc <rmw_validate_full_topic_name+0x84>
 800e5e2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 800e5e6:	fab3 f383 	clz	r3, r3
 800e5ea:	095b      	lsrs	r3, r3, #5
 800e5ec:	b933      	cbnz	r3, 800e5fc <rmw_validate_full_topic_name+0x84>
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	602a      	str	r2, [r5, #0]
 800e5f2:	2e00      	cmp	r6, #0
 800e5f4:	d0db      	beq.n	800e5ae <rmw_validate_full_topic_name+0x36>
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	6037      	str	r7, [r6, #0]
 800e5fa:	e7d2      	b.n	800e5a2 <rmw_validate_full_topic_name+0x2a>
 800e5fc:	4542      	cmp	r2, r8
 800e5fe:	d1e2      	bne.n	800e5c6 <rmw_validate_full_topic_name+0x4e>
 800e600:	2301      	movs	r3, #1
 800e602:	4f1a      	ldr	r7, [pc, #104]	; (800e66c <rmw_validate_full_topic_name+0xf4>)
 800e604:	e004      	b.n	800e610 <rmw_validate_full_topic_name+0x98>
 800e606:	4298      	cmp	r0, r3
 800e608:	f104 0401 	add.w	r4, r4, #1
 800e60c:	4613      	mov	r3, r2
 800e60e:	d91c      	bls.n	800e64a <rmw_validate_full_topic_name+0xd2>
 800e610:	4298      	cmp	r0, r3
 800e612:	f103 0201 	add.w	r2, r3, #1
 800e616:	d0f6      	beq.n	800e606 <rmw_validate_full_topic_name+0x8e>
 800e618:	7821      	ldrb	r1, [r4, #0]
 800e61a:	292f      	cmp	r1, #47	; 0x2f
 800e61c:	d1f3      	bne.n	800e606 <rmw_validate_full_topic_name+0x8e>
 800e61e:	7861      	ldrb	r1, [r4, #1]
 800e620:	292f      	cmp	r1, #47	; 0x2f
 800e622:	d01e      	beq.n	800e662 <rmw_validate_full_topic_name+0xea>
 800e624:	5dc9      	ldrb	r1, [r1, r7]
 800e626:	0749      	lsls	r1, r1, #29
 800e628:	d5ed      	bpl.n	800e606 <rmw_validate_full_topic_name+0x8e>
 800e62a:	2206      	movs	r2, #6
 800e62c:	602a      	str	r2, [r5, #0]
 800e62e:	2e00      	cmp	r6, #0
 800e630:	d0bd      	beq.n	800e5ae <rmw_validate_full_topic_name+0x36>
 800e632:	2000      	movs	r0, #0
 800e634:	6033      	str	r3, [r6, #0]
 800e636:	e7b4      	b.n	800e5a2 <rmw_validate_full_topic_name+0x2a>
 800e638:	200b      	movs	r0, #11
 800e63a:	4770      	bx	lr
 800e63c:	200b      	movs	r0, #11
 800e63e:	e7b0      	b.n	800e5a2 <rmw_validate_full_topic_name+0x2a>
 800e640:	2203      	movs	r2, #3
 800e642:	602a      	str	r2, [r5, #0]
 800e644:	2e00      	cmp	r6, #0
 800e646:	d1f4      	bne.n	800e632 <rmw_validate_full_topic_name+0xba>
 800e648:	e7b1      	b.n	800e5ae <rmw_validate_full_topic_name+0x36>
 800e64a:	28f7      	cmp	r0, #247	; 0xf7
 800e64c:	d803      	bhi.n	800e656 <rmw_validate_full_topic_name+0xde>
 800e64e:	2300      	movs	r3, #0
 800e650:	4618      	mov	r0, r3
 800e652:	602b      	str	r3, [r5, #0]
 800e654:	e7a5      	b.n	800e5a2 <rmw_validate_full_topic_name+0x2a>
 800e656:	2307      	movs	r3, #7
 800e658:	602b      	str	r3, [r5, #0]
 800e65a:	2e00      	cmp	r6, #0
 800e65c:	d0a7      	beq.n	800e5ae <rmw_validate_full_topic_name+0x36>
 800e65e:	23f6      	movs	r3, #246	; 0xf6
 800e660:	e7e7      	b.n	800e632 <rmw_validate_full_topic_name+0xba>
 800e662:	2205      	movs	r2, #5
 800e664:	602a      	str	r2, [r5, #0]
 800e666:	2e00      	cmp	r6, #0
 800e668:	d1e3      	bne.n	800e632 <rmw_validate_full_topic_name+0xba>
 800e66a:	e7a0      	b.n	800e5ae <rmw_validate_full_topic_name+0x36>
 800e66c:	080155b5 	.word	0x080155b5

0800e670 <rmw_validate_namespace_with_size>:
 800e670:	2800      	cmp	r0, #0
 800e672:	d043      	beq.n	800e6fc <rmw_validate_namespace_with_size+0x8c>
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	4614      	mov	r4, r2
 800e678:	b0c2      	sub	sp, #264	; 0x108
 800e67a:	b32a      	cbz	r2, 800e6c8 <rmw_validate_namespace_with_size+0x58>
 800e67c:	2901      	cmp	r1, #1
 800e67e:	460d      	mov	r5, r1
 800e680:	461e      	mov	r6, r3
 800e682:	d102      	bne.n	800e68a <rmw_validate_namespace_with_size+0x1a>
 800e684:	7803      	ldrb	r3, [r0, #0]
 800e686:	2b2f      	cmp	r3, #47	; 0x2f
 800e688:	d012      	beq.n	800e6b0 <rmw_validate_namespace_with_size+0x40>
 800e68a:	aa01      	add	r2, sp, #4
 800e68c:	4669      	mov	r1, sp
 800e68e:	f7ff ff73 	bl	800e578 <rmw_validate_full_topic_name>
 800e692:	b980      	cbnz	r0, 800e6b6 <rmw_validate_namespace_with_size+0x46>
 800e694:	9a00      	ldr	r2, [sp, #0]
 800e696:	b14a      	cbz	r2, 800e6ac <rmw_validate_namespace_with_size+0x3c>
 800e698:	2a07      	cmp	r2, #7
 800e69a:	d007      	beq.n	800e6ac <rmw_validate_namespace_with_size+0x3c>
 800e69c:	1e53      	subs	r3, r2, #1
 800e69e:	2b05      	cmp	r3, #5
 800e6a0:	d82e      	bhi.n	800e700 <rmw_validate_namespace_with_size+0x90>
 800e6a2:	e8df f003 	tbb	[pc, r3]
 800e6a6:	1f1c      	.short	0x1f1c
 800e6a8:	14282522 	.word	0x14282522
 800e6ac:	2df5      	cmp	r5, #245	; 0xf5
 800e6ae:	d804      	bhi.n	800e6ba <rmw_validate_namespace_with_size+0x4a>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	b042      	add	sp, #264	; 0x108
 800e6b8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ba:	2307      	movs	r3, #7
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	2e00      	cmp	r6, #0
 800e6c0:	d0f9      	beq.n	800e6b6 <rmw_validate_namespace_with_size+0x46>
 800e6c2:	23f4      	movs	r3, #244	; 0xf4
 800e6c4:	6033      	str	r3, [r6, #0]
 800e6c6:	e7f6      	b.n	800e6b6 <rmw_validate_namespace_with_size+0x46>
 800e6c8:	200b      	movs	r0, #11
 800e6ca:	b042      	add	sp, #264	; 0x108
 800e6cc:	bd70      	pop	{r4, r5, r6, pc}
 800e6ce:	2306      	movs	r3, #6
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	2e00      	cmp	r6, #0
 800e6d4:	d0ef      	beq.n	800e6b6 <rmw_validate_namespace_with_size+0x46>
 800e6d6:	9b01      	ldr	r3, [sp, #4]
 800e6d8:	6033      	str	r3, [r6, #0]
 800e6da:	b042      	add	sp, #264	; 0x108
 800e6dc:	bd70      	pop	{r4, r5, r6, pc}
 800e6de:	2301      	movs	r3, #1
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	e7f6      	b.n	800e6d2 <rmw_validate_namespace_with_size+0x62>
 800e6e4:	2302      	movs	r3, #2
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	e7f3      	b.n	800e6d2 <rmw_validate_namespace_with_size+0x62>
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	e7f0      	b.n	800e6d2 <rmw_validate_namespace_with_size+0x62>
 800e6f0:	2304      	movs	r3, #4
 800e6f2:	6023      	str	r3, [r4, #0]
 800e6f4:	e7ed      	b.n	800e6d2 <rmw_validate_namespace_with_size+0x62>
 800e6f6:	2305      	movs	r3, #5
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	e7ea      	b.n	800e6d2 <rmw_validate_namespace_with_size+0x62>
 800e6fc:	200b      	movs	r0, #11
 800e6fe:	4770      	bx	lr
 800e700:	4613      	mov	r3, r2
 800e702:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e706:	4a03      	ldr	r2, [pc, #12]	; (800e714 <rmw_validate_namespace_with_size+0xa4>)
 800e708:	a802      	add	r0, sp, #8
 800e70a:	f7ff fd1f 	bl	800e14c <rcutils_snprintf>
 800e70e:	2001      	movs	r0, #1
 800e710:	e7d1      	b.n	800e6b6 <rmw_validate_namespace_with_size+0x46>
 800e712:	bf00      	nop
 800e714:	08014f08 	.word	0x08014f08

0800e718 <rmw_validate_namespace>:
 800e718:	b168      	cbz	r0, 800e736 <rmw_validate_namespace+0x1e>
 800e71a:	b570      	push	{r4, r5, r6, lr}
 800e71c:	460d      	mov	r5, r1
 800e71e:	4616      	mov	r6, r2
 800e720:	4604      	mov	r4, r0
 800e722:	f7f1 fde7 	bl	80002f4 <strlen>
 800e726:	4633      	mov	r3, r6
 800e728:	4601      	mov	r1, r0
 800e72a:	462a      	mov	r2, r5
 800e72c:	4620      	mov	r0, r4
 800e72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e732:	f7ff bf9d 	b.w	800e670 <rmw_validate_namespace_with_size>
 800e736:	200b      	movs	r0, #11
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop

0800e73c <rmw_namespace_validation_result_string>:
 800e73c:	2807      	cmp	r0, #7
 800e73e:	d803      	bhi.n	800e748 <rmw_namespace_validation_result_string+0xc>
 800e740:	4b02      	ldr	r3, [pc, #8]	; (800e74c <rmw_namespace_validation_result_string+0x10>)
 800e742:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e746:	4770      	bx	lr
 800e748:	4801      	ldr	r0, [pc, #4]	; (800e750 <rmw_namespace_validation_result_string+0x14>)
 800e74a:	4770      	bx	lr
 800e74c:	08015100 	.word	0x08015100
 800e750:	08014f58 	.word	0x08014f58

0800e754 <rmw_validate_node_name>:
 800e754:	2800      	cmp	r0, #0
 800e756:	d042      	beq.n	800e7de <rmw_validate_node_name+0x8a>
 800e758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e75c:	460d      	mov	r5, r1
 800e75e:	2900      	cmp	r1, #0
 800e760:	d03f      	beq.n	800e7e2 <rmw_validate_node_name+0x8e>
 800e762:	4604      	mov	r4, r0
 800e764:	4616      	mov	r6, r2
 800e766:	f7f1 fdc5 	bl	80002f4 <strlen>
 800e76a:	b310      	cbz	r0, 800e7b2 <rmw_validate_node_name+0x5e>
 800e76c:	1e63      	subs	r3, r4, #1
 800e76e:	f1c4 0101 	rsb	r1, r4, #1
 800e772:	eb03 0800 	add.w	r8, r3, r0
 800e776:	18cf      	adds	r7, r1, r3
 800e778:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e77c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800e780:	f02e 0c20 	bic.w	ip, lr, #32
 800e784:	2a09      	cmp	r2, #9
 800e786:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800e78a:	d905      	bls.n	800e798 <rmw_validate_node_name+0x44>
 800e78c:	f1bc 0f19 	cmp.w	ip, #25
 800e790:	d902      	bls.n	800e798 <rmw_validate_node_name+0x44>
 800e792:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800e796:	d114      	bne.n	800e7c2 <rmw_validate_node_name+0x6e>
 800e798:	4598      	cmp	r8, r3
 800e79a:	d1ec      	bne.n	800e776 <rmw_validate_node_name+0x22>
 800e79c:	7822      	ldrb	r2, [r4, #0]
 800e79e:	4b16      	ldr	r3, [pc, #88]	; (800e7f8 <rmw_validate_node_name+0xa4>)
 800e7a0:	5cd3      	ldrb	r3, [r2, r3]
 800e7a2:	f013 0304 	ands.w	r3, r3, #4
 800e7a6:	d113      	bne.n	800e7d0 <rmw_validate_node_name+0x7c>
 800e7a8:	28ff      	cmp	r0, #255	; 0xff
 800e7aa:	d81c      	bhi.n	800e7e6 <rmw_validate_node_name+0x92>
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	602b      	str	r3, [r5, #0]
 800e7b0:	e00c      	b.n	800e7cc <rmw_validate_node_name+0x78>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	602b      	str	r3, [r5, #0]
 800e7b6:	b17e      	cbz	r6, 800e7d8 <rmw_validate_node_name+0x84>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	6033      	str	r3, [r6, #0]
 800e7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c2:	2302      	movs	r3, #2
 800e7c4:	602b      	str	r3, [r5, #0]
 800e7c6:	b13e      	cbz	r6, 800e7d8 <rmw_validate_node_name+0x84>
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	6037      	str	r7, [r6, #0]
 800e7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	602b      	str	r3, [r5, #0]
 800e7d4:	2e00      	cmp	r6, #0
 800e7d6:	d1ef      	bne.n	800e7b8 <rmw_validate_node_name+0x64>
 800e7d8:	2000      	movs	r0, #0
 800e7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7de:	200b      	movs	r0, #11
 800e7e0:	4770      	bx	lr
 800e7e2:	200b      	movs	r0, #11
 800e7e4:	e7f2      	b.n	800e7cc <rmw_validate_node_name+0x78>
 800e7e6:	2204      	movs	r2, #4
 800e7e8:	602a      	str	r2, [r5, #0]
 800e7ea:	2e00      	cmp	r6, #0
 800e7ec:	d0f4      	beq.n	800e7d8 <rmw_validate_node_name+0x84>
 800e7ee:	22fe      	movs	r2, #254	; 0xfe
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	6032      	str	r2, [r6, #0]
 800e7f4:	e7ea      	b.n	800e7cc <rmw_validate_node_name+0x78>
 800e7f6:	bf00      	nop
 800e7f8:	080155b5 	.word	0x080155b5

0800e7fc <rmw_node_name_validation_result_string>:
 800e7fc:	2804      	cmp	r0, #4
 800e7fe:	d803      	bhi.n	800e808 <rmw_node_name_validation_result_string+0xc>
 800e800:	4b02      	ldr	r3, [pc, #8]	; (800e80c <rmw_node_name_validation_result_string+0x10>)
 800e802:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e806:	4770      	bx	lr
 800e808:	4801      	ldr	r0, [pc, #4]	; (800e810 <rmw_node_name_validation_result_string+0x14>)
 800e80a:	4770      	bx	lr
 800e80c:	0801520c 	.word	0x0801520c
 800e810:	08015120 	.word	0x08015120

0800e814 <get_memory>:
 800e814:	4603      	mov	r3, r0
 800e816:	6840      	ldr	r0, [r0, #4]
 800e818:	b158      	cbz	r0, 800e832 <get_memory+0x1e>
 800e81a:	6842      	ldr	r2, [r0, #4]
 800e81c:	605a      	str	r2, [r3, #4]
 800e81e:	b10a      	cbz	r2, 800e824 <get_memory+0x10>
 800e820:	2100      	movs	r1, #0
 800e822:	6011      	str	r1, [r2, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	6042      	str	r2, [r0, #4]
 800e828:	b102      	cbz	r2, 800e82c <get_memory+0x18>
 800e82a:	6010      	str	r0, [r2, #0]
 800e82c:	2200      	movs	r2, #0
 800e82e:	6002      	str	r2, [r0, #0]
 800e830:	6018      	str	r0, [r3, #0]
 800e832:	4770      	bx	lr

0800e834 <put_memory>:
 800e834:	680b      	ldr	r3, [r1, #0]
 800e836:	b10b      	cbz	r3, 800e83c <put_memory+0x8>
 800e838:	684a      	ldr	r2, [r1, #4]
 800e83a:	605a      	str	r2, [r3, #4]
 800e83c:	684a      	ldr	r2, [r1, #4]
 800e83e:	b102      	cbz	r2, 800e842 <put_memory+0xe>
 800e840:	6013      	str	r3, [r2, #0]
 800e842:	6803      	ldr	r3, [r0, #0]
 800e844:	428b      	cmp	r3, r1
 800e846:	6843      	ldr	r3, [r0, #4]
 800e848:	bf08      	it	eq
 800e84a:	6002      	streq	r2, [r0, #0]
 800e84c:	604b      	str	r3, [r1, #4]
 800e84e:	b103      	cbz	r3, 800e852 <put_memory+0x1e>
 800e850:	6019      	str	r1, [r3, #0]
 800e852:	2300      	movs	r3, #0
 800e854:	600b      	str	r3, [r1, #0]
 800e856:	6041      	str	r1, [r0, #4]
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop

0800e85c <rmw_get_implementation_identifier>:
 800e85c:	4b01      	ldr	r3, [pc, #4]	; (800e864 <rmw_get_implementation_identifier+0x8>)
 800e85e:	6818      	ldr	r0, [r3, #0]
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	08015238 	.word	0x08015238

0800e868 <rmw_init_options_init>:
 800e868:	b084      	sub	sp, #16
 800e86a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e86c:	b083      	sub	sp, #12
 800e86e:	ad09      	add	r5, sp, #36	; 0x24
 800e870:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e874:	b130      	cbz	r0, 800e884 <rmw_init_options_init+0x1c>
 800e876:	4604      	mov	r4, r0
 800e878:	4628      	mov	r0, r5
 800e87a:	f7fb f9cb 	bl	8009c14 <rcutils_allocator_is_valid>
 800e87e:	b108      	cbz	r0, 800e884 <rmw_init_options_init+0x1c>
 800e880:	68a6      	ldr	r6, [r4, #8]
 800e882:	b12e      	cbz	r6, 800e890 <rmw_init_options_init+0x28>
 800e884:	200b      	movs	r0, #11
 800e886:	b003      	add	sp, #12
 800e888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e88c:	b004      	add	sp, #16
 800e88e:	4770      	bx	lr
 800e890:	2200      	movs	r2, #0
 800e892:	2300      	movs	r3, #0
 800e894:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800e898:	f8df e098 	ldr.w	lr, [pc, #152]	; 800e934 <rmw_init_options_init+0xcc>
 800e89c:	466f      	mov	r7, sp
 800e89e:	e9c4 2300 	strd	r2, r3, [r4]
 800e8a2:	4b20      	ldr	r3, [pc, #128]	; (800e924 <rmw_init_options_init+0xbc>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	60a3      	str	r3, [r4, #8]
 800e8a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	f8cc 3000 	str.w	r3, [ip]
 800e8b6:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 800e8ba:	60e6      	str	r6, [r4, #12]
 800e8bc:	f7ff fe58 	bl	800e570 <rmw_get_default_security_options>
 800e8c0:	f104 0310 	add.w	r3, r4, #16
 800e8c4:	2203      	movs	r2, #3
 800e8c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e8ca:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8ce:	4816      	ldr	r0, [pc, #88]	; (800e928 <rmw_init_options_init+0xc0>)
 800e8d0:	4916      	ldr	r1, [pc, #88]	; (800e92c <rmw_init_options_init+0xc4>)
 800e8d2:	7626      	strb	r6, [r4, #24]
 800e8d4:	f7fb fcaa 	bl	800a22c <rmw_uxrce_init_init_options_impl_memory>
 800e8d8:	4813      	ldr	r0, [pc, #76]	; (800e928 <rmw_init_options_init+0xc0>)
 800e8da:	f7ff ff9b 	bl	800e814 <get_memory>
 800e8de:	b1f0      	cbz	r0, 800e91e <rmw_init_options_init+0xb6>
 800e8e0:	4a13      	ldr	r2, [pc, #76]	; (800e930 <rmw_init_options_init+0xc8>)
 800e8e2:	6883      	ldr	r3, [r0, #8]
 800e8e4:	6851      	ldr	r1, [r2, #4]
 800e8e6:	6563      	str	r3, [r4, #84]	; 0x54
 800e8e8:	7810      	ldrb	r0, [r2, #0]
 800e8ea:	6159      	str	r1, [r3, #20]
 800e8ec:	68d1      	ldr	r1, [r2, #12]
 800e8ee:	7418      	strb	r0, [r3, #16]
 800e8f0:	61d9      	str	r1, [r3, #28]
 800e8f2:	6911      	ldr	r1, [r2, #16]
 800e8f4:	6219      	str	r1, [r3, #32]
 800e8f6:	6951      	ldr	r1, [r2, #20]
 800e8f8:	6892      	ldr	r2, [r2, #8]
 800e8fa:	6259      	str	r1, [r3, #36]	; 0x24
 800e8fc:	619a      	str	r2, [r3, #24]
 800e8fe:	f7fd fa4f 	bl	800bda0 <uxr_nanos>
 800e902:	f003 fdb3 	bl	801246c <srand>
 800e906:	f003 fddf 	bl	80124c8 <rand>
 800e90a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e90c:	6298      	str	r0, [r3, #40]	; 0x28
 800e90e:	2800      	cmp	r0, #0
 800e910:	d0f9      	beq.n	800e906 <rmw_init_options_init+0x9e>
 800e912:	2000      	movs	r0, #0
 800e914:	b003      	add	sp, #12
 800e916:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e91a:	b004      	add	sp, #16
 800e91c:	4770      	bx	lr
 800e91e:	2001      	movs	r0, #1
 800e920:	e7b1      	b.n	800e886 <rmw_init_options_init+0x1e>
 800e922:	bf00      	nop
 800e924:	08015238 	.word	0x08015238
 800e928:	2000dc8c 	.word	0x2000dc8c
 800e92c:	20009528 	.word	0x20009528
 800e930:	200093b4 	.word	0x200093b4
 800e934:	08014dbc 	.word	0x08014dbc

0800e938 <rmw_init_options_copy>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	b158      	cbz	r0, 800e954 <rmw_init_options_copy+0x1c>
 800e93c:	460d      	mov	r5, r1
 800e93e:	b149      	cbz	r1, 800e954 <rmw_init_options_copy+0x1c>
 800e940:	4604      	mov	r4, r0
 800e942:	6880      	ldr	r0, [r0, #8]
 800e944:	b120      	cbz	r0, 800e950 <rmw_init_options_copy+0x18>
 800e946:	4b13      	ldr	r3, [pc, #76]	; (800e994 <rmw_init_options_copy+0x5c>)
 800e948:	6819      	ldr	r1, [r3, #0]
 800e94a:	f7f1 fcc9 	bl	80002e0 <strcmp>
 800e94e:	b9d8      	cbnz	r0, 800e988 <rmw_init_options_copy+0x50>
 800e950:	68ae      	ldr	r6, [r5, #8]
 800e952:	b116      	cbz	r6, 800e95a <rmw_init_options_copy+0x22>
 800e954:	260b      	movs	r6, #11
 800e956:	4630      	mov	r0, r6
 800e958:	bd70      	pop	{r4, r5, r6, pc}
 800e95a:	2258      	movs	r2, #88	; 0x58
 800e95c:	4621      	mov	r1, r4
 800e95e:	4628      	mov	r0, r5
 800e960:	f003 f81e 	bl	80119a0 <memcpy>
 800e964:	480c      	ldr	r0, [pc, #48]	; (800e998 <rmw_init_options_copy+0x60>)
 800e966:	f7ff ff55 	bl	800e814 <get_memory>
 800e96a:	b180      	cbz	r0, 800e98e <rmw_init_options_copy+0x56>
 800e96c:	6883      	ldr	r3, [r0, #8]
 800e96e:	656b      	str	r3, [r5, #84]	; 0x54
 800e970:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800e972:	f103 0410 	add.w	r4, r3, #16
 800e976:	3510      	adds	r5, #16
 800e978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e97a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e97c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e984:	4630      	mov	r0, r6
 800e986:	bd70      	pop	{r4, r5, r6, pc}
 800e988:	260c      	movs	r6, #12
 800e98a:	4630      	mov	r0, r6
 800e98c:	bd70      	pop	{r4, r5, r6, pc}
 800e98e:	2601      	movs	r6, #1
 800e990:	e7e1      	b.n	800e956 <rmw_init_options_copy+0x1e>
 800e992:	bf00      	nop
 800e994:	08015238 	.word	0x08015238
 800e998:	2000dc8c 	.word	0x2000dc8c

0800e99c <rmw_init_options_fini>:
 800e99c:	b368      	cbz	r0, 800e9fa <rmw_init_options_fini+0x5e>
 800e99e:	b510      	push	{r4, lr}
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	b096      	sub	sp, #88	; 0x58
 800e9a4:	3040      	adds	r0, #64	; 0x40
 800e9a6:	f7fb f935 	bl	8009c14 <rcutils_allocator_is_valid>
 800e9aa:	b1f0      	cbz	r0, 800e9ea <rmw_init_options_fini+0x4e>
 800e9ac:	68a0      	ldr	r0, [r4, #8]
 800e9ae:	b120      	cbz	r0, 800e9ba <rmw_init_options_fini+0x1e>
 800e9b0:	4b13      	ldr	r3, [pc, #76]	; (800ea00 <rmw_init_options_fini+0x64>)
 800e9b2:	6819      	ldr	r1, [r3, #0]
 800e9b4:	f7f1 fc94 	bl	80002e0 <strcmp>
 800e9b8:	b9e8      	cbnz	r0, 800e9f6 <rmw_init_options_fini+0x5a>
 800e9ba:	4b12      	ldr	r3, [pc, #72]	; (800ea04 <rmw_init_options_fini+0x68>)
 800e9bc:	6819      	ldr	r1, [r3, #0]
 800e9be:	b1b9      	cbz	r1, 800e9f0 <rmw_init_options_fini+0x54>
 800e9c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e9c2:	e001      	b.n	800e9c8 <rmw_init_options_fini+0x2c>
 800e9c4:	6849      	ldr	r1, [r1, #4]
 800e9c6:	b199      	cbz	r1, 800e9f0 <rmw_init_options_fini+0x54>
 800e9c8:	688b      	ldr	r3, [r1, #8]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d1fa      	bne.n	800e9c4 <rmw_init_options_fini+0x28>
 800e9ce:	480d      	ldr	r0, [pc, #52]	; (800ea04 <rmw_init_options_fini+0x68>)
 800e9d0:	f7ff ff30 	bl	800e834 <put_memory>
 800e9d4:	4668      	mov	r0, sp
 800e9d6:	f7ff fdb7 	bl	800e548 <rmw_get_zero_initialized_init_options>
 800e9da:	2258      	movs	r2, #88	; 0x58
 800e9dc:	4669      	mov	r1, sp
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f002 ffde 	bl	80119a0 <memcpy>
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	b016      	add	sp, #88	; 0x58
 800e9e8:	bd10      	pop	{r4, pc}
 800e9ea:	200b      	movs	r0, #11
 800e9ec:	b016      	add	sp, #88	; 0x58
 800e9ee:	bd10      	pop	{r4, pc}
 800e9f0:	2001      	movs	r0, #1
 800e9f2:	b016      	add	sp, #88	; 0x58
 800e9f4:	bd10      	pop	{r4, pc}
 800e9f6:	200c      	movs	r0, #12
 800e9f8:	e7f5      	b.n	800e9e6 <rmw_init_options_fini+0x4a>
 800e9fa:	200b      	movs	r0, #11
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	08015238 	.word	0x08015238
 800ea04:	2000dc8c 	.word	0x2000dc8c

0800ea08 <rmw_init>:
 800ea08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	f000 80d3 	beq.w	800ebba <rmw_init+0x1b2>
 800ea14:	460e      	mov	r6, r1
 800ea16:	2900      	cmp	r1, #0
 800ea18:	f000 80cf 	beq.w	800ebba <rmw_init+0x1b2>
 800ea1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ea1e:	4605      	mov	r5, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 80ca 	beq.w	800ebba <rmw_init+0x1b2>
 800ea26:	4b78      	ldr	r3, [pc, #480]	; (800ec08 <rmw_init+0x200>)
 800ea28:	6880      	ldr	r0, [r0, #8]
 800ea2a:	681f      	ldr	r7, [r3, #0]
 800ea2c:	b128      	cbz	r0, 800ea3a <rmw_init+0x32>
 800ea2e:	4639      	mov	r1, r7
 800ea30:	f7f1 fc56 	bl	80002e0 <strcmp>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	f040 80ca 	bne.w	800ebce <rmw_init+0x1c6>
 800ea3a:	4c74      	ldr	r4, [pc, #464]	; (800ec0c <rmw_init+0x204>)
 800ea3c:	f04f 0800 	mov.w	r8, #0
 800ea40:	4973      	ldr	r1, [pc, #460]	; (800ec10 <rmw_init+0x208>)
 800ea42:	4874      	ldr	r0, [pc, #464]	; (800ec14 <rmw_init+0x20c>)
 800ea44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea48:	60b7      	str	r7, [r6, #8]
 800ea4a:	e9c6 2300 	strd	r2, r3, [r6]
 800ea4e:	68eb      	ldr	r3, [r5, #12]
 800ea50:	2201      	movs	r2, #1
 800ea52:	66b3      	str	r3, [r6, #104]	; 0x68
 800ea54:	f7fb fb8a 	bl	800a16c <rmw_uxrce_init_session_memory>
 800ea58:	4620      	mov	r0, r4
 800ea5a:	2204      	movs	r2, #4
 800ea5c:	496e      	ldr	r1, [pc, #440]	; (800ec18 <rmw_init+0x210>)
 800ea5e:	f7fb fbc5 	bl	800a1ec <rmw_uxrce_init_static_input_buffer_memory>
 800ea62:	486c      	ldr	r0, [pc, #432]	; (800ec14 <rmw_init+0x20c>)
 800ea64:	f884 800d 	strb.w	r8, [r4, #13]
 800ea68:	f7ff fed4 	bl	800e814 <get_memory>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	f000 80a9 	beq.w	800ebc4 <rmw_init+0x1bc>
 800ea72:	6884      	ldr	r4, [r0, #8]
 800ea74:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800ea76:	f104 0910 	add.w	r9, r4, #16
 800ea7a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ea7c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ea80:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800ea84:	9101      	str	r1, [sp, #4]
 800ea86:	4661      	mov	r1, ip
 800ea88:	6a00      	ldr	r0, [r0, #32]
 800ea8a:	9000      	str	r0, [sp, #0]
 800ea8c:	4648      	mov	r0, r9
 800ea8e:	f000 fd95 	bl	800f5bc <uxr_set_custom_transport_callbacks>
 800ea92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea96:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800ea9a:	4960      	ldr	r1, [pc, #384]	; (800ec1c <rmw_init+0x214>)
 800ea9c:	4860      	ldr	r0, [pc, #384]	; (800ec20 <rmw_init+0x218>)
 800ea9e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800eaa2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800eaa6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800eaaa:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800eaae:	2201      	movs	r2, #1
 800eab0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800eab4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800eab8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800eabc:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800eac0:	66f4      	str	r4, [r6, #108]	; 0x6c
 800eac2:	f7fb fb33 	bl	800a12c <rmw_uxrce_init_node_memory>
 800eac6:	2205      	movs	r2, #5
 800eac8:	4956      	ldr	r1, [pc, #344]	; (800ec24 <rmw_init+0x21c>)
 800eaca:	4857      	ldr	r0, [pc, #348]	; (800ec28 <rmw_init+0x220>)
 800eacc:	f7fb fb0e 	bl	800a0ec <rmw_uxrce_init_subscription_memory>
 800ead0:	220a      	movs	r2, #10
 800ead2:	4956      	ldr	r1, [pc, #344]	; (800ec2c <rmw_init+0x224>)
 800ead4:	4856      	ldr	r0, [pc, #344]	; (800ec30 <rmw_init+0x228>)
 800ead6:	f7fb fae9 	bl	800a0ac <rmw_uxrce_init_publisher_memory>
 800eada:	2201      	movs	r2, #1
 800eadc:	4955      	ldr	r1, [pc, #340]	; (800ec34 <rmw_init+0x22c>)
 800eade:	4856      	ldr	r0, [pc, #344]	; (800ec38 <rmw_init+0x230>)
 800eae0:	f7fb faa4 	bl	800a02c <rmw_uxrce_init_service_memory>
 800eae4:	2201      	movs	r2, #1
 800eae6:	4955      	ldr	r1, [pc, #340]	; (800ec3c <rmw_init+0x234>)
 800eae8:	4855      	ldr	r0, [pc, #340]	; (800ec40 <rmw_init+0x238>)
 800eaea:	f7fb fabf 	bl	800a06c <rmw_uxrce_init_client_memory>
 800eaee:	220f      	movs	r2, #15
 800eaf0:	4954      	ldr	r1, [pc, #336]	; (800ec44 <rmw_init+0x23c>)
 800eaf2:	4855      	ldr	r0, [pc, #340]	; (800ec48 <rmw_init+0x240>)
 800eaf4:	f7fb fb5a 	bl	800a1ac <rmw_uxrce_init_topic_memory>
 800eaf8:	2203      	movs	r2, #3
 800eafa:	4954      	ldr	r1, [pc, #336]	; (800ec4c <rmw_init+0x244>)
 800eafc:	4854      	ldr	r0, [pc, #336]	; (800ec50 <rmw_init+0x248>)
 800eafe:	f7fb fb95 	bl	800a22c <rmw_uxrce_init_init_options_impl_memory>
 800eb02:	2204      	movs	r2, #4
 800eb04:	4953      	ldr	r1, [pc, #332]	; (800ec54 <rmw_init+0x24c>)
 800eb06:	4854      	ldr	r0, [pc, #336]	; (800ec58 <rmw_init+0x250>)
 800eb08:	f7fb fbb0 	bl	800a26c <rmw_uxrce_init_wait_set_memory>
 800eb0c:	4953      	ldr	r1, [pc, #332]	; (800ec5c <rmw_init+0x254>)
 800eb0e:	4854      	ldr	r0, [pc, #336]	; (800ec60 <rmw_init+0x258>)
 800eb10:	2204      	movs	r2, #4
 800eb12:	f7fb fbcb 	bl	800a2ac <rmw_uxrce_init_guard_condition_memory>
 800eb16:	4642      	mov	r2, r8
 800eb18:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800eb1a:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 800eb1c:	f000 fb0a 	bl	800f134 <rmw_uxrce_transport_init>
 800eb20:	4607      	mov	r7, r0
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d158      	bne.n	800ebd8 <rmw_init+0x1d0>
 800eb26:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800eb28:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800eb2c:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800eb30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb32:	4628      	mov	r0, r5
 800eb34:	f7fb ffc4 	bl	800aac0 <uxr_init_session>
 800eb38:	4622      	mov	r2, r4
 800eb3a:	494a      	ldr	r1, [pc, #296]	; (800ec64 <rmw_init+0x25c>)
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	f7fb ffe3 	bl	800ab08 <uxr_set_topic_callback>
 800eb42:	463a      	mov	r2, r7
 800eb44:	4948      	ldr	r1, [pc, #288]	; (800ec68 <rmw_init+0x260>)
 800eb46:	4628      	mov	r0, r5
 800eb48:	f7fb ffda 	bl	800ab00 <uxr_set_status_callback>
 800eb4c:	463a      	mov	r2, r7
 800eb4e:	4947      	ldr	r1, [pc, #284]	; (800ec6c <rmw_init+0x264>)
 800eb50:	4628      	mov	r0, r5
 800eb52:	f7fb ffdd 	bl	800ab10 <uxr_set_request_callback>
 800eb56:	463a      	mov	r2, r7
 800eb58:	4945      	ldr	r1, [pc, #276]	; (800ec70 <rmw_init+0x268>)
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f7fb ffdc 	bl	800ab18 <uxr_set_reply_callback>
 800eb60:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800eb64:	2304      	movs	r3, #4
 800eb66:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800eb6a:	0092      	lsls	r2, r2, #2
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	f7fc f813 	bl	800ab98 <uxr_create_input_reliable_stream>
 800eb72:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800eb76:	2304      	movs	r3, #4
 800eb78:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800eb7c:	0092      	lsls	r2, r2, #2
 800eb7e:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800eb82:	4628      	mov	r0, r5
 800eb84:	f7fb ffde 	bl	800ab44 <uxr_create_output_reliable_stream>
 800eb88:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7fb fffd 	bl	800ab8c <uxr_create_input_best_effort_stream>
 800eb92:	f241 3194 	movw	r1, #5012	; 0x1394
 800eb96:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	4421      	add	r1, r4
 800eb9e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800eba2:	f7fb ffbd 	bl	800ab20 <uxr_create_output_best_effort_stream>
 800eba6:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f7fc fd0c 	bl	800b5c8 <uxr_create_session>
 800ebb0:	b1f8      	cbz	r0, 800ebf2 <rmw_init+0x1ea>
 800ebb2:	4638      	mov	r0, r7
 800ebb4:	b003      	add	sp, #12
 800ebb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebba:	270b      	movs	r7, #11
 800ebbc:	4638      	mov	r0, r7
 800ebbe:	b003      	add	sp, #12
 800ebc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebc4:	2701      	movs	r7, #1
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	b003      	add	sp, #12
 800ebca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebce:	270c      	movs	r7, #12
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	b003      	add	sp, #12
 800ebd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd8:	4648      	mov	r0, r9
 800ebda:	f000 fd2d 	bl	800f638 <uxr_close_custom_transport>
 800ebde:	4621      	mov	r1, r4
 800ebe0:	480c      	ldr	r0, [pc, #48]	; (800ec14 <rmw_init+0x20c>)
 800ebe2:	f7ff fe27 	bl	800e834 <put_memory>
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 800ebec:	b003      	add	sp, #12
 800ebee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebf2:	4648      	mov	r0, r9
 800ebf4:	f000 fd20 	bl	800f638 <uxr_close_custom_transport>
 800ebf8:	4621      	mov	r1, r4
 800ebfa:	4806      	ldr	r0, [pc, #24]	; (800ec14 <rmw_init+0x20c>)
 800ebfc:	f7ff fe1a 	bl	800e834 <put_memory>
 800ec00:	66f7      	str	r7, [r6, #108]	; 0x6c
 800ec02:	2701      	movs	r7, #1
 800ec04:	e7d5      	b.n	800ebb2 <rmw_init+0x1aa>
 800ec06:	bf00      	nop
 800ec08:	08015238 	.word	0x08015238
 800ec0c:	2000dcdc 	.word	0x2000dcdc
 800ec10:	20009f88 	.word	0x20009f88
 800ec14:	2000dccc 	.word	0x2000dccc
 800ec18:	2000b530 	.word	0x2000b530
 800ec1c:	200095ac 	.word	0x200095ac
 800ec20:	2000dc9c 	.word	0x2000dc9c
 800ec24:	2000d630 	.word	0x2000d630
 800ec28:	2000dcec 	.word	0x2000dcec
 800ec2c:	20009650 	.word	0x20009650
 800ec30:	2000dcac 	.word	0x2000dcac
 800ec34:	20009ec0 	.word	0x20009ec0
 800ec38:	2000dcbc 	.word	0x2000dcbc
 800ec3c:	200093e0 	.word	0x200093e0
 800ec40:	200093d0 	.word	0x200093d0
 800ec44:	2000da68 	.word	0x2000da68
 800ec48:	2000dcfc 	.word	0x2000dcfc
 800ec4c:	20009528 	.word	0x20009528
 800ec50:	2000dc8c 	.word	0x2000dc8c
 800ec54:	2000dc0c 	.word	0x2000dc0c
 800ec58:	2000dd0c 	.word	0x2000dd0c
 800ec5c:	200094a8 	.word	0x200094a8
 800ec60:	2000dc7c 	.word	0x2000dc7c
 800ec64:	080115e9 	.word	0x080115e9
 800ec68:	080115e1 	.word	0x080115e1
 800ec6c:	08011681 	.word	0x08011681
 800ec70:	0801171d 	.word	0x0801171d

0800ec74 <rmw_context_fini>:
 800ec74:	4b17      	ldr	r3, [pc, #92]	; (800ecd4 <rmw_context_fini+0x60>)
 800ec76:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800ec78:	b570      	push	{r4, r5, r6, lr}
 800ec7a:	681c      	ldr	r4, [r3, #0]
 800ec7c:	4605      	mov	r5, r0
 800ec7e:	b334      	cbz	r4, 800ecce <rmw_context_fini+0x5a>
 800ec80:	2600      	movs	r6, #0
 800ec82:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800ec86:	6902      	ldr	r2, [r0, #16]
 800ec88:	428a      	cmp	r2, r1
 800ec8a:	d018      	beq.n	800ecbe <rmw_context_fini+0x4a>
 800ec8c:	2c00      	cmp	r4, #0
 800ec8e:	d1f8      	bne.n	800ec82 <rmw_context_fini+0xe>
 800ec90:	b189      	cbz	r1, 800ecb6 <rmw_context_fini+0x42>
 800ec92:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800ec96:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800ec9a:	789b      	ldrb	r3, [r3, #2]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	bf14      	ite	ne
 800eca0:	210a      	movne	r1, #10
 800eca2:	2100      	moveq	r1, #0
 800eca4:	f7fc fc68 	bl	800b578 <uxr_delete_session_retries>
 800eca8:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800ecaa:	f7fb fb1f 	bl	800a2ec <rmw_uxrce_fini_session_memory>
 800ecae:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800ecb0:	3010      	adds	r0, #16
 800ecb2:	f000 fcc1 	bl	800f638 <uxr_close_custom_transport>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	4630      	mov	r0, r6
 800ecba:	66eb      	str	r3, [r5, #108]	; 0x6c
 800ecbc:	bd70      	pop	{r4, r5, r6, pc}
 800ecbe:	3018      	adds	r0, #24
 800ecc0:	f000 f90e 	bl	800eee0 <rmw_destroy_node>
 800ecc4:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	2c00      	cmp	r4, #0
 800ecca:	d1da      	bne.n	800ec82 <rmw_context_fini+0xe>
 800eccc:	e7e0      	b.n	800ec90 <rmw_context_fini+0x1c>
 800ecce:	4626      	mov	r6, r4
 800ecd0:	e7de      	b.n	800ec90 <rmw_context_fini+0x1c>
 800ecd2:	bf00      	nop
 800ecd4:	2000dc9c 	.word	0x2000dc9c

0800ecd8 <create_topic>:
 800ecd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecdc:	4605      	mov	r5, r0
 800ecde:	b084      	sub	sp, #16
 800ece0:	4822      	ldr	r0, [pc, #136]	; (800ed6c <create_topic+0x94>)
 800ece2:	460f      	mov	r7, r1
 800ece4:	4616      	mov	r6, r2
 800ece6:	f7ff fd95 	bl	800e814 <get_memory>
 800ecea:	4604      	mov	r4, r0
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d039      	beq.n	800ed64 <create_topic+0x8c>
 800ecf0:	692b      	ldr	r3, [r5, #16]
 800ecf2:	2102      	movs	r1, #2
 800ecf4:	6884      	ldr	r4, [r0, #8]
 800ecf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecfa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800ed74 <create_topic+0x9c>
 800ecfe:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800ed02:	1c42      	adds	r2, r0, #1
 800ed04:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800ed08:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800ed0c:	f7fb fe18 	bl	800a940 <uxr_object_id>
 800ed10:	223c      	movs	r2, #60	; 0x3c
 800ed12:	6120      	str	r0, [r4, #16]
 800ed14:	4641      	mov	r1, r8
 800ed16:	4638      	mov	r0, r7
 800ed18:	f7fb fc26 	bl	800a568 <generate_topic_name>
 800ed1c:	b1f0      	cbz	r0, 800ed5c <create_topic+0x84>
 800ed1e:	4f14      	ldr	r7, [pc, #80]	; (800ed70 <create_topic+0x98>)
 800ed20:	4630      	mov	r0, r6
 800ed22:	2264      	movs	r2, #100	; 0x64
 800ed24:	4639      	mov	r1, r7
 800ed26:	f7fb fbf1 	bl	800a50c <generate_type_name>
 800ed2a:	b1b8      	cbz	r0, 800ed5c <create_topic+0x84>
 800ed2c:	6928      	ldr	r0, [r5, #16]
 800ed2e:	2106      	movs	r1, #6
 800ed30:	696b      	ldr	r3, [r5, #20]
 800ed32:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ed36:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed3a:	f8cd 8000 	str.w	r8, [sp]
 800ed3e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 800ed42:	6811      	ldr	r1, [r2, #0]
 800ed44:	6922      	ldr	r2, [r4, #16]
 800ed46:	f7fb fd1f 	bl	800a788 <uxr_buffer_create_topic_bin>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	6928      	ldr	r0, [r5, #16]
 800ed4e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ed52:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ed56:	f7fb fba5 	bl	800a4a4 <run_xrce_session>
 800ed5a:	b918      	cbnz	r0, 800ed64 <create_topic+0x8c>
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	2400      	movs	r4, #0
 800ed60:	f7fb fb3a 	bl	800a3d8 <rmw_uxrce_fini_topic_memory>
 800ed64:	4620      	mov	r0, r4
 800ed66:	b004      	add	sp, #16
 800ed68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed6c:	2000dcfc 	.word	0x2000dcfc
 800ed70:	2000dda0 	.word	0x2000dda0
 800ed74:	2000dd64 	.word	0x2000dd64

0800ed78 <destroy_topic>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	6985      	ldr	r5, [r0, #24]
 800ed7c:	b1dd      	cbz	r5, 800edb6 <destroy_topic+0x3e>
 800ed7e:	4604      	mov	r4, r0
 800ed80:	6928      	ldr	r0, [r5, #16]
 800ed82:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ed86:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed8a:	6922      	ldr	r2, [r4, #16]
 800ed8c:	6819      	ldr	r1, [r3, #0]
 800ed8e:	f7fb fc7d 	bl	800a68c <uxr_buffer_delete_entity>
 800ed92:	4602      	mov	r2, r0
 800ed94:	6928      	ldr	r0, [r5, #16]
 800ed96:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ed9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ed9e:	f7fb fb81 	bl	800a4a4 <run_xrce_session>
 800eda2:	4603      	mov	r3, r0
 800eda4:	4620      	mov	r0, r4
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	bf14      	ite	ne
 800edaa:	2400      	movne	r4, #0
 800edac:	2402      	moveq	r4, #2
 800edae:	f7fb fb13 	bl	800a3d8 <rmw_uxrce_fini_topic_memory>
 800edb2:	4620      	mov	r0, r4
 800edb4:	bd38      	pop	{r3, r4, r5, pc}
 800edb6:	2401      	movs	r4, #1
 800edb8:	4620      	mov	r0, r4
 800edba:	bd38      	pop	{r3, r4, r5, pc}

0800edbc <create_node>:
 800edbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edc0:	b083      	sub	sp, #12
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d064      	beq.n	800ee90 <create_node+0xd4>
 800edc6:	4606      	mov	r6, r0
 800edc8:	4838      	ldr	r0, [pc, #224]	; (800eeac <create_node+0xf0>)
 800edca:	460f      	mov	r7, r1
 800edcc:	4690      	mov	r8, r2
 800edce:	461d      	mov	r5, r3
 800edd0:	f7ff fd20 	bl	800e814 <get_memory>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	d05b      	beq.n	800ee90 <create_node+0xd4>
 800edd8:	6884      	ldr	r4, [r0, #8]
 800edda:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800eddc:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800ede0:	f104 0518 	add.w	r5, r4, #24
 800ede4:	6123      	str	r3, [r4, #16]
 800ede6:	f7ff fd39 	bl	800e85c <rmw_get_implementation_identifier>
 800edea:	f8c4 9020 	str.w	r9, [r4, #32]
 800edee:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7f1 fa7e 	bl	80002f4 <strlen>
 800edf8:	1c42      	adds	r2, r0, #1
 800edfa:	2a3c      	cmp	r2, #60	; 0x3c
 800edfc:	d840      	bhi.n	800ee80 <create_node+0xc4>
 800edfe:	4648      	mov	r0, r9
 800ee00:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800ee04:	4631      	mov	r1, r6
 800ee06:	f002 fdcb 	bl	80119a0 <memcpy>
 800ee0a:	4638      	mov	r0, r7
 800ee0c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800ee10:	f7f1 fa70 	bl	80002f4 <strlen>
 800ee14:	1c42      	adds	r2, r0, #1
 800ee16:	2a3c      	cmp	r2, #60	; 0x3c
 800ee18:	d832      	bhi.n	800ee80 <create_node+0xc4>
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	4648      	mov	r0, r9
 800ee1e:	f002 fdbf 	bl	80119a0 <memcpy>
 800ee22:	6923      	ldr	r3, [r4, #16]
 800ee24:	2101      	movs	r1, #1
 800ee26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee2a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800ee2e:	1842      	adds	r2, r0, r1
 800ee30:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800ee34:	f7fb fd84 	bl	800a940 <uxr_object_id>
 800ee38:	6160      	str	r0, [r4, #20]
 800ee3a:	783b      	ldrb	r3, [r7, #0]
 800ee3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ee3e:	d12c      	bne.n	800ee9a <create_node+0xde>
 800ee40:	787b      	ldrb	r3, [r7, #1]
 800ee42:	bb53      	cbnz	r3, 800ee9a <create_node+0xde>
 800ee44:	4633      	mov	r3, r6
 800ee46:	4a1a      	ldr	r2, [pc, #104]	; (800eeb0 <create_node+0xf4>)
 800ee48:	213c      	movs	r1, #60	; 0x3c
 800ee4a:	481a      	ldr	r0, [pc, #104]	; (800eeb4 <create_node+0xf8>)
 800ee4c:	f003 fb92 	bl	8012574 <sniprintf>
 800ee50:	6920      	ldr	r0, [r4, #16]
 800ee52:	2106      	movs	r1, #6
 800ee54:	fa1f f388 	uxth.w	r3, r8
 800ee58:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ee5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee60:	9101      	str	r1, [sp, #4]
 800ee62:	4914      	ldr	r1, [pc, #80]	; (800eeb4 <create_node+0xf8>)
 800ee64:	9100      	str	r1, [sp, #0]
 800ee66:	6811      	ldr	r1, [r2, #0]
 800ee68:	6962      	ldr	r2, [r4, #20]
 800ee6a:	f7fb fc5b 	bl	800a724 <uxr_buffer_create_participant_bin>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	6920      	ldr	r0, [r4, #16]
 800ee72:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ee76:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ee7a:	f7fb fb13 	bl	800a4a4 <run_xrce_session>
 800ee7e:	b918      	cbnz	r0, 800ee88 <create_node+0xcc>
 800ee80:	4628      	mov	r0, r5
 800ee82:	2500      	movs	r5, #0
 800ee84:	f7fb fa38 	bl	800a2f8 <rmw_uxrce_fini_node_memory>
 800ee88:	4628      	mov	r0, r5
 800ee8a:	b003      	add	sp, #12
 800ee8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee90:	2500      	movs	r5, #0
 800ee92:	4628      	mov	r0, r5
 800ee94:	b003      	add	sp, #12
 800ee96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee9a:	463b      	mov	r3, r7
 800ee9c:	4a06      	ldr	r2, [pc, #24]	; (800eeb8 <create_node+0xfc>)
 800ee9e:	213c      	movs	r1, #60	; 0x3c
 800eea0:	9600      	str	r6, [sp, #0]
 800eea2:	4804      	ldr	r0, [pc, #16]	; (800eeb4 <create_node+0xf8>)
 800eea4:	f003 fb66 	bl	8012574 <sniprintf>
 800eea8:	e7d2      	b.n	800ee50 <create_node+0x94>
 800eeaa:	bf00      	nop
 800eeac:	2000dc9c 	.word	0x2000dc9c
 800eeb0:	08014d18 	.word	0x08014d18
 800eeb4:	2000de04 	.word	0x2000de04
 800eeb8:	08014dc4 	.word	0x08014dc4

0800eebc <rmw_create_node>:
 800eebc:	468c      	mov	ip, r1
 800eebe:	4611      	mov	r1, r2
 800eec0:	f1bc 0f00 	cmp.w	ip, #0
 800eec4:	d00a      	beq.n	800eedc <rmw_create_node+0x20>
 800eec6:	f89c 3000 	ldrb.w	r3, [ip]
 800eeca:	b13b      	cbz	r3, 800eedc <rmw_create_node+0x20>
 800eecc:	b132      	cbz	r2, 800eedc <rmw_create_node+0x20>
 800eece:	7813      	ldrb	r3, [r2, #0]
 800eed0:	b123      	cbz	r3, 800eedc <rmw_create_node+0x20>
 800eed2:	4603      	mov	r3, r0
 800eed4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800eed6:	4660      	mov	r0, ip
 800eed8:	f7ff bf70 	b.w	800edbc <create_node>
 800eedc:	2000      	movs	r0, #0
 800eede:	4770      	bx	lr

0800eee0 <rmw_destroy_node>:
 800eee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee2:	b328      	cbz	r0, 800ef30 <rmw_destroy_node+0x50>
 800eee4:	4607      	mov	r7, r0
 800eee6:	6800      	ldr	r0, [r0, #0]
 800eee8:	b120      	cbz	r0, 800eef4 <rmw_destroy_node+0x14>
 800eeea:	4b37      	ldr	r3, [pc, #220]	; (800efc8 <rmw_destroy_node+0xe8>)
 800eeec:	6819      	ldr	r1, [r3, #0]
 800eeee:	f7f1 f9f7 	bl	80002e0 <strcmp>
 800eef2:	b9e8      	cbnz	r0, 800ef30 <rmw_destroy_node+0x50>
 800eef4:	687d      	ldr	r5, [r7, #4]
 800eef6:	b1dd      	cbz	r5, 800ef30 <rmw_destroy_node+0x50>
 800eef8:	4b34      	ldr	r3, [pc, #208]	; (800efcc <rmw_destroy_node+0xec>)
 800eefa:	681c      	ldr	r4, [r3, #0]
 800eefc:	2c00      	cmp	r4, #0
 800eefe:	d060      	beq.n	800efc2 <rmw_destroy_node+0xe2>
 800ef00:	2600      	movs	r6, #0
 800ef02:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ef06:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800ef0a:	429d      	cmp	r5, r3
 800ef0c:	d013      	beq.n	800ef36 <rmw_destroy_node+0x56>
 800ef0e:	2c00      	cmp	r4, #0
 800ef10:	d1f7      	bne.n	800ef02 <rmw_destroy_node+0x22>
 800ef12:	4b2f      	ldr	r3, [pc, #188]	; (800efd0 <rmw_destroy_node+0xf0>)
 800ef14:	681c      	ldr	r4, [r3, #0]
 800ef16:	b1c4      	cbz	r4, 800ef4a <rmw_destroy_node+0x6a>
 800ef18:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ef1c:	6a0b      	ldr	r3, [r1, #32]
 800ef1e:	429d      	cmp	r5, r3
 800ef20:	d1f9      	bne.n	800ef16 <rmw_destroy_node+0x36>
 800ef22:	317c      	adds	r1, #124	; 0x7c
 800ef24:	4638      	mov	r0, r7
 800ef26:	f000 f8a3 	bl	800f070 <rmw_destroy_subscription>
 800ef2a:	2801      	cmp	r0, #1
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	d1f2      	bne.n	800ef16 <rmw_destroy_node+0x36>
 800ef30:	2601      	movs	r6, #1
 800ef32:	4630      	mov	r0, r6
 800ef34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef36:	3184      	adds	r1, #132	; 0x84
 800ef38:	4638      	mov	r0, r7
 800ef3a:	f7fb f823 	bl	8009f84 <rmw_destroy_publisher>
 800ef3e:	2801      	cmp	r0, #1
 800ef40:	4606      	mov	r6, r0
 800ef42:	d0f5      	beq.n	800ef30 <rmw_destroy_node+0x50>
 800ef44:	2c00      	cmp	r4, #0
 800ef46:	d1dc      	bne.n	800ef02 <rmw_destroy_node+0x22>
 800ef48:	e7e3      	b.n	800ef12 <rmw_destroy_node+0x32>
 800ef4a:	4b22      	ldr	r3, [pc, #136]	; (800efd4 <rmw_destroy_node+0xf4>)
 800ef4c:	681c      	ldr	r4, [r3, #0]
 800ef4e:	b16c      	cbz	r4, 800ef6c <rmw_destroy_node+0x8c>
 800ef50:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ef54:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800ef56:	429d      	cmp	r5, r3
 800ef58:	d1f9      	bne.n	800ef4e <rmw_destroy_node+0x6e>
 800ef5a:	317c      	adds	r1, #124	; 0x7c
 800ef5c:	4638      	mov	r0, r7
 800ef5e:	f000 f843 	bl	800efe8 <rmw_destroy_service>
 800ef62:	2801      	cmp	r0, #1
 800ef64:	4606      	mov	r6, r0
 800ef66:	d0e3      	beq.n	800ef30 <rmw_destroy_node+0x50>
 800ef68:	2c00      	cmp	r4, #0
 800ef6a:	d1f1      	bne.n	800ef50 <rmw_destroy_node+0x70>
 800ef6c:	4b1a      	ldr	r3, [pc, #104]	; (800efd8 <rmw_destroy_node+0xf8>)
 800ef6e:	681c      	ldr	r4, [r3, #0]
 800ef70:	b16c      	cbz	r4, 800ef8e <rmw_destroy_node+0xae>
 800ef72:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ef76:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800ef78:	429d      	cmp	r5, r3
 800ef7a:	d1f9      	bne.n	800ef70 <rmw_destroy_node+0x90>
 800ef7c:	317c      	adds	r1, #124	; 0x7c
 800ef7e:	4638      	mov	r0, r7
 800ef80:	f002 fc16 	bl	80117b0 <rmw_destroy_client>
 800ef84:	2801      	cmp	r0, #1
 800ef86:	4606      	mov	r6, r0
 800ef88:	d0d2      	beq.n	800ef30 <rmw_destroy_node+0x50>
 800ef8a:	2c00      	cmp	r4, #0
 800ef8c:	d1f1      	bne.n	800ef72 <rmw_destroy_node+0x92>
 800ef8e:	6928      	ldr	r0, [r5, #16]
 800ef90:	696a      	ldr	r2, [r5, #20]
 800ef92:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ef96:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef9a:	6819      	ldr	r1, [r3, #0]
 800ef9c:	f7fb fb76 	bl	800a68c <uxr_buffer_delete_entity>
 800efa0:	4602      	mov	r2, r0
 800efa2:	6928      	ldr	r0, [r5, #16]
 800efa4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800efa8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800efac:	f7fb fa7a 	bl	800a4a4 <run_xrce_session>
 800efb0:	4603      	mov	r3, r0
 800efb2:	4638      	mov	r0, r7
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	bf08      	it	eq
 800efb8:	2602      	moveq	r6, #2
 800efba:	f7fb f99d 	bl	800a2f8 <rmw_uxrce_fini_node_memory>
 800efbe:	4630      	mov	r0, r6
 800efc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efc2:	4626      	mov	r6, r4
 800efc4:	e7a5      	b.n	800ef12 <rmw_destroy_node+0x32>
 800efc6:	bf00      	nop
 800efc8:	08015238 	.word	0x08015238
 800efcc:	2000dcac 	.word	0x2000dcac
 800efd0:	2000dcec 	.word	0x2000dcec
 800efd4:	2000dcbc 	.word	0x2000dcbc
 800efd8:	200093d0 	.word	0x200093d0

0800efdc <rmw_node_get_graph_guard_condition>:
 800efdc:	6843      	ldr	r3, [r0, #4]
 800efde:	6918      	ldr	r0, [r3, #16]
 800efe0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop

0800efe8 <rmw_destroy_service>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	b128      	cbz	r0, 800eff8 <rmw_destroy_service+0x10>
 800efec:	4604      	mov	r4, r0
 800efee:	6800      	ldr	r0, [r0, #0]
 800eff0:	460d      	mov	r5, r1
 800eff2:	f7fb fad1 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 800eff6:	b910      	cbnz	r0, 800effe <rmw_destroy_service+0x16>
 800eff8:	2401      	movs	r4, #1
 800effa:	4620      	mov	r0, r4
 800effc:	bd70      	pop	{r4, r5, r6, pc}
 800effe:	6863      	ldr	r3, [r4, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d0f9      	beq.n	800eff8 <rmw_destroy_service+0x10>
 800f004:	2d00      	cmp	r5, #0
 800f006:	d0f7      	beq.n	800eff8 <rmw_destroy_service+0x10>
 800f008:	6828      	ldr	r0, [r5, #0]
 800f00a:	f7fb fac5 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 800f00e:	2800      	cmp	r0, #0
 800f010:	d0f2      	beq.n	800eff8 <rmw_destroy_service+0x10>
 800f012:	686e      	ldr	r6, [r5, #4]
 800f014:	2e00      	cmp	r6, #0
 800f016:	d0ef      	beq.n	800eff8 <rmw_destroy_service+0x10>
 800f018:	6864      	ldr	r4, [r4, #4]
 800f01a:	6932      	ldr	r2, [r6, #16]
 800f01c:	6920      	ldr	r0, [r4, #16]
 800f01e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f022:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f026:	6819      	ldr	r1, [r3, #0]
 800f028:	f001 f856 	bl	80100d8 <uxr_buffer_cancel_data>
 800f02c:	4602      	mov	r2, r0
 800f02e:	6920      	ldr	r0, [r4, #16]
 800f030:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f034:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f038:	f7fb fa34 	bl	800a4a4 <run_xrce_session>
 800f03c:	6920      	ldr	r0, [r4, #16]
 800f03e:	6932      	ldr	r2, [r6, #16]
 800f040:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f044:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f048:	6819      	ldr	r1, [r3, #0]
 800f04a:	f7fb fb1f 	bl	800a68c <uxr_buffer_delete_entity>
 800f04e:	4602      	mov	r2, r0
 800f050:	6920      	ldr	r0, [r4, #16]
 800f052:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f056:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f05a:	f7fb fa23 	bl	800a4a4 <run_xrce_session>
 800f05e:	4603      	mov	r3, r0
 800f060:	4628      	mov	r0, r5
 800f062:	2b00      	cmp	r3, #0
 800f064:	bf14      	ite	ne
 800f066:	2400      	movne	r4, #0
 800f068:	2402      	moveq	r4, #2
 800f06a:	f7fb f989 	bl	800a380 <rmw_uxrce_fini_service_memory>
 800f06e:	e7c4      	b.n	800effa <rmw_destroy_service+0x12>

0800f070 <rmw_destroy_subscription>:
 800f070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f074:	b128      	cbz	r0, 800f082 <rmw_destroy_subscription+0x12>
 800f076:	4604      	mov	r4, r0
 800f078:	6800      	ldr	r0, [r0, #0]
 800f07a:	460d      	mov	r5, r1
 800f07c:	f7fb fa8c 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 800f080:	b918      	cbnz	r0, 800f08a <rmw_destroy_subscription+0x1a>
 800f082:	2401      	movs	r4, #1
 800f084:	4620      	mov	r0, r4
 800f086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f08a:	6863      	ldr	r3, [r4, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d0f8      	beq.n	800f082 <rmw_destroy_subscription+0x12>
 800f090:	fab5 f485 	clz	r4, r5
 800f094:	0964      	lsrs	r4, r4, #5
 800f096:	2d00      	cmp	r5, #0
 800f098:	d0f3      	beq.n	800f082 <rmw_destroy_subscription+0x12>
 800f09a:	6828      	ldr	r0, [r5, #0]
 800f09c:	f7fb fa7c 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	d0ee      	beq.n	800f082 <rmw_destroy_subscription+0x12>
 800f0a4:	686e      	ldr	r6, [r5, #4]
 800f0a6:	2e00      	cmp	r6, #0
 800f0a8:	d0eb      	beq.n	800f082 <rmw_destroy_subscription+0x12>
 800f0aa:	6a37      	ldr	r7, [r6, #32]
 800f0ac:	6972      	ldr	r2, [r6, #20]
 800f0ae:	6938      	ldr	r0, [r7, #16]
 800f0b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f0b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f0b8:	6819      	ldr	r1, [r3, #0]
 800f0ba:	f001 f80d 	bl	80100d8 <uxr_buffer_cancel_data>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	6938      	ldr	r0, [r7, #16]
 800f0c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f0c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f0ca:	f7fb f9eb 	bl	800a4a4 <run_xrce_session>
 800f0ce:	69f0      	ldr	r0, [r6, #28]
 800f0d0:	f7ff fe52 	bl	800ed78 <destroy_topic>
 800f0d4:	6a33      	ldr	r3, [r6, #32]
 800f0d6:	6972      	ldr	r2, [r6, #20]
 800f0d8:	6918      	ldr	r0, [r3, #16]
 800f0da:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f0de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f0e2:	6819      	ldr	r1, [r3, #0]
 800f0e4:	f7fb fad2 	bl	800a68c <uxr_buffer_delete_entity>
 800f0e8:	6a33      	ldr	r3, [r6, #32]
 800f0ea:	4680      	mov	r8, r0
 800f0ec:	6932      	ldr	r2, [r6, #16]
 800f0ee:	6918      	ldr	r0, [r3, #16]
 800f0f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f0f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f0f8:	6819      	ldr	r1, [r3, #0]
 800f0fa:	f7fb fac7 	bl	800a68c <uxr_buffer_delete_entity>
 800f0fe:	4606      	mov	r6, r0
 800f100:	6938      	ldr	r0, [r7, #16]
 800f102:	4642      	mov	r2, r8
 800f104:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f108:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f10c:	f7fb f9ca 	bl	800a4a4 <run_xrce_session>
 800f110:	693f      	ldr	r7, [r7, #16]
 800f112:	4632      	mov	r2, r6
 800f114:	4606      	mov	r6, r0
 800f116:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800f11a:	4638      	mov	r0, r7
 800f11c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800f120:	f7fb f9c0 	bl	800a4a4 <run_xrce_session>
 800f124:	b126      	cbz	r6, 800f130 <rmw_destroy_subscription+0xc0>
 800f126:	b118      	cbz	r0, 800f130 <rmw_destroy_subscription+0xc0>
 800f128:	4628      	mov	r0, r5
 800f12a:	f7fb f913 	bl	800a354 <rmw_uxrce_fini_subscription_memory>
 800f12e:	e7a9      	b.n	800f084 <rmw_destroy_subscription+0x14>
 800f130:	2402      	movs	r4, #2
 800f132:	e7f9      	b.n	800f128 <rmw_destroy_subscription+0xb8>

0800f134 <rmw_uxrce_transport_init>:
 800f134:	b508      	push	{r3, lr}
 800f136:	b108      	cbz	r0, 800f13c <rmw_uxrce_transport_init+0x8>
 800f138:	f100 0210 	add.w	r2, r0, #16
 800f13c:	b139      	cbz	r1, 800f14e <rmw_uxrce_transport_init+0x1a>
 800f13e:	6949      	ldr	r1, [r1, #20]
 800f140:	4610      	mov	r0, r2
 800f142:	f000 fa45 	bl	800f5d0 <uxr_init_custom_transport>
 800f146:	f080 0001 	eor.w	r0, r0, #1
 800f14a:	b2c0      	uxtb	r0, r0
 800f14c:	bd08      	pop	{r3, pc}
 800f14e:	4b04      	ldr	r3, [pc, #16]	; (800f160 <rmw_uxrce_transport_init+0x2c>)
 800f150:	4610      	mov	r0, r2
 800f152:	6859      	ldr	r1, [r3, #4]
 800f154:	f000 fa3c 	bl	800f5d0 <uxr_init_custom_transport>
 800f158:	f080 0001 	eor.w	r0, r0, #1
 800f15c:	b2c0      	uxtb	r0, r0
 800f15e:	bd08      	pop	{r3, pc}
 800f160:	200093b4 	.word	0x200093b4

0800f164 <rmw_uros_epoch_nanos>:
 800f164:	4b05      	ldr	r3, [pc, #20]	; (800f17c <rmw_uros_epoch_nanos+0x18>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	b123      	cbz	r3, 800f174 <rmw_uros_epoch_nanos+0x10>
 800f16a:	6898      	ldr	r0, [r3, #8]
 800f16c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f170:	f7fb bd2e 	b.w	800abd0 <uxr_epoch_nanos>
 800f174:	2000      	movs	r0, #0
 800f176:	2100      	movs	r1, #0
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	2000dccc 	.word	0x2000dccc

0800f180 <ucdr_serialize_endian_array_char>:
 800f180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f184:	4619      	mov	r1, r3
 800f186:	461f      	mov	r7, r3
 800f188:	4605      	mov	r5, r0
 800f18a:	4690      	mov	r8, r2
 800f18c:	f7fa fa6c 	bl	8009668 <ucdr_check_buffer_available_for>
 800f190:	b9e0      	cbnz	r0, 800f1cc <ucdr_serialize_endian_array_char+0x4c>
 800f192:	463e      	mov	r6, r7
 800f194:	e00b      	b.n	800f1ae <ucdr_serialize_endian_array_char+0x2e>
 800f196:	4441      	add	r1, r8
 800f198:	68a8      	ldr	r0, [r5, #8]
 800f19a:	4622      	mov	r2, r4
 800f19c:	1b36      	subs	r6, r6, r4
 800f19e:	f002 fbff 	bl	80119a0 <memcpy>
 800f1a2:	68ab      	ldr	r3, [r5, #8]
 800f1a4:	6928      	ldr	r0, [r5, #16]
 800f1a6:	4423      	add	r3, r4
 800f1a8:	4420      	add	r0, r4
 800f1aa:	60ab      	str	r3, [r5, #8]
 800f1ac:	6128      	str	r0, [r5, #16]
 800f1ae:	4631      	mov	r1, r6
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	f7fa fae2 	bl	800977c <ucdr_check_final_buffer_behavior_array>
 800f1b8:	1bb9      	subs	r1, r7, r6
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d1ea      	bne.n	800f196 <ucdr_serialize_endian_array_char+0x16>
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	7da8      	ldrb	r0, [r5, #22]
 800f1c4:	756b      	strb	r3, [r5, #21]
 800f1c6:	4058      	eors	r0, r3
 800f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1cc:	463a      	mov	r2, r7
 800f1ce:	4641      	mov	r1, r8
 800f1d0:	68a8      	ldr	r0, [r5, #8]
 800f1d2:	f002 fbe5 	bl	80119a0 <memcpy>
 800f1d6:	68aa      	ldr	r2, [r5, #8]
 800f1d8:	692b      	ldr	r3, [r5, #16]
 800f1da:	443a      	add	r2, r7
 800f1dc:	443b      	add	r3, r7
 800f1de:	60aa      	str	r2, [r5, #8]
 800f1e0:	612b      	str	r3, [r5, #16]
 800f1e2:	e7ed      	b.n	800f1c0 <ucdr_serialize_endian_array_char+0x40>

0800f1e4 <ucdr_deserialize_endian_array_char>:
 800f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	461f      	mov	r7, r3
 800f1ec:	4605      	mov	r5, r0
 800f1ee:	4690      	mov	r8, r2
 800f1f0:	f7fa fa3a 	bl	8009668 <ucdr_check_buffer_available_for>
 800f1f4:	b9e8      	cbnz	r0, 800f232 <ucdr_deserialize_endian_array_char+0x4e>
 800f1f6:	463e      	mov	r6, r7
 800f1f8:	e00c      	b.n	800f214 <ucdr_deserialize_endian_array_char+0x30>
 800f1fa:	eb08 0003 	add.w	r0, r8, r3
 800f1fe:	68a9      	ldr	r1, [r5, #8]
 800f200:	4622      	mov	r2, r4
 800f202:	1b36      	subs	r6, r6, r4
 800f204:	f002 fbcc 	bl	80119a0 <memcpy>
 800f208:	68ab      	ldr	r3, [r5, #8]
 800f20a:	6928      	ldr	r0, [r5, #16]
 800f20c:	4423      	add	r3, r4
 800f20e:	4420      	add	r0, r4
 800f210:	60ab      	str	r3, [r5, #8]
 800f212:	6128      	str	r0, [r5, #16]
 800f214:	4631      	mov	r1, r6
 800f216:	2201      	movs	r2, #1
 800f218:	4628      	mov	r0, r5
 800f21a:	f7fa faaf 	bl	800977c <ucdr_check_final_buffer_behavior_array>
 800f21e:	1bbb      	subs	r3, r7, r6
 800f220:	4604      	mov	r4, r0
 800f222:	2800      	cmp	r0, #0
 800f224:	d1e9      	bne.n	800f1fa <ucdr_deserialize_endian_array_char+0x16>
 800f226:	2301      	movs	r3, #1
 800f228:	7da8      	ldrb	r0, [r5, #22]
 800f22a:	756b      	strb	r3, [r5, #21]
 800f22c:	4058      	eors	r0, r3
 800f22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f232:	463a      	mov	r2, r7
 800f234:	68a9      	ldr	r1, [r5, #8]
 800f236:	4640      	mov	r0, r8
 800f238:	f002 fbb2 	bl	80119a0 <memcpy>
 800f23c:	68aa      	ldr	r2, [r5, #8]
 800f23e:	692b      	ldr	r3, [r5, #16]
 800f240:	443a      	add	r2, r7
 800f242:	443b      	add	r3, r7
 800f244:	60aa      	str	r2, [r5, #8]
 800f246:	612b      	str	r3, [r5, #16]
 800f248:	e7ed      	b.n	800f226 <ucdr_deserialize_endian_array_char+0x42>
 800f24a:	bf00      	nop

0800f24c <ucdr_serialize_array_uint8_t>:
 800f24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f250:	4688      	mov	r8, r1
 800f252:	4611      	mov	r1, r2
 800f254:	4617      	mov	r7, r2
 800f256:	4605      	mov	r5, r0
 800f258:	f7fa fa06 	bl	8009668 <ucdr_check_buffer_available_for>
 800f25c:	b9e0      	cbnz	r0, 800f298 <ucdr_serialize_array_uint8_t+0x4c>
 800f25e:	463e      	mov	r6, r7
 800f260:	e00b      	b.n	800f27a <ucdr_serialize_array_uint8_t+0x2e>
 800f262:	4441      	add	r1, r8
 800f264:	68a8      	ldr	r0, [r5, #8]
 800f266:	4622      	mov	r2, r4
 800f268:	1b36      	subs	r6, r6, r4
 800f26a:	f002 fb99 	bl	80119a0 <memcpy>
 800f26e:	68ab      	ldr	r3, [r5, #8]
 800f270:	6928      	ldr	r0, [r5, #16]
 800f272:	4423      	add	r3, r4
 800f274:	4420      	add	r0, r4
 800f276:	60ab      	str	r3, [r5, #8]
 800f278:	6128      	str	r0, [r5, #16]
 800f27a:	4631      	mov	r1, r6
 800f27c:	2201      	movs	r2, #1
 800f27e:	4628      	mov	r0, r5
 800f280:	f7fa fa7c 	bl	800977c <ucdr_check_final_buffer_behavior_array>
 800f284:	1bb9      	subs	r1, r7, r6
 800f286:	4604      	mov	r4, r0
 800f288:	2800      	cmp	r0, #0
 800f28a:	d1ea      	bne.n	800f262 <ucdr_serialize_array_uint8_t+0x16>
 800f28c:	2301      	movs	r3, #1
 800f28e:	7da8      	ldrb	r0, [r5, #22]
 800f290:	756b      	strb	r3, [r5, #21]
 800f292:	4058      	eors	r0, r3
 800f294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f298:	463a      	mov	r2, r7
 800f29a:	4641      	mov	r1, r8
 800f29c:	68a8      	ldr	r0, [r5, #8]
 800f29e:	f002 fb7f 	bl	80119a0 <memcpy>
 800f2a2:	68aa      	ldr	r2, [r5, #8]
 800f2a4:	692b      	ldr	r3, [r5, #16]
 800f2a6:	443a      	add	r2, r7
 800f2a8:	443b      	add	r3, r7
 800f2aa:	60aa      	str	r2, [r5, #8]
 800f2ac:	612b      	str	r3, [r5, #16]
 800f2ae:	e7ed      	b.n	800f28c <ucdr_serialize_array_uint8_t+0x40>

0800f2b0 <ucdr_serialize_endian_array_uint8_t>:
 800f2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	461f      	mov	r7, r3
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	4690      	mov	r8, r2
 800f2bc:	f7fa f9d4 	bl	8009668 <ucdr_check_buffer_available_for>
 800f2c0:	b9e0      	cbnz	r0, 800f2fc <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f2c2:	463e      	mov	r6, r7
 800f2c4:	e00b      	b.n	800f2de <ucdr_serialize_endian_array_uint8_t+0x2e>
 800f2c6:	4441      	add	r1, r8
 800f2c8:	68a8      	ldr	r0, [r5, #8]
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	1b36      	subs	r6, r6, r4
 800f2ce:	f002 fb67 	bl	80119a0 <memcpy>
 800f2d2:	68ab      	ldr	r3, [r5, #8]
 800f2d4:	6928      	ldr	r0, [r5, #16]
 800f2d6:	4423      	add	r3, r4
 800f2d8:	4420      	add	r0, r4
 800f2da:	60ab      	str	r3, [r5, #8]
 800f2dc:	6128      	str	r0, [r5, #16]
 800f2de:	4631      	mov	r1, r6
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f7fa fa4a 	bl	800977c <ucdr_check_final_buffer_behavior_array>
 800f2e8:	1bb9      	subs	r1, r7, r6
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d1ea      	bne.n	800f2c6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	7da8      	ldrb	r0, [r5, #22]
 800f2f4:	756b      	strb	r3, [r5, #21]
 800f2f6:	4058      	eors	r0, r3
 800f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2fc:	463a      	mov	r2, r7
 800f2fe:	4641      	mov	r1, r8
 800f300:	68a8      	ldr	r0, [r5, #8]
 800f302:	f002 fb4d 	bl	80119a0 <memcpy>
 800f306:	68aa      	ldr	r2, [r5, #8]
 800f308:	692b      	ldr	r3, [r5, #16]
 800f30a:	443a      	add	r2, r7
 800f30c:	443b      	add	r3, r7
 800f30e:	60aa      	str	r2, [r5, #8]
 800f310:	612b      	str	r3, [r5, #16]
 800f312:	e7ed      	b.n	800f2f0 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f314 <ucdr_deserialize_array_uint8_t>:
 800f314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f318:	4688      	mov	r8, r1
 800f31a:	4611      	mov	r1, r2
 800f31c:	4617      	mov	r7, r2
 800f31e:	4605      	mov	r5, r0
 800f320:	f7fa f9a2 	bl	8009668 <ucdr_check_buffer_available_for>
 800f324:	b9e8      	cbnz	r0, 800f362 <ucdr_deserialize_array_uint8_t+0x4e>
 800f326:	463e      	mov	r6, r7
 800f328:	e00c      	b.n	800f344 <ucdr_deserialize_array_uint8_t+0x30>
 800f32a:	eb08 0003 	add.w	r0, r8, r3
 800f32e:	68a9      	ldr	r1, [r5, #8]
 800f330:	4622      	mov	r2, r4
 800f332:	1b36      	subs	r6, r6, r4
 800f334:	f002 fb34 	bl	80119a0 <memcpy>
 800f338:	68ab      	ldr	r3, [r5, #8]
 800f33a:	6928      	ldr	r0, [r5, #16]
 800f33c:	4423      	add	r3, r4
 800f33e:	4420      	add	r0, r4
 800f340:	60ab      	str	r3, [r5, #8]
 800f342:	6128      	str	r0, [r5, #16]
 800f344:	4631      	mov	r1, r6
 800f346:	2201      	movs	r2, #1
 800f348:	4628      	mov	r0, r5
 800f34a:	f7fa fa17 	bl	800977c <ucdr_check_final_buffer_behavior_array>
 800f34e:	1bbb      	subs	r3, r7, r6
 800f350:	4604      	mov	r4, r0
 800f352:	2800      	cmp	r0, #0
 800f354:	d1e9      	bne.n	800f32a <ucdr_deserialize_array_uint8_t+0x16>
 800f356:	2301      	movs	r3, #1
 800f358:	7da8      	ldrb	r0, [r5, #22]
 800f35a:	756b      	strb	r3, [r5, #21]
 800f35c:	4058      	eors	r0, r3
 800f35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f362:	463a      	mov	r2, r7
 800f364:	68a9      	ldr	r1, [r5, #8]
 800f366:	4640      	mov	r0, r8
 800f368:	f002 fb1a 	bl	80119a0 <memcpy>
 800f36c:	68aa      	ldr	r2, [r5, #8]
 800f36e:	692b      	ldr	r3, [r5, #16]
 800f370:	443a      	add	r2, r7
 800f372:	443b      	add	r3, r7
 800f374:	60aa      	str	r2, [r5, #8]
 800f376:	612b      	str	r3, [r5, #16]
 800f378:	e7ed      	b.n	800f356 <ucdr_deserialize_array_uint8_t+0x42>
 800f37a:	bf00      	nop

0800f37c <ucdr_deserialize_endian_array_uint8_t>:
 800f37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f380:	4619      	mov	r1, r3
 800f382:	461f      	mov	r7, r3
 800f384:	4605      	mov	r5, r0
 800f386:	4690      	mov	r8, r2
 800f388:	f7fa f96e 	bl	8009668 <ucdr_check_buffer_available_for>
 800f38c:	b9e8      	cbnz	r0, 800f3ca <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800f38e:	463e      	mov	r6, r7
 800f390:	e00c      	b.n	800f3ac <ucdr_deserialize_endian_array_uint8_t+0x30>
 800f392:	eb08 0003 	add.w	r0, r8, r3
 800f396:	68a9      	ldr	r1, [r5, #8]
 800f398:	4622      	mov	r2, r4
 800f39a:	1b36      	subs	r6, r6, r4
 800f39c:	f002 fb00 	bl	80119a0 <memcpy>
 800f3a0:	68ab      	ldr	r3, [r5, #8]
 800f3a2:	6928      	ldr	r0, [r5, #16]
 800f3a4:	4423      	add	r3, r4
 800f3a6:	4420      	add	r0, r4
 800f3a8:	60ab      	str	r3, [r5, #8]
 800f3aa:	6128      	str	r0, [r5, #16]
 800f3ac:	4631      	mov	r1, r6
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f7fa f9e3 	bl	800977c <ucdr_check_final_buffer_behavior_array>
 800f3b6:	1bbb      	subs	r3, r7, r6
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	d1e9      	bne.n	800f392 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	7da8      	ldrb	r0, [r5, #22]
 800f3c2:	756b      	strb	r3, [r5, #21]
 800f3c4:	4058      	eors	r0, r3
 800f3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ca:	463a      	mov	r2, r7
 800f3cc:	68a9      	ldr	r1, [r5, #8]
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	f002 fae6 	bl	80119a0 <memcpy>
 800f3d4:	68aa      	ldr	r2, [r5, #8]
 800f3d6:	692b      	ldr	r3, [r5, #16]
 800f3d8:	443a      	add	r2, r7
 800f3da:	443b      	add	r3, r7
 800f3dc:	60aa      	str	r2, [r5, #8]
 800f3de:	612b      	str	r3, [r5, #16]
 800f3e0:	e7ed      	b.n	800f3be <ucdr_deserialize_endian_array_uint8_t+0x42>
 800f3e2:	bf00      	nop

0800f3e4 <ucdr_serialize_sequence_char>:
 800f3e4:	b570      	push	{r4, r5, r6, lr}
 800f3e6:	4615      	mov	r5, r2
 800f3e8:	460e      	mov	r6, r1
 800f3ea:	7d01      	ldrb	r1, [r0, #20]
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	f7f9 fd29 	bl	8008e44 <ucdr_serialize_endian_uint32_t>
 800f3f2:	b90d      	cbnz	r5, 800f3f8 <ucdr_serialize_sequence_char+0x14>
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}
 800f3f8:	462b      	mov	r3, r5
 800f3fa:	4632      	mov	r2, r6
 800f3fc:	7d21      	ldrb	r1, [r4, #20]
 800f3fe:	4620      	mov	r0, r4
 800f400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f404:	f7ff bebc 	b.w	800f180 <ucdr_serialize_endian_array_char>

0800f408 <ucdr_deserialize_sequence_char>:
 800f408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40c:	461d      	mov	r5, r3
 800f40e:	4616      	mov	r6, r2
 800f410:	460f      	mov	r7, r1
 800f412:	461a      	mov	r2, r3
 800f414:	7d01      	ldrb	r1, [r0, #20]
 800f416:	4604      	mov	r4, r0
 800f418:	f7f9 fe3c 	bl	8009094 <ucdr_deserialize_endian_uint32_t>
 800f41c:	682b      	ldr	r3, [r5, #0]
 800f41e:	429e      	cmp	r6, r3
 800f420:	d201      	bcs.n	800f426 <ucdr_deserialize_sequence_char+0x1e>
 800f422:	2201      	movs	r2, #1
 800f424:	75a2      	strb	r2, [r4, #22]
 800f426:	b913      	cbnz	r3, 800f42e <ucdr_deserialize_sequence_char+0x26>
 800f428:	2001      	movs	r0, #1
 800f42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f42e:	463a      	mov	r2, r7
 800f430:	7d21      	ldrb	r1, [r4, #20]
 800f432:	4620      	mov	r0, r4
 800f434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f438:	f7ff bed4 	b.w	800f1e4 <ucdr_deserialize_endian_array_char>

0800f43c <ucdr_serialize_sequence_uint8_t>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	4615      	mov	r5, r2
 800f440:	460e      	mov	r6, r1
 800f442:	7d01      	ldrb	r1, [r0, #20]
 800f444:	4604      	mov	r4, r0
 800f446:	f7f9 fcfd 	bl	8008e44 <ucdr_serialize_endian_uint32_t>
 800f44a:	b90d      	cbnz	r5, 800f450 <ucdr_serialize_sequence_uint8_t+0x14>
 800f44c:	2001      	movs	r0, #1
 800f44e:	bd70      	pop	{r4, r5, r6, pc}
 800f450:	462b      	mov	r3, r5
 800f452:	4632      	mov	r2, r6
 800f454:	7d21      	ldrb	r1, [r4, #20]
 800f456:	4620      	mov	r0, r4
 800f458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f45c:	f7ff bf28 	b.w	800f2b0 <ucdr_serialize_endian_array_uint8_t>

0800f460 <ucdr_deserialize_sequence_uint8_t>:
 800f460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f464:	461d      	mov	r5, r3
 800f466:	4616      	mov	r6, r2
 800f468:	460f      	mov	r7, r1
 800f46a:	461a      	mov	r2, r3
 800f46c:	7d01      	ldrb	r1, [r0, #20]
 800f46e:	4604      	mov	r4, r0
 800f470:	f7f9 fe10 	bl	8009094 <ucdr_deserialize_endian_uint32_t>
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	429e      	cmp	r6, r3
 800f478:	d201      	bcs.n	800f47e <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f47a:	2201      	movs	r2, #1
 800f47c:	75a2      	strb	r2, [r4, #22]
 800f47e:	b913      	cbnz	r3, 800f486 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f480:	2001      	movs	r0, #1
 800f482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f486:	463a      	mov	r2, r7
 800f488:	7d21      	ldrb	r1, [r4, #20]
 800f48a:	4620      	mov	r0, r4
 800f48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f490:	f7ff bf74 	b.w	800f37c <ucdr_deserialize_endian_array_uint8_t>

0800f494 <ucdr_serialize_string>:
 800f494:	b510      	push	{r4, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	4604      	mov	r4, r0
 800f49a:	4608      	mov	r0, r1
 800f49c:	9101      	str	r1, [sp, #4]
 800f49e:	f7f0 ff29 	bl	80002f4 <strlen>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	9901      	ldr	r1, [sp, #4]
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	3201      	adds	r2, #1
 800f4aa:	b002      	add	sp, #8
 800f4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4b0:	f7ff bf98 	b.w	800f3e4 <ucdr_serialize_sequence_char>

0800f4b4 <ucdr_deserialize_string>:
 800f4b4:	b500      	push	{lr}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	ab01      	add	r3, sp, #4
 800f4ba:	f7ff ffa5 	bl	800f408 <ucdr_deserialize_sequence_char>
 800f4be:	b003      	add	sp, #12
 800f4c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800f4c4 <get_custom_error>:
 800f4c4:	4b01      	ldr	r3, [pc, #4]	; (800f4cc <get_custom_error+0x8>)
 800f4c6:	7818      	ldrb	r0, [r3, #0]
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	2000de40 	.word	0x2000de40

0800f4d0 <recv_custom_msg>:
 800f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d4:	4693      	mov	fp, r2
 800f4d6:	b089      	sub	sp, #36	; 0x24
 800f4d8:	2200      	movs	r2, #0
 800f4da:	4604      	mov	r4, r0
 800f4dc:	468a      	mov	sl, r1
 800f4de:	9305      	str	r3, [sp, #20]
 800f4e0:	f88d 201e 	strb.w	r2, [sp, #30]
 800f4e4:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800f4e8:	b322      	cbz	r2, 800f534 <recv_custom_msg+0x64>
 800f4ea:	f200 2902 	addw	r9, r0, #514	; 0x202
 800f4ee:	f10d 081f 	add.w	r8, sp, #31
 800f4f2:	af05      	add	r7, sp, #20
 800f4f4:	f10d 061e 	add.w	r6, sp, #30
 800f4f8:	f44f 7500 	mov.w	r5, #512	; 0x200
 800f4fc:	e002      	b.n	800f504 <recv_custom_msg+0x34>
 800f4fe:	9b05      	ldr	r3, [sp, #20]
 800f500:	2b00      	cmp	r3, #0
 800f502:	dd0f      	ble.n	800f524 <recv_custom_msg+0x54>
 800f504:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800f508:	4623      	mov	r3, r4
 800f50a:	4622      	mov	r2, r4
 800f50c:	4648      	mov	r0, r9
 800f50e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f512:	e9cd 5600 	strd	r5, r6, [sp]
 800f516:	f001 f8d9 	bl	80106cc <uxr_read_framed_msg>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d0ef      	beq.n	800f4fe <recv_custom_msg+0x2e>
 800f51e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f522:	b1b3      	cbz	r3, 800f552 <recv_custom_msg+0x82>
 800f524:	4b0f      	ldr	r3, [pc, #60]	; (800f564 <recv_custom_msg+0x94>)
 800f526:	2000      	movs	r0, #0
 800f528:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f52c:	701a      	strb	r2, [r3, #0]
 800f52e:	b009      	add	sp, #36	; 0x24
 800f530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f534:	f10d 021f 	add.w	r2, sp, #31
 800f538:	4601      	mov	r1, r0
 800f53a:	9200      	str	r2, [sp, #0]
 800f53c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f540:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800f544:	47a8      	blx	r5
 800f546:	2800      	cmp	r0, #0
 800f548:	d0ec      	beq.n	800f524 <recv_custom_msg+0x54>
 800f54a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1e8      	bne.n	800f524 <recv_custom_msg+0x54>
 800f552:	f8cb 0000 	str.w	r0, [fp]
 800f556:	2001      	movs	r0, #1
 800f558:	f8ca 4000 	str.w	r4, [sl]
 800f55c:	b009      	add	sp, #36	; 0x24
 800f55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f562:	bf00      	nop
 800f564:	2000de40 	.word	0x2000de40

0800f568 <send_custom_msg>:
 800f568:	b530      	push	{r4, r5, lr}
 800f56a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800f56e:	b087      	sub	sp, #28
 800f570:	4614      	mov	r4, r2
 800f572:	b995      	cbnz	r5, 800f59a <send_custom_msg+0x32>
 800f574:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 800f578:	f10d 0317 	add.w	r3, sp, #23
 800f57c:	47a8      	blx	r5
 800f57e:	1e03      	subs	r3, r0, #0
 800f580:	bf18      	it	ne
 800f582:	2301      	movne	r3, #1
 800f584:	42a0      	cmp	r0, r4
 800f586:	bf18      	it	ne
 800f588:	2300      	movne	r3, #0
 800f58a:	b91b      	cbnz	r3, 800f594 <send_custom_msg+0x2c>
 800f58c:	4a0a      	ldr	r2, [pc, #40]	; (800f5b8 <send_custom_msg+0x50>)
 800f58e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800f592:	7011      	strb	r1, [r2, #0]
 800f594:	4618      	mov	r0, r3
 800f596:	b007      	add	sp, #28
 800f598:	bd30      	pop	{r4, r5, pc}
 800f59a:	460b      	mov	r3, r1
 800f59c:	2200      	movs	r2, #0
 800f59e:	f10d 0117 	add.w	r1, sp, #23
 800f5a2:	9400      	str	r4, [sp, #0]
 800f5a4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800f5ae:	f200 2002 	addw	r0, r0, #514	; 0x202
 800f5b2:	f000 fead 	bl	8010310 <uxr_write_framed_msg>
 800f5b6:	e7e2      	b.n	800f57e <send_custom_msg+0x16>
 800f5b8:	2000de40 	.word	0x2000de40

0800f5bc <uxr_set_custom_transport_callbacks>:
 800f5bc:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800f5c0:	9901      	ldr	r1, [sp, #4]
 800f5c2:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800f5c6:	9b00      	ldr	r3, [sp, #0]
 800f5c8:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop

0800f5d0 <uxr_init_custom_transport>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800f5d6:	b303      	cbz	r3, 800f61a <uxr_init_custom_transport+0x4a>
 800f5d8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800f5dc:	4604      	mov	r4, r0
 800f5de:	b1e2      	cbz	r2, 800f61a <uxr_init_custom_transport+0x4a>
 800f5e0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800f5e4:	b1ca      	cbz	r2, 800f61a <uxr_init_custom_transport+0x4a>
 800f5e6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800f5ea:	b1b2      	cbz	r2, 800f61a <uxr_init_custom_transport+0x4a>
 800f5ec:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800f5f0:	4798      	blx	r3
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	b188      	cbz	r0, 800f61a <uxr_init_custom_transport+0x4a>
 800f5f6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800f5fa:	b98b      	cbnz	r3, 800f620 <uxr_init_custom_transport+0x50>
 800f5fc:	4b0b      	ldr	r3, [pc, #44]	; (800f62c <uxr_init_custom_transport+0x5c>)
 800f5fe:	4628      	mov	r0, r5
 800f600:	490b      	ldr	r1, [pc, #44]	; (800f630 <uxr_init_custom_transport+0x60>)
 800f602:	4a0c      	ldr	r2, [pc, #48]	; (800f634 <uxr_init_custom_transport+0x64>)
 800f604:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800f608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f60c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800f610:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800f614:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800f618:	bd38      	pop	{r3, r4, r5, pc}
 800f61a:	2500      	movs	r5, #0
 800f61c:	4628      	mov	r0, r5
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	2100      	movs	r1, #0
 800f622:	f204 2002 	addw	r0, r4, #514	; 0x202
 800f626:	f000 fe6d 	bl	8010304 <uxr_init_framing_io>
 800f62a:	e7e7      	b.n	800f5fc <uxr_init_custom_transport+0x2c>
 800f62c:	0800f4d1 	.word	0x0800f4d1
 800f630:	0800f569 	.word	0x0800f569
 800f634:	0800f4c5 	.word	0x0800f4c5

0800f638 <uxr_close_custom_transport>:
 800f638:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800f63c:	4718      	bx	r3
 800f63e:	bf00      	nop

0800f640 <uxr_init_input_best_effort_stream>:
 800f640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f644:	8003      	strh	r3, [r0, #0]
 800f646:	4770      	bx	lr

0800f648 <uxr_reset_input_best_effort_stream>:
 800f648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f64c:	8003      	strh	r3, [r0, #0]
 800f64e:	4770      	bx	lr

0800f650 <uxr_receive_best_effort_message>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4604      	mov	r4, r0
 800f654:	8800      	ldrh	r0, [r0, #0]
 800f656:	460d      	mov	r5, r1
 800f658:	f000 fe3c 	bl	80102d4 <uxr_seq_num_cmp>
 800f65c:	4603      	mov	r3, r0
 800f65e:	0fc0      	lsrs	r0, r0, #31
 800f660:	2b00      	cmp	r3, #0
 800f662:	bfb8      	it	lt
 800f664:	8025      	strhlt	r5, [r4, #0]
 800f666:	bd38      	pop	{r3, r4, r5, pc}

0800f668 <on_full_input_buffer>:
 800f668:	b570      	push	{r4, r5, r6, lr}
 800f66a:	460c      	mov	r4, r1
 800f66c:	4605      	mov	r5, r0
 800f66e:	8908      	ldrh	r0, [r1, #8]
 800f670:	682b      	ldr	r3, [r5, #0]
 800f672:	7d26      	ldrb	r6, [r4, #20]
 800f674:	e9d1 1200 	ldrd	r1, r2, [r1]
 800f678:	fbb2 f2f0 	udiv	r2, r2, r0
 800f67c:	eba3 0c01 	sub.w	ip, r3, r1
 800f680:	fbbc fcf2 	udiv	ip, ip, r2
 800f684:	f10c 0c01 	add.w	ip, ip, #1
 800f688:	fa1f f38c 	uxth.w	r3, ip
 800f68c:	fbb3 fcf0 	udiv	ip, r3, r0
 800f690:	fb00 331c 	mls	r3, r0, ip, r3
 800f694:	b29b      	uxth	r3, r3
 800f696:	fb02 f303 	mul.w	r3, r2, r3
 800f69a:	1d18      	adds	r0, r3, #4
 800f69c:	4408      	add	r0, r1
 800f69e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f6a2:	b116      	cbz	r6, 800f6aa <on_full_input_buffer+0x42>
 800f6a4:	2600      	movs	r6, #0
 800f6a6:	f840 6c04 	str.w	r6, [r0, #-4]
 800f6aa:	2a03      	cmp	r2, #3
 800f6ac:	d801      	bhi.n	800f6b2 <on_full_input_buffer+0x4a>
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	bd70      	pop	{r4, r5, r6, pc}
 800f6b2:	3308      	adds	r3, #8
 800f6b4:	4628      	mov	r0, r5
 800f6b6:	3a04      	subs	r2, #4
 800f6b8:	4419      	add	r1, r3
 800f6ba:	692b      	ldr	r3, [r5, #16]
 800f6bc:	f7fa f820 	bl	8009700 <ucdr_init_buffer_origin>
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4902      	ldr	r1, [pc, #8]	; (800f6d0 <on_full_input_buffer+0x68>)
 800f6c6:	f7f9 fff7 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
 800f6ce:	bf00      	nop
 800f6d0:	0800f669 	.word	0x0800f669

0800f6d4 <uxr_init_input_reliable_stream>:
 800f6d4:	b510      	push	{r4, lr}
 800f6d6:	e9c0 1200 	strd	r1, r2, [r0]
 800f6da:	2400      	movs	r4, #0
 800f6dc:	9a02      	ldr	r2, [sp, #8]
 800f6de:	8103      	strh	r3, [r0, #8]
 800f6e0:	6102      	str	r2, [r0, #16]
 800f6e2:	7504      	strb	r4, [r0, #20]
 800f6e4:	b1c3      	cbz	r3, 800f718 <uxr_init_input_reliable_stream+0x44>
 800f6e6:	600c      	str	r4, [r1, #0]
 800f6e8:	8901      	ldrh	r1, [r0, #8]
 800f6ea:	2901      	cmp	r1, #1
 800f6ec:	d914      	bls.n	800f718 <uxr_init_input_reliable_stream+0x44>
 800f6ee:	f04f 0c01 	mov.w	ip, #1
 800f6f2:	6843      	ldr	r3, [r0, #4]
 800f6f4:	f10c 0e01 	add.w	lr, ip, #1
 800f6f8:	fbbc f2f1 	udiv	r2, ip, r1
 800f6fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f700:	fb01 c212 	mls	r2, r1, r2, ip
 800f704:	fa1f fc8e 	uxth.w	ip, lr
 800f708:	b292      	uxth	r2, r2
 800f70a:	fb02 f303 	mul.w	r3, r2, r3
 800f70e:	6802      	ldr	r2, [r0, #0]
 800f710:	50d4      	str	r4, [r2, r3]
 800f712:	8901      	ldrh	r1, [r0, #8]
 800f714:	4561      	cmp	r1, ip
 800f716:	d8ec      	bhi.n	800f6f2 <uxr_init_input_reliable_stream+0x1e>
 800f718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f71c:	60c3      	str	r3, [r0, #12]
 800f71e:	bd10      	pop	{r4, pc}

0800f720 <uxr_reset_input_reliable_stream>:
 800f720:	8901      	ldrh	r1, [r0, #8]
 800f722:	b1d9      	cbz	r1, 800f75c <uxr_reset_input_reliable_stream+0x3c>
 800f724:	b510      	push	{r4, lr}
 800f726:	f04f 0e00 	mov.w	lr, #0
 800f72a:	46f4      	mov	ip, lr
 800f72c:	4674      	mov	r4, lr
 800f72e:	6843      	ldr	r3, [r0, #4]
 800f730:	f10e 0e01 	add.w	lr, lr, #1
 800f734:	fbbc f2f1 	udiv	r2, ip, r1
 800f738:	fbb3 f3f1 	udiv	r3, r3, r1
 800f73c:	fb01 c212 	mls	r2, r1, r2, ip
 800f740:	fa1f fc8e 	uxth.w	ip, lr
 800f744:	b292      	uxth	r2, r2
 800f746:	fb02 f303 	mul.w	r3, r2, r3
 800f74a:	6802      	ldr	r2, [r0, #0]
 800f74c:	50d4      	str	r4, [r2, r3]
 800f74e:	8901      	ldrh	r1, [r0, #8]
 800f750:	4561      	cmp	r1, ip
 800f752:	d8ec      	bhi.n	800f72e <uxr_reset_input_reliable_stream+0xe>
 800f754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f758:	60c3      	str	r3, [r0, #12]
 800f75a:	bd10      	pop	{r4, pc}
 800f75c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f760:	60c3      	str	r3, [r0, #12]
 800f762:	4770      	bx	lr

0800f764 <uxr_receive_reliable_message>:
 800f764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f768:	4604      	mov	r4, r0
 800f76a:	460d      	mov	r5, r1
 800f76c:	8901      	ldrh	r1, [r0, #8]
 800f76e:	4617      	mov	r7, r2
 800f770:	8980      	ldrh	r0, [r0, #12]
 800f772:	4698      	mov	r8, r3
 800f774:	f000 fda6 	bl	80102c4 <uxr_seq_num_add>
 800f778:	4629      	mov	r1, r5
 800f77a:	4606      	mov	r6, r0
 800f77c:	89a0      	ldrh	r0, [r4, #12]
 800f77e:	f000 fda9 	bl	80102d4 <uxr_seq_num_cmp>
 800f782:	2800      	cmp	r0, #0
 800f784:	db0a      	blt.n	800f79c <uxr_receive_reliable_message+0x38>
 800f786:	2600      	movs	r6, #0
 800f788:	4629      	mov	r1, r5
 800f78a:	89e0      	ldrh	r0, [r4, #14]
 800f78c:	f000 fda2 	bl	80102d4 <uxr_seq_num_cmp>
 800f790:	2800      	cmp	r0, #0
 800f792:	da00      	bge.n	800f796 <uxr_receive_reliable_message+0x32>
 800f794:	81e5      	strh	r5, [r4, #14]
 800f796:	4630      	mov	r0, r6
 800f798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f79c:	4630      	mov	r0, r6
 800f79e:	4629      	mov	r1, r5
 800f7a0:	f000 fd98 	bl	80102d4 <uxr_seq_num_cmp>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	dbee      	blt.n	800f786 <uxr_receive_reliable_message+0x22>
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	4638      	mov	r0, r7
 800f7ac:	4798      	blx	r3
 800f7ae:	4681      	mov	r9, r0
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	89a0      	ldrh	r0, [r4, #12]
 800f7b4:	f000 fd86 	bl	80102c4 <uxr_seq_num_add>
 800f7b8:	f1b9 0f00 	cmp.w	r9, #0
 800f7bc:	bf08      	it	eq
 800f7be:	4285      	cmpeq	r5, r0
 800f7c0:	bf0c      	ite	eq
 800f7c2:	2601      	moveq	r6, #1
 800f7c4:	2600      	movne	r6, #0
 800f7c6:	d104      	bne.n	800f7d2 <uxr_receive_reliable_message+0x6e>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	9a08      	ldr	r2, [sp, #32]
 800f7cc:	81a0      	strh	r0, [r4, #12]
 800f7ce:	7013      	strb	r3, [r2, #0]
 800f7d0:	e7da      	b.n	800f788 <uxr_receive_reliable_message+0x24>
 800f7d2:	8922      	ldrh	r2, [r4, #8]
 800f7d4:	6863      	ldr	r3, [r4, #4]
 800f7d6:	fbb5 f0f2 	udiv	r0, r5, r2
 800f7da:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7de:	fb02 5010 	mls	r0, r2, r0, r5
 800f7e2:	b280      	uxth	r0, r0
 800f7e4:	fb03 f000 	mul.w	r0, r3, r0
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	3004      	adds	r0, #4
 800f7ec:	4418      	add	r0, r3
 800f7ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1c7      	bne.n	800f786 <uxr_receive_reliable_message+0x22>
 800f7f6:	4639      	mov	r1, r7
 800f7f8:	4642      	mov	r2, r8
 800f7fa:	f002 f8d1 	bl	80119a0 <memcpy>
 800f7fe:	8921      	ldrh	r1, [r4, #8]
 800f800:	6863      	ldr	r3, [r4, #4]
 800f802:	fbb5 f2f1 	udiv	r2, r5, r1
 800f806:	fbb3 f3f1 	udiv	r3, r3, r1
 800f80a:	fb01 5212 	mls	r2, r1, r2, r5
 800f80e:	b292      	uxth	r2, r2
 800f810:	fb02 f303 	mul.w	r3, r2, r3
 800f814:	6822      	ldr	r2, [r4, #0]
 800f816:	f842 8003 	str.w	r8, [r2, r3]
 800f81a:	2301      	movs	r3, #1
 800f81c:	9a08      	ldr	r2, [sp, #32]
 800f81e:	7013      	strb	r3, [r2, #0]
 800f820:	f1b9 0f00 	cmp.w	r9, #0
 800f824:	d0af      	beq.n	800f786 <uxr_receive_reliable_message+0x22>
 800f826:	89a6      	ldrh	r6, [r4, #12]
 800f828:	2101      	movs	r1, #1
 800f82a:	4630      	mov	r0, r6
 800f82c:	f000 fd4a 	bl	80102c4 <uxr_seq_num_add>
 800f830:	8921      	ldrh	r1, [r4, #8]
 800f832:	6863      	ldr	r3, [r4, #4]
 800f834:	4606      	mov	r6, r0
 800f836:	fbb0 f2f1 	udiv	r2, r0, r1
 800f83a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f83e:	fb01 0212 	mls	r2, r1, r2, r0
 800f842:	6820      	ldr	r0, [r4, #0]
 800f844:	b292      	uxth	r2, r2
 800f846:	fb02 f303 	mul.w	r3, r2, r3
 800f84a:	3304      	adds	r3, #4
 800f84c:	4418      	add	r0, r3
 800f84e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d097      	beq.n	800f786 <uxr_receive_reliable_message+0x22>
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	4798      	blx	r3
 800f85a:	2802      	cmp	r0, #2
 800f85c:	d002      	beq.n	800f864 <uxr_receive_reliable_message+0x100>
 800f85e:	2801      	cmp	r0, #1
 800f860:	d0e2      	beq.n	800f828 <uxr_receive_reliable_message+0xc4>
 800f862:	e790      	b.n	800f786 <uxr_receive_reliable_message+0x22>
 800f864:	2601      	movs	r6, #1
 800f866:	e78f      	b.n	800f788 <uxr_receive_reliable_message+0x24>

0800f868 <uxr_next_input_reliable_buffer_available>:
 800f868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f86c:	4604      	mov	r4, r0
 800f86e:	460f      	mov	r7, r1
 800f870:	8980      	ldrh	r0, [r0, #12]
 800f872:	2101      	movs	r1, #1
 800f874:	4690      	mov	r8, r2
 800f876:	f000 fd25 	bl	80102c4 <uxr_seq_num_add>
 800f87a:	8922      	ldrh	r2, [r4, #8]
 800f87c:	6866      	ldr	r6, [r4, #4]
 800f87e:	fbb0 f3f2 	udiv	r3, r0, r2
 800f882:	fbb6 f6f2 	udiv	r6, r6, r2
 800f886:	fb02 0313 	mls	r3, r2, r3, r0
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	fb03 f606 	mul.w	r6, r3, r6
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	3604      	adds	r6, #4
 800f894:	441e      	add	r6, r3
 800f896:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800f89a:	f1b9 0f00 	cmp.w	r9, #0
 800f89e:	d023      	beq.n	800f8e8 <uxr_next_input_reliable_buffer_available+0x80>
 800f8a0:	4605      	mov	r5, r0
 800f8a2:	6923      	ldr	r3, [r4, #16]
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4798      	blx	r3
 800f8a8:	4682      	mov	sl, r0
 800f8aa:	b300      	cbz	r0, 800f8ee <uxr_next_input_reliable_buffer_available+0x86>
 800f8ac:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	4650      	mov	r0, sl
 800f8b4:	f000 fd06 	bl	80102c4 <uxr_seq_num_add>
 800f8b8:	8921      	ldrh	r1, [r4, #8]
 800f8ba:	4682      	mov	sl, r0
 800f8bc:	6863      	ldr	r3, [r4, #4]
 800f8be:	6820      	ldr	r0, [r4, #0]
 800f8c0:	fbba f2f1 	udiv	r2, sl, r1
 800f8c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8c8:	fb01 a212 	mls	r2, r1, r2, sl
 800f8cc:	b292      	uxth	r2, r2
 800f8ce:	fb02 f303 	mul.w	r3, r2, r3
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4418      	add	r0, r3
 800f8d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f8da:	b12b      	cbz	r3, 800f8e8 <uxr_next_input_reliable_buffer_available+0x80>
 800f8dc:	6923      	ldr	r3, [r4, #16]
 800f8de:	4798      	blx	r3
 800f8e0:	2802      	cmp	r0, #2
 800f8e2:	d01b      	beq.n	800f91c <uxr_next_input_reliable_buffer_available+0xb4>
 800f8e4:	2801      	cmp	r0, #1
 800f8e6:	d0e3      	beq.n	800f8b0 <uxr_next_input_reliable_buffer_available+0x48>
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ee:	464a      	mov	r2, r9
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	f7f9 ff0c 	bl	8009710 <ucdr_init_buffer>
 800f8f8:	8921      	ldrh	r1, [r4, #8]
 800f8fa:	6863      	ldr	r3, [r4, #4]
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	fbb5 f2f1 	udiv	r2, r5, r1
 800f902:	fbb3 f3f1 	udiv	r3, r3, r1
 800f906:	fb01 5212 	mls	r2, r1, r2, r5
 800f90a:	b292      	uxth	r2, r2
 800f90c:	fb02 f303 	mul.w	r3, r2, r3
 800f910:	6822      	ldr	r2, [r4, #0]
 800f912:	f842 a003 	str.w	sl, [r2, r3]
 800f916:	81a5      	strh	r5, [r4, #12]
 800f918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f91c:	8920      	ldrh	r0, [r4, #8]
 800f91e:	eb06 0108 	add.w	r1, r6, r8
 800f922:	6863      	ldr	r3, [r4, #4]
 800f924:	eba9 0208 	sub.w	r2, r9, r8
 800f928:	fbb5 f6f0 	udiv	r6, r5, r0
 800f92c:	fbb3 f3f0 	udiv	r3, r3, r0
 800f930:	fb00 5516 	mls	r5, r0, r6, r5
 800f934:	2000      	movs	r0, #0
 800f936:	b2ad      	uxth	r5, r5
 800f938:	fb03 f505 	mul.w	r5, r3, r5
 800f93c:	6823      	ldr	r3, [r4, #0]
 800f93e:	5158      	str	r0, [r3, r5]
 800f940:	4638      	mov	r0, r7
 800f942:	f7f9 fee5 	bl	8009710 <ucdr_init_buffer>
 800f946:	4638      	mov	r0, r7
 800f948:	4622      	mov	r2, r4
 800f94a:	4903      	ldr	r1, [pc, #12]	; (800f958 <uxr_next_input_reliable_buffer_available+0xf0>)
 800f94c:	f7f9 feb4 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 800f950:	2001      	movs	r0, #1
 800f952:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800f956:	e7c8      	b.n	800f8ea <uxr_next_input_reliable_buffer_available+0x82>
 800f958:	0800f669 	.word	0x0800f669

0800f95c <uxr_process_heartbeat>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	4611      	mov	r1, r2
 800f960:	4604      	mov	r4, r0
 800f962:	89c0      	ldrh	r0, [r0, #14]
 800f964:	4615      	mov	r5, r2
 800f966:	f000 fcb5 	bl	80102d4 <uxr_seq_num_cmp>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	bfb8      	it	lt
 800f96e:	81e5      	strhlt	r5, [r4, #14]
 800f970:	bd38      	pop	{r3, r4, r5, pc}
 800f972:	bf00      	nop

0800f974 <uxr_compute_acknack>:
 800f974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f978:	8903      	ldrh	r3, [r0, #8]
 800f97a:	4604      	mov	r4, r0
 800f97c:	460f      	mov	r7, r1
 800f97e:	8985      	ldrh	r5, [r0, #12]
 800f980:	b1db      	cbz	r3, 800f9ba <uxr_compute_acknack+0x46>
 800f982:	4628      	mov	r0, r5
 800f984:	2601      	movs	r6, #1
 800f986:	e004      	b.n	800f992 <uxr_compute_acknack+0x1e>
 800f988:	4566      	cmp	r6, ip
 800f98a:	f106 0601 	add.w	r6, r6, #1
 800f98e:	d214      	bcs.n	800f9ba <uxr_compute_acknack+0x46>
 800f990:	89a0      	ldrh	r0, [r4, #12]
 800f992:	b2b1      	uxth	r1, r6
 800f994:	f000 fc96 	bl	80102c4 <uxr_seq_num_add>
 800f998:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f99c:	fbb0 f2fc 	udiv	r2, r0, ip
 800f9a0:	e9d4 1300 	ldrd	r1, r3, [r4]
 800f9a4:	fb0c 0212 	mls	r2, ip, r2, r0
 800f9a8:	fbb3 f3fc 	udiv	r3, r3, ip
 800f9ac:	b292      	uxth	r2, r2
 800f9ae:	fb02 f303 	mul.w	r3, r2, r3
 800f9b2:	58cb      	ldr	r3, [r1, r3]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1e7      	bne.n	800f988 <uxr_compute_acknack+0x14>
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	803d      	strh	r5, [r7, #0]
 800f9bc:	2101      	movs	r1, #1
 800f9be:	89e6      	ldrh	r6, [r4, #14]
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f000 fc83 	bl	80102cc <uxr_seq_num_sub>
 800f9c6:	4601      	mov	r1, r0
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	f000 fc7f 	bl	80102cc <uxr_seq_num_sub>
 800f9ce:	4606      	mov	r6, r0
 800f9d0:	b328      	cbz	r0, 800fa1e <uxr_compute_acknack+0xaa>
 800f9d2:	f04f 0900 	mov.w	r9, #0
 800f9d6:	f04f 0801 	mov.w	r8, #1
 800f9da:	464d      	mov	r5, r9
 800f9dc:	fa1f f189 	uxth.w	r1, r9
 800f9e0:	8838      	ldrh	r0, [r7, #0]
 800f9e2:	f000 fc6f 	bl	80102c4 <uxr_seq_num_add>
 800f9e6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f9ea:	6861      	ldr	r1, [r4, #4]
 800f9ec:	fa08 fe09 	lsl.w	lr, r8, r9
 800f9f0:	6822      	ldr	r2, [r4, #0]
 800f9f2:	f109 0901 	add.w	r9, r9, #1
 800f9f6:	ea4e 0e05 	orr.w	lr, lr, r5
 800f9fa:	fbb0 f3fc 	udiv	r3, r0, ip
 800f9fe:	fbb1 f1fc 	udiv	r1, r1, ip
 800fa02:	fb03 001c 	mls	r0, r3, ip, r0
 800fa06:	b283      	uxth	r3, r0
 800fa08:	fb01 f303 	mul.w	r3, r1, r3
 800fa0c:	58d3      	ldr	r3, [r2, r3]
 800fa0e:	b90b      	cbnz	r3, 800fa14 <uxr_compute_acknack+0xa0>
 800fa10:	fa1f f58e 	uxth.w	r5, lr
 800fa14:	454e      	cmp	r6, r9
 800fa16:	d1e1      	bne.n	800f9dc <uxr_compute_acknack+0x68>
 800fa18:	4628      	mov	r0, r5
 800fa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa1e:	4605      	mov	r5, r0
 800fa20:	4628      	mov	r0, r5
 800fa22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa26:	bf00      	nop

0800fa28 <uxr_init_output_best_effort_stream>:
 800fa28:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800fa2c:	6001      	str	r1, [r0, #0]
 800fa2e:	7303      	strb	r3, [r0, #12]
 800fa30:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800fa34:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop

0800fa3c <uxr_reset_output_best_effort_stream>:
 800fa3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa40:	7b03      	ldrb	r3, [r0, #12]
 800fa42:	81c2      	strh	r2, [r0, #14]
 800fa44:	6043      	str	r3, [r0, #4]
 800fa46:	4770      	bx	lr

0800fa48 <uxr_prepare_best_effort_buffer_to_write>:
 800fa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	b083      	sub	sp, #12
 800fa4e:	6840      	ldr	r0, [r0, #4]
 800fa50:	460d      	mov	r5, r1
 800fa52:	4616      	mov	r6, r2
 800fa54:	f7fc f982 	bl	800bd5c <uxr_submessage_padding>
 800fa58:	6863      	ldr	r3, [r4, #4]
 800fa5a:	4418      	add	r0, r3
 800fa5c:	68a3      	ldr	r3, [r4, #8]
 800fa5e:	1942      	adds	r2, r0, r5
 800fa60:	4293      	cmp	r3, r2
 800fa62:	bf2c      	ite	cs
 800fa64:	2701      	movcs	r7, #1
 800fa66:	2700      	movcc	r7, #0
 800fa68:	d202      	bcs.n	800fa70 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	b003      	add	sp, #12
 800fa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa70:	9000      	str	r0, [sp, #0]
 800fa72:	2300      	movs	r3, #0
 800fa74:	4630      	mov	r0, r6
 800fa76:	6821      	ldr	r1, [r4, #0]
 800fa78:	f7f9 fe38 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800fa7c:	6861      	ldr	r1, [r4, #4]
 800fa7e:	4638      	mov	r0, r7
 800fa80:	4429      	add	r1, r5
 800fa82:	6061      	str	r1, [r4, #4]
 800fa84:	b003      	add	sp, #12
 800fa86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa88 <uxr_prepare_best_effort_buffer_to_send>:
 800fa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	461d      	mov	r5, r3
 800fa90:	6840      	ldr	r0, [r0, #4]
 800fa92:	7b23      	ldrb	r3, [r4, #12]
 800fa94:	4298      	cmp	r0, r3
 800fa96:	bf8c      	ite	hi
 800fa98:	2601      	movhi	r6, #1
 800fa9a:	2600      	movls	r6, #0
 800fa9c:	d802      	bhi.n	800faa4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800fa9e:	4630      	mov	r0, r6
 800faa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa4:	4688      	mov	r8, r1
 800faa6:	89e0      	ldrh	r0, [r4, #14]
 800faa8:	2101      	movs	r1, #1
 800faaa:	4617      	mov	r7, r2
 800faac:	f000 fc0a 	bl	80102c4 <uxr_seq_num_add>
 800fab0:	6823      	ldr	r3, [r4, #0]
 800fab2:	81e0      	strh	r0, [r4, #14]
 800fab4:	8028      	strh	r0, [r5, #0]
 800fab6:	4630      	mov	r0, r6
 800fab8:	f8c8 3000 	str.w	r3, [r8]
 800fabc:	6863      	ldr	r3, [r4, #4]
 800fabe:	603b      	str	r3, [r7, #0]
 800fac0:	7b23      	ldrb	r3, [r4, #12]
 800fac2:	6063      	str	r3, [r4, #4]
 800fac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fac8 <on_full_output_buffer>:
 800fac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faca:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800face:	460c      	mov	r4, r1
 800fad0:	6803      	ldr	r3, [r0, #0]
 800fad2:	4605      	mov	r5, r0
 800fad4:	7b26      	ldrb	r6, [r4, #12]
 800fad6:	e9d1 1200 	ldrd	r1, r2, [r1]
 800fada:	fbb2 f2fc 	udiv	r2, r2, ip
 800fade:	eba3 0e01 	sub.w	lr, r3, r1
 800fae2:	6903      	ldr	r3, [r0, #16]
 800fae4:	fbbe fef2 	udiv	lr, lr, r2
 800fae8:	f10e 0e01 	add.w	lr, lr, #1
 800faec:	fa1f fe8e 	uxth.w	lr, lr
 800faf0:	fbbe f7fc 	udiv	r7, lr, ip
 800faf4:	fb0c ec17 	mls	ip, ip, r7, lr
 800faf8:	fa1f fc8c 	uxth.w	ip, ip
 800fafc:	fb02 fc0c 	mul.w	ip, r2, ip
 800fb00:	f851 200c 	ldr.w	r2, [r1, ip]
 800fb04:	44b4      	add	ip, r6
 800fb06:	1b92      	subs	r2, r2, r6
 800fb08:	f10c 0c08 	add.w	ip, ip, #8
 800fb0c:	3a04      	subs	r2, #4
 800fb0e:	4461      	add	r1, ip
 800fb10:	f7f9 fdf6 	bl	8009700 <ucdr_init_buffer_origin>
 800fb14:	4628      	mov	r0, r5
 800fb16:	4622      	mov	r2, r4
 800fb18:	4902      	ldr	r1, [pc, #8]	; (800fb24 <on_full_output_buffer+0x5c>)
 800fb1a:	f7f9 fdcd 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 800fb1e:	2000      	movs	r0, #0
 800fb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb22:	bf00      	nop
 800fb24:	0800fac9 	.word	0x0800fac9

0800fb28 <uxr_init_output_reliable_stream>:
 800fb28:	b530      	push	{r4, r5, lr}
 800fb2a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 800fb2e:	8103      	strh	r3, [r0, #8]
 800fb30:	7304      	strb	r4, [r0, #12]
 800fb32:	e9c0 1200 	strd	r1, r2, [r0]
 800fb36:	b1e3      	cbz	r3, 800fb72 <uxr_init_output_reliable_stream+0x4a>
 800fb38:	600c      	str	r4, [r1, #0]
 800fb3a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800fb3e:	f1bc 0f01 	cmp.w	ip, #1
 800fb42:	d916      	bls.n	800fb72 <uxr_init_output_reliable_stream+0x4a>
 800fb44:	f04f 0e01 	mov.w	lr, #1
 800fb48:	6843      	ldr	r3, [r0, #4]
 800fb4a:	f10e 0501 	add.w	r5, lr, #1
 800fb4e:	7b04      	ldrb	r4, [r0, #12]
 800fb50:	6801      	ldr	r1, [r0, #0]
 800fb52:	fbbe f2fc 	udiv	r2, lr, ip
 800fb56:	fbb3 f3fc 	udiv	r3, r3, ip
 800fb5a:	fb0c e212 	mls	r2, ip, r2, lr
 800fb5e:	fa1f fe85 	uxth.w	lr, r5
 800fb62:	b292      	uxth	r2, r2
 800fb64:	fb02 f303 	mul.w	r3, r2, r3
 800fb68:	50cc      	str	r4, [r1, r3]
 800fb6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800fb6e:	45f4      	cmp	ip, lr
 800fb70:	d8ea      	bhi.n	800fb48 <uxr_init_output_reliable_stream+0x20>
 800fb72:	4b07      	ldr	r3, [pc, #28]	; (800fb90 <uxr_init_output_reliable_stream+0x68>)
 800fb74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fb7c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800fb80:	f8c0 300e 	str.w	r3, [r0, #14]
 800fb84:	2300      	movs	r3, #0
 800fb86:	8242      	strh	r2, [r0, #18]
 800fb88:	8403      	strh	r3, [r0, #32]
 800fb8a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 800fb8e:	bd30      	pop	{r4, r5, pc}
 800fb90:	ffff0000 	.word	0xffff0000
 800fb94:	00000000 	.word	0x00000000

0800fb98 <uxr_reset_output_reliable_stream>:
 800fb98:	8901      	ldrh	r1, [r0, #8]
 800fb9a:	b510      	push	{r4, lr}
 800fb9c:	b1b1      	cbz	r1, 800fbcc <uxr_reset_output_reliable_stream+0x34>
 800fb9e:	f04f 0e00 	mov.w	lr, #0
 800fba2:	46f4      	mov	ip, lr
 800fba4:	6843      	ldr	r3, [r0, #4]
 800fba6:	f10e 0e01 	add.w	lr, lr, #1
 800fbaa:	7b04      	ldrb	r4, [r0, #12]
 800fbac:	fbbc f2f1 	udiv	r2, ip, r1
 800fbb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbb4:	fb01 c212 	mls	r2, r1, r2, ip
 800fbb8:	fa1f fc8e 	uxth.w	ip, lr
 800fbbc:	b292      	uxth	r2, r2
 800fbbe:	fb02 f303 	mul.w	r3, r2, r3
 800fbc2:	6802      	ldr	r2, [r0, #0]
 800fbc4:	50d4      	str	r4, [r2, r3]
 800fbc6:	8901      	ldrh	r1, [r0, #8]
 800fbc8:	4561      	cmp	r1, ip
 800fbca:	d8eb      	bhi.n	800fba4 <uxr_reset_output_reliable_stream+0xc>
 800fbcc:	4b08      	ldr	r3, [pc, #32]	; (800fbf0 <uxr_reset_output_reliable_stream+0x58>)
 800fbce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbd2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800fbe8 <uxr_reset_output_reliable_stream+0x50>
 800fbd6:	f8c0 300e 	str.w	r3, [r0, #14]
 800fbda:	2300      	movs	r3, #0
 800fbdc:	8242      	strh	r2, [r0, #18]
 800fbde:	8403      	strh	r3, [r0, #32]
 800fbe0:	ed80 7b06 	vstr	d7, [r0, #24]
 800fbe4:	bd10      	pop	{r4, pc}
 800fbe6:	bf00      	nop
 800fbe8:	ffffffff 	.word	0xffffffff
 800fbec:	7fffffff 	.word	0x7fffffff
 800fbf0:	ffff0000 	.word	0xffff0000

0800fbf4 <uxr_prepare_reliable_buffer_to_write>:
 800fbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	b091      	sub	sp, #68	; 0x44
 800fbfc:	8900      	ldrh	r0, [r0, #8]
 800fbfe:	468b      	mov	fp, r1
 800fc00:	89e6      	ldrh	r6, [r4, #14]
 800fc02:	9204      	str	r2, [sp, #16]
 800fc04:	6865      	ldr	r5, [r4, #4]
 800fc06:	6823      	ldr	r3, [r4, #0]
 800fc08:	f894 900c 	ldrb.w	r9, [r4, #12]
 800fc0c:	fbb6 f2f0 	udiv	r2, r6, r0
 800fc10:	fbb5 f5f0 	udiv	r5, r5, r0
 800fc14:	fb00 6212 	mls	r2, r0, r2, r6
 800fc18:	1f2f      	subs	r7, r5, #4
 800fc1a:	b292      	uxth	r2, r2
 800fc1c:	fb05 3202 	mla	r2, r5, r2, r3
 800fc20:	1d11      	adds	r1, r2, #4
 800fc22:	f8d2 8000 	ldr.w	r8, [r2]
 800fc26:	9103      	str	r1, [sp, #12]
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	f000 814a 	beq.w	800fec2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 800fc2e:	f04f 0c00 	mov.w	ip, #0
 800fc32:	46e2      	mov	sl, ip
 800fc34:	4661      	mov	r1, ip
 800fc36:	f10c 0c01 	add.w	ip, ip, #1
 800fc3a:	fbb1 f2f0 	udiv	r2, r1, r0
 800fc3e:	fb00 1212 	mls	r2, r0, r2, r1
 800fc42:	fa1f f18c 	uxth.w	r1, ip
 800fc46:	b292      	uxth	r2, r2
 800fc48:	fb05 f202 	mul.w	r2, r5, r2
 800fc4c:	589a      	ldr	r2, [r3, r2]
 800fc4e:	454a      	cmp	r2, r9
 800fc50:	d103      	bne.n	800fc5a <uxr_prepare_reliable_buffer_to_write+0x66>
 800fc52:	f10a 0a01 	add.w	sl, sl, #1
 800fc56:	fa1f fa8a 	uxth.w	sl, sl
 800fc5a:	4281      	cmp	r1, r0
 800fc5c:	d3eb      	bcc.n	800fc36 <uxr_prepare_reliable_buffer_to_write+0x42>
 800fc5e:	4640      	mov	r0, r8
 800fc60:	2104      	movs	r1, #4
 800fc62:	f8cd a014 	str.w	sl, [sp, #20]
 800fc66:	f7f9 fd57 	bl	8009718 <ucdr_alignment>
 800fc6a:	4480      	add	r8, r0
 800fc6c:	eb08 020b 	add.w	r2, r8, fp
 800fc70:	42ba      	cmp	r2, r7
 800fc72:	f240 80ca 	bls.w	800fe0a <uxr_prepare_reliable_buffer_to_write+0x216>
 800fc76:	7b22      	ldrb	r2, [r4, #12]
 800fc78:	445a      	add	r2, fp
 800fc7a:	42ba      	cmp	r2, r7
 800fc7c:	f240 80b2 	bls.w	800fde4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 800fc80:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800fc84:	b2bb      	uxth	r3, r7
 800fc86:	eba2 0209 	sub.w	r2, r2, r9
 800fc8a:	441a      	add	r2, r3
 800fc8c:	b292      	uxth	r2, r2
 800fc8e:	fb0a f902 	mul.w	r9, sl, r2
 800fc92:	9205      	str	r2, [sp, #20]
 800fc94:	45d9      	cmp	r9, fp
 800fc96:	9206      	str	r2, [sp, #24]
 800fc98:	f0c0 80b3 	bcc.w	800fe02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 800fc9c:	f108 0204 	add.w	r2, r8, #4
 800fca0:	42ba      	cmp	r2, r7
 800fca2:	f080 80da 	bcs.w	800fe5a <uxr_prepare_reliable_buffer_to_write+0x266>
 800fca6:	f1a3 0904 	sub.w	r9, r3, #4
 800fcaa:	9b05      	ldr	r3, [sp, #20]
 800fcac:	eba9 0908 	sub.w	r9, r9, r8
 800fcb0:	fa1f f989 	uxth.w	r9, r9
 800fcb4:	ebab 0b09 	sub.w	fp, fp, r9
 800fcb8:	fbbb f2f3 	udiv	r2, fp, r3
 800fcbc:	fb03 b312 	mls	r3, r3, r2, fp
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f040 80c4 	bne.w	800fe4e <uxr_prepare_reliable_buffer_to_write+0x25a>
 800fcc6:	b293      	uxth	r3, r2
 800fcc8:	4553      	cmp	r3, sl
 800fcca:	f200 809a 	bhi.w	800fe02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 80f9 	beq.w	800fec6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800fcd4:	f8cd 801c 	str.w	r8, [sp, #28]
 800fcd8:	f04f 0a00 	mov.w	sl, #0
 800fcdc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fce0:	f10d 0b20 	add.w	fp, sp, #32
 800fce4:	9505      	str	r5, [sp, #20]
 800fce6:	461d      	mov	r5, r3
 800fce8:	e000      	b.n	800fcec <uxr_prepare_reliable_buffer_to_write+0xf8>
 800fcea:	46c1      	mov	r9, r8
 800fcec:	8922      	ldrh	r2, [r4, #8]
 800fcee:	4658      	mov	r0, fp
 800fcf0:	6863      	ldr	r3, [r4, #4]
 800fcf2:	f10a 0a01 	add.w	sl, sl, #1
 800fcf6:	fbb6 f1f2 	udiv	r1, r6, r2
 800fcfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcfe:	fb02 6111 	mls	r1, r2, r1, r6
 800fd02:	463a      	mov	r2, r7
 800fd04:	b289      	uxth	r1, r1
 800fd06:	fb03 f101 	mul.w	r1, r3, r1
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	3104      	adds	r1, #4
 800fd0e:	4419      	add	r1, r3
 800fd10:	2300      	movs	r3, #0
 800fd12:	f851 cc04 	ldr.w	ip, [r1, #-4]
 800fd16:	f8cd c000 	str.w	ip, [sp]
 800fd1a:	f7f9 fce7 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800fd1e:	464a      	mov	r2, r9
 800fd20:	2300      	movs	r3, #0
 800fd22:	210d      	movs	r1, #13
 800fd24:	4658      	mov	r0, fp
 800fd26:	f7fb ffd9 	bl	800bcdc <uxr_buffer_submessage_header>
 800fd2a:	8921      	ldrh	r1, [r4, #8]
 800fd2c:	6863      	ldr	r3, [r4, #4]
 800fd2e:	4630      	mov	r0, r6
 800fd30:	fbb6 f2f1 	udiv	r2, r6, r1
 800fd34:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd38:	fb01 6212 	mls	r2, r1, r2, r6
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	b292      	uxth	r2, r2
 800fd40:	fb02 f303 	mul.w	r3, r2, r3
 800fd44:	6822      	ldr	r2, [r4, #0]
 800fd46:	50d7      	str	r7, [r2, r3]
 800fd48:	f000 fabc 	bl	80102c4 <uxr_seq_num_add>
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	fa1f f38a 	uxth.w	r3, sl
 800fd52:	429d      	cmp	r5, r3
 800fd54:	d8c9      	bhi.n	800fcea <uxr_prepare_reliable_buffer_to_write+0xf6>
 800fd56:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fd5a:	9d05      	ldr	r5, [sp, #20]
 800fd5c:	8920      	ldrh	r0, [r4, #8]
 800fd5e:	463a      	mov	r2, r7
 800fd60:	6863      	ldr	r3, [r4, #4]
 800fd62:	fbb6 f1f0 	udiv	r1, r6, r0
 800fd66:	fbb3 f3f0 	udiv	r3, r3, r0
 800fd6a:	fb00 6111 	mls	r1, r0, r1, r6
 800fd6e:	4658      	mov	r0, fp
 800fd70:	b289      	uxth	r1, r1
 800fd72:	fb01 f303 	mul.w	r3, r1, r3
 800fd76:	6821      	ldr	r1, [r4, #0]
 800fd78:	3304      	adds	r3, #4
 800fd7a:	4419      	add	r1, r3
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 800fd82:	9700      	str	r7, [sp, #0]
 800fd84:	f7f9 fcb2 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800fd88:	9f06      	ldr	r7, [sp, #24]
 800fd8a:	4658      	mov	r0, fp
 800fd8c:	2302      	movs	r3, #2
 800fd8e:	b2ba      	uxth	r2, r7
 800fd90:	210d      	movs	r1, #13
 800fd92:	f7fb ffa3 	bl	800bcdc <uxr_buffer_submessage_header>
 800fd96:	f108 0104 	add.w	r1, r8, #4
 800fd9a:	9b03      	ldr	r3, [sp, #12]
 800fd9c:	f1a5 0208 	sub.w	r2, r5, #8
 800fda0:	8925      	ldrh	r5, [r4, #8]
 800fda2:	440b      	add	r3, r1
 800fda4:	eba2 0208 	sub.w	r2, r2, r8
 800fda8:	fbb6 f0f5 	udiv	r0, r6, r5
 800fdac:	4619      	mov	r1, r3
 800fdae:	6863      	ldr	r3, [r4, #4]
 800fdb0:	fb05 6010 	mls	r0, r5, r0, r6
 800fdb4:	fbb3 f3f5 	udiv	r3, r3, r5
 800fdb8:	b280      	uxth	r0, r0
 800fdba:	6825      	ldr	r5, [r4, #0]
 800fdbc:	fb00 f303 	mul.w	r3, r0, r3
 800fdc0:	7b20      	ldrb	r0, [r4, #12]
 800fdc2:	3004      	adds	r0, #4
 800fdc4:	4438      	add	r0, r7
 800fdc6:	50e8      	str	r0, [r5, r3]
 800fdc8:	9d04      	ldr	r5, [sp, #16]
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f7f9 fca0 	bl	8009710 <ucdr_init_buffer>
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	4622      	mov	r2, r4
 800fdd4:	493d      	ldr	r1, [pc, #244]	; (800fecc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800fdd6:	f7f9 fc6f 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 800fdda:	2001      	movs	r0, #1
 800fddc:	81e6      	strh	r6, [r4, #14]
 800fdde:	b011      	add	sp, #68	; 0x44
 800fde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde4:	2101      	movs	r1, #1
 800fde6:	89e0      	ldrh	r0, [r4, #14]
 800fde8:	f000 fa6c 	bl	80102c4 <uxr_seq_num_add>
 800fdec:	4605      	mov	r5, r0
 800fdee:	8921      	ldrh	r1, [r4, #8]
 800fdf0:	8a60      	ldrh	r0, [r4, #18]
 800fdf2:	f000 fa67 	bl	80102c4 <uxr_seq_num_add>
 800fdf6:	4601      	mov	r1, r0
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f000 fa6b 	bl	80102d4 <uxr_seq_num_cmp>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	dd44      	ble.n	800fe8c <uxr_prepare_reliable_buffer_to_write+0x298>
 800fe02:	2000      	movs	r0, #0
 800fe04:	b011      	add	sp, #68	; 0x44
 800fe06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0a:	8921      	ldrh	r1, [r4, #8]
 800fe0c:	8a60      	ldrh	r0, [r4, #18]
 800fe0e:	9205      	str	r2, [sp, #20]
 800fe10:	f000 fa58 	bl	80102c4 <uxr_seq_num_add>
 800fe14:	4601      	mov	r1, r0
 800fe16:	4630      	mov	r0, r6
 800fe18:	f000 fa5c 	bl	80102d4 <uxr_seq_num_cmp>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	9a05      	ldr	r2, [sp, #20]
 800fe20:	dcef      	bgt.n	800fe02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 800fe22:	8925      	ldrh	r5, [r4, #8]
 800fe24:	e9d4 7300 	ldrd	r7, r3, [r4]
 800fe28:	fbb6 f4f5 	udiv	r4, r6, r5
 800fe2c:	fbb3 f3f5 	udiv	r3, r3, r5
 800fe30:	fb05 6414 	mls	r4, r5, r4, r6
 800fe34:	b2a4      	uxth	r4, r4
 800fe36:	fb04 f303 	mul.w	r3, r4, r3
 800fe3a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800fe3e:	50fa      	str	r2, [r7, r3]
 800fe40:	2300      	movs	r3, #0
 800fe42:	f8cd 8000 	str.w	r8, [sp]
 800fe46:	f7f9 fc51 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	e7da      	b.n	800fe04 <uxr_prepare_reliable_buffer_to_write+0x210>
 800fe4e:	3201      	adds	r2, #1
 800fe50:	9306      	str	r3, [sp, #24]
 800fe52:	b293      	uxth	r3, r2
 800fe54:	4553      	cmp	r3, sl
 800fe56:	d8d4      	bhi.n	800fe02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 800fe58:	e739      	b.n	800fcce <uxr_prepare_reliable_buffer_to_write+0xda>
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	2101      	movs	r1, #1
 800fe5e:	9307      	str	r3, [sp, #28]
 800fe60:	f000 fa30 	bl	80102c4 <uxr_seq_num_add>
 800fe64:	4606      	mov	r6, r0
 800fe66:	8920      	ldrh	r0, [r4, #8]
 800fe68:	6862      	ldr	r2, [r4, #4]
 800fe6a:	fbb6 f1f0 	udiv	r1, r6, r0
 800fe6e:	fbb2 f2f0 	udiv	r2, r2, r0
 800fe72:	fb00 6111 	mls	r1, r0, r1, r6
 800fe76:	b289      	uxth	r1, r1
 800fe78:	fb01 f202 	mul.w	r2, r1, r2
 800fe7c:	6821      	ldr	r1, [r4, #0]
 800fe7e:	3204      	adds	r2, #4
 800fe80:	188b      	adds	r3, r1, r2
 800fe82:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800fe86:	9303      	str	r3, [sp, #12]
 800fe88:	9b07      	ldr	r3, [sp, #28]
 800fe8a:	e70c      	b.n	800fca6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 800fe8c:	8921      	ldrh	r1, [r4, #8]
 800fe8e:	6863      	ldr	r3, [r4, #4]
 800fe90:	9804      	ldr	r0, [sp, #16]
 800fe92:	fbb5 f2f1 	udiv	r2, r5, r1
 800fe96:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe9a:	fb01 5212 	mls	r2, r1, r2, r5
 800fe9e:	6821      	ldr	r1, [r4, #0]
 800fea0:	b292      	uxth	r2, r2
 800fea2:	fb02 f303 	mul.w	r3, r2, r3
 800fea6:	7b22      	ldrb	r2, [r4, #12]
 800fea8:	3304      	adds	r3, #4
 800feaa:	445a      	add	r2, fp
 800feac:	4419      	add	r1, r3
 800feae:	f841 2c04 	str.w	r2, [r1, #-4]
 800feb2:	7b23      	ldrb	r3, [r4, #12]
 800feb4:	9300      	str	r3, [sp, #0]
 800feb6:	2300      	movs	r3, #0
 800feb8:	f7f9 fc18 	bl	80096ec <ucdr_init_buffer_origin_offset>
 800febc:	2001      	movs	r0, #1
 800febe:	81e5      	strh	r5, [r4, #14]
 800fec0:	e7a0      	b.n	800fe04 <uxr_prepare_reliable_buffer_to_write+0x210>
 800fec2:	4682      	mov	sl, r0
 800fec4:	e6cb      	b.n	800fc5e <uxr_prepare_reliable_buffer_to_write+0x6a>
 800fec6:	f10d 0b20 	add.w	fp, sp, #32
 800feca:	e747      	b.n	800fd5c <uxr_prepare_reliable_buffer_to_write+0x168>
 800fecc:	0800fac9 	.word	0x0800fac9

0800fed0 <uxr_prepare_next_reliable_buffer_to_send>:
 800fed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed2:	4604      	mov	r4, r0
 800fed4:	461d      	mov	r5, r3
 800fed6:	460f      	mov	r7, r1
 800fed8:	8a00      	ldrh	r0, [r0, #16]
 800feda:	2101      	movs	r1, #1
 800fedc:	4616      	mov	r6, r2
 800fede:	f000 f9f1 	bl	80102c4 <uxr_seq_num_add>
 800fee2:	8028      	strh	r0, [r5, #0]
 800fee4:	8922      	ldrh	r2, [r4, #8]
 800fee6:	6863      	ldr	r3, [r4, #4]
 800fee8:	fbb0 f1f2 	udiv	r1, r0, r2
 800feec:	fbb3 f3f2 	udiv	r3, r3, r2
 800fef0:	fb02 0c11 	mls	ip, r2, r1, r0
 800fef4:	89e1      	ldrh	r1, [r4, #14]
 800fef6:	fa1f fc8c 	uxth.w	ip, ip
 800fefa:	fb0c fc03 	mul.w	ip, ip, r3
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	f10c 0c04 	add.w	ip, ip, #4
 800ff04:	4463      	add	r3, ip
 800ff06:	603b      	str	r3, [r7, #0]
 800ff08:	6823      	ldr	r3, [r4, #0]
 800ff0a:	449c      	add	ip, r3
 800ff0c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800ff10:	6033      	str	r3, [r6, #0]
 800ff12:	f000 f9df 	bl	80102d4 <uxr_seq_num_cmp>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	dd01      	ble.n	800ff1e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff1e:	7b23      	ldrb	r3, [r4, #12]
 800ff20:	6832      	ldr	r2, [r6, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d9f9      	bls.n	800ff1a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800ff26:	8a61      	ldrh	r1, [r4, #18]
 800ff28:	8a20      	ldrh	r0, [r4, #16]
 800ff2a:	f000 f9cf 	bl	80102cc <uxr_seq_num_sub>
 800ff2e:	8923      	ldrh	r3, [r4, #8]
 800ff30:	4283      	cmp	r3, r0
 800ff32:	d0f2      	beq.n	800ff1a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800ff34:	8828      	ldrh	r0, [r5, #0]
 800ff36:	89e3      	ldrh	r3, [r4, #14]
 800ff38:	8220      	strh	r0, [r4, #16]
 800ff3a:	4298      	cmp	r0, r3
 800ff3c:	d001      	beq.n	800ff42 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800ff3e:	2001      	movs	r0, #1
 800ff40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff42:	2101      	movs	r1, #1
 800ff44:	f000 f9be 	bl	80102c4 <uxr_seq_num_add>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2001      	movs	r0, #1
 800ff4c:	81e3      	strh	r3, [r4, #14]
 800ff4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff50 <uxr_update_output_stream_heartbeat_timestamp>:
 800ff50:	b570      	push	{r4, r5, r6, lr}
 800ff52:	8a01      	ldrh	r1, [r0, #16]
 800ff54:	4604      	mov	r4, r0
 800ff56:	8a40      	ldrh	r0, [r0, #18]
 800ff58:	4615      	mov	r5, r2
 800ff5a:	461e      	mov	r6, r3
 800ff5c:	f000 f9ba 	bl	80102d4 <uxr_seq_num_cmp>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	db07      	blt.n	800ff74 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800ff64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800ff72:	bd70      	pop	{r4, r5, r6, pc}
 800ff74:	f894 0020 	ldrb.w	r0, [r4, #32]
 800ff78:	b940      	cbnz	r0, 800ff8c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	f884 3020 	strb.w	r3, [r4, #32]
 800ff80:	3564      	adds	r5, #100	; 0x64
 800ff82:	f146 0600 	adc.w	r6, r6, #0
 800ff86:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800ff8a:	bd70      	pop	{r4, r5, r6, pc}
 800ff8c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ff90:	4295      	cmp	r5, r2
 800ff92:	eb76 0303 	sbcs.w	r3, r6, r3
 800ff96:	db04      	blt.n	800ffa2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 800ff98:	1c43      	adds	r3, r0, #1
 800ff9a:	2001      	movs	r0, #1
 800ff9c:	f884 3020 	strb.w	r3, [r4, #32]
 800ffa0:	e7ee      	b.n	800ff80 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	e7ec      	b.n	800ff80 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 800ffa6:	bf00      	nop

0800ffa8 <uxr_begin_output_nack_buffer_it>:
 800ffa8:	8a40      	ldrh	r0, [r0, #18]
 800ffaa:	4770      	bx	lr

0800ffac <uxr_next_reliable_nack_buffer_to_send>:
 800ffac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 800ffb4:	b197      	cbz	r7, 800ffdc <uxr_next_reliable_nack_buffer_to_send+0x30>
 800ffb6:	4680      	mov	r8, r0
 800ffb8:	460d      	mov	r5, r1
 800ffba:	4616      	mov	r6, r2
 800ffbc:	461c      	mov	r4, r3
 800ffbe:	8818      	ldrh	r0, [r3, #0]
 800ffc0:	2101      	movs	r1, #1
 800ffc2:	f000 f97f 	bl	80102c4 <uxr_seq_num_add>
 800ffc6:	8020      	strh	r0, [r4, #0]
 800ffc8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 800ffcc:	f000 f982 	bl	80102d4 <uxr_seq_num_cmp>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	dd06      	ble.n	800ffe2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	461f      	mov	r7, r3
 800ffd8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 800ffdc:	4638      	mov	r0, r7
 800ffde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800ffe6:	8820      	ldrh	r0, [r4, #0]
 800ffe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ffec:	fbb0 f3f2 	udiv	r3, r0, r2
 800fff0:	fbb1 fcf2 	udiv	ip, r1, r2
 800fff4:	fb02 0313 	mls	r3, r2, r3, r0
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	fb03 fc0c 	mul.w	ip, r3, ip
 800fffe:	f8d8 3000 	ldr.w	r3, [r8]
 8010002:	f10c 0c04 	add.w	ip, ip, #4
 8010006:	4463      	add	r3, ip
 8010008:	602b      	str	r3, [r5, #0]
 801000a:	f8d8 3000 	ldr.w	r3, [r8]
 801000e:	4463      	add	r3, ip
 8010010:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010014:	6033      	str	r3, [r6, #0]
 8010016:	f898 200c 	ldrb.w	r2, [r8, #12]
 801001a:	429a      	cmp	r2, r3
 801001c:	d0d0      	beq.n	800ffc0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801001e:	e7dd      	b.n	800ffdc <uxr_next_reliable_nack_buffer_to_send+0x30>

08010020 <uxr_process_acknack>:
 8010020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010022:	4604      	mov	r4, r0
 8010024:	460e      	mov	r6, r1
 8010026:	4610      	mov	r0, r2
 8010028:	2101      	movs	r1, #1
 801002a:	f000 f94f 	bl	80102cc <uxr_seq_num_sub>
 801002e:	8a61      	ldrh	r1, [r4, #18]
 8010030:	f000 f94c 	bl	80102cc <uxr_seq_num_sub>
 8010034:	b1c8      	cbz	r0, 801006a <uxr_process_acknack+0x4a>
 8010036:	4605      	mov	r5, r0
 8010038:	2700      	movs	r7, #0
 801003a:	2101      	movs	r1, #1
 801003c:	8a60      	ldrh	r0, [r4, #18]
 801003e:	f000 f941 	bl	80102c4 <uxr_seq_num_add>
 8010042:	8923      	ldrh	r3, [r4, #8]
 8010044:	6862      	ldr	r2, [r4, #4]
 8010046:	3701      	adds	r7, #1
 8010048:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801004c:	6821      	ldr	r1, [r4, #0]
 801004e:	42bd      	cmp	r5, r7
 8010050:	8260      	strh	r0, [r4, #18]
 8010052:	fbb0 fef3 	udiv	lr, r0, r3
 8010056:	fbb2 f2f3 	udiv	r2, r2, r3
 801005a:	fb03 031e 	mls	r3, r3, lr, r0
 801005e:	b29b      	uxth	r3, r3
 8010060:	fb02 f303 	mul.w	r3, r2, r3
 8010064:	f841 c003 	str.w	ip, [r1, r3]
 8010068:	d1e7      	bne.n	801003a <uxr_process_acknack+0x1a>
 801006a:	3e00      	subs	r6, #0
 801006c:	f04f 0300 	mov.w	r3, #0
 8010070:	bf18      	it	ne
 8010072:	2601      	movne	r6, #1
 8010074:	f884 3020 	strb.w	r3, [r4, #32]
 8010078:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801007c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801007e:	bf00      	nop

08010080 <uxr_is_output_up_to_date>:
 8010080:	8a01      	ldrh	r1, [r0, #16]
 8010082:	8a40      	ldrh	r0, [r0, #18]
 8010084:	b508      	push	{r3, lr}
 8010086:	f000 f925 	bl	80102d4 <uxr_seq_num_cmp>
 801008a:	fab0 f080 	clz	r0, r0
 801008e:	0940      	lsrs	r0, r0, #5
 8010090:	bd08      	pop	{r3, pc}
 8010092:	bf00      	nop

08010094 <get_available_free_slots>:
 8010094:	8901      	ldrh	r1, [r0, #8]
 8010096:	b1e1      	cbz	r1, 80100d2 <get_available_free_slots+0x3e>
 8010098:	6843      	ldr	r3, [r0, #4]
 801009a:	f04f 0c00 	mov.w	ip, #0
 801009e:	b530      	push	{r4, r5, lr}
 80100a0:	fbb3 fef1 	udiv	lr, r3, r1
 80100a4:	6805      	ldr	r5, [r0, #0]
 80100a6:	4662      	mov	r2, ip
 80100a8:	7b04      	ldrb	r4, [r0, #12]
 80100aa:	4660      	mov	r0, ip
 80100ac:	f10c 0c01 	add.w	ip, ip, #1
 80100b0:	fbb2 f3f1 	udiv	r3, r2, r1
 80100b4:	fb01 2313 	mls	r3, r1, r3, r2
 80100b8:	fa1f f28c 	uxth.w	r2, ip
 80100bc:	b29b      	uxth	r3, r3
 80100be:	fb0e f303 	mul.w	r3, lr, r3
 80100c2:	58eb      	ldr	r3, [r5, r3]
 80100c4:	429c      	cmp	r4, r3
 80100c6:	d101      	bne.n	80100cc <get_available_free_slots+0x38>
 80100c8:	3001      	adds	r0, #1
 80100ca:	b280      	uxth	r0, r0
 80100cc:	428a      	cmp	r2, r1
 80100ce:	d3ed      	bcc.n	80100ac <get_available_free_slots+0x18>
 80100d0:	bd30      	pop	{r4, r5, pc}
 80100d2:	4608      	mov	r0, r1
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop

080100d8 <uxr_buffer_cancel_data>:
 80100d8:	b510      	push	{r4, lr}
 80100da:	2300      	movs	r3, #0
 80100dc:	b094      	sub	sp, #80	; 0x50
 80100de:	4604      	mov	r4, r0
 80100e0:	9205      	str	r2, [sp, #20]
 80100e2:	9301      	str	r3, [sp, #4]
 80100e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80100e8:	f88d 301e 	strb.w	r3, [sp, #30]
 80100ec:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80100f0:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80100f4:	2308      	movs	r3, #8
 80100f6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80100fa:	2201      	movs	r2, #1
 80100fc:	9300      	str	r3, [sp, #0]
 80100fe:	ab0c      	add	r3, sp, #48	; 0x30
 8010100:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8010104:	2210      	movs	r2, #16
 8010106:	f7fb fb3d 	bl	800b784 <uxr_prepare_stream_to_write_submessage>
 801010a:	b918      	cbnz	r0, 8010114 <uxr_buffer_cancel_data+0x3c>
 801010c:	4604      	mov	r4, r0
 801010e:	4620      	mov	r0, r4
 8010110:	b014      	add	sp, #80	; 0x50
 8010112:	bd10      	pop	{r4, pc}
 8010114:	9905      	ldr	r1, [sp, #20]
 8010116:	aa06      	add	r2, sp, #24
 8010118:	4620      	mov	r0, r4
 801011a:	f7fb fc6f 	bl	800b9fc <uxr_init_base_object_request>
 801011e:	4604      	mov	r4, r0
 8010120:	a906      	add	r1, sp, #24
 8010122:	a80c      	add	r0, sp, #48	; 0x30
 8010124:	f7fc fe82 	bl	800ce2c <uxr_serialize_READ_DATA_Payload>
 8010128:	4620      	mov	r0, r4
 801012a:	b014      	add	sp, #80	; 0x50
 801012c:	bd10      	pop	{r4, pc}
 801012e:	bf00      	nop

08010130 <read_submessage_format>:
 8010130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010134:	b095      	sub	sp, #84	; 0x54
 8010136:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801013a:	b113      	cbz	r3, 8010142 <read_submessage_format+0x12>
 801013c:	b015      	add	sp, #84	; 0x54
 801013e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010142:	4606      	mov	r6, r0
 8010144:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010146:	460c      	mov	r4, r1
 8010148:	4615      	mov	r5, r2
 801014a:	9004      	str	r0, [sp, #16]
 801014c:	4699      	mov	r9, r3
 801014e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010150:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8010154:	9005      	str	r0, [sp, #20]
 8010156:	a80c      	add	r0, sp, #48	; 0x30
 8010158:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801015c:	1a52      	subs	r2, r2, r1
 801015e:	f7f9 fad7 	bl	8009710 <ucdr_init_buffer>
 8010162:	a80c      	add	r0, sp, #48	; 0x30
 8010164:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010168:	f7f9 faa6 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 801016c:	69e2      	ldr	r2, [r4, #28]
 801016e:	b19a      	cbz	r2, 8010198 <read_submessage_format+0x68>
 8010170:	f1b8 0f07 	cmp.w	r8, #7
 8010174:	f882 9014 	strb.w	r9, [r2, #20]
 8010178:	d040      	beq.n	80101fc <read_submessage_format+0xcc>
 801017a:	f1b8 0f08 	cmp.w	r8, #8
 801017e:	d02e      	beq.n	80101de <read_submessage_format+0xae>
 8010180:	f1b8 0f06 	cmp.w	r8, #6
 8010184:	d011      	beq.n	80101aa <read_submessage_format+0x7a>
 8010186:	2301      	movs	r3, #1
 8010188:	7513      	strb	r3, [r2, #20]
 801018a:	4629      	mov	r1, r5
 801018c:	4620      	mov	r0, r4
 801018e:	f7f9 fb13 	bl	80097b8 <ucdr_advance_buffer>
 8010192:	b015      	add	sp, #84	; 0x54
 8010194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010198:	f1b8 0f07 	cmp.w	r8, #7
 801019c:	d02e      	beq.n	80101fc <read_submessage_format+0xcc>
 801019e:	f1b8 0f08 	cmp.w	r8, #8
 80101a2:	d01c      	beq.n	80101de <read_submessage_format+0xae>
 80101a4:	f1b8 0f06 	cmp.w	r8, #6
 80101a8:	d1ef      	bne.n	801018a <read_submessage_format+0x5a>
 80101aa:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 80101ae:	f1b8 0f00 	cmp.w	r8, #0
 80101b2:	d011      	beq.n	80101d8 <read_submessage_format+0xa8>
 80101b4:	ab0c      	add	r3, sp, #48	; 0x30
 80101b6:	9501      	str	r5, [sp, #4]
 80101b8:	463a      	mov	r2, r7
 80101ba:	4630      	mov	r0, r6
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	2306      	movs	r3, #6
 80101c0:	f88d 3016 	strb.w	r3, [sp, #22]
 80101c4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80101c8:	9302      	str	r3, [sp, #8]
 80101ca:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80101ce:	47c0      	blx	r8
 80101d0:	2301      	movs	r3, #1
 80101d2:	69e2      	ldr	r2, [r4, #28]
 80101d4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80101d8:	2a00      	cmp	r2, #0
 80101da:	d1d4      	bne.n	8010186 <read_submessage_format+0x56>
 80101dc:	e7d5      	b.n	801018a <read_submessage_format+0x5a>
 80101de:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d0f8      	beq.n	80101d8 <read_submessage_format+0xa8>
 80101e6:	a80c      	add	r0, sp, #48	; 0x30
 80101e8:	a906      	add	r1, sp, #24
 80101ea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80101ee:	f7fc fec3 	bl	800cf78 <uxr_deserialize_SampleIdentity>
 80101f2:	b9a0      	cbnz	r0, 801021e <read_submessage_format+0xee>
 80101f4:	69e2      	ldr	r2, [r4, #28]
 80101f6:	2a00      	cmp	r2, #0
 80101f8:	d1c5      	bne.n	8010186 <read_submessage_format+0x56>
 80101fa:	e7c6      	b.n	801018a <read_submessage_format+0x5a>
 80101fc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8010200:	b13b      	cbz	r3, 8010212 <read_submessage_format+0xe2>
 8010202:	a906      	add	r1, sp, #24
 8010204:	a80c      	add	r0, sp, #48	; 0x30
 8010206:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801020a:	f7fc fbaf 	bl	800c96c <uxr_deserialize_BaseObjectRequest>
 801020e:	bb60      	cbnz	r0, 801026a <read_submessage_format+0x13a>
 8010210:	69e2      	ldr	r2, [r4, #28]
 8010212:	68a3      	ldr	r3, [r4, #8]
 8010214:	442b      	add	r3, r5
 8010216:	60a3      	str	r3, [r4, #8]
 8010218:	2a00      	cmp	r2, #0
 801021a:	d1b4      	bne.n	8010186 <read_submessage_format+0x56>
 801021c:	e7b5      	b.n	801018a <read_submessage_format+0x5a>
 801021e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010220:	a80c      	add	r0, sp, #48	; 0x30
 8010222:	eba8 0803 	sub.w	r8, r8, r3
 8010226:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801022a:	44a8      	add	r8, r5
 801022c:	1a52      	subs	r2, r2, r1
 801022e:	f7f9 fa6f 	bl	8009710 <ucdr_init_buffer>
 8010232:	a80c      	add	r0, sp, #48	; 0x30
 8010234:	fa1f f888 	uxth.w	r8, r8
 8010238:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801023c:	f7f9 fa3c 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 8010240:	ab0c      	add	r3, sp, #48	; 0x30
 8010242:	2108      	movs	r1, #8
 8010244:	f8cd 8004 	str.w	r8, [sp, #4]
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	463a      	mov	r2, r7
 801024c:	f88d 1016 	strb.w	r1, [sp, #22]
 8010250:	ab06      	add	r3, sp, #24
 8010252:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8010256:	4630      	mov	r0, r6
 8010258:	9102      	str	r1, [sp, #8]
 801025a:	9905      	ldr	r1, [sp, #20]
 801025c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8010260:	47b8      	blx	r7
 8010262:	2301      	movs	r3, #1
 8010264:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8010268:	e7c4      	b.n	80101f4 <read_submessage_format+0xc4>
 801026a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801026e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010270:	a80c      	add	r0, sp, #48	; 0x30
 8010272:	1a52      	subs	r2, r2, r1
 8010274:	eba8 0803 	sub.w	r8, r8, r3
 8010278:	f7f9 fa4a 	bl	8009710 <ucdr_init_buffer>
 801027c:	a80c      	add	r0, sp, #48	; 0x30
 801027e:	44a8      	add	r8, r5
 8010280:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010284:	f7f9 fa18 	bl	80096b8 <ucdr_set_on_full_buffer_callback>
 8010288:	ab0c      	add	r3, sp, #48	; 0x30
 801028a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801028e:	fa1f f888 	uxth.w	r8, r8
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	463a      	mov	r2, r7
 8010296:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801029a:	4630      	mov	r0, r6
 801029c:	f8cd 8004 	str.w	r8, [sp, #4]
 80102a0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80102a4:	2107      	movs	r1, #7
 80102a6:	f88d 1016 	strb.w	r1, [sp, #22]
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80102b0:	9102      	str	r1, [sp, #8]
 80102b2:	9905      	ldr	r1, [sp, #20]
 80102b4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80102b8:	47b8      	blx	r7
 80102ba:	2301      	movs	r3, #1
 80102bc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80102c0:	e7a6      	b.n	8010210 <read_submessage_format+0xe0>
 80102c2:	bf00      	nop

080102c4 <uxr_seq_num_add>:
 80102c4:	4408      	add	r0, r1
 80102c6:	b280      	uxth	r0, r0
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop

080102cc <uxr_seq_num_sub>:
 80102cc:	1a40      	subs	r0, r0, r1
 80102ce:	b280      	uxth	r0, r0
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop

080102d4 <uxr_seq_num_cmp>:
 80102d4:	4288      	cmp	r0, r1
 80102d6:	d011      	beq.n	80102fc <uxr_seq_num_cmp+0x28>
 80102d8:	d309      	bcc.n	80102ee <uxr_seq_num_cmp+0x1a>
 80102da:	4288      	cmp	r0, r1
 80102dc:	d910      	bls.n	8010300 <uxr_seq_num_cmp+0x2c>
 80102de:	1a40      	subs	r0, r0, r1
 80102e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80102e4:	bfd4      	ite	le
 80102e6:	2001      	movle	r0, #1
 80102e8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80102ec:	4770      	bx	lr
 80102ee:	1a0b      	subs	r3, r1, r0
 80102f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102f4:	daf1      	bge.n	80102da <uxr_seq_num_cmp+0x6>
 80102f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102fa:	4770      	bx	lr
 80102fc:	2000      	movs	r0, #0
 80102fe:	4770      	bx	lr
 8010300:	2001      	movs	r0, #1
 8010302:	4770      	bx	lr

08010304 <uxr_init_framing_io>:
 8010304:	2300      	movs	r3, #0
 8010306:	7041      	strb	r1, [r0, #1]
 8010308:	7003      	strb	r3, [r0, #0]
 801030a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop

08010310 <uxr_write_framed_msg>:
 8010310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010314:	4617      	mov	r7, r2
 8010316:	7842      	ldrb	r2, [r0, #1]
 8010318:	460e      	mov	r6, r1
 801031a:	b083      	sub	sp, #12
 801031c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8010320:	469b      	mov	fp, r3
 8010322:	237e      	movs	r3, #126	; 0x7e
 8010324:	4604      	mov	r4, r0
 8010326:	2901      	cmp	r1, #1
 8010328:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801032c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010330:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8010334:	f240 8115 	bls.w	8010562 <uxr_write_framed_msg+0x252>
 8010338:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801033c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8010340:	2202      	movs	r2, #2
 8010342:	2901      	cmp	r1, #1
 8010344:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010348:	d952      	bls.n	80103f0 <uxr_write_framed_msg+0xe0>
 801034a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801034c:	2103      	movs	r1, #3
 801034e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8010352:	b2dd      	uxtb	r5, r3
 8010354:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8010358:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801035c:	2a01      	cmp	r2, #1
 801035e:	d95c      	bls.n	801041a <uxr_write_framed_msg+0x10a>
 8010360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010362:	1862      	adds	r2, r4, r1
 8010364:	3101      	adds	r1, #1
 8010366:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801036a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801036e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8010372:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8010376:	2a01      	cmp	r2, #1
 8010378:	d961      	bls.n	801043e <uxr_write_framed_msg+0x12e>
 801037a:	1c4a      	adds	r2, r1, #1
 801037c:	4421      	add	r1, r4
 801037e:	b2d2      	uxtb	r2, r2
 8010380:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8010384:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010388:	2b00      	cmp	r3, #0
 801038a:	d06a      	beq.n	8010462 <uxr_write_framed_msg+0x152>
 801038c:	f04f 0800 	mov.w	r8, #0
 8010390:	46c1      	mov	r9, r8
 8010392:	e016      	b.n	80103c2 <uxr_write_framed_msg+0xb2>
 8010394:	2a29      	cmp	r2, #41	; 0x29
 8010396:	d868      	bhi.n	801046a <uxr_write_framed_msg+0x15a>
 8010398:	18a0      	adds	r0, r4, r2
 801039a:	3201      	adds	r2, #1
 801039c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80103a0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80103a4:	ea88 0101 	eor.w	r1, r8, r1
 80103a8:	4b7d      	ldr	r3, [pc, #500]	; (80105a0 <uxr_write_framed_msg+0x290>)
 80103aa:	f109 0901 	add.w	r9, r9, #1
 80103ae:	b2c9      	uxtb	r1, r1
 80103b0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80103b4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80103b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103ba:	454b      	cmp	r3, r9
 80103bc:	d969      	bls.n	8010492 <uxr_write_framed_msg+0x182>
 80103be:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80103c2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80103c6:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80103ca:	2801      	cmp	r0, #1
 80103cc:	d8e2      	bhi.n	8010394 <uxr_write_framed_msg+0x84>
 80103ce:	1c50      	adds	r0, r2, #1
 80103d0:	b2c0      	uxtb	r0, r0
 80103d2:	2829      	cmp	r0, #41	; 0x29
 80103d4:	d849      	bhi.n	801046a <uxr_write_framed_msg+0x15a>
 80103d6:	18a0      	adds	r0, r4, r2
 80103d8:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80103dc:	3202      	adds	r2, #2
 80103de:	f081 0520 	eor.w	r5, r1, #32
 80103e2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80103e6:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80103ea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80103ee:	e7d9      	b.n	80103a4 <uxr_write_framed_msg+0x94>
 80103f0:	2104      	movs	r1, #4
 80103f2:	f04f 0c03 	mov.w	ip, #3
 80103f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103f8:	4422      	add	r2, r4
 80103fa:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80103fe:	44a4      	add	ip, r4
 8010400:	b2dd      	uxtb	r5, r3
 8010402:	f080 0020 	eor.w	r0, r0, #32
 8010406:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801040a:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801040e:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8010412:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8010416:	2a01      	cmp	r2, #1
 8010418:	d8a2      	bhi.n	8010360 <uxr_write_framed_msg+0x50>
 801041a:	1862      	adds	r2, r4, r1
 801041c:	207d      	movs	r0, #125	; 0x7d
 801041e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010420:	f085 0520 	eor.w	r5, r5, #32
 8010424:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8010428:	3102      	adds	r1, #2
 801042a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801042e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8010432:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8010436:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801043a:	2a01      	cmp	r2, #1
 801043c:	d89d      	bhi.n	801037a <uxr_write_framed_msg+0x6a>
 801043e:	1c4d      	adds	r5, r1, #1
 8010440:	1c8a      	adds	r2, r1, #2
 8010442:	f080 0020 	eor.w	r0, r0, #32
 8010446:	4421      	add	r1, r4
 8010448:	fa54 f585 	uxtab	r5, r4, r5
 801044c:	b2d2      	uxtb	r2, r2
 801044e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8010452:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8010456:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801045a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801045e:	2b00      	cmp	r3, #0
 8010460:	d194      	bne.n	801038c <uxr_write_framed_msg+0x7c>
 8010462:	4619      	mov	r1, r3
 8010464:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010468:	e019      	b.n	801049e <uxr_write_framed_msg+0x18e>
 801046a:	2500      	movs	r5, #0
 801046c:	e000      	b.n	8010470 <uxr_write_framed_msg+0x160>
 801046e:	b160      	cbz	r0, 801048a <uxr_write_framed_msg+0x17a>
 8010470:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010474:	1b52      	subs	r2, r2, r5
 8010476:	4653      	mov	r3, sl
 8010478:	4638      	mov	r0, r7
 801047a:	4421      	add	r1, r4
 801047c:	47b0      	blx	r6
 801047e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010482:	4405      	add	r5, r0
 8010484:	4295      	cmp	r5, r2
 8010486:	d3f2      	bcc.n	801046e <uxr_write_framed_msg+0x15e>
 8010488:	d066      	beq.n	8010558 <uxr_write_framed_msg+0x248>
 801048a:	2000      	movs	r0, #0
 801048c:	b003      	add	sp, #12
 801048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010492:	fa5f f188 	uxtb.w	r1, r8
 8010496:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801049a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801049e:	f04f 0900 	mov.w	r9, #0
 80104a2:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80104a6:	46c8      	mov	r8, r9
 80104a8:	e013      	b.n	80104d2 <uxr_write_framed_msg+0x1c2>
 80104aa:	2a29      	cmp	r2, #41	; 0x29
 80104ac:	d824      	bhi.n	80104f8 <uxr_write_framed_msg+0x1e8>
 80104ae:	18a3      	adds	r3, r4, r2
 80104b0:	3201      	adds	r2, #1
 80104b2:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80104b6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80104ba:	f109 0901 	add.w	r9, r9, #1
 80104be:	f1b9 0f02 	cmp.w	r9, #2
 80104c2:	d02d      	beq.n	8010520 <uxr_write_framed_msg+0x210>
 80104c4:	f109 0308 	add.w	r3, r9, #8
 80104c8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80104cc:	446b      	add	r3, sp
 80104ce:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80104d2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d8e7      	bhi.n	80104aa <uxr_write_framed_msg+0x19a>
 80104da:	1c53      	adds	r3, r2, #1
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	2b29      	cmp	r3, #41	; 0x29
 80104e0:	d80a      	bhi.n	80104f8 <uxr_write_framed_msg+0x1e8>
 80104e2:	18a3      	adds	r3, r4, r2
 80104e4:	f081 0120 	eor.w	r1, r1, #32
 80104e8:	3202      	adds	r2, #2
 80104ea:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80104ee:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 80104f2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80104f6:	e7e0      	b.n	80104ba <uxr_write_framed_msg+0x1aa>
 80104f8:	2500      	movs	r5, #0
 80104fa:	e001      	b.n	8010500 <uxr_write_framed_msg+0x1f0>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d0c4      	beq.n	801048a <uxr_write_framed_msg+0x17a>
 8010500:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010504:	1b52      	subs	r2, r2, r5
 8010506:	4653      	mov	r3, sl
 8010508:	4638      	mov	r0, r7
 801050a:	4421      	add	r1, r4
 801050c:	47b0      	blx	r6
 801050e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010512:	4405      	add	r5, r0
 8010514:	4295      	cmp	r5, r2
 8010516:	d3f1      	bcc.n	80104fc <uxr_write_framed_msg+0x1ec>
 8010518:	d1b7      	bne.n	801048a <uxr_write_framed_msg+0x17a>
 801051a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801051e:	e7d1      	b.n	80104c4 <uxr_write_framed_msg+0x1b4>
 8010520:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010524:	b19a      	cbz	r2, 801054e <uxr_write_framed_msg+0x23e>
 8010526:	2500      	movs	r5, #0
 8010528:	e001      	b.n	801052e <uxr_write_framed_msg+0x21e>
 801052a:	2800      	cmp	r0, #0
 801052c:	d0ad      	beq.n	801048a <uxr_write_framed_msg+0x17a>
 801052e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010532:	1b52      	subs	r2, r2, r5
 8010534:	4653      	mov	r3, sl
 8010536:	4638      	mov	r0, r7
 8010538:	4421      	add	r1, r4
 801053a:	47b0      	blx	r6
 801053c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010540:	4405      	add	r5, r0
 8010542:	4295      	cmp	r5, r2
 8010544:	d3f1      	bcc.n	801052a <uxr_write_framed_msg+0x21a>
 8010546:	d1a0      	bne.n	801048a <uxr_write_framed_msg+0x17a>
 8010548:	2300      	movs	r3, #0
 801054a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801054e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010550:	b298      	uxth	r0, r3
 8010552:	b003      	add	sp, #12
 8010554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010558:	f04f 0300 	mov.w	r3, #0
 801055c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010560:	e72a      	b.n	80103b8 <uxr_write_framed_msg+0xa8>
 8010562:	217d      	movs	r1, #125	; 0x7d
 8010564:	f082 0220 	eor.w	r2, r2, #32
 8010568:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801056c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8010570:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8010574:	2203      	movs	r2, #3
 8010576:	2901      	cmp	r1, #1
 8010578:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801057c:	d803      	bhi.n	8010586 <uxr_write_framed_msg+0x276>
 801057e:	2105      	movs	r1, #5
 8010580:	f04f 0c04 	mov.w	ip, #4
 8010584:	e737      	b.n	80103f6 <uxr_write_framed_msg+0xe6>
 8010586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010588:	2104      	movs	r1, #4
 801058a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801058e:	b2dd      	uxtb	r5, r3
 8010590:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8010594:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8010598:	2a01      	cmp	r2, #1
 801059a:	f63f aee1 	bhi.w	8010360 <uxr_write_framed_msg+0x50>
 801059e:	e73c      	b.n	801041a <uxr_write_framed_msg+0x10a>
 80105a0:	0801523c 	.word	0x0801523c

080105a4 <uxr_framing_read_transport>:
 80105a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a8:	4604      	mov	r4, r0
 80105aa:	b085      	sub	sp, #20
 80105ac:	4692      	mov	sl, r2
 80105ae:	4689      	mov	r9, r1
 80105b0:	461d      	mov	r5, r3
 80105b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80105b4:	f7fb fbd8 	bl	800bd68 <uxr_millis>
 80105b8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80105bc:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80105c0:	4680      	mov	r8, r0
 80105c2:	42ba      	cmp	r2, r7
 80105c4:	d05f      	beq.n	8010686 <uxr_framing_read_transport+0xe2>
 80105c6:	d817      	bhi.n	80105f8 <uxr_framing_read_transport+0x54>
 80105c8:	3f01      	subs	r7, #1
 80105ca:	1aba      	subs	r2, r7, r2
 80105cc:	2700      	movs	r7, #0
 80105ce:	b2d2      	uxtb	r2, r2
 80105d0:	42b2      	cmp	r2, r6
 80105d2:	d81a      	bhi.n	801060a <uxr_framing_read_transport+0x66>
 80105d4:	19d3      	adds	r3, r2, r7
 80105d6:	42b3      	cmp	r3, r6
 80105d8:	d852      	bhi.n	8010680 <uxr_framing_read_transport+0xdc>
 80105da:	b9d2      	cbnz	r2, 8010612 <uxr_framing_read_transport+0x6e>
 80105dc:	2600      	movs	r6, #0
 80105de:	f7fb fbc3 	bl	800bd68 <uxr_millis>
 80105e2:	682b      	ldr	r3, [r5, #0]
 80105e4:	eba0 0008 	sub.w	r0, r0, r8
 80105e8:	1a1b      	subs	r3, r3, r0
 80105ea:	4630      	mov	r0, r6
 80105ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80105f0:	602b      	str	r3, [r5, #0]
 80105f2:	b005      	add	sp, #20
 80105f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f8:	2f00      	cmp	r7, #0
 80105fa:	d060      	beq.n	80106be <uxr_framing_read_transport+0x11a>
 80105fc:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8010600:	3f01      	subs	r7, #1
 8010602:	b2d2      	uxtb	r2, r2
 8010604:	b2ff      	uxtb	r7, r7
 8010606:	42b2      	cmp	r2, r6
 8010608:	d9e4      	bls.n	80105d4 <uxr_framing_read_transport+0x30>
 801060a:	b2f2      	uxtb	r2, r6
 801060c:	2700      	movs	r7, #0
 801060e:	2a00      	cmp	r2, #0
 8010610:	d0e4      	beq.n	80105dc <uxr_framing_read_transport+0x38>
 8010612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010614:	4650      	mov	r0, sl
 8010616:	9203      	str	r2, [sp, #12]
 8010618:	9300      	str	r3, [sp, #0]
 801061a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801061e:	682b      	ldr	r3, [r5, #0]
 8010620:	3102      	adds	r1, #2
 8010622:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80106c8 <uxr_framing_read_transport+0x124>
 8010626:	4421      	add	r1, r4
 8010628:	47c8      	blx	r9
 801062a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801062e:	4606      	mov	r6, r0
 8010630:	4403      	add	r3, r0
 8010632:	0859      	lsrs	r1, r3, #1
 8010634:	fbab 2101 	umull	r2, r1, fp, r1
 8010638:	222a      	movs	r2, #42	; 0x2a
 801063a:	0889      	lsrs	r1, r1, #2
 801063c:	fb02 3111 	mls	r1, r2, r1, r3
 8010640:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8010644:	2800      	cmp	r0, #0
 8010646:	d0c9      	beq.n	80105dc <uxr_framing_read_transport+0x38>
 8010648:	9a03      	ldr	r2, [sp, #12]
 801064a:	4290      	cmp	r0, r2
 801064c:	d1c7      	bne.n	80105de <uxr_framing_read_transport+0x3a>
 801064e:	2f00      	cmp	r7, #0
 8010650:	d0c5      	beq.n	80105de <uxr_framing_read_transport+0x3a>
 8010652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010654:	3102      	adds	r1, #2
 8010656:	463a      	mov	r2, r7
 8010658:	4650      	mov	r0, sl
 801065a:	4421      	add	r1, r4
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	2300      	movs	r3, #0
 8010660:	47c8      	blx	r9
 8010662:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8010666:	4406      	add	r6, r0
 8010668:	1813      	adds	r3, r2, r0
 801066a:	085a      	lsrs	r2, r3, #1
 801066c:	fbab 1b02 	umull	r1, fp, fp, r2
 8010670:	222a      	movs	r2, #42	; 0x2a
 8010672:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8010676:	fb02 331b 	mls	r3, r2, fp, r3
 801067a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801067e:	e7ae      	b.n	80105de <uxr_framing_read_transport+0x3a>
 8010680:	1ab6      	subs	r6, r6, r2
 8010682:	b2f7      	uxtb	r7, r6
 8010684:	e7a9      	b.n	80105da <uxr_framing_read_transport+0x36>
 8010686:	2300      	movs	r3, #0
 8010688:	2e28      	cmp	r6, #40	; 0x28
 801068a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801068c:	d9bd      	bls.n	801060a <uxr_framing_read_transport+0x66>
 801068e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010690:	2229      	movs	r2, #41	; 0x29
 8010692:	1ca1      	adds	r1, r4, #2
 8010694:	4650      	mov	r0, sl
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	682b      	ldr	r3, [r5, #0]
 801069a:	47c8      	blx	r9
 801069c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80106a0:	4606      	mov	r6, r0
 80106a2:	212a      	movs	r1, #42	; 0x2a
 80106a4:	4403      	add	r3, r0
 80106a6:	4808      	ldr	r0, [pc, #32]	; (80106c8 <uxr_framing_read_transport+0x124>)
 80106a8:	085a      	lsrs	r2, r3, #1
 80106aa:	fba0 0202 	umull	r0, r2, r0, r2
 80106ae:	0892      	lsrs	r2, r2, #2
 80106b0:	fb01 3312 	mls	r3, r1, r2, r3
 80106b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80106b8:	2e00      	cmp	r6, #0
 80106ba:	d08f      	beq.n	80105dc <uxr_framing_read_transport+0x38>
 80106bc:	e78f      	b.n	80105de <uxr_framing_read_transport+0x3a>
 80106be:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 80106c2:	b2d2      	uxtb	r2, r2
 80106c4:	e784      	b.n	80105d0 <uxr_framing_read_transport+0x2c>
 80106c6:	bf00      	nop
 80106c8:	30c30c31 	.word	0x30c30c31

080106cc <uxr_read_framed_msg>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	461e      	mov	r6, r3
 80106d2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80106d6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80106da:	b083      	sub	sp, #12
 80106dc:	4604      	mov	r4, r0
 80106de:	4688      	mov	r8, r1
 80106e0:	429d      	cmp	r5, r3
 80106e2:	4691      	mov	r9, r2
 80106e4:	f000 818c 	beq.w	8010a00 <uxr_read_framed_msg+0x334>
 80106e8:	7823      	ldrb	r3, [r4, #0]
 80106ea:	4dc3      	ldr	r5, [pc, #780]	; (80109f8 <uxr_read_framed_msg+0x32c>)
 80106ec:	4fc3      	ldr	r7, [pc, #780]	; (80109fc <uxr_read_framed_msg+0x330>)
 80106ee:	2b07      	cmp	r3, #7
 80106f0:	d8fd      	bhi.n	80106ee <uxr_read_framed_msg+0x22>
 80106f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80106f6:	011c      	.short	0x011c
 80106f8:	00d900fb 	.word	0x00d900fb
 80106fc:	008f00ba 	.word	0x008f00ba
 8010700:	00320051 	.word	0x00320051
 8010704:	0008      	.short	0x0008
 8010706:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801070a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801070e:	4299      	cmp	r1, r3
 8010710:	f000 814d 	beq.w	80109ae <uxr_read_framed_msg+0x2e2>
 8010714:	18e2      	adds	r2, r4, r3
 8010716:	7892      	ldrb	r2, [r2, #2]
 8010718:	2a7d      	cmp	r2, #125	; 0x7d
 801071a:	f000 81b8 	beq.w	8010a8e <uxr_read_framed_msg+0x3c2>
 801071e:	3301      	adds	r3, #1
 8010720:	212a      	movs	r1, #42	; 0x2a
 8010722:	2a7e      	cmp	r2, #126	; 0x7e
 8010724:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8010728:	fba5 c000 	umull	ip, r0, r5, r0
 801072c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8010730:	fb01 3310 	mls	r3, r1, r0, r3
 8010734:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010738:	f000 8257 	beq.w	8010bea <uxr_read_framed_msg+0x51e>
 801073c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801073e:	2000      	movs	r0, #0
 8010740:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8010742:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010746:	7020      	strb	r0, [r4, #0]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4299      	cmp	r1, r3
 801074c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801074e:	f000 8178 	beq.w	8010a42 <uxr_read_framed_msg+0x376>
 8010752:	2000      	movs	r0, #0
 8010754:	b003      	add	sp, #12
 8010756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801075e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010762:	4298      	cmp	r0, r3
 8010764:	f000 8132 	beq.w	80109cc <uxr_read_framed_msg+0x300>
 8010768:	18e2      	adds	r2, r4, r3
 801076a:	7891      	ldrb	r1, [r2, #2]
 801076c:	297d      	cmp	r1, #125	; 0x7d
 801076e:	f000 8170 	beq.w	8010a52 <uxr_read_framed_msg+0x386>
 8010772:	3301      	adds	r3, #1
 8010774:	202a      	movs	r0, #42	; 0x2a
 8010776:	297e      	cmp	r1, #126	; 0x7e
 8010778:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801077c:	fba5 c202 	umull	ip, r2, r5, r2
 8010780:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010784:	fb00 3312 	mls	r3, r0, r2, r3
 8010788:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801078c:	f000 821d 	beq.w	8010bca <uxr_read_framed_msg+0x4fe>
 8010790:	2307      	movs	r3, #7
 8010792:	86a1      	strh	r1, [r4, #52]	; 0x34
 8010794:	7023      	strb	r3, [r4, #0]
 8010796:	e7aa      	b.n	80106ee <uxr_read_framed_msg+0x22>
 8010798:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801079a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801079e:	459e      	cmp	lr, r3
 80107a0:	d827      	bhi.n	80107f2 <uxr_read_framed_msg+0x126>
 80107a2:	e032      	b.n	801080a <uxr_read_framed_msg+0x13e>
 80107a4:	fba5 b101 	umull	fp, r1, r5, r1
 80107a8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80107ac:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80107b0:	0889      	lsrs	r1, r1, #2
 80107b2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80107b6:	fb0b 0111 	mls	r1, fp, r1, r0
 80107ba:	f000 80d4 	beq.w	8010966 <uxr_read_framed_msg+0x29a>
 80107be:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80107c2:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80107c6:	f000 80cb 	beq.w	8010960 <uxr_read_framed_msg+0x294>
 80107ca:	f806 c003 	strb.w	ip, [r6, r3]
 80107ce:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80107d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80107d2:	ea80 010c 	eor.w	r1, r0, ip
 80107d6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80107da:	3301      	adds	r3, #1
 80107dc:	b2c9      	uxtb	r1, r1
 80107de:	b29b      	uxth	r3, r3
 80107e0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80107e4:	4573      	cmp	r3, lr
 80107e6:	8663      	strh	r3, [r4, #50]	; 0x32
 80107e8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80107ec:	86e2      	strh	r2, [r4, #54]	; 0x36
 80107ee:	f080 811d 	bcs.w	8010a2c <uxr_read_framed_msg+0x360>
 80107f2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80107f6:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80107fa:	1c50      	adds	r0, r2, #1
 80107fc:	eb04 0c02 	add.w	ip, r4, r2
 8010800:	4592      	cmp	sl, r2
 8010802:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8010806:	d1cd      	bne.n	80107a4 <uxr_read_framed_msg+0xd8>
 8010808:	459e      	cmp	lr, r3
 801080a:	f040 8114 	bne.w	8010a36 <uxr_read_framed_msg+0x36a>
 801080e:	2306      	movs	r3, #6
 8010810:	7023      	strb	r3, [r4, #0]
 8010812:	e76c      	b.n	80106ee <uxr_read_framed_msg+0x22>
 8010814:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010818:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801081c:	4298      	cmp	r0, r3
 801081e:	f000 80c6 	beq.w	80109ae <uxr_read_framed_msg+0x2e2>
 8010822:	18e2      	adds	r2, r4, r3
 8010824:	7891      	ldrb	r1, [r2, #2]
 8010826:	297d      	cmp	r1, #125	; 0x7d
 8010828:	f000 8193 	beq.w	8010b52 <uxr_read_framed_msg+0x486>
 801082c:	3301      	adds	r3, #1
 801082e:	202a      	movs	r0, #42	; 0x2a
 8010830:	297e      	cmp	r1, #126	; 0x7e
 8010832:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8010836:	fba5 c202 	umull	ip, r2, r5, r2
 801083a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801083e:	fb00 3312 	mls	r3, r0, r2, r3
 8010842:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010846:	f000 81d0 	beq.w	8010bea <uxr_read_framed_msg+0x51e>
 801084a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801084c:	2000      	movs	r0, #0
 801084e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010852:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010854:	8660      	strh	r0, [r4, #50]	; 0x32
 8010856:	b29b      	uxth	r3, r3
 8010858:	86e0      	strh	r0, [r4, #54]	; 0x36
 801085a:	428b      	cmp	r3, r1
 801085c:	8623      	strh	r3, [r4, #48]	; 0x30
 801085e:	f240 80e2 	bls.w	8010a26 <uxr_read_framed_msg+0x35a>
 8010862:	7020      	strb	r0, [r4, #0]
 8010864:	b003      	add	sp, #12
 8010866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801086a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801086e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010872:	4298      	cmp	r0, r3
 8010874:	f000 80aa 	beq.w	80109cc <uxr_read_framed_msg+0x300>
 8010878:	18e2      	adds	r2, r4, r3
 801087a:	7891      	ldrb	r1, [r2, #2]
 801087c:	297d      	cmp	r1, #125	; 0x7d
 801087e:	f000 8186 	beq.w	8010b8e <uxr_read_framed_msg+0x4c2>
 8010882:	3301      	adds	r3, #1
 8010884:	202a      	movs	r0, #42	; 0x2a
 8010886:	297e      	cmp	r1, #126	; 0x7e
 8010888:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801088c:	fba5 c202 	umull	ip, r2, r5, r2
 8010890:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010894:	fb00 3312 	mls	r3, r0, r2, r3
 8010898:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801089c:	f000 8195 	beq.w	8010bca <uxr_read_framed_msg+0x4fe>
 80108a0:	2304      	movs	r3, #4
 80108a2:	8621      	strh	r1, [r4, #48]	; 0x30
 80108a4:	7023      	strb	r3, [r4, #0]
 80108a6:	e722      	b.n	80106ee <uxr_read_framed_msg+0x22>
 80108a8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80108ac:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80108b0:	4290      	cmp	r0, r2
 80108b2:	f000 80b4 	beq.w	8010a1e <uxr_read_framed_msg+0x352>
 80108b6:	18a3      	adds	r3, r4, r2
 80108b8:	7899      	ldrb	r1, [r3, #2]
 80108ba:	297d      	cmp	r1, #125	; 0x7d
 80108bc:	f000 8107 	beq.w	8010ace <uxr_read_framed_msg+0x402>
 80108c0:	3201      	adds	r2, #1
 80108c2:	232a      	movs	r3, #42	; 0x2a
 80108c4:	297e      	cmp	r1, #126	; 0x7e
 80108c6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80108ca:	fba5 c000 	umull	ip, r0, r5, r0
 80108ce:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80108d2:	fb03 2210 	mls	r2, r3, r0, r2
 80108d6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80108da:	f000 818a 	beq.w	8010bf2 <uxr_read_framed_msg+0x526>
 80108de:	7863      	ldrb	r3, [r4, #1]
 80108e0:	428b      	cmp	r3, r1
 80108e2:	bf0c      	ite	eq
 80108e4:	2303      	moveq	r3, #3
 80108e6:	2300      	movne	r3, #0
 80108e8:	7023      	strb	r3, [r4, #0]
 80108ea:	e700      	b.n	80106ee <uxr_read_framed_msg+0x22>
 80108ec:	2300      	movs	r3, #0
 80108ee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80108f2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80108f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80108fa:	4299      	cmp	r1, r3
 80108fc:	d06a      	beq.n	80109d4 <uxr_read_framed_msg+0x308>
 80108fe:	18e2      	adds	r2, r4, r3
 8010900:	7890      	ldrb	r0, [r2, #2]
 8010902:	287d      	cmp	r0, #125	; 0x7d
 8010904:	f000 8100 	beq.w	8010b08 <uxr_read_framed_msg+0x43c>
 8010908:	3301      	adds	r3, #1
 801090a:	212a      	movs	r1, #42	; 0x2a
 801090c:	287e      	cmp	r0, #126	; 0x7e
 801090e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8010912:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8010916:	fba5 c202 	umull	ip, r2, r5, r2
 801091a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801091e:	fb01 3312 	mls	r3, r1, r2, r3
 8010922:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010926:	d055      	beq.n	80109d4 <uxr_read_framed_msg+0x308>
 8010928:	2302      	movs	r3, #2
 801092a:	7023      	strb	r3, [r4, #0]
 801092c:	e6df      	b.n	80106ee <uxr_read_framed_msg+0x22>
 801092e:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8010932:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8010936:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	459c      	cmp	ip, r3
 801093e:	eb04 0103 	add.w	r1, r4, r3
 8010942:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8010946:	f43f af04 	beq.w	8010752 <uxr_read_framed_msg+0x86>
 801094a:	fba5 0303 	umull	r0, r3, r5, r3
 801094e:	7889      	ldrb	r1, [r1, #2]
 8010950:	089b      	lsrs	r3, r3, #2
 8010952:	297e      	cmp	r1, #126	; 0x7e
 8010954:	fb0e 2313 	mls	r3, lr, r3, r2
 8010958:	b2db      	uxtb	r3, r3
 801095a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801095e:	d1ec      	bne.n	801093a <uxr_read_framed_msg+0x26e>
 8010960:	2301      	movs	r3, #1
 8010962:	7023      	strb	r3, [r4, #0]
 8010964:	e6c3      	b.n	80106ee <uxr_read_framed_msg+0x22>
 8010966:	1c50      	adds	r0, r2, #1
 8010968:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801096c:	3202      	adds	r2, #2
 801096e:	0841      	lsrs	r1, r0, #1
 8010970:	fba5 c101 	umull	ip, r1, r5, r1
 8010974:	0889      	lsrs	r1, r1, #2
 8010976:	fb0b 0111 	mls	r1, fp, r1, r0
 801097a:	1860      	adds	r0, r4, r1
 801097c:	b2c9      	uxtb	r1, r1
 801097e:	458a      	cmp	sl, r1
 8010980:	f43f af42 	beq.w	8010808 <uxr_read_framed_msg+0x13c>
 8010984:	0851      	lsrs	r1, r2, #1
 8010986:	7880      	ldrb	r0, [r0, #2]
 8010988:	fba5 a101 	umull	sl, r1, r5, r1
 801098c:	287e      	cmp	r0, #126	; 0x7e
 801098e:	f080 0c20 	eor.w	ip, r0, #32
 8010992:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8010996:	fb0b 2211 	mls	r2, fp, r1, r2
 801099a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801099e:	f47f af14 	bne.w	80107ca <uxr_read_framed_msg+0xfe>
 80109a2:	459e      	cmp	lr, r3
 80109a4:	f43f af33 	beq.w	801080e <uxr_read_framed_msg+0x142>
 80109a8:	2301      	movs	r3, #1
 80109aa:	7023      	strb	r3, [r4, #0]
 80109ac:	e69f      	b.n	80106ee <uxr_read_framed_msg+0x22>
 80109ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	2301      	movs	r3, #1
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	464a      	mov	r2, r9
 80109b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109ba:	4641      	mov	r1, r8
 80109bc:	4620      	mov	r0, r4
 80109be:	f7ff fdf1 	bl	80105a4 <uxr_framing_read_transport>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	f43f aec5 	beq.w	8010752 <uxr_read_framed_msg+0x86>
 80109c8:	7823      	ldrb	r3, [r4, #0]
 80109ca:	e690      	b.n	80106ee <uxr_read_framed_msg+0x22>
 80109cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	2302      	movs	r3, #2
 80109d2:	e7ef      	b.n	80109b4 <uxr_read_framed_msg+0x2e8>
 80109d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109d6:	464a      	mov	r2, r9
 80109d8:	4641      	mov	r1, r8
 80109da:	4620      	mov	r0, r4
 80109dc:	9300      	str	r3, [sp, #0]
 80109de:	2304      	movs	r3, #4
 80109e0:	9301      	str	r3, [sp, #4]
 80109e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109e4:	f7ff fdde 	bl	80105a4 <uxr_framing_read_transport>
 80109e8:	2800      	cmp	r0, #0
 80109ea:	d1ed      	bne.n	80109c8 <uxr_read_framed_msg+0x2fc>
 80109ec:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80109f0:	2b7e      	cmp	r3, #126	; 0x7e
 80109f2:	d0e9      	beq.n	80109c8 <uxr_read_framed_msg+0x2fc>
 80109f4:	e6ad      	b.n	8010752 <uxr_read_framed_msg+0x86>
 80109f6:	bf00      	nop
 80109f8:	30c30c31 	.word	0x30c30c31
 80109fc:	0801523c 	.word	0x0801523c
 8010a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a02:	9300      	str	r3, [sp, #0]
 8010a04:	2305      	movs	r3, #5
 8010a06:	9301      	str	r3, [sp, #4]
 8010a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a0a:	f7ff fdcb 	bl	80105a4 <uxr_framing_read_transport>
 8010a0e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010a12:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010a16:	429a      	cmp	r2, r3
 8010a18:	f43f ae9b 	beq.w	8010752 <uxr_read_framed_msg+0x86>
 8010a1c:	e664      	b.n	80106e8 <uxr_read_framed_msg+0x1c>
 8010a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a20:	9300      	str	r3, [sp, #0]
 8010a22:	2303      	movs	r3, #3
 8010a24:	e7c6      	b.n	80109b4 <uxr_read_framed_msg+0x2e8>
 8010a26:	2305      	movs	r3, #5
 8010a28:	7023      	strb	r3, [r4, #0]
 8010a2a:	e660      	b.n	80106ee <uxr_read_framed_msg+0x22>
 8010a2c:	f43f aeef 	beq.w	801080e <uxr_read_framed_msg+0x142>
 8010a30:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8010a34:	d094      	beq.n	8010960 <uxr_read_framed_msg+0x294>
 8010a36:	ebae 0303 	sub.w	r3, lr, r3
 8010a3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a3c:	3302      	adds	r3, #2
 8010a3e:	9200      	str	r2, [sp, #0]
 8010a40:	e7b8      	b.n	80109b4 <uxr_read_framed_msg+0x2e8>
 8010a42:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a48:	7013      	strb	r3, [r2, #0]
 8010a4a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8010a4c:	b003      	add	sp, #12
 8010a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a52:	1c59      	adds	r1, r3, #1
 8010a54:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010a58:	084a      	lsrs	r2, r1, #1
 8010a5a:	fba5 e202 	umull	lr, r2, r5, r2
 8010a5e:	0892      	lsrs	r2, r2, #2
 8010a60:	fb0c 1212 	mls	r2, ip, r2, r1
 8010a64:	b2d1      	uxtb	r1, r2
 8010a66:	4288      	cmp	r0, r1
 8010a68:	d0b0      	beq.n	80109cc <uxr_read_framed_msg+0x300>
 8010a6a:	3302      	adds	r3, #2
 8010a6c:	4422      	add	r2, r4
 8010a6e:	7891      	ldrb	r1, [r2, #2]
 8010a70:	085a      	lsrs	r2, r3, #1
 8010a72:	fba5 0202 	umull	r0, r2, r5, r2
 8010a76:	297e      	cmp	r1, #126	; 0x7e
 8010a78:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010a7c:	fb0c 3312 	mls	r3, ip, r2, r3
 8010a80:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010a84:	f000 80a1 	beq.w	8010bca <uxr_read_framed_msg+0x4fe>
 8010a88:	f081 0120 	eor.w	r1, r1, #32
 8010a8c:	e680      	b.n	8010790 <uxr_read_framed_msg+0xc4>
 8010a8e:	f103 0c01 	add.w	ip, r3, #1
 8010a92:	202a      	movs	r0, #42	; 0x2a
 8010a94:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010a98:	fba5 e202 	umull	lr, r2, r5, r2
 8010a9c:	0892      	lsrs	r2, r2, #2
 8010a9e:	fb00 c212 	mls	r2, r0, r2, ip
 8010aa2:	fa5f fc82 	uxtb.w	ip, r2
 8010aa6:	4561      	cmp	r1, ip
 8010aa8:	d081      	beq.n	80109ae <uxr_read_framed_msg+0x2e2>
 8010aaa:	3302      	adds	r3, #2
 8010aac:	4422      	add	r2, r4
 8010aae:	0859      	lsrs	r1, r3, #1
 8010ab0:	7892      	ldrb	r2, [r2, #2]
 8010ab2:	fba5 c101 	umull	ip, r1, r5, r1
 8010ab6:	2a7e      	cmp	r2, #126	; 0x7e
 8010ab8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8010abc:	fb00 3311 	mls	r3, r0, r1, r3
 8010ac0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010ac4:	f000 8091 	beq.w	8010bea <uxr_read_framed_msg+0x51e>
 8010ac8:	f082 0220 	eor.w	r2, r2, #32
 8010acc:	e636      	b.n	801073c <uxr_read_framed_msg+0x70>
 8010ace:	1c51      	adds	r1, r2, #1
 8010ad0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010ad4:	084b      	lsrs	r3, r1, #1
 8010ad6:	fba5 e303 	umull	lr, r3, r5, r3
 8010ada:	089b      	lsrs	r3, r3, #2
 8010adc:	fb0c 1313 	mls	r3, ip, r3, r1
 8010ae0:	b2d9      	uxtb	r1, r3
 8010ae2:	4288      	cmp	r0, r1
 8010ae4:	d09b      	beq.n	8010a1e <uxr_read_framed_msg+0x352>
 8010ae6:	3202      	adds	r2, #2
 8010ae8:	4423      	add	r3, r4
 8010aea:	0850      	lsrs	r0, r2, #1
 8010aec:	789b      	ldrb	r3, [r3, #2]
 8010aee:	fba5 1000 	umull	r1, r0, r5, r0
 8010af2:	2b7e      	cmp	r3, #126	; 0x7e
 8010af4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8010af8:	fb0c 2210 	mls	r2, ip, r0, r2
 8010afc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010b00:	d077      	beq.n	8010bf2 <uxr_read_framed_msg+0x526>
 8010b02:	f083 0120 	eor.w	r1, r3, #32
 8010b06:	e6ea      	b.n	80108de <uxr_read_framed_msg+0x212>
 8010b08:	f103 0c01 	add.w	ip, r3, #1
 8010b0c:	202a      	movs	r0, #42	; 0x2a
 8010b0e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010b12:	fba5 e202 	umull	lr, r2, r5, r2
 8010b16:	0892      	lsrs	r2, r2, #2
 8010b18:	fb00 c212 	mls	r2, r0, r2, ip
 8010b1c:	fa5f fc82 	uxtb.w	ip, r2
 8010b20:	4561      	cmp	r1, ip
 8010b22:	f43f af57 	beq.w	80109d4 <uxr_read_framed_msg+0x308>
 8010b26:	3302      	adds	r3, #2
 8010b28:	4422      	add	r2, r4
 8010b2a:	7891      	ldrb	r1, [r2, #2]
 8010b2c:	085a      	lsrs	r2, r3, #1
 8010b2e:	fba5 c202 	umull	ip, r2, r5, r2
 8010b32:	297e      	cmp	r1, #126	; 0x7e
 8010b34:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8010b38:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010b3c:	fb00 3312 	mls	r3, r0, r2, r3
 8010b40:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010b44:	f43f af46 	beq.w	80109d4 <uxr_read_framed_msg+0x308>
 8010b48:	f081 0120 	eor.w	r1, r1, #32
 8010b4c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8010b50:	e6ea      	b.n	8010928 <uxr_read_framed_msg+0x25c>
 8010b52:	1c59      	adds	r1, r3, #1
 8010b54:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010b58:	084a      	lsrs	r2, r1, #1
 8010b5a:	fba5 e202 	umull	lr, r2, r5, r2
 8010b5e:	0892      	lsrs	r2, r2, #2
 8010b60:	fb0c 1212 	mls	r2, ip, r2, r1
 8010b64:	b2d1      	uxtb	r1, r2
 8010b66:	4288      	cmp	r0, r1
 8010b68:	f43f af21 	beq.w	80109ae <uxr_read_framed_msg+0x2e2>
 8010b6c:	3302      	adds	r3, #2
 8010b6e:	4422      	add	r2, r4
 8010b70:	7891      	ldrb	r1, [r2, #2]
 8010b72:	085a      	lsrs	r2, r3, #1
 8010b74:	fba5 0202 	umull	r0, r2, r5, r2
 8010b78:	297e      	cmp	r1, #126	; 0x7e
 8010b7a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010b7e:	fb0c 3312 	mls	r3, ip, r2, r3
 8010b82:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010b86:	d030      	beq.n	8010bea <uxr_read_framed_msg+0x51e>
 8010b88:	f081 0120 	eor.w	r1, r1, #32
 8010b8c:	e65d      	b.n	801084a <uxr_read_framed_msg+0x17e>
 8010b8e:	1c59      	adds	r1, r3, #1
 8010b90:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010b94:	084a      	lsrs	r2, r1, #1
 8010b96:	fba5 e202 	umull	lr, r2, r5, r2
 8010b9a:	0892      	lsrs	r2, r2, #2
 8010b9c:	fb0c 1212 	mls	r2, ip, r2, r1
 8010ba0:	b2d1      	uxtb	r1, r2
 8010ba2:	4288      	cmp	r0, r1
 8010ba4:	f43f af12 	beq.w	80109cc <uxr_read_framed_msg+0x300>
 8010ba8:	3302      	adds	r3, #2
 8010baa:	4422      	add	r2, r4
 8010bac:	7891      	ldrb	r1, [r2, #2]
 8010bae:	085a      	lsrs	r2, r3, #1
 8010bb0:	fba5 0202 	umull	r0, r2, r5, r2
 8010bb4:	297e      	cmp	r1, #126	; 0x7e
 8010bb6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010bba:	fb0c 3312 	mls	r3, ip, r2, r3
 8010bbe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010bc2:	d002      	beq.n	8010bca <uxr_read_framed_msg+0x4fe>
 8010bc4:	f081 0120 	eor.w	r1, r1, #32
 8010bc8:	e66a      	b.n	80108a0 <uxr_read_framed_msg+0x1d4>
 8010bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	2302      	movs	r3, #2
 8010bd0:	9301      	str	r3, [sp, #4]
 8010bd2:	464a      	mov	r2, r9
 8010bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bd6:	4641      	mov	r1, r8
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f7ff fce3 	bl	80105a4 <uxr_framing_read_transport>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	f47f aef2 	bne.w	80109c8 <uxr_read_framed_msg+0x2fc>
 8010be4:	2301      	movs	r3, #1
 8010be6:	7023      	strb	r3, [r4, #0]
 8010be8:	e581      	b.n	80106ee <uxr_read_framed_msg+0x22>
 8010bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e7ee      	b.n	8010bd0 <uxr_read_framed_msg+0x504>
 8010bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	2303      	movs	r3, #3
 8010bf8:	e7ea      	b.n	8010bd0 <uxr_read_framed_msg+0x504>
 8010bfa:	bf00      	nop

08010bfc <rcl_get_automatic_discovery_range>:
 8010bfc:	b530      	push	{r4, r5, lr}
 8010bfe:	2300      	movs	r3, #0
 8010c00:	b083      	sub	sp, #12
 8010c02:	9301      	str	r3, [sp, #4]
 8010c04:	b1c0      	cbz	r0, 8010c38 <rcl_get_automatic_discovery_range+0x3c>
 8010c06:	4604      	mov	r4, r0
 8010c08:	a901      	add	r1, sp, #4
 8010c0a:	4818      	ldr	r0, [pc, #96]	; (8010c6c <rcl_get_automatic_discovery_range+0x70>)
 8010c0c:	f7fd f98a 	bl	800df24 <rcutils_get_env>
 8010c10:	b110      	cbz	r0, 8010c18 <rcl_get_automatic_discovery_range+0x1c>
 8010c12:	2001      	movs	r0, #1
 8010c14:	b003      	add	sp, #12
 8010c16:	bd30      	pop	{r4, r5, pc}
 8010c18:	9d01      	ldr	r5, [sp, #4]
 8010c1a:	782b      	ldrb	r3, [r5, #0]
 8010c1c:	b13b      	cbz	r3, 8010c2e <rcl_get_automatic_discovery_range+0x32>
 8010c1e:	4914      	ldr	r1, [pc, #80]	; (8010c70 <rcl_get_automatic_discovery_range+0x74>)
 8010c20:	4628      	mov	r0, r5
 8010c22:	f7ef fb5d 	bl	80002e0 <strcmp>
 8010c26:	b950      	cbnz	r0, 8010c3e <rcl_get_automatic_discovery_range+0x42>
 8010c28:	2301      	movs	r3, #1
 8010c2a:	7023      	strb	r3, [r4, #0]
 8010c2c:	e7f2      	b.n	8010c14 <rcl_get_automatic_discovery_range+0x18>
 8010c2e:	2303      	movs	r3, #3
 8010c30:	2000      	movs	r0, #0
 8010c32:	7023      	strb	r3, [r4, #0]
 8010c34:	b003      	add	sp, #12
 8010c36:	bd30      	pop	{r4, r5, pc}
 8010c38:	200b      	movs	r0, #11
 8010c3a:	b003      	add	sp, #12
 8010c3c:	bd30      	pop	{r4, r5, pc}
 8010c3e:	490d      	ldr	r1, [pc, #52]	; (8010c74 <rcl_get_automatic_discovery_range+0x78>)
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7ef fb4d 	bl	80002e0 <strcmp>
 8010c46:	b168      	cbz	r0, 8010c64 <rcl_get_automatic_discovery_range+0x68>
 8010c48:	490b      	ldr	r1, [pc, #44]	; (8010c78 <rcl_get_automatic_discovery_range+0x7c>)
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f7ef fb48 	bl	80002e0 <strcmp>
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d0ec      	beq.n	8010c2e <rcl_get_automatic_discovery_range+0x32>
 8010c54:	4909      	ldr	r1, [pc, #36]	; (8010c7c <rcl_get_automatic_discovery_range+0x80>)
 8010c56:	4628      	mov	r0, r5
 8010c58:	f7ef fb42 	bl	80002e0 <strcmp>
 8010c5c:	b910      	cbnz	r0, 8010c64 <rcl_get_automatic_discovery_range+0x68>
 8010c5e:	2304      	movs	r3, #4
 8010c60:	7023      	strb	r3, [r4, #0]
 8010c62:	e7d7      	b.n	8010c14 <rcl_get_automatic_discovery_range+0x18>
 8010c64:	2302      	movs	r3, #2
 8010c66:	2000      	movs	r0, #0
 8010c68:	7023      	strb	r3, [r4, #0]
 8010c6a:	e7d3      	b.n	8010c14 <rcl_get_automatic_discovery_range+0x18>
 8010c6c:	0801543c 	.word	0x0801543c
 8010c70:	0801545c 	.word	0x0801545c
 8010c74:	08015460 	.word	0x08015460
 8010c78:	0801546c 	.word	0x0801546c
 8010c7c:	08015474 	.word	0x08015474

08010c80 <rcl_automatic_discovery_range_to_string>:
 8010c80:	2804      	cmp	r0, #4
 8010c82:	d803      	bhi.n	8010c8c <rcl_automatic_discovery_range_to_string+0xc>
 8010c84:	4b02      	ldr	r3, [pc, #8]	; (8010c90 <rcl_automatic_discovery_range_to_string+0x10>)
 8010c86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8010c8a:	4770      	bx	lr
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	4770      	bx	lr
 8010c90:	08015564 	.word	0x08015564

08010c94 <rcl_get_discovery_static_peers>:
 8010c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c98:	2300      	movs	r3, #0
 8010c9a:	b08e      	sub	sp, #56	; 0x38
 8010c9c:	9306      	str	r3, [sp, #24]
 8010c9e:	2900      	cmp	r1, #0
 8010ca0:	d04b      	beq.n	8010d3a <rcl_get_discovery_static_peers+0xa6>
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d048      	beq.n	8010d3a <rcl_get_discovery_static_peers+0xa6>
 8010ca8:	460c      	mov	r4, r1
 8010caa:	482c      	ldr	r0, [pc, #176]	; (8010d5c <rcl_get_discovery_static_peers+0xc8>)
 8010cac:	a906      	add	r1, sp, #24
 8010cae:	f7fd f939 	bl	800df24 <rcutils_get_env>
 8010cb2:	b118      	cbz	r0, 8010cbc <rcl_get_discovery_static_peers+0x28>
 8010cb4:	2001      	movs	r0, #1
 8010cb6:	b00e      	add	sp, #56	; 0x38
 8010cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cbc:	9b06      	ldr	r3, [sp, #24]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d0f8      	beq.n	8010cb4 <rcl_get_discovery_static_peers+0x20>
 8010cc2:	af07      	add	r7, sp, #28
 8010cc4:	4638      	mov	r0, r7
 8010cc6:	f000 fc0f 	bl	80114e8 <rcutils_get_zero_initialized_string_array>
 8010cca:	f104 0308 	add.w	r3, r4, #8
 8010cce:	9703      	str	r7, [sp, #12]
 8010cd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010cd4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010cd8:	213b      	movs	r1, #59	; 0x3b
 8010cda:	9806      	ldr	r0, [sp, #24]
 8010cdc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010ce0:	f000 fb44 	bl	801136c <rcutils_split>
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d1e5      	bne.n	8010cb4 <rcl_get_discovery_static_peers+0x20>
 8010ce8:	4622      	mov	r2, r4
 8010cea:	9907      	ldr	r1, [sp, #28]
 8010cec:	4628      	mov	r0, r5
 8010cee:	f000 fc4b 	bl	8011588 <rmw_discovery_options_init>
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	bb78      	cbnz	r0, 8010d56 <rcl_get_discovery_static_peers+0xc2>
 8010cf6:	9e07      	ldr	r6, [sp, #28]
 8010cf8:	b336      	cbz	r6, 8010d48 <rcl_get_discovery_static_peers+0xb4>
 8010cfa:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010cfe:	4680      	mov	r8, r0
 8010d00:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8010d04:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8010d08:	4608      	mov	r0, r1
 8010d0a:	9105      	str	r1, [sp, #20]
 8010d0c:	f7ef faf2 	bl	80002f4 <strlen>
 8010d10:	28ff      	cmp	r0, #255	; 0xff
 8010d12:	9905      	ldr	r1, [sp, #20]
 8010d14:	d815      	bhi.n	8010d42 <rcl_get_discovery_static_peers+0xae>
 8010d16:	6868      	ldr	r0, [r5, #4]
 8010d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010d1c:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8010d20:	3401      	adds	r4, #1
 8010d22:	f001 fc84 	bl	801262e <strncpy>
 8010d26:	686b      	ldr	r3, [r5, #4]
 8010d28:	9e07      	ldr	r6, [sp, #28]
 8010d2a:	444b      	add	r3, r9
 8010d2c:	42b4      	cmp	r4, r6
 8010d2e:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 8010d32:	d209      	bcs.n	8010d48 <rcl_get_discovery_static_peers+0xb4>
 8010d34:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010d38:	e7e2      	b.n	8010d00 <rcl_get_discovery_static_peers+0x6c>
 8010d3a:	200b      	movs	r0, #11
 8010d3c:	b00e      	add	sp, #56	; 0x38
 8010d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d42:	3401      	adds	r4, #1
 8010d44:	42b4      	cmp	r4, r6
 8010d46:	d3db      	bcc.n	8010d00 <rcl_get_discovery_static_peers+0x6c>
 8010d48:	4638      	mov	r0, r7
 8010d4a:	f000 fbeb 	bl	8011524 <rcutils_string_array_fini>
 8010d4e:	3800      	subs	r0, #0
 8010d50:	bf18      	it	ne
 8010d52:	2001      	movne	r0, #1
 8010d54:	e7af      	b.n	8010cb6 <rcl_get_discovery_static_peers+0x22>
 8010d56:	f7fc f939 	bl	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>
 8010d5a:	e7ac      	b.n	8010cb6 <rcl_get_discovery_static_peers+0x22>
 8010d5c:	08015484 	.word	0x08015484

08010d60 <rcl_get_default_domain_id>:
 8010d60:	b530      	push	{r4, r5, lr}
 8010d62:	2300      	movs	r3, #0
 8010d64:	b083      	sub	sp, #12
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	b1d0      	cbz	r0, 8010da0 <rcl_get_default_domain_id+0x40>
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	4669      	mov	r1, sp
 8010d6e:	4815      	ldr	r0, [pc, #84]	; (8010dc4 <rcl_get_default_domain_id+0x64>)
 8010d70:	f7fd f8d8 	bl	800df24 <rcutils_get_env>
 8010d74:	4602      	mov	r2, r0
 8010d76:	b110      	cbz	r0, 8010d7e <rcl_get_default_domain_id+0x1e>
 8010d78:	2001      	movs	r0, #1
 8010d7a:	b003      	add	sp, #12
 8010d7c:	bd30      	pop	{r4, r5, pc}
 8010d7e:	9b00      	ldr	r3, [sp, #0]
 8010d80:	b18b      	cbz	r3, 8010da6 <rcl_get_default_domain_id+0x46>
 8010d82:	7818      	ldrb	r0, [r3, #0]
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d0f8      	beq.n	8010d7a <rcl_get_default_domain_id+0x1a>
 8010d88:	a901      	add	r1, sp, #4
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	9201      	str	r2, [sp, #4]
 8010d8e:	f001 fce9 	bl	8012764 <strtoul>
 8010d92:	4605      	mov	r5, r0
 8010d94:	b150      	cbz	r0, 8010dac <rcl_get_default_domain_id+0x4c>
 8010d96:	1c43      	adds	r3, r0, #1
 8010d98:	d00d      	beq.n	8010db6 <rcl_get_default_domain_id+0x56>
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	6025      	str	r5, [r4, #0]
 8010d9e:	e7ec      	b.n	8010d7a <rcl_get_default_domain_id+0x1a>
 8010da0:	200b      	movs	r0, #11
 8010da2:	b003      	add	sp, #12
 8010da4:	bd30      	pop	{r4, r5, pc}
 8010da6:	4618      	mov	r0, r3
 8010da8:	b003      	add	sp, #12
 8010daa:	bd30      	pop	{r4, r5, pc}
 8010dac:	9b01      	ldr	r3, [sp, #4]
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d0f2      	beq.n	8010d9a <rcl_get_default_domain_id+0x3a>
 8010db4:	e7e0      	b.n	8010d78 <rcl_get_default_domain_id+0x18>
 8010db6:	f000 fd71 	bl	801189c <__errno>
 8010dba:	6803      	ldr	r3, [r0, #0]
 8010dbc:	2b22      	cmp	r3, #34	; 0x22
 8010dbe:	d1ec      	bne.n	8010d9a <rcl_get_default_domain_id+0x3a>
 8010dc0:	e7da      	b.n	8010d78 <rcl_get_default_domain_id+0x18>
 8010dc2:	bf00      	nop
 8010dc4:	08015578 	.word	0x08015578

08010dc8 <rcl_expand_topic_name>:
 8010dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dcc:	b08d      	sub	sp, #52	; 0x34
 8010dce:	4698      	mov	r8, r3
 8010dd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010dd2:	9207      	str	r2, [sp, #28]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	bf18      	it	ne
 8010dd8:	f1b8 0f00 	cmpne.w	r8, #0
 8010ddc:	bf0c      	ite	eq
 8010dde:	2301      	moveq	r3, #1
 8010de0:	2300      	movne	r3, #0
 8010de2:	2a00      	cmp	r2, #0
 8010de4:	bf08      	it	eq
 8010de6:	f043 0301 	orreq.w	r3, r3, #1
 8010dea:	2900      	cmp	r1, #0
 8010dec:	bf08      	it	eq
 8010dee:	f043 0301 	orreq.w	r3, r3, #1
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d13d      	bne.n	8010e72 <rcl_expand_topic_name+0xaa>
 8010df6:	fab0 f280 	clz	r2, r0
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	0952      	lsrs	r2, r2, #5
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d037      	beq.n	8010e72 <rcl_expand_topic_name+0xaa>
 8010e02:	460f      	mov	r7, r1
 8010e04:	a90b      	add	r1, sp, #44	; 0x2c
 8010e06:	f000 f9ed 	bl	80111e4 <rcl_validate_topic_name>
 8010e0a:	4605      	mov	r5, r0
 8010e0c:	bb68      	cbnz	r0, 8010e6a <rcl_expand_topic_name+0xa2>
 8010e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d137      	bne.n	8010e84 <rcl_expand_topic_name+0xbc>
 8010e14:	4602      	mov	r2, r0
 8010e16:	a90b      	add	r1, sp, #44	; 0x2c
 8010e18:	4638      	mov	r0, r7
 8010e1a:	f7fd fc9b 	bl	800e754 <rmw_validate_node_name>
 8010e1e:	bb68      	cbnz	r0, 8010e7c <rcl_expand_topic_name+0xb4>
 8010e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d133      	bne.n	8010e8e <rcl_expand_topic_name+0xc6>
 8010e26:	462a      	mov	r2, r5
 8010e28:	a90b      	add	r1, sp, #44	; 0x2c
 8010e2a:	9807      	ldr	r0, [sp, #28]
 8010e2c:	f7fd fc74 	bl	800e718 <rmw_validate_namespace>
 8010e30:	bb20      	cbnz	r0, 8010e7c <rcl_expand_topic_name+0xb4>
 8010e32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010e34:	2d00      	cmp	r5, #0
 8010e36:	f040 80a2 	bne.w	8010f7e <rcl_expand_topic_name+0x1b6>
 8010e3a:	217b      	movs	r1, #123	; 0x7b
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f001 fbcd 	bl	80125dc <strchr>
 8010e42:	7823      	ldrb	r3, [r4, #0]
 8010e44:	4681      	mov	r9, r0
 8010e46:	bb20      	cbnz	r0, 8010e92 <rcl_expand_topic_name+0xca>
 8010e48:	2b2f      	cmp	r3, #47	; 0x2f
 8010e4a:	d122      	bne.n	8010e92 <rcl_expand_topic_name+0xca>
 8010e4c:	ab19      	add	r3, sp, #100	; 0x64
 8010e4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e52:	ab16      	add	r3, sp, #88	; 0x58
 8010e54:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010e58:	4620      	mov	r0, r4
 8010e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e5c:	f7fd f9c4 	bl	800e1e8 <rcutils_strdup>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e64:	bf08      	it	eq
 8010e66:	250a      	moveq	r5, #10
 8010e68:	6018      	str	r0, [r3, #0]
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	b00d      	add	sp, #52	; 0x34
 8010e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e72:	250b      	movs	r5, #11
 8010e74:	4628      	mov	r0, r5
 8010e76:	b00d      	add	sp, #52	; 0x34
 8010e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7c:	f7fc f8a6 	bl	800cfcc <rcl_convert_rmw_ret_to_rcl_ret>
 8010e80:	4605      	mov	r5, r0
 8010e82:	e7f2      	b.n	8010e6a <rcl_expand_topic_name+0xa2>
 8010e84:	2567      	movs	r5, #103	; 0x67
 8010e86:	4628      	mov	r0, r5
 8010e88:	b00d      	add	sp, #52	; 0x34
 8010e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8e:	25c9      	movs	r5, #201	; 0xc9
 8010e90:	e7eb      	b.n	8010e6a <rcl_expand_topic_name+0xa2>
 8010e92:	2b7e      	cmp	r3, #126	; 0x7e
 8010e94:	d075      	beq.n	8010f82 <rcl_expand_topic_name+0x1ba>
 8010e96:	f1b9 0f00 	cmp.w	r9, #0
 8010e9a:	f000 80c2 	beq.w	8011022 <rcl_expand_topic_name+0x25a>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	46a2      	mov	sl, r4
 8010ea2:	461e      	mov	r6, r3
 8010ea4:	9508      	str	r5, [sp, #32]
 8010ea6:	4655      	mov	r5, sl
 8010ea8:	9409      	str	r4, [sp, #36]	; 0x24
 8010eaa:	46b2      	mov	sl, r6
 8010eac:	464c      	mov	r4, r9
 8010eae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8010eb2:	2c00      	cmp	r4, #0
 8010eb4:	f000 80ae 	beq.w	8011014 <rcl_expand_topic_name+0x24c>
 8010eb8:	217d      	movs	r1, #125	; 0x7d
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f001 fb8e 	bl	80125dc <strchr>
 8010ec0:	eba0 0904 	sub.w	r9, r0, r4
 8010ec4:	4621      	mov	r1, r4
 8010ec6:	4869      	ldr	r0, [pc, #420]	; (801106c <rcl_expand_topic_name+0x2a4>)
 8010ec8:	f109 0601 	add.w	r6, r9, #1
 8010ecc:	4632      	mov	r2, r6
 8010ece:	f001 fb9a 	bl	8012606 <strncmp>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d051      	beq.n	8010f7a <rcl_expand_topic_name+0x1b2>
 8010ed6:	4632      	mov	r2, r6
 8010ed8:	4621      	mov	r1, r4
 8010eda:	4865      	ldr	r0, [pc, #404]	; (8011070 <rcl_expand_topic_name+0x2a8>)
 8010edc:	f001 fb93 	bl	8012606 <strncmp>
 8010ee0:	b128      	cbz	r0, 8010eee <rcl_expand_topic_name+0x126>
 8010ee2:	4632      	mov	r2, r6
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4863      	ldr	r0, [pc, #396]	; (8011074 <rcl_expand_topic_name+0x2ac>)
 8010ee8:	f001 fb8d 	bl	8012606 <strncmp>
 8010eec:	bb38      	cbnz	r0, 8010f3e <rcl_expand_topic_name+0x176>
 8010eee:	46d9      	mov	r9, fp
 8010ef0:	ab18      	add	r3, sp, #96	; 0x60
 8010ef2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010ef6:	ab16      	add	r3, sp, #88	; 0x58
 8010ef8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010efc:	4620      	mov	r0, r4
 8010efe:	4631      	mov	r1, r6
 8010f00:	cb0c      	ldmia	r3, {r2, r3}
 8010f02:	f7fd f997 	bl	800e234 <rcutils_strndup>
 8010f06:	4604      	mov	r4, r0
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	f000 80a3 	beq.w	8011054 <rcl_expand_topic_name+0x28c>
 8010f0e:	464a      	mov	r2, r9
 8010f10:	4628      	mov	r0, r5
 8010f12:	ab16      	add	r3, sp, #88	; 0x58
 8010f14:	4621      	mov	r1, r4
 8010f16:	f7fd f867 	bl	800dfe8 <rcutils_repl_str>
 8010f1a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010f1c:	4605      	mov	r5, r0
 8010f1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f20:	4620      	mov	r0, r4
 8010f22:	4798      	blx	r3
 8010f24:	4650      	mov	r0, sl
 8010f26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f28:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010f2a:	4798      	blx	r3
 8010f2c:	2d00      	cmp	r5, #0
 8010f2e:	d06c      	beq.n	801100a <rcl_expand_topic_name+0x242>
 8010f30:	217b      	movs	r1, #123	; 0x7b
 8010f32:	4628      	mov	r0, r5
 8010f34:	f001 fb52 	bl	80125dc <strchr>
 8010f38:	46aa      	mov	sl, r5
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	e7b9      	b.n	8010eb2 <rcl_expand_topic_name+0xea>
 8010f3e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8010f42:	1c61      	adds	r1, r4, #1
 8010f44:	4640      	mov	r0, r8
 8010f46:	f7fd fa71 	bl	800e42c <rcutils_string_map_getn>
 8010f4a:	4681      	mov	r9, r0
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d1cf      	bne.n	8010ef0 <rcl_expand_topic_name+0x128>
 8010f50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f52:	aa18      	add	r2, sp, #96	; 0x60
 8010f54:	2569      	movs	r5, #105	; 0x69
 8010f56:	6018      	str	r0, [r3, #0]
 8010f58:	ab16      	add	r3, sp, #88	; 0x58
 8010f5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8010f5c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010f60:	4631      	mov	r1, r6
 8010f62:	4620      	mov	r0, r4
 8010f64:	cb0c      	ldmia	r3, {r2, r3}
 8010f66:	f7fd f965 	bl	800e234 <rcutils_strndup>
 8010f6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f6e:	4798      	blx	r3
 8010f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010f72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010f74:	4650      	mov	r0, sl
 8010f76:	4798      	blx	r3
 8010f78:	e777      	b.n	8010e6a <rcl_expand_topic_name+0xa2>
 8010f7a:	46b9      	mov	r9, r7
 8010f7c:	e7b8      	b.n	8010ef0 <rcl_expand_topic_name+0x128>
 8010f7e:	25ca      	movs	r5, #202	; 0xca
 8010f80:	e773      	b.n	8010e6a <rcl_expand_topic_name+0xa2>
 8010f82:	9e07      	ldr	r6, [sp, #28]
 8010f84:	4630      	mov	r0, r6
 8010f86:	f7ef f9b5 	bl	80002f4 <strlen>
 8010f8a:	4a3b      	ldr	r2, [pc, #236]	; (8011078 <rcl_expand_topic_name+0x2b0>)
 8010f8c:	4b3b      	ldr	r3, [pc, #236]	; (801107c <rcl_expand_topic_name+0x2b4>)
 8010f8e:	9603      	str	r6, [sp, #12]
 8010f90:	2801      	cmp	r0, #1
 8010f92:	bf18      	it	ne
 8010f94:	4613      	movne	r3, r2
 8010f96:	9704      	str	r7, [sp, #16]
 8010f98:	9302      	str	r3, [sp, #8]
 8010f9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010f9c:	9300      	str	r3, [sp, #0]
 8010f9e:	1c63      	adds	r3, r4, #1
 8010fa0:	9305      	str	r3, [sp, #20]
 8010fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010fa6:	9301      	str	r3, [sp, #4]
 8010fa8:	ab16      	add	r3, sp, #88	; 0x58
 8010faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010fac:	f7fc ffe2 	bl	800df74 <rcutils_format_string_limit>
 8010fb0:	4606      	mov	r6, r0
 8010fb2:	b350      	cbz	r0, 801100a <rcl_expand_topic_name+0x242>
 8010fb4:	f1b9 0f00 	cmp.w	r9, #0
 8010fb8:	d005      	beq.n	8010fc6 <rcl_expand_topic_name+0x1fe>
 8010fba:	217b      	movs	r1, #123	; 0x7b
 8010fbc:	46b2      	mov	sl, r6
 8010fbe:	f001 fb0d 	bl	80125dc <strchr>
 8010fc2:	4681      	mov	r9, r0
 8010fc4:	e76e      	b.n	8010ea4 <rcl_expand_topic_name+0xdc>
 8010fc6:	7833      	ldrb	r3, [r6, #0]
 8010fc8:	2b2f      	cmp	r3, #47	; 0x2f
 8010fca:	d01b      	beq.n	8011004 <rcl_expand_topic_name+0x23c>
 8010fcc:	9c07      	ldr	r4, [sp, #28]
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f7ef f990 	bl	80002f4 <strlen>
 8010fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010fd8:	4a29      	ldr	r2, [pc, #164]	; (8011080 <rcl_expand_topic_name+0x2b8>)
 8010fda:	9301      	str	r3, [sp, #4]
 8010fdc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010fde:	9604      	str	r6, [sp, #16]
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	4b28      	ldr	r3, [pc, #160]	; (8011084 <rcl_expand_topic_name+0x2bc>)
 8010fe4:	9403      	str	r4, [sp, #12]
 8010fe6:	2801      	cmp	r0, #1
 8010fe8:	bf18      	it	ne
 8010fea:	4613      	movne	r3, r2
 8010fec:	9302      	str	r3, [sp, #8]
 8010fee:	ab16      	add	r3, sp, #88	; 0x58
 8010ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ff2:	f7fc ffbf 	bl	800df74 <rcutils_format_string_limit>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010ffe:	461e      	mov	r6, r3
 8011000:	4790      	blx	r2
 8011002:	b116      	cbz	r6, 801100a <rcl_expand_topic_name+0x242>
 8011004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011006:	601e      	str	r6, [r3, #0]
 8011008:	e72f      	b.n	8010e6a <rcl_expand_topic_name+0xa2>
 801100a:	2300      	movs	r3, #0
 801100c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801100e:	250a      	movs	r5, #10
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	e72a      	b.n	8010e6a <rcl_expand_topic_name+0xa2>
 8011014:	4653      	mov	r3, sl
 8011016:	4656      	mov	r6, sl
 8011018:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1d2      	bne.n	8010fc6 <rcl_expand_topic_name+0x1fe>
 8011020:	7823      	ldrb	r3, [r4, #0]
 8011022:	2b2f      	cmp	r3, #47	; 0x2f
 8011024:	d01e      	beq.n	8011064 <rcl_expand_topic_name+0x29c>
 8011026:	9e07      	ldr	r6, [sp, #28]
 8011028:	4630      	mov	r0, r6
 801102a:	f7ef f963 	bl	80002f4 <strlen>
 801102e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011034:	9603      	str	r6, [sp, #12]
 8011036:	9404      	str	r4, [sp, #16]
 8011038:	e9cd 2300 	strd	r2, r3, [sp]
 801103c:	4a10      	ldr	r2, [pc, #64]	; (8011080 <rcl_expand_topic_name+0x2b8>)
 801103e:	4b11      	ldr	r3, [pc, #68]	; (8011084 <rcl_expand_topic_name+0x2bc>)
 8011040:	2801      	cmp	r0, #1
 8011042:	bf18      	it	ne
 8011044:	4613      	movne	r3, r2
 8011046:	9302      	str	r3, [sp, #8]
 8011048:	ab16      	add	r3, sp, #88	; 0x58
 801104a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801104c:	f7fc ff92 	bl	800df74 <rcutils_format_string_limit>
 8011050:	4606      	mov	r6, r0
 8011052:	e7d6      	b.n	8011002 <rcl_expand_topic_name+0x23a>
 8011054:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8011058:	4650      	mov	r0, sl
 801105a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801105c:	6014      	str	r4, [r2, #0]
 801105e:	250a      	movs	r5, #10
 8011060:	4798      	blx	r3
 8011062:	e702      	b.n	8010e6a <rcl_expand_topic_name+0xa2>
 8011064:	2300      	movs	r3, #0
 8011066:	461e      	mov	r6, r3
 8011068:	e7cc      	b.n	8011004 <rcl_expand_topic_name+0x23c>
 801106a:	bf00      	nop
 801106c:	08015590 	.word	0x08015590
 8011070:	08015598 	.word	0x08015598
 8011074:	080155a0 	.word	0x080155a0
 8011078:	08015588 	.word	0x08015588
 801107c:	08014d14 	.word	0x08014d14
 8011080:	08014dc4 	.word	0x08014dc4
 8011084:	08014d24 	.word	0x08014d24

08011088 <rcl_get_default_topic_name_substitutions>:
 8011088:	2800      	cmp	r0, #0
 801108a:	bf0c      	ite	eq
 801108c:	200b      	moveq	r0, #11
 801108e:	2000      	movne	r0, #0
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop

08011094 <rcl_get_zero_initialized_guard_condition>:
 8011094:	4a03      	ldr	r2, [pc, #12]	; (80110a4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8011096:	4603      	mov	r3, r0
 8011098:	e892 0003 	ldmia.w	r2, {r0, r1}
 801109c:	e883 0003 	stmia.w	r3, {r0, r1}
 80110a0:	4618      	mov	r0, r3
 80110a2:	4770      	bx	lr
 80110a4:	080155ac 	.word	0x080155ac

080110a8 <rcl_guard_condition_init_from_rmw>:
 80110a8:	b082      	sub	sp, #8
 80110aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ae:	b086      	sub	sp, #24
 80110b0:	4604      	mov	r4, r0
 80110b2:	460e      	mov	r6, r1
 80110b4:	4615      	mov	r5, r2
 80110b6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80110ba:	f10d 0e04 	add.w	lr, sp, #4
 80110be:	f84c 3f04 	str.w	r3, [ip, #4]!
 80110c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80110ca:	f8dc 3000 	ldr.w	r3, [ip]
 80110ce:	a801      	add	r0, sp, #4
 80110d0:	f8ce 3000 	str.w	r3, [lr]
 80110d4:	f7f8 fd9e 	bl	8009c14 <rcutils_allocator_is_valid>
 80110d8:	f080 0301 	eor.w	r3, r0, #1
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	bb3b      	cbnz	r3, 8011130 <rcl_guard_condition_init_from_rmw+0x88>
 80110e0:	b334      	cbz	r4, 8011130 <rcl_guard_condition_init_from_rmw+0x88>
 80110e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80110e6:	f1b8 0f00 	cmp.w	r8, #0
 80110ea:	d11a      	bne.n	8011122 <rcl_guard_condition_init_from_rmw+0x7a>
 80110ec:	b305      	cbz	r5, 8011130 <rcl_guard_condition_init_from_rmw+0x88>
 80110ee:	4628      	mov	r0, r5
 80110f0:	f7fb ff8a 	bl	800d008 <rcl_context_is_valid>
 80110f4:	b1f0      	cbz	r0, 8011134 <rcl_guard_condition_init_from_rmw+0x8c>
 80110f6:	9b01      	ldr	r3, [sp, #4]
 80110f8:	201c      	movs	r0, #28
 80110fa:	9905      	ldr	r1, [sp, #20]
 80110fc:	4798      	blx	r3
 80110fe:	4607      	mov	r7, r0
 8011100:	6060      	str	r0, [r4, #4]
 8011102:	b320      	cbz	r0, 801114e <rcl_guard_condition_init_from_rmw+0xa6>
 8011104:	b1c6      	cbz	r6, 8011138 <rcl_guard_condition_init_from_rmw+0x90>
 8011106:	6006      	str	r6, [r0, #0]
 8011108:	f880 8004 	strb.w	r8, [r0, #4]
 801110c:	ac01      	add	r4, sp, #4
 801110e:	f107 0c08 	add.w	ip, r7, #8
 8011112:	2500      	movs	r5, #0
 8011114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011116:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	f8cc 3000 	str.w	r3, [ip]
 8011120:	e000      	b.n	8011124 <rcl_guard_condition_init_from_rmw+0x7c>
 8011122:	2564      	movs	r5, #100	; 0x64
 8011124:	4628      	mov	r0, r5
 8011126:	b006      	add	sp, #24
 8011128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801112c:	b002      	add	sp, #8
 801112e:	4770      	bx	lr
 8011130:	250b      	movs	r5, #11
 8011132:	e7f7      	b.n	8011124 <rcl_guard_condition_init_from_rmw+0x7c>
 8011134:	2565      	movs	r5, #101	; 0x65
 8011136:	e7f5      	b.n	8011124 <rcl_guard_condition_init_from_rmw+0x7c>
 8011138:	6828      	ldr	r0, [r5, #0]
 801113a:	3028      	adds	r0, #40	; 0x28
 801113c:	f000 fb7c 	bl	8011838 <rmw_create_guard_condition>
 8011140:	6038      	str	r0, [r7, #0]
 8011142:	6867      	ldr	r7, [r4, #4]
 8011144:	683e      	ldr	r6, [r7, #0]
 8011146:	b126      	cbz	r6, 8011152 <rcl_guard_condition_init_from_rmw+0xaa>
 8011148:	2301      	movs	r3, #1
 801114a:	713b      	strb	r3, [r7, #4]
 801114c:	e7de      	b.n	801110c <rcl_guard_condition_init_from_rmw+0x64>
 801114e:	250a      	movs	r5, #10
 8011150:	e7e8      	b.n	8011124 <rcl_guard_condition_init_from_rmw+0x7c>
 8011152:	9b02      	ldr	r3, [sp, #8]
 8011154:	4638      	mov	r0, r7
 8011156:	9905      	ldr	r1, [sp, #20]
 8011158:	2501      	movs	r5, #1
 801115a:	4798      	blx	r3
 801115c:	6066      	str	r6, [r4, #4]
 801115e:	e7e1      	b.n	8011124 <rcl_guard_condition_init_from_rmw+0x7c>

08011160 <rcl_guard_condition_fini>:
 8011160:	b570      	push	{r4, r5, r6, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	b1f0      	cbz	r0, 80111a4 <rcl_guard_condition_fini+0x44>
 8011166:	6843      	ldr	r3, [r0, #4]
 8011168:	4604      	mov	r4, r0
 801116a:	b163      	cbz	r3, 8011186 <rcl_guard_condition_fini+0x26>
 801116c:	6818      	ldr	r0, [r3, #0]
 801116e:	68de      	ldr	r6, [r3, #12]
 8011170:	6999      	ldr	r1, [r3, #24]
 8011172:	b160      	cbz	r0, 801118e <rcl_guard_condition_fini+0x2e>
 8011174:	791d      	ldrb	r5, [r3, #4]
 8011176:	b965      	cbnz	r5, 8011192 <rcl_guard_condition_fini+0x32>
 8011178:	4618      	mov	r0, r3
 801117a:	47b0      	blx	r6
 801117c:	2300      	movs	r3, #0
 801117e:	4628      	mov	r0, r5
 8011180:	6063      	str	r3, [r4, #4]
 8011182:	b002      	add	sp, #8
 8011184:	bd70      	pop	{r4, r5, r6, pc}
 8011186:	461d      	mov	r5, r3
 8011188:	4628      	mov	r0, r5
 801118a:	b002      	add	sp, #8
 801118c:	bd70      	pop	{r4, r5, r6, pc}
 801118e:	4605      	mov	r5, r0
 8011190:	e7f2      	b.n	8011178 <rcl_guard_condition_fini+0x18>
 8011192:	9101      	str	r1, [sp, #4]
 8011194:	f000 fb66 	bl	8011864 <rmw_destroy_guard_condition>
 8011198:	1e05      	subs	r5, r0, #0
 801119a:	6863      	ldr	r3, [r4, #4]
 801119c:	9901      	ldr	r1, [sp, #4]
 801119e:	bf18      	it	ne
 80111a0:	2501      	movne	r5, #1
 80111a2:	e7e9      	b.n	8011178 <rcl_guard_condition_fini+0x18>
 80111a4:	250b      	movs	r5, #11
 80111a6:	4628      	mov	r0, r5
 80111a8:	b002      	add	sp, #8
 80111aa:	bd70      	pop	{r4, r5, r6, pc}

080111ac <rcl_guard_condition_get_default_options>:
 80111ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ae:	b087      	sub	sp, #28
 80111b0:	4606      	mov	r6, r0
 80111b2:	4c0b      	ldr	r4, [pc, #44]	; (80111e0 <rcl_guard_condition_get_default_options+0x34>)
 80111b4:	4668      	mov	r0, sp
 80111b6:	f7f8 fd1f 	bl	8009bf8 <rcutils_get_default_allocator>
 80111ba:	46ee      	mov	lr, sp
 80111bc:	46a4      	mov	ip, r4
 80111be:	4625      	mov	r5, r4
 80111c0:	4634      	mov	r4, r6
 80111c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111cc:	f8de 7000 	ldr.w	r7, [lr]
 80111d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111d2:	4630      	mov	r0, r6
 80111d4:	f8cc 7000 	str.w	r7, [ip]
 80111d8:	6027      	str	r7, [r4, #0]
 80111da:	b007      	add	sp, #28
 80111dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111de:	bf00      	nop
 80111e0:	2000de44 	.word	0x2000de44

080111e4 <rcl_validate_topic_name>:
 80111e4:	2800      	cmp	r0, #0
 80111e6:	f000 8089 	beq.w	80112fc <rcl_validate_topic_name+0x118>
 80111ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ee:	460e      	mov	r6, r1
 80111f0:	2900      	cmp	r1, #0
 80111f2:	f000 8085 	beq.w	8011300 <rcl_validate_topic_name+0x11c>
 80111f6:	4604      	mov	r4, r0
 80111f8:	4617      	mov	r7, r2
 80111fa:	f7ef f87b 	bl	80002f4 <strlen>
 80111fe:	b1b0      	cbz	r0, 801122e <rcl_validate_topic_name+0x4a>
 8011200:	f894 e000 	ldrb.w	lr, [r4]
 8011204:	f8df c160 	ldr.w	ip, [pc, #352]	; 8011368 <rcl_validate_topic_name+0x184>
 8011208:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801120c:	f013 0304 	ands.w	r3, r3, #4
 8011210:	d139      	bne.n	8011286 <rcl_validate_topic_name+0xa2>
 8011212:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8011216:	f814 2008 	ldrb.w	r2, [r4, r8]
 801121a:	2a2f      	cmp	r2, #47	; 0x2f
 801121c:	d10f      	bne.n	801123e <rcl_validate_topic_name+0x5a>
 801121e:	2202      	movs	r2, #2
 8011220:	6032      	str	r2, [r6, #0]
 8011222:	b3a7      	cbz	r7, 801128e <rcl_validate_topic_name+0xaa>
 8011224:	4618      	mov	r0, r3
 8011226:	f8c7 8000 	str.w	r8, [r7]
 801122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801122e:	2301      	movs	r3, #1
 8011230:	6033      	str	r3, [r6, #0]
 8011232:	b367      	cbz	r7, 801128e <rcl_validate_topic_name+0xaa>
 8011234:	2300      	movs	r3, #0
 8011236:	4618      	mov	r0, r3
 8011238:	603b      	str	r3, [r7, #0]
 801123a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801123e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8011242:	461d      	mov	r5, r3
 8011244:	4619      	mov	r1, r3
 8011246:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801124a:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801124e:	f1b9 0f09 	cmp.w	r9, #9
 8011252:	d91f      	bls.n	8011294 <rcl_validate_topic_name+0xb0>
 8011254:	f022 0920 	bic.w	r9, r2, #32
 8011258:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801125c:	f1b9 0f19 	cmp.w	r9, #25
 8011260:	d918      	bls.n	8011294 <rcl_validate_topic_name+0xb0>
 8011262:	2a5f      	cmp	r2, #95	; 0x5f
 8011264:	d024      	beq.n	80112b0 <rcl_validate_topic_name+0xcc>
 8011266:	2a2f      	cmp	r2, #47	; 0x2f
 8011268:	d058      	beq.n	801131c <rcl_validate_topic_name+0x138>
 801126a:	2a7e      	cmp	r2, #126	; 0x7e
 801126c:	d04a      	beq.n	8011304 <rcl_validate_topic_name+0x120>
 801126e:	2a7b      	cmp	r2, #123	; 0x7b
 8011270:	d05b      	beq.n	801132a <rcl_validate_topic_name+0x146>
 8011272:	2a7d      	cmp	r2, #125	; 0x7d
 8011274:	d169      	bne.n	801134a <rcl_validate_topic_name+0x166>
 8011276:	2d00      	cmp	r5, #0
 8011278:	d15c      	bne.n	8011334 <rcl_validate_topic_name+0x150>
 801127a:	2305      	movs	r3, #5
 801127c:	6033      	str	r3, [r6, #0]
 801127e:	b137      	cbz	r7, 801128e <rcl_validate_topic_name+0xaa>
 8011280:	2000      	movs	r0, #0
 8011282:	6039      	str	r1, [r7, #0]
 8011284:	e7d9      	b.n	801123a <rcl_validate_topic_name+0x56>
 8011286:	2304      	movs	r3, #4
 8011288:	6033      	str	r3, [r6, #0]
 801128a:	2f00      	cmp	r7, #0
 801128c:	d1d2      	bne.n	8011234 <rcl_validate_topic_name+0x50>
 801128e:	2000      	movs	r0, #0
 8011290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011294:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011298:	0752      	lsls	r2, r2, #29
 801129a:	d509      	bpl.n	80112b0 <rcl_validate_topic_name+0xcc>
 801129c:	2900      	cmp	r1, #0
 801129e:	bf0c      	ite	eq
 80112a0:	2200      	moveq	r2, #0
 80112a2:	f005 0201 	andne.w	r2, r5, #1
 80112a6:	b11a      	cbz	r2, 80112b0 <rcl_validate_topic_name+0xcc>
 80112a8:	1e4d      	subs	r5, r1, #1
 80112aa:	429d      	cmp	r5, r3
 80112ac:	d031      	beq.n	8011312 <rcl_validate_topic_name+0x12e>
 80112ae:	4615      	mov	r5, r2
 80112b0:	3101      	adds	r1, #1
 80112b2:	4288      	cmp	r0, r1
 80112b4:	d1c7      	bne.n	8011246 <rcl_validate_topic_name+0x62>
 80112b6:	2d00      	cmp	r5, #0
 80112b8:	d142      	bne.n	8011340 <rcl_validate_topic_name+0x15c>
 80112ba:	4628      	mov	r0, r5
 80112bc:	2301      	movs	r3, #1
 80112be:	e00c      	b.n	80112da <rcl_validate_topic_name+0xf6>
 80112c0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80112c4:	d101      	bne.n	80112ca <rcl_validate_topic_name+0xe6>
 80112c6:	2801      	cmp	r0, #1
 80112c8:	d047      	beq.n	801135a <rcl_validate_topic_name+0x176>
 80112ca:	1c5a      	adds	r2, r3, #1
 80112cc:	428b      	cmp	r3, r1
 80112ce:	f100 0001 	add.w	r0, r0, #1
 80112d2:	f104 0401 	add.w	r4, r4, #1
 80112d6:	4613      	mov	r3, r2
 80112d8:	d22e      	bcs.n	8011338 <rcl_validate_topic_name+0x154>
 80112da:	4580      	cmp	r8, r0
 80112dc:	d0f5      	beq.n	80112ca <rcl_validate_topic_name+0xe6>
 80112de:	7822      	ldrb	r2, [r4, #0]
 80112e0:	2a2f      	cmp	r2, #47	; 0x2f
 80112e2:	d1ed      	bne.n	80112c0 <rcl_validate_topic_name+0xdc>
 80112e4:	7862      	ldrb	r2, [r4, #1]
 80112e6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80112ea:	0752      	lsls	r2, r2, #29
 80112ec:	d5ed      	bpl.n	80112ca <rcl_validate_topic_name+0xe6>
 80112ee:	2204      	movs	r2, #4
 80112f0:	6032      	str	r2, [r6, #0]
 80112f2:	2f00      	cmp	r7, #0
 80112f4:	d0cb      	beq.n	801128e <rcl_validate_topic_name+0xaa>
 80112f6:	2000      	movs	r0, #0
 80112f8:	603b      	str	r3, [r7, #0]
 80112fa:	e79e      	b.n	801123a <rcl_validate_topic_name+0x56>
 80112fc:	200b      	movs	r0, #11
 80112fe:	4770      	bx	lr
 8011300:	200b      	movs	r0, #11
 8011302:	e79a      	b.n	801123a <rcl_validate_topic_name+0x56>
 8011304:	2900      	cmp	r1, #0
 8011306:	d0d3      	beq.n	80112b0 <rcl_validate_topic_name+0xcc>
 8011308:	2306      	movs	r3, #6
 801130a:	6033      	str	r3, [r6, #0]
 801130c:	2f00      	cmp	r7, #0
 801130e:	d1b7      	bne.n	8011280 <rcl_validate_topic_name+0x9c>
 8011310:	e7bd      	b.n	801128e <rcl_validate_topic_name+0xaa>
 8011312:	2309      	movs	r3, #9
 8011314:	6033      	str	r3, [r6, #0]
 8011316:	2f00      	cmp	r7, #0
 8011318:	d1b2      	bne.n	8011280 <rcl_validate_topic_name+0x9c>
 801131a:	e7b8      	b.n	801128e <rcl_validate_topic_name+0xaa>
 801131c:	2d00      	cmp	r5, #0
 801131e:	d0c7      	beq.n	80112b0 <rcl_validate_topic_name+0xcc>
 8011320:	2308      	movs	r3, #8
 8011322:	6033      	str	r3, [r6, #0]
 8011324:	2f00      	cmp	r7, #0
 8011326:	d1ab      	bne.n	8011280 <rcl_validate_topic_name+0x9c>
 8011328:	e7b1      	b.n	801128e <rcl_validate_topic_name+0xaa>
 801132a:	2d00      	cmp	r5, #0
 801132c:	d1f8      	bne.n	8011320 <rcl_validate_topic_name+0x13c>
 801132e:	460b      	mov	r3, r1
 8011330:	2501      	movs	r5, #1
 8011332:	e7bd      	b.n	80112b0 <rcl_validate_topic_name+0xcc>
 8011334:	2500      	movs	r5, #0
 8011336:	e7bb      	b.n	80112b0 <rcl_validate_topic_name+0xcc>
 8011338:	2300      	movs	r3, #0
 801133a:	4618      	mov	r0, r3
 801133c:	6033      	str	r3, [r6, #0]
 801133e:	e77c      	b.n	801123a <rcl_validate_topic_name+0x56>
 8011340:	2205      	movs	r2, #5
 8011342:	6032      	str	r2, [r6, #0]
 8011344:	2f00      	cmp	r7, #0
 8011346:	d1d6      	bne.n	80112f6 <rcl_validate_topic_name+0x112>
 8011348:	e7a1      	b.n	801128e <rcl_validate_topic_name+0xaa>
 801134a:	2d00      	cmp	r5, #0
 801134c:	bf14      	ite	ne
 801134e:	2308      	movne	r3, #8
 8011350:	2303      	moveq	r3, #3
 8011352:	6033      	str	r3, [r6, #0]
 8011354:	2f00      	cmp	r7, #0
 8011356:	d193      	bne.n	8011280 <rcl_validate_topic_name+0x9c>
 8011358:	e799      	b.n	801128e <rcl_validate_topic_name+0xaa>
 801135a:	2307      	movs	r3, #7
 801135c:	6033      	str	r3, [r6, #0]
 801135e:	2f00      	cmp	r7, #0
 8011360:	d095      	beq.n	801128e <rcl_validate_topic_name+0xaa>
 8011362:	2301      	movs	r3, #1
 8011364:	e7c7      	b.n	80112f6 <rcl_validate_topic_name+0x112>
 8011366:	bf00      	nop
 8011368:	080155b5 	.word	0x080155b5

0801136c <rcutils_split>:
 801136c:	b082      	sub	sp, #8
 801136e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011372:	b08d      	sub	sp, #52	; 0x34
 8011374:	ac16      	add	r4, sp, #88	; 0x58
 8011376:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8011378:	e884 000c 	stmia.w	r4, {r2, r3}
 801137c:	2f00      	cmp	r7, #0
 801137e:	f000 80a8 	beq.w	80114d2 <rcutils_split+0x166>
 8011382:	4605      	mov	r5, r0
 8011384:	2800      	cmp	r0, #0
 8011386:	d07e      	beq.n	8011486 <rcutils_split+0x11a>
 8011388:	7803      	ldrb	r3, [r0, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d07b      	beq.n	8011486 <rcutils_split+0x11a>
 801138e:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8011392:	460e      	mov	r6, r1
 8011394:	9203      	str	r2, [sp, #12]
 8011396:	f107 0408 	add.w	r4, r7, #8
 801139a:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801139e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113a4:	4628      	mov	r0, r5
 80113a6:	f8c4 b000 	str.w	fp, [r4]
 80113aa:	f7ee ffa3 	bl	80002f4 <strlen>
 80113ae:	782c      	ldrb	r4, [r5, #0]
 80113b0:	182b      	adds	r3, r5, r0
 80113b2:	1ba4      	subs	r4, r4, r6
 80113b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80113b8:	fab4 f484 	clz	r4, r4
 80113bc:	42b3      	cmp	r3, r6
 80113be:	bf14      	ite	ne
 80113c0:	4680      	movne	r8, r0
 80113c2:	f1a0 0801 	subeq.w	r8, r0, #1
 80113c6:	2001      	movs	r0, #1
 80113c8:	0964      	lsrs	r4, r4, #5
 80113ca:	6038      	str	r0, [r7, #0]
 80113cc:	4544      	cmp	r4, r8
 80113ce:	d26b      	bcs.n	80114a8 <rcutils_split+0x13c>
 80113d0:	192b      	adds	r3, r5, r4
 80113d2:	eb05 0108 	add.w	r1, r5, r8
 80113d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113da:	42b2      	cmp	r2, r6
 80113dc:	d101      	bne.n	80113e2 <rcutils_split+0x76>
 80113de:	3001      	adds	r0, #1
 80113e0:	6038      	str	r0, [r7, #0]
 80113e2:	4299      	cmp	r1, r3
 80113e4:	d1f7      	bne.n	80113d6 <rcutils_split+0x6a>
 80113e6:	9b03      	ldr	r3, [sp, #12]
 80113e8:	0080      	lsls	r0, r0, #2
 80113ea:	4659      	mov	r1, fp
 80113ec:	4798      	blx	r3
 80113ee:	4603      	mov	r3, r0
 80113f0:	6078      	str	r0, [r7, #4]
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d05f      	beq.n	80114b6 <rcutils_split+0x14a>
 80113f6:	f04f 0a00 	mov.w	sl, #0
 80113fa:	46a1      	mov	r9, r4
 80113fc:	e002      	b.n	8011404 <rcutils_split+0x98>
 80113fe:	3401      	adds	r4, #1
 8011400:	45a0      	cmp	r8, r4
 8011402:	d922      	bls.n	801144a <rcutils_split+0xde>
 8011404:	5d2a      	ldrb	r2, [r5, r4]
 8011406:	42b2      	cmp	r2, r6
 8011408:	d1f9      	bne.n	80113fe <rcutils_split+0x92>
 801140a:	45a1      	cmp	r9, r4
 801140c:	eba4 0209 	sub.w	r2, r4, r9
 8011410:	d032      	beq.n	8011478 <rcutils_split+0x10c>
 8011412:	4659      	mov	r1, fp
 8011414:	1c90      	adds	r0, r2, #2
 8011416:	9302      	str	r3, [sp, #8]
 8011418:	9b03      	ldr	r3, [sp, #12]
 801141a:	9201      	str	r2, [sp, #4]
 801141c:	4798      	blx	r3
 801141e:	9a01      	ldr	r2, [sp, #4]
 8011420:	9b02      	ldr	r3, [sp, #8]
 8011422:	1c51      	adds	r1, r2, #1
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801142a:	eb05 0309 	add.w	r3, r5, r9
 801142e:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8011432:	2800      	cmp	r0, #0
 8011434:	d04f      	beq.n	80114d6 <rcutils_split+0x16a>
 8011436:	4a2b      	ldr	r2, [pc, #172]	; (80114e4 <rcutils_split+0x178>)
 8011438:	f10a 0a01 	add.w	sl, sl, #1
 801143c:	f001 f89a 	bl	8012574 <sniprintf>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	3401      	adds	r4, #1
 8011444:	45a0      	cmp	r8, r4
 8011446:	46a1      	mov	r9, r4
 8011448:	d8dc      	bhi.n	8011404 <rcutils_split+0x98>
 801144a:	45a1      	cmp	r9, r4
 801144c:	d039      	beq.n	80114c2 <rcutils_split+0x156>
 801144e:	eba4 0409 	sub.w	r4, r4, r9
 8011452:	4659      	mov	r1, fp
 8011454:	9301      	str	r3, [sp, #4]
 8011456:	1ca0      	adds	r0, r4, #2
 8011458:	9b03      	ldr	r3, [sp, #12]
 801145a:	4798      	blx	r3
 801145c:	9b01      	ldr	r3, [sp, #4]
 801145e:	4a21      	ldr	r2, [pc, #132]	; (80114e4 <rcutils_split+0x178>)
 8011460:	1c61      	adds	r1, r4, #1
 8011462:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8011466:	eb05 0309 	add.w	r3, r5, r9
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	2500      	movs	r5, #0
 801146e:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 8011472:	f001 f87f 	bl	8012574 <sniprintf>
 8011476:	e011      	b.n	801149c <rcutils_split+0x130>
 8011478:	683a      	ldr	r2, [r7, #0]
 801147a:	2100      	movs	r1, #0
 801147c:	3a01      	subs	r2, #1
 801147e:	603a      	str	r2, [r7, #0]
 8011480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011484:	e7dd      	b.n	8011442 <rcutils_split+0xd6>
 8011486:	ac04      	add	r4, sp, #16
 8011488:	a804      	add	r0, sp, #16
 801148a:	f000 f82d 	bl	80114e8 <rcutils_get_zero_initialized_string_array>
 801148e:	2500      	movs	r5, #0
 8011490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011492:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011494:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011498:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801149c:	4628      	mov	r0, r5
 801149e:	b00d      	add	sp, #52	; 0x34
 80114a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	b002      	add	sp, #8
 80114a6:	4770      	bx	lr
 80114a8:	9b03      	ldr	r3, [sp, #12]
 80114aa:	4659      	mov	r1, fp
 80114ac:	2004      	movs	r0, #4
 80114ae:	4798      	blx	r3
 80114b0:	4603      	mov	r3, r0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	b928      	cbnz	r0, 80114c2 <rcutils_split+0x156>
 80114b6:	4638      	mov	r0, r7
 80114b8:	f000 f834 	bl	8011524 <rcutils_string_array_fini>
 80114bc:	b970      	cbnz	r0, 80114dc <rcutils_split+0x170>
 80114be:	2502      	movs	r5, #2
 80114c0:	e7ec      	b.n	801149c <rcutils_split+0x130>
 80114c2:	683a      	ldr	r2, [r7, #0]
 80114c4:	2100      	movs	r1, #0
 80114c6:	3a01      	subs	r2, #1
 80114c8:	460d      	mov	r5, r1
 80114ca:	603a      	str	r2, [r7, #0]
 80114cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80114d0:	e7e4      	b.n	801149c <rcutils_split+0x130>
 80114d2:	250b      	movs	r5, #11
 80114d4:	e7e2      	b.n	801149c <rcutils_split+0x130>
 80114d6:	f8c7 a000 	str.w	sl, [r7]
 80114da:	e7ec      	b.n	80114b6 <rcutils_split+0x14a>
 80114dc:	2502      	movs	r5, #2
 80114de:	f7f8 fbbf 	bl	8009c60 <rcutils_reset_error>
 80114e2:	e7db      	b.n	801149c <rcutils_split+0x130>
 80114e4:	08014d18 	.word	0x08014d18

080114e8 <rcutils_get_zero_initialized_string_array>:
 80114e8:	b570      	push	{r4, r5, r6, lr}
 80114ea:	b086      	sub	sp, #24
 80114ec:	4606      	mov	r6, r0
 80114ee:	4c0c      	ldr	r4, [pc, #48]	; (8011520 <rcutils_get_zero_initialized_string_array+0x38>)
 80114f0:	4668      	mov	r0, sp
 80114f2:	f7f8 fb55 	bl	8009ba0 <rcutils_get_zero_initialized_allocator>
 80114f6:	46ee      	mov	lr, sp
 80114f8:	f104 0508 	add.w	r5, r4, #8
 80114fc:	46a4      	mov	ip, r4
 80114fe:	4634      	mov	r4, r6
 8011500:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011506:	f8de 3000 	ldr.w	r3, [lr]
 801150a:	602b      	str	r3, [r5, #0]
 801150c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011512:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801151a:	4630      	mov	r0, r6
 801151c:	b006      	add	sp, #24
 801151e:	bd70      	pop	{r4, r5, r6, pc}
 8011520:	2000de58 	.word	0x2000de58

08011524 <rcutils_string_array_fini>:
 8011524:	b328      	cbz	r0, 8011572 <rcutils_string_array_fini+0x4e>
 8011526:	b570      	push	{r4, r5, r6, lr}
 8011528:	4604      	mov	r4, r0
 801152a:	6840      	ldr	r0, [r0, #4]
 801152c:	b1e0      	cbz	r0, 8011568 <rcutils_string_array_fini+0x44>
 801152e:	f104 0008 	add.w	r0, r4, #8
 8011532:	f7f8 fb6f 	bl	8009c14 <rcutils_allocator_is_valid>
 8011536:	b1c0      	cbz	r0, 801156a <rcutils_string_array_fini+0x46>
 8011538:	6823      	ldr	r3, [r4, #0]
 801153a:	b1c3      	cbz	r3, 801156e <rcutils_string_array_fini+0x4a>
 801153c:	2500      	movs	r5, #0
 801153e:	6860      	ldr	r0, [r4, #4]
 8011540:	462e      	mov	r6, r5
 8011542:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011546:	68e3      	ldr	r3, [r4, #12]
 8011548:	69a1      	ldr	r1, [r4, #24]
 801154a:	4798      	blx	r3
 801154c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8011550:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8011554:	3501      	adds	r5, #1
 8011556:	429d      	cmp	r5, r3
 8011558:	d3f3      	bcc.n	8011542 <rcutils_string_array_fini+0x1e>
 801155a:	68e3      	ldr	r3, [r4, #12]
 801155c:	69a1      	ldr	r1, [r4, #24]
 801155e:	4798      	blx	r3
 8011560:	2300      	movs	r3, #0
 8011562:	4618      	mov	r0, r3
 8011564:	e9c4 3300 	strd	r3, r3, [r4]
 8011568:	bd70      	pop	{r4, r5, r6, pc}
 801156a:	200b      	movs	r0, #11
 801156c:	bd70      	pop	{r4, r5, r6, pc}
 801156e:	6860      	ldr	r0, [r4, #4]
 8011570:	e7f3      	b.n	801155a <rcutils_string_array_fini+0x36>
 8011572:	200b      	movs	r0, #11
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop

08011578 <rmw_get_zero_initialized_discovery_options>:
 8011578:	b510      	push	{r4, lr}
 801157a:	4604      	mov	r4, r0
 801157c:	2220      	movs	r2, #32
 801157e:	2100      	movs	r1, #0
 8011580:	f000 fa1c 	bl	80119bc <memset>
 8011584:	4620      	mov	r0, r4
 8011586:	bd10      	pop	{r4, pc}

08011588 <rmw_discovery_options_init>:
 8011588:	b570      	push	{r4, r5, r6, lr}
 801158a:	b318      	cbz	r0, 80115d4 <rmw_discovery_options_init+0x4c>
 801158c:	4604      	mov	r4, r0
 801158e:	4610      	mov	r0, r2
 8011590:	460e      	mov	r6, r1
 8011592:	4615      	mov	r5, r2
 8011594:	f7f8 fb3e 	bl	8009c14 <rcutils_allocator_is_valid>
 8011598:	b1e0      	cbz	r0, 80115d4 <rmw_discovery_options_init+0x4c>
 801159a:	68a3      	ldr	r3, [r4, #8]
 801159c:	b9d3      	cbnz	r3, 80115d4 <rmw_discovery_options_init+0x4c>
 801159e:	6863      	ldr	r3, [r4, #4]
 80115a0:	b9c3      	cbnz	r3, 80115d4 <rmw_discovery_options_init+0x4c>
 80115a2:	7823      	ldrb	r3, [r4, #0]
 80115a4:	b90b      	cbnz	r3, 80115aa <rmw_discovery_options_init+0x22>
 80115a6:	2302      	movs	r3, #2
 80115a8:	7023      	strb	r3, [r4, #0]
 80115aa:	b1a6      	cbz	r6, 80115d6 <rmw_discovery_options_init+0x4e>
 80115ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115b0:	4630      	mov	r0, r6
 80115b2:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80115b6:	4798      	blx	r3
 80115b8:	6060      	str	r0, [r4, #4]
 80115ba:	b170      	cbz	r0, 80115da <rmw_discovery_options_init+0x52>
 80115bc:	f104 0c0c 	add.w	ip, r4, #12
 80115c0:	60a6      	str	r6, [r4, #8]
 80115c2:	2600      	movs	r6, #0
 80115c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115ca:	682b      	ldr	r3, [r5, #0]
 80115cc:	4630      	mov	r0, r6
 80115ce:	f8cc 3000 	str.w	r3, [ip]
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	260b      	movs	r6, #11
 80115d6:	4630      	mov	r0, r6
 80115d8:	bd70      	pop	{r4, r5, r6, pc}
 80115da:	260a      	movs	r6, #10
 80115dc:	e7fb      	b.n	80115d6 <rmw_discovery_options_init+0x4e>
 80115de:	bf00      	nop

080115e0 <on_status>:
 80115e0:	b082      	sub	sp, #8
 80115e2:	b002      	add	sp, #8
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop

080115e8 <on_topic>:
 80115e8:	4a23      	ldr	r2, [pc, #140]	; (8011678 <on_topic+0x90>)
 80115ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ee:	6812      	ldr	r2, [r2, #0]
 80115f0:	b094      	sub	sp, #80	; 0x50
 80115f2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80115f4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80115f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80115fa:	9312      	str	r3, [sp, #72]	; 0x48
 80115fc:	b3c2      	cbz	r2, 8011670 <on_topic+0x88>
 80115fe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8011602:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8011606:	e001      	b.n	801160c <on_topic+0x24>
 8011608:	6852      	ldr	r2, [r2, #4]
 801160a:	b38a      	cbz	r2, 8011670 <on_topic+0x88>
 801160c:	6894      	ldr	r4, [r2, #8]
 801160e:	8aa3      	ldrh	r3, [r4, #20]
 8011610:	428b      	cmp	r3, r1
 8011612:	d1f9      	bne.n	8011608 <on_topic+0x20>
 8011614:	7da3      	ldrb	r3, [r4, #22]
 8011616:	4283      	cmp	r3, r0
 8011618:	d1f6      	bne.n	8011608 <on_topic+0x20>
 801161a:	2248      	movs	r2, #72	; 0x48
 801161c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011620:	4668      	mov	r0, sp
 8011622:	f000 f9bd 	bl	80119a0 <memcpy>
 8011626:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801162a:	4620      	mov	r0, r4
 801162c:	cb0c      	ldmia	r3, {r2, r3}
 801162e:	f7f8 fedf 	bl	800a3f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011632:	4607      	mov	r7, r0
 8011634:	b1e0      	cbz	r0, 8011670 <on_topic+0x88>
 8011636:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801163a:	462a      	mov	r2, r5
 801163c:	4630      	mov	r0, r6
 801163e:	f108 0110 	add.w	r1, r8, #16
 8011642:	f7fd fe67 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 8011646:	b930      	cbnz	r0, 8011656 <on_topic+0x6e>
 8011648:	4639      	mov	r1, r7
 801164a:	480c      	ldr	r0, [pc, #48]	; (801167c <on_topic+0x94>)
 801164c:	b014      	add	sp, #80	; 0x50
 801164e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011652:	f7fd b8ef 	b.w	800e834 <put_memory>
 8011656:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801165a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801165e:	f7fd fd81 	bl	800f164 <rmw_uros_epoch_nanos>
 8011662:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8011666:	2305      	movs	r3, #5
 8011668:	e942 0102 	strd	r0, r1, [r2, #-8]
 801166c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8011670:	b014      	add	sp, #80	; 0x50
 8011672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011676:	bf00      	nop
 8011678:	2000dcec 	.word	0x2000dcec
 801167c:	2000dcdc 	.word	0x2000dcdc

08011680 <on_request>:
 8011680:	4824      	ldr	r0, [pc, #144]	; (8011714 <on_request+0x94>)
 8011682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011686:	6800      	ldr	r0, [r0, #0]
 8011688:	b094      	sub	sp, #80	; 0x50
 801168a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801168c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8011690:	9113      	str	r1, [sp, #76]	; 0x4c
 8011692:	2800      	cmp	r0, #0
 8011694:	d03b      	beq.n	801170e <on_request+0x8e>
 8011696:	461d      	mov	r5, r3
 8011698:	e001      	b.n	801169e <on_request+0x1e>
 801169a:	6840      	ldr	r0, [r0, #4]
 801169c:	b3b8      	cbz	r0, 801170e <on_request+0x8e>
 801169e:	6884      	ldr	r4, [r0, #8]
 80116a0:	8b21      	ldrh	r1, [r4, #24]
 80116a2:	4291      	cmp	r1, r2
 80116a4:	d1f9      	bne.n	801169a <on_request+0x1a>
 80116a6:	2248      	movs	r2, #72	; 0x48
 80116a8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80116ac:	4668      	mov	r0, sp
 80116ae:	f000 f977 	bl	80119a0 <memcpy>
 80116b2:	f104 0320 	add.w	r3, r4, #32
 80116b6:	4620      	mov	r0, r4
 80116b8:	cb0c      	ldmia	r3, {r2, r3}
 80116ba:	f7f8 fe99 	bl	800a3f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80116be:	4680      	mov	r8, r0
 80116c0:	b328      	cbz	r0, 801170e <on_request+0x8e>
 80116c2:	4630      	mov	r0, r6
 80116c4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80116c8:	463a      	mov	r2, r7
 80116ca:	f106 0110 	add.w	r1, r6, #16
 80116ce:	f7fd fe21 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 80116d2:	b930      	cbnz	r0, 80116e2 <on_request+0x62>
 80116d4:	4641      	mov	r1, r8
 80116d6:	4810      	ldr	r0, [pc, #64]	; (8011718 <on_request+0x98>)
 80116d8:	b014      	add	sp, #80	; 0x50
 80116da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116de:	f7fd b8a9 	b.w	800e834 <put_memory>
 80116e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116e4:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 80116e8:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80116ec:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80116f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80116f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80116fc:	f7fd fd32 	bl	800f164 <rmw_uros_epoch_nanos>
 8011700:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8011704:	2303      	movs	r3, #3
 8011706:	e942 0102 	strd	r0, r1, [r2, #-8]
 801170a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801170e:	b014      	add	sp, #80	; 0x50
 8011710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011714:	2000dcbc 	.word	0x2000dcbc
 8011718:	2000dcdc 	.word	0x2000dcdc

0801171c <on_reply>:
 801171c:	4822      	ldr	r0, [pc, #136]	; (80117a8 <on_reply+0x8c>)
 801171e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011722:	6800      	ldr	r0, [r0, #0]
 8011724:	b094      	sub	sp, #80	; 0x50
 8011726:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011728:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801172c:	9113      	str	r1, [sp, #76]	; 0x4c
 801172e:	b3b8      	cbz	r0, 80117a0 <on_reply+0x84>
 8011730:	461d      	mov	r5, r3
 8011732:	e001      	b.n	8011738 <on_reply+0x1c>
 8011734:	6840      	ldr	r0, [r0, #4]
 8011736:	b398      	cbz	r0, 80117a0 <on_reply+0x84>
 8011738:	6884      	ldr	r4, [r0, #8]
 801173a:	8b21      	ldrh	r1, [r4, #24]
 801173c:	4291      	cmp	r1, r2
 801173e:	d1f9      	bne.n	8011734 <on_reply+0x18>
 8011740:	2248      	movs	r2, #72	; 0x48
 8011742:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011746:	4668      	mov	r0, sp
 8011748:	f000 f92a 	bl	80119a0 <memcpy>
 801174c:	f104 0320 	add.w	r3, r4, #32
 8011750:	4620      	mov	r0, r4
 8011752:	cb0c      	ldmia	r3, {r2, r3}
 8011754:	f7f8 fe4c 	bl	800a3f0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011758:	4680      	mov	r8, r0
 801175a:	b308      	cbz	r0, 80117a0 <on_reply+0x84>
 801175c:	4630      	mov	r0, r6
 801175e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8011762:	463a      	mov	r2, r7
 8011764:	f106 0110 	add.w	r1, r6, #16
 8011768:	f7fd fdd4 	bl	800f314 <ucdr_deserialize_array_uint8_t>
 801176c:	b930      	cbnz	r0, 801177c <on_reply+0x60>
 801176e:	4641      	mov	r1, r8
 8011770:	480e      	ldr	r0, [pc, #56]	; (80117ac <on_reply+0x90>)
 8011772:	b014      	add	sp, #80	; 0x50
 8011774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011778:	f7fd b85c 	b.w	800e834 <put_memory>
 801177c:	2200      	movs	r2, #0
 801177e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8011782:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8011786:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801178a:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801178e:	f7fd fce9 	bl	800f164 <rmw_uros_epoch_nanos>
 8011792:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8011796:	2304      	movs	r3, #4
 8011798:	e942 0102 	strd	r0, r1, [r2, #-8]
 801179c:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80117a0:	b014      	add	sp, #80	; 0x50
 80117a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a6:	bf00      	nop
 80117a8:	200093d0 	.word	0x200093d0
 80117ac:	2000dcdc 	.word	0x2000dcdc

080117b0 <rmw_destroy_client>:
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	b128      	cbz	r0, 80117c0 <rmw_destroy_client+0x10>
 80117b4:	4604      	mov	r4, r0
 80117b6:	6800      	ldr	r0, [r0, #0]
 80117b8:	460d      	mov	r5, r1
 80117ba:	f7f8 feed 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 80117be:	b910      	cbnz	r0, 80117c6 <rmw_destroy_client+0x16>
 80117c0:	2401      	movs	r4, #1
 80117c2:	4620      	mov	r0, r4
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	6863      	ldr	r3, [r4, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d0f9      	beq.n	80117c0 <rmw_destroy_client+0x10>
 80117cc:	2d00      	cmp	r5, #0
 80117ce:	d0f7      	beq.n	80117c0 <rmw_destroy_client+0x10>
 80117d0:	6828      	ldr	r0, [r5, #0]
 80117d2:	f7f8 fee1 	bl	800a598 <is_uxrce_rmw_identifier_valid>
 80117d6:	2800      	cmp	r0, #0
 80117d8:	d0f2      	beq.n	80117c0 <rmw_destroy_client+0x10>
 80117da:	686e      	ldr	r6, [r5, #4]
 80117dc:	2e00      	cmp	r6, #0
 80117de:	d0ef      	beq.n	80117c0 <rmw_destroy_client+0x10>
 80117e0:	6864      	ldr	r4, [r4, #4]
 80117e2:	6932      	ldr	r2, [r6, #16]
 80117e4:	6920      	ldr	r0, [r4, #16]
 80117e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80117ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80117ee:	6819      	ldr	r1, [r3, #0]
 80117f0:	f7fe fc72 	bl	80100d8 <uxr_buffer_cancel_data>
 80117f4:	4602      	mov	r2, r0
 80117f6:	6920      	ldr	r0, [r4, #16]
 80117f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80117fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011800:	f7f8 fe50 	bl	800a4a4 <run_xrce_session>
 8011804:	6920      	ldr	r0, [r4, #16]
 8011806:	6932      	ldr	r2, [r6, #16]
 8011808:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801180c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011810:	6819      	ldr	r1, [r3, #0]
 8011812:	f7f8 ff3b 	bl	800a68c <uxr_buffer_delete_entity>
 8011816:	4602      	mov	r2, r0
 8011818:	6920      	ldr	r0, [r4, #16]
 801181a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801181e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011822:	f7f8 fe3f 	bl	800a4a4 <run_xrce_session>
 8011826:	4603      	mov	r3, r0
 8011828:	4628      	mov	r0, r5
 801182a:	2b00      	cmp	r3, #0
 801182c:	bf14      	ite	ne
 801182e:	2400      	movne	r4, #0
 8011830:	2402      	moveq	r4, #2
 8011832:	f7f8 fdbb 	bl	800a3ac <rmw_uxrce_fini_client_memory>
 8011836:	e7c4      	b.n	80117c2 <rmw_destroy_client+0x12>

08011838 <rmw_create_guard_condition>:
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4605      	mov	r5, r0
 801183c:	4808      	ldr	r0, [pc, #32]	; (8011860 <rmw_create_guard_condition+0x28>)
 801183e:	f7fc ffe9 	bl	800e814 <get_memory>
 8011842:	4603      	mov	r3, r0
 8011844:	b148      	cbz	r0, 801185a <rmw_create_guard_condition+0x22>
 8011846:	6884      	ldr	r4, [r0, #8]
 8011848:	2300      	movs	r3, #0
 801184a:	61e5      	str	r5, [r4, #28]
 801184c:	7423      	strb	r3, [r4, #16]
 801184e:	f7fd f805 	bl	800e85c <rmw_get_implementation_identifier>
 8011852:	f104 0314 	add.w	r3, r4, #20
 8011856:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801185a:	4618      	mov	r0, r3
 801185c:	bd38      	pop	{r3, r4, r5, pc}
 801185e:	bf00      	nop
 8011860:	2000dc7c 	.word	0x2000dc7c

08011864 <rmw_destroy_guard_condition>:
 8011864:	b508      	push	{r3, lr}
 8011866:	4b08      	ldr	r3, [pc, #32]	; (8011888 <rmw_destroy_guard_condition+0x24>)
 8011868:	6819      	ldr	r1, [r3, #0]
 801186a:	b911      	cbnz	r1, 8011872 <rmw_destroy_guard_condition+0xe>
 801186c:	e00a      	b.n	8011884 <rmw_destroy_guard_condition+0x20>
 801186e:	6849      	ldr	r1, [r1, #4]
 8011870:	b141      	cbz	r1, 8011884 <rmw_destroy_guard_condition+0x20>
 8011872:	688b      	ldr	r3, [r1, #8]
 8011874:	3314      	adds	r3, #20
 8011876:	4298      	cmp	r0, r3
 8011878:	d1f9      	bne.n	801186e <rmw_destroy_guard_condition+0xa>
 801187a:	4803      	ldr	r0, [pc, #12]	; (8011888 <rmw_destroy_guard_condition+0x24>)
 801187c:	f7fc ffda 	bl	800e834 <put_memory>
 8011880:	2000      	movs	r0, #0
 8011882:	bd08      	pop	{r3, pc}
 8011884:	2001      	movs	r0, #1
 8011886:	bd08      	pop	{r3, pc}
 8011888:	2000dc7c 	.word	0x2000dc7c

0801188c <calloc>:
 801188c:	4b02      	ldr	r3, [pc, #8]	; (8011898 <calloc+0xc>)
 801188e:	460a      	mov	r2, r1
 8011890:	4601      	mov	r1, r0
 8011892:	6818      	ldr	r0, [r3, #0]
 8011894:	f000 b89a 	b.w	80119cc <_calloc_r>
 8011898:	200002a4 	.word	0x200002a4

0801189c <__errno>:
 801189c:	4b01      	ldr	r3, [pc, #4]	; (80118a4 <__errno+0x8>)
 801189e:	6818      	ldr	r0, [r3, #0]
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	200002a4 	.word	0x200002a4

080118a8 <getenv>:
 80118a8:	b507      	push	{r0, r1, r2, lr}
 80118aa:	4b04      	ldr	r3, [pc, #16]	; (80118bc <getenv+0x14>)
 80118ac:	4601      	mov	r1, r0
 80118ae:	aa01      	add	r2, sp, #4
 80118b0:	6818      	ldr	r0, [r3, #0]
 80118b2:	f000 f805 	bl	80118c0 <_findenv_r>
 80118b6:	b003      	add	sp, #12
 80118b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80118bc:	200002a4 	.word	0x200002a4

080118c0 <_findenv_r>:
 80118c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8011934 <_findenv_r+0x74>
 80118c8:	4607      	mov	r7, r0
 80118ca:	4689      	mov	r9, r1
 80118cc:	4616      	mov	r6, r2
 80118ce:	f001 fda5 	bl	801341c <__env_lock>
 80118d2:	f8da 4000 	ldr.w	r4, [sl]
 80118d6:	b134      	cbz	r4, 80118e6 <_findenv_r+0x26>
 80118d8:	464b      	mov	r3, r9
 80118da:	4698      	mov	r8, r3
 80118dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118e0:	b13a      	cbz	r2, 80118f2 <_findenv_r+0x32>
 80118e2:	2a3d      	cmp	r2, #61	; 0x3d
 80118e4:	d1f9      	bne.n	80118da <_findenv_r+0x1a>
 80118e6:	4638      	mov	r0, r7
 80118e8:	f001 fd9e 	bl	8013428 <__env_unlock>
 80118ec:	2000      	movs	r0, #0
 80118ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f2:	eba8 0809 	sub.w	r8, r8, r9
 80118f6:	46a3      	mov	fp, r4
 80118f8:	f854 0b04 	ldr.w	r0, [r4], #4
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d0f2      	beq.n	80118e6 <_findenv_r+0x26>
 8011900:	4642      	mov	r2, r8
 8011902:	4649      	mov	r1, r9
 8011904:	f000 fe7f 	bl	8012606 <strncmp>
 8011908:	2800      	cmp	r0, #0
 801190a:	d1f4      	bne.n	80118f6 <_findenv_r+0x36>
 801190c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011910:	eb03 0508 	add.w	r5, r3, r8
 8011914:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011918:	2b3d      	cmp	r3, #61	; 0x3d
 801191a:	d1ec      	bne.n	80118f6 <_findenv_r+0x36>
 801191c:	f8da 3000 	ldr.w	r3, [sl]
 8011920:	ebab 0303 	sub.w	r3, fp, r3
 8011924:	109b      	asrs	r3, r3, #2
 8011926:	4638      	mov	r0, r7
 8011928:	6033      	str	r3, [r6, #0]
 801192a:	f001 fd7d 	bl	8013428 <__env_unlock>
 801192e:	1c68      	adds	r0, r5, #1
 8011930:	e7dd      	b.n	80118ee <_findenv_r+0x2e>
 8011932:	bf00      	nop
 8011934:	20000000 	.word	0x20000000

08011938 <__libc_init_array>:
 8011938:	b570      	push	{r4, r5, r6, lr}
 801193a:	4d0d      	ldr	r5, [pc, #52]	; (8011970 <__libc_init_array+0x38>)
 801193c:	4c0d      	ldr	r4, [pc, #52]	; (8011974 <__libc_init_array+0x3c>)
 801193e:	1b64      	subs	r4, r4, r5
 8011940:	10a4      	asrs	r4, r4, #2
 8011942:	2600      	movs	r6, #0
 8011944:	42a6      	cmp	r6, r4
 8011946:	d109      	bne.n	801195c <__libc_init_array+0x24>
 8011948:	4d0b      	ldr	r5, [pc, #44]	; (8011978 <__libc_init_array+0x40>)
 801194a:	4c0c      	ldr	r4, [pc, #48]	; (801197c <__libc_init_array+0x44>)
 801194c:	f003 f818 	bl	8014980 <_init>
 8011950:	1b64      	subs	r4, r4, r5
 8011952:	10a4      	asrs	r4, r4, #2
 8011954:	2600      	movs	r6, #0
 8011956:	42a6      	cmp	r6, r4
 8011958:	d105      	bne.n	8011966 <__libc_init_array+0x2e>
 801195a:	bd70      	pop	{r4, r5, r6, pc}
 801195c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011960:	4798      	blx	r3
 8011962:	3601      	adds	r6, #1
 8011964:	e7ee      	b.n	8011944 <__libc_init_array+0xc>
 8011966:	f855 3b04 	ldr.w	r3, [r5], #4
 801196a:	4798      	blx	r3
 801196c:	3601      	adds	r6, #1
 801196e:	e7f2      	b.n	8011956 <__libc_init_array+0x1e>
 8011970:	080159f8 	.word	0x080159f8
 8011974:	080159f8 	.word	0x080159f8
 8011978:	080159f8 	.word	0x080159f8
 801197c:	08015a00 	.word	0x08015a00

08011980 <malloc>:
 8011980:	4b02      	ldr	r3, [pc, #8]	; (801198c <malloc+0xc>)
 8011982:	4601      	mov	r1, r0
 8011984:	6818      	ldr	r0, [r3, #0]
 8011986:	f000 b8a3 	b.w	8011ad0 <_malloc_r>
 801198a:	bf00      	nop
 801198c:	200002a4 	.word	0x200002a4

08011990 <free>:
 8011990:	4b02      	ldr	r3, [pc, #8]	; (801199c <free+0xc>)
 8011992:	4601      	mov	r1, r0
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	f000 b82f 	b.w	80119f8 <_free_r>
 801199a:	bf00      	nop
 801199c:	200002a4 	.word	0x200002a4

080119a0 <memcpy>:
 80119a0:	440a      	add	r2, r1
 80119a2:	4291      	cmp	r1, r2
 80119a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80119a8:	d100      	bne.n	80119ac <memcpy+0xc>
 80119aa:	4770      	bx	lr
 80119ac:	b510      	push	{r4, lr}
 80119ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119b6:	4291      	cmp	r1, r2
 80119b8:	d1f9      	bne.n	80119ae <memcpy+0xe>
 80119ba:	bd10      	pop	{r4, pc}

080119bc <memset>:
 80119bc:	4402      	add	r2, r0
 80119be:	4603      	mov	r3, r0
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d100      	bne.n	80119c6 <memset+0xa>
 80119c4:	4770      	bx	lr
 80119c6:	f803 1b01 	strb.w	r1, [r3], #1
 80119ca:	e7f9      	b.n	80119c0 <memset+0x4>

080119cc <_calloc_r>:
 80119cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119ce:	fba1 2402 	umull	r2, r4, r1, r2
 80119d2:	b94c      	cbnz	r4, 80119e8 <_calloc_r+0x1c>
 80119d4:	4611      	mov	r1, r2
 80119d6:	9201      	str	r2, [sp, #4]
 80119d8:	f000 f87a 	bl	8011ad0 <_malloc_r>
 80119dc:	9a01      	ldr	r2, [sp, #4]
 80119de:	4605      	mov	r5, r0
 80119e0:	b930      	cbnz	r0, 80119f0 <_calloc_r+0x24>
 80119e2:	4628      	mov	r0, r5
 80119e4:	b003      	add	sp, #12
 80119e6:	bd30      	pop	{r4, r5, pc}
 80119e8:	220c      	movs	r2, #12
 80119ea:	6002      	str	r2, [r0, #0]
 80119ec:	2500      	movs	r5, #0
 80119ee:	e7f8      	b.n	80119e2 <_calloc_r+0x16>
 80119f0:	4621      	mov	r1, r4
 80119f2:	f7ff ffe3 	bl	80119bc <memset>
 80119f6:	e7f4      	b.n	80119e2 <_calloc_r+0x16>

080119f8 <_free_r>:
 80119f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119fa:	2900      	cmp	r1, #0
 80119fc:	d044      	beq.n	8011a88 <_free_r+0x90>
 80119fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a02:	9001      	str	r0, [sp, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	f1a1 0404 	sub.w	r4, r1, #4
 8011a0a:	bfb8      	it	lt
 8011a0c:	18e4      	addlt	r4, r4, r3
 8011a0e:	f001 fe21 	bl	8013654 <__malloc_lock>
 8011a12:	4a1e      	ldr	r2, [pc, #120]	; (8011a8c <_free_r+0x94>)
 8011a14:	9801      	ldr	r0, [sp, #4]
 8011a16:	6813      	ldr	r3, [r2, #0]
 8011a18:	b933      	cbnz	r3, 8011a28 <_free_r+0x30>
 8011a1a:	6063      	str	r3, [r4, #4]
 8011a1c:	6014      	str	r4, [r2, #0]
 8011a1e:	b003      	add	sp, #12
 8011a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a24:	f001 be1c 	b.w	8013660 <__malloc_unlock>
 8011a28:	42a3      	cmp	r3, r4
 8011a2a:	d908      	bls.n	8011a3e <_free_r+0x46>
 8011a2c:	6825      	ldr	r5, [r4, #0]
 8011a2e:	1961      	adds	r1, r4, r5
 8011a30:	428b      	cmp	r3, r1
 8011a32:	bf01      	itttt	eq
 8011a34:	6819      	ldreq	r1, [r3, #0]
 8011a36:	685b      	ldreq	r3, [r3, #4]
 8011a38:	1949      	addeq	r1, r1, r5
 8011a3a:	6021      	streq	r1, [r4, #0]
 8011a3c:	e7ed      	b.n	8011a1a <_free_r+0x22>
 8011a3e:	461a      	mov	r2, r3
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	b10b      	cbz	r3, 8011a48 <_free_r+0x50>
 8011a44:	42a3      	cmp	r3, r4
 8011a46:	d9fa      	bls.n	8011a3e <_free_r+0x46>
 8011a48:	6811      	ldr	r1, [r2, #0]
 8011a4a:	1855      	adds	r5, r2, r1
 8011a4c:	42a5      	cmp	r5, r4
 8011a4e:	d10b      	bne.n	8011a68 <_free_r+0x70>
 8011a50:	6824      	ldr	r4, [r4, #0]
 8011a52:	4421      	add	r1, r4
 8011a54:	1854      	adds	r4, r2, r1
 8011a56:	42a3      	cmp	r3, r4
 8011a58:	6011      	str	r1, [r2, #0]
 8011a5a:	d1e0      	bne.n	8011a1e <_free_r+0x26>
 8011a5c:	681c      	ldr	r4, [r3, #0]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	6053      	str	r3, [r2, #4]
 8011a62:	4421      	add	r1, r4
 8011a64:	6011      	str	r1, [r2, #0]
 8011a66:	e7da      	b.n	8011a1e <_free_r+0x26>
 8011a68:	d902      	bls.n	8011a70 <_free_r+0x78>
 8011a6a:	230c      	movs	r3, #12
 8011a6c:	6003      	str	r3, [r0, #0]
 8011a6e:	e7d6      	b.n	8011a1e <_free_r+0x26>
 8011a70:	6825      	ldr	r5, [r4, #0]
 8011a72:	1961      	adds	r1, r4, r5
 8011a74:	428b      	cmp	r3, r1
 8011a76:	bf04      	itt	eq
 8011a78:	6819      	ldreq	r1, [r3, #0]
 8011a7a:	685b      	ldreq	r3, [r3, #4]
 8011a7c:	6063      	str	r3, [r4, #4]
 8011a7e:	bf04      	itt	eq
 8011a80:	1949      	addeq	r1, r1, r5
 8011a82:	6021      	streq	r1, [r4, #0]
 8011a84:	6054      	str	r4, [r2, #4]
 8011a86:	e7ca      	b.n	8011a1e <_free_r+0x26>
 8011a88:	b003      	add	sp, #12
 8011a8a:	bd30      	pop	{r4, r5, pc}
 8011a8c:	2000de74 	.word	0x2000de74

08011a90 <sbrk_aligned>:
 8011a90:	b570      	push	{r4, r5, r6, lr}
 8011a92:	4e0e      	ldr	r6, [pc, #56]	; (8011acc <sbrk_aligned+0x3c>)
 8011a94:	460c      	mov	r4, r1
 8011a96:	6831      	ldr	r1, [r6, #0]
 8011a98:	4605      	mov	r5, r0
 8011a9a:	b911      	cbnz	r1, 8011aa2 <sbrk_aligned+0x12>
 8011a9c:	f000 fd5a 	bl	8012554 <_sbrk_r>
 8011aa0:	6030      	str	r0, [r6, #0]
 8011aa2:	4621      	mov	r1, r4
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f000 fd55 	bl	8012554 <_sbrk_r>
 8011aaa:	1c43      	adds	r3, r0, #1
 8011aac:	d00a      	beq.n	8011ac4 <sbrk_aligned+0x34>
 8011aae:	1cc4      	adds	r4, r0, #3
 8011ab0:	f024 0403 	bic.w	r4, r4, #3
 8011ab4:	42a0      	cmp	r0, r4
 8011ab6:	d007      	beq.n	8011ac8 <sbrk_aligned+0x38>
 8011ab8:	1a21      	subs	r1, r4, r0
 8011aba:	4628      	mov	r0, r5
 8011abc:	f000 fd4a 	bl	8012554 <_sbrk_r>
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d101      	bne.n	8011ac8 <sbrk_aligned+0x38>
 8011ac4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011ac8:	4620      	mov	r0, r4
 8011aca:	bd70      	pop	{r4, r5, r6, pc}
 8011acc:	2000de78 	.word	0x2000de78

08011ad0 <_malloc_r>:
 8011ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad4:	1ccd      	adds	r5, r1, #3
 8011ad6:	f025 0503 	bic.w	r5, r5, #3
 8011ada:	3508      	adds	r5, #8
 8011adc:	2d0c      	cmp	r5, #12
 8011ade:	bf38      	it	cc
 8011ae0:	250c      	movcc	r5, #12
 8011ae2:	2d00      	cmp	r5, #0
 8011ae4:	4607      	mov	r7, r0
 8011ae6:	db01      	blt.n	8011aec <_malloc_r+0x1c>
 8011ae8:	42a9      	cmp	r1, r5
 8011aea:	d905      	bls.n	8011af8 <_malloc_r+0x28>
 8011aec:	230c      	movs	r3, #12
 8011aee:	603b      	str	r3, [r7, #0]
 8011af0:	2600      	movs	r6, #0
 8011af2:	4630      	mov	r0, r6
 8011af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af8:	4e2e      	ldr	r6, [pc, #184]	; (8011bb4 <_malloc_r+0xe4>)
 8011afa:	f001 fdab 	bl	8013654 <__malloc_lock>
 8011afe:	6833      	ldr	r3, [r6, #0]
 8011b00:	461c      	mov	r4, r3
 8011b02:	bb34      	cbnz	r4, 8011b52 <_malloc_r+0x82>
 8011b04:	4629      	mov	r1, r5
 8011b06:	4638      	mov	r0, r7
 8011b08:	f7ff ffc2 	bl	8011a90 <sbrk_aligned>
 8011b0c:	1c43      	adds	r3, r0, #1
 8011b0e:	4604      	mov	r4, r0
 8011b10:	d14d      	bne.n	8011bae <_malloc_r+0xde>
 8011b12:	6834      	ldr	r4, [r6, #0]
 8011b14:	4626      	mov	r6, r4
 8011b16:	2e00      	cmp	r6, #0
 8011b18:	d140      	bne.n	8011b9c <_malloc_r+0xcc>
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	4631      	mov	r1, r6
 8011b1e:	4638      	mov	r0, r7
 8011b20:	eb04 0803 	add.w	r8, r4, r3
 8011b24:	f000 fd16 	bl	8012554 <_sbrk_r>
 8011b28:	4580      	cmp	r8, r0
 8011b2a:	d13a      	bne.n	8011ba2 <_malloc_r+0xd2>
 8011b2c:	6821      	ldr	r1, [r4, #0]
 8011b2e:	3503      	adds	r5, #3
 8011b30:	1a6d      	subs	r5, r5, r1
 8011b32:	f025 0503 	bic.w	r5, r5, #3
 8011b36:	3508      	adds	r5, #8
 8011b38:	2d0c      	cmp	r5, #12
 8011b3a:	bf38      	it	cc
 8011b3c:	250c      	movcc	r5, #12
 8011b3e:	4629      	mov	r1, r5
 8011b40:	4638      	mov	r0, r7
 8011b42:	f7ff ffa5 	bl	8011a90 <sbrk_aligned>
 8011b46:	3001      	adds	r0, #1
 8011b48:	d02b      	beq.n	8011ba2 <_malloc_r+0xd2>
 8011b4a:	6823      	ldr	r3, [r4, #0]
 8011b4c:	442b      	add	r3, r5
 8011b4e:	6023      	str	r3, [r4, #0]
 8011b50:	e00e      	b.n	8011b70 <_malloc_r+0xa0>
 8011b52:	6822      	ldr	r2, [r4, #0]
 8011b54:	1b52      	subs	r2, r2, r5
 8011b56:	d41e      	bmi.n	8011b96 <_malloc_r+0xc6>
 8011b58:	2a0b      	cmp	r2, #11
 8011b5a:	d916      	bls.n	8011b8a <_malloc_r+0xba>
 8011b5c:	1961      	adds	r1, r4, r5
 8011b5e:	42a3      	cmp	r3, r4
 8011b60:	6025      	str	r5, [r4, #0]
 8011b62:	bf18      	it	ne
 8011b64:	6059      	strne	r1, [r3, #4]
 8011b66:	6863      	ldr	r3, [r4, #4]
 8011b68:	bf08      	it	eq
 8011b6a:	6031      	streq	r1, [r6, #0]
 8011b6c:	5162      	str	r2, [r4, r5]
 8011b6e:	604b      	str	r3, [r1, #4]
 8011b70:	4638      	mov	r0, r7
 8011b72:	f104 060b 	add.w	r6, r4, #11
 8011b76:	f001 fd73 	bl	8013660 <__malloc_unlock>
 8011b7a:	f026 0607 	bic.w	r6, r6, #7
 8011b7e:	1d23      	adds	r3, r4, #4
 8011b80:	1af2      	subs	r2, r6, r3
 8011b82:	d0b6      	beq.n	8011af2 <_malloc_r+0x22>
 8011b84:	1b9b      	subs	r3, r3, r6
 8011b86:	50a3      	str	r3, [r4, r2]
 8011b88:	e7b3      	b.n	8011af2 <_malloc_r+0x22>
 8011b8a:	6862      	ldr	r2, [r4, #4]
 8011b8c:	42a3      	cmp	r3, r4
 8011b8e:	bf0c      	ite	eq
 8011b90:	6032      	streq	r2, [r6, #0]
 8011b92:	605a      	strne	r2, [r3, #4]
 8011b94:	e7ec      	b.n	8011b70 <_malloc_r+0xa0>
 8011b96:	4623      	mov	r3, r4
 8011b98:	6864      	ldr	r4, [r4, #4]
 8011b9a:	e7b2      	b.n	8011b02 <_malloc_r+0x32>
 8011b9c:	4634      	mov	r4, r6
 8011b9e:	6876      	ldr	r6, [r6, #4]
 8011ba0:	e7b9      	b.n	8011b16 <_malloc_r+0x46>
 8011ba2:	230c      	movs	r3, #12
 8011ba4:	603b      	str	r3, [r7, #0]
 8011ba6:	4638      	mov	r0, r7
 8011ba8:	f001 fd5a 	bl	8013660 <__malloc_unlock>
 8011bac:	e7a1      	b.n	8011af2 <_malloc_r+0x22>
 8011bae:	6025      	str	r5, [r4, #0]
 8011bb0:	e7de      	b.n	8011b70 <_malloc_r+0xa0>
 8011bb2:	bf00      	nop
 8011bb4:	2000de74 	.word	0x2000de74

08011bb8 <__cvt>:
 8011bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bba:	ed2d 8b02 	vpush	{d8}
 8011bbe:	eeb0 8b40 	vmov.f64	d8, d0
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	4617      	mov	r7, r2
 8011bc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011bc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011bca:	ee18 2a90 	vmov	r2, s17
 8011bce:	f025 0520 	bic.w	r5, r5, #32
 8011bd2:	2a00      	cmp	r2, #0
 8011bd4:	bfb6      	itet	lt
 8011bd6:	222d      	movlt	r2, #45	; 0x2d
 8011bd8:	2200      	movge	r2, #0
 8011bda:	eeb1 8b40 	vneglt.f64	d8, d0
 8011bde:	2d46      	cmp	r5, #70	; 0x46
 8011be0:	460c      	mov	r4, r1
 8011be2:	701a      	strb	r2, [r3, #0]
 8011be4:	d004      	beq.n	8011bf0 <__cvt+0x38>
 8011be6:	2d45      	cmp	r5, #69	; 0x45
 8011be8:	d100      	bne.n	8011bec <__cvt+0x34>
 8011bea:	3401      	adds	r4, #1
 8011bec:	2102      	movs	r1, #2
 8011bee:	e000      	b.n	8011bf2 <__cvt+0x3a>
 8011bf0:	2103      	movs	r1, #3
 8011bf2:	ab03      	add	r3, sp, #12
 8011bf4:	9301      	str	r3, [sp, #4]
 8011bf6:	ab02      	add	r3, sp, #8
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	4622      	mov	r2, r4
 8011bfc:	4633      	mov	r3, r6
 8011bfe:	eeb0 0b48 	vmov.f64	d0, d8
 8011c02:	f000 fe9d 	bl	8012940 <_dtoa_r>
 8011c06:	2d47      	cmp	r5, #71	; 0x47
 8011c08:	d101      	bne.n	8011c0e <__cvt+0x56>
 8011c0a:	07fb      	lsls	r3, r7, #31
 8011c0c:	d51a      	bpl.n	8011c44 <__cvt+0x8c>
 8011c0e:	2d46      	cmp	r5, #70	; 0x46
 8011c10:	eb00 0204 	add.w	r2, r0, r4
 8011c14:	d10c      	bne.n	8011c30 <__cvt+0x78>
 8011c16:	7803      	ldrb	r3, [r0, #0]
 8011c18:	2b30      	cmp	r3, #48	; 0x30
 8011c1a:	d107      	bne.n	8011c2c <__cvt+0x74>
 8011c1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c24:	bf1c      	itt	ne
 8011c26:	f1c4 0401 	rsbne	r4, r4, #1
 8011c2a:	6034      	strne	r4, [r6, #0]
 8011c2c:	6833      	ldr	r3, [r6, #0]
 8011c2e:	441a      	add	r2, r3
 8011c30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c38:	bf08      	it	eq
 8011c3a:	9203      	streq	r2, [sp, #12]
 8011c3c:	2130      	movs	r1, #48	; 0x30
 8011c3e:	9b03      	ldr	r3, [sp, #12]
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d307      	bcc.n	8011c54 <__cvt+0x9c>
 8011c44:	9b03      	ldr	r3, [sp, #12]
 8011c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c48:	1a1b      	subs	r3, r3, r0
 8011c4a:	6013      	str	r3, [r2, #0]
 8011c4c:	b005      	add	sp, #20
 8011c4e:	ecbd 8b02 	vpop	{d8}
 8011c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c54:	1c5c      	adds	r4, r3, #1
 8011c56:	9403      	str	r4, [sp, #12]
 8011c58:	7019      	strb	r1, [r3, #0]
 8011c5a:	e7f0      	b.n	8011c3e <__cvt+0x86>

08011c5c <__exponent>:
 8011c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2900      	cmp	r1, #0
 8011c62:	bfb8      	it	lt
 8011c64:	4249      	neglt	r1, r1
 8011c66:	f803 2b02 	strb.w	r2, [r3], #2
 8011c6a:	bfb4      	ite	lt
 8011c6c:	222d      	movlt	r2, #45	; 0x2d
 8011c6e:	222b      	movge	r2, #43	; 0x2b
 8011c70:	2909      	cmp	r1, #9
 8011c72:	7042      	strb	r2, [r0, #1]
 8011c74:	dd2a      	ble.n	8011ccc <__exponent+0x70>
 8011c76:	f10d 0407 	add.w	r4, sp, #7
 8011c7a:	46a4      	mov	ip, r4
 8011c7c:	270a      	movs	r7, #10
 8011c7e:	46a6      	mov	lr, r4
 8011c80:	460a      	mov	r2, r1
 8011c82:	fb91 f6f7 	sdiv	r6, r1, r7
 8011c86:	fb07 1516 	mls	r5, r7, r6, r1
 8011c8a:	3530      	adds	r5, #48	; 0x30
 8011c8c:	2a63      	cmp	r2, #99	; 0x63
 8011c8e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011c92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011c96:	4631      	mov	r1, r6
 8011c98:	dcf1      	bgt.n	8011c7e <__exponent+0x22>
 8011c9a:	3130      	adds	r1, #48	; 0x30
 8011c9c:	f1ae 0502 	sub.w	r5, lr, #2
 8011ca0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011ca4:	1c44      	adds	r4, r0, #1
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	4561      	cmp	r1, ip
 8011caa:	d30a      	bcc.n	8011cc2 <__exponent+0x66>
 8011cac:	f10d 0209 	add.w	r2, sp, #9
 8011cb0:	eba2 020e 	sub.w	r2, r2, lr
 8011cb4:	4565      	cmp	r5, ip
 8011cb6:	bf88      	it	hi
 8011cb8:	2200      	movhi	r2, #0
 8011cba:	4413      	add	r3, r2
 8011cbc:	1a18      	subs	r0, r3, r0
 8011cbe:	b003      	add	sp, #12
 8011cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011cca:	e7ed      	b.n	8011ca8 <__exponent+0x4c>
 8011ccc:	2330      	movs	r3, #48	; 0x30
 8011cce:	3130      	adds	r1, #48	; 0x30
 8011cd0:	7083      	strb	r3, [r0, #2]
 8011cd2:	70c1      	strb	r1, [r0, #3]
 8011cd4:	1d03      	adds	r3, r0, #4
 8011cd6:	e7f1      	b.n	8011cbc <__exponent+0x60>

08011cd8 <_printf_float>:
 8011cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cdc:	b08b      	sub	sp, #44	; 0x2c
 8011cde:	460c      	mov	r4, r1
 8011ce0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011ce4:	4616      	mov	r6, r2
 8011ce6:	461f      	mov	r7, r3
 8011ce8:	4605      	mov	r5, r0
 8011cea:	f001 fcab 	bl	8013644 <_localeconv_r>
 8011cee:	f8d0 b000 	ldr.w	fp, [r0]
 8011cf2:	4658      	mov	r0, fp
 8011cf4:	f7ee fafe 	bl	80002f4 <strlen>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	9308      	str	r3, [sp, #32]
 8011cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8011d00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011d04:	6822      	ldr	r2, [r4, #0]
 8011d06:	3307      	adds	r3, #7
 8011d08:	f023 0307 	bic.w	r3, r3, #7
 8011d0c:	f103 0108 	add.w	r1, r3, #8
 8011d10:	f8c8 1000 	str.w	r1, [r8]
 8011d14:	4682      	mov	sl, r0
 8011d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011d1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011f80 <_printf_float+0x2a8>
 8011d22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011d26:	eeb0 6bc0 	vabs.f64	d6, d0
 8011d2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d32:	dd24      	ble.n	8011d7e <_printf_float+0xa6>
 8011d34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3c:	d502      	bpl.n	8011d44 <_printf_float+0x6c>
 8011d3e:	232d      	movs	r3, #45	; 0x2d
 8011d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d44:	4b90      	ldr	r3, [pc, #576]	; (8011f88 <_printf_float+0x2b0>)
 8011d46:	4891      	ldr	r0, [pc, #580]	; (8011f8c <_printf_float+0x2b4>)
 8011d48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011d4c:	bf94      	ite	ls
 8011d4e:	4698      	movls	r8, r3
 8011d50:	4680      	movhi	r8, r0
 8011d52:	2303      	movs	r3, #3
 8011d54:	6123      	str	r3, [r4, #16]
 8011d56:	f022 0204 	bic.w	r2, r2, #4
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	6022      	str	r2, [r4, #0]
 8011d5e:	9304      	str	r3, [sp, #16]
 8011d60:	9700      	str	r7, [sp, #0]
 8011d62:	4633      	mov	r3, r6
 8011d64:	aa09      	add	r2, sp, #36	; 0x24
 8011d66:	4621      	mov	r1, r4
 8011d68:	4628      	mov	r0, r5
 8011d6a:	f000 f9d3 	bl	8012114 <_printf_common>
 8011d6e:	3001      	adds	r0, #1
 8011d70:	f040 808a 	bne.w	8011e88 <_printf_float+0x1b0>
 8011d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d78:	b00b      	add	sp, #44	; 0x2c
 8011d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d86:	d709      	bvc.n	8011d9c <_printf_float+0xc4>
 8011d88:	ee10 3a90 	vmov	r3, s1
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	bfbc      	itt	lt
 8011d90:	232d      	movlt	r3, #45	; 0x2d
 8011d92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011d96:	487e      	ldr	r0, [pc, #504]	; (8011f90 <_printf_float+0x2b8>)
 8011d98:	4b7e      	ldr	r3, [pc, #504]	; (8011f94 <_printf_float+0x2bc>)
 8011d9a:	e7d5      	b.n	8011d48 <_printf_float+0x70>
 8011d9c:	6863      	ldr	r3, [r4, #4]
 8011d9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011da2:	9104      	str	r1, [sp, #16]
 8011da4:	1c59      	adds	r1, r3, #1
 8011da6:	d13c      	bne.n	8011e22 <_printf_float+0x14a>
 8011da8:	2306      	movs	r3, #6
 8011daa:	6063      	str	r3, [r4, #4]
 8011dac:	2300      	movs	r3, #0
 8011dae:	9303      	str	r3, [sp, #12]
 8011db0:	ab08      	add	r3, sp, #32
 8011db2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011dba:	ab07      	add	r3, sp, #28
 8011dbc:	6861      	ldr	r1, [r4, #4]
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	6022      	str	r2, [r4, #0]
 8011dc2:	f10d 031b 	add.w	r3, sp, #27
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	f7ff fef6 	bl	8011bb8 <__cvt>
 8011dcc:	9b04      	ldr	r3, [sp, #16]
 8011dce:	9907      	ldr	r1, [sp, #28]
 8011dd0:	2b47      	cmp	r3, #71	; 0x47
 8011dd2:	4680      	mov	r8, r0
 8011dd4:	d108      	bne.n	8011de8 <_printf_float+0x110>
 8011dd6:	1cc8      	adds	r0, r1, #3
 8011dd8:	db02      	blt.n	8011de0 <_printf_float+0x108>
 8011dda:	6863      	ldr	r3, [r4, #4]
 8011ddc:	4299      	cmp	r1, r3
 8011dde:	dd41      	ble.n	8011e64 <_printf_float+0x18c>
 8011de0:	f1a9 0902 	sub.w	r9, r9, #2
 8011de4:	fa5f f989 	uxtb.w	r9, r9
 8011de8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011dec:	d820      	bhi.n	8011e30 <_printf_float+0x158>
 8011dee:	3901      	subs	r1, #1
 8011df0:	464a      	mov	r2, r9
 8011df2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011df6:	9107      	str	r1, [sp, #28]
 8011df8:	f7ff ff30 	bl	8011c5c <__exponent>
 8011dfc:	9a08      	ldr	r2, [sp, #32]
 8011dfe:	9004      	str	r0, [sp, #16]
 8011e00:	1813      	adds	r3, r2, r0
 8011e02:	2a01      	cmp	r2, #1
 8011e04:	6123      	str	r3, [r4, #16]
 8011e06:	dc02      	bgt.n	8011e0e <_printf_float+0x136>
 8011e08:	6822      	ldr	r2, [r4, #0]
 8011e0a:	07d2      	lsls	r2, r2, #31
 8011e0c:	d501      	bpl.n	8011e12 <_printf_float+0x13a>
 8011e0e:	3301      	adds	r3, #1
 8011e10:	6123      	str	r3, [r4, #16]
 8011e12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d0a2      	beq.n	8011d60 <_printf_float+0x88>
 8011e1a:	232d      	movs	r3, #45	; 0x2d
 8011e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e20:	e79e      	b.n	8011d60 <_printf_float+0x88>
 8011e22:	9904      	ldr	r1, [sp, #16]
 8011e24:	2947      	cmp	r1, #71	; 0x47
 8011e26:	d1c1      	bne.n	8011dac <_printf_float+0xd4>
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d1bf      	bne.n	8011dac <_printf_float+0xd4>
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	e7bc      	b.n	8011daa <_printf_float+0xd2>
 8011e30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011e34:	d118      	bne.n	8011e68 <_printf_float+0x190>
 8011e36:	2900      	cmp	r1, #0
 8011e38:	6863      	ldr	r3, [r4, #4]
 8011e3a:	dd0b      	ble.n	8011e54 <_printf_float+0x17c>
 8011e3c:	6121      	str	r1, [r4, #16]
 8011e3e:	b913      	cbnz	r3, 8011e46 <_printf_float+0x16e>
 8011e40:	6822      	ldr	r2, [r4, #0]
 8011e42:	07d0      	lsls	r0, r2, #31
 8011e44:	d502      	bpl.n	8011e4c <_printf_float+0x174>
 8011e46:	3301      	adds	r3, #1
 8011e48:	440b      	add	r3, r1
 8011e4a:	6123      	str	r3, [r4, #16]
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011e50:	9304      	str	r3, [sp, #16]
 8011e52:	e7de      	b.n	8011e12 <_printf_float+0x13a>
 8011e54:	b913      	cbnz	r3, 8011e5c <_printf_float+0x184>
 8011e56:	6822      	ldr	r2, [r4, #0]
 8011e58:	07d2      	lsls	r2, r2, #31
 8011e5a:	d501      	bpl.n	8011e60 <_printf_float+0x188>
 8011e5c:	3302      	adds	r3, #2
 8011e5e:	e7f4      	b.n	8011e4a <_printf_float+0x172>
 8011e60:	2301      	movs	r3, #1
 8011e62:	e7f2      	b.n	8011e4a <_printf_float+0x172>
 8011e64:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011e68:	9b08      	ldr	r3, [sp, #32]
 8011e6a:	4299      	cmp	r1, r3
 8011e6c:	db05      	blt.n	8011e7a <_printf_float+0x1a2>
 8011e6e:	6823      	ldr	r3, [r4, #0]
 8011e70:	6121      	str	r1, [r4, #16]
 8011e72:	07d8      	lsls	r0, r3, #31
 8011e74:	d5ea      	bpl.n	8011e4c <_printf_float+0x174>
 8011e76:	1c4b      	adds	r3, r1, #1
 8011e78:	e7e7      	b.n	8011e4a <_printf_float+0x172>
 8011e7a:	2900      	cmp	r1, #0
 8011e7c:	bfd4      	ite	le
 8011e7e:	f1c1 0202 	rsble	r2, r1, #2
 8011e82:	2201      	movgt	r2, #1
 8011e84:	4413      	add	r3, r2
 8011e86:	e7e0      	b.n	8011e4a <_printf_float+0x172>
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	055a      	lsls	r2, r3, #21
 8011e8c:	d407      	bmi.n	8011e9e <_printf_float+0x1c6>
 8011e8e:	6923      	ldr	r3, [r4, #16]
 8011e90:	4642      	mov	r2, r8
 8011e92:	4631      	mov	r1, r6
 8011e94:	4628      	mov	r0, r5
 8011e96:	47b8      	blx	r7
 8011e98:	3001      	adds	r0, #1
 8011e9a:	d12a      	bne.n	8011ef2 <_printf_float+0x21a>
 8011e9c:	e76a      	b.n	8011d74 <_printf_float+0x9c>
 8011e9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011ea2:	f240 80e2 	bls.w	801206a <_printf_float+0x392>
 8011ea6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011eaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb2:	d133      	bne.n	8011f1c <_printf_float+0x244>
 8011eb4:	4a38      	ldr	r2, [pc, #224]	; (8011f98 <_printf_float+0x2c0>)
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	4631      	mov	r1, r6
 8011eba:	4628      	mov	r0, r5
 8011ebc:	47b8      	blx	r7
 8011ebe:	3001      	adds	r0, #1
 8011ec0:	f43f af58 	beq.w	8011d74 <_printf_float+0x9c>
 8011ec4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	db02      	blt.n	8011ed2 <_printf_float+0x1fa>
 8011ecc:	6823      	ldr	r3, [r4, #0]
 8011ece:	07d8      	lsls	r0, r3, #31
 8011ed0:	d50f      	bpl.n	8011ef2 <_printf_float+0x21a>
 8011ed2:	4653      	mov	r3, sl
 8011ed4:	465a      	mov	r2, fp
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	4628      	mov	r0, r5
 8011eda:	47b8      	blx	r7
 8011edc:	3001      	adds	r0, #1
 8011ede:	f43f af49 	beq.w	8011d74 <_printf_float+0x9c>
 8011ee2:	f04f 0800 	mov.w	r8, #0
 8011ee6:	f104 091a 	add.w	r9, r4, #26
 8011eea:	9b08      	ldr	r3, [sp, #32]
 8011eec:	3b01      	subs	r3, #1
 8011eee:	4543      	cmp	r3, r8
 8011ef0:	dc09      	bgt.n	8011f06 <_printf_float+0x22e>
 8011ef2:	6823      	ldr	r3, [r4, #0]
 8011ef4:	079b      	lsls	r3, r3, #30
 8011ef6:	f100 8108 	bmi.w	801210a <_printf_float+0x432>
 8011efa:	68e0      	ldr	r0, [r4, #12]
 8011efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011efe:	4298      	cmp	r0, r3
 8011f00:	bfb8      	it	lt
 8011f02:	4618      	movlt	r0, r3
 8011f04:	e738      	b.n	8011d78 <_printf_float+0xa0>
 8011f06:	2301      	movs	r3, #1
 8011f08:	464a      	mov	r2, r9
 8011f0a:	4631      	mov	r1, r6
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	47b8      	blx	r7
 8011f10:	3001      	adds	r0, #1
 8011f12:	f43f af2f 	beq.w	8011d74 <_printf_float+0x9c>
 8011f16:	f108 0801 	add.w	r8, r8, #1
 8011f1a:	e7e6      	b.n	8011eea <_printf_float+0x212>
 8011f1c:	9b07      	ldr	r3, [sp, #28]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	dc3c      	bgt.n	8011f9c <_printf_float+0x2c4>
 8011f22:	4a1d      	ldr	r2, [pc, #116]	; (8011f98 <_printf_float+0x2c0>)
 8011f24:	2301      	movs	r3, #1
 8011f26:	4631      	mov	r1, r6
 8011f28:	4628      	mov	r0, r5
 8011f2a:	47b8      	blx	r7
 8011f2c:	3001      	adds	r0, #1
 8011f2e:	f43f af21 	beq.w	8011d74 <_printf_float+0x9c>
 8011f32:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011f36:	4313      	orrs	r3, r2
 8011f38:	d102      	bne.n	8011f40 <_printf_float+0x268>
 8011f3a:	6823      	ldr	r3, [r4, #0]
 8011f3c:	07d9      	lsls	r1, r3, #31
 8011f3e:	d5d8      	bpl.n	8011ef2 <_printf_float+0x21a>
 8011f40:	4653      	mov	r3, sl
 8011f42:	465a      	mov	r2, fp
 8011f44:	4631      	mov	r1, r6
 8011f46:	4628      	mov	r0, r5
 8011f48:	47b8      	blx	r7
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	f43f af12 	beq.w	8011d74 <_printf_float+0x9c>
 8011f50:	f04f 0900 	mov.w	r9, #0
 8011f54:	f104 0a1a 	add.w	sl, r4, #26
 8011f58:	9b07      	ldr	r3, [sp, #28]
 8011f5a:	425b      	negs	r3, r3
 8011f5c:	454b      	cmp	r3, r9
 8011f5e:	dc01      	bgt.n	8011f64 <_printf_float+0x28c>
 8011f60:	9b08      	ldr	r3, [sp, #32]
 8011f62:	e795      	b.n	8011e90 <_printf_float+0x1b8>
 8011f64:	2301      	movs	r3, #1
 8011f66:	4652      	mov	r2, sl
 8011f68:	4631      	mov	r1, r6
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	47b8      	blx	r7
 8011f6e:	3001      	adds	r0, #1
 8011f70:	f43f af00 	beq.w	8011d74 <_printf_float+0x9c>
 8011f74:	f109 0901 	add.w	r9, r9, #1
 8011f78:	e7ee      	b.n	8011f58 <_printf_float+0x280>
 8011f7a:	bf00      	nop
 8011f7c:	f3af 8000 	nop.w
 8011f80:	ffffffff 	.word	0xffffffff
 8011f84:	7fefffff 	.word	0x7fefffff
 8011f88:	080156bc 	.word	0x080156bc
 8011f8c:	080156c0 	.word	0x080156c0
 8011f90:	080156c8 	.word	0x080156c8
 8011f94:	080156c4 	.word	0x080156c4
 8011f98:	080156cc 	.word	0x080156cc
 8011f9c:	9a08      	ldr	r2, [sp, #32]
 8011f9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	bfa8      	it	ge
 8011fa4:	461a      	movge	r2, r3
 8011fa6:	2a00      	cmp	r2, #0
 8011fa8:	4691      	mov	r9, r2
 8011faa:	dc38      	bgt.n	801201e <_printf_float+0x346>
 8011fac:	2300      	movs	r3, #0
 8011fae:	9305      	str	r3, [sp, #20]
 8011fb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fb4:	f104 021a 	add.w	r2, r4, #26
 8011fb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011fba:	9905      	ldr	r1, [sp, #20]
 8011fbc:	9304      	str	r3, [sp, #16]
 8011fbe:	eba3 0309 	sub.w	r3, r3, r9
 8011fc2:	428b      	cmp	r3, r1
 8011fc4:	dc33      	bgt.n	801202e <_printf_float+0x356>
 8011fc6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	db3c      	blt.n	8012048 <_printf_float+0x370>
 8011fce:	6823      	ldr	r3, [r4, #0]
 8011fd0:	07da      	lsls	r2, r3, #31
 8011fd2:	d439      	bmi.n	8012048 <_printf_float+0x370>
 8011fd4:	9b08      	ldr	r3, [sp, #32]
 8011fd6:	9a04      	ldr	r2, [sp, #16]
 8011fd8:	9907      	ldr	r1, [sp, #28]
 8011fda:	1a9a      	subs	r2, r3, r2
 8011fdc:	eba3 0901 	sub.w	r9, r3, r1
 8011fe0:	4591      	cmp	r9, r2
 8011fe2:	bfa8      	it	ge
 8011fe4:	4691      	movge	r9, r2
 8011fe6:	f1b9 0f00 	cmp.w	r9, #0
 8011fea:	dc35      	bgt.n	8012058 <_printf_float+0x380>
 8011fec:	f04f 0800 	mov.w	r8, #0
 8011ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ff4:	f104 0a1a 	add.w	sl, r4, #26
 8011ff8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011ffc:	1a9b      	subs	r3, r3, r2
 8011ffe:	eba3 0309 	sub.w	r3, r3, r9
 8012002:	4543      	cmp	r3, r8
 8012004:	f77f af75 	ble.w	8011ef2 <_printf_float+0x21a>
 8012008:	2301      	movs	r3, #1
 801200a:	4652      	mov	r2, sl
 801200c:	4631      	mov	r1, r6
 801200e:	4628      	mov	r0, r5
 8012010:	47b8      	blx	r7
 8012012:	3001      	adds	r0, #1
 8012014:	f43f aeae 	beq.w	8011d74 <_printf_float+0x9c>
 8012018:	f108 0801 	add.w	r8, r8, #1
 801201c:	e7ec      	b.n	8011ff8 <_printf_float+0x320>
 801201e:	4613      	mov	r3, r2
 8012020:	4631      	mov	r1, r6
 8012022:	4642      	mov	r2, r8
 8012024:	4628      	mov	r0, r5
 8012026:	47b8      	blx	r7
 8012028:	3001      	adds	r0, #1
 801202a:	d1bf      	bne.n	8011fac <_printf_float+0x2d4>
 801202c:	e6a2      	b.n	8011d74 <_printf_float+0x9c>
 801202e:	2301      	movs	r3, #1
 8012030:	4631      	mov	r1, r6
 8012032:	4628      	mov	r0, r5
 8012034:	9204      	str	r2, [sp, #16]
 8012036:	47b8      	blx	r7
 8012038:	3001      	adds	r0, #1
 801203a:	f43f ae9b 	beq.w	8011d74 <_printf_float+0x9c>
 801203e:	9b05      	ldr	r3, [sp, #20]
 8012040:	9a04      	ldr	r2, [sp, #16]
 8012042:	3301      	adds	r3, #1
 8012044:	9305      	str	r3, [sp, #20]
 8012046:	e7b7      	b.n	8011fb8 <_printf_float+0x2e0>
 8012048:	4653      	mov	r3, sl
 801204a:	465a      	mov	r2, fp
 801204c:	4631      	mov	r1, r6
 801204e:	4628      	mov	r0, r5
 8012050:	47b8      	blx	r7
 8012052:	3001      	adds	r0, #1
 8012054:	d1be      	bne.n	8011fd4 <_printf_float+0x2fc>
 8012056:	e68d      	b.n	8011d74 <_printf_float+0x9c>
 8012058:	9a04      	ldr	r2, [sp, #16]
 801205a:	464b      	mov	r3, r9
 801205c:	4442      	add	r2, r8
 801205e:	4631      	mov	r1, r6
 8012060:	4628      	mov	r0, r5
 8012062:	47b8      	blx	r7
 8012064:	3001      	adds	r0, #1
 8012066:	d1c1      	bne.n	8011fec <_printf_float+0x314>
 8012068:	e684      	b.n	8011d74 <_printf_float+0x9c>
 801206a:	9a08      	ldr	r2, [sp, #32]
 801206c:	2a01      	cmp	r2, #1
 801206e:	dc01      	bgt.n	8012074 <_printf_float+0x39c>
 8012070:	07db      	lsls	r3, r3, #31
 8012072:	d537      	bpl.n	80120e4 <_printf_float+0x40c>
 8012074:	2301      	movs	r3, #1
 8012076:	4642      	mov	r2, r8
 8012078:	4631      	mov	r1, r6
 801207a:	4628      	mov	r0, r5
 801207c:	47b8      	blx	r7
 801207e:	3001      	adds	r0, #1
 8012080:	f43f ae78 	beq.w	8011d74 <_printf_float+0x9c>
 8012084:	4653      	mov	r3, sl
 8012086:	465a      	mov	r2, fp
 8012088:	4631      	mov	r1, r6
 801208a:	4628      	mov	r0, r5
 801208c:	47b8      	blx	r7
 801208e:	3001      	adds	r0, #1
 8012090:	f43f ae70 	beq.w	8011d74 <_printf_float+0x9c>
 8012094:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012098:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a0:	d01b      	beq.n	80120da <_printf_float+0x402>
 80120a2:	9b08      	ldr	r3, [sp, #32]
 80120a4:	f108 0201 	add.w	r2, r8, #1
 80120a8:	3b01      	subs	r3, #1
 80120aa:	4631      	mov	r1, r6
 80120ac:	4628      	mov	r0, r5
 80120ae:	47b8      	blx	r7
 80120b0:	3001      	adds	r0, #1
 80120b2:	d10e      	bne.n	80120d2 <_printf_float+0x3fa>
 80120b4:	e65e      	b.n	8011d74 <_printf_float+0x9c>
 80120b6:	2301      	movs	r3, #1
 80120b8:	464a      	mov	r2, r9
 80120ba:	4631      	mov	r1, r6
 80120bc:	4628      	mov	r0, r5
 80120be:	47b8      	blx	r7
 80120c0:	3001      	adds	r0, #1
 80120c2:	f43f ae57 	beq.w	8011d74 <_printf_float+0x9c>
 80120c6:	f108 0801 	add.w	r8, r8, #1
 80120ca:	9b08      	ldr	r3, [sp, #32]
 80120cc:	3b01      	subs	r3, #1
 80120ce:	4543      	cmp	r3, r8
 80120d0:	dcf1      	bgt.n	80120b6 <_printf_float+0x3de>
 80120d2:	9b04      	ldr	r3, [sp, #16]
 80120d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80120d8:	e6db      	b.n	8011e92 <_printf_float+0x1ba>
 80120da:	f04f 0800 	mov.w	r8, #0
 80120de:	f104 091a 	add.w	r9, r4, #26
 80120e2:	e7f2      	b.n	80120ca <_printf_float+0x3f2>
 80120e4:	2301      	movs	r3, #1
 80120e6:	4642      	mov	r2, r8
 80120e8:	e7df      	b.n	80120aa <_printf_float+0x3d2>
 80120ea:	2301      	movs	r3, #1
 80120ec:	464a      	mov	r2, r9
 80120ee:	4631      	mov	r1, r6
 80120f0:	4628      	mov	r0, r5
 80120f2:	47b8      	blx	r7
 80120f4:	3001      	adds	r0, #1
 80120f6:	f43f ae3d 	beq.w	8011d74 <_printf_float+0x9c>
 80120fa:	f108 0801 	add.w	r8, r8, #1
 80120fe:	68e3      	ldr	r3, [r4, #12]
 8012100:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012102:	1a5b      	subs	r3, r3, r1
 8012104:	4543      	cmp	r3, r8
 8012106:	dcf0      	bgt.n	80120ea <_printf_float+0x412>
 8012108:	e6f7      	b.n	8011efa <_printf_float+0x222>
 801210a:	f04f 0800 	mov.w	r8, #0
 801210e:	f104 0919 	add.w	r9, r4, #25
 8012112:	e7f4      	b.n	80120fe <_printf_float+0x426>

08012114 <_printf_common>:
 8012114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012118:	4616      	mov	r6, r2
 801211a:	4699      	mov	r9, r3
 801211c:	688a      	ldr	r2, [r1, #8]
 801211e:	690b      	ldr	r3, [r1, #16]
 8012120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012124:	4293      	cmp	r3, r2
 8012126:	bfb8      	it	lt
 8012128:	4613      	movlt	r3, r2
 801212a:	6033      	str	r3, [r6, #0]
 801212c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012130:	4607      	mov	r7, r0
 8012132:	460c      	mov	r4, r1
 8012134:	b10a      	cbz	r2, 801213a <_printf_common+0x26>
 8012136:	3301      	adds	r3, #1
 8012138:	6033      	str	r3, [r6, #0]
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	0699      	lsls	r1, r3, #26
 801213e:	bf42      	ittt	mi
 8012140:	6833      	ldrmi	r3, [r6, #0]
 8012142:	3302      	addmi	r3, #2
 8012144:	6033      	strmi	r3, [r6, #0]
 8012146:	6825      	ldr	r5, [r4, #0]
 8012148:	f015 0506 	ands.w	r5, r5, #6
 801214c:	d106      	bne.n	801215c <_printf_common+0x48>
 801214e:	f104 0a19 	add.w	sl, r4, #25
 8012152:	68e3      	ldr	r3, [r4, #12]
 8012154:	6832      	ldr	r2, [r6, #0]
 8012156:	1a9b      	subs	r3, r3, r2
 8012158:	42ab      	cmp	r3, r5
 801215a:	dc26      	bgt.n	80121aa <_printf_common+0x96>
 801215c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012160:	1e13      	subs	r3, r2, #0
 8012162:	6822      	ldr	r2, [r4, #0]
 8012164:	bf18      	it	ne
 8012166:	2301      	movne	r3, #1
 8012168:	0692      	lsls	r2, r2, #26
 801216a:	d42b      	bmi.n	80121c4 <_printf_common+0xb0>
 801216c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012170:	4649      	mov	r1, r9
 8012172:	4638      	mov	r0, r7
 8012174:	47c0      	blx	r8
 8012176:	3001      	adds	r0, #1
 8012178:	d01e      	beq.n	80121b8 <_printf_common+0xa4>
 801217a:	6823      	ldr	r3, [r4, #0]
 801217c:	68e5      	ldr	r5, [r4, #12]
 801217e:	6832      	ldr	r2, [r6, #0]
 8012180:	f003 0306 	and.w	r3, r3, #6
 8012184:	2b04      	cmp	r3, #4
 8012186:	bf08      	it	eq
 8012188:	1aad      	subeq	r5, r5, r2
 801218a:	68a3      	ldr	r3, [r4, #8]
 801218c:	6922      	ldr	r2, [r4, #16]
 801218e:	bf0c      	ite	eq
 8012190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012194:	2500      	movne	r5, #0
 8012196:	4293      	cmp	r3, r2
 8012198:	bfc4      	itt	gt
 801219a:	1a9b      	subgt	r3, r3, r2
 801219c:	18ed      	addgt	r5, r5, r3
 801219e:	2600      	movs	r6, #0
 80121a0:	341a      	adds	r4, #26
 80121a2:	42b5      	cmp	r5, r6
 80121a4:	d11a      	bne.n	80121dc <_printf_common+0xc8>
 80121a6:	2000      	movs	r0, #0
 80121a8:	e008      	b.n	80121bc <_printf_common+0xa8>
 80121aa:	2301      	movs	r3, #1
 80121ac:	4652      	mov	r2, sl
 80121ae:	4649      	mov	r1, r9
 80121b0:	4638      	mov	r0, r7
 80121b2:	47c0      	blx	r8
 80121b4:	3001      	adds	r0, #1
 80121b6:	d103      	bne.n	80121c0 <_printf_common+0xac>
 80121b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c0:	3501      	adds	r5, #1
 80121c2:	e7c6      	b.n	8012152 <_printf_common+0x3e>
 80121c4:	18e1      	adds	r1, r4, r3
 80121c6:	1c5a      	adds	r2, r3, #1
 80121c8:	2030      	movs	r0, #48	; 0x30
 80121ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80121ce:	4422      	add	r2, r4
 80121d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80121d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80121d8:	3302      	adds	r3, #2
 80121da:	e7c7      	b.n	801216c <_printf_common+0x58>
 80121dc:	2301      	movs	r3, #1
 80121de:	4622      	mov	r2, r4
 80121e0:	4649      	mov	r1, r9
 80121e2:	4638      	mov	r0, r7
 80121e4:	47c0      	blx	r8
 80121e6:	3001      	adds	r0, #1
 80121e8:	d0e6      	beq.n	80121b8 <_printf_common+0xa4>
 80121ea:	3601      	adds	r6, #1
 80121ec:	e7d9      	b.n	80121a2 <_printf_common+0x8e>
	...

080121f0 <_printf_i>:
 80121f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121f4:	7e0f      	ldrb	r7, [r1, #24]
 80121f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121f8:	2f78      	cmp	r7, #120	; 0x78
 80121fa:	4691      	mov	r9, r2
 80121fc:	4680      	mov	r8, r0
 80121fe:	460c      	mov	r4, r1
 8012200:	469a      	mov	sl, r3
 8012202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012206:	d807      	bhi.n	8012218 <_printf_i+0x28>
 8012208:	2f62      	cmp	r7, #98	; 0x62
 801220a:	d80a      	bhi.n	8012222 <_printf_i+0x32>
 801220c:	2f00      	cmp	r7, #0
 801220e:	f000 80d8 	beq.w	80123c2 <_printf_i+0x1d2>
 8012212:	2f58      	cmp	r7, #88	; 0x58
 8012214:	f000 80a3 	beq.w	801235e <_printf_i+0x16e>
 8012218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801221c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012220:	e03a      	b.n	8012298 <_printf_i+0xa8>
 8012222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012226:	2b15      	cmp	r3, #21
 8012228:	d8f6      	bhi.n	8012218 <_printf_i+0x28>
 801222a:	a101      	add	r1, pc, #4	; (adr r1, 8012230 <_printf_i+0x40>)
 801222c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012230:	08012289 	.word	0x08012289
 8012234:	0801229d 	.word	0x0801229d
 8012238:	08012219 	.word	0x08012219
 801223c:	08012219 	.word	0x08012219
 8012240:	08012219 	.word	0x08012219
 8012244:	08012219 	.word	0x08012219
 8012248:	0801229d 	.word	0x0801229d
 801224c:	08012219 	.word	0x08012219
 8012250:	08012219 	.word	0x08012219
 8012254:	08012219 	.word	0x08012219
 8012258:	08012219 	.word	0x08012219
 801225c:	080123a9 	.word	0x080123a9
 8012260:	080122cd 	.word	0x080122cd
 8012264:	0801238b 	.word	0x0801238b
 8012268:	08012219 	.word	0x08012219
 801226c:	08012219 	.word	0x08012219
 8012270:	080123cb 	.word	0x080123cb
 8012274:	08012219 	.word	0x08012219
 8012278:	080122cd 	.word	0x080122cd
 801227c:	08012219 	.word	0x08012219
 8012280:	08012219 	.word	0x08012219
 8012284:	08012393 	.word	0x08012393
 8012288:	682b      	ldr	r3, [r5, #0]
 801228a:	1d1a      	adds	r2, r3, #4
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	602a      	str	r2, [r5, #0]
 8012290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012298:	2301      	movs	r3, #1
 801229a:	e0a3      	b.n	80123e4 <_printf_i+0x1f4>
 801229c:	6820      	ldr	r0, [r4, #0]
 801229e:	6829      	ldr	r1, [r5, #0]
 80122a0:	0606      	lsls	r6, r0, #24
 80122a2:	f101 0304 	add.w	r3, r1, #4
 80122a6:	d50a      	bpl.n	80122be <_printf_i+0xce>
 80122a8:	680e      	ldr	r6, [r1, #0]
 80122aa:	602b      	str	r3, [r5, #0]
 80122ac:	2e00      	cmp	r6, #0
 80122ae:	da03      	bge.n	80122b8 <_printf_i+0xc8>
 80122b0:	232d      	movs	r3, #45	; 0x2d
 80122b2:	4276      	negs	r6, r6
 80122b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122b8:	485e      	ldr	r0, [pc, #376]	; (8012434 <_printf_i+0x244>)
 80122ba:	230a      	movs	r3, #10
 80122bc:	e019      	b.n	80122f2 <_printf_i+0x102>
 80122be:	680e      	ldr	r6, [r1, #0]
 80122c0:	602b      	str	r3, [r5, #0]
 80122c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80122c6:	bf18      	it	ne
 80122c8:	b236      	sxthne	r6, r6
 80122ca:	e7ef      	b.n	80122ac <_printf_i+0xbc>
 80122cc:	682b      	ldr	r3, [r5, #0]
 80122ce:	6820      	ldr	r0, [r4, #0]
 80122d0:	1d19      	adds	r1, r3, #4
 80122d2:	6029      	str	r1, [r5, #0]
 80122d4:	0601      	lsls	r1, r0, #24
 80122d6:	d501      	bpl.n	80122dc <_printf_i+0xec>
 80122d8:	681e      	ldr	r6, [r3, #0]
 80122da:	e002      	b.n	80122e2 <_printf_i+0xf2>
 80122dc:	0646      	lsls	r6, r0, #25
 80122de:	d5fb      	bpl.n	80122d8 <_printf_i+0xe8>
 80122e0:	881e      	ldrh	r6, [r3, #0]
 80122e2:	4854      	ldr	r0, [pc, #336]	; (8012434 <_printf_i+0x244>)
 80122e4:	2f6f      	cmp	r7, #111	; 0x6f
 80122e6:	bf0c      	ite	eq
 80122e8:	2308      	moveq	r3, #8
 80122ea:	230a      	movne	r3, #10
 80122ec:	2100      	movs	r1, #0
 80122ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80122f2:	6865      	ldr	r5, [r4, #4]
 80122f4:	60a5      	str	r5, [r4, #8]
 80122f6:	2d00      	cmp	r5, #0
 80122f8:	bfa2      	ittt	ge
 80122fa:	6821      	ldrge	r1, [r4, #0]
 80122fc:	f021 0104 	bicge.w	r1, r1, #4
 8012300:	6021      	strge	r1, [r4, #0]
 8012302:	b90e      	cbnz	r6, 8012308 <_printf_i+0x118>
 8012304:	2d00      	cmp	r5, #0
 8012306:	d04d      	beq.n	80123a4 <_printf_i+0x1b4>
 8012308:	4615      	mov	r5, r2
 801230a:	fbb6 f1f3 	udiv	r1, r6, r3
 801230e:	fb03 6711 	mls	r7, r3, r1, r6
 8012312:	5dc7      	ldrb	r7, [r0, r7]
 8012314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012318:	4637      	mov	r7, r6
 801231a:	42bb      	cmp	r3, r7
 801231c:	460e      	mov	r6, r1
 801231e:	d9f4      	bls.n	801230a <_printf_i+0x11a>
 8012320:	2b08      	cmp	r3, #8
 8012322:	d10b      	bne.n	801233c <_printf_i+0x14c>
 8012324:	6823      	ldr	r3, [r4, #0]
 8012326:	07de      	lsls	r6, r3, #31
 8012328:	d508      	bpl.n	801233c <_printf_i+0x14c>
 801232a:	6923      	ldr	r3, [r4, #16]
 801232c:	6861      	ldr	r1, [r4, #4]
 801232e:	4299      	cmp	r1, r3
 8012330:	bfde      	ittt	le
 8012332:	2330      	movle	r3, #48	; 0x30
 8012334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012338:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801233c:	1b52      	subs	r2, r2, r5
 801233e:	6122      	str	r2, [r4, #16]
 8012340:	f8cd a000 	str.w	sl, [sp]
 8012344:	464b      	mov	r3, r9
 8012346:	aa03      	add	r2, sp, #12
 8012348:	4621      	mov	r1, r4
 801234a:	4640      	mov	r0, r8
 801234c:	f7ff fee2 	bl	8012114 <_printf_common>
 8012350:	3001      	adds	r0, #1
 8012352:	d14c      	bne.n	80123ee <_printf_i+0x1fe>
 8012354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012358:	b004      	add	sp, #16
 801235a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801235e:	4835      	ldr	r0, [pc, #212]	; (8012434 <_printf_i+0x244>)
 8012360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012364:	6829      	ldr	r1, [r5, #0]
 8012366:	6823      	ldr	r3, [r4, #0]
 8012368:	f851 6b04 	ldr.w	r6, [r1], #4
 801236c:	6029      	str	r1, [r5, #0]
 801236e:	061d      	lsls	r5, r3, #24
 8012370:	d514      	bpl.n	801239c <_printf_i+0x1ac>
 8012372:	07df      	lsls	r7, r3, #31
 8012374:	bf44      	itt	mi
 8012376:	f043 0320 	orrmi.w	r3, r3, #32
 801237a:	6023      	strmi	r3, [r4, #0]
 801237c:	b91e      	cbnz	r6, 8012386 <_printf_i+0x196>
 801237e:	6823      	ldr	r3, [r4, #0]
 8012380:	f023 0320 	bic.w	r3, r3, #32
 8012384:	6023      	str	r3, [r4, #0]
 8012386:	2310      	movs	r3, #16
 8012388:	e7b0      	b.n	80122ec <_printf_i+0xfc>
 801238a:	6823      	ldr	r3, [r4, #0]
 801238c:	f043 0320 	orr.w	r3, r3, #32
 8012390:	6023      	str	r3, [r4, #0]
 8012392:	2378      	movs	r3, #120	; 0x78
 8012394:	4828      	ldr	r0, [pc, #160]	; (8012438 <_printf_i+0x248>)
 8012396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801239a:	e7e3      	b.n	8012364 <_printf_i+0x174>
 801239c:	0659      	lsls	r1, r3, #25
 801239e:	bf48      	it	mi
 80123a0:	b2b6      	uxthmi	r6, r6
 80123a2:	e7e6      	b.n	8012372 <_printf_i+0x182>
 80123a4:	4615      	mov	r5, r2
 80123a6:	e7bb      	b.n	8012320 <_printf_i+0x130>
 80123a8:	682b      	ldr	r3, [r5, #0]
 80123aa:	6826      	ldr	r6, [r4, #0]
 80123ac:	6961      	ldr	r1, [r4, #20]
 80123ae:	1d18      	adds	r0, r3, #4
 80123b0:	6028      	str	r0, [r5, #0]
 80123b2:	0635      	lsls	r5, r6, #24
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	d501      	bpl.n	80123bc <_printf_i+0x1cc>
 80123b8:	6019      	str	r1, [r3, #0]
 80123ba:	e002      	b.n	80123c2 <_printf_i+0x1d2>
 80123bc:	0670      	lsls	r0, r6, #25
 80123be:	d5fb      	bpl.n	80123b8 <_printf_i+0x1c8>
 80123c0:	8019      	strh	r1, [r3, #0]
 80123c2:	2300      	movs	r3, #0
 80123c4:	6123      	str	r3, [r4, #16]
 80123c6:	4615      	mov	r5, r2
 80123c8:	e7ba      	b.n	8012340 <_printf_i+0x150>
 80123ca:	682b      	ldr	r3, [r5, #0]
 80123cc:	1d1a      	adds	r2, r3, #4
 80123ce:	602a      	str	r2, [r5, #0]
 80123d0:	681d      	ldr	r5, [r3, #0]
 80123d2:	6862      	ldr	r2, [r4, #4]
 80123d4:	2100      	movs	r1, #0
 80123d6:	4628      	mov	r0, r5
 80123d8:	f7ed ff32 	bl	8000240 <memchr>
 80123dc:	b108      	cbz	r0, 80123e2 <_printf_i+0x1f2>
 80123de:	1b40      	subs	r0, r0, r5
 80123e0:	6060      	str	r0, [r4, #4]
 80123e2:	6863      	ldr	r3, [r4, #4]
 80123e4:	6123      	str	r3, [r4, #16]
 80123e6:	2300      	movs	r3, #0
 80123e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123ec:	e7a8      	b.n	8012340 <_printf_i+0x150>
 80123ee:	6923      	ldr	r3, [r4, #16]
 80123f0:	462a      	mov	r2, r5
 80123f2:	4649      	mov	r1, r9
 80123f4:	4640      	mov	r0, r8
 80123f6:	47d0      	blx	sl
 80123f8:	3001      	adds	r0, #1
 80123fa:	d0ab      	beq.n	8012354 <_printf_i+0x164>
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	079b      	lsls	r3, r3, #30
 8012400:	d413      	bmi.n	801242a <_printf_i+0x23a>
 8012402:	68e0      	ldr	r0, [r4, #12]
 8012404:	9b03      	ldr	r3, [sp, #12]
 8012406:	4298      	cmp	r0, r3
 8012408:	bfb8      	it	lt
 801240a:	4618      	movlt	r0, r3
 801240c:	e7a4      	b.n	8012358 <_printf_i+0x168>
 801240e:	2301      	movs	r3, #1
 8012410:	4632      	mov	r2, r6
 8012412:	4649      	mov	r1, r9
 8012414:	4640      	mov	r0, r8
 8012416:	47d0      	blx	sl
 8012418:	3001      	adds	r0, #1
 801241a:	d09b      	beq.n	8012354 <_printf_i+0x164>
 801241c:	3501      	adds	r5, #1
 801241e:	68e3      	ldr	r3, [r4, #12]
 8012420:	9903      	ldr	r1, [sp, #12]
 8012422:	1a5b      	subs	r3, r3, r1
 8012424:	42ab      	cmp	r3, r5
 8012426:	dcf2      	bgt.n	801240e <_printf_i+0x21e>
 8012428:	e7eb      	b.n	8012402 <_printf_i+0x212>
 801242a:	2500      	movs	r5, #0
 801242c:	f104 0619 	add.w	r6, r4, #25
 8012430:	e7f5      	b.n	801241e <_printf_i+0x22e>
 8012432:	bf00      	nop
 8012434:	080156ce 	.word	0x080156ce
 8012438:	080156df 	.word	0x080156df

0801243c <iprintf>:
 801243c:	b40f      	push	{r0, r1, r2, r3}
 801243e:	4b0a      	ldr	r3, [pc, #40]	; (8012468 <iprintf+0x2c>)
 8012440:	b513      	push	{r0, r1, r4, lr}
 8012442:	681c      	ldr	r4, [r3, #0]
 8012444:	b124      	cbz	r4, 8012450 <iprintf+0x14>
 8012446:	69a3      	ldr	r3, [r4, #24]
 8012448:	b913      	cbnz	r3, 8012450 <iprintf+0x14>
 801244a:	4620      	mov	r0, r4
 801244c:	f001 f84a 	bl	80134e4 <__sinit>
 8012450:	ab05      	add	r3, sp, #20
 8012452:	9a04      	ldr	r2, [sp, #16]
 8012454:	68a1      	ldr	r1, [r4, #8]
 8012456:	9301      	str	r3, [sp, #4]
 8012458:	4620      	mov	r0, r4
 801245a:	f001 fe3f 	bl	80140dc <_vfiprintf_r>
 801245e:	b002      	add	sp, #8
 8012460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012464:	b004      	add	sp, #16
 8012466:	4770      	bx	lr
 8012468:	200002a4 	.word	0x200002a4

0801246c <srand>:
 801246c:	b538      	push	{r3, r4, r5, lr}
 801246e:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <srand+0x44>)
 8012470:	681d      	ldr	r5, [r3, #0]
 8012472:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012474:	4604      	mov	r4, r0
 8012476:	b9b3      	cbnz	r3, 80124a6 <srand+0x3a>
 8012478:	2018      	movs	r0, #24
 801247a:	f7ff fa81 	bl	8011980 <malloc>
 801247e:	4602      	mov	r2, r0
 8012480:	63a8      	str	r0, [r5, #56]	; 0x38
 8012482:	b920      	cbnz	r0, 801248e <srand+0x22>
 8012484:	4b0b      	ldr	r3, [pc, #44]	; (80124b4 <srand+0x48>)
 8012486:	480c      	ldr	r0, [pc, #48]	; (80124b8 <srand+0x4c>)
 8012488:	2142      	movs	r1, #66	; 0x42
 801248a:	f000 f9af 	bl	80127ec <__assert_func>
 801248e:	490b      	ldr	r1, [pc, #44]	; (80124bc <srand+0x50>)
 8012490:	4b0b      	ldr	r3, [pc, #44]	; (80124c0 <srand+0x54>)
 8012492:	e9c0 1300 	strd	r1, r3, [r0]
 8012496:	4b0b      	ldr	r3, [pc, #44]	; (80124c4 <srand+0x58>)
 8012498:	6083      	str	r3, [r0, #8]
 801249a:	230b      	movs	r3, #11
 801249c:	8183      	strh	r3, [r0, #12]
 801249e:	2100      	movs	r1, #0
 80124a0:	2001      	movs	r0, #1
 80124a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80124a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80124a8:	2200      	movs	r2, #0
 80124aa:	611c      	str	r4, [r3, #16]
 80124ac:	615a      	str	r2, [r3, #20]
 80124ae:	bd38      	pop	{r3, r4, r5, pc}
 80124b0:	200002a4 	.word	0x200002a4
 80124b4:	080156f0 	.word	0x080156f0
 80124b8:	08015707 	.word	0x08015707
 80124bc:	abcd330e 	.word	0xabcd330e
 80124c0:	e66d1234 	.word	0xe66d1234
 80124c4:	0005deec 	.word	0x0005deec

080124c8 <rand>:
 80124c8:	4b16      	ldr	r3, [pc, #88]	; (8012524 <rand+0x5c>)
 80124ca:	b510      	push	{r4, lr}
 80124cc:	681c      	ldr	r4, [r3, #0]
 80124ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80124d0:	b9b3      	cbnz	r3, 8012500 <rand+0x38>
 80124d2:	2018      	movs	r0, #24
 80124d4:	f7ff fa54 	bl	8011980 <malloc>
 80124d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80124da:	b928      	cbnz	r0, 80124e8 <rand+0x20>
 80124dc:	4602      	mov	r2, r0
 80124de:	4b12      	ldr	r3, [pc, #72]	; (8012528 <rand+0x60>)
 80124e0:	4812      	ldr	r0, [pc, #72]	; (801252c <rand+0x64>)
 80124e2:	214e      	movs	r1, #78	; 0x4e
 80124e4:	f000 f982 	bl	80127ec <__assert_func>
 80124e8:	4a11      	ldr	r2, [pc, #68]	; (8012530 <rand+0x68>)
 80124ea:	4b12      	ldr	r3, [pc, #72]	; (8012534 <rand+0x6c>)
 80124ec:	e9c0 2300 	strd	r2, r3, [r0]
 80124f0:	4b11      	ldr	r3, [pc, #68]	; (8012538 <rand+0x70>)
 80124f2:	6083      	str	r3, [r0, #8]
 80124f4:	230b      	movs	r3, #11
 80124f6:	8183      	strh	r3, [r0, #12]
 80124f8:	2201      	movs	r2, #1
 80124fa:	2300      	movs	r3, #0
 80124fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012500:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012502:	4a0e      	ldr	r2, [pc, #56]	; (801253c <rand+0x74>)
 8012504:	6920      	ldr	r0, [r4, #16]
 8012506:	6963      	ldr	r3, [r4, #20]
 8012508:	490d      	ldr	r1, [pc, #52]	; (8012540 <rand+0x78>)
 801250a:	4342      	muls	r2, r0
 801250c:	fb01 2203 	mla	r2, r1, r3, r2
 8012510:	fba0 0101 	umull	r0, r1, r0, r1
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	eb42 0001 	adc.w	r0, r2, r1
 801251a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801251e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012522:	bd10      	pop	{r4, pc}
 8012524:	200002a4 	.word	0x200002a4
 8012528:	080156f0 	.word	0x080156f0
 801252c:	08015707 	.word	0x08015707
 8012530:	abcd330e 	.word	0xabcd330e
 8012534:	e66d1234 	.word	0xe66d1234
 8012538:	0005deec 	.word	0x0005deec
 801253c:	5851f42d 	.word	0x5851f42d
 8012540:	4c957f2d 	.word	0x4c957f2d

08012544 <realloc>:
 8012544:	4b02      	ldr	r3, [pc, #8]	; (8012550 <realloc+0xc>)
 8012546:	460a      	mov	r2, r1
 8012548:	4601      	mov	r1, r0
 801254a:	6818      	ldr	r0, [r3, #0]
 801254c:	f001 bc12 	b.w	8013d74 <_realloc_r>
 8012550:	200002a4 	.word	0x200002a4

08012554 <_sbrk_r>:
 8012554:	b538      	push	{r3, r4, r5, lr}
 8012556:	4d06      	ldr	r5, [pc, #24]	; (8012570 <_sbrk_r+0x1c>)
 8012558:	2300      	movs	r3, #0
 801255a:	4604      	mov	r4, r0
 801255c:	4608      	mov	r0, r1
 801255e:	602b      	str	r3, [r5, #0]
 8012560:	f7ee fd38 	bl	8000fd4 <_sbrk>
 8012564:	1c43      	adds	r3, r0, #1
 8012566:	d102      	bne.n	801256e <_sbrk_r+0x1a>
 8012568:	682b      	ldr	r3, [r5, #0]
 801256a:	b103      	cbz	r3, 801256e <_sbrk_r+0x1a>
 801256c:	6023      	str	r3, [r4, #0]
 801256e:	bd38      	pop	{r3, r4, r5, pc}
 8012570:	2000de80 	.word	0x2000de80

08012574 <sniprintf>:
 8012574:	b40c      	push	{r2, r3}
 8012576:	b530      	push	{r4, r5, lr}
 8012578:	4b17      	ldr	r3, [pc, #92]	; (80125d8 <sniprintf+0x64>)
 801257a:	1e0c      	subs	r4, r1, #0
 801257c:	681d      	ldr	r5, [r3, #0]
 801257e:	b09d      	sub	sp, #116	; 0x74
 8012580:	da08      	bge.n	8012594 <sniprintf+0x20>
 8012582:	238b      	movs	r3, #139	; 0x8b
 8012584:	602b      	str	r3, [r5, #0]
 8012586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801258a:	b01d      	add	sp, #116	; 0x74
 801258c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012590:	b002      	add	sp, #8
 8012592:	4770      	bx	lr
 8012594:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012598:	f8ad 3014 	strh.w	r3, [sp, #20]
 801259c:	bf14      	ite	ne
 801259e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80125a2:	4623      	moveq	r3, r4
 80125a4:	9304      	str	r3, [sp, #16]
 80125a6:	9307      	str	r3, [sp, #28]
 80125a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125ac:	9002      	str	r0, [sp, #8]
 80125ae:	9006      	str	r0, [sp, #24]
 80125b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80125b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80125b6:	ab21      	add	r3, sp, #132	; 0x84
 80125b8:	a902      	add	r1, sp, #8
 80125ba:	4628      	mov	r0, r5
 80125bc:	9301      	str	r3, [sp, #4]
 80125be:	f001 fc63 	bl	8013e88 <_svfiprintf_r>
 80125c2:	1c43      	adds	r3, r0, #1
 80125c4:	bfbc      	itt	lt
 80125c6:	238b      	movlt	r3, #139	; 0x8b
 80125c8:	602b      	strlt	r3, [r5, #0]
 80125ca:	2c00      	cmp	r4, #0
 80125cc:	d0dd      	beq.n	801258a <sniprintf+0x16>
 80125ce:	9b02      	ldr	r3, [sp, #8]
 80125d0:	2200      	movs	r2, #0
 80125d2:	701a      	strb	r2, [r3, #0]
 80125d4:	e7d9      	b.n	801258a <sniprintf+0x16>
 80125d6:	bf00      	nop
 80125d8:	200002a4 	.word	0x200002a4

080125dc <strchr>:
 80125dc:	b2c9      	uxtb	r1, r1
 80125de:	4603      	mov	r3, r0
 80125e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125e4:	b11a      	cbz	r2, 80125ee <strchr+0x12>
 80125e6:	428a      	cmp	r2, r1
 80125e8:	d1f9      	bne.n	80125de <strchr+0x2>
 80125ea:	4618      	mov	r0, r3
 80125ec:	4770      	bx	lr
 80125ee:	2900      	cmp	r1, #0
 80125f0:	bf18      	it	ne
 80125f2:	2300      	movne	r3, #0
 80125f4:	e7f9      	b.n	80125ea <strchr+0xe>

080125f6 <strcpy>:
 80125f6:	4603      	mov	r3, r0
 80125f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125fc:	f803 2b01 	strb.w	r2, [r3], #1
 8012600:	2a00      	cmp	r2, #0
 8012602:	d1f9      	bne.n	80125f8 <strcpy+0x2>
 8012604:	4770      	bx	lr

08012606 <strncmp>:
 8012606:	b510      	push	{r4, lr}
 8012608:	b17a      	cbz	r2, 801262a <strncmp+0x24>
 801260a:	4603      	mov	r3, r0
 801260c:	3901      	subs	r1, #1
 801260e:	1884      	adds	r4, r0, r2
 8012610:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012614:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012618:	4290      	cmp	r0, r2
 801261a:	d101      	bne.n	8012620 <strncmp+0x1a>
 801261c:	42a3      	cmp	r3, r4
 801261e:	d101      	bne.n	8012624 <strncmp+0x1e>
 8012620:	1a80      	subs	r0, r0, r2
 8012622:	bd10      	pop	{r4, pc}
 8012624:	2800      	cmp	r0, #0
 8012626:	d1f3      	bne.n	8012610 <strncmp+0xa>
 8012628:	e7fa      	b.n	8012620 <strncmp+0x1a>
 801262a:	4610      	mov	r0, r2
 801262c:	e7f9      	b.n	8012622 <strncmp+0x1c>

0801262e <strncpy>:
 801262e:	b510      	push	{r4, lr}
 8012630:	3901      	subs	r1, #1
 8012632:	4603      	mov	r3, r0
 8012634:	b132      	cbz	r2, 8012644 <strncpy+0x16>
 8012636:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801263a:	f803 4b01 	strb.w	r4, [r3], #1
 801263e:	3a01      	subs	r2, #1
 8012640:	2c00      	cmp	r4, #0
 8012642:	d1f7      	bne.n	8012634 <strncpy+0x6>
 8012644:	441a      	add	r2, r3
 8012646:	2100      	movs	r1, #0
 8012648:	4293      	cmp	r3, r2
 801264a:	d100      	bne.n	801264e <strncpy+0x20>
 801264c:	bd10      	pop	{r4, pc}
 801264e:	f803 1b01 	strb.w	r1, [r3], #1
 8012652:	e7f9      	b.n	8012648 <strncpy+0x1a>

08012654 <strstr>:
 8012654:	780a      	ldrb	r2, [r1, #0]
 8012656:	b570      	push	{r4, r5, r6, lr}
 8012658:	b96a      	cbnz	r2, 8012676 <strstr+0x22>
 801265a:	bd70      	pop	{r4, r5, r6, pc}
 801265c:	429a      	cmp	r2, r3
 801265e:	d109      	bne.n	8012674 <strstr+0x20>
 8012660:	460c      	mov	r4, r1
 8012662:	4605      	mov	r5, r0
 8012664:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012668:	2b00      	cmp	r3, #0
 801266a:	d0f6      	beq.n	801265a <strstr+0x6>
 801266c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012670:	429e      	cmp	r6, r3
 8012672:	d0f7      	beq.n	8012664 <strstr+0x10>
 8012674:	3001      	adds	r0, #1
 8012676:	7803      	ldrb	r3, [r0, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d1ef      	bne.n	801265c <strstr+0x8>
 801267c:	4618      	mov	r0, r3
 801267e:	e7ec      	b.n	801265a <strstr+0x6>

08012680 <_strtoul_l.constprop.0>:
 8012680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012684:	4f36      	ldr	r7, [pc, #216]	; (8012760 <_strtoul_l.constprop.0+0xe0>)
 8012686:	4686      	mov	lr, r0
 8012688:	460d      	mov	r5, r1
 801268a:	4628      	mov	r0, r5
 801268c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012690:	5de6      	ldrb	r6, [r4, r7]
 8012692:	f016 0608 	ands.w	r6, r6, #8
 8012696:	d1f8      	bne.n	801268a <_strtoul_l.constprop.0+0xa>
 8012698:	2c2d      	cmp	r4, #45	; 0x2d
 801269a:	d12f      	bne.n	80126fc <_strtoul_l.constprop.0+0x7c>
 801269c:	782c      	ldrb	r4, [r5, #0]
 801269e:	2601      	movs	r6, #1
 80126a0:	1c85      	adds	r5, r0, #2
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d057      	beq.n	8012756 <_strtoul_l.constprop.0+0xd6>
 80126a6:	2b10      	cmp	r3, #16
 80126a8:	d109      	bne.n	80126be <_strtoul_l.constprop.0+0x3e>
 80126aa:	2c30      	cmp	r4, #48	; 0x30
 80126ac:	d107      	bne.n	80126be <_strtoul_l.constprop.0+0x3e>
 80126ae:	7828      	ldrb	r0, [r5, #0]
 80126b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80126b4:	2858      	cmp	r0, #88	; 0x58
 80126b6:	d149      	bne.n	801274c <_strtoul_l.constprop.0+0xcc>
 80126b8:	786c      	ldrb	r4, [r5, #1]
 80126ba:	2310      	movs	r3, #16
 80126bc:	3502      	adds	r5, #2
 80126be:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80126c2:	2700      	movs	r7, #0
 80126c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80126c8:	fb03 f908 	mul.w	r9, r3, r8
 80126cc:	ea6f 0909 	mvn.w	r9, r9
 80126d0:	4638      	mov	r0, r7
 80126d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80126d6:	f1bc 0f09 	cmp.w	ip, #9
 80126da:	d814      	bhi.n	8012706 <_strtoul_l.constprop.0+0x86>
 80126dc:	4664      	mov	r4, ip
 80126de:	42a3      	cmp	r3, r4
 80126e0:	dd22      	ble.n	8012728 <_strtoul_l.constprop.0+0xa8>
 80126e2:	2f00      	cmp	r7, #0
 80126e4:	db1d      	blt.n	8012722 <_strtoul_l.constprop.0+0xa2>
 80126e6:	4580      	cmp	r8, r0
 80126e8:	d31b      	bcc.n	8012722 <_strtoul_l.constprop.0+0xa2>
 80126ea:	d101      	bne.n	80126f0 <_strtoul_l.constprop.0+0x70>
 80126ec:	45a1      	cmp	r9, r4
 80126ee:	db18      	blt.n	8012722 <_strtoul_l.constprop.0+0xa2>
 80126f0:	fb00 4003 	mla	r0, r0, r3, r4
 80126f4:	2701      	movs	r7, #1
 80126f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126fa:	e7ea      	b.n	80126d2 <_strtoul_l.constprop.0+0x52>
 80126fc:	2c2b      	cmp	r4, #43	; 0x2b
 80126fe:	bf04      	itt	eq
 8012700:	782c      	ldrbeq	r4, [r5, #0]
 8012702:	1c85      	addeq	r5, r0, #2
 8012704:	e7cd      	b.n	80126a2 <_strtoul_l.constprop.0+0x22>
 8012706:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801270a:	f1bc 0f19 	cmp.w	ip, #25
 801270e:	d801      	bhi.n	8012714 <_strtoul_l.constprop.0+0x94>
 8012710:	3c37      	subs	r4, #55	; 0x37
 8012712:	e7e4      	b.n	80126de <_strtoul_l.constprop.0+0x5e>
 8012714:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012718:	f1bc 0f19 	cmp.w	ip, #25
 801271c:	d804      	bhi.n	8012728 <_strtoul_l.constprop.0+0xa8>
 801271e:	3c57      	subs	r4, #87	; 0x57
 8012720:	e7dd      	b.n	80126de <_strtoul_l.constprop.0+0x5e>
 8012722:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012726:	e7e6      	b.n	80126f6 <_strtoul_l.constprop.0+0x76>
 8012728:	2f00      	cmp	r7, #0
 801272a:	da07      	bge.n	801273c <_strtoul_l.constprop.0+0xbc>
 801272c:	2322      	movs	r3, #34	; 0x22
 801272e:	f8ce 3000 	str.w	r3, [lr]
 8012732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012736:	b932      	cbnz	r2, 8012746 <_strtoul_l.constprop.0+0xc6>
 8012738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801273c:	b106      	cbz	r6, 8012740 <_strtoul_l.constprop.0+0xc0>
 801273e:	4240      	negs	r0, r0
 8012740:	2a00      	cmp	r2, #0
 8012742:	d0f9      	beq.n	8012738 <_strtoul_l.constprop.0+0xb8>
 8012744:	b107      	cbz	r7, 8012748 <_strtoul_l.constprop.0+0xc8>
 8012746:	1e69      	subs	r1, r5, #1
 8012748:	6011      	str	r1, [r2, #0]
 801274a:	e7f5      	b.n	8012738 <_strtoul_l.constprop.0+0xb8>
 801274c:	2430      	movs	r4, #48	; 0x30
 801274e:	2b00      	cmp	r3, #0
 8012750:	d1b5      	bne.n	80126be <_strtoul_l.constprop.0+0x3e>
 8012752:	2308      	movs	r3, #8
 8012754:	e7b3      	b.n	80126be <_strtoul_l.constprop.0+0x3e>
 8012756:	2c30      	cmp	r4, #48	; 0x30
 8012758:	d0a9      	beq.n	80126ae <_strtoul_l.constprop.0+0x2e>
 801275a:	230a      	movs	r3, #10
 801275c:	e7af      	b.n	80126be <_strtoul_l.constprop.0+0x3e>
 801275e:	bf00      	nop
 8012760:	080155b5 	.word	0x080155b5

08012764 <strtoul>:
 8012764:	4613      	mov	r3, r2
 8012766:	460a      	mov	r2, r1
 8012768:	4601      	mov	r1, r0
 801276a:	4802      	ldr	r0, [pc, #8]	; (8012774 <strtoul+0x10>)
 801276c:	6800      	ldr	r0, [r0, #0]
 801276e:	f7ff bf87 	b.w	8012680 <_strtoul_l.constprop.0>
 8012772:	bf00      	nop
 8012774:	200002a4 	.word	0x200002a4

08012778 <_vsniprintf_r>:
 8012778:	b530      	push	{r4, r5, lr}
 801277a:	4614      	mov	r4, r2
 801277c:	2c00      	cmp	r4, #0
 801277e:	b09b      	sub	sp, #108	; 0x6c
 8012780:	4605      	mov	r5, r0
 8012782:	461a      	mov	r2, r3
 8012784:	da05      	bge.n	8012792 <_vsniprintf_r+0x1a>
 8012786:	238b      	movs	r3, #139	; 0x8b
 8012788:	6003      	str	r3, [r0, #0]
 801278a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801278e:	b01b      	add	sp, #108	; 0x6c
 8012790:	bd30      	pop	{r4, r5, pc}
 8012792:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012796:	f8ad 300c 	strh.w	r3, [sp, #12]
 801279a:	bf14      	ite	ne
 801279c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80127a0:	4623      	moveq	r3, r4
 80127a2:	9302      	str	r3, [sp, #8]
 80127a4:	9305      	str	r3, [sp, #20]
 80127a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80127aa:	9100      	str	r1, [sp, #0]
 80127ac:	9104      	str	r1, [sp, #16]
 80127ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80127b2:	4669      	mov	r1, sp
 80127b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80127b6:	f001 fb67 	bl	8013e88 <_svfiprintf_r>
 80127ba:	1c43      	adds	r3, r0, #1
 80127bc:	bfbc      	itt	lt
 80127be:	238b      	movlt	r3, #139	; 0x8b
 80127c0:	602b      	strlt	r3, [r5, #0]
 80127c2:	2c00      	cmp	r4, #0
 80127c4:	d0e3      	beq.n	801278e <_vsniprintf_r+0x16>
 80127c6:	9b00      	ldr	r3, [sp, #0]
 80127c8:	2200      	movs	r2, #0
 80127ca:	701a      	strb	r2, [r3, #0]
 80127cc:	e7df      	b.n	801278e <_vsniprintf_r+0x16>
	...

080127d0 <vsniprintf>:
 80127d0:	b507      	push	{r0, r1, r2, lr}
 80127d2:	9300      	str	r3, [sp, #0]
 80127d4:	4613      	mov	r3, r2
 80127d6:	460a      	mov	r2, r1
 80127d8:	4601      	mov	r1, r0
 80127da:	4803      	ldr	r0, [pc, #12]	; (80127e8 <vsniprintf+0x18>)
 80127dc:	6800      	ldr	r0, [r0, #0]
 80127de:	f7ff ffcb 	bl	8012778 <_vsniprintf_r>
 80127e2:	b003      	add	sp, #12
 80127e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80127e8:	200002a4 	.word	0x200002a4

080127ec <__assert_func>:
 80127ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127ee:	4614      	mov	r4, r2
 80127f0:	461a      	mov	r2, r3
 80127f2:	4b09      	ldr	r3, [pc, #36]	; (8012818 <__assert_func+0x2c>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4605      	mov	r5, r0
 80127f8:	68d8      	ldr	r0, [r3, #12]
 80127fa:	b14c      	cbz	r4, 8012810 <__assert_func+0x24>
 80127fc:	4b07      	ldr	r3, [pc, #28]	; (801281c <__assert_func+0x30>)
 80127fe:	9100      	str	r1, [sp, #0]
 8012800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012804:	4906      	ldr	r1, [pc, #24]	; (8012820 <__assert_func+0x34>)
 8012806:	462b      	mov	r3, r5
 8012808:	f000 feea 	bl	80135e0 <fiprintf>
 801280c:	f001 feac 	bl	8014568 <abort>
 8012810:	4b04      	ldr	r3, [pc, #16]	; (8012824 <__assert_func+0x38>)
 8012812:	461c      	mov	r4, r3
 8012814:	e7f3      	b.n	80127fe <__assert_func+0x12>
 8012816:	bf00      	nop
 8012818:	200002a4 	.word	0x200002a4
 801281c:	08015762 	.word	0x08015762
 8012820:	0801576f 	.word	0x0801576f
 8012824:	0801579d 	.word	0x0801579d

08012828 <quorem>:
 8012828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801282c:	6903      	ldr	r3, [r0, #16]
 801282e:	690c      	ldr	r4, [r1, #16]
 8012830:	42a3      	cmp	r3, r4
 8012832:	4607      	mov	r7, r0
 8012834:	f2c0 8081 	blt.w	801293a <quorem+0x112>
 8012838:	3c01      	subs	r4, #1
 801283a:	f101 0814 	add.w	r8, r1, #20
 801283e:	f100 0514 	add.w	r5, r0, #20
 8012842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012846:	9301      	str	r3, [sp, #4]
 8012848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801284c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012850:	3301      	adds	r3, #1
 8012852:	429a      	cmp	r2, r3
 8012854:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801285c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012860:	d331      	bcc.n	80128c6 <quorem+0x9e>
 8012862:	f04f 0e00 	mov.w	lr, #0
 8012866:	4640      	mov	r0, r8
 8012868:	46ac      	mov	ip, r5
 801286a:	46f2      	mov	sl, lr
 801286c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012870:	b293      	uxth	r3, r2
 8012872:	fb06 e303 	mla	r3, r6, r3, lr
 8012876:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801287a:	b29b      	uxth	r3, r3
 801287c:	ebaa 0303 	sub.w	r3, sl, r3
 8012880:	f8dc a000 	ldr.w	sl, [ip]
 8012884:	0c12      	lsrs	r2, r2, #16
 8012886:	fa13 f38a 	uxtah	r3, r3, sl
 801288a:	fb06 e202 	mla	r2, r6, r2, lr
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	9b00      	ldr	r3, [sp, #0]
 8012892:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012896:	b292      	uxth	r2, r2
 8012898:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801289c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80128a4:	4581      	cmp	r9, r0
 80128a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128aa:	f84c 3b04 	str.w	r3, [ip], #4
 80128ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80128b2:	d2db      	bcs.n	801286c <quorem+0x44>
 80128b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80128b8:	b92b      	cbnz	r3, 80128c6 <quorem+0x9e>
 80128ba:	9b01      	ldr	r3, [sp, #4]
 80128bc:	3b04      	subs	r3, #4
 80128be:	429d      	cmp	r5, r3
 80128c0:	461a      	mov	r2, r3
 80128c2:	d32e      	bcc.n	8012922 <quorem+0xfa>
 80128c4:	613c      	str	r4, [r7, #16]
 80128c6:	4638      	mov	r0, r7
 80128c8:	f001 f952 	bl	8013b70 <__mcmp>
 80128cc:	2800      	cmp	r0, #0
 80128ce:	db24      	blt.n	801291a <quorem+0xf2>
 80128d0:	3601      	adds	r6, #1
 80128d2:	4628      	mov	r0, r5
 80128d4:	f04f 0c00 	mov.w	ip, #0
 80128d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80128dc:	f8d0 e000 	ldr.w	lr, [r0]
 80128e0:	b293      	uxth	r3, r2
 80128e2:	ebac 0303 	sub.w	r3, ip, r3
 80128e6:	0c12      	lsrs	r2, r2, #16
 80128e8:	fa13 f38e 	uxtah	r3, r3, lr
 80128ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80128f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128fa:	45c1      	cmp	r9, r8
 80128fc:	f840 3b04 	str.w	r3, [r0], #4
 8012900:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012904:	d2e8      	bcs.n	80128d8 <quorem+0xb0>
 8012906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801290a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801290e:	b922      	cbnz	r2, 801291a <quorem+0xf2>
 8012910:	3b04      	subs	r3, #4
 8012912:	429d      	cmp	r5, r3
 8012914:	461a      	mov	r2, r3
 8012916:	d30a      	bcc.n	801292e <quorem+0x106>
 8012918:	613c      	str	r4, [r7, #16]
 801291a:	4630      	mov	r0, r6
 801291c:	b003      	add	sp, #12
 801291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012922:	6812      	ldr	r2, [r2, #0]
 8012924:	3b04      	subs	r3, #4
 8012926:	2a00      	cmp	r2, #0
 8012928:	d1cc      	bne.n	80128c4 <quorem+0x9c>
 801292a:	3c01      	subs	r4, #1
 801292c:	e7c7      	b.n	80128be <quorem+0x96>
 801292e:	6812      	ldr	r2, [r2, #0]
 8012930:	3b04      	subs	r3, #4
 8012932:	2a00      	cmp	r2, #0
 8012934:	d1f0      	bne.n	8012918 <quorem+0xf0>
 8012936:	3c01      	subs	r4, #1
 8012938:	e7eb      	b.n	8012912 <quorem+0xea>
 801293a:	2000      	movs	r0, #0
 801293c:	e7ee      	b.n	801291c <quorem+0xf4>
	...

08012940 <_dtoa_r>:
 8012940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	ed2d 8b02 	vpush	{d8}
 8012948:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801294a:	b091      	sub	sp, #68	; 0x44
 801294c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012950:	ec59 8b10 	vmov	r8, r9, d0
 8012954:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012956:	9106      	str	r1, [sp, #24]
 8012958:	4606      	mov	r6, r0
 801295a:	9208      	str	r2, [sp, #32]
 801295c:	930c      	str	r3, [sp, #48]	; 0x30
 801295e:	b975      	cbnz	r5, 801297e <_dtoa_r+0x3e>
 8012960:	2010      	movs	r0, #16
 8012962:	f7ff f80d 	bl	8011980 <malloc>
 8012966:	4602      	mov	r2, r0
 8012968:	6270      	str	r0, [r6, #36]	; 0x24
 801296a:	b920      	cbnz	r0, 8012976 <_dtoa_r+0x36>
 801296c:	4baa      	ldr	r3, [pc, #680]	; (8012c18 <_dtoa_r+0x2d8>)
 801296e:	21ea      	movs	r1, #234	; 0xea
 8012970:	48aa      	ldr	r0, [pc, #680]	; (8012c1c <_dtoa_r+0x2dc>)
 8012972:	f7ff ff3b 	bl	80127ec <__assert_func>
 8012976:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801297a:	6005      	str	r5, [r0, #0]
 801297c:	60c5      	str	r5, [r0, #12]
 801297e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012980:	6819      	ldr	r1, [r3, #0]
 8012982:	b151      	cbz	r1, 801299a <_dtoa_r+0x5a>
 8012984:	685a      	ldr	r2, [r3, #4]
 8012986:	604a      	str	r2, [r1, #4]
 8012988:	2301      	movs	r3, #1
 801298a:	4093      	lsls	r3, r2
 801298c:	608b      	str	r3, [r1, #8]
 801298e:	4630      	mov	r0, r6
 8012990:	f000 feac 	bl	80136ec <_Bfree>
 8012994:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012996:	2200      	movs	r2, #0
 8012998:	601a      	str	r2, [r3, #0]
 801299a:	f1b9 0300 	subs.w	r3, r9, #0
 801299e:	bfbb      	ittet	lt
 80129a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80129a4:	9303      	strlt	r3, [sp, #12]
 80129a6:	2300      	movge	r3, #0
 80129a8:	2201      	movlt	r2, #1
 80129aa:	bfac      	ite	ge
 80129ac:	6023      	strge	r3, [r4, #0]
 80129ae:	6022      	strlt	r2, [r4, #0]
 80129b0:	4b9b      	ldr	r3, [pc, #620]	; (8012c20 <_dtoa_r+0x2e0>)
 80129b2:	9c03      	ldr	r4, [sp, #12]
 80129b4:	43a3      	bics	r3, r4
 80129b6:	d11c      	bne.n	80129f2 <_dtoa_r+0xb2>
 80129b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80129be:	6013      	str	r3, [r2, #0]
 80129c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80129c4:	ea53 0308 	orrs.w	r3, r3, r8
 80129c8:	f000 84fd 	beq.w	80133c6 <_dtoa_r+0xa86>
 80129cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129ce:	b963      	cbnz	r3, 80129ea <_dtoa_r+0xaa>
 80129d0:	4b94      	ldr	r3, [pc, #592]	; (8012c24 <_dtoa_r+0x2e4>)
 80129d2:	e01f      	b.n	8012a14 <_dtoa_r+0xd4>
 80129d4:	4b94      	ldr	r3, [pc, #592]	; (8012c28 <_dtoa_r+0x2e8>)
 80129d6:	9301      	str	r3, [sp, #4]
 80129d8:	3308      	adds	r3, #8
 80129da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80129dc:	6013      	str	r3, [r2, #0]
 80129de:	9801      	ldr	r0, [sp, #4]
 80129e0:	b011      	add	sp, #68	; 0x44
 80129e2:	ecbd 8b02 	vpop	{d8}
 80129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ea:	4b8e      	ldr	r3, [pc, #568]	; (8012c24 <_dtoa_r+0x2e4>)
 80129ec:	9301      	str	r3, [sp, #4]
 80129ee:	3303      	adds	r3, #3
 80129f0:	e7f3      	b.n	80129da <_dtoa_r+0x9a>
 80129f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80129f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80129fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129fe:	d10b      	bne.n	8012a18 <_dtoa_r+0xd8>
 8012a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a02:	2301      	movs	r3, #1
 8012a04:	6013      	str	r3, [r2, #0]
 8012a06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	f000 84d9 	beq.w	80133c0 <_dtoa_r+0xa80>
 8012a0e:	4887      	ldr	r0, [pc, #540]	; (8012c2c <_dtoa_r+0x2ec>)
 8012a10:	6018      	str	r0, [r3, #0]
 8012a12:	1e43      	subs	r3, r0, #1
 8012a14:	9301      	str	r3, [sp, #4]
 8012a16:	e7e2      	b.n	80129de <_dtoa_r+0x9e>
 8012a18:	a90f      	add	r1, sp, #60	; 0x3c
 8012a1a:	aa0e      	add	r2, sp, #56	; 0x38
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	eeb0 0b48 	vmov.f64	d0, d8
 8012a22:	f001 f94b 	bl	8013cbc <__d2b>
 8012a26:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012a2a:	4605      	mov	r5, r0
 8012a2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012a2e:	2900      	cmp	r1, #0
 8012a30:	d046      	beq.n	8012ac0 <_dtoa_r+0x180>
 8012a32:	ee18 4a90 	vmov	r4, s17
 8012a36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012a3a:	ec53 2b18 	vmov	r2, r3, d8
 8012a3e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012a42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012a46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012a4a:	2400      	movs	r4, #0
 8012a4c:	ec43 2b16 	vmov	d6, r2, r3
 8012a50:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012a54:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012c00 <_dtoa_r+0x2c0>
 8012a58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012a5c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8012c08 <_dtoa_r+0x2c8>
 8012a60:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012a64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012c10 <_dtoa_r+0x2d0>
 8012a68:	ee07 1a90 	vmov	s15, r1
 8012a6c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012a70:	eeb0 7b46 	vmov.f64	d7, d6
 8012a74:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012a78:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012a7c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a84:	ee16 ba90 	vmov	fp, s13
 8012a88:	940a      	str	r4, [sp, #40]	; 0x28
 8012a8a:	d508      	bpl.n	8012a9e <_dtoa_r+0x15e>
 8012a8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012a90:	eeb4 6b47 	vcmp.f64	d6, d7
 8012a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a98:	bf18      	it	ne
 8012a9a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8012a9e:	f1bb 0f16 	cmp.w	fp, #22
 8012aa2:	d82f      	bhi.n	8012b04 <_dtoa_r+0x1c4>
 8012aa4:	4b62      	ldr	r3, [pc, #392]	; (8012c30 <_dtoa_r+0x2f0>)
 8012aa6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012aaa:	ed93 7b00 	vldr	d7, [r3]
 8012aae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab6:	d501      	bpl.n	8012abc <_dtoa_r+0x17c>
 8012ab8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012abc:	2300      	movs	r3, #0
 8012abe:	e022      	b.n	8012b06 <_dtoa_r+0x1c6>
 8012ac0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012ac2:	4401      	add	r1, r0
 8012ac4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012ac8:	2b20      	cmp	r3, #32
 8012aca:	bfc1      	itttt	gt
 8012acc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012ad0:	fa04 f303 	lslgt.w	r3, r4, r3
 8012ad4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012ad8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012adc:	bfd6      	itet	le
 8012ade:	f1c3 0320 	rsble	r3, r3, #32
 8012ae2:	ea43 0808 	orrgt.w	r8, r3, r8
 8012ae6:	fa08 f803 	lslle.w	r8, r8, r3
 8012aea:	ee07 8a90 	vmov	s15, r8
 8012aee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012af2:	3901      	subs	r1, #1
 8012af4:	ee17 4a90 	vmov	r4, s15
 8012af8:	ec53 2b17 	vmov	r2, r3, d7
 8012afc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012b00:	2401      	movs	r4, #1
 8012b02:	e7a3      	b.n	8012a4c <_dtoa_r+0x10c>
 8012b04:	2301      	movs	r3, #1
 8012b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b08:	1a43      	subs	r3, r0, r1
 8012b0a:	1e5a      	subs	r2, r3, #1
 8012b0c:	bf45      	ittet	mi
 8012b0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8012b12:	9304      	strmi	r3, [sp, #16]
 8012b14:	2300      	movpl	r3, #0
 8012b16:	2300      	movmi	r3, #0
 8012b18:	9205      	str	r2, [sp, #20]
 8012b1a:	bf54      	ite	pl
 8012b1c:	9304      	strpl	r3, [sp, #16]
 8012b1e:	9305      	strmi	r3, [sp, #20]
 8012b20:	f1bb 0f00 	cmp.w	fp, #0
 8012b24:	db18      	blt.n	8012b58 <_dtoa_r+0x218>
 8012b26:	9b05      	ldr	r3, [sp, #20]
 8012b28:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012b2c:	445b      	add	r3, fp
 8012b2e:	9305      	str	r3, [sp, #20]
 8012b30:	2300      	movs	r3, #0
 8012b32:	9a06      	ldr	r2, [sp, #24]
 8012b34:	2a09      	cmp	r2, #9
 8012b36:	d849      	bhi.n	8012bcc <_dtoa_r+0x28c>
 8012b38:	2a05      	cmp	r2, #5
 8012b3a:	bfc4      	itt	gt
 8012b3c:	3a04      	subgt	r2, #4
 8012b3e:	9206      	strgt	r2, [sp, #24]
 8012b40:	9a06      	ldr	r2, [sp, #24]
 8012b42:	f1a2 0202 	sub.w	r2, r2, #2
 8012b46:	bfcc      	ite	gt
 8012b48:	2400      	movgt	r4, #0
 8012b4a:	2401      	movle	r4, #1
 8012b4c:	2a03      	cmp	r2, #3
 8012b4e:	d848      	bhi.n	8012be2 <_dtoa_r+0x2a2>
 8012b50:	e8df f002 	tbb	[pc, r2]
 8012b54:	3a2c2e0b 	.word	0x3a2c2e0b
 8012b58:	9b04      	ldr	r3, [sp, #16]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	eba3 030b 	sub.w	r3, r3, fp
 8012b60:	9304      	str	r3, [sp, #16]
 8012b62:	9209      	str	r2, [sp, #36]	; 0x24
 8012b64:	f1cb 0300 	rsb	r3, fp, #0
 8012b68:	e7e3      	b.n	8012b32 <_dtoa_r+0x1f2>
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	9207      	str	r2, [sp, #28]
 8012b6e:	9a08      	ldr	r2, [sp, #32]
 8012b70:	2a00      	cmp	r2, #0
 8012b72:	dc39      	bgt.n	8012be8 <_dtoa_r+0x2a8>
 8012b74:	f04f 0a01 	mov.w	sl, #1
 8012b78:	46d1      	mov	r9, sl
 8012b7a:	4652      	mov	r2, sl
 8012b7c:	f8cd a020 	str.w	sl, [sp, #32]
 8012b80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012b82:	2100      	movs	r1, #0
 8012b84:	6079      	str	r1, [r7, #4]
 8012b86:	2004      	movs	r0, #4
 8012b88:	f100 0c14 	add.w	ip, r0, #20
 8012b8c:	4594      	cmp	ip, r2
 8012b8e:	6879      	ldr	r1, [r7, #4]
 8012b90:	d92f      	bls.n	8012bf2 <_dtoa_r+0x2b2>
 8012b92:	4630      	mov	r0, r6
 8012b94:	930d      	str	r3, [sp, #52]	; 0x34
 8012b96:	f000 fd69 	bl	801366c <_Balloc>
 8012b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b9c:	9001      	str	r0, [sp, #4]
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	d149      	bne.n	8012c38 <_dtoa_r+0x2f8>
 8012ba4:	4b23      	ldr	r3, [pc, #140]	; (8012c34 <_dtoa_r+0x2f4>)
 8012ba6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012baa:	e6e1      	b.n	8012970 <_dtoa_r+0x30>
 8012bac:	2201      	movs	r2, #1
 8012bae:	e7dd      	b.n	8012b6c <_dtoa_r+0x22c>
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	9207      	str	r2, [sp, #28]
 8012bb4:	9a08      	ldr	r2, [sp, #32]
 8012bb6:	eb0b 0a02 	add.w	sl, fp, r2
 8012bba:	f10a 0901 	add.w	r9, sl, #1
 8012bbe:	464a      	mov	r2, r9
 8012bc0:	2a01      	cmp	r2, #1
 8012bc2:	bfb8      	it	lt
 8012bc4:	2201      	movlt	r2, #1
 8012bc6:	e7db      	b.n	8012b80 <_dtoa_r+0x240>
 8012bc8:	2201      	movs	r2, #1
 8012bca:	e7f2      	b.n	8012bb2 <_dtoa_r+0x272>
 8012bcc:	2401      	movs	r4, #1
 8012bce:	2200      	movs	r2, #0
 8012bd0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012bd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012bd8:	2100      	movs	r1, #0
 8012bda:	46d1      	mov	r9, sl
 8012bdc:	2212      	movs	r2, #18
 8012bde:	9108      	str	r1, [sp, #32]
 8012be0:	e7ce      	b.n	8012b80 <_dtoa_r+0x240>
 8012be2:	2201      	movs	r2, #1
 8012be4:	9207      	str	r2, [sp, #28]
 8012be6:	e7f5      	b.n	8012bd4 <_dtoa_r+0x294>
 8012be8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012bec:	46d1      	mov	r9, sl
 8012bee:	4652      	mov	r2, sl
 8012bf0:	e7c6      	b.n	8012b80 <_dtoa_r+0x240>
 8012bf2:	3101      	adds	r1, #1
 8012bf4:	6079      	str	r1, [r7, #4]
 8012bf6:	0040      	lsls	r0, r0, #1
 8012bf8:	e7c6      	b.n	8012b88 <_dtoa_r+0x248>
 8012bfa:	bf00      	nop
 8012bfc:	f3af 8000 	nop.w
 8012c00:	636f4361 	.word	0x636f4361
 8012c04:	3fd287a7 	.word	0x3fd287a7
 8012c08:	8b60c8b3 	.word	0x8b60c8b3
 8012c0c:	3fc68a28 	.word	0x3fc68a28
 8012c10:	509f79fb 	.word	0x509f79fb
 8012c14:	3fd34413 	.word	0x3fd34413
 8012c18:	080156f0 	.word	0x080156f0
 8012c1c:	080157ab 	.word	0x080157ab
 8012c20:	7ff00000 	.word	0x7ff00000
 8012c24:	080157a7 	.word	0x080157a7
 8012c28:	0801579e 	.word	0x0801579e
 8012c2c:	080156cd 	.word	0x080156cd
 8012c30:	08015900 	.word	0x08015900
 8012c34:	08015806 	.word	0x08015806
 8012c38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012c3a:	9901      	ldr	r1, [sp, #4]
 8012c3c:	6011      	str	r1, [r2, #0]
 8012c3e:	f1b9 0f0e 	cmp.w	r9, #14
 8012c42:	d86c      	bhi.n	8012d1e <_dtoa_r+0x3de>
 8012c44:	2c00      	cmp	r4, #0
 8012c46:	d06a      	beq.n	8012d1e <_dtoa_r+0x3de>
 8012c48:	f1bb 0f00 	cmp.w	fp, #0
 8012c4c:	f340 80a0 	ble.w	8012d90 <_dtoa_r+0x450>
 8012c50:	49c1      	ldr	r1, [pc, #772]	; (8012f58 <_dtoa_r+0x618>)
 8012c52:	f00b 020f 	and.w	r2, fp, #15
 8012c56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012c5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012c5e:	ed92 7b00 	vldr	d7, [r2]
 8012c62:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012c66:	f000 8087 	beq.w	8012d78 <_dtoa_r+0x438>
 8012c6a:	4abc      	ldr	r2, [pc, #752]	; (8012f5c <_dtoa_r+0x61c>)
 8012c6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012c70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012c74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012c78:	f001 010f 	and.w	r1, r1, #15
 8012c7c:	2203      	movs	r2, #3
 8012c7e:	48b7      	ldr	r0, [pc, #732]	; (8012f5c <_dtoa_r+0x61c>)
 8012c80:	2900      	cmp	r1, #0
 8012c82:	d17b      	bne.n	8012d7c <_dtoa_r+0x43c>
 8012c84:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012c88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c92:	2900      	cmp	r1, #0
 8012c94:	f000 80a2 	beq.w	8012ddc <_dtoa_r+0x49c>
 8012c98:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012c9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ca0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca8:	f140 8098 	bpl.w	8012ddc <_dtoa_r+0x49c>
 8012cac:	f1b9 0f00 	cmp.w	r9, #0
 8012cb0:	f000 8094 	beq.w	8012ddc <_dtoa_r+0x49c>
 8012cb4:	f1ba 0f00 	cmp.w	sl, #0
 8012cb8:	dd2f      	ble.n	8012d1a <_dtoa_r+0x3da>
 8012cba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012cc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cc6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012cca:	3201      	adds	r2, #1
 8012ccc:	4650      	mov	r0, sl
 8012cce:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012cd2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012cd6:	ee07 2a90 	vmov	s15, r2
 8012cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012cde:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012ce2:	ee15 4a90 	vmov	r4, s11
 8012ce6:	ec52 1b15 	vmov	r1, r2, d5
 8012cea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d177      	bne.n	8012de2 <_dtoa_r+0x4a2>
 8012cf2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012cf6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012cfa:	ec42 1b17 	vmov	d7, r1, r2
 8012cfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d06:	f300 8263 	bgt.w	80131d0 <_dtoa_r+0x890>
 8012d0a:	eeb1 7b47 	vneg.f64	d7, d7
 8012d0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d16:	f100 8258 	bmi.w	80131ca <_dtoa_r+0x88a>
 8012d1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d20:	2a00      	cmp	r2, #0
 8012d22:	f2c0 811d 	blt.w	8012f60 <_dtoa_r+0x620>
 8012d26:	f1bb 0f0e 	cmp.w	fp, #14
 8012d2a:	f300 8119 	bgt.w	8012f60 <_dtoa_r+0x620>
 8012d2e:	4b8a      	ldr	r3, [pc, #552]	; (8012f58 <_dtoa_r+0x618>)
 8012d30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012d34:	ed93 6b00 	vldr	d6, [r3]
 8012d38:	9b08      	ldr	r3, [sp, #32]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	f280 80b7 	bge.w	8012eae <_dtoa_r+0x56e>
 8012d40:	f1b9 0f00 	cmp.w	r9, #0
 8012d44:	f300 80b3 	bgt.w	8012eae <_dtoa_r+0x56e>
 8012d48:	f040 823f 	bne.w	80131ca <_dtoa_r+0x88a>
 8012d4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012d50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012d54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d60:	464c      	mov	r4, r9
 8012d62:	464f      	mov	r7, r9
 8012d64:	f280 8215 	bge.w	8013192 <_dtoa_r+0x852>
 8012d68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012d6c:	2331      	movs	r3, #49	; 0x31
 8012d6e:	f808 3b01 	strb.w	r3, [r8], #1
 8012d72:	f10b 0b01 	add.w	fp, fp, #1
 8012d76:	e211      	b.n	801319c <_dtoa_r+0x85c>
 8012d78:	2202      	movs	r2, #2
 8012d7a:	e780      	b.n	8012c7e <_dtoa_r+0x33e>
 8012d7c:	07cc      	lsls	r4, r1, #31
 8012d7e:	d504      	bpl.n	8012d8a <_dtoa_r+0x44a>
 8012d80:	ed90 6b00 	vldr	d6, [r0]
 8012d84:	3201      	adds	r2, #1
 8012d86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d8a:	1049      	asrs	r1, r1, #1
 8012d8c:	3008      	adds	r0, #8
 8012d8e:	e777      	b.n	8012c80 <_dtoa_r+0x340>
 8012d90:	d022      	beq.n	8012dd8 <_dtoa_r+0x498>
 8012d92:	f1cb 0100 	rsb	r1, fp, #0
 8012d96:	4a70      	ldr	r2, [pc, #448]	; (8012f58 <_dtoa_r+0x618>)
 8012d98:	f001 000f 	and.w	r0, r1, #15
 8012d9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012da0:	ed92 7b00 	vldr	d7, [r2]
 8012da4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012dac:	486b      	ldr	r0, [pc, #428]	; (8012f5c <_dtoa_r+0x61c>)
 8012dae:	1109      	asrs	r1, r1, #4
 8012db0:	2400      	movs	r4, #0
 8012db2:	2202      	movs	r2, #2
 8012db4:	b929      	cbnz	r1, 8012dc2 <_dtoa_r+0x482>
 8012db6:	2c00      	cmp	r4, #0
 8012db8:	f43f af6a 	beq.w	8012c90 <_dtoa_r+0x350>
 8012dbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012dc0:	e766      	b.n	8012c90 <_dtoa_r+0x350>
 8012dc2:	07cf      	lsls	r7, r1, #31
 8012dc4:	d505      	bpl.n	8012dd2 <_dtoa_r+0x492>
 8012dc6:	ed90 6b00 	vldr	d6, [r0]
 8012dca:	3201      	adds	r2, #1
 8012dcc:	2401      	movs	r4, #1
 8012dce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012dd2:	1049      	asrs	r1, r1, #1
 8012dd4:	3008      	adds	r0, #8
 8012dd6:	e7ed      	b.n	8012db4 <_dtoa_r+0x474>
 8012dd8:	2202      	movs	r2, #2
 8012dda:	e759      	b.n	8012c90 <_dtoa_r+0x350>
 8012ddc:	465f      	mov	r7, fp
 8012dde:	4648      	mov	r0, r9
 8012de0:	e775      	b.n	8012cce <_dtoa_r+0x38e>
 8012de2:	ec42 1b17 	vmov	d7, r1, r2
 8012de6:	4a5c      	ldr	r2, [pc, #368]	; (8012f58 <_dtoa_r+0x618>)
 8012de8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012dec:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012df0:	9a01      	ldr	r2, [sp, #4]
 8012df2:	1814      	adds	r4, r2, r0
 8012df4:	9a07      	ldr	r2, [sp, #28]
 8012df6:	b352      	cbz	r2, 8012e4e <_dtoa_r+0x50e>
 8012df8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012dfc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012e00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012e08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012e0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012e10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012e14:	ee14 2a90 	vmov	r2, s9
 8012e18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012e1c:	3230      	adds	r2, #48	; 0x30
 8012e1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012e22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e2a:	f808 2b01 	strb.w	r2, [r8], #1
 8012e2e:	d439      	bmi.n	8012ea4 <_dtoa_r+0x564>
 8012e30:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012e34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e3c:	d472      	bmi.n	8012f24 <_dtoa_r+0x5e4>
 8012e3e:	45a0      	cmp	r8, r4
 8012e40:	f43f af6b 	beq.w	8012d1a <_dtoa_r+0x3da>
 8012e44:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012e48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012e4c:	e7e0      	b.n	8012e10 <_dtoa_r+0x4d0>
 8012e4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012e56:	4621      	mov	r1, r4
 8012e58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012e5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012e60:	ee14 2a90 	vmov	r2, s9
 8012e64:	3230      	adds	r2, #48	; 0x30
 8012e66:	f808 2b01 	strb.w	r2, [r8], #1
 8012e6a:	45a0      	cmp	r8, r4
 8012e6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012e70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012e74:	d118      	bne.n	8012ea8 <_dtoa_r+0x568>
 8012e76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012e7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012e7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e86:	dc4d      	bgt.n	8012f24 <_dtoa_r+0x5e4>
 8012e88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012e8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e94:	f57f af41 	bpl.w	8012d1a <_dtoa_r+0x3da>
 8012e98:	4688      	mov	r8, r1
 8012e9a:	3901      	subs	r1, #1
 8012e9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012ea0:	2b30      	cmp	r3, #48	; 0x30
 8012ea2:	d0f9      	beq.n	8012e98 <_dtoa_r+0x558>
 8012ea4:	46bb      	mov	fp, r7
 8012ea6:	e02a      	b.n	8012efe <_dtoa_r+0x5be>
 8012ea8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012eac:	e7d6      	b.n	8012e5c <_dtoa_r+0x51c>
 8012eae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012eb2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012eb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012eba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012ebe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ec2:	ee15 3a10 	vmov	r3, s10
 8012ec6:	3330      	adds	r3, #48	; 0x30
 8012ec8:	f808 3b01 	strb.w	r3, [r8], #1
 8012ecc:	9b01      	ldr	r3, [sp, #4]
 8012ece:	eba8 0303 	sub.w	r3, r8, r3
 8012ed2:	4599      	cmp	r9, r3
 8012ed4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012ed8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012edc:	d133      	bne.n	8012f46 <_dtoa_r+0x606>
 8012ede:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012ee2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eea:	dc1a      	bgt.n	8012f22 <_dtoa_r+0x5e2>
 8012eec:	eeb4 7b46 	vcmp.f64	d7, d6
 8012ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef4:	d103      	bne.n	8012efe <_dtoa_r+0x5be>
 8012ef6:	ee15 3a10 	vmov	r3, s10
 8012efa:	07d9      	lsls	r1, r3, #31
 8012efc:	d411      	bmi.n	8012f22 <_dtoa_r+0x5e2>
 8012efe:	4629      	mov	r1, r5
 8012f00:	4630      	mov	r0, r6
 8012f02:	f000 fbf3 	bl	80136ec <_Bfree>
 8012f06:	2300      	movs	r3, #0
 8012f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f0a:	f888 3000 	strb.w	r3, [r8]
 8012f0e:	f10b 0301 	add.w	r3, fp, #1
 8012f12:	6013      	str	r3, [r2, #0]
 8012f14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	f43f ad61 	beq.w	80129de <_dtoa_r+0x9e>
 8012f1c:	f8c3 8000 	str.w	r8, [r3]
 8012f20:	e55d      	b.n	80129de <_dtoa_r+0x9e>
 8012f22:	465f      	mov	r7, fp
 8012f24:	4643      	mov	r3, r8
 8012f26:	4698      	mov	r8, r3
 8012f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f2c:	2a39      	cmp	r2, #57	; 0x39
 8012f2e:	d106      	bne.n	8012f3e <_dtoa_r+0x5fe>
 8012f30:	9a01      	ldr	r2, [sp, #4]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d1f7      	bne.n	8012f26 <_dtoa_r+0x5e6>
 8012f36:	9901      	ldr	r1, [sp, #4]
 8012f38:	2230      	movs	r2, #48	; 0x30
 8012f3a:	3701      	adds	r7, #1
 8012f3c:	700a      	strb	r2, [r1, #0]
 8012f3e:	781a      	ldrb	r2, [r3, #0]
 8012f40:	3201      	adds	r2, #1
 8012f42:	701a      	strb	r2, [r3, #0]
 8012f44:	e7ae      	b.n	8012ea4 <_dtoa_r+0x564>
 8012f46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012f4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f52:	d1b2      	bne.n	8012eba <_dtoa_r+0x57a>
 8012f54:	e7d3      	b.n	8012efe <_dtoa_r+0x5be>
 8012f56:	bf00      	nop
 8012f58:	08015900 	.word	0x08015900
 8012f5c:	080158d8 	.word	0x080158d8
 8012f60:	9907      	ldr	r1, [sp, #28]
 8012f62:	2900      	cmp	r1, #0
 8012f64:	f000 80d0 	beq.w	8013108 <_dtoa_r+0x7c8>
 8012f68:	9906      	ldr	r1, [sp, #24]
 8012f6a:	2901      	cmp	r1, #1
 8012f6c:	f300 80b4 	bgt.w	80130d8 <_dtoa_r+0x798>
 8012f70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f72:	2900      	cmp	r1, #0
 8012f74:	f000 80ac 	beq.w	80130d0 <_dtoa_r+0x790>
 8012f78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012f7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012f80:	461c      	mov	r4, r3
 8012f82:	930a      	str	r3, [sp, #40]	; 0x28
 8012f84:	9b04      	ldr	r3, [sp, #16]
 8012f86:	4413      	add	r3, r2
 8012f88:	9304      	str	r3, [sp, #16]
 8012f8a:	9b05      	ldr	r3, [sp, #20]
 8012f8c:	2101      	movs	r1, #1
 8012f8e:	4413      	add	r3, r2
 8012f90:	4630      	mov	r0, r6
 8012f92:	9305      	str	r3, [sp, #20]
 8012f94:	f000 fc62 	bl	801385c <__i2b>
 8012f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f9a:	4607      	mov	r7, r0
 8012f9c:	f1b8 0f00 	cmp.w	r8, #0
 8012fa0:	dd0d      	ble.n	8012fbe <_dtoa_r+0x67e>
 8012fa2:	9a05      	ldr	r2, [sp, #20]
 8012fa4:	2a00      	cmp	r2, #0
 8012fa6:	dd0a      	ble.n	8012fbe <_dtoa_r+0x67e>
 8012fa8:	4542      	cmp	r2, r8
 8012faa:	9904      	ldr	r1, [sp, #16]
 8012fac:	bfa8      	it	ge
 8012fae:	4642      	movge	r2, r8
 8012fb0:	1a89      	subs	r1, r1, r2
 8012fb2:	9104      	str	r1, [sp, #16]
 8012fb4:	9905      	ldr	r1, [sp, #20]
 8012fb6:	eba8 0802 	sub.w	r8, r8, r2
 8012fba:	1a8a      	subs	r2, r1, r2
 8012fbc:	9205      	str	r2, [sp, #20]
 8012fbe:	b303      	cbz	r3, 8013002 <_dtoa_r+0x6c2>
 8012fc0:	9a07      	ldr	r2, [sp, #28]
 8012fc2:	2a00      	cmp	r2, #0
 8012fc4:	f000 80a5 	beq.w	8013112 <_dtoa_r+0x7d2>
 8012fc8:	2c00      	cmp	r4, #0
 8012fca:	dd13      	ble.n	8012ff4 <_dtoa_r+0x6b4>
 8012fcc:	4639      	mov	r1, r7
 8012fce:	4622      	mov	r2, r4
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8012fd4:	f000 fd02 	bl	80139dc <__pow5mult>
 8012fd8:	462a      	mov	r2, r5
 8012fda:	4601      	mov	r1, r0
 8012fdc:	4607      	mov	r7, r0
 8012fde:	4630      	mov	r0, r6
 8012fe0:	f000 fc52 	bl	8013888 <__multiply>
 8012fe4:	4629      	mov	r1, r5
 8012fe6:	900a      	str	r0, [sp, #40]	; 0x28
 8012fe8:	4630      	mov	r0, r6
 8012fea:	f000 fb7f 	bl	80136ec <_Bfree>
 8012fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ff2:	4615      	mov	r5, r2
 8012ff4:	1b1a      	subs	r2, r3, r4
 8012ff6:	d004      	beq.n	8013002 <_dtoa_r+0x6c2>
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	f000 fcee 	bl	80139dc <__pow5mult>
 8013000:	4605      	mov	r5, r0
 8013002:	2101      	movs	r1, #1
 8013004:	4630      	mov	r0, r6
 8013006:	f000 fc29 	bl	801385c <__i2b>
 801300a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801300c:	2b00      	cmp	r3, #0
 801300e:	4604      	mov	r4, r0
 8013010:	f340 8081 	ble.w	8013116 <_dtoa_r+0x7d6>
 8013014:	461a      	mov	r2, r3
 8013016:	4601      	mov	r1, r0
 8013018:	4630      	mov	r0, r6
 801301a:	f000 fcdf 	bl	80139dc <__pow5mult>
 801301e:	9b06      	ldr	r3, [sp, #24]
 8013020:	2b01      	cmp	r3, #1
 8013022:	4604      	mov	r4, r0
 8013024:	dd7a      	ble.n	801311c <_dtoa_r+0x7dc>
 8013026:	2300      	movs	r3, #0
 8013028:	930a      	str	r3, [sp, #40]	; 0x28
 801302a:	6922      	ldr	r2, [r4, #16]
 801302c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013030:	6910      	ldr	r0, [r2, #16]
 8013032:	f000 fbc3 	bl	80137bc <__hi0bits>
 8013036:	f1c0 0020 	rsb	r0, r0, #32
 801303a:	9b05      	ldr	r3, [sp, #20]
 801303c:	4418      	add	r0, r3
 801303e:	f010 001f 	ands.w	r0, r0, #31
 8013042:	f000 808c 	beq.w	801315e <_dtoa_r+0x81e>
 8013046:	f1c0 0220 	rsb	r2, r0, #32
 801304a:	2a04      	cmp	r2, #4
 801304c:	f340 8085 	ble.w	801315a <_dtoa_r+0x81a>
 8013050:	f1c0 001c 	rsb	r0, r0, #28
 8013054:	9b04      	ldr	r3, [sp, #16]
 8013056:	4403      	add	r3, r0
 8013058:	9304      	str	r3, [sp, #16]
 801305a:	9b05      	ldr	r3, [sp, #20]
 801305c:	4403      	add	r3, r0
 801305e:	4480      	add	r8, r0
 8013060:	9305      	str	r3, [sp, #20]
 8013062:	9b04      	ldr	r3, [sp, #16]
 8013064:	2b00      	cmp	r3, #0
 8013066:	dd05      	ble.n	8013074 <_dtoa_r+0x734>
 8013068:	4629      	mov	r1, r5
 801306a:	461a      	mov	r2, r3
 801306c:	4630      	mov	r0, r6
 801306e:	f000 fd0f 	bl	8013a90 <__lshift>
 8013072:	4605      	mov	r5, r0
 8013074:	9b05      	ldr	r3, [sp, #20]
 8013076:	2b00      	cmp	r3, #0
 8013078:	dd05      	ble.n	8013086 <_dtoa_r+0x746>
 801307a:	4621      	mov	r1, r4
 801307c:	461a      	mov	r2, r3
 801307e:	4630      	mov	r0, r6
 8013080:	f000 fd06 	bl	8013a90 <__lshift>
 8013084:	4604      	mov	r4, r0
 8013086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013088:	2b00      	cmp	r3, #0
 801308a:	d06a      	beq.n	8013162 <_dtoa_r+0x822>
 801308c:	4621      	mov	r1, r4
 801308e:	4628      	mov	r0, r5
 8013090:	f000 fd6e 	bl	8013b70 <__mcmp>
 8013094:	2800      	cmp	r0, #0
 8013096:	da64      	bge.n	8013162 <_dtoa_r+0x822>
 8013098:	2300      	movs	r3, #0
 801309a:	4629      	mov	r1, r5
 801309c:	220a      	movs	r2, #10
 801309e:	4630      	mov	r0, r6
 80130a0:	f000 fb46 	bl	8013730 <__multadd>
 80130a4:	9b07      	ldr	r3, [sp, #28]
 80130a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80130aa:	4605      	mov	r5, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f000 8191 	beq.w	80133d4 <_dtoa_r+0xa94>
 80130b2:	4639      	mov	r1, r7
 80130b4:	2300      	movs	r3, #0
 80130b6:	220a      	movs	r2, #10
 80130b8:	4630      	mov	r0, r6
 80130ba:	f000 fb39 	bl	8013730 <__multadd>
 80130be:	f1ba 0f00 	cmp.w	sl, #0
 80130c2:	4607      	mov	r7, r0
 80130c4:	f300 808d 	bgt.w	80131e2 <_dtoa_r+0x8a2>
 80130c8:	9b06      	ldr	r3, [sp, #24]
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	dc50      	bgt.n	8013170 <_dtoa_r+0x830>
 80130ce:	e088      	b.n	80131e2 <_dtoa_r+0x8a2>
 80130d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80130d6:	e751      	b.n	8012f7c <_dtoa_r+0x63c>
 80130d8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80130dc:	42a3      	cmp	r3, r4
 80130de:	bfbf      	itttt	lt
 80130e0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80130e2:	1ae3      	sublt	r3, r4, r3
 80130e4:	18d2      	addlt	r2, r2, r3
 80130e6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80130e8:	bfb6      	itet	lt
 80130ea:	4623      	movlt	r3, r4
 80130ec:	1b1c      	subge	r4, r3, r4
 80130ee:	2400      	movlt	r4, #0
 80130f0:	f1b9 0f00 	cmp.w	r9, #0
 80130f4:	bfb5      	itete	lt
 80130f6:	9a04      	ldrlt	r2, [sp, #16]
 80130f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80130fc:	eba2 0809 	sublt.w	r8, r2, r9
 8013100:	464a      	movge	r2, r9
 8013102:	bfb8      	it	lt
 8013104:	2200      	movlt	r2, #0
 8013106:	e73c      	b.n	8012f82 <_dtoa_r+0x642>
 8013108:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801310c:	9f07      	ldr	r7, [sp, #28]
 801310e:	461c      	mov	r4, r3
 8013110:	e744      	b.n	8012f9c <_dtoa_r+0x65c>
 8013112:	461a      	mov	r2, r3
 8013114:	e770      	b.n	8012ff8 <_dtoa_r+0x6b8>
 8013116:	9b06      	ldr	r3, [sp, #24]
 8013118:	2b01      	cmp	r3, #1
 801311a:	dc18      	bgt.n	801314e <_dtoa_r+0x80e>
 801311c:	9b02      	ldr	r3, [sp, #8]
 801311e:	b9b3      	cbnz	r3, 801314e <_dtoa_r+0x80e>
 8013120:	9b03      	ldr	r3, [sp, #12]
 8013122:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013126:	b9a2      	cbnz	r2, 8013152 <_dtoa_r+0x812>
 8013128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801312c:	0d12      	lsrs	r2, r2, #20
 801312e:	0512      	lsls	r2, r2, #20
 8013130:	b18a      	cbz	r2, 8013156 <_dtoa_r+0x816>
 8013132:	9b04      	ldr	r3, [sp, #16]
 8013134:	3301      	adds	r3, #1
 8013136:	9304      	str	r3, [sp, #16]
 8013138:	9b05      	ldr	r3, [sp, #20]
 801313a:	3301      	adds	r3, #1
 801313c:	9305      	str	r3, [sp, #20]
 801313e:	2301      	movs	r3, #1
 8013140:	930a      	str	r3, [sp, #40]	; 0x28
 8013142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013144:	2b00      	cmp	r3, #0
 8013146:	f47f af70 	bne.w	801302a <_dtoa_r+0x6ea>
 801314a:	2001      	movs	r0, #1
 801314c:	e775      	b.n	801303a <_dtoa_r+0x6fa>
 801314e:	2300      	movs	r3, #0
 8013150:	e7f6      	b.n	8013140 <_dtoa_r+0x800>
 8013152:	9b02      	ldr	r3, [sp, #8]
 8013154:	e7f4      	b.n	8013140 <_dtoa_r+0x800>
 8013156:	920a      	str	r2, [sp, #40]	; 0x28
 8013158:	e7f3      	b.n	8013142 <_dtoa_r+0x802>
 801315a:	d082      	beq.n	8013062 <_dtoa_r+0x722>
 801315c:	4610      	mov	r0, r2
 801315e:	301c      	adds	r0, #28
 8013160:	e778      	b.n	8013054 <_dtoa_r+0x714>
 8013162:	f1b9 0f00 	cmp.w	r9, #0
 8013166:	dc37      	bgt.n	80131d8 <_dtoa_r+0x898>
 8013168:	9b06      	ldr	r3, [sp, #24]
 801316a:	2b02      	cmp	r3, #2
 801316c:	dd34      	ble.n	80131d8 <_dtoa_r+0x898>
 801316e:	46ca      	mov	sl, r9
 8013170:	f1ba 0f00 	cmp.w	sl, #0
 8013174:	d10d      	bne.n	8013192 <_dtoa_r+0x852>
 8013176:	4621      	mov	r1, r4
 8013178:	4653      	mov	r3, sl
 801317a:	2205      	movs	r2, #5
 801317c:	4630      	mov	r0, r6
 801317e:	f000 fad7 	bl	8013730 <__multadd>
 8013182:	4601      	mov	r1, r0
 8013184:	4604      	mov	r4, r0
 8013186:	4628      	mov	r0, r5
 8013188:	f000 fcf2 	bl	8013b70 <__mcmp>
 801318c:	2800      	cmp	r0, #0
 801318e:	f73f adeb 	bgt.w	8012d68 <_dtoa_r+0x428>
 8013192:	9b08      	ldr	r3, [sp, #32]
 8013194:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013198:	ea6f 0b03 	mvn.w	fp, r3
 801319c:	f04f 0900 	mov.w	r9, #0
 80131a0:	4621      	mov	r1, r4
 80131a2:	4630      	mov	r0, r6
 80131a4:	f000 faa2 	bl	80136ec <_Bfree>
 80131a8:	2f00      	cmp	r7, #0
 80131aa:	f43f aea8 	beq.w	8012efe <_dtoa_r+0x5be>
 80131ae:	f1b9 0f00 	cmp.w	r9, #0
 80131b2:	d005      	beq.n	80131c0 <_dtoa_r+0x880>
 80131b4:	45b9      	cmp	r9, r7
 80131b6:	d003      	beq.n	80131c0 <_dtoa_r+0x880>
 80131b8:	4649      	mov	r1, r9
 80131ba:	4630      	mov	r0, r6
 80131bc:	f000 fa96 	bl	80136ec <_Bfree>
 80131c0:	4639      	mov	r1, r7
 80131c2:	4630      	mov	r0, r6
 80131c4:	f000 fa92 	bl	80136ec <_Bfree>
 80131c8:	e699      	b.n	8012efe <_dtoa_r+0x5be>
 80131ca:	2400      	movs	r4, #0
 80131cc:	4627      	mov	r7, r4
 80131ce:	e7e0      	b.n	8013192 <_dtoa_r+0x852>
 80131d0:	46bb      	mov	fp, r7
 80131d2:	4604      	mov	r4, r0
 80131d4:	4607      	mov	r7, r0
 80131d6:	e5c7      	b.n	8012d68 <_dtoa_r+0x428>
 80131d8:	9b07      	ldr	r3, [sp, #28]
 80131da:	46ca      	mov	sl, r9
 80131dc:	2b00      	cmp	r3, #0
 80131de:	f000 8100 	beq.w	80133e2 <_dtoa_r+0xaa2>
 80131e2:	f1b8 0f00 	cmp.w	r8, #0
 80131e6:	dd05      	ble.n	80131f4 <_dtoa_r+0x8b4>
 80131e8:	4639      	mov	r1, r7
 80131ea:	4642      	mov	r2, r8
 80131ec:	4630      	mov	r0, r6
 80131ee:	f000 fc4f 	bl	8013a90 <__lshift>
 80131f2:	4607      	mov	r7, r0
 80131f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d05d      	beq.n	80132b6 <_dtoa_r+0x976>
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	4630      	mov	r0, r6
 80131fe:	f000 fa35 	bl	801366c <_Balloc>
 8013202:	4680      	mov	r8, r0
 8013204:	b928      	cbnz	r0, 8013212 <_dtoa_r+0x8d2>
 8013206:	4b82      	ldr	r3, [pc, #520]	; (8013410 <_dtoa_r+0xad0>)
 8013208:	4602      	mov	r2, r0
 801320a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801320e:	f7ff bbaf 	b.w	8012970 <_dtoa_r+0x30>
 8013212:	693a      	ldr	r2, [r7, #16]
 8013214:	3202      	adds	r2, #2
 8013216:	0092      	lsls	r2, r2, #2
 8013218:	f107 010c 	add.w	r1, r7, #12
 801321c:	300c      	adds	r0, #12
 801321e:	f7fe fbbf 	bl	80119a0 <memcpy>
 8013222:	2201      	movs	r2, #1
 8013224:	4641      	mov	r1, r8
 8013226:	4630      	mov	r0, r6
 8013228:	f000 fc32 	bl	8013a90 <__lshift>
 801322c:	9b01      	ldr	r3, [sp, #4]
 801322e:	3301      	adds	r3, #1
 8013230:	9304      	str	r3, [sp, #16]
 8013232:	9b01      	ldr	r3, [sp, #4]
 8013234:	4453      	add	r3, sl
 8013236:	9308      	str	r3, [sp, #32]
 8013238:	9b02      	ldr	r3, [sp, #8]
 801323a:	f003 0301 	and.w	r3, r3, #1
 801323e:	46b9      	mov	r9, r7
 8013240:	9307      	str	r3, [sp, #28]
 8013242:	4607      	mov	r7, r0
 8013244:	9b04      	ldr	r3, [sp, #16]
 8013246:	4621      	mov	r1, r4
 8013248:	3b01      	subs	r3, #1
 801324a:	4628      	mov	r0, r5
 801324c:	9302      	str	r3, [sp, #8]
 801324e:	f7ff faeb 	bl	8012828 <quorem>
 8013252:	4603      	mov	r3, r0
 8013254:	3330      	adds	r3, #48	; 0x30
 8013256:	9005      	str	r0, [sp, #20]
 8013258:	4649      	mov	r1, r9
 801325a:	4628      	mov	r0, r5
 801325c:	9309      	str	r3, [sp, #36]	; 0x24
 801325e:	f000 fc87 	bl	8013b70 <__mcmp>
 8013262:	463a      	mov	r2, r7
 8013264:	4682      	mov	sl, r0
 8013266:	4621      	mov	r1, r4
 8013268:	4630      	mov	r0, r6
 801326a:	f000 fc9d 	bl	8013ba8 <__mdiff>
 801326e:	68c2      	ldr	r2, [r0, #12]
 8013270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013272:	4680      	mov	r8, r0
 8013274:	bb0a      	cbnz	r2, 80132ba <_dtoa_r+0x97a>
 8013276:	4601      	mov	r1, r0
 8013278:	4628      	mov	r0, r5
 801327a:	f000 fc79 	bl	8013b70 <__mcmp>
 801327e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013280:	4602      	mov	r2, r0
 8013282:	4641      	mov	r1, r8
 8013284:	4630      	mov	r0, r6
 8013286:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801328a:	f000 fa2f 	bl	80136ec <_Bfree>
 801328e:	9b06      	ldr	r3, [sp, #24]
 8013290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013292:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013296:	ea43 0102 	orr.w	r1, r3, r2
 801329a:	9b07      	ldr	r3, [sp, #28]
 801329c:	430b      	orrs	r3, r1
 801329e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132a0:	d10d      	bne.n	80132be <_dtoa_r+0x97e>
 80132a2:	2b39      	cmp	r3, #57	; 0x39
 80132a4:	d029      	beq.n	80132fa <_dtoa_r+0x9ba>
 80132a6:	f1ba 0f00 	cmp.w	sl, #0
 80132aa:	dd01      	ble.n	80132b0 <_dtoa_r+0x970>
 80132ac:	9b05      	ldr	r3, [sp, #20]
 80132ae:	3331      	adds	r3, #49	; 0x31
 80132b0:	9a02      	ldr	r2, [sp, #8]
 80132b2:	7013      	strb	r3, [r2, #0]
 80132b4:	e774      	b.n	80131a0 <_dtoa_r+0x860>
 80132b6:	4638      	mov	r0, r7
 80132b8:	e7b8      	b.n	801322c <_dtoa_r+0x8ec>
 80132ba:	2201      	movs	r2, #1
 80132bc:	e7e1      	b.n	8013282 <_dtoa_r+0x942>
 80132be:	f1ba 0f00 	cmp.w	sl, #0
 80132c2:	db06      	blt.n	80132d2 <_dtoa_r+0x992>
 80132c4:	9906      	ldr	r1, [sp, #24]
 80132c6:	ea41 0a0a 	orr.w	sl, r1, sl
 80132ca:	9907      	ldr	r1, [sp, #28]
 80132cc:	ea5a 0101 	orrs.w	r1, sl, r1
 80132d0:	d120      	bne.n	8013314 <_dtoa_r+0x9d4>
 80132d2:	2a00      	cmp	r2, #0
 80132d4:	ddec      	ble.n	80132b0 <_dtoa_r+0x970>
 80132d6:	4629      	mov	r1, r5
 80132d8:	2201      	movs	r2, #1
 80132da:	4630      	mov	r0, r6
 80132dc:	9304      	str	r3, [sp, #16]
 80132de:	f000 fbd7 	bl	8013a90 <__lshift>
 80132e2:	4621      	mov	r1, r4
 80132e4:	4605      	mov	r5, r0
 80132e6:	f000 fc43 	bl	8013b70 <__mcmp>
 80132ea:	2800      	cmp	r0, #0
 80132ec:	9b04      	ldr	r3, [sp, #16]
 80132ee:	dc02      	bgt.n	80132f6 <_dtoa_r+0x9b6>
 80132f0:	d1de      	bne.n	80132b0 <_dtoa_r+0x970>
 80132f2:	07da      	lsls	r2, r3, #31
 80132f4:	d5dc      	bpl.n	80132b0 <_dtoa_r+0x970>
 80132f6:	2b39      	cmp	r3, #57	; 0x39
 80132f8:	d1d8      	bne.n	80132ac <_dtoa_r+0x96c>
 80132fa:	9a02      	ldr	r2, [sp, #8]
 80132fc:	2339      	movs	r3, #57	; 0x39
 80132fe:	7013      	strb	r3, [r2, #0]
 8013300:	4643      	mov	r3, r8
 8013302:	4698      	mov	r8, r3
 8013304:	3b01      	subs	r3, #1
 8013306:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801330a:	2a39      	cmp	r2, #57	; 0x39
 801330c:	d051      	beq.n	80133b2 <_dtoa_r+0xa72>
 801330e:	3201      	adds	r2, #1
 8013310:	701a      	strb	r2, [r3, #0]
 8013312:	e745      	b.n	80131a0 <_dtoa_r+0x860>
 8013314:	2a00      	cmp	r2, #0
 8013316:	dd03      	ble.n	8013320 <_dtoa_r+0x9e0>
 8013318:	2b39      	cmp	r3, #57	; 0x39
 801331a:	d0ee      	beq.n	80132fa <_dtoa_r+0x9ba>
 801331c:	3301      	adds	r3, #1
 801331e:	e7c7      	b.n	80132b0 <_dtoa_r+0x970>
 8013320:	9a04      	ldr	r2, [sp, #16]
 8013322:	9908      	ldr	r1, [sp, #32]
 8013324:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013328:	428a      	cmp	r2, r1
 801332a:	d02b      	beq.n	8013384 <_dtoa_r+0xa44>
 801332c:	4629      	mov	r1, r5
 801332e:	2300      	movs	r3, #0
 8013330:	220a      	movs	r2, #10
 8013332:	4630      	mov	r0, r6
 8013334:	f000 f9fc 	bl	8013730 <__multadd>
 8013338:	45b9      	cmp	r9, r7
 801333a:	4605      	mov	r5, r0
 801333c:	f04f 0300 	mov.w	r3, #0
 8013340:	f04f 020a 	mov.w	r2, #10
 8013344:	4649      	mov	r1, r9
 8013346:	4630      	mov	r0, r6
 8013348:	d107      	bne.n	801335a <_dtoa_r+0xa1a>
 801334a:	f000 f9f1 	bl	8013730 <__multadd>
 801334e:	4681      	mov	r9, r0
 8013350:	4607      	mov	r7, r0
 8013352:	9b04      	ldr	r3, [sp, #16]
 8013354:	3301      	adds	r3, #1
 8013356:	9304      	str	r3, [sp, #16]
 8013358:	e774      	b.n	8013244 <_dtoa_r+0x904>
 801335a:	f000 f9e9 	bl	8013730 <__multadd>
 801335e:	4639      	mov	r1, r7
 8013360:	4681      	mov	r9, r0
 8013362:	2300      	movs	r3, #0
 8013364:	220a      	movs	r2, #10
 8013366:	4630      	mov	r0, r6
 8013368:	f000 f9e2 	bl	8013730 <__multadd>
 801336c:	4607      	mov	r7, r0
 801336e:	e7f0      	b.n	8013352 <_dtoa_r+0xa12>
 8013370:	f1ba 0f00 	cmp.w	sl, #0
 8013374:	9a01      	ldr	r2, [sp, #4]
 8013376:	bfcc      	ite	gt
 8013378:	46d0      	movgt	r8, sl
 801337a:	f04f 0801 	movle.w	r8, #1
 801337e:	4490      	add	r8, r2
 8013380:	f04f 0900 	mov.w	r9, #0
 8013384:	4629      	mov	r1, r5
 8013386:	2201      	movs	r2, #1
 8013388:	4630      	mov	r0, r6
 801338a:	9302      	str	r3, [sp, #8]
 801338c:	f000 fb80 	bl	8013a90 <__lshift>
 8013390:	4621      	mov	r1, r4
 8013392:	4605      	mov	r5, r0
 8013394:	f000 fbec 	bl	8013b70 <__mcmp>
 8013398:	2800      	cmp	r0, #0
 801339a:	dcb1      	bgt.n	8013300 <_dtoa_r+0x9c0>
 801339c:	d102      	bne.n	80133a4 <_dtoa_r+0xa64>
 801339e:	9b02      	ldr	r3, [sp, #8]
 80133a0:	07db      	lsls	r3, r3, #31
 80133a2:	d4ad      	bmi.n	8013300 <_dtoa_r+0x9c0>
 80133a4:	4643      	mov	r3, r8
 80133a6:	4698      	mov	r8, r3
 80133a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80133ac:	2a30      	cmp	r2, #48	; 0x30
 80133ae:	d0fa      	beq.n	80133a6 <_dtoa_r+0xa66>
 80133b0:	e6f6      	b.n	80131a0 <_dtoa_r+0x860>
 80133b2:	9a01      	ldr	r2, [sp, #4]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d1a4      	bne.n	8013302 <_dtoa_r+0x9c2>
 80133b8:	f10b 0b01 	add.w	fp, fp, #1
 80133bc:	2331      	movs	r3, #49	; 0x31
 80133be:	e778      	b.n	80132b2 <_dtoa_r+0x972>
 80133c0:	4b14      	ldr	r3, [pc, #80]	; (8013414 <_dtoa_r+0xad4>)
 80133c2:	f7ff bb27 	b.w	8012a14 <_dtoa_r+0xd4>
 80133c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f47f ab03 	bne.w	80129d4 <_dtoa_r+0x94>
 80133ce:	4b12      	ldr	r3, [pc, #72]	; (8013418 <_dtoa_r+0xad8>)
 80133d0:	f7ff bb20 	b.w	8012a14 <_dtoa_r+0xd4>
 80133d4:	f1ba 0f00 	cmp.w	sl, #0
 80133d8:	dc03      	bgt.n	80133e2 <_dtoa_r+0xaa2>
 80133da:	9b06      	ldr	r3, [sp, #24]
 80133dc:	2b02      	cmp	r3, #2
 80133de:	f73f aec7 	bgt.w	8013170 <_dtoa_r+0x830>
 80133e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80133e6:	4621      	mov	r1, r4
 80133e8:	4628      	mov	r0, r5
 80133ea:	f7ff fa1d 	bl	8012828 <quorem>
 80133ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80133f2:	f808 3b01 	strb.w	r3, [r8], #1
 80133f6:	9a01      	ldr	r2, [sp, #4]
 80133f8:	eba8 0202 	sub.w	r2, r8, r2
 80133fc:	4592      	cmp	sl, r2
 80133fe:	ddb7      	ble.n	8013370 <_dtoa_r+0xa30>
 8013400:	4629      	mov	r1, r5
 8013402:	2300      	movs	r3, #0
 8013404:	220a      	movs	r2, #10
 8013406:	4630      	mov	r0, r6
 8013408:	f000 f992 	bl	8013730 <__multadd>
 801340c:	4605      	mov	r5, r0
 801340e:	e7ea      	b.n	80133e6 <_dtoa_r+0xaa6>
 8013410:	08015806 	.word	0x08015806
 8013414:	080156cc 	.word	0x080156cc
 8013418:	0801579e 	.word	0x0801579e

0801341c <__env_lock>:
 801341c:	4801      	ldr	r0, [pc, #4]	; (8013424 <__env_lock+0x8>)
 801341e:	f000 b916 	b.w	801364e <__retarget_lock_acquire_recursive>
 8013422:	bf00      	nop
 8013424:	2000de7c 	.word	0x2000de7c

08013428 <__env_unlock>:
 8013428:	4801      	ldr	r0, [pc, #4]	; (8013430 <__env_unlock+0x8>)
 801342a:	f000 b911 	b.w	8013650 <__retarget_lock_release_recursive>
 801342e:	bf00      	nop
 8013430:	2000de7c 	.word	0x2000de7c

08013434 <std>:
 8013434:	2300      	movs	r3, #0
 8013436:	b510      	push	{r4, lr}
 8013438:	4604      	mov	r4, r0
 801343a:	e9c0 3300 	strd	r3, r3, [r0]
 801343e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013442:	6083      	str	r3, [r0, #8]
 8013444:	8181      	strh	r1, [r0, #12]
 8013446:	6643      	str	r3, [r0, #100]	; 0x64
 8013448:	81c2      	strh	r2, [r0, #14]
 801344a:	6183      	str	r3, [r0, #24]
 801344c:	4619      	mov	r1, r3
 801344e:	2208      	movs	r2, #8
 8013450:	305c      	adds	r0, #92	; 0x5c
 8013452:	f7fe fab3 	bl	80119bc <memset>
 8013456:	4b05      	ldr	r3, [pc, #20]	; (801346c <std+0x38>)
 8013458:	6263      	str	r3, [r4, #36]	; 0x24
 801345a:	4b05      	ldr	r3, [pc, #20]	; (8013470 <std+0x3c>)
 801345c:	62a3      	str	r3, [r4, #40]	; 0x28
 801345e:	4b05      	ldr	r3, [pc, #20]	; (8013474 <std+0x40>)
 8013460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013462:	4b05      	ldr	r3, [pc, #20]	; (8013478 <std+0x44>)
 8013464:	6224      	str	r4, [r4, #32]
 8013466:	6323      	str	r3, [r4, #48]	; 0x30
 8013468:	bd10      	pop	{r4, pc}
 801346a:	bf00      	nop
 801346c:	0801433d 	.word	0x0801433d
 8013470:	0801435f 	.word	0x0801435f
 8013474:	08014397 	.word	0x08014397
 8013478:	080143bb 	.word	0x080143bb

0801347c <_cleanup_r>:
 801347c:	4901      	ldr	r1, [pc, #4]	; (8013484 <_cleanup_r+0x8>)
 801347e:	f000 b8c1 	b.w	8013604 <_fwalk_reent>
 8013482:	bf00      	nop
 8013484:	080146a5 	.word	0x080146a5

08013488 <__sfmoreglue>:
 8013488:	b570      	push	{r4, r5, r6, lr}
 801348a:	2268      	movs	r2, #104	; 0x68
 801348c:	1e4d      	subs	r5, r1, #1
 801348e:	4355      	muls	r5, r2
 8013490:	460e      	mov	r6, r1
 8013492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013496:	f7fe fb1b 	bl	8011ad0 <_malloc_r>
 801349a:	4604      	mov	r4, r0
 801349c:	b140      	cbz	r0, 80134b0 <__sfmoreglue+0x28>
 801349e:	2100      	movs	r1, #0
 80134a0:	e9c0 1600 	strd	r1, r6, [r0]
 80134a4:	300c      	adds	r0, #12
 80134a6:	60a0      	str	r0, [r4, #8]
 80134a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80134ac:	f7fe fa86 	bl	80119bc <memset>
 80134b0:	4620      	mov	r0, r4
 80134b2:	bd70      	pop	{r4, r5, r6, pc}

080134b4 <__sfp_lock_acquire>:
 80134b4:	4801      	ldr	r0, [pc, #4]	; (80134bc <__sfp_lock_acquire+0x8>)
 80134b6:	f000 b8ca 	b.w	801364e <__retarget_lock_acquire_recursive>
 80134ba:	bf00      	nop
 80134bc:	2000de7e 	.word	0x2000de7e

080134c0 <__sfp_lock_release>:
 80134c0:	4801      	ldr	r0, [pc, #4]	; (80134c8 <__sfp_lock_release+0x8>)
 80134c2:	f000 b8c5 	b.w	8013650 <__retarget_lock_release_recursive>
 80134c6:	bf00      	nop
 80134c8:	2000de7e 	.word	0x2000de7e

080134cc <__sinit_lock_acquire>:
 80134cc:	4801      	ldr	r0, [pc, #4]	; (80134d4 <__sinit_lock_acquire+0x8>)
 80134ce:	f000 b8be 	b.w	801364e <__retarget_lock_acquire_recursive>
 80134d2:	bf00      	nop
 80134d4:	2000de7f 	.word	0x2000de7f

080134d8 <__sinit_lock_release>:
 80134d8:	4801      	ldr	r0, [pc, #4]	; (80134e0 <__sinit_lock_release+0x8>)
 80134da:	f000 b8b9 	b.w	8013650 <__retarget_lock_release_recursive>
 80134de:	bf00      	nop
 80134e0:	2000de7f 	.word	0x2000de7f

080134e4 <__sinit>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	4604      	mov	r4, r0
 80134e8:	f7ff fff0 	bl	80134cc <__sinit_lock_acquire>
 80134ec:	69a3      	ldr	r3, [r4, #24]
 80134ee:	b11b      	cbz	r3, 80134f8 <__sinit+0x14>
 80134f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134f4:	f7ff bff0 	b.w	80134d8 <__sinit_lock_release>
 80134f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80134fc:	6523      	str	r3, [r4, #80]	; 0x50
 80134fe:	4b13      	ldr	r3, [pc, #76]	; (801354c <__sinit+0x68>)
 8013500:	4a13      	ldr	r2, [pc, #76]	; (8013550 <__sinit+0x6c>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	62a2      	str	r2, [r4, #40]	; 0x28
 8013506:	42a3      	cmp	r3, r4
 8013508:	bf04      	itt	eq
 801350a:	2301      	moveq	r3, #1
 801350c:	61a3      	streq	r3, [r4, #24]
 801350e:	4620      	mov	r0, r4
 8013510:	f000 f820 	bl	8013554 <__sfp>
 8013514:	6060      	str	r0, [r4, #4]
 8013516:	4620      	mov	r0, r4
 8013518:	f000 f81c 	bl	8013554 <__sfp>
 801351c:	60a0      	str	r0, [r4, #8]
 801351e:	4620      	mov	r0, r4
 8013520:	f000 f818 	bl	8013554 <__sfp>
 8013524:	2200      	movs	r2, #0
 8013526:	60e0      	str	r0, [r4, #12]
 8013528:	2104      	movs	r1, #4
 801352a:	6860      	ldr	r0, [r4, #4]
 801352c:	f7ff ff82 	bl	8013434 <std>
 8013530:	68a0      	ldr	r0, [r4, #8]
 8013532:	2201      	movs	r2, #1
 8013534:	2109      	movs	r1, #9
 8013536:	f7ff ff7d 	bl	8013434 <std>
 801353a:	68e0      	ldr	r0, [r4, #12]
 801353c:	2202      	movs	r2, #2
 801353e:	2112      	movs	r1, #18
 8013540:	f7ff ff78 	bl	8013434 <std>
 8013544:	2301      	movs	r3, #1
 8013546:	61a3      	str	r3, [r4, #24]
 8013548:	e7d2      	b.n	80134f0 <__sinit+0xc>
 801354a:	bf00      	nop
 801354c:	080156b8 	.word	0x080156b8
 8013550:	0801347d 	.word	0x0801347d

08013554 <__sfp>:
 8013554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013556:	4607      	mov	r7, r0
 8013558:	f7ff ffac 	bl	80134b4 <__sfp_lock_acquire>
 801355c:	4b1e      	ldr	r3, [pc, #120]	; (80135d8 <__sfp+0x84>)
 801355e:	681e      	ldr	r6, [r3, #0]
 8013560:	69b3      	ldr	r3, [r6, #24]
 8013562:	b913      	cbnz	r3, 801356a <__sfp+0x16>
 8013564:	4630      	mov	r0, r6
 8013566:	f7ff ffbd 	bl	80134e4 <__sinit>
 801356a:	3648      	adds	r6, #72	; 0x48
 801356c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013570:	3b01      	subs	r3, #1
 8013572:	d503      	bpl.n	801357c <__sfp+0x28>
 8013574:	6833      	ldr	r3, [r6, #0]
 8013576:	b30b      	cbz	r3, 80135bc <__sfp+0x68>
 8013578:	6836      	ldr	r6, [r6, #0]
 801357a:	e7f7      	b.n	801356c <__sfp+0x18>
 801357c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013580:	b9d5      	cbnz	r5, 80135b8 <__sfp+0x64>
 8013582:	4b16      	ldr	r3, [pc, #88]	; (80135dc <__sfp+0x88>)
 8013584:	60e3      	str	r3, [r4, #12]
 8013586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801358a:	6665      	str	r5, [r4, #100]	; 0x64
 801358c:	f000 f85e 	bl	801364c <__retarget_lock_init_recursive>
 8013590:	f7ff ff96 	bl	80134c0 <__sfp_lock_release>
 8013594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801359c:	6025      	str	r5, [r4, #0]
 801359e:	61a5      	str	r5, [r4, #24]
 80135a0:	2208      	movs	r2, #8
 80135a2:	4629      	mov	r1, r5
 80135a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80135a8:	f7fe fa08 	bl	80119bc <memset>
 80135ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80135b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80135b4:	4620      	mov	r0, r4
 80135b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135b8:	3468      	adds	r4, #104	; 0x68
 80135ba:	e7d9      	b.n	8013570 <__sfp+0x1c>
 80135bc:	2104      	movs	r1, #4
 80135be:	4638      	mov	r0, r7
 80135c0:	f7ff ff62 	bl	8013488 <__sfmoreglue>
 80135c4:	4604      	mov	r4, r0
 80135c6:	6030      	str	r0, [r6, #0]
 80135c8:	2800      	cmp	r0, #0
 80135ca:	d1d5      	bne.n	8013578 <__sfp+0x24>
 80135cc:	f7ff ff78 	bl	80134c0 <__sfp_lock_release>
 80135d0:	230c      	movs	r3, #12
 80135d2:	603b      	str	r3, [r7, #0]
 80135d4:	e7ee      	b.n	80135b4 <__sfp+0x60>
 80135d6:	bf00      	nop
 80135d8:	080156b8 	.word	0x080156b8
 80135dc:	ffff0001 	.word	0xffff0001

080135e0 <fiprintf>:
 80135e0:	b40e      	push	{r1, r2, r3}
 80135e2:	b503      	push	{r0, r1, lr}
 80135e4:	4601      	mov	r1, r0
 80135e6:	ab03      	add	r3, sp, #12
 80135e8:	4805      	ldr	r0, [pc, #20]	; (8013600 <fiprintf+0x20>)
 80135ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ee:	6800      	ldr	r0, [r0, #0]
 80135f0:	9301      	str	r3, [sp, #4]
 80135f2:	f000 fd73 	bl	80140dc <_vfiprintf_r>
 80135f6:	b002      	add	sp, #8
 80135f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135fc:	b003      	add	sp, #12
 80135fe:	4770      	bx	lr
 8013600:	200002a4 	.word	0x200002a4

08013604 <_fwalk_reent>:
 8013604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013608:	4606      	mov	r6, r0
 801360a:	4688      	mov	r8, r1
 801360c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013610:	2700      	movs	r7, #0
 8013612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013616:	f1b9 0901 	subs.w	r9, r9, #1
 801361a:	d505      	bpl.n	8013628 <_fwalk_reent+0x24>
 801361c:	6824      	ldr	r4, [r4, #0]
 801361e:	2c00      	cmp	r4, #0
 8013620:	d1f7      	bne.n	8013612 <_fwalk_reent+0xe>
 8013622:	4638      	mov	r0, r7
 8013624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013628:	89ab      	ldrh	r3, [r5, #12]
 801362a:	2b01      	cmp	r3, #1
 801362c:	d907      	bls.n	801363e <_fwalk_reent+0x3a>
 801362e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013632:	3301      	adds	r3, #1
 8013634:	d003      	beq.n	801363e <_fwalk_reent+0x3a>
 8013636:	4629      	mov	r1, r5
 8013638:	4630      	mov	r0, r6
 801363a:	47c0      	blx	r8
 801363c:	4307      	orrs	r7, r0
 801363e:	3568      	adds	r5, #104	; 0x68
 8013640:	e7e9      	b.n	8013616 <_fwalk_reent+0x12>
	...

08013644 <_localeconv_r>:
 8013644:	4800      	ldr	r0, [pc, #0]	; (8013648 <_localeconv_r+0x4>)
 8013646:	4770      	bx	lr
 8013648:	200003f8 	.word	0x200003f8

0801364c <__retarget_lock_init_recursive>:
 801364c:	4770      	bx	lr

0801364e <__retarget_lock_acquire_recursive>:
 801364e:	4770      	bx	lr

08013650 <__retarget_lock_release_recursive>:
 8013650:	4770      	bx	lr
	...

08013654 <__malloc_lock>:
 8013654:	4801      	ldr	r0, [pc, #4]	; (801365c <__malloc_lock+0x8>)
 8013656:	f7ff bffa 	b.w	801364e <__retarget_lock_acquire_recursive>
 801365a:	bf00      	nop
 801365c:	2000de7d 	.word	0x2000de7d

08013660 <__malloc_unlock>:
 8013660:	4801      	ldr	r0, [pc, #4]	; (8013668 <__malloc_unlock+0x8>)
 8013662:	f7ff bff5 	b.w	8013650 <__retarget_lock_release_recursive>
 8013666:	bf00      	nop
 8013668:	2000de7d 	.word	0x2000de7d

0801366c <_Balloc>:
 801366c:	b570      	push	{r4, r5, r6, lr}
 801366e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013670:	4604      	mov	r4, r0
 8013672:	460d      	mov	r5, r1
 8013674:	b976      	cbnz	r6, 8013694 <_Balloc+0x28>
 8013676:	2010      	movs	r0, #16
 8013678:	f7fe f982 	bl	8011980 <malloc>
 801367c:	4602      	mov	r2, r0
 801367e:	6260      	str	r0, [r4, #36]	; 0x24
 8013680:	b920      	cbnz	r0, 801368c <_Balloc+0x20>
 8013682:	4b18      	ldr	r3, [pc, #96]	; (80136e4 <_Balloc+0x78>)
 8013684:	4818      	ldr	r0, [pc, #96]	; (80136e8 <_Balloc+0x7c>)
 8013686:	2166      	movs	r1, #102	; 0x66
 8013688:	f7ff f8b0 	bl	80127ec <__assert_func>
 801368c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013690:	6006      	str	r6, [r0, #0]
 8013692:	60c6      	str	r6, [r0, #12]
 8013694:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013696:	68f3      	ldr	r3, [r6, #12]
 8013698:	b183      	cbz	r3, 80136bc <_Balloc+0x50>
 801369a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80136a2:	b9b8      	cbnz	r0, 80136d4 <_Balloc+0x68>
 80136a4:	2101      	movs	r1, #1
 80136a6:	fa01 f605 	lsl.w	r6, r1, r5
 80136aa:	1d72      	adds	r2, r6, #5
 80136ac:	0092      	lsls	r2, r2, #2
 80136ae:	4620      	mov	r0, r4
 80136b0:	f7fe f98c 	bl	80119cc <_calloc_r>
 80136b4:	b160      	cbz	r0, 80136d0 <_Balloc+0x64>
 80136b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80136ba:	e00e      	b.n	80136da <_Balloc+0x6e>
 80136bc:	2221      	movs	r2, #33	; 0x21
 80136be:	2104      	movs	r1, #4
 80136c0:	4620      	mov	r0, r4
 80136c2:	f7fe f983 	bl	80119cc <_calloc_r>
 80136c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136c8:	60f0      	str	r0, [r6, #12]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d1e4      	bne.n	801369a <_Balloc+0x2e>
 80136d0:	2000      	movs	r0, #0
 80136d2:	bd70      	pop	{r4, r5, r6, pc}
 80136d4:	6802      	ldr	r2, [r0, #0]
 80136d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136da:	2300      	movs	r3, #0
 80136dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80136e0:	e7f7      	b.n	80136d2 <_Balloc+0x66>
 80136e2:	bf00      	nop
 80136e4:	080156f0 	.word	0x080156f0
 80136e8:	08015878 	.word	0x08015878

080136ec <_Bfree>:
 80136ec:	b570      	push	{r4, r5, r6, lr}
 80136ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80136f0:	4605      	mov	r5, r0
 80136f2:	460c      	mov	r4, r1
 80136f4:	b976      	cbnz	r6, 8013714 <_Bfree+0x28>
 80136f6:	2010      	movs	r0, #16
 80136f8:	f7fe f942 	bl	8011980 <malloc>
 80136fc:	4602      	mov	r2, r0
 80136fe:	6268      	str	r0, [r5, #36]	; 0x24
 8013700:	b920      	cbnz	r0, 801370c <_Bfree+0x20>
 8013702:	4b09      	ldr	r3, [pc, #36]	; (8013728 <_Bfree+0x3c>)
 8013704:	4809      	ldr	r0, [pc, #36]	; (801372c <_Bfree+0x40>)
 8013706:	218a      	movs	r1, #138	; 0x8a
 8013708:	f7ff f870 	bl	80127ec <__assert_func>
 801370c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013710:	6006      	str	r6, [r0, #0]
 8013712:	60c6      	str	r6, [r0, #12]
 8013714:	b13c      	cbz	r4, 8013726 <_Bfree+0x3a>
 8013716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013718:	6862      	ldr	r2, [r4, #4]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013720:	6021      	str	r1, [r4, #0]
 8013722:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013726:	bd70      	pop	{r4, r5, r6, pc}
 8013728:	080156f0 	.word	0x080156f0
 801372c:	08015878 	.word	0x08015878

08013730 <__multadd>:
 8013730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013734:	690d      	ldr	r5, [r1, #16]
 8013736:	4607      	mov	r7, r0
 8013738:	460c      	mov	r4, r1
 801373a:	461e      	mov	r6, r3
 801373c:	f101 0c14 	add.w	ip, r1, #20
 8013740:	2000      	movs	r0, #0
 8013742:	f8dc 3000 	ldr.w	r3, [ip]
 8013746:	b299      	uxth	r1, r3
 8013748:	fb02 6101 	mla	r1, r2, r1, r6
 801374c:	0c1e      	lsrs	r6, r3, #16
 801374e:	0c0b      	lsrs	r3, r1, #16
 8013750:	fb02 3306 	mla	r3, r2, r6, r3
 8013754:	b289      	uxth	r1, r1
 8013756:	3001      	adds	r0, #1
 8013758:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801375c:	4285      	cmp	r5, r0
 801375e:	f84c 1b04 	str.w	r1, [ip], #4
 8013762:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013766:	dcec      	bgt.n	8013742 <__multadd+0x12>
 8013768:	b30e      	cbz	r6, 80137ae <__multadd+0x7e>
 801376a:	68a3      	ldr	r3, [r4, #8]
 801376c:	42ab      	cmp	r3, r5
 801376e:	dc19      	bgt.n	80137a4 <__multadd+0x74>
 8013770:	6861      	ldr	r1, [r4, #4]
 8013772:	4638      	mov	r0, r7
 8013774:	3101      	adds	r1, #1
 8013776:	f7ff ff79 	bl	801366c <_Balloc>
 801377a:	4680      	mov	r8, r0
 801377c:	b928      	cbnz	r0, 801378a <__multadd+0x5a>
 801377e:	4602      	mov	r2, r0
 8013780:	4b0c      	ldr	r3, [pc, #48]	; (80137b4 <__multadd+0x84>)
 8013782:	480d      	ldr	r0, [pc, #52]	; (80137b8 <__multadd+0x88>)
 8013784:	21b5      	movs	r1, #181	; 0xb5
 8013786:	f7ff f831 	bl	80127ec <__assert_func>
 801378a:	6922      	ldr	r2, [r4, #16]
 801378c:	3202      	adds	r2, #2
 801378e:	f104 010c 	add.w	r1, r4, #12
 8013792:	0092      	lsls	r2, r2, #2
 8013794:	300c      	adds	r0, #12
 8013796:	f7fe f903 	bl	80119a0 <memcpy>
 801379a:	4621      	mov	r1, r4
 801379c:	4638      	mov	r0, r7
 801379e:	f7ff ffa5 	bl	80136ec <_Bfree>
 80137a2:	4644      	mov	r4, r8
 80137a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80137a8:	3501      	adds	r5, #1
 80137aa:	615e      	str	r6, [r3, #20]
 80137ac:	6125      	str	r5, [r4, #16]
 80137ae:	4620      	mov	r0, r4
 80137b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b4:	08015806 	.word	0x08015806
 80137b8:	08015878 	.word	0x08015878

080137bc <__hi0bits>:
 80137bc:	0c03      	lsrs	r3, r0, #16
 80137be:	041b      	lsls	r3, r3, #16
 80137c0:	b9d3      	cbnz	r3, 80137f8 <__hi0bits+0x3c>
 80137c2:	0400      	lsls	r0, r0, #16
 80137c4:	2310      	movs	r3, #16
 80137c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80137ca:	bf04      	itt	eq
 80137cc:	0200      	lsleq	r0, r0, #8
 80137ce:	3308      	addeq	r3, #8
 80137d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80137d4:	bf04      	itt	eq
 80137d6:	0100      	lsleq	r0, r0, #4
 80137d8:	3304      	addeq	r3, #4
 80137da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80137de:	bf04      	itt	eq
 80137e0:	0080      	lsleq	r0, r0, #2
 80137e2:	3302      	addeq	r3, #2
 80137e4:	2800      	cmp	r0, #0
 80137e6:	db05      	blt.n	80137f4 <__hi0bits+0x38>
 80137e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80137ec:	f103 0301 	add.w	r3, r3, #1
 80137f0:	bf08      	it	eq
 80137f2:	2320      	moveq	r3, #32
 80137f4:	4618      	mov	r0, r3
 80137f6:	4770      	bx	lr
 80137f8:	2300      	movs	r3, #0
 80137fa:	e7e4      	b.n	80137c6 <__hi0bits+0xa>

080137fc <__lo0bits>:
 80137fc:	6803      	ldr	r3, [r0, #0]
 80137fe:	f013 0207 	ands.w	r2, r3, #7
 8013802:	4601      	mov	r1, r0
 8013804:	d00b      	beq.n	801381e <__lo0bits+0x22>
 8013806:	07da      	lsls	r2, r3, #31
 8013808:	d423      	bmi.n	8013852 <__lo0bits+0x56>
 801380a:	0798      	lsls	r0, r3, #30
 801380c:	bf49      	itett	mi
 801380e:	085b      	lsrmi	r3, r3, #1
 8013810:	089b      	lsrpl	r3, r3, #2
 8013812:	2001      	movmi	r0, #1
 8013814:	600b      	strmi	r3, [r1, #0]
 8013816:	bf5c      	itt	pl
 8013818:	600b      	strpl	r3, [r1, #0]
 801381a:	2002      	movpl	r0, #2
 801381c:	4770      	bx	lr
 801381e:	b298      	uxth	r0, r3
 8013820:	b9a8      	cbnz	r0, 801384e <__lo0bits+0x52>
 8013822:	0c1b      	lsrs	r3, r3, #16
 8013824:	2010      	movs	r0, #16
 8013826:	b2da      	uxtb	r2, r3
 8013828:	b90a      	cbnz	r2, 801382e <__lo0bits+0x32>
 801382a:	3008      	adds	r0, #8
 801382c:	0a1b      	lsrs	r3, r3, #8
 801382e:	071a      	lsls	r2, r3, #28
 8013830:	bf04      	itt	eq
 8013832:	091b      	lsreq	r3, r3, #4
 8013834:	3004      	addeq	r0, #4
 8013836:	079a      	lsls	r2, r3, #30
 8013838:	bf04      	itt	eq
 801383a:	089b      	lsreq	r3, r3, #2
 801383c:	3002      	addeq	r0, #2
 801383e:	07da      	lsls	r2, r3, #31
 8013840:	d403      	bmi.n	801384a <__lo0bits+0x4e>
 8013842:	085b      	lsrs	r3, r3, #1
 8013844:	f100 0001 	add.w	r0, r0, #1
 8013848:	d005      	beq.n	8013856 <__lo0bits+0x5a>
 801384a:	600b      	str	r3, [r1, #0]
 801384c:	4770      	bx	lr
 801384e:	4610      	mov	r0, r2
 8013850:	e7e9      	b.n	8013826 <__lo0bits+0x2a>
 8013852:	2000      	movs	r0, #0
 8013854:	4770      	bx	lr
 8013856:	2020      	movs	r0, #32
 8013858:	4770      	bx	lr
	...

0801385c <__i2b>:
 801385c:	b510      	push	{r4, lr}
 801385e:	460c      	mov	r4, r1
 8013860:	2101      	movs	r1, #1
 8013862:	f7ff ff03 	bl	801366c <_Balloc>
 8013866:	4602      	mov	r2, r0
 8013868:	b928      	cbnz	r0, 8013876 <__i2b+0x1a>
 801386a:	4b05      	ldr	r3, [pc, #20]	; (8013880 <__i2b+0x24>)
 801386c:	4805      	ldr	r0, [pc, #20]	; (8013884 <__i2b+0x28>)
 801386e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013872:	f7fe ffbb 	bl	80127ec <__assert_func>
 8013876:	2301      	movs	r3, #1
 8013878:	6144      	str	r4, [r0, #20]
 801387a:	6103      	str	r3, [r0, #16]
 801387c:	bd10      	pop	{r4, pc}
 801387e:	bf00      	nop
 8013880:	08015806 	.word	0x08015806
 8013884:	08015878 	.word	0x08015878

08013888 <__multiply>:
 8013888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388c:	4691      	mov	r9, r2
 801388e:	690a      	ldr	r2, [r1, #16]
 8013890:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013894:	429a      	cmp	r2, r3
 8013896:	bfb8      	it	lt
 8013898:	460b      	movlt	r3, r1
 801389a:	460c      	mov	r4, r1
 801389c:	bfbc      	itt	lt
 801389e:	464c      	movlt	r4, r9
 80138a0:	4699      	movlt	r9, r3
 80138a2:	6927      	ldr	r7, [r4, #16]
 80138a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80138a8:	68a3      	ldr	r3, [r4, #8]
 80138aa:	6861      	ldr	r1, [r4, #4]
 80138ac:	eb07 060a 	add.w	r6, r7, sl
 80138b0:	42b3      	cmp	r3, r6
 80138b2:	b085      	sub	sp, #20
 80138b4:	bfb8      	it	lt
 80138b6:	3101      	addlt	r1, #1
 80138b8:	f7ff fed8 	bl	801366c <_Balloc>
 80138bc:	b930      	cbnz	r0, 80138cc <__multiply+0x44>
 80138be:	4602      	mov	r2, r0
 80138c0:	4b44      	ldr	r3, [pc, #272]	; (80139d4 <__multiply+0x14c>)
 80138c2:	4845      	ldr	r0, [pc, #276]	; (80139d8 <__multiply+0x150>)
 80138c4:	f240 115d 	movw	r1, #349	; 0x15d
 80138c8:	f7fe ff90 	bl	80127ec <__assert_func>
 80138cc:	f100 0514 	add.w	r5, r0, #20
 80138d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80138d4:	462b      	mov	r3, r5
 80138d6:	2200      	movs	r2, #0
 80138d8:	4543      	cmp	r3, r8
 80138da:	d321      	bcc.n	8013920 <__multiply+0x98>
 80138dc:	f104 0314 	add.w	r3, r4, #20
 80138e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80138e4:	f109 0314 	add.w	r3, r9, #20
 80138e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80138ec:	9202      	str	r2, [sp, #8]
 80138ee:	1b3a      	subs	r2, r7, r4
 80138f0:	3a15      	subs	r2, #21
 80138f2:	f022 0203 	bic.w	r2, r2, #3
 80138f6:	3204      	adds	r2, #4
 80138f8:	f104 0115 	add.w	r1, r4, #21
 80138fc:	428f      	cmp	r7, r1
 80138fe:	bf38      	it	cc
 8013900:	2204      	movcc	r2, #4
 8013902:	9201      	str	r2, [sp, #4]
 8013904:	9a02      	ldr	r2, [sp, #8]
 8013906:	9303      	str	r3, [sp, #12]
 8013908:	429a      	cmp	r2, r3
 801390a:	d80c      	bhi.n	8013926 <__multiply+0x9e>
 801390c:	2e00      	cmp	r6, #0
 801390e:	dd03      	ble.n	8013918 <__multiply+0x90>
 8013910:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013914:	2b00      	cmp	r3, #0
 8013916:	d05a      	beq.n	80139ce <__multiply+0x146>
 8013918:	6106      	str	r6, [r0, #16]
 801391a:	b005      	add	sp, #20
 801391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013920:	f843 2b04 	str.w	r2, [r3], #4
 8013924:	e7d8      	b.n	80138d8 <__multiply+0x50>
 8013926:	f8b3 a000 	ldrh.w	sl, [r3]
 801392a:	f1ba 0f00 	cmp.w	sl, #0
 801392e:	d024      	beq.n	801397a <__multiply+0xf2>
 8013930:	f104 0e14 	add.w	lr, r4, #20
 8013934:	46a9      	mov	r9, r5
 8013936:	f04f 0c00 	mov.w	ip, #0
 801393a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801393e:	f8d9 1000 	ldr.w	r1, [r9]
 8013942:	fa1f fb82 	uxth.w	fp, r2
 8013946:	b289      	uxth	r1, r1
 8013948:	fb0a 110b 	mla	r1, sl, fp, r1
 801394c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013950:	f8d9 2000 	ldr.w	r2, [r9]
 8013954:	4461      	add	r1, ip
 8013956:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801395a:	fb0a c20b 	mla	r2, sl, fp, ip
 801395e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013962:	b289      	uxth	r1, r1
 8013964:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013968:	4577      	cmp	r7, lr
 801396a:	f849 1b04 	str.w	r1, [r9], #4
 801396e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013972:	d8e2      	bhi.n	801393a <__multiply+0xb2>
 8013974:	9a01      	ldr	r2, [sp, #4]
 8013976:	f845 c002 	str.w	ip, [r5, r2]
 801397a:	9a03      	ldr	r2, [sp, #12]
 801397c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013980:	3304      	adds	r3, #4
 8013982:	f1b9 0f00 	cmp.w	r9, #0
 8013986:	d020      	beq.n	80139ca <__multiply+0x142>
 8013988:	6829      	ldr	r1, [r5, #0]
 801398a:	f104 0c14 	add.w	ip, r4, #20
 801398e:	46ae      	mov	lr, r5
 8013990:	f04f 0a00 	mov.w	sl, #0
 8013994:	f8bc b000 	ldrh.w	fp, [ip]
 8013998:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801399c:	fb09 220b 	mla	r2, r9, fp, r2
 80139a0:	4492      	add	sl, r2
 80139a2:	b289      	uxth	r1, r1
 80139a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80139a8:	f84e 1b04 	str.w	r1, [lr], #4
 80139ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80139b0:	f8be 1000 	ldrh.w	r1, [lr]
 80139b4:	0c12      	lsrs	r2, r2, #16
 80139b6:	fb09 1102 	mla	r1, r9, r2, r1
 80139ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80139be:	4567      	cmp	r7, ip
 80139c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80139c4:	d8e6      	bhi.n	8013994 <__multiply+0x10c>
 80139c6:	9a01      	ldr	r2, [sp, #4]
 80139c8:	50a9      	str	r1, [r5, r2]
 80139ca:	3504      	adds	r5, #4
 80139cc:	e79a      	b.n	8013904 <__multiply+0x7c>
 80139ce:	3e01      	subs	r6, #1
 80139d0:	e79c      	b.n	801390c <__multiply+0x84>
 80139d2:	bf00      	nop
 80139d4:	08015806 	.word	0x08015806
 80139d8:	08015878 	.word	0x08015878

080139dc <__pow5mult>:
 80139dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139e0:	4615      	mov	r5, r2
 80139e2:	f012 0203 	ands.w	r2, r2, #3
 80139e6:	4606      	mov	r6, r0
 80139e8:	460f      	mov	r7, r1
 80139ea:	d007      	beq.n	80139fc <__pow5mult+0x20>
 80139ec:	4c25      	ldr	r4, [pc, #148]	; (8013a84 <__pow5mult+0xa8>)
 80139ee:	3a01      	subs	r2, #1
 80139f0:	2300      	movs	r3, #0
 80139f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80139f6:	f7ff fe9b 	bl	8013730 <__multadd>
 80139fa:	4607      	mov	r7, r0
 80139fc:	10ad      	asrs	r5, r5, #2
 80139fe:	d03d      	beq.n	8013a7c <__pow5mult+0xa0>
 8013a00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013a02:	b97c      	cbnz	r4, 8013a24 <__pow5mult+0x48>
 8013a04:	2010      	movs	r0, #16
 8013a06:	f7fd ffbb 	bl	8011980 <malloc>
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	6270      	str	r0, [r6, #36]	; 0x24
 8013a0e:	b928      	cbnz	r0, 8013a1c <__pow5mult+0x40>
 8013a10:	4b1d      	ldr	r3, [pc, #116]	; (8013a88 <__pow5mult+0xac>)
 8013a12:	481e      	ldr	r0, [pc, #120]	; (8013a8c <__pow5mult+0xb0>)
 8013a14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013a18:	f7fe fee8 	bl	80127ec <__assert_func>
 8013a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a20:	6004      	str	r4, [r0, #0]
 8013a22:	60c4      	str	r4, [r0, #12]
 8013a24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013a28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a2c:	b94c      	cbnz	r4, 8013a42 <__pow5mult+0x66>
 8013a2e:	f240 2171 	movw	r1, #625	; 0x271
 8013a32:	4630      	mov	r0, r6
 8013a34:	f7ff ff12 	bl	801385c <__i2b>
 8013a38:	2300      	movs	r3, #0
 8013a3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a3e:	4604      	mov	r4, r0
 8013a40:	6003      	str	r3, [r0, #0]
 8013a42:	f04f 0900 	mov.w	r9, #0
 8013a46:	07eb      	lsls	r3, r5, #31
 8013a48:	d50a      	bpl.n	8013a60 <__pow5mult+0x84>
 8013a4a:	4639      	mov	r1, r7
 8013a4c:	4622      	mov	r2, r4
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f7ff ff1a 	bl	8013888 <__multiply>
 8013a54:	4639      	mov	r1, r7
 8013a56:	4680      	mov	r8, r0
 8013a58:	4630      	mov	r0, r6
 8013a5a:	f7ff fe47 	bl	80136ec <_Bfree>
 8013a5e:	4647      	mov	r7, r8
 8013a60:	106d      	asrs	r5, r5, #1
 8013a62:	d00b      	beq.n	8013a7c <__pow5mult+0xa0>
 8013a64:	6820      	ldr	r0, [r4, #0]
 8013a66:	b938      	cbnz	r0, 8013a78 <__pow5mult+0x9c>
 8013a68:	4622      	mov	r2, r4
 8013a6a:	4621      	mov	r1, r4
 8013a6c:	4630      	mov	r0, r6
 8013a6e:	f7ff ff0b 	bl	8013888 <__multiply>
 8013a72:	6020      	str	r0, [r4, #0]
 8013a74:	f8c0 9000 	str.w	r9, [r0]
 8013a78:	4604      	mov	r4, r0
 8013a7a:	e7e4      	b.n	8013a46 <__pow5mult+0x6a>
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a82:	bf00      	nop
 8013a84:	080159c8 	.word	0x080159c8
 8013a88:	080156f0 	.word	0x080156f0
 8013a8c:	08015878 	.word	0x08015878

08013a90 <__lshift>:
 8013a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a94:	460c      	mov	r4, r1
 8013a96:	6849      	ldr	r1, [r1, #4]
 8013a98:	6923      	ldr	r3, [r4, #16]
 8013a9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013a9e:	68a3      	ldr	r3, [r4, #8]
 8013aa0:	4607      	mov	r7, r0
 8013aa2:	4691      	mov	r9, r2
 8013aa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013aa8:	f108 0601 	add.w	r6, r8, #1
 8013aac:	42b3      	cmp	r3, r6
 8013aae:	db0b      	blt.n	8013ac8 <__lshift+0x38>
 8013ab0:	4638      	mov	r0, r7
 8013ab2:	f7ff fddb 	bl	801366c <_Balloc>
 8013ab6:	4605      	mov	r5, r0
 8013ab8:	b948      	cbnz	r0, 8013ace <__lshift+0x3e>
 8013aba:	4602      	mov	r2, r0
 8013abc:	4b2a      	ldr	r3, [pc, #168]	; (8013b68 <__lshift+0xd8>)
 8013abe:	482b      	ldr	r0, [pc, #172]	; (8013b6c <__lshift+0xdc>)
 8013ac0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013ac4:	f7fe fe92 	bl	80127ec <__assert_func>
 8013ac8:	3101      	adds	r1, #1
 8013aca:	005b      	lsls	r3, r3, #1
 8013acc:	e7ee      	b.n	8013aac <__lshift+0x1c>
 8013ace:	2300      	movs	r3, #0
 8013ad0:	f100 0114 	add.w	r1, r0, #20
 8013ad4:	f100 0210 	add.w	r2, r0, #16
 8013ad8:	4618      	mov	r0, r3
 8013ada:	4553      	cmp	r3, sl
 8013adc:	db37      	blt.n	8013b4e <__lshift+0xbe>
 8013ade:	6920      	ldr	r0, [r4, #16]
 8013ae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ae4:	f104 0314 	add.w	r3, r4, #20
 8013ae8:	f019 091f 	ands.w	r9, r9, #31
 8013aec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013af0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013af4:	d02f      	beq.n	8013b56 <__lshift+0xc6>
 8013af6:	f1c9 0e20 	rsb	lr, r9, #32
 8013afa:	468a      	mov	sl, r1
 8013afc:	f04f 0c00 	mov.w	ip, #0
 8013b00:	681a      	ldr	r2, [r3, #0]
 8013b02:	fa02 f209 	lsl.w	r2, r2, r9
 8013b06:	ea42 020c 	orr.w	r2, r2, ip
 8013b0a:	f84a 2b04 	str.w	r2, [sl], #4
 8013b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b12:	4298      	cmp	r0, r3
 8013b14:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013b18:	d8f2      	bhi.n	8013b00 <__lshift+0x70>
 8013b1a:	1b03      	subs	r3, r0, r4
 8013b1c:	3b15      	subs	r3, #21
 8013b1e:	f023 0303 	bic.w	r3, r3, #3
 8013b22:	3304      	adds	r3, #4
 8013b24:	f104 0215 	add.w	r2, r4, #21
 8013b28:	4290      	cmp	r0, r2
 8013b2a:	bf38      	it	cc
 8013b2c:	2304      	movcc	r3, #4
 8013b2e:	f841 c003 	str.w	ip, [r1, r3]
 8013b32:	f1bc 0f00 	cmp.w	ip, #0
 8013b36:	d001      	beq.n	8013b3c <__lshift+0xac>
 8013b38:	f108 0602 	add.w	r6, r8, #2
 8013b3c:	3e01      	subs	r6, #1
 8013b3e:	4638      	mov	r0, r7
 8013b40:	612e      	str	r6, [r5, #16]
 8013b42:	4621      	mov	r1, r4
 8013b44:	f7ff fdd2 	bl	80136ec <_Bfree>
 8013b48:	4628      	mov	r0, r5
 8013b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b52:	3301      	adds	r3, #1
 8013b54:	e7c1      	b.n	8013ada <__lshift+0x4a>
 8013b56:	3904      	subs	r1, #4
 8013b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b60:	4298      	cmp	r0, r3
 8013b62:	d8f9      	bhi.n	8013b58 <__lshift+0xc8>
 8013b64:	e7ea      	b.n	8013b3c <__lshift+0xac>
 8013b66:	bf00      	nop
 8013b68:	08015806 	.word	0x08015806
 8013b6c:	08015878 	.word	0x08015878

08013b70 <__mcmp>:
 8013b70:	b530      	push	{r4, r5, lr}
 8013b72:	6902      	ldr	r2, [r0, #16]
 8013b74:	690c      	ldr	r4, [r1, #16]
 8013b76:	1b12      	subs	r2, r2, r4
 8013b78:	d10e      	bne.n	8013b98 <__mcmp+0x28>
 8013b7a:	f100 0314 	add.w	r3, r0, #20
 8013b7e:	3114      	adds	r1, #20
 8013b80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013b84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013b88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013b8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013b90:	42a5      	cmp	r5, r4
 8013b92:	d003      	beq.n	8013b9c <__mcmp+0x2c>
 8013b94:	d305      	bcc.n	8013ba2 <__mcmp+0x32>
 8013b96:	2201      	movs	r2, #1
 8013b98:	4610      	mov	r0, r2
 8013b9a:	bd30      	pop	{r4, r5, pc}
 8013b9c:	4283      	cmp	r3, r0
 8013b9e:	d3f3      	bcc.n	8013b88 <__mcmp+0x18>
 8013ba0:	e7fa      	b.n	8013b98 <__mcmp+0x28>
 8013ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ba6:	e7f7      	b.n	8013b98 <__mcmp+0x28>

08013ba8 <__mdiff>:
 8013ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	460c      	mov	r4, r1
 8013bae:	4606      	mov	r6, r0
 8013bb0:	4611      	mov	r1, r2
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	4690      	mov	r8, r2
 8013bb6:	f7ff ffdb 	bl	8013b70 <__mcmp>
 8013bba:	1e05      	subs	r5, r0, #0
 8013bbc:	d110      	bne.n	8013be0 <__mdiff+0x38>
 8013bbe:	4629      	mov	r1, r5
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	f7ff fd53 	bl	801366c <_Balloc>
 8013bc6:	b930      	cbnz	r0, 8013bd6 <__mdiff+0x2e>
 8013bc8:	4b3a      	ldr	r3, [pc, #232]	; (8013cb4 <__mdiff+0x10c>)
 8013bca:	4602      	mov	r2, r0
 8013bcc:	f240 2132 	movw	r1, #562	; 0x232
 8013bd0:	4839      	ldr	r0, [pc, #228]	; (8013cb8 <__mdiff+0x110>)
 8013bd2:	f7fe fe0b 	bl	80127ec <__assert_func>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be0:	bfa4      	itt	ge
 8013be2:	4643      	movge	r3, r8
 8013be4:	46a0      	movge	r8, r4
 8013be6:	4630      	mov	r0, r6
 8013be8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013bec:	bfa6      	itte	ge
 8013bee:	461c      	movge	r4, r3
 8013bf0:	2500      	movge	r5, #0
 8013bf2:	2501      	movlt	r5, #1
 8013bf4:	f7ff fd3a 	bl	801366c <_Balloc>
 8013bf8:	b920      	cbnz	r0, 8013c04 <__mdiff+0x5c>
 8013bfa:	4b2e      	ldr	r3, [pc, #184]	; (8013cb4 <__mdiff+0x10c>)
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013c02:	e7e5      	b.n	8013bd0 <__mdiff+0x28>
 8013c04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013c08:	6926      	ldr	r6, [r4, #16]
 8013c0a:	60c5      	str	r5, [r0, #12]
 8013c0c:	f104 0914 	add.w	r9, r4, #20
 8013c10:	f108 0514 	add.w	r5, r8, #20
 8013c14:	f100 0e14 	add.w	lr, r0, #20
 8013c18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013c1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013c20:	f108 0210 	add.w	r2, r8, #16
 8013c24:	46f2      	mov	sl, lr
 8013c26:	2100      	movs	r1, #0
 8013c28:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013c30:	fa1f f883 	uxth.w	r8, r3
 8013c34:	fa11 f18b 	uxtah	r1, r1, fp
 8013c38:	0c1b      	lsrs	r3, r3, #16
 8013c3a:	eba1 0808 	sub.w	r8, r1, r8
 8013c3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013c42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013c46:	fa1f f888 	uxth.w	r8, r8
 8013c4a:	1419      	asrs	r1, r3, #16
 8013c4c:	454e      	cmp	r6, r9
 8013c4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013c52:	f84a 3b04 	str.w	r3, [sl], #4
 8013c56:	d8e7      	bhi.n	8013c28 <__mdiff+0x80>
 8013c58:	1b33      	subs	r3, r6, r4
 8013c5a:	3b15      	subs	r3, #21
 8013c5c:	f023 0303 	bic.w	r3, r3, #3
 8013c60:	3304      	adds	r3, #4
 8013c62:	3415      	adds	r4, #21
 8013c64:	42a6      	cmp	r6, r4
 8013c66:	bf38      	it	cc
 8013c68:	2304      	movcc	r3, #4
 8013c6a:	441d      	add	r5, r3
 8013c6c:	4473      	add	r3, lr
 8013c6e:	469e      	mov	lr, r3
 8013c70:	462e      	mov	r6, r5
 8013c72:	4566      	cmp	r6, ip
 8013c74:	d30e      	bcc.n	8013c94 <__mdiff+0xec>
 8013c76:	f10c 0203 	add.w	r2, ip, #3
 8013c7a:	1b52      	subs	r2, r2, r5
 8013c7c:	f022 0203 	bic.w	r2, r2, #3
 8013c80:	3d03      	subs	r5, #3
 8013c82:	45ac      	cmp	ip, r5
 8013c84:	bf38      	it	cc
 8013c86:	2200      	movcc	r2, #0
 8013c88:	441a      	add	r2, r3
 8013c8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013c8e:	b17b      	cbz	r3, 8013cb0 <__mdiff+0x108>
 8013c90:	6107      	str	r7, [r0, #16]
 8013c92:	e7a3      	b.n	8013bdc <__mdiff+0x34>
 8013c94:	f856 8b04 	ldr.w	r8, [r6], #4
 8013c98:	fa11 f288 	uxtah	r2, r1, r8
 8013c9c:	1414      	asrs	r4, r2, #16
 8013c9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013ca2:	b292      	uxth	r2, r2
 8013ca4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013ca8:	f84e 2b04 	str.w	r2, [lr], #4
 8013cac:	1421      	asrs	r1, r4, #16
 8013cae:	e7e0      	b.n	8013c72 <__mdiff+0xca>
 8013cb0:	3f01      	subs	r7, #1
 8013cb2:	e7ea      	b.n	8013c8a <__mdiff+0xe2>
 8013cb4:	08015806 	.word	0x08015806
 8013cb8:	08015878 	.word	0x08015878

08013cbc <__d2b>:
 8013cbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cc0:	4689      	mov	r9, r1
 8013cc2:	2101      	movs	r1, #1
 8013cc4:	ec57 6b10 	vmov	r6, r7, d0
 8013cc8:	4690      	mov	r8, r2
 8013cca:	f7ff fccf 	bl	801366c <_Balloc>
 8013cce:	4604      	mov	r4, r0
 8013cd0:	b930      	cbnz	r0, 8013ce0 <__d2b+0x24>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	4b25      	ldr	r3, [pc, #148]	; (8013d6c <__d2b+0xb0>)
 8013cd6:	4826      	ldr	r0, [pc, #152]	; (8013d70 <__d2b+0xb4>)
 8013cd8:	f240 310a 	movw	r1, #778	; 0x30a
 8013cdc:	f7fe fd86 	bl	80127ec <__assert_func>
 8013ce0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013ce4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013ce8:	bb35      	cbnz	r5, 8013d38 <__d2b+0x7c>
 8013cea:	2e00      	cmp	r6, #0
 8013cec:	9301      	str	r3, [sp, #4]
 8013cee:	d028      	beq.n	8013d42 <__d2b+0x86>
 8013cf0:	4668      	mov	r0, sp
 8013cf2:	9600      	str	r6, [sp, #0]
 8013cf4:	f7ff fd82 	bl	80137fc <__lo0bits>
 8013cf8:	9900      	ldr	r1, [sp, #0]
 8013cfa:	b300      	cbz	r0, 8013d3e <__d2b+0x82>
 8013cfc:	9a01      	ldr	r2, [sp, #4]
 8013cfe:	f1c0 0320 	rsb	r3, r0, #32
 8013d02:	fa02 f303 	lsl.w	r3, r2, r3
 8013d06:	430b      	orrs	r3, r1
 8013d08:	40c2      	lsrs	r2, r0
 8013d0a:	6163      	str	r3, [r4, #20]
 8013d0c:	9201      	str	r2, [sp, #4]
 8013d0e:	9b01      	ldr	r3, [sp, #4]
 8013d10:	61a3      	str	r3, [r4, #24]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	bf14      	ite	ne
 8013d16:	2202      	movne	r2, #2
 8013d18:	2201      	moveq	r2, #1
 8013d1a:	6122      	str	r2, [r4, #16]
 8013d1c:	b1d5      	cbz	r5, 8013d54 <__d2b+0x98>
 8013d1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013d22:	4405      	add	r5, r0
 8013d24:	f8c9 5000 	str.w	r5, [r9]
 8013d28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013d2c:	f8c8 0000 	str.w	r0, [r8]
 8013d30:	4620      	mov	r0, r4
 8013d32:	b003      	add	sp, #12
 8013d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013d3c:	e7d5      	b.n	8013cea <__d2b+0x2e>
 8013d3e:	6161      	str	r1, [r4, #20]
 8013d40:	e7e5      	b.n	8013d0e <__d2b+0x52>
 8013d42:	a801      	add	r0, sp, #4
 8013d44:	f7ff fd5a 	bl	80137fc <__lo0bits>
 8013d48:	9b01      	ldr	r3, [sp, #4]
 8013d4a:	6163      	str	r3, [r4, #20]
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	6122      	str	r2, [r4, #16]
 8013d50:	3020      	adds	r0, #32
 8013d52:	e7e3      	b.n	8013d1c <__d2b+0x60>
 8013d54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013d5c:	f8c9 0000 	str.w	r0, [r9]
 8013d60:	6918      	ldr	r0, [r3, #16]
 8013d62:	f7ff fd2b 	bl	80137bc <__hi0bits>
 8013d66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d6a:	e7df      	b.n	8013d2c <__d2b+0x70>
 8013d6c:	08015806 	.word	0x08015806
 8013d70:	08015878 	.word	0x08015878

08013d74 <_realloc_r>:
 8013d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d78:	4680      	mov	r8, r0
 8013d7a:	4614      	mov	r4, r2
 8013d7c:	460e      	mov	r6, r1
 8013d7e:	b921      	cbnz	r1, 8013d8a <_realloc_r+0x16>
 8013d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d84:	4611      	mov	r1, r2
 8013d86:	f7fd bea3 	b.w	8011ad0 <_malloc_r>
 8013d8a:	b92a      	cbnz	r2, 8013d98 <_realloc_r+0x24>
 8013d8c:	f7fd fe34 	bl	80119f8 <_free_r>
 8013d90:	4625      	mov	r5, r4
 8013d92:	4628      	mov	r0, r5
 8013d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d98:	f000 fd64 	bl	8014864 <_malloc_usable_size_r>
 8013d9c:	4284      	cmp	r4, r0
 8013d9e:	4607      	mov	r7, r0
 8013da0:	d802      	bhi.n	8013da8 <_realloc_r+0x34>
 8013da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013da6:	d812      	bhi.n	8013dce <_realloc_r+0x5a>
 8013da8:	4621      	mov	r1, r4
 8013daa:	4640      	mov	r0, r8
 8013dac:	f7fd fe90 	bl	8011ad0 <_malloc_r>
 8013db0:	4605      	mov	r5, r0
 8013db2:	2800      	cmp	r0, #0
 8013db4:	d0ed      	beq.n	8013d92 <_realloc_r+0x1e>
 8013db6:	42bc      	cmp	r4, r7
 8013db8:	4622      	mov	r2, r4
 8013dba:	4631      	mov	r1, r6
 8013dbc:	bf28      	it	cs
 8013dbe:	463a      	movcs	r2, r7
 8013dc0:	f7fd fdee 	bl	80119a0 <memcpy>
 8013dc4:	4631      	mov	r1, r6
 8013dc6:	4640      	mov	r0, r8
 8013dc8:	f7fd fe16 	bl	80119f8 <_free_r>
 8013dcc:	e7e1      	b.n	8013d92 <_realloc_r+0x1e>
 8013dce:	4635      	mov	r5, r6
 8013dd0:	e7df      	b.n	8013d92 <_realloc_r+0x1e>

08013dd2 <__ssputs_r>:
 8013dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dd6:	688e      	ldr	r6, [r1, #8]
 8013dd8:	429e      	cmp	r6, r3
 8013dda:	4682      	mov	sl, r0
 8013ddc:	460c      	mov	r4, r1
 8013dde:	4690      	mov	r8, r2
 8013de0:	461f      	mov	r7, r3
 8013de2:	d838      	bhi.n	8013e56 <__ssputs_r+0x84>
 8013de4:	898a      	ldrh	r2, [r1, #12]
 8013de6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013dea:	d032      	beq.n	8013e52 <__ssputs_r+0x80>
 8013dec:	6825      	ldr	r5, [r4, #0]
 8013dee:	6909      	ldr	r1, [r1, #16]
 8013df0:	eba5 0901 	sub.w	r9, r5, r1
 8013df4:	6965      	ldr	r5, [r4, #20]
 8013df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013dfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013dfe:	3301      	adds	r3, #1
 8013e00:	444b      	add	r3, r9
 8013e02:	106d      	asrs	r5, r5, #1
 8013e04:	429d      	cmp	r5, r3
 8013e06:	bf38      	it	cc
 8013e08:	461d      	movcc	r5, r3
 8013e0a:	0553      	lsls	r3, r2, #21
 8013e0c:	d531      	bpl.n	8013e72 <__ssputs_r+0xa0>
 8013e0e:	4629      	mov	r1, r5
 8013e10:	f7fd fe5e 	bl	8011ad0 <_malloc_r>
 8013e14:	4606      	mov	r6, r0
 8013e16:	b950      	cbnz	r0, 8013e2e <__ssputs_r+0x5c>
 8013e18:	230c      	movs	r3, #12
 8013e1a:	f8ca 3000 	str.w	r3, [sl]
 8013e1e:	89a3      	ldrh	r3, [r4, #12]
 8013e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e24:	81a3      	strh	r3, [r4, #12]
 8013e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2e:	6921      	ldr	r1, [r4, #16]
 8013e30:	464a      	mov	r2, r9
 8013e32:	f7fd fdb5 	bl	80119a0 <memcpy>
 8013e36:	89a3      	ldrh	r3, [r4, #12]
 8013e38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e40:	81a3      	strh	r3, [r4, #12]
 8013e42:	6126      	str	r6, [r4, #16]
 8013e44:	6165      	str	r5, [r4, #20]
 8013e46:	444e      	add	r6, r9
 8013e48:	eba5 0509 	sub.w	r5, r5, r9
 8013e4c:	6026      	str	r6, [r4, #0]
 8013e4e:	60a5      	str	r5, [r4, #8]
 8013e50:	463e      	mov	r6, r7
 8013e52:	42be      	cmp	r6, r7
 8013e54:	d900      	bls.n	8013e58 <__ssputs_r+0x86>
 8013e56:	463e      	mov	r6, r7
 8013e58:	6820      	ldr	r0, [r4, #0]
 8013e5a:	4632      	mov	r2, r6
 8013e5c:	4641      	mov	r1, r8
 8013e5e:	f000 fce7 	bl	8014830 <memmove>
 8013e62:	68a3      	ldr	r3, [r4, #8]
 8013e64:	1b9b      	subs	r3, r3, r6
 8013e66:	60a3      	str	r3, [r4, #8]
 8013e68:	6823      	ldr	r3, [r4, #0]
 8013e6a:	4433      	add	r3, r6
 8013e6c:	6023      	str	r3, [r4, #0]
 8013e6e:	2000      	movs	r0, #0
 8013e70:	e7db      	b.n	8013e2a <__ssputs_r+0x58>
 8013e72:	462a      	mov	r2, r5
 8013e74:	f7ff ff7e 	bl	8013d74 <_realloc_r>
 8013e78:	4606      	mov	r6, r0
 8013e7a:	2800      	cmp	r0, #0
 8013e7c:	d1e1      	bne.n	8013e42 <__ssputs_r+0x70>
 8013e7e:	6921      	ldr	r1, [r4, #16]
 8013e80:	4650      	mov	r0, sl
 8013e82:	f7fd fdb9 	bl	80119f8 <_free_r>
 8013e86:	e7c7      	b.n	8013e18 <__ssputs_r+0x46>

08013e88 <_svfiprintf_r>:
 8013e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e8c:	4698      	mov	r8, r3
 8013e8e:	898b      	ldrh	r3, [r1, #12]
 8013e90:	061b      	lsls	r3, r3, #24
 8013e92:	b09d      	sub	sp, #116	; 0x74
 8013e94:	4607      	mov	r7, r0
 8013e96:	460d      	mov	r5, r1
 8013e98:	4614      	mov	r4, r2
 8013e9a:	d50e      	bpl.n	8013eba <_svfiprintf_r+0x32>
 8013e9c:	690b      	ldr	r3, [r1, #16]
 8013e9e:	b963      	cbnz	r3, 8013eba <_svfiprintf_r+0x32>
 8013ea0:	2140      	movs	r1, #64	; 0x40
 8013ea2:	f7fd fe15 	bl	8011ad0 <_malloc_r>
 8013ea6:	6028      	str	r0, [r5, #0]
 8013ea8:	6128      	str	r0, [r5, #16]
 8013eaa:	b920      	cbnz	r0, 8013eb6 <_svfiprintf_r+0x2e>
 8013eac:	230c      	movs	r3, #12
 8013eae:	603b      	str	r3, [r7, #0]
 8013eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013eb4:	e0d1      	b.n	801405a <_svfiprintf_r+0x1d2>
 8013eb6:	2340      	movs	r3, #64	; 0x40
 8013eb8:	616b      	str	r3, [r5, #20]
 8013eba:	2300      	movs	r3, #0
 8013ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8013ebe:	2320      	movs	r3, #32
 8013ec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ec8:	2330      	movs	r3, #48	; 0x30
 8013eca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014074 <_svfiprintf_r+0x1ec>
 8013ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ed2:	f04f 0901 	mov.w	r9, #1
 8013ed6:	4623      	mov	r3, r4
 8013ed8:	469a      	mov	sl, r3
 8013eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ede:	b10a      	cbz	r2, 8013ee4 <_svfiprintf_r+0x5c>
 8013ee0:	2a25      	cmp	r2, #37	; 0x25
 8013ee2:	d1f9      	bne.n	8013ed8 <_svfiprintf_r+0x50>
 8013ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8013ee8:	d00b      	beq.n	8013f02 <_svfiprintf_r+0x7a>
 8013eea:	465b      	mov	r3, fp
 8013eec:	4622      	mov	r2, r4
 8013eee:	4629      	mov	r1, r5
 8013ef0:	4638      	mov	r0, r7
 8013ef2:	f7ff ff6e 	bl	8013dd2 <__ssputs_r>
 8013ef6:	3001      	adds	r0, #1
 8013ef8:	f000 80aa 	beq.w	8014050 <_svfiprintf_r+0x1c8>
 8013efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013efe:	445a      	add	r2, fp
 8013f00:	9209      	str	r2, [sp, #36]	; 0x24
 8013f02:	f89a 3000 	ldrb.w	r3, [sl]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	f000 80a2 	beq.w	8014050 <_svfiprintf_r+0x1c8>
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f16:	f10a 0a01 	add.w	sl, sl, #1
 8013f1a:	9304      	str	r3, [sp, #16]
 8013f1c:	9307      	str	r3, [sp, #28]
 8013f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f22:	931a      	str	r3, [sp, #104]	; 0x68
 8013f24:	4654      	mov	r4, sl
 8013f26:	2205      	movs	r2, #5
 8013f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2c:	4851      	ldr	r0, [pc, #324]	; (8014074 <_svfiprintf_r+0x1ec>)
 8013f2e:	f7ec f987 	bl	8000240 <memchr>
 8013f32:	9a04      	ldr	r2, [sp, #16]
 8013f34:	b9d8      	cbnz	r0, 8013f6e <_svfiprintf_r+0xe6>
 8013f36:	06d0      	lsls	r0, r2, #27
 8013f38:	bf44      	itt	mi
 8013f3a:	2320      	movmi	r3, #32
 8013f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f40:	0711      	lsls	r1, r2, #28
 8013f42:	bf44      	itt	mi
 8013f44:	232b      	movmi	r3, #43	; 0x2b
 8013f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f50:	d015      	beq.n	8013f7e <_svfiprintf_r+0xf6>
 8013f52:	9a07      	ldr	r2, [sp, #28]
 8013f54:	4654      	mov	r4, sl
 8013f56:	2000      	movs	r0, #0
 8013f58:	f04f 0c0a 	mov.w	ip, #10
 8013f5c:	4621      	mov	r1, r4
 8013f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f62:	3b30      	subs	r3, #48	; 0x30
 8013f64:	2b09      	cmp	r3, #9
 8013f66:	d94e      	bls.n	8014006 <_svfiprintf_r+0x17e>
 8013f68:	b1b0      	cbz	r0, 8013f98 <_svfiprintf_r+0x110>
 8013f6a:	9207      	str	r2, [sp, #28]
 8013f6c:	e014      	b.n	8013f98 <_svfiprintf_r+0x110>
 8013f6e:	eba0 0308 	sub.w	r3, r0, r8
 8013f72:	fa09 f303 	lsl.w	r3, r9, r3
 8013f76:	4313      	orrs	r3, r2
 8013f78:	9304      	str	r3, [sp, #16]
 8013f7a:	46a2      	mov	sl, r4
 8013f7c:	e7d2      	b.n	8013f24 <_svfiprintf_r+0x9c>
 8013f7e:	9b03      	ldr	r3, [sp, #12]
 8013f80:	1d19      	adds	r1, r3, #4
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	9103      	str	r1, [sp, #12]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	bfbb      	ittet	lt
 8013f8a:	425b      	neglt	r3, r3
 8013f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8013f90:	9307      	strge	r3, [sp, #28]
 8013f92:	9307      	strlt	r3, [sp, #28]
 8013f94:	bfb8      	it	lt
 8013f96:	9204      	strlt	r2, [sp, #16]
 8013f98:	7823      	ldrb	r3, [r4, #0]
 8013f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8013f9c:	d10c      	bne.n	8013fb8 <_svfiprintf_r+0x130>
 8013f9e:	7863      	ldrb	r3, [r4, #1]
 8013fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8013fa2:	d135      	bne.n	8014010 <_svfiprintf_r+0x188>
 8013fa4:	9b03      	ldr	r3, [sp, #12]
 8013fa6:	1d1a      	adds	r2, r3, #4
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	9203      	str	r2, [sp, #12]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	bfb8      	it	lt
 8013fb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013fb4:	3402      	adds	r4, #2
 8013fb6:	9305      	str	r3, [sp, #20]
 8013fb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014084 <_svfiprintf_r+0x1fc>
 8013fbc:	7821      	ldrb	r1, [r4, #0]
 8013fbe:	2203      	movs	r2, #3
 8013fc0:	4650      	mov	r0, sl
 8013fc2:	f7ec f93d 	bl	8000240 <memchr>
 8013fc6:	b140      	cbz	r0, 8013fda <_svfiprintf_r+0x152>
 8013fc8:	2340      	movs	r3, #64	; 0x40
 8013fca:	eba0 000a 	sub.w	r0, r0, sl
 8013fce:	fa03 f000 	lsl.w	r0, r3, r0
 8013fd2:	9b04      	ldr	r3, [sp, #16]
 8013fd4:	4303      	orrs	r3, r0
 8013fd6:	3401      	adds	r4, #1
 8013fd8:	9304      	str	r3, [sp, #16]
 8013fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fde:	4826      	ldr	r0, [pc, #152]	; (8014078 <_svfiprintf_r+0x1f0>)
 8013fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fe4:	2206      	movs	r2, #6
 8013fe6:	f7ec f92b 	bl	8000240 <memchr>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d038      	beq.n	8014060 <_svfiprintf_r+0x1d8>
 8013fee:	4b23      	ldr	r3, [pc, #140]	; (801407c <_svfiprintf_r+0x1f4>)
 8013ff0:	bb1b      	cbnz	r3, 801403a <_svfiprintf_r+0x1b2>
 8013ff2:	9b03      	ldr	r3, [sp, #12]
 8013ff4:	3307      	adds	r3, #7
 8013ff6:	f023 0307 	bic.w	r3, r3, #7
 8013ffa:	3308      	adds	r3, #8
 8013ffc:	9303      	str	r3, [sp, #12]
 8013ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014000:	4433      	add	r3, r6
 8014002:	9309      	str	r3, [sp, #36]	; 0x24
 8014004:	e767      	b.n	8013ed6 <_svfiprintf_r+0x4e>
 8014006:	fb0c 3202 	mla	r2, ip, r2, r3
 801400a:	460c      	mov	r4, r1
 801400c:	2001      	movs	r0, #1
 801400e:	e7a5      	b.n	8013f5c <_svfiprintf_r+0xd4>
 8014010:	2300      	movs	r3, #0
 8014012:	3401      	adds	r4, #1
 8014014:	9305      	str	r3, [sp, #20]
 8014016:	4619      	mov	r1, r3
 8014018:	f04f 0c0a 	mov.w	ip, #10
 801401c:	4620      	mov	r0, r4
 801401e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014022:	3a30      	subs	r2, #48	; 0x30
 8014024:	2a09      	cmp	r2, #9
 8014026:	d903      	bls.n	8014030 <_svfiprintf_r+0x1a8>
 8014028:	2b00      	cmp	r3, #0
 801402a:	d0c5      	beq.n	8013fb8 <_svfiprintf_r+0x130>
 801402c:	9105      	str	r1, [sp, #20]
 801402e:	e7c3      	b.n	8013fb8 <_svfiprintf_r+0x130>
 8014030:	fb0c 2101 	mla	r1, ip, r1, r2
 8014034:	4604      	mov	r4, r0
 8014036:	2301      	movs	r3, #1
 8014038:	e7f0      	b.n	801401c <_svfiprintf_r+0x194>
 801403a:	ab03      	add	r3, sp, #12
 801403c:	9300      	str	r3, [sp, #0]
 801403e:	462a      	mov	r2, r5
 8014040:	4b0f      	ldr	r3, [pc, #60]	; (8014080 <_svfiprintf_r+0x1f8>)
 8014042:	a904      	add	r1, sp, #16
 8014044:	4638      	mov	r0, r7
 8014046:	f7fd fe47 	bl	8011cd8 <_printf_float>
 801404a:	1c42      	adds	r2, r0, #1
 801404c:	4606      	mov	r6, r0
 801404e:	d1d6      	bne.n	8013ffe <_svfiprintf_r+0x176>
 8014050:	89ab      	ldrh	r3, [r5, #12]
 8014052:	065b      	lsls	r3, r3, #25
 8014054:	f53f af2c 	bmi.w	8013eb0 <_svfiprintf_r+0x28>
 8014058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801405a:	b01d      	add	sp, #116	; 0x74
 801405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014060:	ab03      	add	r3, sp, #12
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	462a      	mov	r2, r5
 8014066:	4b06      	ldr	r3, [pc, #24]	; (8014080 <_svfiprintf_r+0x1f8>)
 8014068:	a904      	add	r1, sp, #16
 801406a:	4638      	mov	r0, r7
 801406c:	f7fe f8c0 	bl	80121f0 <_printf_i>
 8014070:	e7eb      	b.n	801404a <_svfiprintf_r+0x1c2>
 8014072:	bf00      	nop
 8014074:	080159d4 	.word	0x080159d4
 8014078:	080159de 	.word	0x080159de
 801407c:	08011cd9 	.word	0x08011cd9
 8014080:	08013dd3 	.word	0x08013dd3
 8014084:	080159da 	.word	0x080159da

08014088 <__sfputc_r>:
 8014088:	6893      	ldr	r3, [r2, #8]
 801408a:	3b01      	subs	r3, #1
 801408c:	2b00      	cmp	r3, #0
 801408e:	b410      	push	{r4}
 8014090:	6093      	str	r3, [r2, #8]
 8014092:	da08      	bge.n	80140a6 <__sfputc_r+0x1e>
 8014094:	6994      	ldr	r4, [r2, #24]
 8014096:	42a3      	cmp	r3, r4
 8014098:	db01      	blt.n	801409e <__sfputc_r+0x16>
 801409a:	290a      	cmp	r1, #10
 801409c:	d103      	bne.n	80140a6 <__sfputc_r+0x1e>
 801409e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140a2:	f000 b98f 	b.w	80143c4 <__swbuf_r>
 80140a6:	6813      	ldr	r3, [r2, #0]
 80140a8:	1c58      	adds	r0, r3, #1
 80140aa:	6010      	str	r0, [r2, #0]
 80140ac:	7019      	strb	r1, [r3, #0]
 80140ae:	4608      	mov	r0, r1
 80140b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <__sfputs_r>:
 80140b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140b8:	4606      	mov	r6, r0
 80140ba:	460f      	mov	r7, r1
 80140bc:	4614      	mov	r4, r2
 80140be:	18d5      	adds	r5, r2, r3
 80140c0:	42ac      	cmp	r4, r5
 80140c2:	d101      	bne.n	80140c8 <__sfputs_r+0x12>
 80140c4:	2000      	movs	r0, #0
 80140c6:	e007      	b.n	80140d8 <__sfputs_r+0x22>
 80140c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140cc:	463a      	mov	r2, r7
 80140ce:	4630      	mov	r0, r6
 80140d0:	f7ff ffda 	bl	8014088 <__sfputc_r>
 80140d4:	1c43      	adds	r3, r0, #1
 80140d6:	d1f3      	bne.n	80140c0 <__sfputs_r+0xa>
 80140d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080140dc <_vfiprintf_r>:
 80140dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e0:	460d      	mov	r5, r1
 80140e2:	b09d      	sub	sp, #116	; 0x74
 80140e4:	4614      	mov	r4, r2
 80140e6:	4698      	mov	r8, r3
 80140e8:	4606      	mov	r6, r0
 80140ea:	b118      	cbz	r0, 80140f4 <_vfiprintf_r+0x18>
 80140ec:	6983      	ldr	r3, [r0, #24]
 80140ee:	b90b      	cbnz	r3, 80140f4 <_vfiprintf_r+0x18>
 80140f0:	f7ff f9f8 	bl	80134e4 <__sinit>
 80140f4:	4b89      	ldr	r3, [pc, #548]	; (801431c <_vfiprintf_r+0x240>)
 80140f6:	429d      	cmp	r5, r3
 80140f8:	d11b      	bne.n	8014132 <_vfiprintf_r+0x56>
 80140fa:	6875      	ldr	r5, [r6, #4]
 80140fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140fe:	07d9      	lsls	r1, r3, #31
 8014100:	d405      	bmi.n	801410e <_vfiprintf_r+0x32>
 8014102:	89ab      	ldrh	r3, [r5, #12]
 8014104:	059a      	lsls	r2, r3, #22
 8014106:	d402      	bmi.n	801410e <_vfiprintf_r+0x32>
 8014108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801410a:	f7ff faa0 	bl	801364e <__retarget_lock_acquire_recursive>
 801410e:	89ab      	ldrh	r3, [r5, #12]
 8014110:	071b      	lsls	r3, r3, #28
 8014112:	d501      	bpl.n	8014118 <_vfiprintf_r+0x3c>
 8014114:	692b      	ldr	r3, [r5, #16]
 8014116:	b9eb      	cbnz	r3, 8014154 <_vfiprintf_r+0x78>
 8014118:	4629      	mov	r1, r5
 801411a:	4630      	mov	r0, r6
 801411c:	f000 f9b6 	bl	801448c <__swsetup_r>
 8014120:	b1c0      	cbz	r0, 8014154 <_vfiprintf_r+0x78>
 8014122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014124:	07dc      	lsls	r4, r3, #31
 8014126:	d50e      	bpl.n	8014146 <_vfiprintf_r+0x6a>
 8014128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801412c:	b01d      	add	sp, #116	; 0x74
 801412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014132:	4b7b      	ldr	r3, [pc, #492]	; (8014320 <_vfiprintf_r+0x244>)
 8014134:	429d      	cmp	r5, r3
 8014136:	d101      	bne.n	801413c <_vfiprintf_r+0x60>
 8014138:	68b5      	ldr	r5, [r6, #8]
 801413a:	e7df      	b.n	80140fc <_vfiprintf_r+0x20>
 801413c:	4b79      	ldr	r3, [pc, #484]	; (8014324 <_vfiprintf_r+0x248>)
 801413e:	429d      	cmp	r5, r3
 8014140:	bf08      	it	eq
 8014142:	68f5      	ldreq	r5, [r6, #12]
 8014144:	e7da      	b.n	80140fc <_vfiprintf_r+0x20>
 8014146:	89ab      	ldrh	r3, [r5, #12]
 8014148:	0598      	lsls	r0, r3, #22
 801414a:	d4ed      	bmi.n	8014128 <_vfiprintf_r+0x4c>
 801414c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801414e:	f7ff fa7f 	bl	8013650 <__retarget_lock_release_recursive>
 8014152:	e7e9      	b.n	8014128 <_vfiprintf_r+0x4c>
 8014154:	2300      	movs	r3, #0
 8014156:	9309      	str	r3, [sp, #36]	; 0x24
 8014158:	2320      	movs	r3, #32
 801415a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801415e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014162:	2330      	movs	r3, #48	; 0x30
 8014164:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014328 <_vfiprintf_r+0x24c>
 8014168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801416c:	f04f 0901 	mov.w	r9, #1
 8014170:	4623      	mov	r3, r4
 8014172:	469a      	mov	sl, r3
 8014174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014178:	b10a      	cbz	r2, 801417e <_vfiprintf_r+0xa2>
 801417a:	2a25      	cmp	r2, #37	; 0x25
 801417c:	d1f9      	bne.n	8014172 <_vfiprintf_r+0x96>
 801417e:	ebba 0b04 	subs.w	fp, sl, r4
 8014182:	d00b      	beq.n	801419c <_vfiprintf_r+0xc0>
 8014184:	465b      	mov	r3, fp
 8014186:	4622      	mov	r2, r4
 8014188:	4629      	mov	r1, r5
 801418a:	4630      	mov	r0, r6
 801418c:	f7ff ff93 	bl	80140b6 <__sfputs_r>
 8014190:	3001      	adds	r0, #1
 8014192:	f000 80aa 	beq.w	80142ea <_vfiprintf_r+0x20e>
 8014196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014198:	445a      	add	r2, fp
 801419a:	9209      	str	r2, [sp, #36]	; 0x24
 801419c:	f89a 3000 	ldrb.w	r3, [sl]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	f000 80a2 	beq.w	80142ea <_vfiprintf_r+0x20e>
 80141a6:	2300      	movs	r3, #0
 80141a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141b0:	f10a 0a01 	add.w	sl, sl, #1
 80141b4:	9304      	str	r3, [sp, #16]
 80141b6:	9307      	str	r3, [sp, #28]
 80141b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141bc:	931a      	str	r3, [sp, #104]	; 0x68
 80141be:	4654      	mov	r4, sl
 80141c0:	2205      	movs	r2, #5
 80141c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141c6:	4858      	ldr	r0, [pc, #352]	; (8014328 <_vfiprintf_r+0x24c>)
 80141c8:	f7ec f83a 	bl	8000240 <memchr>
 80141cc:	9a04      	ldr	r2, [sp, #16]
 80141ce:	b9d8      	cbnz	r0, 8014208 <_vfiprintf_r+0x12c>
 80141d0:	06d1      	lsls	r1, r2, #27
 80141d2:	bf44      	itt	mi
 80141d4:	2320      	movmi	r3, #32
 80141d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141da:	0713      	lsls	r3, r2, #28
 80141dc:	bf44      	itt	mi
 80141de:	232b      	movmi	r3, #43	; 0x2b
 80141e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141e4:	f89a 3000 	ldrb.w	r3, [sl]
 80141e8:	2b2a      	cmp	r3, #42	; 0x2a
 80141ea:	d015      	beq.n	8014218 <_vfiprintf_r+0x13c>
 80141ec:	9a07      	ldr	r2, [sp, #28]
 80141ee:	4654      	mov	r4, sl
 80141f0:	2000      	movs	r0, #0
 80141f2:	f04f 0c0a 	mov.w	ip, #10
 80141f6:	4621      	mov	r1, r4
 80141f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141fc:	3b30      	subs	r3, #48	; 0x30
 80141fe:	2b09      	cmp	r3, #9
 8014200:	d94e      	bls.n	80142a0 <_vfiprintf_r+0x1c4>
 8014202:	b1b0      	cbz	r0, 8014232 <_vfiprintf_r+0x156>
 8014204:	9207      	str	r2, [sp, #28]
 8014206:	e014      	b.n	8014232 <_vfiprintf_r+0x156>
 8014208:	eba0 0308 	sub.w	r3, r0, r8
 801420c:	fa09 f303 	lsl.w	r3, r9, r3
 8014210:	4313      	orrs	r3, r2
 8014212:	9304      	str	r3, [sp, #16]
 8014214:	46a2      	mov	sl, r4
 8014216:	e7d2      	b.n	80141be <_vfiprintf_r+0xe2>
 8014218:	9b03      	ldr	r3, [sp, #12]
 801421a:	1d19      	adds	r1, r3, #4
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	9103      	str	r1, [sp, #12]
 8014220:	2b00      	cmp	r3, #0
 8014222:	bfbb      	ittet	lt
 8014224:	425b      	neglt	r3, r3
 8014226:	f042 0202 	orrlt.w	r2, r2, #2
 801422a:	9307      	strge	r3, [sp, #28]
 801422c:	9307      	strlt	r3, [sp, #28]
 801422e:	bfb8      	it	lt
 8014230:	9204      	strlt	r2, [sp, #16]
 8014232:	7823      	ldrb	r3, [r4, #0]
 8014234:	2b2e      	cmp	r3, #46	; 0x2e
 8014236:	d10c      	bne.n	8014252 <_vfiprintf_r+0x176>
 8014238:	7863      	ldrb	r3, [r4, #1]
 801423a:	2b2a      	cmp	r3, #42	; 0x2a
 801423c:	d135      	bne.n	80142aa <_vfiprintf_r+0x1ce>
 801423e:	9b03      	ldr	r3, [sp, #12]
 8014240:	1d1a      	adds	r2, r3, #4
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	9203      	str	r2, [sp, #12]
 8014246:	2b00      	cmp	r3, #0
 8014248:	bfb8      	it	lt
 801424a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801424e:	3402      	adds	r4, #2
 8014250:	9305      	str	r3, [sp, #20]
 8014252:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014338 <_vfiprintf_r+0x25c>
 8014256:	7821      	ldrb	r1, [r4, #0]
 8014258:	2203      	movs	r2, #3
 801425a:	4650      	mov	r0, sl
 801425c:	f7eb fff0 	bl	8000240 <memchr>
 8014260:	b140      	cbz	r0, 8014274 <_vfiprintf_r+0x198>
 8014262:	2340      	movs	r3, #64	; 0x40
 8014264:	eba0 000a 	sub.w	r0, r0, sl
 8014268:	fa03 f000 	lsl.w	r0, r3, r0
 801426c:	9b04      	ldr	r3, [sp, #16]
 801426e:	4303      	orrs	r3, r0
 8014270:	3401      	adds	r4, #1
 8014272:	9304      	str	r3, [sp, #16]
 8014274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014278:	482c      	ldr	r0, [pc, #176]	; (801432c <_vfiprintf_r+0x250>)
 801427a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801427e:	2206      	movs	r2, #6
 8014280:	f7eb ffde 	bl	8000240 <memchr>
 8014284:	2800      	cmp	r0, #0
 8014286:	d03f      	beq.n	8014308 <_vfiprintf_r+0x22c>
 8014288:	4b29      	ldr	r3, [pc, #164]	; (8014330 <_vfiprintf_r+0x254>)
 801428a:	bb1b      	cbnz	r3, 80142d4 <_vfiprintf_r+0x1f8>
 801428c:	9b03      	ldr	r3, [sp, #12]
 801428e:	3307      	adds	r3, #7
 8014290:	f023 0307 	bic.w	r3, r3, #7
 8014294:	3308      	adds	r3, #8
 8014296:	9303      	str	r3, [sp, #12]
 8014298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801429a:	443b      	add	r3, r7
 801429c:	9309      	str	r3, [sp, #36]	; 0x24
 801429e:	e767      	b.n	8014170 <_vfiprintf_r+0x94>
 80142a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80142a4:	460c      	mov	r4, r1
 80142a6:	2001      	movs	r0, #1
 80142a8:	e7a5      	b.n	80141f6 <_vfiprintf_r+0x11a>
 80142aa:	2300      	movs	r3, #0
 80142ac:	3401      	adds	r4, #1
 80142ae:	9305      	str	r3, [sp, #20]
 80142b0:	4619      	mov	r1, r3
 80142b2:	f04f 0c0a 	mov.w	ip, #10
 80142b6:	4620      	mov	r0, r4
 80142b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142bc:	3a30      	subs	r2, #48	; 0x30
 80142be:	2a09      	cmp	r2, #9
 80142c0:	d903      	bls.n	80142ca <_vfiprintf_r+0x1ee>
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d0c5      	beq.n	8014252 <_vfiprintf_r+0x176>
 80142c6:	9105      	str	r1, [sp, #20]
 80142c8:	e7c3      	b.n	8014252 <_vfiprintf_r+0x176>
 80142ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80142ce:	4604      	mov	r4, r0
 80142d0:	2301      	movs	r3, #1
 80142d2:	e7f0      	b.n	80142b6 <_vfiprintf_r+0x1da>
 80142d4:	ab03      	add	r3, sp, #12
 80142d6:	9300      	str	r3, [sp, #0]
 80142d8:	462a      	mov	r2, r5
 80142da:	4b16      	ldr	r3, [pc, #88]	; (8014334 <_vfiprintf_r+0x258>)
 80142dc:	a904      	add	r1, sp, #16
 80142de:	4630      	mov	r0, r6
 80142e0:	f7fd fcfa 	bl	8011cd8 <_printf_float>
 80142e4:	4607      	mov	r7, r0
 80142e6:	1c78      	adds	r0, r7, #1
 80142e8:	d1d6      	bne.n	8014298 <_vfiprintf_r+0x1bc>
 80142ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142ec:	07d9      	lsls	r1, r3, #31
 80142ee:	d405      	bmi.n	80142fc <_vfiprintf_r+0x220>
 80142f0:	89ab      	ldrh	r3, [r5, #12]
 80142f2:	059a      	lsls	r2, r3, #22
 80142f4:	d402      	bmi.n	80142fc <_vfiprintf_r+0x220>
 80142f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142f8:	f7ff f9aa 	bl	8013650 <__retarget_lock_release_recursive>
 80142fc:	89ab      	ldrh	r3, [r5, #12]
 80142fe:	065b      	lsls	r3, r3, #25
 8014300:	f53f af12 	bmi.w	8014128 <_vfiprintf_r+0x4c>
 8014304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014306:	e711      	b.n	801412c <_vfiprintf_r+0x50>
 8014308:	ab03      	add	r3, sp, #12
 801430a:	9300      	str	r3, [sp, #0]
 801430c:	462a      	mov	r2, r5
 801430e:	4b09      	ldr	r3, [pc, #36]	; (8014334 <_vfiprintf_r+0x258>)
 8014310:	a904      	add	r1, sp, #16
 8014312:	4630      	mov	r0, r6
 8014314:	f7fd ff6c 	bl	80121f0 <_printf_i>
 8014318:	e7e4      	b.n	80142e4 <_vfiprintf_r+0x208>
 801431a:	bf00      	nop
 801431c:	08015838 	.word	0x08015838
 8014320:	08015858 	.word	0x08015858
 8014324:	08015818 	.word	0x08015818
 8014328:	080159d4 	.word	0x080159d4
 801432c:	080159de 	.word	0x080159de
 8014330:	08011cd9 	.word	0x08011cd9
 8014334:	080140b7 	.word	0x080140b7
 8014338:	080159da 	.word	0x080159da

0801433c <__sread>:
 801433c:	b510      	push	{r4, lr}
 801433e:	460c      	mov	r4, r1
 8014340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014344:	f000 fa96 	bl	8014874 <_read_r>
 8014348:	2800      	cmp	r0, #0
 801434a:	bfab      	itete	ge
 801434c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801434e:	89a3      	ldrhlt	r3, [r4, #12]
 8014350:	181b      	addge	r3, r3, r0
 8014352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014356:	bfac      	ite	ge
 8014358:	6563      	strge	r3, [r4, #84]	; 0x54
 801435a:	81a3      	strhlt	r3, [r4, #12]
 801435c:	bd10      	pop	{r4, pc}

0801435e <__swrite>:
 801435e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014362:	461f      	mov	r7, r3
 8014364:	898b      	ldrh	r3, [r1, #12]
 8014366:	05db      	lsls	r3, r3, #23
 8014368:	4605      	mov	r5, r0
 801436a:	460c      	mov	r4, r1
 801436c:	4616      	mov	r6, r2
 801436e:	d505      	bpl.n	801437c <__swrite+0x1e>
 8014370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014374:	2302      	movs	r3, #2
 8014376:	2200      	movs	r2, #0
 8014378:	f000 f9d0 	bl	801471c <_lseek_r>
 801437c:	89a3      	ldrh	r3, [r4, #12]
 801437e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014386:	81a3      	strh	r3, [r4, #12]
 8014388:	4632      	mov	r2, r6
 801438a:	463b      	mov	r3, r7
 801438c:	4628      	mov	r0, r5
 801438e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014392:	f000 b869 	b.w	8014468 <_write_r>

08014396 <__sseek>:
 8014396:	b510      	push	{r4, lr}
 8014398:	460c      	mov	r4, r1
 801439a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801439e:	f000 f9bd 	bl	801471c <_lseek_r>
 80143a2:	1c43      	adds	r3, r0, #1
 80143a4:	89a3      	ldrh	r3, [r4, #12]
 80143a6:	bf15      	itete	ne
 80143a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80143aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80143ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80143b2:	81a3      	strheq	r3, [r4, #12]
 80143b4:	bf18      	it	ne
 80143b6:	81a3      	strhne	r3, [r4, #12]
 80143b8:	bd10      	pop	{r4, pc}

080143ba <__sclose>:
 80143ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143be:	f000 b8db 	b.w	8014578 <_close_r>
	...

080143c4 <__swbuf_r>:
 80143c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143c6:	460e      	mov	r6, r1
 80143c8:	4614      	mov	r4, r2
 80143ca:	4605      	mov	r5, r0
 80143cc:	b118      	cbz	r0, 80143d6 <__swbuf_r+0x12>
 80143ce:	6983      	ldr	r3, [r0, #24]
 80143d0:	b90b      	cbnz	r3, 80143d6 <__swbuf_r+0x12>
 80143d2:	f7ff f887 	bl	80134e4 <__sinit>
 80143d6:	4b21      	ldr	r3, [pc, #132]	; (801445c <__swbuf_r+0x98>)
 80143d8:	429c      	cmp	r4, r3
 80143da:	d12b      	bne.n	8014434 <__swbuf_r+0x70>
 80143dc:	686c      	ldr	r4, [r5, #4]
 80143de:	69a3      	ldr	r3, [r4, #24]
 80143e0:	60a3      	str	r3, [r4, #8]
 80143e2:	89a3      	ldrh	r3, [r4, #12]
 80143e4:	071a      	lsls	r2, r3, #28
 80143e6:	d52f      	bpl.n	8014448 <__swbuf_r+0x84>
 80143e8:	6923      	ldr	r3, [r4, #16]
 80143ea:	b36b      	cbz	r3, 8014448 <__swbuf_r+0x84>
 80143ec:	6923      	ldr	r3, [r4, #16]
 80143ee:	6820      	ldr	r0, [r4, #0]
 80143f0:	1ac0      	subs	r0, r0, r3
 80143f2:	6963      	ldr	r3, [r4, #20]
 80143f4:	b2f6      	uxtb	r6, r6
 80143f6:	4283      	cmp	r3, r0
 80143f8:	4637      	mov	r7, r6
 80143fa:	dc04      	bgt.n	8014406 <__swbuf_r+0x42>
 80143fc:	4621      	mov	r1, r4
 80143fe:	4628      	mov	r0, r5
 8014400:	f000 f950 	bl	80146a4 <_fflush_r>
 8014404:	bb30      	cbnz	r0, 8014454 <__swbuf_r+0x90>
 8014406:	68a3      	ldr	r3, [r4, #8]
 8014408:	3b01      	subs	r3, #1
 801440a:	60a3      	str	r3, [r4, #8]
 801440c:	6823      	ldr	r3, [r4, #0]
 801440e:	1c5a      	adds	r2, r3, #1
 8014410:	6022      	str	r2, [r4, #0]
 8014412:	701e      	strb	r6, [r3, #0]
 8014414:	6963      	ldr	r3, [r4, #20]
 8014416:	3001      	adds	r0, #1
 8014418:	4283      	cmp	r3, r0
 801441a:	d004      	beq.n	8014426 <__swbuf_r+0x62>
 801441c:	89a3      	ldrh	r3, [r4, #12]
 801441e:	07db      	lsls	r3, r3, #31
 8014420:	d506      	bpl.n	8014430 <__swbuf_r+0x6c>
 8014422:	2e0a      	cmp	r6, #10
 8014424:	d104      	bne.n	8014430 <__swbuf_r+0x6c>
 8014426:	4621      	mov	r1, r4
 8014428:	4628      	mov	r0, r5
 801442a:	f000 f93b 	bl	80146a4 <_fflush_r>
 801442e:	b988      	cbnz	r0, 8014454 <__swbuf_r+0x90>
 8014430:	4638      	mov	r0, r7
 8014432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014434:	4b0a      	ldr	r3, [pc, #40]	; (8014460 <__swbuf_r+0x9c>)
 8014436:	429c      	cmp	r4, r3
 8014438:	d101      	bne.n	801443e <__swbuf_r+0x7a>
 801443a:	68ac      	ldr	r4, [r5, #8]
 801443c:	e7cf      	b.n	80143de <__swbuf_r+0x1a>
 801443e:	4b09      	ldr	r3, [pc, #36]	; (8014464 <__swbuf_r+0xa0>)
 8014440:	429c      	cmp	r4, r3
 8014442:	bf08      	it	eq
 8014444:	68ec      	ldreq	r4, [r5, #12]
 8014446:	e7ca      	b.n	80143de <__swbuf_r+0x1a>
 8014448:	4621      	mov	r1, r4
 801444a:	4628      	mov	r0, r5
 801444c:	f000 f81e 	bl	801448c <__swsetup_r>
 8014450:	2800      	cmp	r0, #0
 8014452:	d0cb      	beq.n	80143ec <__swbuf_r+0x28>
 8014454:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014458:	e7ea      	b.n	8014430 <__swbuf_r+0x6c>
 801445a:	bf00      	nop
 801445c:	08015838 	.word	0x08015838
 8014460:	08015858 	.word	0x08015858
 8014464:	08015818 	.word	0x08015818

08014468 <_write_r>:
 8014468:	b538      	push	{r3, r4, r5, lr}
 801446a:	4d07      	ldr	r5, [pc, #28]	; (8014488 <_write_r+0x20>)
 801446c:	4604      	mov	r4, r0
 801446e:	4608      	mov	r0, r1
 8014470:	4611      	mov	r1, r2
 8014472:	2200      	movs	r2, #0
 8014474:	602a      	str	r2, [r5, #0]
 8014476:	461a      	mov	r2, r3
 8014478:	f7ec fd5b 	bl	8000f32 <_write>
 801447c:	1c43      	adds	r3, r0, #1
 801447e:	d102      	bne.n	8014486 <_write_r+0x1e>
 8014480:	682b      	ldr	r3, [r5, #0]
 8014482:	b103      	cbz	r3, 8014486 <_write_r+0x1e>
 8014484:	6023      	str	r3, [r4, #0]
 8014486:	bd38      	pop	{r3, r4, r5, pc}
 8014488:	2000de80 	.word	0x2000de80

0801448c <__swsetup_r>:
 801448c:	4b32      	ldr	r3, [pc, #200]	; (8014558 <__swsetup_r+0xcc>)
 801448e:	b570      	push	{r4, r5, r6, lr}
 8014490:	681d      	ldr	r5, [r3, #0]
 8014492:	4606      	mov	r6, r0
 8014494:	460c      	mov	r4, r1
 8014496:	b125      	cbz	r5, 80144a2 <__swsetup_r+0x16>
 8014498:	69ab      	ldr	r3, [r5, #24]
 801449a:	b913      	cbnz	r3, 80144a2 <__swsetup_r+0x16>
 801449c:	4628      	mov	r0, r5
 801449e:	f7ff f821 	bl	80134e4 <__sinit>
 80144a2:	4b2e      	ldr	r3, [pc, #184]	; (801455c <__swsetup_r+0xd0>)
 80144a4:	429c      	cmp	r4, r3
 80144a6:	d10f      	bne.n	80144c8 <__swsetup_r+0x3c>
 80144a8:	686c      	ldr	r4, [r5, #4]
 80144aa:	89a3      	ldrh	r3, [r4, #12]
 80144ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80144b0:	0719      	lsls	r1, r3, #28
 80144b2:	d42c      	bmi.n	801450e <__swsetup_r+0x82>
 80144b4:	06dd      	lsls	r5, r3, #27
 80144b6:	d411      	bmi.n	80144dc <__swsetup_r+0x50>
 80144b8:	2309      	movs	r3, #9
 80144ba:	6033      	str	r3, [r6, #0]
 80144bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80144c0:	81a3      	strh	r3, [r4, #12]
 80144c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144c6:	e03e      	b.n	8014546 <__swsetup_r+0xba>
 80144c8:	4b25      	ldr	r3, [pc, #148]	; (8014560 <__swsetup_r+0xd4>)
 80144ca:	429c      	cmp	r4, r3
 80144cc:	d101      	bne.n	80144d2 <__swsetup_r+0x46>
 80144ce:	68ac      	ldr	r4, [r5, #8]
 80144d0:	e7eb      	b.n	80144aa <__swsetup_r+0x1e>
 80144d2:	4b24      	ldr	r3, [pc, #144]	; (8014564 <__swsetup_r+0xd8>)
 80144d4:	429c      	cmp	r4, r3
 80144d6:	bf08      	it	eq
 80144d8:	68ec      	ldreq	r4, [r5, #12]
 80144da:	e7e6      	b.n	80144aa <__swsetup_r+0x1e>
 80144dc:	0758      	lsls	r0, r3, #29
 80144de:	d512      	bpl.n	8014506 <__swsetup_r+0x7a>
 80144e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144e2:	b141      	cbz	r1, 80144f6 <__swsetup_r+0x6a>
 80144e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144e8:	4299      	cmp	r1, r3
 80144ea:	d002      	beq.n	80144f2 <__swsetup_r+0x66>
 80144ec:	4630      	mov	r0, r6
 80144ee:	f7fd fa83 	bl	80119f8 <_free_r>
 80144f2:	2300      	movs	r3, #0
 80144f4:	6363      	str	r3, [r4, #52]	; 0x34
 80144f6:	89a3      	ldrh	r3, [r4, #12]
 80144f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144fc:	81a3      	strh	r3, [r4, #12]
 80144fe:	2300      	movs	r3, #0
 8014500:	6063      	str	r3, [r4, #4]
 8014502:	6923      	ldr	r3, [r4, #16]
 8014504:	6023      	str	r3, [r4, #0]
 8014506:	89a3      	ldrh	r3, [r4, #12]
 8014508:	f043 0308 	orr.w	r3, r3, #8
 801450c:	81a3      	strh	r3, [r4, #12]
 801450e:	6923      	ldr	r3, [r4, #16]
 8014510:	b94b      	cbnz	r3, 8014526 <__swsetup_r+0x9a>
 8014512:	89a3      	ldrh	r3, [r4, #12]
 8014514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801451c:	d003      	beq.n	8014526 <__swsetup_r+0x9a>
 801451e:	4621      	mov	r1, r4
 8014520:	4630      	mov	r0, r6
 8014522:	f000 f933 	bl	801478c <__smakebuf_r>
 8014526:	89a0      	ldrh	r0, [r4, #12]
 8014528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801452c:	f010 0301 	ands.w	r3, r0, #1
 8014530:	d00a      	beq.n	8014548 <__swsetup_r+0xbc>
 8014532:	2300      	movs	r3, #0
 8014534:	60a3      	str	r3, [r4, #8]
 8014536:	6963      	ldr	r3, [r4, #20]
 8014538:	425b      	negs	r3, r3
 801453a:	61a3      	str	r3, [r4, #24]
 801453c:	6923      	ldr	r3, [r4, #16]
 801453e:	b943      	cbnz	r3, 8014552 <__swsetup_r+0xc6>
 8014540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014544:	d1ba      	bne.n	80144bc <__swsetup_r+0x30>
 8014546:	bd70      	pop	{r4, r5, r6, pc}
 8014548:	0781      	lsls	r1, r0, #30
 801454a:	bf58      	it	pl
 801454c:	6963      	ldrpl	r3, [r4, #20]
 801454e:	60a3      	str	r3, [r4, #8]
 8014550:	e7f4      	b.n	801453c <__swsetup_r+0xb0>
 8014552:	2000      	movs	r0, #0
 8014554:	e7f7      	b.n	8014546 <__swsetup_r+0xba>
 8014556:	bf00      	nop
 8014558:	200002a4 	.word	0x200002a4
 801455c:	08015838 	.word	0x08015838
 8014560:	08015858 	.word	0x08015858
 8014564:	08015818 	.word	0x08015818

08014568 <abort>:
 8014568:	b508      	push	{r3, lr}
 801456a:	2006      	movs	r0, #6
 801456c:	f000 f9bc 	bl	80148e8 <raise>
 8014570:	2001      	movs	r0, #1
 8014572:	f7ec fcb7 	bl	8000ee4 <_exit>
	...

08014578 <_close_r>:
 8014578:	b538      	push	{r3, r4, r5, lr}
 801457a:	4d06      	ldr	r5, [pc, #24]	; (8014594 <_close_r+0x1c>)
 801457c:	2300      	movs	r3, #0
 801457e:	4604      	mov	r4, r0
 8014580:	4608      	mov	r0, r1
 8014582:	602b      	str	r3, [r5, #0]
 8014584:	f7ec fcf1 	bl	8000f6a <_close>
 8014588:	1c43      	adds	r3, r0, #1
 801458a:	d102      	bne.n	8014592 <_close_r+0x1a>
 801458c:	682b      	ldr	r3, [r5, #0]
 801458e:	b103      	cbz	r3, 8014592 <_close_r+0x1a>
 8014590:	6023      	str	r3, [r4, #0]
 8014592:	bd38      	pop	{r3, r4, r5, pc}
 8014594:	2000de80 	.word	0x2000de80

08014598 <__sflush_r>:
 8014598:	898a      	ldrh	r2, [r1, #12]
 801459a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801459e:	4605      	mov	r5, r0
 80145a0:	0710      	lsls	r0, r2, #28
 80145a2:	460c      	mov	r4, r1
 80145a4:	d458      	bmi.n	8014658 <__sflush_r+0xc0>
 80145a6:	684b      	ldr	r3, [r1, #4]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	dc05      	bgt.n	80145b8 <__sflush_r+0x20>
 80145ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	dc02      	bgt.n	80145b8 <__sflush_r+0x20>
 80145b2:	2000      	movs	r0, #0
 80145b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145ba:	2e00      	cmp	r6, #0
 80145bc:	d0f9      	beq.n	80145b2 <__sflush_r+0x1a>
 80145be:	2300      	movs	r3, #0
 80145c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145c4:	682f      	ldr	r7, [r5, #0]
 80145c6:	602b      	str	r3, [r5, #0]
 80145c8:	d032      	beq.n	8014630 <__sflush_r+0x98>
 80145ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80145cc:	89a3      	ldrh	r3, [r4, #12]
 80145ce:	075a      	lsls	r2, r3, #29
 80145d0:	d505      	bpl.n	80145de <__sflush_r+0x46>
 80145d2:	6863      	ldr	r3, [r4, #4]
 80145d4:	1ac0      	subs	r0, r0, r3
 80145d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145d8:	b10b      	cbz	r3, 80145de <__sflush_r+0x46>
 80145da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80145dc:	1ac0      	subs	r0, r0, r3
 80145de:	2300      	movs	r3, #0
 80145e0:	4602      	mov	r2, r0
 80145e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145e4:	6a21      	ldr	r1, [r4, #32]
 80145e6:	4628      	mov	r0, r5
 80145e8:	47b0      	blx	r6
 80145ea:	1c43      	adds	r3, r0, #1
 80145ec:	89a3      	ldrh	r3, [r4, #12]
 80145ee:	d106      	bne.n	80145fe <__sflush_r+0x66>
 80145f0:	6829      	ldr	r1, [r5, #0]
 80145f2:	291d      	cmp	r1, #29
 80145f4:	d82c      	bhi.n	8014650 <__sflush_r+0xb8>
 80145f6:	4a2a      	ldr	r2, [pc, #168]	; (80146a0 <__sflush_r+0x108>)
 80145f8:	40ca      	lsrs	r2, r1
 80145fa:	07d6      	lsls	r6, r2, #31
 80145fc:	d528      	bpl.n	8014650 <__sflush_r+0xb8>
 80145fe:	2200      	movs	r2, #0
 8014600:	6062      	str	r2, [r4, #4]
 8014602:	04d9      	lsls	r1, r3, #19
 8014604:	6922      	ldr	r2, [r4, #16]
 8014606:	6022      	str	r2, [r4, #0]
 8014608:	d504      	bpl.n	8014614 <__sflush_r+0x7c>
 801460a:	1c42      	adds	r2, r0, #1
 801460c:	d101      	bne.n	8014612 <__sflush_r+0x7a>
 801460e:	682b      	ldr	r3, [r5, #0]
 8014610:	b903      	cbnz	r3, 8014614 <__sflush_r+0x7c>
 8014612:	6560      	str	r0, [r4, #84]	; 0x54
 8014614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014616:	602f      	str	r7, [r5, #0]
 8014618:	2900      	cmp	r1, #0
 801461a:	d0ca      	beq.n	80145b2 <__sflush_r+0x1a>
 801461c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014620:	4299      	cmp	r1, r3
 8014622:	d002      	beq.n	801462a <__sflush_r+0x92>
 8014624:	4628      	mov	r0, r5
 8014626:	f7fd f9e7 	bl	80119f8 <_free_r>
 801462a:	2000      	movs	r0, #0
 801462c:	6360      	str	r0, [r4, #52]	; 0x34
 801462e:	e7c1      	b.n	80145b4 <__sflush_r+0x1c>
 8014630:	6a21      	ldr	r1, [r4, #32]
 8014632:	2301      	movs	r3, #1
 8014634:	4628      	mov	r0, r5
 8014636:	47b0      	blx	r6
 8014638:	1c41      	adds	r1, r0, #1
 801463a:	d1c7      	bne.n	80145cc <__sflush_r+0x34>
 801463c:	682b      	ldr	r3, [r5, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d0c4      	beq.n	80145cc <__sflush_r+0x34>
 8014642:	2b1d      	cmp	r3, #29
 8014644:	d001      	beq.n	801464a <__sflush_r+0xb2>
 8014646:	2b16      	cmp	r3, #22
 8014648:	d101      	bne.n	801464e <__sflush_r+0xb6>
 801464a:	602f      	str	r7, [r5, #0]
 801464c:	e7b1      	b.n	80145b2 <__sflush_r+0x1a>
 801464e:	89a3      	ldrh	r3, [r4, #12]
 8014650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014654:	81a3      	strh	r3, [r4, #12]
 8014656:	e7ad      	b.n	80145b4 <__sflush_r+0x1c>
 8014658:	690f      	ldr	r7, [r1, #16]
 801465a:	2f00      	cmp	r7, #0
 801465c:	d0a9      	beq.n	80145b2 <__sflush_r+0x1a>
 801465e:	0793      	lsls	r3, r2, #30
 8014660:	680e      	ldr	r6, [r1, #0]
 8014662:	bf08      	it	eq
 8014664:	694b      	ldreq	r3, [r1, #20]
 8014666:	600f      	str	r7, [r1, #0]
 8014668:	bf18      	it	ne
 801466a:	2300      	movne	r3, #0
 801466c:	eba6 0807 	sub.w	r8, r6, r7
 8014670:	608b      	str	r3, [r1, #8]
 8014672:	f1b8 0f00 	cmp.w	r8, #0
 8014676:	dd9c      	ble.n	80145b2 <__sflush_r+0x1a>
 8014678:	6a21      	ldr	r1, [r4, #32]
 801467a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801467c:	4643      	mov	r3, r8
 801467e:	463a      	mov	r2, r7
 8014680:	4628      	mov	r0, r5
 8014682:	47b0      	blx	r6
 8014684:	2800      	cmp	r0, #0
 8014686:	dc06      	bgt.n	8014696 <__sflush_r+0xfe>
 8014688:	89a3      	ldrh	r3, [r4, #12]
 801468a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801468e:	81a3      	strh	r3, [r4, #12]
 8014690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014694:	e78e      	b.n	80145b4 <__sflush_r+0x1c>
 8014696:	4407      	add	r7, r0
 8014698:	eba8 0800 	sub.w	r8, r8, r0
 801469c:	e7e9      	b.n	8014672 <__sflush_r+0xda>
 801469e:	bf00      	nop
 80146a0:	20400001 	.word	0x20400001

080146a4 <_fflush_r>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	690b      	ldr	r3, [r1, #16]
 80146a8:	4605      	mov	r5, r0
 80146aa:	460c      	mov	r4, r1
 80146ac:	b913      	cbnz	r3, 80146b4 <_fflush_r+0x10>
 80146ae:	2500      	movs	r5, #0
 80146b0:	4628      	mov	r0, r5
 80146b2:	bd38      	pop	{r3, r4, r5, pc}
 80146b4:	b118      	cbz	r0, 80146be <_fflush_r+0x1a>
 80146b6:	6983      	ldr	r3, [r0, #24]
 80146b8:	b90b      	cbnz	r3, 80146be <_fflush_r+0x1a>
 80146ba:	f7fe ff13 	bl	80134e4 <__sinit>
 80146be:	4b14      	ldr	r3, [pc, #80]	; (8014710 <_fflush_r+0x6c>)
 80146c0:	429c      	cmp	r4, r3
 80146c2:	d11b      	bne.n	80146fc <_fflush_r+0x58>
 80146c4:	686c      	ldr	r4, [r5, #4]
 80146c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d0ef      	beq.n	80146ae <_fflush_r+0xa>
 80146ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80146d0:	07d0      	lsls	r0, r2, #31
 80146d2:	d404      	bmi.n	80146de <_fflush_r+0x3a>
 80146d4:	0599      	lsls	r1, r3, #22
 80146d6:	d402      	bmi.n	80146de <_fflush_r+0x3a>
 80146d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146da:	f7fe ffb8 	bl	801364e <__retarget_lock_acquire_recursive>
 80146de:	4628      	mov	r0, r5
 80146e0:	4621      	mov	r1, r4
 80146e2:	f7ff ff59 	bl	8014598 <__sflush_r>
 80146e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146e8:	07da      	lsls	r2, r3, #31
 80146ea:	4605      	mov	r5, r0
 80146ec:	d4e0      	bmi.n	80146b0 <_fflush_r+0xc>
 80146ee:	89a3      	ldrh	r3, [r4, #12]
 80146f0:	059b      	lsls	r3, r3, #22
 80146f2:	d4dd      	bmi.n	80146b0 <_fflush_r+0xc>
 80146f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146f6:	f7fe ffab 	bl	8013650 <__retarget_lock_release_recursive>
 80146fa:	e7d9      	b.n	80146b0 <_fflush_r+0xc>
 80146fc:	4b05      	ldr	r3, [pc, #20]	; (8014714 <_fflush_r+0x70>)
 80146fe:	429c      	cmp	r4, r3
 8014700:	d101      	bne.n	8014706 <_fflush_r+0x62>
 8014702:	68ac      	ldr	r4, [r5, #8]
 8014704:	e7df      	b.n	80146c6 <_fflush_r+0x22>
 8014706:	4b04      	ldr	r3, [pc, #16]	; (8014718 <_fflush_r+0x74>)
 8014708:	429c      	cmp	r4, r3
 801470a:	bf08      	it	eq
 801470c:	68ec      	ldreq	r4, [r5, #12]
 801470e:	e7da      	b.n	80146c6 <_fflush_r+0x22>
 8014710:	08015838 	.word	0x08015838
 8014714:	08015858 	.word	0x08015858
 8014718:	08015818 	.word	0x08015818

0801471c <_lseek_r>:
 801471c:	b538      	push	{r3, r4, r5, lr}
 801471e:	4d07      	ldr	r5, [pc, #28]	; (801473c <_lseek_r+0x20>)
 8014720:	4604      	mov	r4, r0
 8014722:	4608      	mov	r0, r1
 8014724:	4611      	mov	r1, r2
 8014726:	2200      	movs	r2, #0
 8014728:	602a      	str	r2, [r5, #0]
 801472a:	461a      	mov	r2, r3
 801472c:	f7ec fc44 	bl	8000fb8 <_lseek>
 8014730:	1c43      	adds	r3, r0, #1
 8014732:	d102      	bne.n	801473a <_lseek_r+0x1e>
 8014734:	682b      	ldr	r3, [r5, #0]
 8014736:	b103      	cbz	r3, 801473a <_lseek_r+0x1e>
 8014738:	6023      	str	r3, [r4, #0]
 801473a:	bd38      	pop	{r3, r4, r5, pc}
 801473c:	2000de80 	.word	0x2000de80

08014740 <__swhatbuf_r>:
 8014740:	b570      	push	{r4, r5, r6, lr}
 8014742:	460e      	mov	r6, r1
 8014744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014748:	2900      	cmp	r1, #0
 801474a:	b096      	sub	sp, #88	; 0x58
 801474c:	4614      	mov	r4, r2
 801474e:	461d      	mov	r5, r3
 8014750:	da08      	bge.n	8014764 <__swhatbuf_r+0x24>
 8014752:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014756:	2200      	movs	r2, #0
 8014758:	602a      	str	r2, [r5, #0]
 801475a:	061a      	lsls	r2, r3, #24
 801475c:	d410      	bmi.n	8014780 <__swhatbuf_r+0x40>
 801475e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014762:	e00e      	b.n	8014782 <__swhatbuf_r+0x42>
 8014764:	466a      	mov	r2, sp
 8014766:	f000 f8e9 	bl	801493c <_fstat_r>
 801476a:	2800      	cmp	r0, #0
 801476c:	dbf1      	blt.n	8014752 <__swhatbuf_r+0x12>
 801476e:	9a01      	ldr	r2, [sp, #4]
 8014770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014778:	425a      	negs	r2, r3
 801477a:	415a      	adcs	r2, r3
 801477c:	602a      	str	r2, [r5, #0]
 801477e:	e7ee      	b.n	801475e <__swhatbuf_r+0x1e>
 8014780:	2340      	movs	r3, #64	; 0x40
 8014782:	2000      	movs	r0, #0
 8014784:	6023      	str	r3, [r4, #0]
 8014786:	b016      	add	sp, #88	; 0x58
 8014788:	bd70      	pop	{r4, r5, r6, pc}
	...

0801478c <__smakebuf_r>:
 801478c:	898b      	ldrh	r3, [r1, #12]
 801478e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014790:	079d      	lsls	r5, r3, #30
 8014792:	4606      	mov	r6, r0
 8014794:	460c      	mov	r4, r1
 8014796:	d507      	bpl.n	80147a8 <__smakebuf_r+0x1c>
 8014798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801479c:	6023      	str	r3, [r4, #0]
 801479e:	6123      	str	r3, [r4, #16]
 80147a0:	2301      	movs	r3, #1
 80147a2:	6163      	str	r3, [r4, #20]
 80147a4:	b002      	add	sp, #8
 80147a6:	bd70      	pop	{r4, r5, r6, pc}
 80147a8:	ab01      	add	r3, sp, #4
 80147aa:	466a      	mov	r2, sp
 80147ac:	f7ff ffc8 	bl	8014740 <__swhatbuf_r>
 80147b0:	9900      	ldr	r1, [sp, #0]
 80147b2:	4605      	mov	r5, r0
 80147b4:	4630      	mov	r0, r6
 80147b6:	f7fd f98b 	bl	8011ad0 <_malloc_r>
 80147ba:	b948      	cbnz	r0, 80147d0 <__smakebuf_r+0x44>
 80147bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147c0:	059a      	lsls	r2, r3, #22
 80147c2:	d4ef      	bmi.n	80147a4 <__smakebuf_r+0x18>
 80147c4:	f023 0303 	bic.w	r3, r3, #3
 80147c8:	f043 0302 	orr.w	r3, r3, #2
 80147cc:	81a3      	strh	r3, [r4, #12]
 80147ce:	e7e3      	b.n	8014798 <__smakebuf_r+0xc>
 80147d0:	4b0d      	ldr	r3, [pc, #52]	; (8014808 <__smakebuf_r+0x7c>)
 80147d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80147d4:	89a3      	ldrh	r3, [r4, #12]
 80147d6:	6020      	str	r0, [r4, #0]
 80147d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147dc:	81a3      	strh	r3, [r4, #12]
 80147de:	9b00      	ldr	r3, [sp, #0]
 80147e0:	6163      	str	r3, [r4, #20]
 80147e2:	9b01      	ldr	r3, [sp, #4]
 80147e4:	6120      	str	r0, [r4, #16]
 80147e6:	b15b      	cbz	r3, 8014800 <__smakebuf_r+0x74>
 80147e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147ec:	4630      	mov	r0, r6
 80147ee:	f000 f8b7 	bl	8014960 <_isatty_r>
 80147f2:	b128      	cbz	r0, 8014800 <__smakebuf_r+0x74>
 80147f4:	89a3      	ldrh	r3, [r4, #12]
 80147f6:	f023 0303 	bic.w	r3, r3, #3
 80147fa:	f043 0301 	orr.w	r3, r3, #1
 80147fe:	81a3      	strh	r3, [r4, #12]
 8014800:	89a0      	ldrh	r0, [r4, #12]
 8014802:	4305      	orrs	r5, r0
 8014804:	81a5      	strh	r5, [r4, #12]
 8014806:	e7cd      	b.n	80147a4 <__smakebuf_r+0x18>
 8014808:	0801347d 	.word	0x0801347d

0801480c <__ascii_mbtowc>:
 801480c:	b082      	sub	sp, #8
 801480e:	b901      	cbnz	r1, 8014812 <__ascii_mbtowc+0x6>
 8014810:	a901      	add	r1, sp, #4
 8014812:	b142      	cbz	r2, 8014826 <__ascii_mbtowc+0x1a>
 8014814:	b14b      	cbz	r3, 801482a <__ascii_mbtowc+0x1e>
 8014816:	7813      	ldrb	r3, [r2, #0]
 8014818:	600b      	str	r3, [r1, #0]
 801481a:	7812      	ldrb	r2, [r2, #0]
 801481c:	1e10      	subs	r0, r2, #0
 801481e:	bf18      	it	ne
 8014820:	2001      	movne	r0, #1
 8014822:	b002      	add	sp, #8
 8014824:	4770      	bx	lr
 8014826:	4610      	mov	r0, r2
 8014828:	e7fb      	b.n	8014822 <__ascii_mbtowc+0x16>
 801482a:	f06f 0001 	mvn.w	r0, #1
 801482e:	e7f8      	b.n	8014822 <__ascii_mbtowc+0x16>

08014830 <memmove>:
 8014830:	4288      	cmp	r0, r1
 8014832:	b510      	push	{r4, lr}
 8014834:	eb01 0402 	add.w	r4, r1, r2
 8014838:	d902      	bls.n	8014840 <memmove+0x10>
 801483a:	4284      	cmp	r4, r0
 801483c:	4623      	mov	r3, r4
 801483e:	d807      	bhi.n	8014850 <memmove+0x20>
 8014840:	1e43      	subs	r3, r0, #1
 8014842:	42a1      	cmp	r1, r4
 8014844:	d008      	beq.n	8014858 <memmove+0x28>
 8014846:	f811 2b01 	ldrb.w	r2, [r1], #1
 801484a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801484e:	e7f8      	b.n	8014842 <memmove+0x12>
 8014850:	4402      	add	r2, r0
 8014852:	4601      	mov	r1, r0
 8014854:	428a      	cmp	r2, r1
 8014856:	d100      	bne.n	801485a <memmove+0x2a>
 8014858:	bd10      	pop	{r4, pc}
 801485a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801485e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014862:	e7f7      	b.n	8014854 <memmove+0x24>

08014864 <_malloc_usable_size_r>:
 8014864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014868:	1f18      	subs	r0, r3, #4
 801486a:	2b00      	cmp	r3, #0
 801486c:	bfbc      	itt	lt
 801486e:	580b      	ldrlt	r3, [r1, r0]
 8014870:	18c0      	addlt	r0, r0, r3
 8014872:	4770      	bx	lr

08014874 <_read_r>:
 8014874:	b538      	push	{r3, r4, r5, lr}
 8014876:	4d07      	ldr	r5, [pc, #28]	; (8014894 <_read_r+0x20>)
 8014878:	4604      	mov	r4, r0
 801487a:	4608      	mov	r0, r1
 801487c:	4611      	mov	r1, r2
 801487e:	2200      	movs	r2, #0
 8014880:	602a      	str	r2, [r5, #0]
 8014882:	461a      	mov	r2, r3
 8014884:	f7ec fb38 	bl	8000ef8 <_read>
 8014888:	1c43      	adds	r3, r0, #1
 801488a:	d102      	bne.n	8014892 <_read_r+0x1e>
 801488c:	682b      	ldr	r3, [r5, #0]
 801488e:	b103      	cbz	r3, 8014892 <_read_r+0x1e>
 8014890:	6023      	str	r3, [r4, #0]
 8014892:	bd38      	pop	{r3, r4, r5, pc}
 8014894:	2000de80 	.word	0x2000de80

08014898 <_raise_r>:
 8014898:	291f      	cmp	r1, #31
 801489a:	b538      	push	{r3, r4, r5, lr}
 801489c:	4604      	mov	r4, r0
 801489e:	460d      	mov	r5, r1
 80148a0:	d904      	bls.n	80148ac <_raise_r+0x14>
 80148a2:	2316      	movs	r3, #22
 80148a4:	6003      	str	r3, [r0, #0]
 80148a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148aa:	bd38      	pop	{r3, r4, r5, pc}
 80148ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80148ae:	b112      	cbz	r2, 80148b6 <_raise_r+0x1e>
 80148b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80148b4:	b94b      	cbnz	r3, 80148ca <_raise_r+0x32>
 80148b6:	4620      	mov	r0, r4
 80148b8:	f000 f830 	bl	801491c <_getpid_r>
 80148bc:	462a      	mov	r2, r5
 80148be:	4601      	mov	r1, r0
 80148c0:	4620      	mov	r0, r4
 80148c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148c6:	f000 b817 	b.w	80148f8 <_kill_r>
 80148ca:	2b01      	cmp	r3, #1
 80148cc:	d00a      	beq.n	80148e4 <_raise_r+0x4c>
 80148ce:	1c59      	adds	r1, r3, #1
 80148d0:	d103      	bne.n	80148da <_raise_r+0x42>
 80148d2:	2316      	movs	r3, #22
 80148d4:	6003      	str	r3, [r0, #0]
 80148d6:	2001      	movs	r0, #1
 80148d8:	e7e7      	b.n	80148aa <_raise_r+0x12>
 80148da:	2400      	movs	r4, #0
 80148dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80148e0:	4628      	mov	r0, r5
 80148e2:	4798      	blx	r3
 80148e4:	2000      	movs	r0, #0
 80148e6:	e7e0      	b.n	80148aa <_raise_r+0x12>

080148e8 <raise>:
 80148e8:	4b02      	ldr	r3, [pc, #8]	; (80148f4 <raise+0xc>)
 80148ea:	4601      	mov	r1, r0
 80148ec:	6818      	ldr	r0, [r3, #0]
 80148ee:	f7ff bfd3 	b.w	8014898 <_raise_r>
 80148f2:	bf00      	nop
 80148f4:	200002a4 	.word	0x200002a4

080148f8 <_kill_r>:
 80148f8:	b538      	push	{r3, r4, r5, lr}
 80148fa:	4d07      	ldr	r5, [pc, #28]	; (8014918 <_kill_r+0x20>)
 80148fc:	2300      	movs	r3, #0
 80148fe:	4604      	mov	r4, r0
 8014900:	4608      	mov	r0, r1
 8014902:	4611      	mov	r1, r2
 8014904:	602b      	str	r3, [r5, #0]
 8014906:	f7ec fadd 	bl	8000ec4 <_kill>
 801490a:	1c43      	adds	r3, r0, #1
 801490c:	d102      	bne.n	8014914 <_kill_r+0x1c>
 801490e:	682b      	ldr	r3, [r5, #0]
 8014910:	b103      	cbz	r3, 8014914 <_kill_r+0x1c>
 8014912:	6023      	str	r3, [r4, #0]
 8014914:	bd38      	pop	{r3, r4, r5, pc}
 8014916:	bf00      	nop
 8014918:	2000de80 	.word	0x2000de80

0801491c <_getpid_r>:
 801491c:	f7ec baca 	b.w	8000eb4 <_getpid>

08014920 <__ascii_wctomb>:
 8014920:	b149      	cbz	r1, 8014936 <__ascii_wctomb+0x16>
 8014922:	2aff      	cmp	r2, #255	; 0xff
 8014924:	bf85      	ittet	hi
 8014926:	238a      	movhi	r3, #138	; 0x8a
 8014928:	6003      	strhi	r3, [r0, #0]
 801492a:	700a      	strbls	r2, [r1, #0]
 801492c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014930:	bf98      	it	ls
 8014932:	2001      	movls	r0, #1
 8014934:	4770      	bx	lr
 8014936:	4608      	mov	r0, r1
 8014938:	4770      	bx	lr
	...

0801493c <_fstat_r>:
 801493c:	b538      	push	{r3, r4, r5, lr}
 801493e:	4d07      	ldr	r5, [pc, #28]	; (801495c <_fstat_r+0x20>)
 8014940:	2300      	movs	r3, #0
 8014942:	4604      	mov	r4, r0
 8014944:	4608      	mov	r0, r1
 8014946:	4611      	mov	r1, r2
 8014948:	602b      	str	r3, [r5, #0]
 801494a:	f7ec fb1a 	bl	8000f82 <_fstat>
 801494e:	1c43      	adds	r3, r0, #1
 8014950:	d102      	bne.n	8014958 <_fstat_r+0x1c>
 8014952:	682b      	ldr	r3, [r5, #0]
 8014954:	b103      	cbz	r3, 8014958 <_fstat_r+0x1c>
 8014956:	6023      	str	r3, [r4, #0]
 8014958:	bd38      	pop	{r3, r4, r5, pc}
 801495a:	bf00      	nop
 801495c:	2000de80 	.word	0x2000de80

08014960 <_isatty_r>:
 8014960:	b538      	push	{r3, r4, r5, lr}
 8014962:	4d06      	ldr	r5, [pc, #24]	; (801497c <_isatty_r+0x1c>)
 8014964:	2300      	movs	r3, #0
 8014966:	4604      	mov	r4, r0
 8014968:	4608      	mov	r0, r1
 801496a:	602b      	str	r3, [r5, #0]
 801496c:	f7ec fb19 	bl	8000fa2 <_isatty>
 8014970:	1c43      	adds	r3, r0, #1
 8014972:	d102      	bne.n	801497a <_isatty_r+0x1a>
 8014974:	682b      	ldr	r3, [r5, #0]
 8014976:	b103      	cbz	r3, 801497a <_isatty_r+0x1a>
 8014978:	6023      	str	r3, [r4, #0]
 801497a:	bd38      	pop	{r3, r4, r5, pc}
 801497c:	2000de80 	.word	0x2000de80

08014980 <_init>:
 8014980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014982:	bf00      	nop
 8014984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014986:	bc08      	pop	{r3}
 8014988:	469e      	mov	lr, r3
 801498a:	4770      	bx	lr

0801498c <_fini>:
 801498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801498e:	bf00      	nop
 8014990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014992:	bc08      	pop	{r3}
 8014994:	469e      	mov	lr, r3
 8014996:	4770      	bx	lr
