
microROS_gps_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001262c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  08012830  08012830  00022830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801362c  0801362c  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801362c  0801362c  0002362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013634  08013634  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013634  08013634  00023634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801363c  0801363c  0002363c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  08013640  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d9d4  200002d0  08013910  000302d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dca4  08013910  0003dca4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d016  00000000  00000000  000302fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb8  00000000  00000000  0004d314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00050fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  000525e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5de  00000000  00000000  00053a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca78  00000000  00000000  00081046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114ab6  00000000  00000000  0009dabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000083  00000000  00000000  001b2574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a4c  00000000  00000000  001b25f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002d0 	.word	0x200002d0
 800021c:	00000000 	.word	0x00000000
 8000220:	08012814 	.word	0x08012814

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002d4 	.word	0x200002d4
 800023c:	08012814 	.word	0x08012814

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_ldivmod>:
 8000304:	b97b      	cbnz	r3, 8000326 <__aeabi_ldivmod+0x22>
 8000306:	b972      	cbnz	r2, 8000326 <__aeabi_ldivmod+0x22>
 8000308:	2900      	cmp	r1, #0
 800030a:	bfbe      	ittt	lt
 800030c:	2000      	movlt	r0, #0
 800030e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000312:	e006      	blt.n	8000322 <__aeabi_ldivmod+0x1e>
 8000314:	bf08      	it	eq
 8000316:	2800      	cmpeq	r0, #0
 8000318:	bf1c      	itt	ne
 800031a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800031e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000322:	f000 b9bf 	b.w	80006a4 <__aeabi_idiv0>
 8000326:	f1ad 0c08 	sub.w	ip, sp, #8
 800032a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032e:	2900      	cmp	r1, #0
 8000330:	db09      	blt.n	8000346 <__aeabi_ldivmod+0x42>
 8000332:	2b00      	cmp	r3, #0
 8000334:	db1a      	blt.n	800036c <__aeabi_ldivmod+0x68>
 8000336:	f000 f84d 	bl	80003d4 <__udivmoddi4>
 800033a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800033e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000342:	b004      	add	sp, #16
 8000344:	4770      	bx	lr
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	db1b      	blt.n	8000388 <__aeabi_ldivmod+0x84>
 8000350:	f000 f840 	bl	80003d4 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	4770      	bx	lr
 800036c:	4252      	negs	r2, r2
 800036e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000372:	f000 f82f 	bl	80003d4 <__udivmoddi4>
 8000376:	f8dd e004 	ldr.w	lr, [sp, #4]
 800037a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037e:	b004      	add	sp, #16
 8000380:	4240      	negs	r0, r0
 8000382:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000386:	4770      	bx	lr
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	f000 f821 	bl	80003d4 <__udivmoddi4>
 8000392:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039a:	b004      	add	sp, #16
 800039c:	4252      	negs	r2, r2
 800039e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b8:	f000 b974 	b.w	80006a4 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9d08      	ldr	r5, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	468e      	mov	lr, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14d      	bne.n	800047e <__udivmoddi4+0xaa>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4694      	mov	ip, r2
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0xe8>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b152      	cbz	r2, 8000404 <__udivmoddi4+0x30>
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	f1c2 0120 	rsb	r1, r2, #32
 80003f6:	fa20 f101 	lsr.w	r1, r0, r1
 80003fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000402:	4094      	lsls	r4, r2
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	0c21      	lsrs	r1, r4, #16
 800040a:	fbbe f6f8 	udiv	r6, lr, r8
 800040e:	fa1f f78c 	uxth.w	r7, ip
 8000412:	fb08 e316 	mls	r3, r8, r6, lr
 8000416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800041a:	fb06 f107 	mul.w	r1, r6, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d90a      	bls.n	8000438 <__udivmoddi4+0x64>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800042a:	f080 811f 	bcs.w	800066c <__udivmoddi4+0x298>
 800042e:	4299      	cmp	r1, r3
 8000430:	f240 811c 	bls.w	800066c <__udivmoddi4+0x298>
 8000434:	3e02      	subs	r6, #2
 8000436:	4463      	add	r3, ip
 8000438:	1a5b      	subs	r3, r3, r1
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3310 	mls	r3, r8, r0, r3
 8000444:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000448:	fb00 f707 	mul.w	r7, r0, r7
 800044c:	42a7      	cmp	r7, r4
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x92>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000458:	f080 810a 	bcs.w	8000670 <__udivmoddi4+0x29c>
 800045c:	42a7      	cmp	r7, r4
 800045e:	f240 8107 	bls.w	8000670 <__udivmoddi4+0x29c>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	1be4      	subs	r4, r4, r7
 800046c:	2600      	movs	r6, #0
 800046e:	b11d      	cbz	r5, 8000478 <__udivmoddi4+0xa4>
 8000470:	40d4      	lsrs	r4, r2
 8000472:	2300      	movs	r3, #0
 8000474:	e9c5 4300 	strd	r4, r3, [r5]
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	428b      	cmp	r3, r1
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0xc2>
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80ef 	beq.w	8000666 <__udivmoddi4+0x292>
 8000488:	2600      	movs	r6, #0
 800048a:	e9c5 0100 	strd	r0, r1, [r5]
 800048e:	4630      	mov	r0, r6
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	fab3 f683 	clz	r6, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d14a      	bne.n	8000534 <__udivmoddi4+0x160>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xd4>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 80f9 	bhi.w	800069a <__udivmoddi4+0x2c6>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb61 0303 	sbc.w	r3, r1, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	469e      	mov	lr, r3
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e0      	beq.n	8000478 <__udivmoddi4+0xa4>
 80004b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ba:	e7dd      	b.n	8000478 <__udivmoddi4+0xa4>
 80004bc:	b902      	cbnz	r2, 80004c0 <__udivmoddi4+0xec>
 80004be:	deff      	udf	#255	; 0xff
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 8092 	bne.w	80005ee <__udivmoddi4+0x21a>
 80004ca:	eba1 010c 	sub.w	r1, r1, ip
 80004ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d2:	fa1f fe8c 	uxth.w	lr, ip
 80004d6:	2601      	movs	r6, #1
 80004d8:	0c20      	lsrs	r0, r4, #16
 80004da:	fbb1 f3f7 	udiv	r3, r1, r7
 80004de:	fb07 1113 	mls	r1, r7, r3, r1
 80004e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e6:	fb0e f003 	mul.w	r0, lr, r3
 80004ea:	4288      	cmp	r0, r1
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x12c>
 80004ee:	eb1c 0101 	adds.w	r1, ip, r1
 80004f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x12a>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f200 80cb 	bhi.w	8000694 <__udivmoddi4+0x2c0>
 80004fe:	4643      	mov	r3, r8
 8000500:	1a09      	subs	r1, r1, r0
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1110 	mls	r1, r7, r0, r1
 800050c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000510:	fb0e fe00 	mul.w	lr, lr, r0
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x156>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d202      	bcs.n	8000528 <__udivmoddi4+0x154>
 8000522:	45a6      	cmp	lr, r4
 8000524:	f200 80bb 	bhi.w	800069e <__udivmoddi4+0x2ca>
 8000528:	4608      	mov	r0, r1
 800052a:	eba4 040e 	sub.w	r4, r4, lr
 800052e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000532:	e79c      	b.n	800046e <__udivmoddi4+0x9a>
 8000534:	f1c6 0720 	rsb	r7, r6, #32
 8000538:	40b3      	lsls	r3, r6
 800053a:	fa22 fc07 	lsr.w	ip, r2, r7
 800053e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000542:	fa20 f407 	lsr.w	r4, r0, r7
 8000546:	fa01 f306 	lsl.w	r3, r1, r6
 800054a:	431c      	orrs	r4, r3
 800054c:	40f9      	lsrs	r1, r7
 800054e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000552:	fa00 f306 	lsl.w	r3, r0, r6
 8000556:	fbb1 f8f9 	udiv	r8, r1, r9
 800055a:	0c20      	lsrs	r0, r4, #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fb09 1118 	mls	r1, r9, r8, r1
 8000564:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000568:	fb08 f00e 	mul.w	r0, r8, lr
 800056c:	4288      	cmp	r0, r1
 800056e:	fa02 f206 	lsl.w	r2, r2, r6
 8000572:	d90b      	bls.n	800058c <__udivmoddi4+0x1b8>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800057c:	f080 8088 	bcs.w	8000690 <__udivmoddi4+0x2bc>
 8000580:	4288      	cmp	r0, r1
 8000582:	f240 8085 	bls.w	8000690 <__udivmoddi4+0x2bc>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f9 	udiv	r0, r1, r9
 8000594:	fb09 1110 	mls	r1, r9, r0, r1
 8000598:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800059c:	fb00 fe0e 	mul.w	lr, r0, lr
 80005a0:	458e      	cmp	lr, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x1e2>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005ac:	d26c      	bcs.n	8000688 <__udivmoddi4+0x2b4>
 80005ae:	458e      	cmp	lr, r1
 80005b0:	d96a      	bls.n	8000688 <__udivmoddi4+0x2b4>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ba:	fba0 9402 	umull	r9, r4, r0, r2
 80005be:	eba1 010e 	sub.w	r1, r1, lr
 80005c2:	42a1      	cmp	r1, r4
 80005c4:	46c8      	mov	r8, r9
 80005c6:	46a6      	mov	lr, r4
 80005c8:	d356      	bcc.n	8000678 <__udivmoddi4+0x2a4>
 80005ca:	d053      	beq.n	8000674 <__udivmoddi4+0x2a0>
 80005cc:	b15d      	cbz	r5, 80005e6 <__udivmoddi4+0x212>
 80005ce:	ebb3 0208 	subs.w	r2, r3, r8
 80005d2:	eb61 010e 	sbc.w	r1, r1, lr
 80005d6:	fa01 f707 	lsl.w	r7, r1, r7
 80005da:	fa22 f306 	lsr.w	r3, r2, r6
 80005de:	40f1      	lsrs	r1, r6
 80005e0:	431f      	orrs	r7, r3
 80005e2:	e9c5 7100 	strd	r7, r1, [r5]
 80005e6:	2600      	movs	r6, #0
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	40d8      	lsrs	r0, r3
 80005f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
 80005fc:	4091      	lsls	r1, r2
 80005fe:	4301      	orrs	r1, r0
 8000600:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000604:	fa1f fe8c 	uxth.w	lr, ip
 8000608:	fbb3 f0f7 	udiv	r0, r3, r7
 800060c:	fb07 3610 	mls	r6, r7, r0, r3
 8000610:	0c0b      	lsrs	r3, r1, #16
 8000612:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000616:	fb00 f60e 	mul.w	r6, r0, lr
 800061a:	429e      	cmp	r6, r3
 800061c:	fa04 f402 	lsl.w	r4, r4, r2
 8000620:	d908      	bls.n	8000634 <__udivmoddi4+0x260>
 8000622:	eb1c 0303 	adds.w	r3, ip, r3
 8000626:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062a:	d22f      	bcs.n	800068c <__udivmoddi4+0x2b8>
 800062c:	429e      	cmp	r6, r3
 800062e:	d92d      	bls.n	800068c <__udivmoddi4+0x2b8>
 8000630:	3802      	subs	r0, #2
 8000632:	4463      	add	r3, ip
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	b289      	uxth	r1, r1
 8000638:	fbb3 f6f7 	udiv	r6, r3, r7
 800063c:	fb07 3316 	mls	r3, r7, r6, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb06 f30e 	mul.w	r3, r6, lr
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x28a>
 800064c:	eb1c 0101 	adds.w	r1, ip, r1
 8000650:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000654:	d216      	bcs.n	8000684 <__udivmoddi4+0x2b0>
 8000656:	428b      	cmp	r3, r1
 8000658:	d914      	bls.n	8000684 <__udivmoddi4+0x2b0>
 800065a:	3e02      	subs	r6, #2
 800065c:	4461      	add	r1, ip
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000664:	e738      	b.n	80004d8 <__udivmoddi4+0x104>
 8000666:	462e      	mov	r6, r5
 8000668:	4628      	mov	r0, r5
 800066a:	e705      	b.n	8000478 <__udivmoddi4+0xa4>
 800066c:	4606      	mov	r6, r0
 800066e:	e6e3      	b.n	8000438 <__udivmoddi4+0x64>
 8000670:	4618      	mov	r0, r3
 8000672:	e6f8      	b.n	8000466 <__udivmoddi4+0x92>
 8000674:	454b      	cmp	r3, r9
 8000676:	d2a9      	bcs.n	80005cc <__udivmoddi4+0x1f8>
 8000678:	ebb9 0802 	subs.w	r8, r9, r2
 800067c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000680:	3801      	subs	r0, #1
 8000682:	e7a3      	b.n	80005cc <__udivmoddi4+0x1f8>
 8000684:	4646      	mov	r6, r8
 8000686:	e7ea      	b.n	800065e <__udivmoddi4+0x28a>
 8000688:	4620      	mov	r0, r4
 800068a:	e794      	b.n	80005b6 <__udivmoddi4+0x1e2>
 800068c:	4640      	mov	r0, r8
 800068e:	e7d1      	b.n	8000634 <__udivmoddi4+0x260>
 8000690:	46d0      	mov	r8, sl
 8000692:	e77b      	b.n	800058c <__udivmoddi4+0x1b8>
 8000694:	3b02      	subs	r3, #2
 8000696:	4461      	add	r1, ip
 8000698:	e732      	b.n	8000500 <__udivmoddi4+0x12c>
 800069a:	4630      	mov	r0, r6
 800069c:	e709      	b.n	80004b2 <__udivmoddi4+0xde>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	e742      	b.n	800052a <__udivmoddi4+0x156>

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b4:	f005 ff22 	bl	80064fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006b8:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <pvPortMallocMicroROS+0x180>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c0:	f000 f98a 	bl	80009d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c4:	4b59      	ldr	r3, [pc, #356]	; (800082c <pvPortMallocMicroROS+0x184>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	f040 8092 	bne.w	80007f6 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d01f      	beq.n	8000718 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80006d8:	2208      	movs	r2, #8
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d016      	beq.n	8000718 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f023 0307 	bic.w	r3, r3, #7
 80006f0:	3308      	adds	r3, #8
 80006f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d00c      	beq.n	8000718 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000702:	b672      	cpsid	i
 8000704:	f383 8811 	msr	BASEPRI, r3
 8000708:	f3bf 8f6f 	isb	sy
 800070c:	f3bf 8f4f 	dsb	sy
 8000710:	b662      	cpsie	i
 8000712:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000714:	bf00      	nop
 8000716:	e7fe      	b.n	8000716 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d06b      	beq.n	80007f6 <pvPortMallocMicroROS+0x14e>
 800071e:	4b44      	ldr	r3, [pc, #272]	; (8000830 <pvPortMallocMicroROS+0x188>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	429a      	cmp	r2, r3
 8000726:	d866      	bhi.n	80007f6 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000728:	4b42      	ldr	r3, [pc, #264]	; (8000834 <pvPortMallocMicroROS+0x18c>)
 800072a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800072c:	4b41      	ldr	r3, [pc, #260]	; (8000834 <pvPortMallocMicroROS+0x18c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000732:	e004      	b.n	800073e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	429a      	cmp	r2, r3
 8000746:	d903      	bls.n	8000750 <pvPortMallocMicroROS+0xa8>
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f1      	bne.n	8000734 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000750:	4b35      	ldr	r3, [pc, #212]	; (8000828 <pvPortMallocMicroROS+0x180>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000756:	429a      	cmp	r2, r3
 8000758:	d04d      	beq.n	80007f6 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2208      	movs	r2, #8
 8000760:	4413      	add	r3, r2
 8000762:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1ad2      	subs	r2, r2, r3
 8000774:	2308      	movs	r3, #8
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	429a      	cmp	r2, r3
 800077a:	d921      	bls.n	80007c0 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800077c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00c      	beq.n	80007a8 <pvPortMallocMicroROS+0x100>
	__asm volatile
 800078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000792:	b672      	cpsid	i
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	b662      	cpsie	i
 80007a2:	613b      	str	r3, [r7, #16]
}
 80007a4:	bf00      	nop
 80007a6:	e7fe      	b.n	80007a6 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ba:	69b8      	ldr	r0, [r7, #24]
 80007bc:	f000 f96e 	bl	8000a9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <pvPortMallocMicroROS+0x188>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4a19      	ldr	r2, [pc, #100]	; (8000830 <pvPortMallocMicroROS+0x188>)
 80007cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <pvPortMallocMicroROS+0x188>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <pvPortMallocMicroROS+0x190>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d203      	bcs.n	80007e2 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <pvPortMallocMicroROS+0x188>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <pvPortMallocMicroROS+0x190>)
 80007e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <pvPortMallocMicroROS+0x184>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	431a      	orrs	r2, r3
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f6:	f005 fe8f 	bl	8006518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00c      	beq.n	800081e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000808:	b672      	cpsid	i
 800080a:	f383 8811 	msr	BASEPRI, r3
 800080e:	f3bf 8f6f 	isb	sy
 8000812:	f3bf 8f4f 	dsb	sy
 8000816:	b662      	cpsie	i
 8000818:	60fb      	str	r3, [r7, #12]
}
 800081a:	bf00      	nop
 800081c:	e7fe      	b.n	800081c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800081e:	69fb      	ldr	r3, [r7, #28]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20003ef4 	.word	0x20003ef4
 800082c:	20003f00 	.word	0x20003f00
 8000830:	20003ef8 	.word	0x20003ef8
 8000834:	20003eec 	.word	0x20003eec
 8000838:	20003efc 	.word	0x20003efc

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04c      	beq.n	80008e8 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <vPortFreeMicroROS+0xb4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10c      	bne.n	8000884 <vPortFreeMicroROS+0x48>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800086e:	b672      	cpsid	i
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	b662      	cpsie	i
 800087e:	60fb      	str	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	e7fe      	b.n	8000882 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00c      	beq.n	80008a6 <vPortFreeMicroROS+0x6a>
	__asm volatile
 800088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000890:	b672      	cpsid	i
 8000892:	f383 8811 	msr	BASEPRI, r3
 8000896:	f3bf 8f6f 	isb	sy
 800089a:	f3bf 8f4f 	dsb	sy
 800089e:	b662      	cpsie	i
 80008a0:	60bb      	str	r3, [r7, #8]
}
 80008a2:	bf00      	nop
 80008a4:	e7fe      	b.n	80008a4 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <vPortFreeMicroROS+0xb4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4013      	ands	r3, r2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d019      	beq.n	80008e8 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d115      	bne.n	80008e8 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <vPortFreeMicroROS+0xb4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	401a      	ands	r2, r3
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008cc:	f005 fe16 	bl	80064fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <vPortFreeMicroROS+0xb8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <vPortFreeMicroROS+0xb8>)
 80008dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008de:	6938      	ldr	r0, [r7, #16]
 80008e0:	f000 f8dc 	bl	8000a9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e4:	f005 fe18 	bl	8006518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20003f00 	.word	0x20003f00
 80008f4:	20003ef8 	.word	0x20003ef8

080008f8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000904:	2308      	movs	r3, #8
 8000906:	425b      	negs	r3, r3
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	4413      	add	r3, r2
 800090c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <getBlockSize+0x38>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	43db      	mvns	r3, r3
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

	return count;
 8000920:	68fb      	ldr	r3, [r7, #12]
}
 8000922:	4618      	mov	r0, r3
 8000924:	371c      	adds	r7, #28
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20003f00 	.word	0x20003f00

08000934 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800093e:	f005 fddd 	bl	80064fc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f7ff feb0 	bl	80006a8 <pvPortMallocMicroROS>
 8000948:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d017      	beq.n	8000980 <pvPortReallocMicroROS+0x4c>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d014      	beq.n	8000980 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffce 	bl	80008f8 <getBlockSize>
 800095c:	4603      	mov	r3, r0
 800095e:	2208      	movs	r2, #8
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d201      	bcs.n	8000970 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	68b8      	ldr	r0, [r7, #8]
 8000976:	f010 fbaf 	bl	80110d8 <memcpy>

		vPortFreeMicroROS(pv);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff5e 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000980:	f005 fdca 	bl	8006518 <xTaskResumeAll>

	return newmem;
 8000984:	68bb      	ldr	r3, [r7, #8]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000998:	f005 fdb0 	bl	80064fc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff fe7e 	bl	80006a8 <pvPortMallocMicroROS>
 80009ac:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b2:	e004      	b.n	80009be <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	613a      	str	r2, [r7, #16]
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	617a      	str	r2, [r7, #20]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f5      	bne.n	80009b4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009c8:	f005 fda6 	bl	8006518 <xTaskResumeAll>
  	return mem;
 80009cc:	68fb      	ldr	r3, [r7, #12]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <prvHeapInit+0xac>)
 80009e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00c      	beq.n	8000a0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3307      	adds	r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f023 0307 	bic.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <prvHeapInit+0xac>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <prvHeapInit+0xb0>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <prvHeapInit+0xb0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a24:	2208      	movs	r2, #8
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f023 0307 	bic.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <prvHeapInit+0xb4>)
 8000a38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <prvHeapInit+0xb4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <prvHeapInit+0xb4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	1ad2      	subs	r2, r2, r3
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <prvHeapInit+0xb4>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <prvHeapInit+0xb8>)
 8000a66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <prvHeapInit+0xbc>)
 8000a6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <prvHeapInit+0xc0>)
 8000a72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	200002ec 	.word	0x200002ec
 8000a88:	20003eec 	.word	0x20003eec
 8000a8c:	20003ef4 	.word	0x20003ef4
 8000a90:	20003efc 	.word	0x20003efc
 8000a94:	20003ef8 	.word	0x20003ef8
 8000a98:	20003f00 	.word	0x20003f00

08000a9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <prvInsertBlockIntoFreeList+0xac>)
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e002      	b.n	8000ab0 <prvInsertBlockIntoFreeList+0x14>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d8f7      	bhi.n	8000aaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d108      	bne.n	8000ade <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	441a      	add	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d118      	bne.n	8000b24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d00d      	beq.n	8000b1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	441a      	add	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	e008      	b.n	8000b2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <prvInsertBlockIntoFreeList+0xb0>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e003      	b.n	8000b2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d002      	beq.n	8000b3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20003eec 	.word	0x20003eec
 8000b4c:	20003ef4 	.word	0x20003ef4

08000b50 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <microros_allocate+0x3c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <microros_allocate+0x3c>)
 8000b68:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <microros_allocate+0x40>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <microros_allocate+0x40>)
 8000b78:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fd94 	bl	80006a8 <pvPortMallocMicroROS>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20003f04 	.word	0x20003f04
 8000b90:	20003f08 	.word	0x20003f08

08000b94 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00c      	beq.n	8000bbe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fea7 	bl	80008f8 <getBlockSize>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <microros_deallocate+0x34>)
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <microros_deallocate+0x34>)
 8000bb6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fe3f 	bl	800083c <vPortFreeMicroROS>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20003f08 	.word	0x20003f08

08000bcc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <microros_reallocate+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4413      	add	r3, r2
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <microros_reallocate+0x64>)
 8000be6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <microros_reallocate+0x68>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <microros_reallocate+0x68>)
 8000bf6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d104      	bne.n	8000c08 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f7ff fd52 	bl	80006a8 <pvPortMallocMicroROS>
 8000c04:	4603      	mov	r3, r0
 8000c06:	e00e      	b.n	8000c26 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff fe75 	bl	80008f8 <getBlockSize>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <microros_reallocate+0x68>)
 8000c12:	6812      	ldr	r2, [r2, #0]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <microros_reallocate+0x68>)
 8000c1a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff fe88 	bl	8000934 <pvPortReallocMicroROS>
 8000c24:	4603      	mov	r3, r0
  }
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20003f04 	.word	0x20003f04
 8000c34:	20003f08 	.word	0x20003f08

08000c38 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	fb02 f303 	mul.w	r3, r2, r3
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <microros_zero_allocate+0x48>)
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <microros_zero_allocate+0x48>)
 8000c56:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	fb02 f303 	mul.w	r3, r2, r3
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <microros_zero_allocate+0x4c>)
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <microros_zero_allocate+0x4c>)
 8000c6a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fe8d 	bl	800098e <pvPortCallocMicroROS>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20003f04 	.word	0x20003f04
 8000c84:	20003f08 	.word	0x20003f08

08000c88 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8000c88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8000c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c9e:	a320      	add	r3, pc, #128	; (adr r3, 8000d20 <UTILS_NanosecondsToTimespec+0x98>)
 8000ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca4:	f7ff fb2e 	bl	8000304 <__aeabi_ldivmod>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8000cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cb6:	a31a      	add	r3, pc, #104	; (adr r3, 8000d20 <UTILS_NanosecondsToTimespec+0x98>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fb22 	bl	8000304 <__aeabi_ldivmod>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da20      	bge.n	8000d0e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <UTILS_NanosecondsToTimespec+0x90>)
 8000cd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd6:	1712      	asrs	r2, r2, #28
 8000cd8:	17db      	asrs	r3, r3, #31
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	6979      	ldr	r1, [r7, #20]
 8000ce8:	17c8      	asrs	r0, r1, #31
 8000cea:	460c      	mov	r4, r1
 8000cec:	4605      	mov	r5, r0
 8000cee:	ebb2 0804 	subs.w	r8, r2, r4
 8000cf2:	eb63 0905 	sbc.w	r9, r3, r5
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	4906      	ldr	r1, [pc, #24]	; (8000d1c <UTILS_NanosecondsToTimespec+0x94>)
 8000d04:	fb01 f303 	mul.w	r3, r1, r3
 8000d08:	441a      	add	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
    }
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d18:	44b82fa1 	.word	0x44b82fa1
 8000d1c:	3b9aca00 	.word	0x3b9aca00
 8000d20:	3b9aca00 	.word	0x3b9aca00
 8000d24:	00000000 	.word	0x00000000

08000d28 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8000d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d2c:	b08e      	sub	sp, #56	; 0x38
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6278      	str	r0, [r7, #36]	; 0x24
 8000d32:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8000d34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d38:	2300      	movs	r3, #0
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8000d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f005 fe68 	bl	8006a24 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	17da      	asrs	r2, r3, #31
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	61fa      	str	r2, [r7, #28]
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	69b9      	ldr	r1, [r7, #24]
 8000d66:	000b      	movs	r3, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	2200      	movs	r2, #0
 8000d72:	461c      	mov	r4, r3
 8000d74:	4615      	mov	r5, r2
 8000d76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000d7a:	1911      	adds	r1, r2, r4
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	416b      	adcs	r3, r5
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000d86:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8000d8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	f04f 0400 	mov.w	r4, #0
 8000d96:	f04f 0500 	mov.w	r5, #0
 8000d9a:	015d      	lsls	r5, r3, #5
 8000d9c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8000da0:	0154      	lsls	r4, r2, #5
 8000da2:	4622      	mov	r2, r4
 8000da4:	462b      	mov	r3, r5
 8000da6:	ebb2 0800 	subs.w	r8, r2, r0
 8000daa:	eb63 0901 	sbc.w	r9, r3, r1
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8000dba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8000dbe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8000dc2:	4690      	mov	r8, r2
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	eb18 0a00 	adds.w	sl, r8, r0
 8000dca:	eb49 0b01 	adc.w	fp, r9, r1
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000dda:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000dde:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000de2:	ebb2 040a 	subs.w	r4, r2, sl
 8000de6:	603c      	str	r4, [r7, #0]
 8000de8:	eb63 030b 	sbc.w	r3, r3, fp
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000df2:	4623      	mov	r3, r4
 8000df4:	181b      	adds	r3, r3, r0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	462b      	mov	r3, r5
 8000dfa:	eb41 0303 	adc.w	r3, r1, r3
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	6a3a      	ldr	r2, [r7, #32]
 8000e02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e06:	f7ff ff3f 	bl	8000c88 <UTILS_NanosecondsToTimespec>

    return 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000e18 <cubemx_transport_open>:
static uint8_t it_buffer[UART_IT_BUFFER_SIZE];
static uint8_t it_data;
static size_t it_head = 0, it_tail = 0;


bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000e26:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_IT(uart, &it_data, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4904      	ldr	r1, [pc, #16]	; (8000e3c <cubemx_transport_open+0x24>)
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f002 fd45 	bl	80038bc <HAL_UART_Receive_IT>
    return true;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000470c 	.word	0x2000470c

08000e40 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000e4e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Abort_IT(uart);
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f002 fd77 	bl	8003944 <HAL_UART_Abort_IT>
    return true;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000e74:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e7a:	2b20      	cmp	r3, #32
 8000e7c:	d11a      	bne.n	8000eb4 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_IT(uart, buf, len);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f002 fcba 	bl	8003800 <HAL_UART_Transmit_IT>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000e90:	e002      	b.n	8000e98 <cubemx_transport_write+0x38>
            osDelay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f004 fac8 	bl	8005428 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <cubemx_transport_write+0x46>
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d1f5      	bne.n	8000e92 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000ea6:	7cfb      	ldrb	r3, [r7, #19]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <cubemx_transport_write+0x50>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	e002      	b.n	8000eb6 <cubemx_transport_write+0x56>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e000      	b.n	8000eb6 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000eb4:	2300      	movs	r3, #0
    }
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
    size_t wrote = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 8000ed2:	e011      	b.n	8000ef8 <cubemx_transport_read+0x38>
        buf[wrote] = it_buffer[it_head];
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <cubemx_transport_read+0x5c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	440b      	add	r3, r1
 8000ede:	4910      	ldr	r1, [pc, #64]	; (8000f20 <cubemx_transport_read+0x60>)
 8000ee0:	5c8a      	ldrb	r2, [r1, r2]
 8000ee2:	701a      	strb	r2, [r3, #0]
        it_head = (it_head + 1) % UART_IT_BUFFER_SIZE;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <cubemx_transport_read+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <cubemx_transport_read+0x5c>)
 8000ef0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <cubemx_transport_read+0x5c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <cubemx_transport_read+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d003      	beq.n	8000f0c <cubemx_transport_read+0x4c>
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3e3      	bcc.n	8000ed4 <cubemx_transport_read+0x14>
    }

    return wrote;
 8000f0c:	697b      	ldr	r3, [r7, #20]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	371c      	adds	r7, #28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20004710 	.word	0x20004710
 8000f20:	20003f0c 	.word	0x20003f0c
 8000f24:	20004714 	.word	0x20004714

08000f28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    if(it_tail == UART_IT_BUFFER_SIZE)
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_UART_RxCpltCallback+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f38:	d102      	bne.n	8000f40 <HAL_UART_RxCpltCallback+0x18>
        it_tail = 0;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_UART_RxCpltCallback+0x40>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]

    it_buffer[it_tail] = it_data;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_UART_RxCpltCallback+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <HAL_UART_RxCpltCallback+0x44>)
 8000f46:	7811      	ldrb	r1, [r2, #0]
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_UART_RxCpltCallback+0x48>)
 8000f4a:	54d1      	strb	r1, [r2, r3]
    it_tail++;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_UART_RxCpltCallback+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <HAL_UART_RxCpltCallback+0x40>)
 8000f54:	6013      	str	r3, [r2, #0]

    HAL_UART_Receive_IT(huart, &it_data, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4904      	ldr	r1, [pc, #16]	; (8000f6c <HAL_UART_RxCpltCallback+0x44>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f002 fcae 	bl	80038bc <HAL_UART_Receive_IT>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20004714 	.word	0x20004714
 8000f6c:	2000470c 	.word	0x2000470c
 8000f70:	20003f0c 	.word	0x20003f0c

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f000 fc81 	bl	800187e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f818 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 f8a2 	bl	80010c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f84:	f000 f870 	bl	8001068 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f88:	f004 f93e 	bl	8005208 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microROS_tx */
  microROS_txHandle = osThreadNew(tx_data, NULL, &microROS_tx_attributes);
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <main+0x30>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <main+0x34>)
 8000f92:	f004 f9a3 	bl	80052dc <osThreadNew>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <main+0x38>)
 8000f9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f9c:	f004 f968 	bl	8005270 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <main+0x2c>
 8000fa2:	bf00      	nop
 8000fa4:	080128c8 	.word	0x080128c8
 8000fa8:	080012d1 	.word	0x080012d1
 8000fac:	200047a0 	.word	0x200047a0

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	2234      	movs	r2, #52	; 0x34
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f010 f898 	bl	80110f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <SystemClock_Config+0xb0>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <SystemClock_Config+0xb0>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <SystemClock_Config+0xb0>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <SystemClock_Config+0xb4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <SystemClock_Config+0xb4>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <SystemClock_Config+0xb4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2310      	movs	r3, #16
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4618      	mov	r0, r3
 800101e:	f000 ff95 	bl	8001f4c <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001028:	f000 f9ee 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fa2d 	bl	80024a8 <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001054:	f000 f9d8 	bl	8001408 <Error_Handler>
  }
}
 8001058:	bf00      	nop
 800105a:	3750      	adds	r7, #80	; 0x50
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <MX_USART3_UART_Init+0x5c>)
 8001070:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART3_UART_Init+0x58>)
 80010ac:	f002 fb5a 	bl	8003764 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010b6:	f000 f9a7 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20004718 	.word	0x20004718
 80010c4:	40004800 	.word	0x40004800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b77      	ldr	r3, [pc, #476]	; (80012bc <MX_GPIO_Init+0x1f4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a76      	ldr	r2, [pc, #472]	; (80012bc <MX_GPIO_Init+0x1f4>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b74      	ldr	r3, [pc, #464]	; (80012bc <MX_GPIO_Init+0x1f4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <MX_GPIO_Init+0x1f4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a70      	ldr	r2, [pc, #448]	; (80012bc <MX_GPIO_Init+0x1f4>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a6a      	ldr	r2, [pc, #424]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b68      	ldr	r3, [pc, #416]	; (80012bc <MX_GPIO_Init+0x1f4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a64      	ldr	r2, [pc, #400]	; (80012bc <MX_GPIO_Init+0x1f4>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a5e      	ldr	r2, [pc, #376]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b5c      	ldr	r3, [pc, #368]	; (80012bc <MX_GPIO_Init+0x1f4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a58      	ldr	r2, [pc, #352]	; (80012bc <MX_GPIO_Init+0x1f4>)
 800115c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b56      	ldr	r3, [pc, #344]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f244 0181 	movw	r1, #16513	; 0x4081
 8001174:	4852      	ldr	r0, [pc, #328]	; (80012c0 <MX_GPIO_Init+0x1f8>)
 8001176:	f000 fecf 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2140      	movs	r1, #64	; 0x40
 800117e:	4851      	ldr	r0, [pc, #324]	; (80012c4 <MX_GPIO_Init+0x1fc>)
 8001180:	f000 feca 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	484b      	ldr	r0, [pc, #300]	; (80012c8 <MX_GPIO_Init+0x200>)
 800119c:	f000 fd10 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011a0:	2332      	movs	r3, #50	; 0x32
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b0:	230b      	movs	r3, #11
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4843      	ldr	r0, [pc, #268]	; (80012c8 <MX_GPIO_Init+0x200>)
 80011bc:	f000 fd00 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011c0:	2386      	movs	r3, #134	; 0x86
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d0:	230b      	movs	r3, #11
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	483c      	ldr	r0, [pc, #240]	; (80012cc <MX_GPIO_Init+0x204>)
 80011dc:	f000 fcf0 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4831      	ldr	r0, [pc, #196]	; (80012c0 <MX_GPIO_Init+0x1f8>)
 80011fa:	f000 fce1 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001210:	230b      	movs	r3, #11
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <MX_GPIO_Init+0x1f8>)
 800121c:	f000 fcd0 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001220:	2340      	movs	r3, #64	; 0x40
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <MX_GPIO_Init+0x1fc>)
 8001238:	f000 fcc2 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	481d      	ldr	r0, [pc, #116]	; (80012c4 <MX_GPIO_Init+0x1fc>)
 8001250:	f000 fcb6 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001254:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001266:	230a      	movs	r3, #10
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_GPIO_Init+0x204>)
 8001272:	f000 fca5 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_GPIO_Init+0x204>)
 800128c:	f000 fc98 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001290:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a2:	230b      	movs	r3, #11
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_GPIO_Init+0x1fc>)
 80012ae:	f000 fc87 	bl	8001bc0 <HAL_GPIO_Init>

}
 80012b2:	bf00      	nop
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000

080012d0 <tx_data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tx_data */
void tx_data(void *argument)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b0a6      	sub	sp, #152	; 0x98
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	 rmw_uros_set_custom_transport(
 80012d8:	4b34      	ldr	r3, [pc, #208]	; (80013ac <tx_data+0xdc>)
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <tx_data+0xe0>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <tx_data+0xe4>)
 80012e2:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <tx_data+0xe8>)
 80012e4:	4935      	ldr	r1, [pc, #212]	; (80013bc <tx_data+0xec>)
 80012e6:	2001      	movs	r0, #1
 80012e8:	f006 ffd2 	bl	8008290 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80012ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 ff4f 	bl	8008194 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <tx_data+0xf0>)
 80012f8:	67bb      	str	r3, [r7, #120]	; 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <tx_data+0xf4>)
 80012fc:	67fb      	str	r3, [r7, #124]	; 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <tx_data+0xf8>)
 8001300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <tx_data+0xfc>)
 8001306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800130a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800130e:	4618      	mov	r0, r3
 8001310:	f006 ff4e 	bl	80081b0 <rcutils_set_default_allocator>
 8001314:	4603      	mov	r3, r0
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <tx_data+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001320:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8001324:	482a      	ldr	r0, [pc, #168]	; (80013d0 <tx_data+0x100>)
 8001326:	f00f ffe3 	bl	80112f0 <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 800132a:	463b      	mov	r3, r7
 800132c:	4618      	mov	r0, r3
 800132e:	f006 ff5d 	bl	80081ec <rcutils_get_default_allocator>
 8001332:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001336:	463d      	mov	r5, r7
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001344:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	f006 fe54 	bl	8007ff8 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001350:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001354:	f107 0020 	add.w	r0, r7, #32
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <tx_data+0x104>)
 800135a:	491f      	ldr	r1, [pc, #124]	; (80013d8 <tx_data+0x108>)
 800135c:	f006 fe96 	bl	800808c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001360:	f007 fc2c 	bl	8008bbc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001364:	4602      	mov	r2, r0
 8001366:	f107 0120 	add.w	r1, r7, #32
 800136a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <tx_data+0x10c>)
 8001370:	f006 fece 	bl	8008110 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	673b      	str	r3, [r7, #112]	; 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8001378:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800137c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001380:	2200      	movs	r2, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f006 fe14 	bl	8007fb0 <rcl_publish>
 8001388:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    if (ret != RCL_RET_OK)
 800138c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <tx_data+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001394:	f240 1195 	movw	r1, #405	; 0x195
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <tx_data+0x110>)
 800139a:	f00f ffa9 	bl	80112f0 <iprintf>
	    }

	    msg.data++;
 800139e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a0:	3301      	adds	r3, #1
 80013a2:	673b      	str	r3, [r7, #112]	; 0x70
	    osDelay(10);
 80013a4:	200a      	movs	r0, #10
 80013a6:	f004 f83f 	bl	8005428 <osDelay>
	  {
 80013aa:	e7e5      	b.n	8001378 <tx_data+0xa8>
 80013ac:	08000ec1 	.word	0x08000ec1
 80013b0:	08000e61 	.word	0x08000e61
 80013b4:	08000e41 	.word	0x08000e41
 80013b8:	08000e19 	.word	0x08000e19
 80013bc:	20004718 	.word	0x20004718
 80013c0:	08000b51 	.word	0x08000b51
 80013c4:	08000b95 	.word	0x08000b95
 80013c8:	08000bcd 	.word	0x08000bcd
 80013cc:	08000c39 	.word	0x08000c39
 80013d0:	0801283c 	.word	0x0801283c
 80013d4:	08012864 	.word	0x08012864
 80013d8:	08012868 	.word	0x08012868
 80013dc:	08012874 	.word	0x08012874
 80013e0:	08012888 	.word	0x08012888

080013e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013f6:	f000 fa4f 	bl	8001898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40001000 	.word	0x40001000

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_MspInit+0x4c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	210f      	movs	r1, #15
 800144e:	f06f 0001 	mvn.w	r0, #1
 8001452:	f000 faf9 	bl	8001a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0ae      	sub	sp, #184	; 0xb8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2290      	movs	r2, #144	; 0x90
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f00f fe35 	bl	80110f4 <memset>
  if(huart->Instance==USART3)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a26      	ldr	r2, [pc, #152]	; (8001528 <HAL_UART_MspInit+0xc4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d144      	bne.n	800151e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001498:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800149a:	2300      	movs	r3, #0
 800149c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fa56 	bl	8002954 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014ae:	f7ff ffab 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_UART_MspInit+0xc8>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_UART_MspInit+0xc8>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0xc8>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0xc8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_UART_MspInit+0xc8>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0xc8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014fc:	2307      	movs	r3, #7
 80014fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001502:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001506:	4619      	mov	r1, r3
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_UART_MspInit+0xcc>)
 800150a:	f000 fb59 	bl	8001bc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2105      	movs	r1, #5
 8001512:	2027      	movs	r0, #39	; 0x27
 8001514:	f000 fa98 	bl	8001a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001518:	2027      	movs	r0, #39	; 0x27
 800151a:	f000 fab1 	bl	8001a80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	37b8      	adds	r7, #184	; 0xb8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40004800 	.word	0x40004800
 800152c:	40023800 	.word	0x40023800
 8001530:	40020c00 	.word	0x40020c00

08001534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001544:	4b33      	ldr	r3, [pc, #204]	; (8001614 <HAL_InitTick+0xe0>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a32      	ldr	r2, [pc, #200]	; (8001614 <HAL_InitTick+0xe0>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
 8001550:	4b30      	ldr	r3, [pc, #192]	; (8001614 <HAL_InitTick+0xe0>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f001 f9c2 	bl	80028f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001576:	f001 f993 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 800157a:	6378      	str	r0, [r7, #52]	; 0x34
 800157c:	e004      	b.n	8001588 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800157e:	f001 f98f 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8001582:	4603      	mov	r3, r0
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <HAL_InitTick+0xe4>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9b      	lsrs	r3, r3, #18
 8001592:	3b01      	subs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_InitTick+0xe8>)
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_InitTick+0xec>)
 800159a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_InitTick+0xe8>)
 800159e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_InitTick+0xe8>)
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_InitTick+0xe8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_InitTick+0xe8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_InitTick+0xe8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <HAL_InitTick+0xe8>)
 80015be:	f001 fdf1 	bl	80031a4 <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11b      	bne.n	8001608 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015d0:	4812      	ldr	r0, [pc, #72]	; (800161c <HAL_InitTick+0xe8>)
 80015d2:	f001 fe49 	bl	8003268 <HAL_TIM_Base_Start_IT>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015e4:	2036      	movs	r0, #54	; 0x36
 80015e6:	f000 fa4b 	bl	8001a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d808      	bhi.n	8001602 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	2036      	movs	r0, #54	; 0x36
 80015f6:	f000 fa27 	bl	8001a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_InitTick+0xf0>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e002      	b.n	8001608 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001608:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800160c:	4618      	mov	r0, r3
 800160e:	3738      	adds	r7, #56	; 0x38
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	431bde83 	.word	0x431bde83
 800161c:	200047a4 	.word	0x200047a4
 8001620:	40001000 	.word	0x40001000
 8001624:	20000008 	.word	0x20000008

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <USART3_IRQHandler+0x10>)
 800165a:	f002 fa99 	bl	8003b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20004718 	.word	0x20004718

08001668 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM6_DAC_IRQHandler+0x10>)
 800166e:	f001 fe73 	bl	8003358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200047a4 	.word	0x200047a4

0800167c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return 1;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_kill>:

int _kill(int pid, int sig)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001696:	f00f fc9d 	bl	8010fd4 <__errno>
 800169a:	4603      	mov	r3, r0
 800169c:	2216      	movs	r2, #22
 800169e:	601a      	str	r2, [r3, #0]
  return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_exit>:

void _exit (int status)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ffe7 	bl	800168c <_kill>
  while (1) {}    /* Make sure we hang here */
 80016be:	e7fe      	b.n	80016be <_exit+0x12>

080016c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
  }

  return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e009      	b.n	8001720 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	60ba      	str	r2, [r7, #8]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf1      	blt.n	800170c <_write+0x12>
  }
  return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_close>:

int _close(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175a:	605a      	str	r2, [r3, #4]
  return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f00f fc02 	bl	8010fd4 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20080000 	.word	0x20080000
 80017fc:	00000400 	.word	0x00000400
 8001800:	200047f4 	.word	0x200047f4
 8001804:	2000dca8 	.word	0x2000dca8

08001808 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001832:	490e      	ldr	r1, [pc, #56]	; (800186c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001848:	4c0b      	ldr	r4, [pc, #44]	; (8001878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001856:	f7ff ffd7 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185a:	f00f fc09 	bl	8011070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fb89 	bl	8000f74 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001870:	08013640 	.word	0x08013640
  ldr r2, =_sbss
 8001874:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001878:	2000dca4 	.word	0x2000dca4

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>

0800187e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001882:	2003      	movs	r0, #3
 8001884:	f000 f8d5 	bl	8001a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001888:	200f      	movs	r0, #15
 800188a:	f7ff fe53 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188e:	f7ff fdc1 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	200047f8 	.word	0x200047f8

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200047f8 	.word	0x200047f8

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <__NVIC_SetPriorityGrouping+0x40>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	4313      	orrs	r3, r2
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x40>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	05fa0000 	.word	0x05fa0000

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff4c 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5a:	f7ff ff61 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7ff ffb1 	bl	80019cc <NVIC_EncodePriority>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff80 	bl	8001978 <__NVIC_SetPriority>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff54 	bl	800193c <__NVIC_EnableIRQ>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aaa:	f7ff ff09 	bl	80018c0 <HAL_GetTick>
 8001aae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d008      	beq.n	8001ace <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e052      	b.n	8001b74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0216 	bic.w	r2, r2, #22
 8001adc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d103      	bne.n	8001afe <HAL_DMA_Abort+0x62>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0208 	bic.w	r2, r2, #8
 8001b0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1e:	e013      	b.n	8001b48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b20:	f7ff fece 	bl	80018c0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d90c      	bls.n	8001b48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2220      	movs	r2, #32
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e015      	b.n	8001b74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1e4      	bne.n	8001b20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	223f      	movs	r2, #63	; 0x3f
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d004      	beq.n	8001b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00c      	b.n	8001bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e175      	b.n	8001ecc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 8164 	bne.w	8001ec6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d005      	beq.n	8001c16 <HAL_GPIO_Init+0x56>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d130      	bne.n	8001c78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0201 	and.w	r2, r3, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d017      	beq.n	8001cb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d123      	bne.n	8001d08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80be 	beq.w	8001ec6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <HAL_GPIO_Init+0x324>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a65      	ldr	r2, [pc, #404]	; (8001ee4 <HAL_GPIO_Init+0x324>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <HAL_GPIO_Init+0x324>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d62:	4a61      	ldr	r2, [pc, #388]	; (8001ee8 <HAL_GPIO_Init+0x328>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_GPIO_Init+0x32c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d037      	beq.n	8001dfe <HAL_GPIO_Init+0x23e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a57      	ldr	r2, [pc, #348]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_GPIO_Init+0x23a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a56      	ldr	r2, [pc, #344]	; (8001ef4 <HAL_GPIO_Init+0x334>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d02b      	beq.n	8001df6 <HAL_GPIO_Init+0x236>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a55      	ldr	r2, [pc, #340]	; (8001ef8 <HAL_GPIO_Init+0x338>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d025      	beq.n	8001df2 <HAL_GPIO_Init+0x232>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a54      	ldr	r2, [pc, #336]	; (8001efc <HAL_GPIO_Init+0x33c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <HAL_GPIO_Init+0x22e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a53      	ldr	r2, [pc, #332]	; (8001f00 <HAL_GPIO_Init+0x340>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d019      	beq.n	8001dea <HAL_GPIO_Init+0x22a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_GPIO_Init+0x344>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <HAL_GPIO_Init+0x348>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00d      	beq.n	8001de2 <HAL_GPIO_Init+0x222>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_GPIO_Init+0x34c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x21e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4f      	ldr	r2, [pc, #316]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_GPIO_Init+0x21a>
 8001dd6:	2309      	movs	r3, #9
 8001dd8:	e012      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dda:	230a      	movs	r3, #10
 8001ddc:	e010      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dde:	2308      	movs	r3, #8
 8001de0:	e00e      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00c      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001de6:	2306      	movs	r3, #6
 8001de8:	e00a      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dea:	2305      	movs	r3, #5
 8001dec:	e008      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001df2:	2303      	movs	r3, #3
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f002 0203 	and.w	r2, r2, #3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e10:	4935      	ldr	r1, [pc, #212]	; (8001ee8 <HAL_GPIO_Init+0x328>)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e42:	4a34      	ldr	r2, [pc, #208]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e48:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e96:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_GPIO_Init+0x354>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b0f      	cmp	r3, #15
 8001ed0:	f67f ae86 	bls.w	8001be0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40021400 	.word	0x40021400
 8001f04:	40021800 	.word	0x40021800
 8001f08:	40021c00 	.word	0x40021c00
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40022400 	.word	0x40022400
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e29b      	b.n	800249a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8087 	beq.w	800207e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f70:	4b96      	ldr	r3, [pc, #600]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7c:	4b93      	ldr	r3, [pc, #588]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0x62>
 8001f88:	4b90      	ldr	r3, [pc, #576]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4b8d      	ldr	r3, [pc, #564]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d06c      	beq.n	800207c <HAL_RCC_OscConfig+0x130>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d168      	bne.n	800207c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e275      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7a>
 8001fb8:	4b84      	ldr	r3, [pc, #528]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a83      	ldr	r2, [pc, #524]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0xd8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x9c>
 8001fce:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7e      	ldr	r2, [pc, #504]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7b      	ldr	r2, [pc, #492]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xd8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xc0>
 8001ff2:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a72      	ldr	r2, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xd8>
 800200c:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6e      	ldr	r2, [pc, #440]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6b      	ldr	r2, [pc, #428]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff fc48 	bl	80018c0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fc44 	bl	80018c0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e229      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b61      	ldr	r3, [pc, #388]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xe8>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff fc34 	bl	80018c0 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc30 	bl	80018c0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e215      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b57      	ldr	r3, [pc, #348]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x110>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d069      	beq.n	800215e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x190>
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x17a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1e9      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	493d      	ldr	r1, [pc, #244]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e040      	b.n	800215e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a38      	ldr	r2, [pc, #224]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff fbe6 	bl	80018c0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f8:	f7ff fbe2 	bl	80018c0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1c7      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4929      	ldr	r1, [pc, #164]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a26      	ldr	r2, [pc, #152]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff fbc2 	bl	80018c0 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff fbbe 	bl	80018c0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1a3      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d038      	beq.n	80021dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d019      	beq.n	80021a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7ff fb9f 	bl	80018c0 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002186:	f7ff fb9b 	bl	80018c0 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e180      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 800219a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x23a>
 80021a4:	e01a      	b.n	80021dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_RCC_OscConfig+0x280>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb85 	bl	80018c0 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ba:	f7ff fb81 	bl	80018c0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d903      	bls.n	80021d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e166      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
 80021cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	4b92      	ldr	r3, [pc, #584]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a4 	beq.w	8002332 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ea:	4b8c      	ldr	r3, [pc, #560]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4b89      	ldr	r3, [pc, #548]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a88      	ldr	r2, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b86      	ldr	r3, [pc, #536]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002212:	4b83      	ldr	r3, [pc, #524]	; (8002420 <HAL_RCC_OscConfig+0x4d4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800221e:	4b80      	ldr	r3, [pc, #512]	; (8002420 <HAL_RCC_OscConfig+0x4d4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7f      	ldr	r2, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x4d4>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7ff fb49 	bl	80018c0 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7ff fb45 	bl	80018c0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b64      	cmp	r3, #100	; 0x64
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e12a      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002244:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x4d4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x31a>
 8002258:	4b70      	ldr	r3, [pc, #448]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a6f      	ldr	r2, [pc, #444]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	e02d      	b.n	80022c2 <HAL_RCC_OscConfig+0x376>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x33c>
 800226e:	4b6b      	ldr	r3, [pc, #428]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a6a      	ldr	r2, [pc, #424]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b68      	ldr	r3, [pc, #416]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a67      	ldr	r2, [pc, #412]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	e01c      	b.n	80022c2 <HAL_RCC_OscConfig+0x376>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b05      	cmp	r3, #5
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0x35e>
 8002290:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a61      	ldr	r2, [pc, #388]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0x376>
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a5b      	ldr	r2, [pc, #364]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d015      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7ff faf9 	bl	80018c0 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff faf5 	bl	80018c0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0d8      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ee      	beq.n	80022d2 <HAL_RCC_OscConfig+0x386>
 80022f4:	e014      	b.n	8002320 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7ff fae3 	bl	80018c0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7ff fadf 	bl	80018c0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	; 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0c2      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a3c      	ldr	r2, [pc, #240]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80ae 	beq.w	8002498 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d06d      	beq.n	8002424 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d14b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a31      	ldr	r2, [pc, #196]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff fab0 	bl	80018c0 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff faac 	bl	80018c0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e091      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	3b01      	subs	r3, #1
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	491b      	ldr	r1, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff fa7e 	bl	80018c0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff fa7a 	bl	80018c0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e05f      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x47c>
 80023e6:	e057      	b.n	8002498 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 80023ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa64 	bl	80018c0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fa60 	bl	80018c0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e045      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_RCC_OscConfig+0x4d0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x4b0>
 800241a:	e03d      	b.n	8002498 <HAL_RCC_OscConfig+0x54c>
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_RCC_OscConfig+0x558>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d030      	beq.n	8002494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d129      	bne.n	8002494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d122      	bne.n	8002494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800245a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800245c:	4293      	cmp	r3, r2
 800245e:	d119      	bne.n	8002494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	3b01      	subs	r3, #1
 800246e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d10f      	bne.n	8002494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0d0      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b6a      	ldr	r3, [pc, #424]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d910      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 020f 	bic.w	r2, r3, #15
 80024d6:	4965      	ldr	r1, [pc, #404]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d040      	beq.n	80025cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d115      	bne.n	800258a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e073      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06b      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4936      	ldr	r1, [pc, #216]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259c:	f7ff f990 	bl	80018c0 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff f98c 	bl	80018c0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e053      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d210      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 020f 	bic.w	r2, r3, #15
 80025e2:	4922      	ldr	r1, [pc, #136]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f821 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x1cc>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1d0>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe ff6a 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	080128ec 	.word	0x080128ec
 8002678:	20000004 	.word	0x20000004
 800267c:	20000008 	.word	0x20000008

08002680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002684:	b094      	sub	sp, #80	; 0x50
 8002686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	647b      	str	r3, [r7, #68]	; 0x44
 800268c:	2300      	movs	r3, #0
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002690:	2300      	movs	r3, #0
 8002692:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002698:	4b79      	ldr	r3, [pc, #484]	; (8002880 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x40>
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	f200 80e1 	bhi.w	800286c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x34>
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x3a>
 80026b2:	e0db      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_GetSysClockFreq+0x204>)
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b8:	e0db      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_GetSysClockFreq+0x204>)
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026be:	e0d8      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c0:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026ca:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <HAL_RCC_GetSysClockFreq+0x200>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d063      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	2200      	movs	r2, #0
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
 80026e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
 80026ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026f2:	4622      	mov	r2, r4
 80026f4:	462b      	mov	r3, r5
 80026f6:	f04f 0000 	mov.w	r0, #0
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	0159      	lsls	r1, r3, #5
 8002700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002704:	0150      	lsls	r0, r2, #5
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4621      	mov	r1, r4
 800270c:	1a51      	subs	r1, r2, r1
 800270e:	6139      	str	r1, [r7, #16]
 8002710:	4629      	mov	r1, r5
 8002712:	eb63 0301 	sbc.w	r3, r3, r1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002724:	4659      	mov	r1, fp
 8002726:	018b      	lsls	r3, r1, #6
 8002728:	4651      	mov	r1, sl
 800272a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800272e:	4651      	mov	r1, sl
 8002730:	018a      	lsls	r2, r1, #6
 8002732:	4651      	mov	r1, sl
 8002734:	ebb2 0801 	subs.w	r8, r2, r1
 8002738:	4659      	mov	r1, fp
 800273a:	eb63 0901 	sbc.w	r9, r3, r1
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800274a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800274e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002752:	4690      	mov	r8, r2
 8002754:	4699      	mov	r9, r3
 8002756:	4623      	mov	r3, r4
 8002758:	eb18 0303 	adds.w	r3, r8, r3
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	462b      	mov	r3, r5
 8002760:	eb49 0303 	adc.w	r3, r9, r3
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002772:	4629      	mov	r1, r5
 8002774:	028b      	lsls	r3, r1, #10
 8002776:	4621      	mov	r1, r4
 8002778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800277c:	4621      	mov	r1, r4
 800277e:	028a      	lsls	r2, r1, #10
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002786:	2200      	movs	r2, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
 800278a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800278c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002790:	f7fd fe08 	bl	80003a4 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4613      	mov	r3, r2
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800279c:	e058      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	2200      	movs	r2, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	4611      	mov	r1, r2
 80027aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027ae:	623b      	str	r3, [r7, #32]
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
 80027b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027b8:	4642      	mov	r2, r8
 80027ba:	464b      	mov	r3, r9
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	0159      	lsls	r1, r3, #5
 80027c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ca:	0150      	lsls	r0, r2, #5
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4641      	mov	r1, r8
 80027d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027d6:	4649      	mov	r1, r9
 80027d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027f0:	ebb2 040a 	subs.w	r4, r2, sl
 80027f4:	eb63 050b 	sbc.w	r5, r3, fp
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	00eb      	lsls	r3, r5, #3
 8002802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002806:	00e2      	lsls	r2, r4, #3
 8002808:	4614      	mov	r4, r2
 800280a:	461d      	mov	r5, r3
 800280c:	4643      	mov	r3, r8
 800280e:	18e3      	adds	r3, r4, r3
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	464b      	mov	r3, r9
 8002814:	eb45 0303 	adc.w	r3, r5, r3
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002826:	4629      	mov	r1, r5
 8002828:	028b      	lsls	r3, r1, #10
 800282a:	4621      	mov	r1, r4
 800282c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002830:	4621      	mov	r1, r4
 8002832:	028a      	lsls	r2, r1, #10
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800283a:	2200      	movs	r2, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	61fa      	str	r2, [r7, #28]
 8002840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002844:	f7fd fdae 	bl	80003a4 <__aeabi_uldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4613      	mov	r3, r2
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_GetSysClockFreq+0x200>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetSysClockFreq+0x204>)
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002874:	4618      	mov	r0, r3
 8002876:	3750      	adds	r7, #80	; 0x50
 8002878:	46bd      	mov	sp, r7
 800287a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	00f42400 	.word	0x00f42400

08002888 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_RCC_GetHCLKFreq+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a4:	f7ff fff0 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0a9b      	lsrs	r3, r3, #10
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	080128fc 	.word	0x080128fc

080028c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028cc:	f7ff ffdc 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0b5b      	lsrs	r3, r3, #13
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	080128fc 	.word	0x080128fc

080028f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	220f      	movs	r2, #15
 80028fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_RCC_GetClockConfig+0x5c>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0203 	and.w	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCC_GetClockConfig+0x5c>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_GetClockConfig+0x5c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_GetClockConfig+0x5c>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_RCC_GetClockConfig+0x60>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 020f 	and.w	r2, r3, #15
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	601a      	str	r2, [r3, #0]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	40023c00 	.word	0x40023c00

08002954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d012      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800297c:	4b69      	ldr	r3, [pc, #420]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a68      	ldr	r2, [pc, #416]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002982:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002986:	6093      	str	r3, [r2, #8]
 8002988:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	4964      	ldr	r1, [pc, #400]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d017      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	4959      	ldr	r1, [pc, #356]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029cc:	d101      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029ea:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	494a      	ldr	r1, [pc, #296]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a08:	d101      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 808b 	beq.w	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a39      	ldr	r2, [pc, #228]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6413      	str	r3, [r2, #64]	; 0x40
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a50:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe ff30 	bl	80018c0 <HAL_GetTick>
 8002a60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe ff2c 	bl	80018c0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e38f      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d035      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d02e      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ac2:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d114      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fef4 	bl	80018c0 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fef0 	bl	80018c0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e351      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ee      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b0a:	d111      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	4901      	ldr	r1, [pc, #4]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	0ffffcff 	.word	0x0ffffcff
 8002b30:	4bac      	ldr	r3, [pc, #688]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4aab      	ldr	r2, [pc, #684]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b3a:	6093      	str	r3, [r2, #8]
 8002b3c:	4ba9      	ldr	r3, [pc, #676]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	49a6      	ldr	r1, [pc, #664]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b5a:	4ba2      	ldr	r3, [pc, #648]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b60:	4aa0      	ldr	r2, [pc, #640]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b6a:	4b9e      	ldr	r3, [pc, #632]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	499b      	ldr	r1, [pc, #620]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b88:	4b96      	ldr	r3, [pc, #600]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b96:	4993      	ldr	r1, [pc, #588]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002baa:	4b8e      	ldr	r3, [pc, #568]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb8:	498a      	ldr	r1, [pc, #552]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bcc:	4b85      	ldr	r3, [pc, #532]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	4982      	ldr	r1, [pc, #520]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bee:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4979      	ldr	r1, [pc, #484]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c10:	4b74      	ldr	r3, [pc, #464]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f023 0203 	bic.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4971      	ldr	r1, [pc, #452]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c32:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f023 020c 	bic.w	r2, r3, #12
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	4968      	ldr	r1, [pc, #416]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c54:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4960      	ldr	r1, [pc, #384]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c76:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	4957      	ldr	r1, [pc, #348]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c98:	4b52      	ldr	r3, [pc, #328]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	494f      	ldr	r1, [pc, #316]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	4946      	ldr	r1, [pc, #280]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	493e      	ldr	r1, [pc, #248]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	4935      	ldr	r1, [pc, #212]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d2e:	492d      	ldr	r1, [pc, #180]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d011      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d50:	4924      	ldr	r1, [pc, #144]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d60:	d101      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d90:	4914      	ldr	r1, [pc, #80]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db4:	490b      	ldr	r1, [pc, #44]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00f      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd8:	4902      	ldr	r1, [pc, #8]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002de0:	e002      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002df4:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	4986      	ldr	r1, [pc, #536]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e18:	4b81      	ldr	r3, [pc, #516]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e28:	497d      	ldr	r1, [pc, #500]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d006      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80d6 	beq.w	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e44:	4b76      	ldr	r3, [pc, #472]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a75      	ldr	r2, [pc, #468]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fe fd36 	bl	80018c0 <HAL_GetTick>
 8002e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e58:	f7fe fd32 	bl	80018c0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e195      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d021      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11d      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9e:	0e1b      	lsrs	r3, r3, #24
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	019a      	lsls	r2, r3, #6
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	4958      	ldr	r1, [pc, #352]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d02e      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef0:	d129      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ef2:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f00:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	0f1b      	lsrs	r3, r3, #28
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	019a      	lsls	r2, r3, #6
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	061b      	lsls	r3, r3, #24
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	071b      	lsls	r3, r3, #28
 8002f26:	493e      	ldr	r1, [pc, #248]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f2e:	4b3c      	ldr	r3, [pc, #240]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f34:	f023 021f 	bic.w	r2, r3, #31
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	4938      	ldr	r1, [pc, #224]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01d      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f52:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f58:	0e1b      	lsrs	r3, r3, #24
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f66:	0f1b      	lsrs	r3, r3, #28
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	019a      	lsls	r2, r3, #6
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	4926      	ldr	r1, [pc, #152]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d011      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	019a      	lsls	r2, r3, #6
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	491a      	ldr	r1, [pc, #104]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fca:	f7fe fc79 	bl	80018c0 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fd2:	f7fe fc75 	bl	80018c0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0d8      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	f040 80ce 	bne.w	8003194 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a08      	ldr	r2, [pc, #32]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003004:	f7fe fc5c 	bl	80018c0 <HAL_GetTick>
 8003008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800300a:	e00b      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800300c:	f7fe fc58 	bl	80018c0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d904      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0bb      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003024:	4b5e      	ldr	r3, [pc, #376]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800302c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003030:	d0ec      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02e      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d12a      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800305a:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003068:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	0f1b      	lsrs	r3, r3, #28
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	019a      	lsls	r2, r3, #6
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	071b      	lsls	r3, r3, #28
 800308e:	4944      	ldr	r1, [pc, #272]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003096:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	3b01      	subs	r3, #1
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	493d      	ldr	r1, [pc, #244]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d022      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c4:	d11d      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030c6:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	0e1b      	lsrs	r3, r3, #24
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030d4:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	0f1b      	lsrs	r3, r3, #28
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	019a      	lsls	r2, r3, #6
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	071b      	lsls	r3, r3, #28
 80030fa:	4929      	ldr	r1, [pc, #164]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d028      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	0e1b      	lsrs	r3, r3, #24
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	019a      	lsls	r2, r3, #6
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	071b      	lsls	r3, r3, #28
 8003142:	4917      	ldr	r1, [pc, #92]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4911      	ldr	r1, [pc, #68]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fe fba8 	bl	80018c0 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003174:	f7fe fba4 	bl	80018c0 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e007      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003192:	d1ef      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e049      	b.n	800324a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f841 	bl	8003252 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f000 fa00 	bl	80035e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e054      	b.n	800332a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a26      	ldr	r2, [pc, #152]	; (8003338 <HAL_TIM_Base_Start_IT+0xd0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d01d      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <HAL_TIM_Base_Start_IT+0xd4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_TIM_Base_Start_IT+0xd8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <HAL_TIM_Base_Start_IT+0xdc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_TIM_Base_Start_IT+0xe0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_TIM_Base_Start_IT+0xe4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <HAL_TIM_Base_Start_IT+0xe8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d115      	bne.n	8003314 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_TIM_Base_Start_IT+0xec>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d015      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0xbe>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d011      	beq.n	8003326 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	e008      	b.n	8003326 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e000      	b.n	8003328 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40010400 	.word	0x40010400
 800334c:	40014000 	.word	0x40014000
 8003350:	40001800 	.word	0x40001800
 8003354:	00010007 	.word	0x00010007

08003358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b02      	cmp	r3, #2
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0202 	mvn.w	r2, #2
 8003384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f905 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8f7 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f908 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0204 	mvn.w	r2, #4
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8db 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8cd 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8de 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b08      	cmp	r3, #8
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b08      	cmp	r3, #8
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0208 	mvn.w	r2, #8
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8b1 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8a3 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8b4 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b10      	cmp	r3, #16
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b10      	cmp	r3, #16
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0210 	mvn.w	r2, #16
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2208      	movs	r2, #8
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f887 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f879 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f88a 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0201 	mvn.w	r2, #1
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd ff84 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d107      	bne.n	8003508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f91a 	bl	800373c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	d10e      	bne.n	8003536 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	d107      	bne.n	8003536 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800352e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f90d 	bl	8003750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d10e      	bne.n	8003562 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d107      	bne.n	8003562 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800355a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f838 	bl	80035d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b20      	cmp	r3, #32
 800356e:	d10e      	bne.n	800358e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d107      	bne.n	800358e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0220 	mvn.w	r2, #32
 8003586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8cd 	bl	8003728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a40      	ldr	r2, [pc, #256]	; (80036fc <TIM_Base_SetConfig+0x114>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d00f      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3d      	ldr	r2, [pc, #244]	; (8003700 <TIM_Base_SetConfig+0x118>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3c      	ldr	r2, [pc, #240]	; (8003704 <TIM_Base_SetConfig+0x11c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3b      	ldr	r2, [pc, #236]	; (8003708 <TIM_Base_SetConfig+0x120>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3a      	ldr	r2, [pc, #232]	; (800370c <TIM_Base_SetConfig+0x124>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <TIM_Base_SetConfig+0x114>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02b      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d027      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <TIM_Base_SetConfig+0x118>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d023      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <TIM_Base_SetConfig+0x11c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01f      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <TIM_Base_SetConfig+0x120>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01b      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a29      	ldr	r2, [pc, #164]	; (800370c <TIM_Base_SetConfig+0x124>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d017      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <TIM_Base_SetConfig+0x128>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <TIM_Base_SetConfig+0x12c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00f      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <TIM_Base_SetConfig+0x130>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <TIM_Base_SetConfig+0x134>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <TIM_Base_SetConfig+0x138>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a23      	ldr	r2, [pc, #140]	; (8003724 <TIM_Base_SetConfig+0x13c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d108      	bne.n	80036ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <TIM_Base_SetConfig+0x114>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0xf8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <TIM_Base_SetConfig+0x124>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	615a      	str	r2, [r3, #20]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40010400 	.word	0x40010400
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800
 800371c:	40001800 	.word	0x40001800
 8003720:	40001c00 	.word	0x40001c00
 8003724:	40002000 	.word	0x40002000

08003728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e040      	b.n	80037f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fe6c 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fd10 	bl	80041c8 <UART_SetConfig>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e022      	b.n	80037f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 ff68 	bl	8004690 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 ffef 	bl	80047d4 <UART_CheckIdleState>
 80037f6:	4603      	mov	r3, r0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003800:	b480      	push	{r7}
 8003802:	b08b      	sub	sp, #44	; 0x2c
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003812:	2b20      	cmp	r3, #32
 8003814:	d147      	bne.n	80038a6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_UART_Transmit_IT+0x22>
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e040      	b.n	80038a8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	; 0x21
 800384e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d107      	bne.n	800386a <HAL_UART_Transmit_IT+0x6a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <HAL_UART_Transmit_IT+0xb4>)
 8003866:	66da      	str	r2, [r3, #108]	; 0x6c
 8003868:	e002      	b.n	8003870 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <HAL_UART_Transmit_IT+0xb8>)
 800386e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	613b      	str	r3, [r7, #16]
   return(result);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	69f9      	ldr	r1, [r7, #28]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	61bb      	str	r3, [r7, #24]
   return(result);
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e6      	bne.n	8003870 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	372c      	adds	r7, #44	; 0x2c
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	08004e1b 	.word	0x08004e1b
 80038b8:	08004d65 	.word	0x08004d65

080038bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d132      	bne.n	800393a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_UART_Receive_IT+0x24>
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e02b      	b.n	800393c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d018      	beq.n	800392a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	613b      	str	r3, [r7, #16]
   return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	69f9      	ldr	r1, [r7, #28]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	61bb      	str	r3, [r7, #24]
   return(result);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e6      	bne.n	80038f8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	461a      	mov	r2, r3
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f001 f863 	bl	80049fc <UART_Start_Receive_IT>
 8003936:	4603      	mov	r3, r0
 8003938:	e000      	b.n	800393c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0a2      	sub	sp, #136	; 0x88
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800394c:	2301      	movs	r3, #1
 800394e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003962:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003976:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800397a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e4      	bne.n	8003952 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3308      	adds	r3, #8
 800398e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80039a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80039aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d118      	bne.n	80039f6 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44
 80039e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e6      	bne.n	80039c4 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00f      	beq.n	8003a1e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d104      	bne.n	8003a16 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	4a5d      	ldr	r2, [pc, #372]	; (8003b88 <HAL_UART_Abort_IT+0x244>)
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50
 8003a14:	e003      	b.n	8003a1e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00f      	beq.n	8003a46 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b40      	cmp	r3, #64	; 0x40
 8003a32:	d104      	bne.n	8003a3e <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	4a54      	ldr	r2, [pc, #336]	; (8003b8c <HAL_UART_Abort_IT+0x248>)
 8003a3a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a3c:	e003      	b.n	8003a46 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a42:	2200      	movs	r2, #0
 8003a44:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d12d      	bne.n	8003ab0 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	623b      	str	r3, [r7, #32]
   return(result);
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6a:	677b      	str	r3, [r7, #116]	; 0x74
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a74:	633a      	str	r2, [r7, #48]	; 0x30
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00f      	beq.n	8003ab0 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe f871 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	651a      	str	r2, [r3, #80]	; 0x50
 8003aa8:	e002      	b.n	8003ab0 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	d130      	bne.n	8003b20 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ade:	61fa      	str	r2, [r7, #28]
 8003ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	617b      	str	r3, [r7, #20]
   return(result);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d012      	beq.n	8003b20 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe f83c 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	2200      	movs	r2, #0
 8003b10:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b18:	e002      	b.n	8003b20 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8003b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d12a      	bne.n	8003b7e <HAL_UART_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	669a      	str	r2, [r3, #104]	; 0x68
    huart->TxISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	220f      	movs	r2, #15
 8003b52:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0208 	orr.w	r2, r2, #8
 8003b62:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fb05 	bl	8004188 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3788      	adds	r7, #136	; 0x88
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	08004c7d 	.word	0x08004c7d
 8003b8c:	08004ce9 	.word	0x08004ce9

08003b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b0ba      	sub	sp, #232	; 0xe8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bba:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d115      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00f      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d009      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 82ac 	beq.w	8004146 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
      }
      return;
 8003bf6:	e2a6      	b.n	8004146 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8117 	beq.w	8003e30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_UART_IRQHandler+0x298>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 810a 	beq.w	8003e30 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d011      	beq.n	8003c4c <HAL_UART_IRQHandler+0xbc>
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d011      	beq.n	8003c7c <HAL_UART_IRQHandler+0xec>
 8003c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d011      	beq.n	8003cac <HAL_UART_IRQHandler+0x11c>
 8003c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d017      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cde:	f043 0208 	orr.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_UART_IRQHandler+0x18a>
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8212 	beq.w	800414a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d005      	beq.n	8003d72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d04f      	beq.n	8003e12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 ff08 	bl	8004b88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d141      	bne.n	8003e0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003db2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1d9      	bne.n	8003d86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d013      	beq.n	8003e02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <HAL_UART_IRQHandler+0x29c>)
 8003de0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd fec8 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d017      	beq.n	8003e22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	e00f      	b.n	8003e22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9b6 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e00b      	b.n	8003e22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9b2 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e007      	b.n	8003e22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9ae 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e20:	e193      	b.n	800414a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e22:	bf00      	nop
    return;
 8003e24:	e191      	b.n	800414a <HAL_UART_IRQHandler+0x5ba>
 8003e26:	bf00      	nop
 8003e28:	04000120 	.word	0x04000120
 8003e2c:	08004c51 	.word	0x08004c51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 814c 	bne.w	80040d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8145 	beq.w	80040d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 813e 	beq.w	80040d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	f040 80b6 	bne.w	8003fda <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8165 	beq.w	800414e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	f080 815d 	bcs.w	800414e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea8:	f000 8086 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1da      	bne.n	8003eac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e1      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e3      	bne.n	8003f32 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f88:	f023 0310 	bic.w	r3, r3, #16
 8003f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e4      	bne.n	8003f78 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fd72 	bl	8001a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8e2 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fd8:	e0b9      	b.n	800414e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80ab 	beq.w	8004152 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80a6 	beq.w	8004152 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800401a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004028:	647b      	str	r3, [r7, #68]	; 0x44
 800402a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800402e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e4      	bne.n	8004006 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	623b      	str	r3, [r7, #32]
   return(result);
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004060:	633a      	str	r2, [r7, #48]	; 0x30
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e3      	bne.n	800403c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	60fb      	str	r3, [r7, #12]
   return(result);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f023 0310 	bic.w	r3, r3, #16
 800409c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	69b9      	ldr	r1, [r7, #24]
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	617b      	str	r3, [r7, #20]
   return(result);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e4      	bne.n	8004088 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f866 	bl	800419c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040d0:	e03f      	b.n	8004152 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00e      	beq.n	80040fc <HAL_UART_IRQHandler+0x56c>
 80040de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f85d 	bl	80041b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040fa:	e02d      	b.n	8004158 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01c      	beq.n	8004156 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
    }
    return;
 8004124:	e017      	b.n	8004156 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d012      	beq.n	8004158 <HAL_UART_IRQHandler+0x5c8>
 8004132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fecb 	bl	8004eda <UART_EndTransmit_IT>
    return;
 8004144:	e008      	b.n	8004158 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004146:	bf00      	nop
 8004148:	e006      	b.n	8004158 <HAL_UART_IRQHandler+0x5c8>
    return;
 800414a:	bf00      	nop
 800414c:	e004      	b.n	8004158 <HAL_UART_IRQHandler+0x5c8>
      return;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004156:	bf00      	nop
  }

}
 8004158:	37e8      	adds	r7, #232	; 0xe8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop

08004160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4ba6      	ldr	r3, [pc, #664]	; (800448c <UART_SetConfig+0x2c4>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6979      	ldr	r1, [r7, #20]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a94      	ldr	r2, [pc, #592]	; (8004490 <UART_SetConfig+0x2c8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d120      	bne.n	8004286 <UART_SetConfig+0xbe>
 8004244:	4b93      	ldr	r3, [pc, #588]	; (8004494 <UART_SetConfig+0x2cc>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b03      	cmp	r3, #3
 8004250:	d816      	bhi.n	8004280 <UART_SetConfig+0xb8>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x90>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004269 	.word	0x08004269
 800425c:	08004275 	.word	0x08004275
 8004260:	0800426f 	.word	0x0800426f
 8004264:	0800427b 	.word	0x0800427b
 8004268:	2301      	movs	r3, #1
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e150      	b.n	8004510 <UART_SetConfig+0x348>
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e14d      	b.n	8004510 <UART_SetConfig+0x348>
 8004274:	2304      	movs	r3, #4
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e14a      	b.n	8004510 <UART_SetConfig+0x348>
 800427a:	2308      	movs	r3, #8
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e147      	b.n	8004510 <UART_SetConfig+0x348>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e144      	b.n	8004510 <UART_SetConfig+0x348>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a83      	ldr	r2, [pc, #524]	; (8004498 <UART_SetConfig+0x2d0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d132      	bne.n	80042f6 <UART_SetConfig+0x12e>
 8004290:	4b80      	ldr	r3, [pc, #512]	; (8004494 <UART_SetConfig+0x2cc>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b0c      	cmp	r3, #12
 800429c:	d828      	bhi.n	80042f0 <UART_SetConfig+0x128>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <UART_SetConfig+0xdc>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080042f1 	.word	0x080042f1
 80042ac:	080042f1 	.word	0x080042f1
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	080042e5 	.word	0x080042e5
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	080042f1 	.word	0x080042f1
 80042c4:	080042df 	.word	0x080042df
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f1 	.word	0x080042f1
 80042d4:	080042eb 	.word	0x080042eb
 80042d8:	2300      	movs	r3, #0
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e118      	b.n	8004510 <UART_SetConfig+0x348>
 80042de:	2302      	movs	r3, #2
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e115      	b.n	8004510 <UART_SetConfig+0x348>
 80042e4:	2304      	movs	r3, #4
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e112      	b.n	8004510 <UART_SetConfig+0x348>
 80042ea:	2308      	movs	r3, #8
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e10f      	b.n	8004510 <UART_SetConfig+0x348>
 80042f0:	2310      	movs	r3, #16
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e10c      	b.n	8004510 <UART_SetConfig+0x348>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a68      	ldr	r2, [pc, #416]	; (800449c <UART_SetConfig+0x2d4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d120      	bne.n	8004342 <UART_SetConfig+0x17a>
 8004300:	4b64      	ldr	r3, [pc, #400]	; (8004494 <UART_SetConfig+0x2cc>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800430a:	2b30      	cmp	r3, #48	; 0x30
 800430c:	d013      	beq.n	8004336 <UART_SetConfig+0x16e>
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d814      	bhi.n	800433c <UART_SetConfig+0x174>
 8004312:	2b20      	cmp	r3, #32
 8004314:	d009      	beq.n	800432a <UART_SetConfig+0x162>
 8004316:	2b20      	cmp	r3, #32
 8004318:	d810      	bhi.n	800433c <UART_SetConfig+0x174>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <UART_SetConfig+0x15c>
 800431e:	2b10      	cmp	r3, #16
 8004320:	d006      	beq.n	8004330 <UART_SetConfig+0x168>
 8004322:	e00b      	b.n	800433c <UART_SetConfig+0x174>
 8004324:	2300      	movs	r3, #0
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e0f2      	b.n	8004510 <UART_SetConfig+0x348>
 800432a:	2302      	movs	r3, #2
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e0ef      	b.n	8004510 <UART_SetConfig+0x348>
 8004330:	2304      	movs	r3, #4
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e0ec      	b.n	8004510 <UART_SetConfig+0x348>
 8004336:	2308      	movs	r3, #8
 8004338:	77fb      	strb	r3, [r7, #31]
 800433a:	e0e9      	b.n	8004510 <UART_SetConfig+0x348>
 800433c:	2310      	movs	r3, #16
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e0e6      	b.n	8004510 <UART_SetConfig+0x348>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a56      	ldr	r2, [pc, #344]	; (80044a0 <UART_SetConfig+0x2d8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d120      	bne.n	800438e <UART_SetConfig+0x1c6>
 800434c:	4b51      	ldr	r3, [pc, #324]	; (8004494 <UART_SetConfig+0x2cc>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004356:	2bc0      	cmp	r3, #192	; 0xc0
 8004358:	d013      	beq.n	8004382 <UART_SetConfig+0x1ba>
 800435a:	2bc0      	cmp	r3, #192	; 0xc0
 800435c:	d814      	bhi.n	8004388 <UART_SetConfig+0x1c0>
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d009      	beq.n	8004376 <UART_SetConfig+0x1ae>
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d810      	bhi.n	8004388 <UART_SetConfig+0x1c0>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <UART_SetConfig+0x1a8>
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d006      	beq.n	800437c <UART_SetConfig+0x1b4>
 800436e:	e00b      	b.n	8004388 <UART_SetConfig+0x1c0>
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e0cc      	b.n	8004510 <UART_SetConfig+0x348>
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0c9      	b.n	8004510 <UART_SetConfig+0x348>
 800437c:	2304      	movs	r3, #4
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0c6      	b.n	8004510 <UART_SetConfig+0x348>
 8004382:	2308      	movs	r3, #8
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e0c3      	b.n	8004510 <UART_SetConfig+0x348>
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e0c0      	b.n	8004510 <UART_SetConfig+0x348>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a44      	ldr	r2, [pc, #272]	; (80044a4 <UART_SetConfig+0x2dc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d125      	bne.n	80043e4 <UART_SetConfig+0x21c>
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <UART_SetConfig+0x2cc>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a6:	d017      	beq.n	80043d8 <UART_SetConfig+0x210>
 80043a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ac:	d817      	bhi.n	80043de <UART_SetConfig+0x216>
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b2:	d00b      	beq.n	80043cc <UART_SetConfig+0x204>
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d811      	bhi.n	80043de <UART_SetConfig+0x216>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <UART_SetConfig+0x1fe>
 80043be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c2:	d006      	beq.n	80043d2 <UART_SetConfig+0x20a>
 80043c4:	e00b      	b.n	80043de <UART_SetConfig+0x216>
 80043c6:	2300      	movs	r3, #0
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e0a1      	b.n	8004510 <UART_SetConfig+0x348>
 80043cc:	2302      	movs	r3, #2
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e09e      	b.n	8004510 <UART_SetConfig+0x348>
 80043d2:	2304      	movs	r3, #4
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e09b      	b.n	8004510 <UART_SetConfig+0x348>
 80043d8:	2308      	movs	r3, #8
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e098      	b.n	8004510 <UART_SetConfig+0x348>
 80043de:	2310      	movs	r3, #16
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e095      	b.n	8004510 <UART_SetConfig+0x348>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <UART_SetConfig+0x2e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d125      	bne.n	800443a <UART_SetConfig+0x272>
 80043ee:	4b29      	ldr	r3, [pc, #164]	; (8004494 <UART_SetConfig+0x2cc>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043fc:	d017      	beq.n	800442e <UART_SetConfig+0x266>
 80043fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004402:	d817      	bhi.n	8004434 <UART_SetConfig+0x26c>
 8004404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004408:	d00b      	beq.n	8004422 <UART_SetConfig+0x25a>
 800440a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440e:	d811      	bhi.n	8004434 <UART_SetConfig+0x26c>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <UART_SetConfig+0x254>
 8004414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004418:	d006      	beq.n	8004428 <UART_SetConfig+0x260>
 800441a:	e00b      	b.n	8004434 <UART_SetConfig+0x26c>
 800441c:	2301      	movs	r3, #1
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e076      	b.n	8004510 <UART_SetConfig+0x348>
 8004422:	2302      	movs	r3, #2
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e073      	b.n	8004510 <UART_SetConfig+0x348>
 8004428:	2304      	movs	r3, #4
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e070      	b.n	8004510 <UART_SetConfig+0x348>
 800442e:	2308      	movs	r3, #8
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e06d      	b.n	8004510 <UART_SetConfig+0x348>
 8004434:	2310      	movs	r3, #16
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e06a      	b.n	8004510 <UART_SetConfig+0x348>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <UART_SetConfig+0x2e4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d138      	bne.n	80044b6 <UART_SetConfig+0x2ee>
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <UART_SetConfig+0x2cc>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800444e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004452:	d017      	beq.n	8004484 <UART_SetConfig+0x2bc>
 8004454:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004458:	d82a      	bhi.n	80044b0 <UART_SetConfig+0x2e8>
 800445a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445e:	d00b      	beq.n	8004478 <UART_SetConfig+0x2b0>
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004464:	d824      	bhi.n	80044b0 <UART_SetConfig+0x2e8>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <UART_SetConfig+0x2aa>
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446e:	d006      	beq.n	800447e <UART_SetConfig+0x2b6>
 8004470:	e01e      	b.n	80044b0 <UART_SetConfig+0x2e8>
 8004472:	2300      	movs	r3, #0
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e04b      	b.n	8004510 <UART_SetConfig+0x348>
 8004478:	2302      	movs	r3, #2
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e048      	b.n	8004510 <UART_SetConfig+0x348>
 800447e:	2304      	movs	r3, #4
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e045      	b.n	8004510 <UART_SetConfig+0x348>
 8004484:	2308      	movs	r3, #8
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e042      	b.n	8004510 <UART_SetConfig+0x348>
 800448a:	bf00      	nop
 800448c:	efff69f3 	.word	0xefff69f3
 8004490:	40011000 	.word	0x40011000
 8004494:	40023800 	.word	0x40023800
 8004498:	40004400 	.word	0x40004400
 800449c:	40004800 	.word	0x40004800
 80044a0:	40004c00 	.word	0x40004c00
 80044a4:	40005000 	.word	0x40005000
 80044a8:	40011400 	.word	0x40011400
 80044ac:	40007800 	.word	0x40007800
 80044b0:	2310      	movs	r3, #16
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e02c      	b.n	8004510 <UART_SetConfig+0x348>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a72      	ldr	r2, [pc, #456]	; (8004684 <UART_SetConfig+0x4bc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d125      	bne.n	800450c <UART_SetConfig+0x344>
 80044c0:	4b71      	ldr	r3, [pc, #452]	; (8004688 <UART_SetConfig+0x4c0>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044ce:	d017      	beq.n	8004500 <UART_SetConfig+0x338>
 80044d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044d4:	d817      	bhi.n	8004506 <UART_SetConfig+0x33e>
 80044d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044da:	d00b      	beq.n	80044f4 <UART_SetConfig+0x32c>
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e0:	d811      	bhi.n	8004506 <UART_SetConfig+0x33e>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <UART_SetConfig+0x326>
 80044e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ea:	d006      	beq.n	80044fa <UART_SetConfig+0x332>
 80044ec:	e00b      	b.n	8004506 <UART_SetConfig+0x33e>
 80044ee:	2300      	movs	r3, #0
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e00d      	b.n	8004510 <UART_SetConfig+0x348>
 80044f4:	2302      	movs	r3, #2
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e00a      	b.n	8004510 <UART_SetConfig+0x348>
 80044fa:	2304      	movs	r3, #4
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e007      	b.n	8004510 <UART_SetConfig+0x348>
 8004500:	2308      	movs	r3, #8
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e004      	b.n	8004510 <UART_SetConfig+0x348>
 8004506:	2310      	movs	r3, #16
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e001      	b.n	8004510 <UART_SetConfig+0x348>
 800450c:	2310      	movs	r3, #16
 800450e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004518:	d15b      	bne.n	80045d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800451a:	7ffb      	ldrb	r3, [r7, #31]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d828      	bhi.n	8004572 <UART_SetConfig+0x3aa>
 8004520:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <UART_SetConfig+0x360>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004555 	.word	0x08004555
 8004530:	0800455d 	.word	0x0800455d
 8004534:	08004573 	.word	0x08004573
 8004538:	08004563 	.word	0x08004563
 800453c:	08004573 	.word	0x08004573
 8004540:	08004573 	.word	0x08004573
 8004544:	08004573 	.word	0x08004573
 8004548:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800454c:	f7fe f9a8 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8004550:	61b8      	str	r0, [r7, #24]
        break;
 8004552:	e013      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7fe f9b8 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 8004558:	61b8      	str	r0, [r7, #24]
        break;
 800455a:	e00f      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800455c:	4b4b      	ldr	r3, [pc, #300]	; (800468c <UART_SetConfig+0x4c4>)
 800455e:	61bb      	str	r3, [r7, #24]
        break;
 8004560:	e00c      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004562:	f7fe f88d 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 8004566:	61b8      	str	r0, [r7, #24]
        break;
 8004568:	e008      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	61bb      	str	r3, [r7, #24]
        break;
 8004570:	e004      	b.n	800457c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	77bb      	strb	r3, [r7, #30]
        break;
 800457a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d074      	beq.n	800466c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	005a      	lsls	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	441a      	add	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	d916      	bls.n	80045cc <UART_SetConfig+0x404>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a4:	d212      	bcs.n	80045cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f023 030f 	bic.w	r3, r3, #15
 80045ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	89fb      	ldrh	r3, [r7, #14]
 80045be:	4313      	orrs	r3, r2
 80045c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	89fa      	ldrh	r2, [r7, #14]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	e04f      	b.n	800466c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	77bb      	strb	r3, [r7, #30]
 80045d0:	e04c      	b.n	800466c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d2:	7ffb      	ldrb	r3, [r7, #31]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d828      	bhi.n	800462a <UART_SetConfig+0x462>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <UART_SetConfig+0x418>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004615 	.word	0x08004615
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800462b 	.word	0x0800462b
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	08004623 	.word	0x08004623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7fe f94c 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8004608:	61b8      	str	r0, [r7, #24]
        break;
 800460a:	e013      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7fe f95c 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 8004610:	61b8      	str	r0, [r7, #24]
        break;
 8004612:	e00f      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <UART_SetConfig+0x4c4>)
 8004616:	61bb      	str	r3, [r7, #24]
        break;
 8004618:	e00c      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7fe f831 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800461e:	61b8      	str	r0, [r7, #24]
        break;
 8004620:	e008      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004626:	61bb      	str	r3, [r7, #24]
        break;
 8004628:	e004      	b.n	8004634 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	77bb      	strb	r3, [r7, #30]
        break;
 8004632:	bf00      	nop
    }

    if (pclk != 0U)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	085a      	lsrs	r2, r3, #1
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	441a      	add	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b0f      	cmp	r3, #15
 8004652:	d909      	bls.n	8004668 <UART_SetConfig+0x4a0>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465a:	d205      	bcs.n	8004668 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e001      	b.n	800466c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004678:	7fbb      	ldrb	r3, [r7, #30]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40007c00 	.word	0x40007c00
 8004688:	40023800 	.word	0x40023800
 800468c:	00f42400 	.word	0x00f42400

08004690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478e:	d10a      	bne.n	80047a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af02      	add	r7, sp, #8
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e4:	f7fd f86c 	bl	80018c0 <HAL_GetTick>
 80047e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d10e      	bne.n	8004816 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f831 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e027      	b.n	8004866 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b04      	cmp	r3, #4
 8004822:	d10e      	bne.n	8004842 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f81b 	bl	800486e <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e011      	b.n	8004866 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b09c      	sub	sp, #112	; 0x70
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487e:	e0a7      	b.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004886:	f000 80a3 	beq.w	80049d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fd f819 	bl	80018c0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800489a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489c:	2b00      	cmp	r3, #0
 800489e:	d13f      	bne.n	8004920 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048b4:	667b      	str	r3, [r7, #100]	; 0x64
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	663b      	str	r3, [r7, #96]	; 0x60
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3308      	adds	r3, #8
 80048f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e068      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d050      	beq.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493c:	d148      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004946:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800495c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
 8004968:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	613b      	str	r3, [r7, #16]
   return(result);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	66bb      	str	r3, [r7, #104]	; 0x68
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800499a:	623a      	str	r2, [r7, #32]
 800499c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e5      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e010      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4013      	ands	r3, r2
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	f43f af48 	beq.w	8004880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3770      	adds	r7, #112	; 0x70
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b097      	sub	sp, #92	; 0x5c
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d10e      	bne.n	8004a4e <UART_Start_Receive_IT+0x52>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <UART_Start_Receive_IT+0x48>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a42:	e02d      	b.n	8004aa0 <UART_Start_Receive_IT+0xa4>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	22ff      	movs	r2, #255	; 0xff
 8004a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a4c:	e028      	b.n	8004aa0 <UART_Start_Receive_IT+0xa4>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <UART_Start_Receive_IT+0x76>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d104      	bne.n	8004a68 <UART_Start_Receive_IT+0x6c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	22ff      	movs	r2, #255	; 0xff
 8004a62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a66:	e01b      	b.n	8004aa0 <UART_Start_Receive_IT+0xa4>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	227f      	movs	r2, #127	; 0x7f
 8004a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a70:	e016      	b.n	8004aa0 <UART_Start_Receive_IT+0xa4>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7a:	d10d      	bne.n	8004a98 <UART_Start_Receive_IT+0x9c>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <UART_Start_Receive_IT+0x92>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	227f      	movs	r2, #127	; 0x7f
 8004a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a8c:	e008      	b.n	8004aa0 <UART_Start_Receive_IT+0xa4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	223f      	movs	r2, #63	; 0x3f
 8004a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a96:	e003      	b.n	8004aa0 <UART_Start_Receive_IT+0xa4>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2222      	movs	r2, #34	; 0x22
 8004aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ad0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ad2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d107      	bne.n	8004afe <UART_Start_Receive_IT+0x102>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a21      	ldr	r2, [pc, #132]	; (8004b80 <UART_Start_Receive_IT+0x184>)
 8004afa:	669a      	str	r2, [r3, #104]	; 0x68
 8004afc:	e002      	b.n	8004b04 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a20      	ldr	r2, [pc, #128]	; (8004b84 <UART_Start_Receive_IT+0x188>)
 8004b02:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d019      	beq.n	8004b40 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e6      	bne.n	8004b0c <UART_Start_Receive_IT+0x110>
 8004b3e:	e018      	b.n	8004b72 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f043 0320 	orr.w	r3, r3, #32
 8004b54:	653b      	str	r3, [r7, #80]	; 0x50
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	69f9      	ldr	r1, [r7, #28]
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e6      	bne.n	8004b40 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	375c      	adds	r7, #92	; 0x5c
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	08005095 	.word	0x08005095
 8004b84:	08004f2f 	.word	0x08004f2f

08004b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b095      	sub	sp, #84	; 0x54
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e6      	bne.n	8004b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e5      	bne.n	8004bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d118      	bne.n	8004c30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f023 0310 	bic.w	r3, r3, #16
 8004c12:	647b      	str	r3, [r7, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6979      	ldr	r1, [r7, #20]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e6      	bne.n	8004bfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c44:	bf00      	nop
 8004c46:	3754      	adds	r7, #84	; 0x54
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff fa80 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	2200      	movs	r2, #0
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d004      	beq.n	8004ca4 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11d      	bne.n	8004ce0 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7ff fa55 	bl	8004188 <HAL_UART_AbortCpltCallback>
 8004cde:	e000      	b.n	8004ce2 <UART_DMATxAbortCallback+0x66>
      return;
 8004ce0:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d125      	bne.n	8004d5c <UART_DMARxAbortCallback+0x74>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	220f      	movs	r2, #15
 8004d2e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0208 	orr.w	r2, r2, #8
 8004d3e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fa17 	bl	8004188 <HAL_UART_AbortCpltCallback>
 8004d5a:	e000      	b.n	8004d5e <UART_DMARxAbortCallback+0x76>
      return;
 8004d5c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b08f      	sub	sp, #60	; 0x3c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d70:	2b21      	cmp	r3, #33	; 0x21
 8004d72:	d14c      	bne.n	8004e0e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d132      	bne.n	8004de6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6979      	ldr	r1, [r7, #20]
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e6      	bne.n	8004db2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004de4:	e013      	b.n	8004e0e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dea:	781a      	ldrb	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004e0e:	bf00      	nop
 8004e10:	373c      	adds	r7, #60	; 0x3c
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b091      	sub	sp, #68	; 0x44
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e26:	2b21      	cmp	r3, #33	; 0x21
 8004e28:	d151      	bne.n	8004ece <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d132      	bne.n	8004e9c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	623b      	str	r3, [r7, #32]
   return(result);
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	633b      	str	r3, [r7, #48]	; 0x30
 8004e56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e6      	bne.n	8004e36 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	69b9      	ldr	r1, [r7, #24]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	617b      	str	r3, [r7, #20]
   return(result);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e6      	bne.n	8004e68 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004e9a:	e018      	b.n	8004ece <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb6:	1c9a      	adds	r2, r3, #2
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004ece:	bf00      	nop
 8004ed0:	3744      	adds	r7, #68	; 0x44
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b088      	sub	sp, #32
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e6      	bne.n	8004ee2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff f91d 	bl	8004160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f26:	bf00      	nop
 8004f28:	3720      	adds	r7, #32
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b096      	sub	sp, #88	; 0x58
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f46:	2b22      	cmp	r3, #34	; 0x22
 8004f48:	f040 8098 	bne.w	800507c <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f56:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004f5a:	b2d9      	uxtb	r1, r3
 8004f5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	400a      	ands	r2, r1
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d17b      	bne.n	800508c <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fe6:	633a      	str	r2, [r7, #48]	; 0x30
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005012:	2b01      	cmp	r3, #1
 8005014:	d12e      	bne.n	8005074 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	60fb      	str	r3, [r7, #12]
   return(result);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	617b      	str	r3, [r7, #20]
   return(result);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e6      	bne.n	800501c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b10      	cmp	r3, #16
 800505a:	d103      	bne.n	8005064 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2210      	movs	r2, #16
 8005062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff f895 	bl	800419c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005072:	e00b      	b.n	800508c <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fb ff57 	bl	8000f28 <HAL_UART_RxCpltCallback>
}
 800507a:	e007      	b.n	800508c <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0208 	orr.w	r2, r2, #8
 800508a:	619a      	str	r2, [r3, #24]
}
 800508c:	bf00      	nop
 800508e:	3758      	adds	r7, #88	; 0x58
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b096      	sub	sp, #88	; 0x58
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ac:	2b22      	cmp	r3, #34	; 0x22
 80050ae:	f040 8098 	bne.w	80051e2 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80050c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80050c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050ca:	4013      	ands	r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d17b      	bne.n	80051f2 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800510e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	643b      	str	r3, [r7, #64]	; 0x40
 800511a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800511e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e6      	bne.n	80050fa <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	61fb      	str	r3, [r7, #28]
   return(result);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800514c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005178:	2b01      	cmp	r3, #1
 800517a:	d12e      	bne.n	80051da <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f023 0310 	bic.w	r3, r3, #16
 8005196:	647b      	str	r3, [r7, #68]	; 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6979      	ldr	r1, [r7, #20]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	613b      	str	r3, [r7, #16]
   return(result);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e6      	bne.n	8005182 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d103      	bne.n	80051ca <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fe ffe2 	bl	800419c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051d8:	e00b      	b.n	80051f2 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fb fea4 	bl	8000f28 <HAL_UART_RxCpltCallback>
}
 80051e0:	e007      	b.n	80051f2 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0208 	orr.w	r2, r2, #8
 80051f0:	619a      	str	r2, [r3, #24]
}
 80051f2:	bf00      	nop
 80051f4:	3758      	adds	r7, #88	; 0x58
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800520e:	f3ef 8305 	mrs	r3, IPSR
 8005212:	60bb      	str	r3, [r7, #8]
  return(result);
 8005214:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521a:	f3ef 8310 	mrs	r3, PRIMASK
 800521e:	607b      	str	r3, [r7, #4]
  return(result);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005226:	f3ef 8311 	mrs	r3, BASEPRI
 800522a:	603b      	str	r3, [r7, #0]
  return(result);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <osKernelInitialize+0x3a>
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <osKernelInitialize+0x64>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d103      	bne.n	8005242 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800523a:	f06f 0305 	mvn.w	r3, #5
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e00c      	b.n	800525c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <osKernelInitialize+0x64>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <osKernelInitialize+0x64>)
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e002      	b.n	800525c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800525a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	200047fc 	.word	0x200047fc

08005270 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005276:	f3ef 8305 	mrs	r3, IPSR
 800527a:	60bb      	str	r3, [r7, #8]
  return(result);
 800527c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005282:	f3ef 8310 	mrs	r3, PRIMASK
 8005286:	607b      	str	r3, [r7, #4]
  return(result);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800528e:	f3ef 8311 	mrs	r3, BASEPRI
 8005292:	603b      	str	r3, [r7, #0]
  return(result);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <osKernelStart+0x3a>
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <osKernelStart+0x68>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d103      	bne.n	80052aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80052a2:	f06f 0305 	mvn.w	r3, #5
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e010      	b.n	80052cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052aa:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <osKernelStart+0x68>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d109      	bne.n	80052c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052b2:	f7ff ffa2 	bl	80051fa <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <osKernelStart+0x68>)
 80052b8:	2202      	movs	r2, #2
 80052ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052bc:	f001 f8b4 	bl	8006428 <vTaskStartScheduler>
      stat = osOK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e002      	b.n	80052cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052cc:	68fb      	ldr	r3, [r7, #12]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	200047fc 	.word	0x200047fc

080052dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b090      	sub	sp, #64	; 0x40
 80052e0:	af04      	add	r7, sp, #16
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ec:	f3ef 8305 	mrs	r3, IPSR
 80052f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80052f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 808f 	bne.w	8005418 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fa:	f3ef 8310 	mrs	r3, PRIMASK
 80052fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d105      	bne.n	8005312 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005306:	f3ef 8311 	mrs	r3, BASEPRI
 800530a:	617b      	str	r3, [r7, #20]
  return(result);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <osThreadNew+0x3e>
 8005312:	4b44      	ldr	r3, [pc, #272]	; (8005424 <osThreadNew+0x148>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d07e      	beq.n	8005418 <osThreadNew+0x13c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d07b      	beq.n	8005418 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005324:	2318      	movs	r3, #24
 8005326:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800532c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005330:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d045      	beq.n	80053c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <osThreadNew+0x6a>
        name = attr->name;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <osThreadNew+0x90>
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	2b38      	cmp	r3, #56	; 0x38
 800535e:	d805      	bhi.n	800536c <osThreadNew+0x90>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <osThreadNew+0x94>
        return (NULL);
 800536c:	2300      	movs	r3, #0
 800536e:	e054      	b.n	800541a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	089b      	lsrs	r3, r3, #2
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <osThreadNew+0xca>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b5b      	cmp	r3, #91	; 0x5b
 800538e:	d90a      	bls.n	80053a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <osThreadNew+0xca>
        mem = 1;
 80053a0:	2301      	movs	r3, #1
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	e010      	b.n	80053c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <osThreadNew+0xec>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <osThreadNew+0xec>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <osThreadNew+0xec>
          mem = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	e001      	b.n	80053c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d110      	bne.n	80053f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053d6:	9202      	str	r2, [sp, #8]
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fe3f 	bl	8006068 <xTaskCreateStatic>
 80053ea:	4603      	mov	r3, r0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	e013      	b.n	8005418 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d110      	bne.n	8005418 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f107 0310 	add.w	r3, r7, #16
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fe90 	bl	800612e <xTaskCreate>
 800540e:	4603      	mov	r3, r0
 8005410:	2b01      	cmp	r3, #1
 8005412:	d001      	beq.n	8005418 <osThreadNew+0x13c>
          hTask = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005418:	693b      	ldr	r3, [r7, #16]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3730      	adds	r7, #48	; 0x30
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200047fc 	.word	0x200047fc

08005428 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005430:	f3ef 8305 	mrs	r3, IPSR
 8005434:	613b      	str	r3, [r7, #16]
  return(result);
 8005436:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10f      	bne.n	800545c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800543c:	f3ef 8310 	mrs	r3, PRIMASK
 8005440:	60fb      	str	r3, [r7, #12]
  return(result);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005448:	f3ef 8311 	mrs	r3, BASEPRI
 800544c:	60bb      	str	r3, [r7, #8]
  return(result);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <osDelay+0x3c>
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <osDelay+0x58>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d103      	bne.n	8005464 <osDelay+0x3c>
    stat = osErrorISR;
 800545c:	f06f 0305 	mvn.w	r3, #5
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	e007      	b.n	8005474 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <osDelay+0x4c>
      vTaskDelay(ticks);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 ffa4 	bl	80063bc <vTaskDelay>
    }
  }

  return (stat);
 8005474:	697b      	ldr	r3, [r7, #20]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	200047fc 	.word	0x200047fc

08005484 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a07      	ldr	r2, [pc, #28]	; (80054b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4a06      	ldr	r2, [pc, #24]	; (80054b4 <vApplicationGetIdleTaskMemory+0x30>)
 800549a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2280      	movs	r2, #128	; 0x80
 80054a0:	601a      	str	r2, [r3, #0]
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20004800 	.word	0x20004800
 80054b4:	2000485c 	.word	0x2000485c

080054b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a07      	ldr	r2, [pc, #28]	; (80054e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80054c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a06      	ldr	r2, [pc, #24]	; (80054e8 <vApplicationGetTimerTaskMemory+0x30>)
 80054ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d6:	601a      	str	r2, [r3, #0]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20004a5c 	.word	0x20004a5c
 80054e8:	20004ab8 	.word	0x20004ab8

080054ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f103 0208 	add.w	r2, r3, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f103 0208 	add.w	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0208 	add.w	r2, r3, #8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a4:	d103      	bne.n	80055ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e00c      	b.n	80055c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3308      	adds	r3, #8
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e002      	b.n	80055bc <vListInsert+0x2e>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d2f6      	bcs.n	80055b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6852      	ldr	r2, [r2, #4]
 8005620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d103      	bne.n	8005634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	1e5a      	subs	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10c      	bne.n	8005682 <xQueueGenericReset+0x2e>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	b672      	cpsid	i
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	b662      	cpsie	i
 800567c:	60bb      	str	r3, [r7, #8]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005682:	f002 f8a3 	bl	80077cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	441a      	add	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	3b01      	subs	r3, #1
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	441a      	add	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	22ff      	movs	r2, #255	; 0xff
 80056ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d114      	bne.n	8005702 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01a      	beq.n	8005716 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3310      	adds	r3, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f937 	bl	8006958 <xTaskRemoveFromEventList>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d012      	beq.n	8005716 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <xQueueGenericReset+0xd0>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	e009      	b.n	8005716 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3310      	adds	r3, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fef0 	bl	80054ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3324      	adds	r3, #36	; 0x24
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff feeb 	bl	80054ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005716:	f002 f88d 	bl	8007834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800571a:	2301      	movs	r3, #1
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10c      	bne.n	8005756 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	b672      	cpsid	i
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	b662      	cpsie	i
 8005750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10c      	bne.n	8005776 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	b672      	cpsid	i
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	b662      	cpsie	i
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <xQueueGenericCreateStatic+0x5a>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <xQueueGenericCreateStatic+0x5e>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <xQueueGenericCreateStatic+0x60>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10c      	bne.n	80057a6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	b672      	cpsid	i
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	b662      	cpsie	i
 80057a0:	623b      	str	r3, [r7, #32]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <xQueueGenericCreateStatic+0x8a>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <xQueueGenericCreateStatic+0x8e>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <xQueueGenericCreateStatic+0x90>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10c      	bne.n	80057d6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	b672      	cpsid	i
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	b662      	cpsie	i
 80057d0:	61fb      	str	r3, [r7, #28]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057d6:	2350      	movs	r3, #80	; 0x50
 80057d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b50      	cmp	r3, #80	; 0x50
 80057de:	d00c      	beq.n	80057fa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	b672      	cpsid	i
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	b662      	cpsie	i
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800580e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	4613      	mov	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f805 	bl	800582c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005824:	4618      	mov	r0, r3
 8005826:	3730      	adds	r7, #48	; 0x30
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e002      	b.n	800584e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800585a:	2101      	movs	r1, #1
 800585c:	69b8      	ldr	r0, [r7, #24]
 800585e:	f7ff fef9 	bl	8005654 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	78fa      	ldrb	r2, [r7, #3]
 8005866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08e      	sub	sp, #56	; 0x38
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005882:	2300      	movs	r3, #0
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10c      	bne.n	80058aa <xQueueGenericSend+0x36>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	b672      	cpsid	i
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	b662      	cpsie	i
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <xQueueGenericSend+0x44>
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <xQueueGenericSend+0x48>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <xQueueGenericSend+0x4a>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10c      	bne.n	80058dc <xQueueGenericSend+0x68>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	b672      	cpsid	i
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	b662      	cpsie	i
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d103      	bne.n	80058ea <xQueueGenericSend+0x76>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <xQueueGenericSend+0x7a>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueGenericSend+0x7c>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10c      	bne.n	800590e <xQueueGenericSend+0x9a>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	b672      	cpsid	i
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	b662      	cpsie	i
 8005908:	623b      	str	r3, [r7, #32]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800590e:	f001 fa11 	bl	8006d34 <xTaskGetSchedulerState>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <xQueueGenericSend+0xaa>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <xQueueGenericSend+0xae>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueGenericSend+0xb0>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10c      	bne.n	8005942 <xQueueGenericSend+0xce>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	b672      	cpsid	i
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	b662      	cpsie	i
 800593c:	61fb      	str	r3, [r7, #28]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005942:	f001 ff43 	bl	80077cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	429a      	cmp	r2, r3
 8005950:	d302      	bcc.n	8005958 <xQueueGenericSend+0xe4>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d129      	bne.n	80059ac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595e:	f000 fa15 	bl	8005d8c <prvCopyDataToQueue>
 8005962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fff1 	bl	8006958 <xTaskRemoveFromEventList>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800597c:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <xQueueGenericSend+0x208>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	e00a      	b.n	80059a4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005994:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <xQueueGenericSend+0x208>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059a4:	f001 ff46 	bl	8007834 <vPortExitCritical>
				return pdPASS;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e063      	b.n	8005a74 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059b2:	f001 ff3f 	bl	8007834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e05c      	b.n	8005a74 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d106      	bne.n	80059ce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 f855 	bl	8006a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ce:	f001 ff31 	bl	8007834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059d2:	f000 fd93 	bl	80064fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059d6:	f001 fef9 	bl	80077cc <vPortEnterCritical>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059e0:	b25b      	sxtb	r3, r3
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e6:	d103      	bne.n	80059f0 <xQueueGenericSend+0x17c>
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f6:	b25b      	sxtb	r3, r3
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059fc:	d103      	bne.n	8005a06 <xQueueGenericSend+0x192>
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a06:	f001 ff15 	bl	8007834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a0a:	1d3a      	adds	r2, r7, #4
 8005a0c:	f107 0314 	add.w	r3, r7, #20
 8005a10:	4611      	mov	r1, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 f844 	bl	8006aa0 <xTaskCheckForTimeOut>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d124      	bne.n	8005a68 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a20:	f000 faac 	bl	8005f7c <prvIsQueueFull>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d018      	beq.n	8005a5c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4611      	mov	r1, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 ff3c 	bl	80068b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a3a:	f000 fa37 	bl	8005eac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a3e:	f000 fd6b 	bl	8006518 <xTaskResumeAll>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f47f af7c 	bne.w	8005942 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <xQueueGenericSend+0x208>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	e772      	b.n	8005942 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a5e:	f000 fa25 	bl	8005eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a62:	f000 fd59 	bl	8006518 <xTaskResumeAll>
 8005a66:	e76c      	b.n	8005942 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a6a:	f000 fa1f 	bl	8005eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a6e:	f000 fd53 	bl	8006518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3738      	adds	r7, #56	; 0x38
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08e      	sub	sp, #56	; 0x38
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10c      	bne.n	8005ab2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	b672      	cpsid	i
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	b662      	cpsie	i
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <xQueueGenericSendFromISR+0x40>
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <xQueueGenericSendFromISR+0x44>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <xQueueGenericSendFromISR+0x46>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	b672      	cpsid	i
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	b662      	cpsie	i
 8005ade:	623b      	str	r3, [r7, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d103      	bne.n	8005af2 <xQueueGenericSendFromISR+0x72>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <xQueueGenericSendFromISR+0x76>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <xQueueGenericSendFromISR+0x78>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10c      	bne.n	8005b16 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	b672      	cpsid	i
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	b662      	cpsie	i
 8005b10:	61fb      	str	r3, [r7, #28]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b16:	f001 ff41 	bl	800799c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	b672      	cpsid	i
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	b662      	cpsie	i
 8005b32:	61ba      	str	r2, [r7, #24]
 8005b34:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b36:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <xQueueGenericSendFromISR+0xcc>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d12c      	bne.n	8005ba6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b5c:	f000 f916 	bl	8005d8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b60:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b68:	d112      	bne.n	8005b90 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	3324      	adds	r3, #36	; 0x24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 feee 	bl	8006958 <xTaskRemoveFromEventList>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00e      	beq.n	8005ba0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e007      	b.n	8005ba0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b94:	3301      	adds	r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	b25a      	sxtb	r2, r3
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ba4:	e001      	b.n	8005baa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3738      	adds	r7, #56	; 0x38
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10c      	bne.n	8005bf4 <xQueueReceive+0x34>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	b672      	cpsid	i
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	b662      	cpsie	i
 8005bee:	623b      	str	r3, [r7, #32]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <xQueueReceive+0x42>
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <xQueueReceive+0x46>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <xQueueReceive+0x48>
 8005c06:	2300      	movs	r3, #0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10c      	bne.n	8005c26 <xQueueReceive+0x66>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	b672      	cpsid	i
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	b662      	cpsie	i
 8005c20:	61fb      	str	r3, [r7, #28]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c26:	f001 f885 	bl	8006d34 <xTaskGetSchedulerState>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <xQueueReceive+0x76>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <xQueueReceive+0x7a>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <xQueueReceive+0x7c>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10c      	bne.n	8005c5a <xQueueReceive+0x9a>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	b672      	cpsid	i
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	b662      	cpsie	i
 8005c54:	61bb      	str	r3, [r7, #24]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c5a:	f001 fdb7 	bl	80077cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01f      	beq.n	8005caa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6e:	f000 f8f7 	bl	8005e60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00f      	beq.n	8005ca2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	3310      	adds	r3, #16
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fe66 	bl	8006958 <xTaskRemoveFromEventList>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c92:	4b3d      	ldr	r3, [pc, #244]	; (8005d88 <xQueueReceive+0x1c8>)
 8005c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ca2:	f001 fdc7 	bl	8007834 <vPortExitCritical>
				return pdPASS;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e069      	b.n	8005d7e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d103      	bne.n	8005cb8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cb0:	f001 fdc0 	bl	8007834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e062      	b.n	8005d7e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fed6 	bl	8006a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ccc:	f001 fdb2 	bl	8007834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cd0:	f000 fc14 	bl	80064fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cd4:	f001 fd7a 	bl	80077cc <vPortEnterCritical>
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cde:	b25b      	sxtb	r3, r3
 8005ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce4:	d103      	bne.n	8005cee <xQueueReceive+0x12e>
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfa:	d103      	bne.n	8005d04 <xQueueReceive+0x144>
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d04:	f001 fd96 	bl	8007834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d08:	1d3a      	adds	r2, r7, #4
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fec5 	bl	8006aa0 <xTaskCheckForTimeOut>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d123      	bne.n	8005d64 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d1e:	f000 f917 	bl	8005f50 <prvIsQueueEmpty>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d017      	beq.n	8005d58 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	3324      	adds	r3, #36	; 0x24
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fdbd 	bl	80068b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d38:	f000 f8b8 	bl	8005eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d3c:	f000 fbec 	bl	8006518 <xTaskResumeAll>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d189      	bne.n	8005c5a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <xQueueReceive+0x1c8>)
 8005d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	e780      	b.n	8005c5a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5a:	f000 f8a7 	bl	8005eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d5e:	f000 fbdb 	bl	8006518 <xTaskResumeAll>
 8005d62:	e77a      	b.n	8005c5a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d66:	f000 f8a1 	bl	8005eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d6a:	f000 fbd5 	bl	8006518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d70:	f000 f8ee 	bl	8005f50 <prvIsQueueEmpty>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f43f af6f 	beq.w	8005c5a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3730      	adds	r7, #48	; 0x30
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d14d      	bne.n	8005e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 ffda 	bl	8006d70 <xTaskPriorityDisinherit>
 8005dbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	e043      	b.n	8005e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d119      	bne.n	8005e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6858      	ldr	r0, [r3, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	f00b f97e 	bl	80110d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	441a      	add	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d32b      	bcc.n	8005e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	e026      	b.n	8005e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	68d8      	ldr	r0, [r3, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	f00b f964 	bl	80110d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	425b      	negs	r3, r3
 8005e1a:	441a      	add	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d207      	bcs.n	8005e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	425b      	negs	r3, r3
 8005e36:	441a      	add	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d105      	bne.n	8005e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e56:	697b      	ldr	r3, [r7, #20]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d018      	beq.n	8005ea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	441a      	add	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d303      	bcc.n	8005e94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68d9      	ldr	r1, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6838      	ldr	r0, [r7, #0]
 8005ea0:	f00b f91a 	bl	80110d8 <memcpy>
	}
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005eb4:	f001 fc8a 	bl	80077cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ec0:	e011      	b.n	8005ee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d012      	beq.n	8005ef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3324      	adds	r3, #36	; 0x24
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fd42 	bl	8006958 <xTaskRemoveFromEventList>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eda:	f000 fe47 	bl	8006b6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dce9      	bgt.n	8005ec2 <prvUnlockQueue+0x16>
 8005eee:	e000      	b.n	8005ef2 <prvUnlockQueue+0x46>
					break;
 8005ef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	22ff      	movs	r2, #255	; 0xff
 8005ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005efa:	f001 fc9b 	bl	8007834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005efe:	f001 fc65 	bl	80077cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f0a:	e011      	b.n	8005f30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3310      	adds	r3, #16
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fd1d 	bl	8006958 <xTaskRemoveFromEventList>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f24:	f000 fe22 	bl	8006b6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dce9      	bgt.n	8005f0c <prvUnlockQueue+0x60>
 8005f38:	e000      	b.n	8005f3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	22ff      	movs	r2, #255	; 0xff
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f44:	f001 fc76 	bl	8007834 <vPortExitCritical>
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f58:	f001 fc38 	bl	80077cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e001      	b.n	8005f6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f6e:	f001 fc61 	bl	8007834 <vPortExitCritical>

	return xReturn;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f84:	f001 fc22 	bl	80077cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d102      	bne.n	8005f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e001      	b.n	8005f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f9e:	f001 fc49 	bl	8007834 <vPortExitCritical>

	return xReturn;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e014      	b.n	8005fe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fbc:	4a0f      	ldr	r2, [pc, #60]	; (8005ffc <vQueueAddToRegistry+0x50>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fc8:	490c      	ldr	r1, [pc, #48]	; (8005ffc <vQueueAddToRegistry+0x50>)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fd2:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <vQueueAddToRegistry+0x50>)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fde:	e006      	b.n	8005fee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b07      	cmp	r3, #7
 8005fea:	d9e7      	bls.n	8005fbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20004eb8 	.word	0x20004eb8

08006000 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006010:	f001 fbdc 	bl	80077cc <vPortEnterCritical>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800601a:	b25b      	sxtb	r3, r3
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006020:	d103      	bne.n	800602a <vQueueWaitForMessageRestricted+0x2a>
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006030:	b25b      	sxtb	r3, r3
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006036:	d103      	bne.n	8006040 <vQueueWaitForMessageRestricted+0x40>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006040:	f001 fbf8 	bl	8007834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3324      	adds	r3, #36	; 0x24
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fc51 	bl	80068fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800605a:	6978      	ldr	r0, [r7, #20]
 800605c:	f7ff ff26 	bl	8005eac <prvUnlockQueue>
	}
 8006060:	bf00      	nop
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08e      	sub	sp, #56	; 0x38
 800606c:	af04      	add	r7, sp, #16
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10c      	bne.n	8006096 <xTaskCreateStatic+0x2e>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	b672      	cpsid	i
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	b662      	cpsie	i
 8006090:	623b      	str	r3, [r7, #32]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10c      	bne.n	80060b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	b672      	cpsid	i
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	b662      	cpsie	i
 80060b0:	61fb      	str	r3, [r7, #28]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b6:	235c      	movs	r3, #92	; 0x5c
 80060b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b5c      	cmp	r3, #92	; 0x5c
 80060be:	d00c      	beq.n	80060da <xTaskCreateStatic+0x72>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	61bb      	str	r3, [r7, #24]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01e      	beq.n	8006120 <xTaskCreateStatic+0xb8>
 80060e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01b      	beq.n	8006120 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060fa:	2300      	movs	r3, #0
 80060fc:	9303      	str	r3, [sp, #12]
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	9302      	str	r3, [sp, #8]
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f850 	bl	80061b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800611a:	f000 f8df 	bl	80062dc <prvAddNewTaskToReadyList>
 800611e:	e001      	b.n	8006124 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006124:	697b      	ldr	r3, [r7, #20]
	}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	; 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800612e:	b580      	push	{r7, lr}
 8006130:	b08c      	sub	sp, #48	; 0x30
 8006132:	af04      	add	r7, sp, #16
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4618      	mov	r0, r3
 8006144:	f001 fc6e 	bl	8007a24 <pvPortMalloc>
 8006148:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006150:	205c      	movs	r0, #92	; 0x5c
 8006152:	f001 fc67 	bl	8007a24 <pvPortMalloc>
 8006156:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
 8006164:	e005      	b.n	8006172 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006166:	6978      	ldr	r0, [r7, #20]
 8006168:	f001 fd26 	bl	8007bb8 <vPortFree>
 800616c:	e001      	b.n	8006172 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d017      	beq.n	80061a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	2300      	movs	r3, #0
 8006184:	9303      	str	r3, [sp, #12]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f80e 	bl	80061b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800619c:	69f8      	ldr	r0, [r7, #28]
 800619e:	f000 f89d 	bl	80062dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e002      	b.n	80061ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061ae:	69bb      	ldr	r3, [r7, #24]
	}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	461a      	mov	r2, r3
 80061d0:	21a5      	movs	r1, #165	; 0xa5
 80061d2:	f00a ff8f 	bl	80110f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061e0:	440b      	add	r3, r1
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	b672      	cpsid	i
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	b662      	cpsie	i
 800620e:	617b      	str	r3, [r7, #20]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01f      	beq.n	800625a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	e012      	b.n	8006246 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	7819      	ldrb	r1, [r3, #0]
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	3334      	adds	r3, #52	; 0x34
 8006230:	460a      	mov	r2, r1
 8006232:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b0f      	cmp	r3, #15
 800624a:	d9e9      	bls.n	8006220 <prvInitialiseNewTask+0x68>
 800624c:	e000      	b.n	8006250 <prvInitialiseNewTask+0x98>
			{
				break;
 800624e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006258:	e003      	b.n	8006262 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	2b37      	cmp	r3, #55	; 0x37
 8006266:	d901      	bls.n	800626c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006268:	2337      	movs	r3, #55	; 0x37
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006270:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006276:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	2200      	movs	r2, #0
 800627c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	3304      	adds	r3, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff f952 	bl	800552c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	3318      	adds	r3, #24
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff f94d 	bl	800552c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	69b8      	ldr	r0, [r7, #24]
 80062bc:	f001 f97a 	bl	80075b4 <pxPortInitialiseStack>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d2:	bf00      	nop
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062e4:	f001 fa72 	bl	80077cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062e8:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <prvAddNewTaskToReadyList+0xc4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3301      	adds	r3, #1
 80062ee:	4a2c      	ldr	r2, [pc, #176]	; (80063a0 <prvAddNewTaskToReadyList+0xc4>)
 80062f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062f2:	4b2c      	ldr	r3, [pc, #176]	; (80063a4 <prvAddNewTaskToReadyList+0xc8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062fa:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <prvAddNewTaskToReadyList+0xc8>)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006300:	4b27      	ldr	r3, [pc, #156]	; (80063a0 <prvAddNewTaskToReadyList+0xc4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d110      	bne.n	800632a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006308:	f000 fc54 	bl	8006bb4 <prvInitialiseTaskLists>
 800630c:	e00d      	b.n	800632a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800630e:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <prvAddNewTaskToReadyList+0xcc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006316:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <prvAddNewTaskToReadyList+0xc8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	429a      	cmp	r2, r3
 8006322:	d802      	bhi.n	800632a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006324:	4a1f      	ldr	r2, [pc, #124]	; (80063a4 <prvAddNewTaskToReadyList+0xc8>)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800632a:	4b20      	ldr	r3, [pc, #128]	; (80063ac <prvAddNewTaskToReadyList+0xd0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <prvAddNewTaskToReadyList+0xd0>)
 8006332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006334:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <prvAddNewTaskToReadyList+0xd0>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <prvAddNewTaskToReadyList+0xd4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <prvAddNewTaskToReadyList+0x74>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <prvAddNewTaskToReadyList+0xd4>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <prvAddNewTaskToReadyList+0xd8>)
 800635e:	441a      	add	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7ff f8ed 	bl	8005546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800636c:	f001 fa62 	bl	8007834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006370:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <prvAddNewTaskToReadyList+0xcc>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <prvAddNewTaskToReadyList+0xc8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	429a      	cmp	r2, r3
 8006384:	d207      	bcs.n	8006396 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <prvAddNewTaskToReadyList+0xdc>)
 8006388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200053cc 	.word	0x200053cc
 80063a4:	20004ef8 	.word	0x20004ef8
 80063a8:	200053d8 	.word	0x200053d8
 80063ac:	200053e8 	.word	0x200053e8
 80063b0:	200053d4 	.word	0x200053d4
 80063b4:	20004efc 	.word	0x20004efc
 80063b8:	e000ed04 	.word	0xe000ed04

080063bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d019      	beq.n	8006402 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <vTaskDelay+0x64>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <vTaskDelay+0x34>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	b672      	cpsid	i
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	b662      	cpsie	i
 80063ea:	60bb      	str	r3, [r7, #8]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 80063f0:	f000 f884 	bl	80064fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063f4:	2100      	movs	r1, #0
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fd2c 	bl	8006e54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063fc:	f000 f88c 	bl	8006518 <xTaskResumeAll>
 8006400:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d107      	bne.n	8006418 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <vTaskDelay+0x68>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	200053f4 	.word	0x200053f4
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006436:	463a      	mov	r2, r7
 8006438:	1d39      	adds	r1, r7, #4
 800643a:	f107 0308 	add.w	r3, r7, #8
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff f820 	bl	8005484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	9202      	str	r2, [sp, #8]
 800644c:	9301      	str	r3, [sp, #4]
 800644e:	2300      	movs	r3, #0
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	2300      	movs	r3, #0
 8006454:	460a      	mov	r2, r1
 8006456:	4923      	ldr	r1, [pc, #140]	; (80064e4 <vTaskStartScheduler+0xbc>)
 8006458:	4823      	ldr	r0, [pc, #140]	; (80064e8 <vTaskStartScheduler+0xc0>)
 800645a:	f7ff fe05 	bl	8006068 <xTaskCreateStatic>
 800645e:	4603      	mov	r3, r0
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <vTaskStartScheduler+0xc4>)
 8006462:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006464:	4b21      	ldr	r3, [pc, #132]	; (80064ec <vTaskStartScheduler+0xc4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800646c:	2301      	movs	r3, #1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e001      	b.n	8006476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d102      	bne.n	8006482 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800647c:	f000 fd3e 	bl	8006efc <xTimerCreateTimerTask>
 8006480:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d118      	bne.n	80064ba <vTaskStartScheduler+0x92>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	b672      	cpsid	i
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	b662      	cpsie	i
 800649c:	613b      	str	r3, [r7, #16]
}
 800649e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064a0:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <vTaskStartScheduler+0xc8>)
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064a8:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <vTaskStartScheduler+0xcc>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064ae:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <vTaskStartScheduler+0xd0>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064b4:	f001 f90c 	bl	80076d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064b8:	e010      	b.n	80064dc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c0:	d10c      	bne.n	80064dc <vTaskStartScheduler+0xb4>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	b672      	cpsid	i
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	b662      	cpsie	i
 80064d6:	60fb      	str	r3, [r7, #12]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <vTaskStartScheduler+0xb2>
}
 80064dc:	bf00      	nop
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	080128a4 	.word	0x080128a4
 80064e8:	08006b85 	.word	0x08006b85
 80064ec:	200053f0 	.word	0x200053f0
 80064f0:	200053ec 	.word	0x200053ec
 80064f4:	200053d8 	.word	0x200053d8
 80064f8:	200053d0 	.word	0x200053d0

080064fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006500:	4b04      	ldr	r3, [pc, #16]	; (8006514 <vTaskSuspendAll+0x18>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	4a03      	ldr	r2, [pc, #12]	; (8006514 <vTaskSuspendAll+0x18>)
 8006508:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800650a:	bf00      	nop
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	200053f4 	.word	0x200053f4

08006518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006526:	4b43      	ldr	r3, [pc, #268]	; (8006634 <xTaskResumeAll+0x11c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10c      	bne.n	8006548 <xTaskResumeAll+0x30>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	b672      	cpsid	i
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	b662      	cpsie	i
 8006542:	603b      	str	r3, [r7, #0]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006548:	f001 f940 	bl	80077cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800654c:	4b39      	ldr	r3, [pc, #228]	; (8006634 <xTaskResumeAll+0x11c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3b01      	subs	r3, #1
 8006552:	4a38      	ldr	r2, [pc, #224]	; (8006634 <xTaskResumeAll+0x11c>)
 8006554:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006556:	4b37      	ldr	r3, [pc, #220]	; (8006634 <xTaskResumeAll+0x11c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d162      	bne.n	8006624 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800655e:	4b36      	ldr	r3, [pc, #216]	; (8006638 <xTaskResumeAll+0x120>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d05e      	beq.n	8006624 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006566:	e02f      	b.n	80065c8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006568:	4b34      	ldr	r3, [pc, #208]	; (800663c <xTaskResumeAll+0x124>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3318      	adds	r3, #24
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff f843 	bl	8005600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff f83e 	bl	8005600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <xTaskResumeAll+0x128>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d903      	bls.n	8006598 <xTaskResumeAll+0x80>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <xTaskResumeAll+0x128>)
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4a27      	ldr	r2, [pc, #156]	; (8006644 <xTaskResumeAll+0x12c>)
 80065a6:	441a      	add	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7fe ffc9 	bl	8005546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4b23      	ldr	r3, [pc, #140]	; (8006648 <xTaskResumeAll+0x130>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80065c2:	4b22      	ldr	r3, [pc, #136]	; (800664c <xTaskResumeAll+0x134>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <xTaskResumeAll+0x124>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1cb      	bne.n	8006568 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065d6:	f000 fb8d 	bl	8006cf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065da:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <xTaskResumeAll+0x138>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d010      	beq.n	8006608 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065e6:	f000 f847 	bl	8006678 <xTaskIncrementTick>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80065f0:	4b16      	ldr	r3, [pc, #88]	; (800664c <xTaskResumeAll+0x134>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f1      	bne.n	80065e6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006602:	4b13      	ldr	r3, [pc, #76]	; (8006650 <xTaskResumeAll+0x138>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <xTaskResumeAll+0x134>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <xTaskResumeAll+0x13c>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006624:	f001 f906 	bl	8007834 <vPortExitCritical>

	return xAlreadyYielded;
 8006628:	68bb      	ldr	r3, [r7, #8]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200053f4 	.word	0x200053f4
 8006638:	200053cc 	.word	0x200053cc
 800663c:	2000538c 	.word	0x2000538c
 8006640:	200053d4 	.word	0x200053d4
 8006644:	20004efc 	.word	0x20004efc
 8006648:	20004ef8 	.word	0x20004ef8
 800664c:	200053e0 	.word	0x200053e0
 8006650:	200053dc 	.word	0x200053dc
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <xTaskGetTickCount+0x1c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006664:	687b      	ldr	r3, [r7, #4]
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	200053d0 	.word	0x200053d0

08006678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006682:	4b50      	ldr	r3, [pc, #320]	; (80067c4 <xTaskIncrementTick+0x14c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 808b 	bne.w	80067a2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800668c:	4b4e      	ldr	r3, [pc, #312]	; (80067c8 <xTaskIncrementTick+0x150>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006694:	4a4c      	ldr	r2, [pc, #304]	; (80067c8 <xTaskIncrementTick+0x150>)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d122      	bne.n	80066e6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80066a0:	4b4a      	ldr	r3, [pc, #296]	; (80067cc <xTaskIncrementTick+0x154>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	b672      	cpsid	i
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	b662      	cpsie	i
 80066be:	603b      	str	r3, [r7, #0]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <xTaskIncrementTick+0x4a>
 80066c4:	4b41      	ldr	r3, [pc, #260]	; (80067cc <xTaskIncrementTick+0x154>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	4b41      	ldr	r3, [pc, #260]	; (80067d0 <xTaskIncrementTick+0x158>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a3f      	ldr	r2, [pc, #252]	; (80067cc <xTaskIncrementTick+0x154>)
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	4a3f      	ldr	r2, [pc, #252]	; (80067d0 <xTaskIncrementTick+0x158>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <xTaskIncrementTick+0x15c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	4a3d      	ldr	r2, [pc, #244]	; (80067d4 <xTaskIncrementTick+0x15c>)
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	f000 fb07 	bl	8006cf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066e6:	4b3c      	ldr	r3, [pc, #240]	; (80067d8 <xTaskIncrementTick+0x160>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d349      	bcc.n	8006784 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f0:	4b36      	ldr	r3, [pc, #216]	; (80067cc <xTaskIncrementTick+0x154>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fa:	4b37      	ldr	r3, [pc, #220]	; (80067d8 <xTaskIncrementTick+0x160>)
 80066fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006700:	601a      	str	r2, [r3, #0]
					break;
 8006702:	e03f      	b.n	8006784 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006704:	4b31      	ldr	r3, [pc, #196]	; (80067cc <xTaskIncrementTick+0x154>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d203      	bcs.n	8006724 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800671c:	4a2e      	ldr	r2, [pc, #184]	; (80067d8 <xTaskIncrementTick+0x160>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006722:	e02f      	b.n	8006784 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe ff69 	bl	8005600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	3318      	adds	r3, #24
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe ff60 	bl	8005600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006744:	4b25      	ldr	r3, [pc, #148]	; (80067dc <xTaskIncrementTick+0x164>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d903      	bls.n	8006754 <xTaskIncrementTick+0xdc>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	4a22      	ldr	r2, [pc, #136]	; (80067dc <xTaskIncrementTick+0x164>)
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <xTaskIncrementTick+0x168>)
 8006762:	441a      	add	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f7fe feeb 	bl	8005546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <xTaskIncrementTick+0x16c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	429a      	cmp	r2, r3
 800677c:	d3b8      	bcc.n	80066f0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006782:	e7b5      	b.n	80066f0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006784:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <xTaskIncrementTick+0x16c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	4915      	ldr	r1, [pc, #84]	; (80067e0 <xTaskIncrementTick+0x168>)
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d907      	bls.n	80067ac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e004      	b.n	80067ac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <xTaskIncrementTick+0x170>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a0f      	ldr	r2, [pc, #60]	; (80067e8 <xTaskIncrementTick+0x170>)
 80067aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <xTaskIncrementTick+0x174>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80067b4:	2301      	movs	r3, #1
 80067b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067b8:	697b      	ldr	r3, [r7, #20]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200053f4 	.word	0x200053f4
 80067c8:	200053d0 	.word	0x200053d0
 80067cc:	20005384 	.word	0x20005384
 80067d0:	20005388 	.word	0x20005388
 80067d4:	200053e4 	.word	0x200053e4
 80067d8:	200053ec 	.word	0x200053ec
 80067dc:	200053d4 	.word	0x200053d4
 80067e0:	20004efc 	.word	0x20004efc
 80067e4:	20004ef8 	.word	0x20004ef8
 80067e8:	200053dc 	.word	0x200053dc
 80067ec:	200053e0 	.word	0x200053e0

080067f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067f6:	4b29      	ldr	r3, [pc, #164]	; (800689c <vTaskSwitchContext+0xac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067fe:	4b28      	ldr	r3, [pc, #160]	; (80068a0 <vTaskSwitchContext+0xb0>)
 8006800:	2201      	movs	r2, #1
 8006802:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006804:	e043      	b.n	800688e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8006806:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <vTaskSwitchContext+0xb0>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <vTaskSwitchContext+0xb4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	e012      	b.n	800683a <vTaskSwitchContext+0x4a>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10c      	bne.n	8006834 <vTaskSwitchContext+0x44>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	b672      	cpsid	i
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	b662      	cpsie	i
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <vTaskSwitchContext+0x42>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3b01      	subs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	491b      	ldr	r1, [pc, #108]	; (80068a8 <vTaskSwitchContext+0xb8>)
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0e2      	beq.n	8006814 <vTaskSwitchContext+0x24>
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4a13      	ldr	r2, [pc, #76]	; (80068a8 <vTaskSwitchContext+0xb8>)
 800685a:	4413      	add	r3, r2
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3308      	adds	r3, #8
 8006870:	429a      	cmp	r2, r3
 8006872:	d104      	bne.n	800687e <vTaskSwitchContext+0x8e>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4a09      	ldr	r2, [pc, #36]	; (80068ac <vTaskSwitchContext+0xbc>)
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4a06      	ldr	r2, [pc, #24]	; (80068a4 <vTaskSwitchContext+0xb4>)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6013      	str	r3, [r2, #0]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	200053f4 	.word	0x200053f4
 80068a0:	200053e0 	.word	0x200053e0
 80068a4:	200053d4 	.word	0x200053d4
 80068a8:	20004efc 	.word	0x20004efc
 80068ac:	20004ef8 	.word	0x20004ef8

080068b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10c      	bne.n	80068da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	b672      	cpsid	i
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	b662      	cpsie	i
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <vTaskPlaceOnEventList+0x48>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3318      	adds	r3, #24
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe fe53 	bl	800558e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068e8:	2101      	movs	r1, #1
 80068ea:	6838      	ldr	r0, [r7, #0]
 80068ec:	f000 fab2 	bl	8006e54 <prvAddCurrentTaskToDelayedList>
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20004ef8 	.word	0x20004ef8

080068fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10c      	bne.n	8006928 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	b672      	cpsid	i
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	b662      	cpsie	i
 8006922:	617b      	str	r3, [r7, #20]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <vTaskPlaceOnEventListRestricted+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3318      	adds	r3, #24
 800692e:	4619      	mov	r1, r3
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7fe fe08 	bl	8005546 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800693c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006940:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	68b8      	ldr	r0, [r7, #8]
 8006946:	f000 fa85 	bl	8006e54 <prvAddCurrentTaskToDelayedList>
	}
 800694a:	bf00      	nop
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20004ef8 	.word	0x20004ef8

08006958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10c      	bne.n	8006988 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	b672      	cpsid	i
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	b662      	cpsie	i
 8006982:	60fb      	str	r3, [r7, #12]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3318      	adds	r3, #24
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe fe37 	bl	8005600 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006992:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <xTaskRemoveFromEventList+0xb4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d11d      	bne.n	80069d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3304      	adds	r3, #4
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe fe2e 	bl	8005600 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <xTaskRemoveFromEventList+0xb8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <xTaskRemoveFromEventList+0x60>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <xTaskRemoveFromEventList+0xb8>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <xTaskRemoveFromEventList+0xbc>)
 80069c6:	441a      	add	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fe fdb9 	bl	8005546 <vListInsertEnd>
 80069d4:	e005      	b.n	80069e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3318      	adds	r3, #24
 80069da:	4619      	mov	r1, r3
 80069dc:	480e      	ldr	r0, [pc, #56]	; (8006a18 <xTaskRemoveFromEventList+0xc0>)
 80069de:	f7fe fdb2 	bl	8005546 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <xTaskRemoveFromEventList+0xc4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d905      	bls.n	80069fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069f0:	2301      	movs	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069f4:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <xTaskRemoveFromEventList+0xc8>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	e001      	b.n	8006a00 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a00:	697b      	ldr	r3, [r7, #20]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200053f4 	.word	0x200053f4
 8006a10:	200053d4 	.word	0x200053d4
 8006a14:	20004efc 	.word	0x20004efc
 8006a18:	2000538c 	.word	0x2000538c
 8006a1c:	20004ef8 	.word	0x20004ef8
 8006a20:	200053e0 	.word	0x200053e0

08006a24 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10c      	bne.n	8006a4c <vTaskSetTimeOutState+0x28>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	b672      	cpsid	i
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	b662      	cpsie	i
 8006a46:	60fb      	str	r3, [r7, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8006a4c:	f000 febe 	bl	80077cc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <vTaskSetTimeOutState+0x48>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <vTaskSetTimeOutState+0x4c>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006a60:	f000 fee8 	bl	8007834 <vPortExitCritical>
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200053e4 	.word	0x200053e4
 8006a70:	200053d0 	.word	0x200053d0

08006a74 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <vTaskInternalSetTimeOutState+0x24>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <vTaskInternalSetTimeOutState+0x28>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	605a      	str	r2, [r3, #4]
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	200053e4 	.word	0x200053e4
 8006a9c:	200053d0 	.word	0x200053d0

08006aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10c      	bne.n	8006aca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	b672      	cpsid	i
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	b662      	cpsie	i
 8006ac4:	613b      	str	r3, [r7, #16]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10c      	bne.n	8006aea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	b672      	cpsid	i
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	b662      	cpsie	i
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006aea:	f000 fe6f 	bl	80077cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006aee:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <xTaskCheckForTimeOut+0xc4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b06:	d102      	bne.n	8006b0e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61fb      	str	r3, [r7, #28]
 8006b0c:	e023      	b.n	8006b56 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <xTaskCheckForTimeOut+0xc8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d007      	beq.n	8006b2a <xTaskCheckForTimeOut+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e015      	b.n	8006b56 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d20b      	bcs.n	8006b4c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ff97 	bl	8006a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e004      	b.n	8006b56 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b56:	f000 fe6d 	bl	8007834 <vPortExitCritical>

	return xReturn;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	200053d0 	.word	0x200053d0
 8006b68:	200053e4 	.word	0x200053e4

08006b6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b70:	4b03      	ldr	r3, [pc, #12]	; (8006b80 <vTaskMissedYield+0x14>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	601a      	str	r2, [r3, #0]
}
 8006b76:	bf00      	nop
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	200053e0 	.word	0x200053e0

08006b84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b8c:	f000 f852 	bl	8006c34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <prvIdleTask+0x28>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d9f9      	bls.n	8006b8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <prvIdleTask+0x2c>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ba8:	e7f0      	b.n	8006b8c <prvIdleTask+0x8>
 8006baa:	bf00      	nop
 8006bac:	20004efc 	.word	0x20004efc
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
 8006bbe:	e00c      	b.n	8006bda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4a12      	ldr	r2, [pc, #72]	; (8006c14 <prvInitialiseTaskLists+0x60>)
 8006bcc:	4413      	add	r3, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fe fc8c 	bl	80054ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b37      	cmp	r3, #55	; 0x37
 8006bde:	d9ef      	bls.n	8006bc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006be0:	480d      	ldr	r0, [pc, #52]	; (8006c18 <prvInitialiseTaskLists+0x64>)
 8006be2:	f7fe fc83 	bl	80054ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006be6:	480d      	ldr	r0, [pc, #52]	; (8006c1c <prvInitialiseTaskLists+0x68>)
 8006be8:	f7fe fc80 	bl	80054ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bec:	480c      	ldr	r0, [pc, #48]	; (8006c20 <prvInitialiseTaskLists+0x6c>)
 8006bee:	f7fe fc7d 	bl	80054ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bf2:	480c      	ldr	r0, [pc, #48]	; (8006c24 <prvInitialiseTaskLists+0x70>)
 8006bf4:	f7fe fc7a 	bl	80054ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bf8:	480b      	ldr	r0, [pc, #44]	; (8006c28 <prvInitialiseTaskLists+0x74>)
 8006bfa:	f7fe fc77 	bl	80054ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <prvInitialiseTaskLists+0x78>)
 8006c00:	4a05      	ldr	r2, [pc, #20]	; (8006c18 <prvInitialiseTaskLists+0x64>)
 8006c02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <prvInitialiseTaskLists+0x7c>)
 8006c06:	4a05      	ldr	r2, [pc, #20]	; (8006c1c <prvInitialiseTaskLists+0x68>)
 8006c08:	601a      	str	r2, [r3, #0]
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20004efc 	.word	0x20004efc
 8006c18:	2000535c 	.word	0x2000535c
 8006c1c:	20005370 	.word	0x20005370
 8006c20:	2000538c 	.word	0x2000538c
 8006c24:	200053a0 	.word	0x200053a0
 8006c28:	200053b8 	.word	0x200053b8
 8006c2c:	20005384 	.word	0x20005384
 8006c30:	20005388 	.word	0x20005388

08006c34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c3a:	e019      	b.n	8006c70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c3c:	f000 fdc6 	bl	80077cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c40:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <prvCheckTasksWaitingTermination+0x50>)
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fe fcd7 	bl	8005600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <prvCheckTasksWaitingTermination+0x54>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	4a0b      	ldr	r2, [pc, #44]	; (8006c88 <prvCheckTasksWaitingTermination+0x54>)
 8006c5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c5c:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <prvCheckTasksWaitingTermination+0x58>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <prvCheckTasksWaitingTermination+0x58>)
 8006c64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c66:	f000 fde5 	bl	8007834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f810 	bl	8006c90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <prvCheckTasksWaitingTermination+0x58>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e1      	bne.n	8006c3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	200053a0 	.word	0x200053a0
 8006c88:	200053cc 	.word	0x200053cc
 8006c8c:	200053b4 	.word	0x200053b4

08006c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d108      	bne.n	8006cb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 ff86 	bl	8007bb8 <vPortFree>
				vPortFree( pxTCB );
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 ff83 	bl	8007bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cb2:	e01a      	b.n	8006cea <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d103      	bne.n	8006cc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 ff7a 	bl	8007bb8 <vPortFree>
	}
 8006cc4:	e011      	b.n	8006cea <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d00c      	beq.n	8006cea <prvDeleteTCB+0x5a>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	b672      	cpsid	i
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	b662      	cpsie	i
 8006ce4:	60fb      	str	r3, [r7, #12]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <prvDeleteTCB+0x58>
	}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <prvResetNextTaskUnblockTime+0x38>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <prvResetNextTaskUnblockTime+0x3c>)
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d0c:	e008      	b.n	8006d20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <prvResetNextTaskUnblockTime+0x38>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4a04      	ldr	r2, [pc, #16]	; (8006d30 <prvResetNextTaskUnblockTime+0x3c>)
 8006d1e:	6013      	str	r3, [r2, #0]
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	20005384 	.word	0x20005384
 8006d30:	200053ec 	.word	0x200053ec

08006d34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <xTaskGetSchedulerState+0x34>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d42:	2301      	movs	r3, #1
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	e008      	b.n	8006d5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <xTaskGetSchedulerState+0x38>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d50:	2302      	movs	r3, #2
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	e001      	b.n	8006d5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d5a:	687b      	ldr	r3, [r7, #4]
	}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	200053d8 	.word	0x200053d8
 8006d6c:	200053f4 	.word	0x200053f4

08006d70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d05a      	beq.n	8006e3c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d86:	4b30      	ldr	r3, [pc, #192]	; (8006e48 <xTaskPriorityDisinherit+0xd8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d00c      	beq.n	8006daa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	b672      	cpsid	i
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	b662      	cpsie	i
 8006da4:	60fb      	str	r3, [r7, #12]
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10c      	bne.n	8006dcc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	b672      	cpsid	i
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	b662      	cpsie	i
 8006dc6:	60bb      	str	r3, [r7, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	1e5a      	subs	r2, r3, #1
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d02c      	beq.n	8006e3c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d128      	bne.n	8006e3c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3304      	adds	r3, #4
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fc06 	bl	8005600 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <xTaskPriorityDisinherit+0xdc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d903      	bls.n	8006e1c <xTaskPriorityDisinherit+0xac>
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	4a0c      	ldr	r2, [pc, #48]	; (8006e4c <xTaskPriorityDisinherit+0xdc>)
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <xTaskPriorityDisinherit+0xe0>)
 8006e2a:	441a      	add	r2, r3
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f7fe fb87 	bl	8005546 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e3c:	697b      	ldr	r3, [r7, #20]
	}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20004ef8 	.word	0x20004ef8
 8006e4c:	200053d4 	.word	0x200053d4
 8006e50:	20004efc 	.word	0x20004efc

08006e54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e64:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fbc8 	bl	8005600 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e76:	d10a      	bne.n	8006e8e <prvAddCurrentTaskToDelayedList+0x3a>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4619      	mov	r1, r3
 8006e86:	4819      	ldr	r0, [pc, #100]	; (8006eec <prvAddCurrentTaskToDelayedList+0x98>)
 8006e88:	f7fe fb5d 	bl	8005546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e8c:	e026      	b.n	8006edc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d209      	bcs.n	8006eba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f7fe fb6b 	bl	800558e <vListInsert>
}
 8006eb8:	e010      	b.n	8006edc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eba:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f7fe fb61 	bl	800558e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d202      	bcs.n	8006edc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ed6:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6013      	str	r3, [r2, #0]
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	200053d0 	.word	0x200053d0
 8006ee8:	20004ef8 	.word	0x20004ef8
 8006eec:	200053b8 	.word	0x200053b8
 8006ef0:	20005388 	.word	0x20005388
 8006ef4:	20005384 	.word	0x20005384
 8006ef8:	200053ec 	.word	0x200053ec

08006efc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f06:	f000 fb15 	bl	8007534 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f0a:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <xTimerCreateTimerTask+0x84>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d021      	beq.n	8006f56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f1a:	1d3a      	adds	r2, r7, #4
 8006f1c:	f107 0108 	add.w	r1, r7, #8
 8006f20:	f107 030c 	add.w	r3, r7, #12
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fe fac7 	bl	80054b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	9202      	str	r2, [sp, #8]
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	2302      	movs	r3, #2
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	460a      	mov	r2, r1
 8006f3c:	4911      	ldr	r1, [pc, #68]	; (8006f84 <xTimerCreateTimerTask+0x88>)
 8006f3e:	4812      	ldr	r0, [pc, #72]	; (8006f88 <xTimerCreateTimerTask+0x8c>)
 8006f40:	f7ff f892 	bl	8006068 <xTaskCreateStatic>
 8006f44:	4603      	mov	r3, r0
 8006f46:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <xTimerCreateTimerTask+0x90>)
 8006f48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <xTimerCreateTimerTask+0x90>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f52:	2301      	movs	r3, #1
 8006f54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10c      	bne.n	8006f76 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	b672      	cpsid	i
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	b662      	cpsie	i
 8006f70:	613b      	str	r3, [r7, #16]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006f76:	697b      	ldr	r3, [r7, #20]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20005428 	.word	0x20005428
 8006f84:	080128ac 	.word	0x080128ac
 8006f88:	080070cd 	.word	0x080070cd
 8006f8c:	2000542c 	.word	0x2000542c

08006f90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10c      	bne.n	8006fc2 <xTimerGenericCommand+0x32>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	b672      	cpsid	i
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	b662      	cpsie	i
 8006fbc:	623b      	str	r3, [r7, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fc2:	4b1a      	ldr	r3, [pc, #104]	; (800702c <xTimerGenericCommand+0x9c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d02a      	beq.n	8007020 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b05      	cmp	r3, #5
 8006fda:	dc18      	bgt.n	800700e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fdc:	f7ff feaa 	bl	8006d34 <xTaskGetSchedulerState>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d109      	bne.n	8006ffa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fe6:	4b11      	ldr	r3, [pc, #68]	; (800702c <xTimerGenericCommand+0x9c>)
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f107 0110 	add.w	r1, r7, #16
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff2:	f7fe fc3f 	bl	8005874 <xQueueGenericSend>
 8006ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ff8:	e012      	b.n	8007020 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <xTimerGenericCommand+0x9c>)
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	f107 0110 	add.w	r1, r7, #16
 8007002:	2300      	movs	r3, #0
 8007004:	2200      	movs	r2, #0
 8007006:	f7fe fc35 	bl	8005874 <xQueueGenericSend>
 800700a:	6278      	str	r0, [r7, #36]	; 0x24
 800700c:	e008      	b.n	8007020 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <xTimerGenericCommand+0x9c>)
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f107 0110 	add.w	r1, r7, #16
 8007016:	2300      	movs	r3, #0
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	f7fe fd31 	bl	8005a80 <xQueueGenericSendFromISR>
 800701e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007022:	4618      	mov	r0, r3
 8007024:	3728      	adds	r7, #40	; 0x28
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20005428 	.word	0x20005428

08007030 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af02      	add	r7, sp, #8
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <prvProcessExpiredTimer+0x98>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	3304      	adds	r3, #4
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fad9 	bl	8005600 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d024      	beq.n	80070a6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	18d1      	adds	r1, r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	6978      	ldr	r0, [r7, #20]
 800706a:	f000 f8d3 	bl	8007214 <prvInsertTimerInActiveList>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d021      	beq.n	80070b8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007074:	2300      	movs	r3, #0
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2300      	movs	r3, #0
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	2100      	movs	r1, #0
 800707e:	6978      	ldr	r0, [r7, #20]
 8007080:	f7ff ff86 	bl	8006f90 <xTimerGenericCommand>
 8007084:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d115      	bne.n	80070b8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	b672      	cpsid	i
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	b662      	cpsie	i
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	4798      	blx	r3
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20005420 	.word	0x20005420

080070cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f857 	bl	800718c <prvGetNextExpireTime>
 80070de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4619      	mov	r1, r3
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f803 	bl	80070f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070ea:	f000 f8d5 	bl	8007298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070ee:	e7f1      	b.n	80070d4 <prvTimerTask+0x8>

080070f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070fa:	f7ff f9ff 	bl	80064fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f866 	bl	80071d4 <prvSampleTimeNow>
 8007108:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d130      	bne.n	8007172 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <prvProcessTimerOrBlockTask+0x3c>
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	429a      	cmp	r2, r3
 800711c:	d806      	bhi.n	800712c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800711e:	f7ff f9fb 	bl	8006518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ff83 	bl	8007030 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800712a:	e024      	b.n	8007176 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007132:	4b13      	ldr	r3, [pc, #76]	; (8007180 <prvProcessTimerOrBlockTask+0x90>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <prvProcessTimerOrBlockTask+0x50>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <prvProcessTimerOrBlockTask+0x52>
 8007140:	2300      	movs	r3, #0
 8007142:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <prvProcessTimerOrBlockTask+0x94>)
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	f7fe ff55 	bl	8006000 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007156:	f7ff f9df 	bl	8006518 <xTaskResumeAll>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <prvProcessTimerOrBlockTask+0x98>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
}
 8007170:	e001      	b.n	8007176 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007172:	f7ff f9d1 	bl	8006518 <xTaskResumeAll>
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20005424 	.word	0x20005424
 8007184:	20005428 	.word	0x20005428
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <prvGetNextExpireTime+0x44>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <prvGetNextExpireTime+0x16>
 800719e:	2201      	movs	r2, #1
 80071a0:	e000      	b.n	80071a4 <prvGetNextExpireTime+0x18>
 80071a2:	2200      	movs	r2, #0
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <prvGetNextExpireTime+0x44>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e001      	b.n	80071c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20005420 	.word	0x20005420

080071d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071dc:	f7ff fa3c 	bl	8006658 <xTaskGetTickCount>
 80071e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071e2:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <prvSampleTimeNow+0x3c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d205      	bcs.n	80071f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071ec:	f000 f93c 	bl	8007468 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e002      	b.n	80071fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071fe:	4a04      	ldr	r2, [pc, #16]	; (8007210 <prvSampleTimeNow+0x3c>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007204:	68fb      	ldr	r3, [r7, #12]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20005430 	.word	0x20005430

08007214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d812      	bhi.n	8007260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	d302      	bcc.n	800724e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	e01b      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <prvInsertTimerInActiveList+0x7c>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f7fe f998 	bl	800558e <vListInsert>
 800725e:	e012      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d206      	bcs.n	8007276 <prvInsertTimerInActiveList+0x62>
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	429a      	cmp	r2, r3
 800726e:	d302      	bcc.n	8007276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e007      	b.n	8007286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <prvInsertTimerInActiveList+0x80>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3304      	adds	r3, #4
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f7fe f984 	bl	800558e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007286:	697b      	ldr	r3, [r7, #20]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20005424 	.word	0x20005424
 8007294:	20005420 	.word	0x20005420

08007298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08e      	sub	sp, #56	; 0x38
 800729c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800729e:	e0d0      	b.n	8007442 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da1a      	bge.n	80072dc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	3304      	adds	r3, #4
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10c      	bne.n	80072cc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	b672      	cpsid	i
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	b662      	cpsie	i
 80072c6:	61fb      	str	r3, [r7, #28]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	6850      	ldr	r0, [r2, #4]
 80072d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d6:	6892      	ldr	r2, [r2, #8]
 80072d8:	4611      	mov	r1, r2
 80072da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f2c0 80ae 	blt.w	8007440 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe f983 	bl	8005600 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072fa:	463b      	mov	r3, r7
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff69 	bl	80071d4 <prvSampleTimeNow>
 8007302:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b09      	cmp	r3, #9
 8007308:	f200 809b 	bhi.w	8007442 <prvProcessReceivedCommands+0x1aa>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <prvProcessReceivedCommands+0x7c>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	0800733d 	.word	0x0800733d
 8007318:	0800733d 	.word	0x0800733d
 800731c:	0800733d 	.word	0x0800733d
 8007320:	080073b5 	.word	0x080073b5
 8007324:	080073c9 	.word	0x080073c9
 8007328:	08007417 	.word	0x08007417
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800733d 	.word	0x0800733d
 8007334:	080073b5 	.word	0x080073b5
 8007338:	080073c9 	.word	0x080073c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	18d1      	adds	r1, r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735c:	f7ff ff5a 	bl	8007214 <prvInsertTimerInActiveList>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d06d      	beq.n	8007442 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d062      	beq.n	8007442 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	441a      	add	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	2300      	movs	r3, #0
 800738a:	2100      	movs	r1, #0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7ff fdff 	bl	8006f90 <xTimerGenericCommand>
 8007392:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d153      	bne.n	8007442 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	b672      	cpsid	i
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	b662      	cpsie	i
 80073ae:	61bb      	str	r3, [r7, #24]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ba:	f023 0301 	bic.w	r3, r3, #1
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073c6:	e03c      	b.n	8007442 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ce:	f043 0301 	orr.w	r3, r3, #1
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10c      	bne.n	8007402 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	b672      	cpsid	i
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	b662      	cpsie	i
 80073fc:	617b      	str	r3, [r7, #20]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	18d1      	adds	r1, r2, r3
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800740e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007410:	f7ff ff00 	bl	8007214 <prvInsertTimerInActiveList>
					break;
 8007414:	e015      	b.n	8007442 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007426:	f000 fbc7 	bl	8007bb8 <vPortFree>
 800742a:	e00a      	b.n	8007442 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007432:	f023 0301 	bic.w	r3, r3, #1
 8007436:	b2da      	uxtb	r2, r3
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800743e:	e000      	b.n	8007442 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007442:	4b08      	ldr	r3, [pc, #32]	; (8007464 <prvProcessReceivedCommands+0x1cc>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	1d39      	adds	r1, r7, #4
 8007448:	2200      	movs	r2, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fbb8 	bl	8005bc0 <xQueueReceive>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	f47f af24 	bne.w	80072a0 <prvProcessReceivedCommands+0x8>
	}
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	3730      	adds	r7, #48	; 0x30
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20005428 	.word	0x20005428

08007468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800746e:	e04a      	b.n	8007506 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007470:	4b2e      	ldr	r3, [pc, #184]	; (800752c <prvSwitchTimerLists+0xc4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747a:	4b2c      	ldr	r3, [pc, #176]	; (800752c <prvSwitchTimerLists+0xc4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3304      	adds	r3, #4
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe f8b9 	bl	8005600 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d030      	beq.n	8007506 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4413      	add	r3, r2
 80074ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d90e      	bls.n	80074d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074c2:	4b1a      	ldr	r3, [pc, #104]	; (800752c <prvSwitchTimerLists+0xc4>)
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f7fe f85e 	bl	800558e <vListInsert>
 80074d2:	e018      	b.n	8007506 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074d4:	2300      	movs	r3, #0
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	2300      	movs	r3, #0
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	2100      	movs	r1, #0
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff fd56 	bl	8006f90 <xTimerGenericCommand>
 80074e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10c      	bne.n	8007506 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	b672      	cpsid	i
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	b662      	cpsie	i
 8007500:	603b      	str	r3, [r7, #0]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007506:	4b09      	ldr	r3, [pc, #36]	; (800752c <prvSwitchTimerLists+0xc4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1af      	bne.n	8007470 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007510:	4b06      	ldr	r3, [pc, #24]	; (800752c <prvSwitchTimerLists+0xc4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007516:	4b06      	ldr	r3, [pc, #24]	; (8007530 <prvSwitchTimerLists+0xc8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a04      	ldr	r2, [pc, #16]	; (800752c <prvSwitchTimerLists+0xc4>)
 800751c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800751e:	4a04      	ldr	r2, [pc, #16]	; (8007530 <prvSwitchTimerLists+0xc8>)
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	6013      	str	r3, [r2, #0]
}
 8007524:	bf00      	nop
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20005420 	.word	0x20005420
 8007530:	20005424 	.word	0x20005424

08007534 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800753a:	f000 f947 	bl	80077cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800753e:	4b15      	ldr	r3, [pc, #84]	; (8007594 <prvCheckForValidListAndQueue+0x60>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d120      	bne.n	8007588 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007546:	4814      	ldr	r0, [pc, #80]	; (8007598 <prvCheckForValidListAndQueue+0x64>)
 8007548:	f7fd ffd0 	bl	80054ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800754c:	4813      	ldr	r0, [pc, #76]	; (800759c <prvCheckForValidListAndQueue+0x68>)
 800754e:	f7fd ffcd 	bl	80054ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <prvCheckForValidListAndQueue+0x6c>)
 8007554:	4a10      	ldr	r2, [pc, #64]	; (8007598 <prvCheckForValidListAndQueue+0x64>)
 8007556:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007558:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <prvCheckForValidListAndQueue+0x70>)
 800755a:	4a10      	ldr	r2, [pc, #64]	; (800759c <prvCheckForValidListAndQueue+0x68>)
 800755c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800755e:	2300      	movs	r3, #0
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <prvCheckForValidListAndQueue+0x74>)
 8007564:	4a11      	ldr	r2, [pc, #68]	; (80075ac <prvCheckForValidListAndQueue+0x78>)
 8007566:	2110      	movs	r1, #16
 8007568:	200a      	movs	r0, #10
 800756a:	f7fe f8dd 	bl	8005728 <xQueueGenericCreateStatic>
 800756e:	4603      	mov	r3, r0
 8007570:	4a08      	ldr	r2, [pc, #32]	; (8007594 <prvCheckForValidListAndQueue+0x60>)
 8007572:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007574:	4b07      	ldr	r3, [pc, #28]	; (8007594 <prvCheckForValidListAndQueue+0x60>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d005      	beq.n	8007588 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <prvCheckForValidListAndQueue+0x60>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	490b      	ldr	r1, [pc, #44]	; (80075b0 <prvCheckForValidListAndQueue+0x7c>)
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fd12 	bl	8005fac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007588:	f000 f954 	bl	8007834 <vPortExitCritical>
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20005428 	.word	0x20005428
 8007598:	200053f8 	.word	0x200053f8
 800759c:	2000540c 	.word	0x2000540c
 80075a0:	20005420 	.word	0x20005420
 80075a4:	20005424 	.word	0x20005424
 80075a8:	200054d4 	.word	0x200054d4
 80075ac:	20005434 	.word	0x20005434
 80075b0:	080128b4 	.word	0x080128b4

080075b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3b04      	subs	r3, #4
 80075c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3b04      	subs	r3, #4
 80075d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0201 	bic.w	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <pxPortInitialiseStack+0x64>)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3b14      	subs	r3, #20
 80075ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3b04      	subs	r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f06f 0202 	mvn.w	r2, #2
 8007602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3b20      	subs	r3, #32
 8007608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	0800761d 	.word	0x0800761d

0800761c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <prvTaskExitError+0x5c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762e:	d00c      	beq.n	800764a <prvTaskExitError+0x2e>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	b672      	cpsid	i
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	b662      	cpsie	i
 8007644:	60fb      	str	r3, [r7, #12]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <prvTaskExitError+0x2c>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	b672      	cpsid	i
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	b662      	cpsie	i
 800765e:	60bb      	str	r3, [r7, #8]
}
 8007660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007662:	bf00      	nop
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0fc      	beq.n	8007664 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	20000010 	.word	0x20000010
 800767c:	00000000 	.word	0x00000000

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	4770      	bx	lr
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst2>:
 80076a0:	20004ef8 	.word	0x20004ef8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076a8:	4808      	ldr	r0, [pc, #32]	; (80076cc <prvPortStartFirstTask+0x24>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8814 	msr	CONTROL, r0
 80076ba:	b662      	cpsie	i
 80076bc:	b661      	cpsie	f
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	df00      	svc	0
 80076c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ca:	bf00      	nop
 80076cc:	e000ed08 	.word	0xe000ed08

080076d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076d6:	4b37      	ldr	r3, [pc, #220]	; (80077b4 <xPortStartScheduler+0xe4>)
 80076d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	22ff      	movs	r2, #255	; 0xff
 80076e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <xPortStartScheduler+0xe8>)
 80076fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076fe:	4b2f      	ldr	r3, [pc, #188]	; (80077bc <xPortStartScheduler+0xec>)
 8007700:	2207      	movs	r2, #7
 8007702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007704:	e009      	b.n	800771a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007706:	4b2d      	ldr	r3, [pc, #180]	; (80077bc <xPortStartScheduler+0xec>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3b01      	subs	r3, #1
 800770c:	4a2b      	ldr	r2, [pc, #172]	; (80077bc <xPortStartScheduler+0xec>)
 800770e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	b2db      	uxtb	r3, r3
 8007718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b80      	cmp	r3, #128	; 0x80
 8007724:	d0ef      	beq.n	8007706 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007726:	4b25      	ldr	r3, [pc, #148]	; (80077bc <xPortStartScheduler+0xec>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f1c3 0307 	rsb	r3, r3, #7
 800772e:	2b04      	cmp	r3, #4
 8007730:	d00c      	beq.n	800774c <xPortStartScheduler+0x7c>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	b672      	cpsid	i
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	b662      	cpsie	i
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800774c:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <xPortStartScheduler+0xec>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <xPortStartScheduler+0xec>)
 8007754:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007756:	4b19      	ldr	r3, [pc, #100]	; (80077bc <xPortStartScheduler+0xec>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800775e:	4a17      	ldr	r2, [pc, #92]	; (80077bc <xPortStartScheduler+0xec>)
 8007760:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800776a:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <xPortStartScheduler+0xf0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a14      	ldr	r2, [pc, #80]	; (80077c0 <xPortStartScheduler+0xf0>)
 8007770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007774:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007776:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <xPortStartScheduler+0xf0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <xPortStartScheduler+0xf0>)
 800777c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007780:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007782:	f000 f8dd 	bl	8007940 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <xPortStartScheduler+0xf4>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800778c:	f000 f8fc 	bl	8007988 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <xPortStartScheduler+0xf8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <xPortStartScheduler+0xf8>)
 8007796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800779a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800779c:	f7ff ff84 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077a0:	f7ff f826 	bl	80067f0 <vTaskSwitchContext>
	prvTaskExitError();
 80077a4:	f7ff ff3a 	bl	800761c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	e000e400 	.word	0xe000e400
 80077b8:	20005524 	.word	0x20005524
 80077bc:	20005528 	.word	0x20005528
 80077c0:	e000ed20 	.word	0xe000ed20
 80077c4:	20000010 	.word	0x20000010
 80077c8:	e000ef34 	.word	0xe000ef34

080077cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	b672      	cpsid	i
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	b662      	cpsie	i
 80077e6:	607b      	str	r3, [r7, #4]
}
 80077e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077ea:	4b10      	ldr	r3, [pc, #64]	; (800782c <vPortEnterCritical+0x60>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4a0e      	ldr	r2, [pc, #56]	; (800782c <vPortEnterCritical+0x60>)
 80077f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077f4:	4b0d      	ldr	r3, [pc, #52]	; (800782c <vPortEnterCritical+0x60>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d111      	bne.n	8007820 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <vPortEnterCritical+0x64>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <vPortEnterCritical+0x54>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	b672      	cpsid	i
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	b662      	cpsie	i
 800781a:	603b      	str	r3, [r7, #0]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vPortEnterCritical+0x52>
	}
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20000010 	.word	0x20000010
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800783a:	4b13      	ldr	r3, [pc, #76]	; (8007888 <vPortExitCritical+0x54>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10c      	bne.n	800785c <vPortExitCritical+0x28>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	b672      	cpsid	i
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	b662      	cpsie	i
 8007856:	607b      	str	r3, [r7, #4]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <vPortExitCritical+0x54>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3b01      	subs	r3, #1
 8007862:	4a09      	ldr	r2, [pc, #36]	; (8007888 <vPortExitCritical+0x54>)
 8007864:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007866:	4b08      	ldr	r3, [pc, #32]	; (8007888 <vPortExitCritical+0x54>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <vPortExitCritical+0x46>
 800786e:	2300      	movs	r3, #0
 8007870:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	f383 8811 	msr	BASEPRI, r3
}
 8007878:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20000010 	.word	0x20000010
 800788c:	00000000 	.word	0x00000000

08007890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007890:	f3ef 8009 	mrs	r0, PSP
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <pxCurrentTCBConst>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f01e 0f10 	tst.w	lr, #16
 80078a0:	bf08      	it	eq
 80078a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	6010      	str	r0, [r2, #0]
 80078ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078b4:	b672      	cpsid	i
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	b662      	cpsie	i
 80078c4:	f7fe ff94 	bl	80067f0 <vTaskSwitchContext>
 80078c8:	f04f 0000 	mov.w	r0, #0
 80078cc:	f380 8811 	msr	BASEPRI, r0
 80078d0:	bc09      	pop	{r0, r3}
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	f01e 0f10 	tst.w	lr, #16
 80078de:	bf08      	it	eq
 80078e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078e4:	f380 8809 	msr	PSP, r0
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <pxCurrentTCBConst>:
 80078f0:	20004ef8 	.word	0x20004ef8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	b672      	cpsid	i
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	b662      	cpsie	i
 8007912:	607b      	str	r3, [r7, #4]
}
 8007914:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007916:	f7fe feaf 	bl	8006678 <xTaskIncrementTick>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <SysTick_Handler+0x44>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	2300      	movs	r3, #0
 800792a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f383 8811 	msr	BASEPRI, r3
}
 8007932:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007944:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <vPortSetupTimerInterrupt+0x34>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800794a:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <vPortSetupTimerInterrupt+0x38>)
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <vPortSetupTimerInterrupt+0x3c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <vPortSetupTimerInterrupt+0x40>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	099b      	lsrs	r3, r3, #6
 800795c:	4a09      	ldr	r2, [pc, #36]	; (8007984 <vPortSetupTimerInterrupt+0x44>)
 800795e:	3b01      	subs	r3, #1
 8007960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007962:	4b04      	ldr	r3, [pc, #16]	; (8007974 <vPortSetupTimerInterrupt+0x34>)
 8007964:	2207      	movs	r2, #7
 8007966:	601a      	str	r2, [r3, #0]
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	e000e010 	.word	0xe000e010
 8007978:	e000e018 	.word	0xe000e018
 800797c:	20000004 	.word	0x20000004
 8007980:	10624dd3 	.word	0x10624dd3
 8007984:	e000e014 	.word	0xe000e014

08007988 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007988:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007998 <vPortEnableVFP+0x10>
 800798c:	6801      	ldr	r1, [r0, #0]
 800798e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007992:	6001      	str	r1, [r0, #0]
 8007994:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007996:	bf00      	nop
 8007998:	e000ed88 	.word	0xe000ed88

0800799c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079a2:	f3ef 8305 	mrs	r3, IPSR
 80079a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b0f      	cmp	r3, #15
 80079ac:	d916      	bls.n	80079dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ae:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <vPortValidateInterruptPriority+0x78>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079b8:	4b17      	ldr	r3, [pc, #92]	; (8007a18 <vPortValidateInterruptPriority+0x7c>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	7afa      	ldrb	r2, [r7, #11]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d20c      	bcs.n	80079dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	b672      	cpsid	i
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	b662      	cpsie	i
 80079d6:	607b      	str	r3, [r7, #4]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <vPortValidateInterruptPriority+0x80>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079e4:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <vPortValidateInterruptPriority+0x84>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d90c      	bls.n	8007a06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	b672      	cpsid	i
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	b662      	cpsie	i
 8007a00:	603b      	str	r3, [r7, #0]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <vPortValidateInterruptPriority+0x68>
	}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	e000e3f0 	.word	0xe000e3f0
 8007a18:	20005524 	.word	0x20005524
 8007a1c:	e000ed0c 	.word	0xe000ed0c
 8007a20:	20005528 	.word	0x20005528

08007a24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a30:	f7fe fd64 	bl	80064fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a34:	4b5b      	ldr	r3, [pc, #364]	; (8007ba4 <pvPortMalloc+0x180>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a3c:	f000 f91a 	bl	8007c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a40:	4b59      	ldr	r3, [pc, #356]	; (8007ba8 <pvPortMalloc+0x184>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 8092 	bne.w	8007b72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01f      	beq.n	8007a94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007a54:	2208      	movs	r2, #8
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d016      	beq.n	8007a94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f023 0307 	bic.w	r3, r3, #7
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00c      	beq.n	8007a94 <pvPortMalloc+0x70>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	b672      	cpsid	i
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	b662      	cpsie	i
 8007a8e:	617b      	str	r3, [r7, #20]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d06b      	beq.n	8007b72 <pvPortMalloc+0x14e>
 8007a9a:	4b44      	ldr	r3, [pc, #272]	; (8007bac <pvPortMalloc+0x188>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d866      	bhi.n	8007b72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aa4:	4b42      	ldr	r3, [pc, #264]	; (8007bb0 <pvPortMalloc+0x18c>)
 8007aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007aa8:	4b41      	ldr	r3, [pc, #260]	; (8007bb0 <pvPortMalloc+0x18c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aae:	e004      	b.n	8007aba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <pvPortMalloc+0xa8>
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f1      	bne.n	8007ab0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007acc:	4b35      	ldr	r3, [pc, #212]	; (8007ba4 <pvPortMalloc+0x180>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d04d      	beq.n	8007b72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2208      	movs	r2, #8
 8007adc:	4413      	add	r3, r2
 8007ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	2308      	movs	r3, #8
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d921      	bls.n	8007b3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4413      	add	r3, r2
 8007afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00c      	beq.n	8007b24 <pvPortMalloc+0x100>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	b672      	cpsid	i
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	b662      	cpsie	i
 8007b1e:	613b      	str	r3, [r7, #16]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	1ad2      	subs	r2, r2, r3
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b36:	69b8      	ldr	r0, [r7, #24]
 8007b38:	f000 f8fe 	bl	8007d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b3c:	4b1b      	ldr	r3, [pc, #108]	; (8007bac <pvPortMalloc+0x188>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	4a19      	ldr	r2, [pc, #100]	; (8007bac <pvPortMalloc+0x188>)
 8007b48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b4a:	4b18      	ldr	r3, [pc, #96]	; (8007bac <pvPortMalloc+0x188>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b19      	ldr	r3, [pc, #100]	; (8007bb4 <pvPortMalloc+0x190>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d203      	bcs.n	8007b5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b56:	4b15      	ldr	r3, [pc, #84]	; (8007bac <pvPortMalloc+0x188>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a16      	ldr	r2, [pc, #88]	; (8007bb4 <pvPortMalloc+0x190>)
 8007b5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <pvPortMalloc+0x184>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b72:	f7fe fcd1 	bl	8006518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00c      	beq.n	8007b9a <pvPortMalloc+0x176>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	b672      	cpsid	i
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	b662      	cpsie	i
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <pvPortMalloc+0x174>
	return pvReturn;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3728      	adds	r7, #40	; 0x28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20009134 	.word	0x20009134
 8007ba8:	20009140 	.word	0x20009140
 8007bac:	20009138 	.word	0x20009138
 8007bb0:	2000912c 	.word	0x2000912c
 8007bb4:	2000913c 	.word	0x2000913c

08007bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d04c      	beq.n	8007c64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bca:	2308      	movs	r3, #8
 8007bcc:	425b      	negs	r3, r3
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	4b23      	ldr	r3, [pc, #140]	; (8007c6c <vPortFree+0xb4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4013      	ands	r3, r2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10c      	bne.n	8007c00 <vPortFree+0x48>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	b672      	cpsid	i
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	b662      	cpsie	i
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00c      	beq.n	8007c22 <vPortFree+0x6a>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	b672      	cpsid	i
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	b662      	cpsie	i
 8007c1c:	60bb      	str	r3, [r7, #8]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <vPortFree+0xb4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d019      	beq.n	8007c64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d115      	bne.n	8007c64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	4b0b      	ldr	r3, [pc, #44]	; (8007c6c <vPortFree+0xb4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c48:	f7fe fc58 	bl	80064fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <vPortFree+0xb8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	4a06      	ldr	r2, [pc, #24]	; (8007c70 <vPortFree+0xb8>)
 8007c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c5a:	6938      	ldr	r0, [r7, #16]
 8007c5c:	f000 f86c 	bl	8007d38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c60:	f7fe fc5a 	bl	8006518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c64:	bf00      	nop
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20009140 	.word	0x20009140
 8007c70:	20009138 	.word	0x20009138

08007c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c80:	4b27      	ldr	r3, [pc, #156]	; (8007d20 <prvHeapInit+0xac>)
 8007c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00c      	beq.n	8007ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3307      	adds	r3, #7
 8007c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0307 	bic.w	r3, r3, #7
 8007c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a1f      	ldr	r2, [pc, #124]	; (8007d20 <prvHeapInit+0xac>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cac:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <prvHeapInit+0xb0>)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <prvHeapInit+0xb0>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <prvHeapInit+0xb4>)
 8007cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <prvHeapInit+0xb4>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cde:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <prvHeapInit+0xb4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <prvHeapInit+0xb4>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <prvHeapInit+0xb8>)
 8007d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <prvHeapInit+0xbc>)
 8007d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <prvHeapInit+0xc0>)
 8007d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d12:	601a      	str	r2, [r3, #0]
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	2000552c 	.word	0x2000552c
 8007d24:	2000912c 	.word	0x2000912c
 8007d28:	20009134 	.word	0x20009134
 8007d2c:	2000913c 	.word	0x2000913c
 8007d30:	20009138 	.word	0x20009138
 8007d34:	20009140 	.word	0x20009140

08007d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d40:	4b28      	ldr	r3, [pc, #160]	; (8007de4 <prvInsertBlockIntoFreeList+0xac>)
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e002      	b.n	8007d4c <prvInsertBlockIntoFreeList+0x14>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d8f7      	bhi.n	8007d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d108      	bne.n	8007d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	441a      	add	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	441a      	add	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d118      	bne.n	8007dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d00d      	beq.n	8007db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	441a      	add	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e008      	b.n	8007dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <prvInsertBlockIntoFreeList+0xb0>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	e003      	b.n	8007dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d002      	beq.n	8007dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	2000912c 	.word	0x2000912c
 8007de8:	20009134 	.word	0x20009134

08007dec <rcl_get_zero_initialized_publisher>:
 8007dec:	4b01      	ldr	r3, [pc, #4]	; (8007df4 <rcl_get_zero_initialized_publisher+0x8>)
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	08012904 	.word	0x08012904

08007df8 <rcl_publisher_init>:
 8007df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dfc:	b088      	sub	sp, #32
 8007dfe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007e00:	2e00      	cmp	r6, #0
 8007e02:	d06c      	beq.n	8007ede <rcl_publisher_init+0xe6>
 8007e04:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8007e08:	4605      	mov	r5, r0
 8007e0a:	460f      	mov	r7, r1
 8007e0c:	4690      	mov	r8, r2
 8007e0e:	4650      	mov	r0, sl
 8007e10:	4699      	mov	r9, r3
 8007e12:	f000 f9f9 	bl	8008208 <rcutils_allocator_is_valid>
 8007e16:	f080 0401 	eor.w	r4, r0, #1
 8007e1a:	b2e4      	uxtb	r4, r4
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	d15e      	bne.n	8007ede <rcl_publisher_init+0xe6>
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	d05c      	beq.n	8007ede <rcl_publisher_init+0xe6>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b123      	cbz	r3, 8007e32 <rcl_publisher_init+0x3a>
 8007e28:	2464      	movs	r4, #100	; 0x64
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	b008      	add	sp, #32
 8007e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e32:	4638      	mov	r0, r7
 8007e34:	f005 f820 	bl	800ce78 <rcl_node_is_valid>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d055      	beq.n	8007ee8 <rcl_publisher_init+0xf0>
 8007e3c:	f1b8 0f00 	cmp.w	r8, #0
 8007e40:	d04d      	beq.n	8007ede <rcl_publisher_init+0xe6>
 8007e42:	fab9 f389 	clz	r3, r9
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	f1b9 0f00 	cmp.w	r9, #0
 8007e4c:	d047      	beq.n	8007ede <rcl_publisher_init+0xe6>
 8007e4e:	aa07      	add	r2, sp, #28
 8007e50:	9307      	str	r3, [sp, #28]
 8007e52:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007e56:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8007e5a:	9205      	str	r2, [sp, #20]
 8007e5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007e64:	4649      	mov	r1, r9
 8007e66:	4638      	mov	r0, r7
 8007e68:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8007e6c:	f005 f87c 	bl	800cf68 <rcl_node_resolve_name>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d150      	bne.n	8007f16 <rcl_publisher_init+0x11e>
 8007e74:	21c8      	movs	r1, #200	; 0xc8
 8007e76:	2001      	movs	r0, #1
 8007e78:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 8007e7c:	4798      	blx	r3
 8007e7e:	6028      	str	r0, [r5, #0]
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d050      	beq.n	8007f26 <rcl_publisher_init+0x12e>
 8007e84:	4638      	mov	r0, r7
 8007e86:	f005 f819 	bl	800cebc <rcl_node_get_rmw_handle>
 8007e8a:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8007e8e:	4641      	mov	r1, r8
 8007e90:	9a07      	ldr	r2, [sp, #28]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	4633      	mov	r3, r6
 8007e96:	682c      	ldr	r4, [r5, #0]
 8007e98:	f000 fa74 	bl	8008384 <rmw_create_publisher>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8007ea2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007ea6:	b370      	cbz	r0, 8007f06 <rcl_publisher_init+0x10e>
 8007ea8:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007eac:	f000 fb4e 	bl	800854c <rmw_publisher_get_actual_qos>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	b9d0      	cbnz	r0, 8007eec <rcl_publisher_init+0xf4>
 8007eb6:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8007ec2:	2270      	movs	r2, #112	; 0x70
 8007ec4:	f009 f908 	bl	80110d8 <memcpy>
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8007ece:	9807      	ldr	r0, [sp, #28]
 8007ed0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8007ed2:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8007ed4:	4798      	blx	r3
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	b008      	add	sp, #32
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	240b      	movs	r4, #11
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	b008      	add	sp, #32
 8007ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee8:	24c8      	movs	r4, #200	; 0xc8
 8007eea:	e79e      	b.n	8007e2a <rcl_publisher_init+0x32>
 8007eec:	b1cb      	cbz	r3, 8007f22 <rcl_publisher_init+0x12a>
 8007eee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007ef2:	b142      	cbz	r2, 8007f06 <rcl_publisher_init+0x10e>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f004 ffe1 	bl	800cebc <rcl_node_get_rmw_handle>
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8007f00:	f000 fb38 	bl	8008574 <rmw_destroy_publisher>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8007f0a:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8007f0c:	2401      	movs	r4, #1
 8007f0e:	4790      	blx	r2
 8007f10:	2300      	movs	r3, #0
 8007f12:	602b      	str	r3, [r5, #0]
 8007f14:	e7db      	b.n	8007ece <rcl_publisher_init+0xd6>
 8007f16:	2867      	cmp	r0, #103	; 0x67
 8007f18:	d007      	beq.n	8007f2a <rcl_publisher_init+0x132>
 8007f1a:	2869      	cmp	r0, #105	; 0x69
 8007f1c:	d005      	beq.n	8007f2a <rcl_publisher_init+0x132>
 8007f1e:	280a      	cmp	r0, #10
 8007f20:	d001      	beq.n	8007f26 <rcl_publisher_init+0x12e>
 8007f22:	2401      	movs	r4, #1
 8007f24:	e7d3      	b.n	8007ece <rcl_publisher_init+0xd6>
 8007f26:	240a      	movs	r4, #10
 8007f28:	e7d1      	b.n	8007ece <rcl_publisher_init+0xd6>
 8007f2a:	2467      	movs	r4, #103	; 0x67
 8007f2c:	e7cf      	b.n	8007ece <rcl_publisher_init+0xd6>
 8007f2e:	bf00      	nop

08007f30 <rcl_publisher_get_default_options>:
 8007f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f32:	4d1d      	ldr	r5, [pc, #116]	; (8007fa8 <rcl_publisher_get_default_options+0x78>)
 8007f34:	b08b      	sub	sp, #44	; 0x2c
 8007f36:	2250      	movs	r2, #80	; 0x50
 8007f38:	491c      	ldr	r1, [pc, #112]	; (8007fac <rcl_publisher_get_default_options+0x7c>)
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f009 f8cb 	bl	80110d8 <memcpy>
 8007f42:	a802      	add	r0, sp, #8
 8007f44:	f000 f952 	bl	80081ec <rcutils_get_default_allocator>
 8007f48:	f10d 0c08 	add.w	ip, sp, #8
 8007f4c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8007f50:	466e      	mov	r6, sp
 8007f52:	2700      	movs	r7, #0
 8007f54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007f58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007f5c:	f8dc 3000 	ldr.w	r3, [ip]
 8007f60:	4630      	mov	r0, r6
 8007f62:	f8ce 3000 	str.w	r3, [lr]
 8007f66:	f000 f98f 	bl	8008288 <rmw_get_default_publisher_options>
 8007f6a:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007f6e:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8007f72:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007f76:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f7a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8007f7e:	f004 ffa3 	bl	800cec8 <rcl_get_disable_loaned_message>
 8007f82:	b958      	cbnz	r0, 8007f9c <rcl_publisher_get_default_options+0x6c>
 8007f84:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007f88:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 8007f8c:	2270      	movs	r2, #112	; 0x70
 8007f8e:	4906      	ldr	r1, [pc, #24]	; (8007fa8 <rcl_publisher_get_default_options+0x78>)
 8007f90:	4620      	mov	r0, r4
 8007f92:	f009 f8a1 	bl	80110d8 <memcpy>
 8007f96:	4620      	mov	r0, r4
 8007f98:	b00b      	add	sp, #44	; 0x2c
 8007f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f9c:	f000 f958 	bl	8008250 <rcutils_reset_error>
 8007fa0:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 8007fa4:	e7f2      	b.n	8007f8c <rcl_publisher_get_default_options+0x5c>
 8007fa6:	bf00      	nop
 8007fa8:	20009148 	.word	0x20009148
 8007fac:	08012908 	.word	0x08012908

08007fb0 <rcl_publish>:
 8007fb0:	b1f8      	cbz	r0, 8007ff2 <rcl_publish+0x42>
 8007fb2:	6803      	ldr	r3, [r0, #0]
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	b1b3      	cbz	r3, 8007fe8 <rcl_publish+0x38>
 8007fba:	4616      	mov	r6, r2
 8007fbc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007fc0:	b192      	cbz	r2, 8007fe8 <rcl_publish+0x38>
 8007fc2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8007fc6:	460d      	mov	r5, r1
 8007fc8:	f004 fb5a 	bl	800c680 <rcl_context_is_valid>
 8007fcc:	b160      	cbz	r0, 8007fe8 <rcl_publish+0x38>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007fd4:	b140      	cbz	r0, 8007fe8 <rcl_publish+0x38>
 8007fd6:	b155      	cbz	r5, 8007fee <rcl_publish+0x3e>
 8007fd8:	4632      	mov	r2, r6
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f000 f972 	bl	80082c4 <rmw_publish>
 8007fe0:	3800      	subs	r0, #0
 8007fe2:	bf18      	it	ne
 8007fe4:	2001      	movne	r0, #1
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	200b      	movs	r0, #11
 8007ff0:	bd70      	pop	{r4, r5, r6, pc}
 8007ff2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ff6:	4770      	bx	lr

08007ff8 <rclc_support_init>:
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	b3bb      	cbz	r3, 8008070 <rclc_support_init+0x78>
 8008000:	4606      	mov	r6, r0
 8008002:	b3a8      	cbz	r0, 8008070 <rclc_support_init+0x78>
 8008004:	461c      	mov	r4, r3
 8008006:	460f      	mov	r7, r1
 8008008:	4690      	mov	r8, r2
 800800a:	f004 fcd9 	bl	800c9c0 <rcl_get_zero_initialized_init_options>
 800800e:	f104 050c 	add.w	r5, r4, #12
 8008012:	9005      	str	r0, [sp, #20]
 8008014:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008018:	e88d 0003 	stmia.w	sp, {r0, r1}
 800801c:	a805      	add	r0, sp, #20
 800801e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008022:	f004 fccf 	bl	800c9c4 <rcl_init_options_init>
 8008026:	4605      	mov	r5, r0
 8008028:	b9e0      	cbnz	r0, 8008064 <rclc_support_init+0x6c>
 800802a:	ad02      	add	r5, sp, #8
 800802c:	4628      	mov	r0, r5
 800802e:	f004 fb1d 	bl	800c66c <rcl_get_zero_initialized_context>
 8008032:	4633      	mov	r3, r6
 8008034:	aa05      	add	r2, sp, #20
 8008036:	e895 0003 	ldmia.w	r5, {r0, r1}
 800803a:	e886 0003 	stmia.w	r6, {r0, r1}
 800803e:	4641      	mov	r1, r8
 8008040:	4638      	mov	r0, r7
 8008042:	f004 fb83 	bl	800c74c <rcl_init>
 8008046:	4605      	mov	r5, r0
 8008048:	b9b8      	cbnz	r0, 800807a <rclc_support_init+0x82>
 800804a:	4622      	mov	r2, r4
 800804c:	f106 010c 	add.w	r1, r6, #12
 8008050:	2003      	movs	r0, #3
 8008052:	60b4      	str	r4, [r6, #8]
 8008054:	f005 f976 	bl	800d344 <rcl_clock_init>
 8008058:	4605      	mov	r5, r0
 800805a:	b970      	cbnz	r0, 800807a <rclc_support_init+0x82>
 800805c:	a805      	add	r0, sp, #20
 800805e:	f004 fd0d 	bl	800ca7c <rcl_init_options_fini>
 8008062:	b108      	cbz	r0, 8008068 <rclc_support_init+0x70>
 8008064:	f000 f8f4 	bl	8008250 <rcutils_reset_error>
 8008068:	4628      	mov	r0, r5
 800806a:	b006      	add	sp, #24
 800806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008070:	250b      	movs	r5, #11
 8008072:	4628      	mov	r0, r5
 8008074:	b006      	add	sp, #24
 8008076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807a:	f000 f8e9 	bl	8008250 <rcutils_reset_error>
 800807e:	a805      	add	r0, sp, #20
 8008080:	f004 fcfc 	bl	800ca7c <rcl_init_options_fini>
 8008084:	2800      	cmp	r0, #0
 8008086:	d0ef      	beq.n	8008068 <rclc_support_init+0x70>
 8008088:	e7ec      	b.n	8008064 <rclc_support_init+0x6c>
 800808a:	bf00      	nop

0800808c <rclc_node_init_default>:
 800808c:	2b00      	cmp	r3, #0
 800808e:	bf18      	it	ne
 8008090:	2a00      	cmpne	r2, #0
 8008092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008096:	4616      	mov	r6, r2
 8008098:	bf0c      	ite	eq
 800809a:	2201      	moveq	r2, #1
 800809c:	2200      	movne	r2, #0
 800809e:	b0a3      	sub	sp, #140	; 0x8c
 80080a0:	2900      	cmp	r1, #0
 80080a2:	bf08      	it	eq
 80080a4:	f042 0201 	orreq.w	r2, r2, #1
 80080a8:	bb22      	cbnz	r2, 80080f4 <rclc_node_init_default+0x68>
 80080aa:	4604      	mov	r4, r0
 80080ac:	b310      	cbz	r0, 80080f4 <rclc_node_init_default+0x68>
 80080ae:	f10d 0810 	add.w	r8, sp, #16
 80080b2:	461f      	mov	r7, r3
 80080b4:	460d      	mov	r5, r1
 80080b6:	f10d 0918 	add.w	r9, sp, #24
 80080ba:	4640      	mov	r0, r8
 80080bc:	f004 fd8a 	bl	800cbd4 <rcl_get_zero_initialized_node>
 80080c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80080c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80080c8:	4648      	mov	r0, r9
 80080ca:	f004 ff1d 	bl	800cf08 <rcl_node_get_default_options>
 80080ce:	4640      	mov	r0, r8
 80080d0:	f004 fd80 	bl	800cbd4 <rcl_get_zero_initialized_node>
 80080d4:	f8cd 9000 	str.w	r9, [sp]
 80080d8:	463b      	mov	r3, r7
 80080da:	4632      	mov	r2, r6
 80080dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80080e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80080e4:	4629      	mov	r1, r5
 80080e6:	4620      	mov	r0, r4
 80080e8:	f004 fd7e 	bl	800cbe8 <rcl_node_init>
 80080ec:	b930      	cbnz	r0, 80080fc <rclc_node_init_default+0x70>
 80080ee:	b023      	add	sp, #140	; 0x8c
 80080f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080f4:	200b      	movs	r0, #11
 80080f6:	b023      	add	sp, #140	; 0x8c
 80080f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080fc:	9003      	str	r0, [sp, #12]
 80080fe:	f000 f8a7 	bl	8008250 <rcutils_reset_error>
 8008102:	f000 f8a5 	bl	8008250 <rcutils_reset_error>
 8008106:	9803      	ldr	r0, [sp, #12]
 8008108:	b023      	add	sp, #140	; 0x8c
 800810a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800810e:	bf00      	nop

08008110 <rclc_publisher_init_default>:
 8008110:	2b00      	cmp	r3, #0
 8008112:	bf18      	it	ne
 8008114:	2a00      	cmpne	r2, #0
 8008116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	4616      	mov	r6, r2
 800811c:	bf0c      	ite	eq
 800811e:	2201      	moveq	r2, #1
 8008120:	2200      	movne	r2, #0
 8008122:	b0a0      	sub	sp, #128	; 0x80
 8008124:	2900      	cmp	r1, #0
 8008126:	bf08      	it	eq
 8008128:	f042 0201 	orreq.w	r2, r2, #1
 800812c:	bb1a      	cbnz	r2, 8008176 <rclc_publisher_init_default+0x66>
 800812e:	4604      	mov	r4, r0
 8008130:	b308      	cbz	r0, 8008176 <rclc_publisher_init_default+0x66>
 8008132:	f10d 0810 	add.w	r8, sp, #16
 8008136:	461f      	mov	r7, r3
 8008138:	460d      	mov	r5, r1
 800813a:	f7ff fe57 	bl	8007dec <rcl_get_zero_initialized_publisher>
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	4640      	mov	r0, r8
 8008142:	f7ff fef5 	bl	8007f30 <rcl_publisher_get_default_options>
 8008146:	2250      	movs	r2, #80	; 0x50
 8008148:	490d      	ldr	r1, [pc, #52]	; (8008180 <rclc_publisher_init_default+0x70>)
 800814a:	4640      	mov	r0, r8
 800814c:	f008 ffc4 	bl	80110d8 <memcpy>
 8008150:	463b      	mov	r3, r7
 8008152:	4632      	mov	r2, r6
 8008154:	4629      	mov	r1, r5
 8008156:	4620      	mov	r0, r4
 8008158:	f8cd 8000 	str.w	r8, [sp]
 800815c:	f7ff fe4c 	bl	8007df8 <rcl_publisher_init>
 8008160:	b910      	cbnz	r0, 8008168 <rclc_publisher_init_default+0x58>
 8008162:	b020      	add	sp, #128	; 0x80
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	9003      	str	r0, [sp, #12]
 800816a:	f000 f871 	bl	8008250 <rcutils_reset_error>
 800816e:	9803      	ldr	r0, [sp, #12]
 8008170:	b020      	add	sp, #128	; 0x80
 8008172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008176:	200b      	movs	r0, #11
 8008178:	b020      	add	sp, #128	; 0x80
 800817a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817e:	bf00      	nop
 8008180:	08012958 	.word	0x08012958

08008184 <__default_zero_allocate>:
 8008184:	f008 bf1e 	b.w	8010fc4 <calloc>

08008188 <__default_reallocate>:
 8008188:	f009 b936 	b.w	80113f8 <realloc>

0800818c <__default_deallocate>:
 800818c:	f008 bf9c 	b.w	80110c8 <free>

08008190 <__default_allocate>:
 8008190:	f008 bf92 	b.w	80110b8 <malloc>

08008194 <rcutils_get_zero_initialized_allocator>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4c05      	ldr	r4, [pc, #20]	; (80081ac <rcutils_get_zero_initialized_allocator+0x18>)
 8008198:	4686      	mov	lr, r0
 800819a:	4684      	mov	ip, r0
 800819c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800819e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	4670      	mov	r0, lr
 80081a6:	f8cc 3000 	str.w	r3, [ip]
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	080129a8 	.word	0x080129a8

080081b0 <rcutils_set_default_allocator>:
 80081b0:	b1a8      	cbz	r0, 80081de <rcutils_set_default_allocator+0x2e>
 80081b2:	6802      	ldr	r2, [r0, #0]
 80081b4:	b1a2      	cbz	r2, 80081e0 <rcutils_set_default_allocator+0x30>
 80081b6:	6841      	ldr	r1, [r0, #4]
 80081b8:	b1a1      	cbz	r1, 80081e4 <rcutils_set_default_allocator+0x34>
 80081ba:	b410      	push	{r4}
 80081bc:	68c4      	ldr	r4, [r0, #12]
 80081be:	b164      	cbz	r4, 80081da <rcutils_set_default_allocator+0x2a>
 80081c0:	6880      	ldr	r0, [r0, #8]
 80081c2:	b138      	cbz	r0, 80081d4 <rcutils_set_default_allocator+0x24>
 80081c4:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <rcutils_set_default_allocator+0x38>)
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	2200      	movs	r2, #0
 80081ca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80081ce:	2001      	movs	r0, #1
 80081d0:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80081d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	4620      	mov	r0, r4
 80081dc:	e7fa      	b.n	80081d4 <rcutils_set_default_allocator+0x24>
 80081de:	4770      	bx	lr
 80081e0:	4610      	mov	r0, r2
 80081e2:	4770      	bx	lr
 80081e4:	4608      	mov	r0, r1
 80081e6:	4770      	bx	lr
 80081e8:	20000014 	.word	0x20000014

080081ec <rcutils_get_default_allocator>:
 80081ec:	b510      	push	{r4, lr}
 80081ee:	4c05      	ldr	r4, [pc, #20]	; (8008204 <rcutils_get_default_allocator+0x18>)
 80081f0:	4686      	mov	lr, r0
 80081f2:	4684      	mov	ip, r0
 80081f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	4670      	mov	r0, lr
 80081fe:	f8cc 3000 	str.w	r3, [ip]
 8008202:	bd10      	pop	{r4, pc}
 8008204:	20000014 	.word	0x20000014

08008208 <rcutils_allocator_is_valid>:
 8008208:	b158      	cbz	r0, 8008222 <rcutils_allocator_is_valid+0x1a>
 800820a:	6803      	ldr	r3, [r0, #0]
 800820c:	b143      	cbz	r3, 8008220 <rcutils_allocator_is_valid+0x18>
 800820e:	6843      	ldr	r3, [r0, #4]
 8008210:	b133      	cbz	r3, 8008220 <rcutils_allocator_is_valid+0x18>
 8008212:	68c3      	ldr	r3, [r0, #12]
 8008214:	b123      	cbz	r3, 8008220 <rcutils_allocator_is_valid+0x18>
 8008216:	6880      	ldr	r0, [r0, #8]
 8008218:	3800      	subs	r0, #0
 800821a:	bf18      	it	ne
 800821c:	2001      	movne	r0, #1
 800821e:	4770      	bx	lr
 8008220:	4618      	mov	r0, r3
 8008222:	4770      	bx	lr

08008224 <rcutils_get_error_string>:
 8008224:	4b06      	ldr	r3, [pc, #24]	; (8008240 <rcutils_get_error_string+0x1c>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b13b      	cbz	r3, 800823a <rcutils_get_error_string+0x16>
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <rcutils_get_error_string+0x20>)
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	b90a      	cbnz	r2, 8008234 <rcutils_get_error_string+0x10>
 8008230:	2201      	movs	r2, #1
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	4b04      	ldr	r3, [pc, #16]	; (8008248 <rcutils_get_error_string+0x24>)
 8008236:	7818      	ldrb	r0, [r3, #0]
 8008238:	4770      	bx	lr
 800823a:	4b04      	ldr	r3, [pc, #16]	; (800824c <rcutils_get_error_string+0x28>)
 800823c:	7818      	ldrb	r0, [r3, #0]
 800823e:	4770      	bx	lr
 8008240:	200091b8 	.word	0x200091b8
 8008244:	200091d1 	.word	0x200091d1
 8008248:	200091d0 	.word	0x200091d0
 800824c:	080129bc 	.word	0x080129bc

08008250 <rcutils_reset_error>:
 8008250:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8008270 <rcutils_reset_error+0x20>
 8008254:	2300      	movs	r3, #0
 8008256:	4a08      	ldr	r2, [pc, #32]	; (8008278 <rcutils_reset_error+0x28>)
 8008258:	4808      	ldr	r0, [pc, #32]	; (800827c <rcutils_reset_error+0x2c>)
 800825a:	8013      	strh	r3, [r2, #0]
 800825c:	4908      	ldr	r1, [pc, #32]	; (8008280 <rcutils_reset_error+0x30>)
 800825e:	7003      	strb	r3, [r0, #0]
 8008260:	700b      	strb	r3, [r1, #0]
 8008262:	ed82 7b02 	vstr	d7, [r2, #8]
 8008266:	4a07      	ldr	r2, [pc, #28]	; (8008284 <rcutils_reset_error+0x34>)
 8008268:	7013      	strb	r3, [r2, #0]
 800826a:	4770      	bx	lr
 800826c:	f3af 8000 	nop.w
	...
 8008278:	200091c0 	.word	0x200091c0
 800827c:	200091d1 	.word	0x200091d1
 8008280:	200091d0 	.word	0x200091d0
 8008284:	200091b8 	.word	0x200091b8

08008288 <rmw_get_default_publisher_options>:
 8008288:	2200      	movs	r2, #0
 800828a:	6002      	str	r2, [r0, #0]
 800828c:	7102      	strb	r2, [r0, #4]
 800828e:	4770      	bx	lr

08008290 <rmw_uros_set_custom_transport>:
 8008290:	b470      	push	{r4, r5, r6}
 8008292:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8008296:	b162      	cbz	r2, 80082b2 <rmw_uros_set_custom_transport+0x22>
 8008298:	b15b      	cbz	r3, 80082b2 <rmw_uros_set_custom_transport+0x22>
 800829a:	b155      	cbz	r5, 80082b2 <rmw_uros_set_custom_transport+0x22>
 800829c:	b14e      	cbz	r6, 80082b2 <rmw_uros_set_custom_transport+0x22>
 800829e:	4c06      	ldr	r4, [pc, #24]	; (80082b8 <rmw_uros_set_custom_transport+0x28>)
 80082a0:	7020      	strb	r0, [r4, #0]
 80082a2:	2000      	movs	r0, #0
 80082a4:	6166      	str	r6, [r4, #20]
 80082a6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80082aa:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80082ae:	bc70      	pop	{r4, r5, r6}
 80082b0:	4770      	bx	lr
 80082b2:	200b      	movs	r0, #11
 80082b4:	bc70      	pop	{r4, r5, r6}
 80082b6:	4770      	bx	lr
 80082b8:	200091d4 	.word	0x200091d4

080082bc <flush_session>:
 80082bc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 80082be:	f002 bb4d 	b.w	800a95c <uxr_run_session_until_confirm_delivery>
 80082c2:	bf00      	nop

080082c4 <rmw_publish>:
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d053      	beq.n	8008370 <rmw_publish+0xac>
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	460d      	mov	r5, r1
 80082cc:	b08e      	sub	sp, #56	; 0x38
 80082ce:	2900      	cmp	r1, #0
 80082d0:	d04b      	beq.n	800836a <rmw_publish+0xa6>
 80082d2:	4604      	mov	r4, r0
 80082d4:	6800      	ldr	r0, [r0, #0]
 80082d6:	f000 fc57 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d045      	beq.n	800836a <rmw_publish+0xa6>
 80082de:	6866      	ldr	r6, [r4, #4]
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	d042      	beq.n	800836a <rmw_publish+0xa6>
 80082e4:	69b4      	ldr	r4, [r6, #24]
 80082e6:	4628      	mov	r0, r5
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	4798      	blx	r3
 80082ec:	69f3      	ldr	r3, [r6, #28]
 80082ee:	9005      	str	r0, [sp, #20]
 80082f0:	b113      	cbz	r3, 80082f8 <rmw_publish+0x34>
 80082f2:	a805      	add	r0, sp, #20
 80082f4:	4798      	blx	r3
 80082f6:	9805      	ldr	r0, [sp, #20]
 80082f8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	9000      	str	r0, [sp, #0]
 8008300:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008304:	6972      	ldr	r2, [r6, #20]
 8008306:	ab06      	add	r3, sp, #24
 8008308:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800830a:	f003 f925 	bl	800b558 <uxr_prepare_output_stream>
 800830e:	b1d8      	cbz	r0, 8008348 <rmw_publish+0x84>
 8008310:	68a3      	ldr	r3, [r4, #8]
 8008312:	a906      	add	r1, sp, #24
 8008314:	4628      	mov	r0, r5
 8008316:	4798      	blx	r3
 8008318:	6a33      	ldr	r3, [r6, #32]
 800831a:	4604      	mov	r4, r0
 800831c:	b10b      	cbz	r3, 8008322 <rmw_publish+0x5e>
 800831e:	a806      	add	r0, sp, #24
 8008320:	4798      	blx	r3
 8008322:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8008326:	2b01      	cmp	r3, #1
 8008328:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800832c:	d022      	beq.n	8008374 <rmw_publish+0xb0>
 800832e:	6918      	ldr	r0, [r3, #16]
 8008330:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8008332:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008336:	f002 fb11 	bl	800a95c <uxr_run_session_until_confirm_delivery>
 800833a:	4020      	ands	r0, r4
 800833c:	b2c4      	uxtb	r4, r0
 800833e:	f084 0001 	eor.w	r0, r4, #1
 8008342:	b2c0      	uxtb	r0, r0
 8008344:	b00e      	add	sp, #56	; 0x38
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800834c:	6918      	ldr	r0, [r3, #16]
 800834e:	9b05      	ldr	r3, [sp, #20]
 8008350:	9602      	str	r6, [sp, #8]
 8008352:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4b09      	ldr	r3, [pc, #36]	; (8008380 <rmw_publish+0xbc>)
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	ab06      	add	r3, sp, #24
 800835e:	6972      	ldr	r2, [r6, #20]
 8008360:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008362:	f003 f929 	bl	800b5b8 <uxr_prepare_output_stream_fragmented>
 8008366:	2800      	cmp	r0, #0
 8008368:	d1d2      	bne.n	8008310 <rmw_publish+0x4c>
 800836a:	2001      	movs	r0, #1
 800836c:	b00e      	add	sp, #56	; 0x38
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	2001      	movs	r0, #1
 8008372:	4770      	bx	lr
 8008374:	6918      	ldr	r0, [r3, #16]
 8008376:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800837a:	f001 ff6f 	bl	800a25c <uxr_flash_output_streams>
 800837e:	e7de      	b.n	800833e <rmw_publish+0x7a>
 8008380:	080082bd 	.word	0x080082bd

08008384 <rmw_create_publisher>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	b087      	sub	sp, #28
 800838a:	2800      	cmp	r0, #0
 800838c:	f000 80d2 	beq.w	8008534 <rmw_create_publisher+0x1b0>
 8008390:	460e      	mov	r6, r1
 8008392:	2900      	cmp	r1, #0
 8008394:	f000 80ce 	beq.w	8008534 <rmw_create_publisher+0x1b0>
 8008398:	4604      	mov	r4, r0
 800839a:	6800      	ldr	r0, [r0, #0]
 800839c:	4615      	mov	r5, r2
 800839e:	461f      	mov	r7, r3
 80083a0:	f000 fbf2 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 80083a4:	f080 0001 	eor.w	r0, r0, #1
 80083a8:	b2c0      	uxtb	r0, r0
 80083aa:	2800      	cmp	r0, #0
 80083ac:	f040 80c2 	bne.w	8008534 <rmw_create_publisher+0x1b0>
 80083b0:	2d00      	cmp	r5, #0
 80083b2:	f000 80bf 	beq.w	8008534 <rmw_create_publisher+0x1b0>
 80083b6:	782b      	ldrb	r3, [r5, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80bb 	beq.w	8008534 <rmw_create_publisher+0x1b0>
 80083be:	2f00      	cmp	r7, #0
 80083c0:	f000 80b8 	beq.w	8008534 <rmw_create_publisher+0x1b0>
 80083c4:	485e      	ldr	r0, [pc, #376]	; (8008540 <rmw_create_publisher+0x1bc>)
 80083c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80083ca:	f005 fd5f 	bl	800de8c <get_memory>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f000 80b0 	beq.w	8008534 <rmw_create_publisher+0x1b0>
 80083d4:	6884      	ldr	r4, [r0, #8]
 80083d6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 80083da:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80083de:	f005 fd79 	bl	800ded4 <rmw_get_implementation_identifier>
 80083e2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80083e6:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7f7 ff82 	bl	80002f4 <strlen>
 80083f0:	3001      	adds	r0, #1
 80083f2:	f104 0884 	add.w	r8, r4, #132	; 0x84
 80083f6:	283c      	cmp	r0, #60	; 0x3c
 80083f8:	f200 808f 	bhi.w	800851a <rmw_create_publisher+0x196>
 80083fc:	462b      	mov	r3, r5
 80083fe:	4a51      	ldr	r2, [pc, #324]	; (8008544 <rmw_create_publisher+0x1c0>)
 8008400:	213c      	movs	r1, #60	; 0x3c
 8008402:	4650      	mov	r0, sl
 8008404:	f009 f810 	bl	8011428 <sniprintf>
 8008408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800840c:	4639      	mov	r1, r7
 800840e:	2250      	movs	r2, #80	; 0x50
 8008410:	67e3      	str	r3, [r4, #124]	; 0x7c
 8008412:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008416:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800841a:	f008 fe5d 	bl	80110d8 <memcpy>
 800841e:	7a3b      	ldrb	r3, [r7, #8]
 8008420:	4630      	mov	r0, r6
 8008422:	4949      	ldr	r1, [pc, #292]	; (8008548 <rmw_create_publisher+0x1c4>)
 8008424:	2b02      	cmp	r3, #2
 8008426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800842a:	bf0c      	ite	eq
 800842c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8008430:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8008434:	67a3      	str	r3, [r4, #120]	; 0x78
 8008436:	2300      	movs	r3, #0
 8008438:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800843c:	f000 fbb2 	bl	8008ba4 <get_message_typesupport_handle>
 8008440:	2800      	cmp	r0, #0
 8008442:	d06a      	beq.n	800851a <rmw_create_publisher+0x196>
 8008444:	6842      	ldr	r2, [r0, #4]
 8008446:	61a2      	str	r2, [r4, #24]
 8008448:	2a00      	cmp	r2, #0
 800844a:	d066      	beq.n	800851a <rmw_create_publisher+0x196>
 800844c:	4629      	mov	r1, r5
 800844e:	463b      	mov	r3, r7
 8008450:	4648      	mov	r0, r9
 8008452:	f005 ff7d 	bl	800e350 <create_topic>
 8008456:	6260      	str	r0, [r4, #36]	; 0x24
 8008458:	2800      	cmp	r0, #0
 800845a:	d062      	beq.n	8008522 <rmw_create_publisher+0x19e>
 800845c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008460:	2103      	movs	r1, #3
 8008462:	2506      	movs	r5, #6
 8008464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008468:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800846c:	1c42      	adds	r2, r0, #1
 800846e:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8008472:	f001 fda3 	bl	8009fbc <uxr_object_id>
 8008476:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800847a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800847e:	6120      	str	r0, [r4, #16]
 8008480:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8008484:	6910      	ldr	r0, [r2, #16]
 8008486:	9500      	str	r5, [sp, #0]
 8008488:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800848c:	6819      	ldr	r1, [r3, #0]
 800848e:	6922      	ldr	r2, [r4, #16]
 8008490:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008494:	f001 fcec 	bl	8009e70 <uxr_buffer_create_publisher_bin>
 8008498:	4602      	mov	r2, r0
 800849a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800849e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80084a2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80084a6:	f000 faf5 	bl	8008a94 <run_xrce_session>
 80084aa:	b3b0      	cbz	r0, 800851a <rmw_create_publisher+0x196>
 80084ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084b0:	2105      	movs	r1, #5
 80084b2:	f10d 0a10 	add.w	sl, sp, #16
 80084b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ba:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 80084be:	1c42      	adds	r2, r0, #1
 80084c0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 80084c4:	f001 fd7a 	bl	8009fbc <uxr_object_id>
 80084c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80084cc:	4639      	mov	r1, r7
 80084ce:	6160      	str	r0, [r4, #20]
 80084d0:	691e      	ldr	r6, [r3, #16]
 80084d2:	4650      	mov	r0, sl
 80084d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084d8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80084dc:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 80084e0:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 80084e4:	f000 faf2 	bl	8008acc <convert_qos_profile>
 80084e8:	9503      	str	r5, [sp, #12]
 80084ea:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80084ee:	9001      	str	r0, [sp, #4]
 80084f0:	4630      	mov	r0, r6
 80084f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80084f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008502:	f001 fce5 	bl	8009ed0 <uxr_buffer_create_datawriter_bin>
 8008506:	4602      	mov	r2, r0
 8008508:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800850c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008510:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008514:	f000 fabe 	bl	8008a94 <run_xrce_session>
 8008518:	b970      	cbnz	r0, 8008538 <rmw_create_publisher+0x1b4>
 800851a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800851c:	b108      	cbz	r0, 8008522 <rmw_create_publisher+0x19e>
 800851e:	f000 fa53 	bl	80089c8 <rmw_uxrce_fini_topic_memory>
 8008522:	4640      	mov	r0, r8
 8008524:	f04f 0800 	mov.w	r8, #0
 8008528:	f000 f9f6 	bl	8008918 <rmw_uxrce_fini_publisher_memory>
 800852c:	4640      	mov	r0, r8
 800852e:	b007      	add	sp, #28
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008534:	f04f 0800 	mov.w	r8, #0
 8008538:	4640      	mov	r0, r8
 800853a:	b007      	add	sp, #28
 800853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008540:	2000dacc 	.word	0x2000dacc
 8008544:	080129f4 	.word	0x080129f4
 8008548:	080129c0 	.word	0x080129c0

0800854c <rmw_publisher_get_actual_qos>:
 800854c:	b178      	cbz	r0, 800856e <rmw_publisher_get_actual_qos+0x22>
 800854e:	b510      	push	{r4, lr}
 8008550:	fab1 f481 	clz	r4, r1
 8008554:	0964      	lsrs	r4, r4, #5
 8008556:	b141      	cbz	r1, 800856a <rmw_publisher_get_actual_qos+0x1e>
 8008558:	6843      	ldr	r3, [r0, #4]
 800855a:	2250      	movs	r2, #80	; 0x50
 800855c:	4608      	mov	r0, r1
 800855e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008562:	f008 fdb9 	bl	80110d8 <memcpy>
 8008566:	4620      	mov	r0, r4
 8008568:	bd10      	pop	{r4, pc}
 800856a:	200b      	movs	r0, #11
 800856c:	bd10      	pop	{r4, pc}
 800856e:	200b      	movs	r0, #11
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop

08008574 <rmw_destroy_publisher>:
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	b128      	cbz	r0, 8008586 <rmw_destroy_publisher+0x12>
 800857a:	4604      	mov	r4, r0
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	460d      	mov	r5, r1
 8008580:	f000 fb02 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 8008584:	b918      	cbnz	r0, 800858e <rmw_destroy_publisher+0x1a>
 8008586:	2401      	movs	r4, #1
 8008588:	4620      	mov	r0, r4
 800858a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858e:	6863      	ldr	r3, [r4, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0f8      	beq.n	8008586 <rmw_destroy_publisher+0x12>
 8008594:	fab5 f485 	clz	r4, r5
 8008598:	0964      	lsrs	r4, r4, #5
 800859a:	2d00      	cmp	r5, #0
 800859c:	d0f3      	beq.n	8008586 <rmw_destroy_publisher+0x12>
 800859e:	6828      	ldr	r0, [r5, #0]
 80085a0:	f000 faf2 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d0ee      	beq.n	8008586 <rmw_destroy_publisher+0x12>
 80085a8:	686e      	ldr	r6, [r5, #4]
 80085aa:	2e00      	cmp	r6, #0
 80085ac:	d0eb      	beq.n	8008586 <rmw_destroy_publisher+0x12>
 80085ae:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80085b0:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 80085b4:	f005 ff1c 	bl	800e3f0 <destroy_topic>
 80085b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80085bc:	6972      	ldr	r2, [r6, #20]
 80085be:	6918      	ldr	r0, [r3, #16]
 80085c0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80085c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	f001 fb9d 	bl	8009d08 <uxr_buffer_delete_entity>
 80085ce:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80085d2:	4680      	mov	r8, r0
 80085d4:	6932      	ldr	r2, [r6, #16]
 80085d6:	6918      	ldr	r0, [r3, #16]
 80085d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80085dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	f001 fb91 	bl	8009d08 <uxr_buffer_delete_entity>
 80085e6:	4606      	mov	r6, r0
 80085e8:	6938      	ldr	r0, [r7, #16]
 80085ea:	4642      	mov	r2, r8
 80085ec:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80085f0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80085f4:	f000 fa4e 	bl	8008a94 <run_xrce_session>
 80085f8:	693f      	ldr	r7, [r7, #16]
 80085fa:	4632      	mov	r2, r6
 80085fc:	4606      	mov	r6, r0
 80085fe:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8008602:	4638      	mov	r0, r7
 8008604:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8008608:	f000 fa44 	bl	8008a94 <run_xrce_session>
 800860c:	b126      	cbz	r6, 8008618 <rmw_destroy_publisher+0xa4>
 800860e:	b118      	cbz	r0, 8008618 <rmw_destroy_publisher+0xa4>
 8008610:	4628      	mov	r0, r5
 8008612:	f000 f981 	bl	8008918 <rmw_uxrce_fini_publisher_memory>
 8008616:	e7b7      	b.n	8008588 <rmw_destroy_publisher+0x14>
 8008618:	2402      	movs	r4, #2
 800861a:	e7f9      	b.n	8008610 <rmw_destroy_publisher+0x9c>

0800861c <rmw_uxrce_init_service_memory>:
 800861c:	b1e2      	cbz	r2, 8008658 <rmw_uxrce_init_service_memory+0x3c>
 800861e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008622:	7b05      	ldrb	r5, [r0, #12]
 8008624:	4606      	mov	r6, r0
 8008626:	b9ad      	cbnz	r5, 8008654 <rmw_uxrce_init_service_memory+0x38>
 8008628:	23c8      	movs	r3, #200	; 0xc8
 800862a:	4617      	mov	r7, r2
 800862c:	460c      	mov	r4, r1
 800862e:	46a8      	mov	r8, r5
 8008630:	6083      	str	r3, [r0, #8]
 8008632:	f240 1301 	movw	r3, #257	; 0x101
 8008636:	e9c0 5500 	strd	r5, r5, [r0]
 800863a:	8183      	strh	r3, [r0, #12]
 800863c:	3501      	adds	r5, #1
 800863e:	4621      	mov	r1, r4
 8008640:	4630      	mov	r0, r6
 8008642:	f005 fc33 	bl	800deac <put_memory>
 8008646:	42af      	cmp	r7, r5
 8008648:	60a4      	str	r4, [r4, #8]
 800864a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800864e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8008652:	d1f3      	bne.n	800863c <rmw_uxrce_init_service_memory+0x20>
 8008654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop

0800865c <rmw_uxrce_init_client_memory>:
 800865c:	b1e2      	cbz	r2, 8008698 <rmw_uxrce_init_client_memory+0x3c>
 800865e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008662:	7b05      	ldrb	r5, [r0, #12]
 8008664:	4606      	mov	r6, r0
 8008666:	b9ad      	cbnz	r5, 8008694 <rmw_uxrce_init_client_memory+0x38>
 8008668:	23c8      	movs	r3, #200	; 0xc8
 800866a:	4617      	mov	r7, r2
 800866c:	460c      	mov	r4, r1
 800866e:	46a8      	mov	r8, r5
 8008670:	6083      	str	r3, [r0, #8]
 8008672:	f240 1301 	movw	r3, #257	; 0x101
 8008676:	e9c0 5500 	strd	r5, r5, [r0]
 800867a:	8183      	strh	r3, [r0, #12]
 800867c:	3501      	adds	r5, #1
 800867e:	4621      	mov	r1, r4
 8008680:	4630      	mov	r0, r6
 8008682:	f005 fc13 	bl	800deac <put_memory>
 8008686:	42af      	cmp	r7, r5
 8008688:	60a4      	str	r4, [r4, #8]
 800868a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800868e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8008692:	d1f3      	bne.n	800867c <rmw_uxrce_init_client_memory+0x20>
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop

0800869c <rmw_uxrce_init_publisher_memory>:
 800869c:	b1e2      	cbz	r2, 80086d8 <rmw_uxrce_init_publisher_memory+0x3c>
 800869e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a2:	7b05      	ldrb	r5, [r0, #12]
 80086a4:	4606      	mov	r6, r0
 80086a6:	b9ad      	cbnz	r5, 80086d4 <rmw_uxrce_init_publisher_memory+0x38>
 80086a8:	23d8      	movs	r3, #216	; 0xd8
 80086aa:	4617      	mov	r7, r2
 80086ac:	460c      	mov	r4, r1
 80086ae:	46a8      	mov	r8, r5
 80086b0:	6083      	str	r3, [r0, #8]
 80086b2:	f240 1301 	movw	r3, #257	; 0x101
 80086b6:	e9c0 5500 	strd	r5, r5, [r0]
 80086ba:	8183      	strh	r3, [r0, #12]
 80086bc:	3501      	adds	r5, #1
 80086be:	4621      	mov	r1, r4
 80086c0:	4630      	mov	r0, r6
 80086c2:	f005 fbf3 	bl	800deac <put_memory>
 80086c6:	42af      	cmp	r7, r5
 80086c8:	60a4      	str	r4, [r4, #8]
 80086ca:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80086ce:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80086d2:	d1f3      	bne.n	80086bc <rmw_uxrce_init_publisher_memory+0x20>
 80086d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop

080086dc <rmw_uxrce_init_subscription_memory>:
 80086dc:	b1e2      	cbz	r2, 8008718 <rmw_uxrce_init_subscription_memory+0x3c>
 80086de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e2:	7b05      	ldrb	r5, [r0, #12]
 80086e4:	4606      	mov	r6, r0
 80086e6:	b9ad      	cbnz	r5, 8008714 <rmw_uxrce_init_subscription_memory+0x38>
 80086e8:	23d8      	movs	r3, #216	; 0xd8
 80086ea:	4617      	mov	r7, r2
 80086ec:	460c      	mov	r4, r1
 80086ee:	46a8      	mov	r8, r5
 80086f0:	6083      	str	r3, [r0, #8]
 80086f2:	f240 1301 	movw	r3, #257	; 0x101
 80086f6:	e9c0 5500 	strd	r5, r5, [r0]
 80086fa:	8183      	strh	r3, [r0, #12]
 80086fc:	3501      	adds	r5, #1
 80086fe:	4621      	mov	r1, r4
 8008700:	4630      	mov	r0, r6
 8008702:	f005 fbd3 	bl	800deac <put_memory>
 8008706:	42af      	cmp	r7, r5
 8008708:	60a4      	str	r4, [r4, #8]
 800870a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800870e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8008712:	d1f3      	bne.n	80086fc <rmw_uxrce_init_subscription_memory+0x20>
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop

0800871c <rmw_uxrce_init_node_memory>:
 800871c:	b1e2      	cbz	r2, 8008758 <rmw_uxrce_init_node_memory+0x3c>
 800871e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008722:	7b05      	ldrb	r5, [r0, #12]
 8008724:	4606      	mov	r6, r0
 8008726:	b9ad      	cbnz	r5, 8008754 <rmw_uxrce_init_node_memory+0x38>
 8008728:	23a4      	movs	r3, #164	; 0xa4
 800872a:	4617      	mov	r7, r2
 800872c:	460c      	mov	r4, r1
 800872e:	46a8      	mov	r8, r5
 8008730:	6083      	str	r3, [r0, #8]
 8008732:	f240 1301 	movw	r3, #257	; 0x101
 8008736:	e9c0 5500 	strd	r5, r5, [r0]
 800873a:	8183      	strh	r3, [r0, #12]
 800873c:	3501      	adds	r5, #1
 800873e:	4621      	mov	r1, r4
 8008740:	4630      	mov	r0, r6
 8008742:	f005 fbb3 	bl	800deac <put_memory>
 8008746:	42af      	cmp	r7, r5
 8008748:	60a4      	str	r4, [r4, #8]
 800874a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800874e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8008752:	d1f3      	bne.n	800873c <rmw_uxrce_init_node_memory+0x20>
 8008754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop

0800875c <rmw_uxrce_init_session_memory>:
 800875c:	b1ea      	cbz	r2, 800879a <rmw_uxrce_init_session_memory+0x3e>
 800875e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008762:	7b05      	ldrb	r5, [r0, #12]
 8008764:	4606      	mov	r6, r0
 8008766:	b9b5      	cbnz	r5, 8008796 <rmw_uxrce_init_session_memory+0x3a>
 8008768:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800876c:	f240 1301 	movw	r3, #257	; 0x101
 8008770:	4617      	mov	r7, r2
 8008772:	460c      	mov	r4, r1
 8008774:	46a9      	mov	r9, r5
 8008776:	f8c0 8008 	str.w	r8, [r0, #8]
 800877a:	8183      	strh	r3, [r0, #12]
 800877c:	e9c0 5500 	strd	r5, r5, [r0]
 8008780:	3501      	adds	r5, #1
 8008782:	4621      	mov	r1, r4
 8008784:	4630      	mov	r0, r6
 8008786:	f005 fb91 	bl	800deac <put_memory>
 800878a:	42af      	cmp	r7, r5
 800878c:	60a4      	str	r4, [r4, #8]
 800878e:	f884 900c 	strb.w	r9, [r4, #12]
 8008792:	4444      	add	r4, r8
 8008794:	d1f4      	bne.n	8008780 <rmw_uxrce_init_session_memory+0x24>
 8008796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879a:	4770      	bx	lr

0800879c <rmw_uxrce_init_topic_memory>:
 800879c:	b1e2      	cbz	r2, 80087d8 <rmw_uxrce_init_topic_memory+0x3c>
 800879e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a2:	7b05      	ldrb	r5, [r0, #12]
 80087a4:	4606      	mov	r6, r0
 80087a6:	b9ad      	cbnz	r5, 80087d4 <rmw_uxrce_init_topic_memory+0x38>
 80087a8:	231c      	movs	r3, #28
 80087aa:	4617      	mov	r7, r2
 80087ac:	460c      	mov	r4, r1
 80087ae:	46a8      	mov	r8, r5
 80087b0:	6083      	str	r3, [r0, #8]
 80087b2:	f240 1301 	movw	r3, #257	; 0x101
 80087b6:	e9c0 5500 	strd	r5, r5, [r0]
 80087ba:	8183      	strh	r3, [r0, #12]
 80087bc:	3501      	adds	r5, #1
 80087be:	4621      	mov	r1, r4
 80087c0:	4630      	mov	r0, r6
 80087c2:	f005 fb73 	bl	800deac <put_memory>
 80087c6:	42af      	cmp	r7, r5
 80087c8:	60a4      	str	r4, [r4, #8]
 80087ca:	f104 041c 	add.w	r4, r4, #28
 80087ce:	f804 8c10 	strb.w	r8, [r4, #-16]
 80087d2:	d1f3      	bne.n	80087bc <rmw_uxrce_init_topic_memory+0x20>
 80087d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop

080087dc <rmw_uxrce_init_static_input_buffer_memory>:
 80087dc:	b1ea      	cbz	r2, 800881a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80087de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	7b05      	ldrb	r5, [r0, #12]
 80087e4:	4606      	mov	r6, r0
 80087e6:	b9b5      	cbnz	r5, 8008816 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80087e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80087ec:	4617      	mov	r7, r2
 80087ee:	460c      	mov	r4, r1
 80087f0:	46a8      	mov	r8, r5
 80087f2:	6083      	str	r3, [r0, #8]
 80087f4:	f240 1301 	movw	r3, #257	; 0x101
 80087f8:	e9c0 5500 	strd	r5, r5, [r0]
 80087fc:	8183      	strh	r3, [r0, #12]
 80087fe:	3501      	adds	r5, #1
 8008800:	4621      	mov	r1, r4
 8008802:	4630      	mov	r0, r6
 8008804:	f005 fb52 	bl	800deac <put_memory>
 8008808:	42af      	cmp	r7, r5
 800880a:	60a4      	str	r4, [r4, #8]
 800880c:	f884 800c 	strb.w	r8, [r4, #12]
 8008810:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8008814:	d1f3      	bne.n	80087fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8008816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881a:	4770      	bx	lr

0800881c <rmw_uxrce_init_init_options_impl_memory>:
 800881c:	b1e2      	cbz	r2, 8008858 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	7b05      	ldrb	r5, [r0, #12]
 8008824:	4606      	mov	r6, r0
 8008826:	b9ad      	cbnz	r5, 8008854 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8008828:	232c      	movs	r3, #44	; 0x2c
 800882a:	4617      	mov	r7, r2
 800882c:	460c      	mov	r4, r1
 800882e:	46a8      	mov	r8, r5
 8008830:	6083      	str	r3, [r0, #8]
 8008832:	f240 1301 	movw	r3, #257	; 0x101
 8008836:	e9c0 5500 	strd	r5, r5, [r0]
 800883a:	8183      	strh	r3, [r0, #12]
 800883c:	3501      	adds	r5, #1
 800883e:	4621      	mov	r1, r4
 8008840:	4630      	mov	r0, r6
 8008842:	f005 fb33 	bl	800deac <put_memory>
 8008846:	42af      	cmp	r7, r5
 8008848:	60a4      	str	r4, [r4, #8]
 800884a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800884e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8008852:	d1f3      	bne.n	800883c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8008854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop

0800885c <rmw_uxrce_init_wait_set_memory>:
 800885c:	b1e2      	cbz	r2, 8008898 <rmw_uxrce_init_wait_set_memory+0x3c>
 800885e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008862:	7b05      	ldrb	r5, [r0, #12]
 8008864:	4606      	mov	r6, r0
 8008866:	b9ad      	cbnz	r5, 8008894 <rmw_uxrce_init_wait_set_memory+0x38>
 8008868:	231c      	movs	r3, #28
 800886a:	4617      	mov	r7, r2
 800886c:	460c      	mov	r4, r1
 800886e:	46a8      	mov	r8, r5
 8008870:	6083      	str	r3, [r0, #8]
 8008872:	f240 1301 	movw	r3, #257	; 0x101
 8008876:	e9c0 5500 	strd	r5, r5, [r0]
 800887a:	8183      	strh	r3, [r0, #12]
 800887c:	3501      	adds	r5, #1
 800887e:	4621      	mov	r1, r4
 8008880:	4630      	mov	r0, r6
 8008882:	f005 fb13 	bl	800deac <put_memory>
 8008886:	42af      	cmp	r7, r5
 8008888:	60a4      	str	r4, [r4, #8]
 800888a:	f104 041c 	add.w	r4, r4, #28
 800888e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8008892:	d1f3      	bne.n	800887c <rmw_uxrce_init_wait_set_memory+0x20>
 8008894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop

0800889c <rmw_uxrce_init_guard_condition_memory>:
 800889c:	b1e2      	cbz	r2, 80088d8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800889e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a2:	7b05      	ldrb	r5, [r0, #12]
 80088a4:	4606      	mov	r6, r0
 80088a6:	b9ad      	cbnz	r5, 80088d4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80088a8:	2320      	movs	r3, #32
 80088aa:	4617      	mov	r7, r2
 80088ac:	460c      	mov	r4, r1
 80088ae:	46a8      	mov	r8, r5
 80088b0:	6083      	str	r3, [r0, #8]
 80088b2:	f240 1301 	movw	r3, #257	; 0x101
 80088b6:	e9c0 5500 	strd	r5, r5, [r0]
 80088ba:	8183      	strh	r3, [r0, #12]
 80088bc:	3501      	adds	r5, #1
 80088be:	4621      	mov	r1, r4
 80088c0:	4630      	mov	r0, r6
 80088c2:	f005 faf3 	bl	800deac <put_memory>
 80088c6:	42af      	cmp	r7, r5
 80088c8:	60a4      	str	r4, [r4, #8]
 80088ca:	f104 0420 	add.w	r4, r4, #32
 80088ce:	f804 8c14 	strb.w	r8, [r4, #-20]
 80088d2:	d1f3      	bne.n	80088bc <rmw_uxrce_init_guard_condition_memory+0x20>
 80088d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop

080088dc <rmw_uxrce_fini_session_memory>:
 80088dc:	4601      	mov	r1, r0
 80088de:	4801      	ldr	r0, [pc, #4]	; (80088e4 <rmw_uxrce_fini_session_memory+0x8>)
 80088e0:	f005 bae4 	b.w	800deac <put_memory>
 80088e4:	2000daec 	.word	0x2000daec

080088e8 <rmw_uxrce_fini_node_memory>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4604      	mov	r4, r0
 80088ec:	6800      	ldr	r0, [r0, #0]
 80088ee:	b128      	cbz	r0, 80088fc <rmw_uxrce_fini_node_memory+0x14>
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <rmw_uxrce_fini_node_memory+0x28>)
 80088f2:	6819      	ldr	r1, [r3, #0]
 80088f4:	f7f7 fcf4 	bl	80002e0 <strcmp>
 80088f8:	b940      	cbnz	r0, 800890c <rmw_uxrce_fini_node_memory+0x24>
 80088fa:	6020      	str	r0, [r4, #0]
 80088fc:	6861      	ldr	r1, [r4, #4]
 80088fe:	b129      	cbz	r1, 800890c <rmw_uxrce_fini_node_memory+0x24>
 8008900:	2500      	movs	r5, #0
 8008902:	4804      	ldr	r0, [pc, #16]	; (8008914 <rmw_uxrce_fini_node_memory+0x2c>)
 8008904:	610d      	str	r5, [r1, #16]
 8008906:	f005 fad1 	bl	800deac <put_memory>
 800890a:	6065      	str	r5, [r4, #4]
 800890c:	bd38      	pop	{r3, r4, r5, pc}
 800890e:	bf00      	nop
 8008910:	08012ff8 	.word	0x08012ff8
 8008914:	2000dabc 	.word	0x2000dabc

08008918 <rmw_uxrce_fini_publisher_memory>:
 8008918:	b510      	push	{r4, lr}
 800891a:	4604      	mov	r4, r0
 800891c:	6800      	ldr	r0, [r0, #0]
 800891e:	b128      	cbz	r0, 800892c <rmw_uxrce_fini_publisher_memory+0x14>
 8008920:	4b06      	ldr	r3, [pc, #24]	; (800893c <rmw_uxrce_fini_publisher_memory+0x24>)
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	f7f7 fcdc 	bl	80002e0 <strcmp>
 8008928:	b938      	cbnz	r0, 800893a <rmw_uxrce_fini_publisher_memory+0x22>
 800892a:	6020      	str	r0, [r4, #0]
 800892c:	6861      	ldr	r1, [r4, #4]
 800892e:	b121      	cbz	r1, 800893a <rmw_uxrce_fini_publisher_memory+0x22>
 8008930:	4803      	ldr	r0, [pc, #12]	; (8008940 <rmw_uxrce_fini_publisher_memory+0x28>)
 8008932:	f005 fabb 	bl	800deac <put_memory>
 8008936:	2300      	movs	r3, #0
 8008938:	6063      	str	r3, [r4, #4]
 800893a:	bd10      	pop	{r4, pc}
 800893c:	08012ff8 	.word	0x08012ff8
 8008940:	2000dacc 	.word	0x2000dacc

08008944 <rmw_uxrce_fini_subscription_memory>:
 8008944:	b510      	push	{r4, lr}
 8008946:	4604      	mov	r4, r0
 8008948:	6800      	ldr	r0, [r0, #0]
 800894a:	b128      	cbz	r0, 8008958 <rmw_uxrce_fini_subscription_memory+0x14>
 800894c:	4b06      	ldr	r3, [pc, #24]	; (8008968 <rmw_uxrce_fini_subscription_memory+0x24>)
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	f7f7 fcc6 	bl	80002e0 <strcmp>
 8008954:	b938      	cbnz	r0, 8008966 <rmw_uxrce_fini_subscription_memory+0x22>
 8008956:	6020      	str	r0, [r4, #0]
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	b121      	cbz	r1, 8008966 <rmw_uxrce_fini_subscription_memory+0x22>
 800895c:	4803      	ldr	r0, [pc, #12]	; (800896c <rmw_uxrce_fini_subscription_memory+0x28>)
 800895e:	f005 faa5 	bl	800deac <put_memory>
 8008962:	2300      	movs	r3, #0
 8008964:	6063      	str	r3, [r4, #4]
 8008966:	bd10      	pop	{r4, pc}
 8008968:	08012ff8 	.word	0x08012ff8
 800896c:	2000db0c 	.word	0x2000db0c

08008970 <rmw_uxrce_fini_service_memory>:
 8008970:	b510      	push	{r4, lr}
 8008972:	4604      	mov	r4, r0
 8008974:	6800      	ldr	r0, [r0, #0]
 8008976:	b128      	cbz	r0, 8008984 <rmw_uxrce_fini_service_memory+0x14>
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <rmw_uxrce_fini_service_memory+0x24>)
 800897a:	6819      	ldr	r1, [r3, #0]
 800897c:	f7f7 fcb0 	bl	80002e0 <strcmp>
 8008980:	b938      	cbnz	r0, 8008992 <rmw_uxrce_fini_service_memory+0x22>
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	6861      	ldr	r1, [r4, #4]
 8008986:	b121      	cbz	r1, 8008992 <rmw_uxrce_fini_service_memory+0x22>
 8008988:	4803      	ldr	r0, [pc, #12]	; (8008998 <rmw_uxrce_fini_service_memory+0x28>)
 800898a:	f005 fa8f 	bl	800deac <put_memory>
 800898e:	2300      	movs	r3, #0
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	bd10      	pop	{r4, pc}
 8008994:	08012ff8 	.word	0x08012ff8
 8008998:	2000dadc 	.word	0x2000dadc

0800899c <rmw_uxrce_fini_client_memory>:
 800899c:	b510      	push	{r4, lr}
 800899e:	4604      	mov	r4, r0
 80089a0:	6800      	ldr	r0, [r0, #0]
 80089a2:	b128      	cbz	r0, 80089b0 <rmw_uxrce_fini_client_memory+0x14>
 80089a4:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <rmw_uxrce_fini_client_memory+0x24>)
 80089a6:	6819      	ldr	r1, [r3, #0]
 80089a8:	f7f7 fc9a 	bl	80002e0 <strcmp>
 80089ac:	b938      	cbnz	r0, 80089be <rmw_uxrce_fini_client_memory+0x22>
 80089ae:	6020      	str	r0, [r4, #0]
 80089b0:	6861      	ldr	r1, [r4, #4]
 80089b2:	b121      	cbz	r1, 80089be <rmw_uxrce_fini_client_memory+0x22>
 80089b4:	4803      	ldr	r0, [pc, #12]	; (80089c4 <rmw_uxrce_fini_client_memory+0x28>)
 80089b6:	f005 fa79 	bl	800deac <put_memory>
 80089ba:	2300      	movs	r3, #0
 80089bc:	6063      	str	r3, [r4, #4]
 80089be:	bd10      	pop	{r4, pc}
 80089c0:	08012ff8 	.word	0x08012ff8
 80089c4:	200091f0 	.word	0x200091f0

080089c8 <rmw_uxrce_fini_topic_memory>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	4604      	mov	r4, r0
 80089cc:	4803      	ldr	r0, [pc, #12]	; (80089dc <rmw_uxrce_fini_topic_memory+0x14>)
 80089ce:	4621      	mov	r1, r4
 80089d0:	f005 fa6c 	bl	800deac <put_memory>
 80089d4:	2300      	movs	r3, #0
 80089d6:	61a3      	str	r3, [r4, #24]
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	bf00      	nop
 80089dc:	2000db1c 	.word	0x2000db1c

080089e0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80089e0:	b082      	sub	sp, #8
 80089e2:	492b      	ldr	r1, [pc, #172]	; (8008a90 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80089e4:	b530      	push	{r4, r5, lr}
 80089e6:	680d      	ldr	r5, [r1, #0]
 80089e8:	ac03      	add	r4, sp, #12
 80089ea:	e884 000c 	stmia.w	r4, {r2, r3}
 80089ee:	461c      	mov	r4, r3
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	d04b      	beq.n	8008a8c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 80089f4:	462b      	mov	r3, r5
 80089f6:	2100      	movs	r1, #0
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8008a00:	4290      	cmp	r0, r2
 8008a02:	bf08      	it	eq
 8008a04:	3101      	addeq	r1, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1f6      	bne.n	80089f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8008a0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d029      	beq.n	8008a66 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008a12:	d820      	bhi.n	8008a56 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8008a14:	428c      	cmp	r4, r1
 8008a16:	d828      	bhi.n	8008a6a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8008a18:	fab4 f284 	clz	r2, r4
 8008a1c:	0952      	lsrs	r2, r2, #5
 8008a1e:	b324      	cbz	r4, 8008a6a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8008a20:	b1dd      	cbz	r5, 8008a5a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8008a22:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008a26:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008a2a:	e001      	b.n	8008a30 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8008a2c:	686d      	ldr	r5, [r5, #4]
 8008a2e:	b1ad      	cbz	r5, 8008a5c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8008a30:	68ab      	ldr	r3, [r5, #8]
 8008a32:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8008a36:	4288      	cmp	r0, r1
 8008a38:	d1f8      	bne.n	8008a2c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8008a3a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8008a3e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008a42:	4561      	cmp	r1, ip
 8008a44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8008a48:	eb73 0e04 	sbcs.w	lr, r3, r4
 8008a4c:	daee      	bge.n	8008a2c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8008a4e:	468c      	mov	ip, r1
 8008a50:	461c      	mov	r4, r3
 8008a52:	462a      	mov	r2, r5
 8008a54:	e7ea      	b.n	8008a2c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d0dc      	beq.n	8008a14 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a62:	b002      	add	sp, #8
 8008a64:	4770      	bx	lr
 8008a66:	428c      	cmp	r4, r1
 8008a68:	d905      	bls.n	8008a76 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8008a6a:	4809      	ldr	r0, [pc, #36]	; (8008a90 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8008a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a70:	b002      	add	sp, #8
 8008a72:	f005 ba0b 	b.w	800de8c <get_memory>
 8008a76:	fab4 f284 	clz	r2, r4
 8008a7a:	0952      	lsrs	r2, r2, #5
 8008a7c:	2c00      	cmp	r4, #0
 8008a7e:	d1ed      	bne.n	8008a5c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8008a80:	4803      	ldr	r0, [pc, #12]	; (8008a90 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8008a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a86:	b002      	add	sp, #8
 8008a88:	f005 ba00 	b.w	800de8c <get_memory>
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	e7bc      	b.n	8008a0a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8008a90:	2000dafc 	.word	0x2000dafc

08008a94 <run_xrce_session>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	788c      	ldrb	r4, [r1, #2]
 8008a98:	b086      	sub	sp, #24
 8008a9a:	2c01      	cmp	r4, #1
 8008a9c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8008aa0:	d00c      	beq.n	8008abc <run_xrce_session+0x28>
 8008aa2:	2401      	movs	r4, #1
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	f10d 020e 	add.w	r2, sp, #14
 8008aaa:	f10d 0317 	add.w	r3, sp, #23
 8008aae:	9400      	str	r4, [sp, #0]
 8008ab0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008ab4:	f001 ff76 	bl	800a9a4 <uxr_run_session_until_all_status>
 8008ab8:	b006      	add	sp, #24
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008ac0:	f001 fbcc 	bl	800a25c <uxr_flash_output_streams>
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	b006      	add	sp, #24
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	bf00      	nop

08008acc <convert_qos_profile>:
 8008acc:	7a4a      	ldrb	r2, [r1, #9]
 8008ace:	f891 c008 	ldrb.w	ip, [r1, #8]
 8008ad2:	2a02      	cmp	r2, #2
 8008ad4:	bf18      	it	ne
 8008ad6:	2200      	movne	r2, #0
 8008ad8:	7002      	strb	r2, [r0, #0]
 8008ada:	f1ac 0202 	sub.w	r2, ip, #2
 8008ade:	fab2 f282 	clz	r2, r2
 8008ae2:	0952      	lsrs	r2, r2, #5
 8008ae4:	7042      	strb	r2, [r0, #1]
 8008ae6:	780a      	ldrb	r2, [r1, #0]
 8008ae8:	8889      	ldrh	r1, [r1, #4]
 8008aea:	f1a2 0202 	sub.w	r2, r2, #2
 8008aee:	8081      	strh	r1, [r0, #4]
 8008af0:	fab2 f282 	clz	r2, r2
 8008af4:	0952      	lsrs	r2, r2, #5
 8008af6:	7082      	strb	r2, [r0, #2]
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop

08008afc <generate_type_name>:
 8008afc:	2300      	movs	r3, #0
 8008afe:	b530      	push	{r4, r5, lr}
 8008b00:	700b      	strb	r3, [r1, #0]
 8008b02:	b087      	sub	sp, #28
 8008b04:	6803      	ldr	r3, [r0, #0]
 8008b06:	4614      	mov	r4, r2
 8008b08:	b1bb      	cbz	r3, 8008b3a <generate_type_name+0x3e>
 8008b0a:	4a0e      	ldr	r2, [pc, #56]	; (8008b44 <generate_type_name+0x48>)
 8008b0c:	4615      	mov	r5, r2
 8008b0e:	9500      	str	r5, [sp, #0]
 8008b10:	9203      	str	r2, [sp, #12]
 8008b12:	4d0d      	ldr	r5, [pc, #52]	; (8008b48 <generate_type_name+0x4c>)
 8008b14:	6842      	ldr	r2, [r0, #4]
 8008b16:	4608      	mov	r0, r1
 8008b18:	490c      	ldr	r1, [pc, #48]	; (8008b4c <generate_type_name+0x50>)
 8008b1a:	9204      	str	r2, [sp, #16]
 8008b1c:	9105      	str	r1, [sp, #20]
 8008b1e:	9102      	str	r1, [sp, #8]
 8008b20:	4621      	mov	r1, r4
 8008b22:	4a0b      	ldr	r2, [pc, #44]	; (8008b50 <generate_type_name+0x54>)
 8008b24:	9501      	str	r5, [sp, #4]
 8008b26:	f008 fc7f 	bl	8011428 <sniprintf>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	bfa8      	it	ge
 8008b2e:	4284      	cmpge	r4, r0
 8008b30:	bfcc      	ite	gt
 8008b32:	2001      	movgt	r0, #1
 8008b34:	2000      	movle	r0, #0
 8008b36:	b007      	add	sp, #28
 8008b38:	bd30      	pop	{r4, r5, pc}
 8008b3a:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <generate_type_name+0x58>)
 8008b3c:	4a01      	ldr	r2, [pc, #4]	; (8008b44 <generate_type_name+0x48>)
 8008b3e:	461d      	mov	r5, r3
 8008b40:	e7e5      	b.n	8008b0e <generate_type_name+0x12>
 8008b42:	bf00      	nop
 8008b44:	080129e4 	.word	0x080129e4
 8008b48:	080129fc 	.word	0x080129fc
 8008b4c:	080129f8 	.word	0x080129f8
 8008b50:	080129e8 	.word	0x080129e8
 8008b54:	08012dd0 	.word	0x08012dd0

08008b58 <generate_topic_name>:
 8008b58:	b530      	push	{r4, r5, lr}
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	4605      	mov	r5, r0
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <generate_topic_name+0x28>)
 8008b62:	4a08      	ldr	r2, [pc, #32]	; (8008b84 <generate_topic_name+0x2c>)
 8008b64:	4608      	mov	r0, r1
 8008b66:	9500      	str	r5, [sp, #0]
 8008b68:	4621      	mov	r1, r4
 8008b6a:	f008 fc5d 	bl	8011428 <sniprintf>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	bfa8      	it	ge
 8008b72:	4284      	cmpge	r4, r0
 8008b74:	bfcc      	ite	gt
 8008b76:	2001      	movgt	r0, #1
 8008b78:	2000      	movle	r0, #0
 8008b7a:	b003      	add	sp, #12
 8008b7c:	bd30      	pop	{r4, r5, pc}
 8008b7e:	bf00      	nop
 8008b80:	08012a08 	.word	0x08012a08
 8008b84:	08012a00 	.word	0x08012a00

08008b88 <is_uxrce_rmw_identifier_valid>:
 8008b88:	b510      	push	{r4, lr}
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	b140      	cbz	r0, 8008ba0 <is_uxrce_rmw_identifier_valid+0x18>
 8008b8e:	f005 f9a1 	bl	800ded4 <rmw_get_implementation_identifier>
 8008b92:	4601      	mov	r1, r0
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7f7 fba3 	bl	80002e0 <strcmp>
 8008b9a:	fab0 f080 	clz	r0, r0
 8008b9e:	0940      	lsrs	r0, r0, #5
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	bf00      	nop

08008ba4 <get_message_typesupport_handle>:
 8008ba4:	6883      	ldr	r3, [r0, #8]
 8008ba6:	4718      	bx	r3

08008ba8 <get_message_typesupport_handle_function>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	4604      	mov	r4, r0
 8008bac:	6800      	ldr	r0, [r0, #0]
 8008bae:	f7f7 fb97 	bl	80002e0 <strcmp>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	bf0c      	ite	eq
 8008bb6:	4620      	moveq	r0, r4
 8008bb8:	2000      	movne	r0, #0
 8008bba:	bd10      	pop	{r4, pc}

08008bbc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	b10a      	cbz	r2, 8008bc6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008bc2:	4803      	ldr	r0, [pc, #12]	; (8008bd0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008bc4:	4770      	bx	lr
 8008bc6:	4a03      	ldr	r2, [pc, #12]	; (8008bd4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	4770      	bx	lr
 8008bd0:	20000030 	.word	0x20000030
 8008bd4:	200000d0 	.word	0x200000d0

08008bd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008bd8:	4a02      	ldr	r2, [pc, #8]	; (8008be4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8008bda:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	200000d0 	.word	0x200000d0
 8008be8:	20000030 	.word	0x20000030

08008bec <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8008bec:	f005 be5e 	b.w	800e8ac <std_msgs__msg__Int32__init>

08008bf0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8008bf0:	f005 be60 	b.w	800e8b4 <std_msgs__msg__Int32__fini>

08008bf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	b10a      	cbz	r2, 8008bfe <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008bfa:	4803      	ldr	r0, [pc, #12]	; (8008c08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008bfc:	4770      	bx	lr
 8008bfe:	4a03      	ldr	r2, [pc, #12]	; (8008c0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008c00:	4801      	ldr	r0, [pc, #4]	; (8008c08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008c02:	6812      	ldr	r2, [r2, #0]
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	4770      	bx	lr
 8008c08:	20000084 	.word	0x20000084
 8008c0c:	200000d4 	.word	0x200000d4

08008c10 <_Int32__max_serialized_size>:
 8008c10:	2104      	movs	r1, #4
 8008c12:	2000      	movs	r0, #0
 8008c14:	b508      	push	{r3, lr}
 8008c16:	f001 f807 	bl	8009c28 <ucdr_alignment>
 8008c1a:	3004      	adds	r0, #4
 8008c1c:	bd08      	pop	{r3, pc}
 8008c1e:	bf00      	nop

08008c20 <_Int32__cdr_deserialize>:
 8008c20:	b109      	cbz	r1, 8008c26 <_Int32__cdr_deserialize+0x6>
 8008c22:	f000 bf19 	b.w	8009a58 <ucdr_deserialize_int32_t>
 8008c26:	4608      	mov	r0, r1
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop

08008c2c <get_serialized_size_std_msgs__msg__Int32>:
 8008c2c:	b138      	cbz	r0, 8008c3e <get_serialized_size_std_msgs__msg__Int32+0x12>
 8008c2e:	b508      	push	{r3, lr}
 8008c30:	460b      	mov	r3, r1
 8008c32:	2104      	movs	r1, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fff7 	bl	8009c28 <ucdr_alignment>
 8008c3a:	3004      	adds	r0, #4
 8008c3c:	bd08      	pop	{r3, pc}
 8008c3e:	4770      	bx	lr

08008c40 <_Int32__cdr_serialize>:
 8008c40:	460a      	mov	r2, r1
 8008c42:	b118      	cbz	r0, 8008c4c <_Int32__cdr_serialize+0xc>
 8008c44:	6801      	ldr	r1, [r0, #0]
 8008c46:	4610      	mov	r0, r2
 8008c48:	f000 be6e 	b.w	8009928 <ucdr_serialize_int32_t>
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop

08008c50 <_Int32__get_serialized_size>:
 8008c50:	b130      	cbz	r0, 8008c60 <_Int32__get_serialized_size+0x10>
 8008c52:	2104      	movs	r1, #4
 8008c54:	2000      	movs	r0, #0
 8008c56:	b508      	push	{r3, lr}
 8008c58:	f000 ffe6 	bl	8009c28 <ucdr_alignment>
 8008c5c:	3004      	adds	r0, #4
 8008c5e:	bd08      	pop	{r3, pc}
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop

08008c64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008c64:	4800      	ldr	r0, [pc, #0]	; (8008c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8008c66:	4770      	bx	lr
 8008c68:	2000009c 	.word	0x2000009c

08008c6c <ucdr_serialize_bool>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	460d      	mov	r5, r1
 8008c70:	2101      	movs	r1, #1
 8008c72:	4604      	mov	r4, r0
 8008c74:	f000 ff8c 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008c78:	b148      	cbz	r0, 8008c8e <ucdr_serialize_bool+0x22>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	701d      	strb	r5, [r3, #0]
 8008c80:	68a2      	ldr	r2, [r4, #8]
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	440a      	add	r2, r1
 8008c86:	7561      	strb	r1, [r4, #21]
 8008c88:	440b      	add	r3, r1
 8008c8a:	60a2      	str	r2, [r4, #8]
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	7da0      	ldrb	r0, [r4, #22]
 8008c90:	f080 0001 	eor.w	r0, r0, #1
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	bf00      	nop

08008c98 <ucdr_deserialize_bool>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	f000 ff76 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008ca4:	b160      	cbz	r0, 8008cc0 <ucdr_deserialize_bool+0x28>
 8008ca6:	68a2      	ldr	r2, [r4, #8]
 8008ca8:	2101      	movs	r1, #1
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008cb0:	440b      	add	r3, r1
 8008cb2:	3800      	subs	r0, #0
 8008cb4:	bf18      	it	ne
 8008cb6:	2001      	movne	r0, #1
 8008cb8:	7028      	strb	r0, [r5, #0]
 8008cba:	60a2      	str	r2, [r4, #8]
 8008cbc:	6123      	str	r3, [r4, #16]
 8008cbe:	7561      	strb	r1, [r4, #21]
 8008cc0:	7da0      	ldrb	r0, [r4, #22]
 8008cc2:	f080 0001 	eor.w	r0, r0, #1
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}

08008cc8 <ucdr_serialize_uint8_t>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	460d      	mov	r5, r1
 8008ccc:	2101      	movs	r1, #1
 8008cce:	4604      	mov	r4, r0
 8008cd0:	f000 ff5e 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008cd4:	b148      	cbz	r0, 8008cea <ucdr_serialize_uint8_t+0x22>
 8008cd6:	68a3      	ldr	r3, [r4, #8]
 8008cd8:	2101      	movs	r1, #1
 8008cda:	701d      	strb	r5, [r3, #0]
 8008cdc:	68a2      	ldr	r2, [r4, #8]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	7561      	strb	r1, [r4, #21]
 8008ce4:	440b      	add	r3, r1
 8008ce6:	60a2      	str	r2, [r4, #8]
 8008ce8:	6123      	str	r3, [r4, #16]
 8008cea:	7da0      	ldrb	r0, [r4, #22]
 8008cec:	f080 0001 	eor.w	r0, r0, #1
 8008cf0:	bd38      	pop	{r3, r4, r5, pc}
 8008cf2:	bf00      	nop

08008cf4 <ucdr_deserialize_uint8_t>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	f000 ff48 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008d00:	b150      	cbz	r0, 8008d18 <ucdr_deserialize_uint8_t+0x24>
 8008d02:	68a3      	ldr	r3, [r4, #8]
 8008d04:	2101      	movs	r1, #1
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	702b      	strb	r3, [r5, #0]
 8008d0a:	68a2      	ldr	r2, [r4, #8]
 8008d0c:	6923      	ldr	r3, [r4, #16]
 8008d0e:	440a      	add	r2, r1
 8008d10:	7561      	strb	r1, [r4, #21]
 8008d12:	440b      	add	r3, r1
 8008d14:	60a2      	str	r2, [r4, #8]
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	7da0      	ldrb	r0, [r4, #22]
 8008d1a:	f080 0001 	eor.w	r0, r0, #1
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}

08008d20 <ucdr_serialize_uint16_t>:
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	460b      	mov	r3, r1
 8008d26:	b082      	sub	sp, #8
 8008d28:	4604      	mov	r4, r0
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008d30:	f000 ff82 	bl	8009c38 <ucdr_buffer_alignment>
 8008d34:	4601      	mov	r1, r0
 8008d36:	4620      	mov	r0, r4
 8008d38:	7d67      	ldrb	r7, [r4, #21]
 8008d3a:	f000 ffc5 	bl	8009cc8 <ucdr_advance_buffer>
 8008d3e:	2102      	movs	r1, #2
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 ff19 	bl	8009b78 <ucdr_check_buffer_available_for>
 8008d46:	bb78      	cbnz	r0, 8008da8 <ucdr_serialize_uint16_t+0x88>
 8008d48:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	d926      	bls.n	8008d9e <ucdr_serialize_uint16_t+0x7e>
 8008d50:	1b5e      	subs	r6, r3, r5
 8008d52:	60a3      	str	r3, [r4, #8]
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f1c6 0802 	rsb	r8, r6, #2
 8008d5c:	4433      	add	r3, r6
 8008d5e:	4641      	mov	r1, r8
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	f000 ff15 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d03b      	beq.n	8008de2 <ucdr_serialize_uint16_t+0xc2>
 8008d6a:	7d23      	ldrb	r3, [r4, #20]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d04a      	beq.n	8008e06 <ucdr_serialize_uint16_t+0xe6>
 8008d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d74:	702b      	strb	r3, [r5, #0]
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	d040      	beq.n	8008dfc <ucdr_serialize_uint16_t+0xdc>
 8008d7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d7e:	706b      	strb	r3, [r5, #1]
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	2102      	movs	r1, #2
 8008d84:	68a2      	ldr	r2, [r4, #8]
 8008d86:	3302      	adds	r3, #2
 8008d88:	7da0      	ldrb	r0, [r4, #22]
 8008d8a:	4442      	add	r2, r8
 8008d8c:	7561      	strb	r1, [r4, #21]
 8008d8e:	1b9e      	subs	r6, r3, r6
 8008d90:	f080 0001 	eor.w	r0, r0, #1
 8008d94:	60a2      	str	r2, [r4, #8]
 8008d96:	6126      	str	r6, [r4, #16]
 8008d98:	b002      	add	sp, #8
 8008d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9e:	2102      	movs	r1, #2
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 fef5 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008da6:	b190      	cbz	r0, 8008dce <ucdr_serialize_uint16_t+0xae>
 8008da8:	7d23      	ldrb	r3, [r4, #20]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	68a3      	ldr	r3, [r4, #8]
 8008dae:	d014      	beq.n	8008dda <ucdr_serialize_uint16_t+0xba>
 8008db0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008db4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008db8:	7019      	strb	r1, [r3, #0]
 8008dba:	68a3      	ldr	r3, [r4, #8]
 8008dbc:	705a      	strb	r2, [r3, #1]
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	68a2      	ldr	r2, [r4, #8]
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	440a      	add	r2, r1
 8008dc6:	7561      	strb	r1, [r4, #21]
 8008dc8:	440b      	add	r3, r1
 8008dca:	60a2      	str	r2, [r4, #8]
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	7da0      	ldrb	r0, [r4, #22]
 8008dd0:	f080 0001 	eor.w	r0, r0, #1
 8008dd4:	b002      	add	sp, #8
 8008dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	e7ed      	b.n	8008dbe <ucdr_serialize_uint16_t+0x9e>
 8008de2:	68a2      	ldr	r2, [r4, #8]
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	7da0      	ldrb	r0, [r4, #22]
 8008de8:	1b92      	subs	r2, r2, r6
 8008dea:	1b9b      	subs	r3, r3, r6
 8008dec:	7567      	strb	r7, [r4, #21]
 8008dee:	f080 0001 	eor.w	r0, r0, #1
 8008df2:	60a2      	str	r2, [r4, #8]
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	b002      	add	sp, #8
 8008df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dfc:	68a3      	ldr	r3, [r4, #8]
 8008dfe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e02:	701a      	strb	r2, [r3, #0]
 8008e04:	e7bc      	b.n	8008d80 <ucdr_serialize_uint16_t+0x60>
 8008e06:	4628      	mov	r0, r5
 8008e08:	f10d 0506 	add.w	r5, sp, #6
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f008 f962 	bl	80110d8 <memcpy>
 8008e14:	4642      	mov	r2, r8
 8008e16:	19a9      	adds	r1, r5, r6
 8008e18:	68a0      	ldr	r0, [r4, #8]
 8008e1a:	f008 f95d 	bl	80110d8 <memcpy>
 8008e1e:	e7af      	b.n	8008d80 <ucdr_serialize_uint16_t+0x60>

08008e20 <ucdr_serialize_endian_uint16_t>:
 8008e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e24:	4604      	mov	r4, r0
 8008e26:	b083      	sub	sp, #12
 8008e28:	460d      	mov	r5, r1
 8008e2a:	2102      	movs	r1, #2
 8008e2c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008e30:	f000 ff02 	bl	8009c38 <ucdr_buffer_alignment>
 8008e34:	4601      	mov	r1, r0
 8008e36:	4620      	mov	r0, r4
 8008e38:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008e3c:	f000 ff44 	bl	8009cc8 <ucdr_advance_buffer>
 8008e40:	2102      	movs	r1, #2
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 fe98 	bl	8009b78 <ucdr_check_buffer_available_for>
 8008e48:	bb70      	cbnz	r0, 8008ea8 <ucdr_serialize_endian_uint16_t+0x88>
 8008e4a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008e4e:	42be      	cmp	r6, r7
 8008e50:	d925      	bls.n	8008e9e <ucdr_serialize_endian_uint16_t+0x7e>
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	4620      	mov	r0, r4
 8008e56:	60a6      	str	r6, [r4, #8]
 8008e58:	1bf6      	subs	r6, r6, r7
 8008e5a:	4433      	add	r3, r6
 8008e5c:	f1c6 0902 	rsb	r9, r6, #2
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	4649      	mov	r1, r9
 8008e64:	f000 fe94 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d039      	beq.n	8008ee0 <ucdr_serialize_endian_uint16_t+0xc0>
 8008e6c:	2d01      	cmp	r5, #1
 8008e6e:	d04a      	beq.n	8008f06 <ucdr_serialize_endian_uint16_t+0xe6>
 8008e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e74:	703b      	strb	r3, [r7, #0]
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d040      	beq.n	8008efc <ucdr_serialize_endian_uint16_t+0xdc>
 8008e7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e7e:	707b      	strb	r3, [r7, #1]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	2102      	movs	r1, #2
 8008e84:	68a2      	ldr	r2, [r4, #8]
 8008e86:	7da0      	ldrb	r0, [r4, #22]
 8008e88:	3302      	adds	r3, #2
 8008e8a:	444a      	add	r2, r9
 8008e8c:	7561      	strb	r1, [r4, #21]
 8008e8e:	1b9b      	subs	r3, r3, r6
 8008e90:	f080 0001 	eor.w	r0, r0, #1
 8008e94:	60a2      	str	r2, [r4, #8]
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	b003      	add	sp, #12
 8008e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e9e:	2102      	movs	r1, #2
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fe75 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008ea6:	b188      	cbz	r0, 8008ecc <ucdr_serialize_endian_uint16_t+0xac>
 8008ea8:	2d01      	cmp	r5, #1
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	d014      	beq.n	8008ed8 <ucdr_serialize_endian_uint16_t+0xb8>
 8008eae:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008eb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008eb6:	7019      	strb	r1, [r3, #0]
 8008eb8:	68a3      	ldr	r3, [r4, #8]
 8008eba:	705a      	strb	r2, [r3, #1]
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	68a2      	ldr	r2, [r4, #8]
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	7561      	strb	r1, [r4, #21]
 8008ec6:	440b      	add	r3, r1
 8008ec8:	60a2      	str	r2, [r4, #8]
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	7da0      	ldrb	r0, [r4, #22]
 8008ece:	f080 0001 	eor.w	r0, r0, #1
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	e7ed      	b.n	8008ebc <ucdr_serialize_endian_uint16_t+0x9c>
 8008ee0:	68a2      	ldr	r2, [r4, #8]
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	7da0      	ldrb	r0, [r4, #22]
 8008ee6:	1b92      	subs	r2, r2, r6
 8008ee8:	1b9b      	subs	r3, r3, r6
 8008eea:	f884 8015 	strb.w	r8, [r4, #21]
 8008eee:	f080 0001 	eor.w	r0, r0, #1
 8008ef2:	60a2      	str	r2, [r4, #8]
 8008ef4:	6123      	str	r3, [r4, #16]
 8008ef6:	b003      	add	sp, #12
 8008ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008efc:	68a3      	ldr	r3, [r4, #8]
 8008efe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e7bc      	b.n	8008e80 <ucdr_serialize_endian_uint16_t+0x60>
 8008f06:	f10d 0506 	add.w	r5, sp, #6
 8008f0a:	4632      	mov	r2, r6
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f008 f8e2 	bl	80110d8 <memcpy>
 8008f14:	464a      	mov	r2, r9
 8008f16:	19a9      	adds	r1, r5, r6
 8008f18:	68a0      	ldr	r0, [r4, #8]
 8008f1a:	f008 f8dd 	bl	80110d8 <memcpy>
 8008f1e:	e7af      	b.n	8008e80 <ucdr_serialize_endian_uint16_t+0x60>

08008f20 <ucdr_deserialize_uint16_t>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	2102      	movs	r1, #2
 8008f2a:	f000 fe85 	bl	8009c38 <ucdr_buffer_alignment>
 8008f2e:	4601      	mov	r1, r0
 8008f30:	4620      	mov	r0, r4
 8008f32:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008f36:	f000 fec7 	bl	8009cc8 <ucdr_advance_buffer>
 8008f3a:	2102      	movs	r1, #2
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fe1b 	bl	8009b78 <ucdr_check_buffer_available_for>
 8008f42:	bb60      	cbnz	r0, 8008f9e <ucdr_deserialize_uint16_t+0x7e>
 8008f44:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008f48:	42be      	cmp	r6, r7
 8008f4a:	d923      	bls.n	8008f94 <ucdr_deserialize_uint16_t+0x74>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	60a6      	str	r6, [r4, #8]
 8008f52:	1bf6      	subs	r6, r6, r7
 8008f54:	4433      	add	r3, r6
 8008f56:	f1c6 0902 	rsb	r9, r6, #2
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	f000 fe17 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d034      	beq.n	8008fd0 <ucdr_deserialize_uint16_t+0xb0>
 8008f66:	7d23      	ldrb	r3, [r4, #20]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d042      	beq.n	8008ff2 <ucdr_deserialize_uint16_t+0xd2>
 8008f6c:	787b      	ldrb	r3, [r7, #1]
 8008f6e:	702b      	strb	r3, [r5, #0]
 8008f70:	2e00      	cmp	r6, #0
 8008f72:	d03a      	beq.n	8008fea <ucdr_deserialize_uint16_t+0xca>
 8008f74:	783b      	ldrb	r3, [r7, #0]
 8008f76:	706b      	strb	r3, [r5, #1]
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	2102      	movs	r1, #2
 8008f7c:	68a2      	ldr	r2, [r4, #8]
 8008f7e:	3302      	adds	r3, #2
 8008f80:	7da0      	ldrb	r0, [r4, #22]
 8008f82:	444a      	add	r2, r9
 8008f84:	7561      	strb	r1, [r4, #21]
 8008f86:	1b9b      	subs	r3, r3, r6
 8008f88:	f080 0001 	eor.w	r0, r0, #1
 8008f8c:	60a2      	str	r2, [r4, #8]
 8008f8e:	6123      	str	r3, [r4, #16]
 8008f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f94:	2102      	movs	r1, #2
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 fdfa 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8008f9c:	b180      	cbz	r0, 8008fc0 <ucdr_deserialize_uint16_t+0xa0>
 8008f9e:	7d23      	ldrb	r3, [r4, #20]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	d011      	beq.n	8008fca <ucdr_deserialize_uint16_t+0xaa>
 8008fa6:	785b      	ldrb	r3, [r3, #1]
 8008fa8:	702b      	strb	r3, [r5, #0]
 8008faa:	68a3      	ldr	r3, [r4, #8]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	706b      	strb	r3, [r5, #1]
 8008fb0:	2102      	movs	r1, #2
 8008fb2:	68a2      	ldr	r2, [r4, #8]
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	440a      	add	r2, r1
 8008fb8:	7561      	strb	r1, [r4, #21]
 8008fba:	440b      	add	r3, r1
 8008fbc:	60a2      	str	r2, [r4, #8]
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	7da0      	ldrb	r0, [r4, #22]
 8008fc2:	f080 0001 	eor.w	r0, r0, #1
 8008fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	802b      	strh	r3, [r5, #0]
 8008fce:	e7ef      	b.n	8008fb0 <ucdr_deserialize_uint16_t+0x90>
 8008fd0:	68a2      	ldr	r2, [r4, #8]
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	1b92      	subs	r2, r2, r6
 8008fd6:	7da0      	ldrb	r0, [r4, #22]
 8008fd8:	1b9b      	subs	r3, r3, r6
 8008fda:	f884 8015 	strb.w	r8, [r4, #21]
 8008fde:	f080 0001 	eor.w	r0, r0, #1
 8008fe2:	60a2      	str	r2, [r4, #8]
 8008fe4:	6123      	str	r3, [r4, #16]
 8008fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	706b      	strb	r3, [r5, #1]
 8008ff0:	e7c2      	b.n	8008f78 <ucdr_deserialize_uint16_t+0x58>
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f008 f86e 	bl	80110d8 <memcpy>
 8008ffc:	464a      	mov	r2, r9
 8008ffe:	19a8      	adds	r0, r5, r6
 8009000:	68a1      	ldr	r1, [r4, #8]
 8009002:	f008 f869 	bl	80110d8 <memcpy>
 8009006:	e7b7      	b.n	8008f78 <ucdr_deserialize_uint16_t+0x58>

08009008 <ucdr_deserialize_endian_uint16_t>:
 8009008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	460e      	mov	r6, r1
 8009010:	2102      	movs	r1, #2
 8009012:	4615      	mov	r5, r2
 8009014:	f000 fe10 	bl	8009c38 <ucdr_buffer_alignment>
 8009018:	4601      	mov	r1, r0
 800901a:	4620      	mov	r0, r4
 800901c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009020:	f000 fe52 	bl	8009cc8 <ucdr_advance_buffer>
 8009024:	2102      	movs	r1, #2
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fda6 	bl	8009b78 <ucdr_check_buffer_available_for>
 800902c:	bb70      	cbnz	r0, 800908c <ucdr_deserialize_endian_uint16_t+0x84>
 800902e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8009032:	454f      	cmp	r7, r9
 8009034:	d925      	bls.n	8009082 <ucdr_deserialize_endian_uint16_t+0x7a>
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	4620      	mov	r0, r4
 800903a:	60a7      	str	r7, [r4, #8]
 800903c:	eba7 0709 	sub.w	r7, r7, r9
 8009040:	443b      	add	r3, r7
 8009042:	f1c7 0a02 	rsb	sl, r7, #2
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	4651      	mov	r1, sl
 800904a:	f000 fda1 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 800904e:	2800      	cmp	r0, #0
 8009050:	d034      	beq.n	80090bc <ucdr_deserialize_endian_uint16_t+0xb4>
 8009052:	2e01      	cmp	r6, #1
 8009054:	d043      	beq.n	80090de <ucdr_deserialize_endian_uint16_t+0xd6>
 8009056:	f899 3001 	ldrb.w	r3, [r9, #1]
 800905a:	702b      	strb	r3, [r5, #0]
 800905c:	2f00      	cmp	r7, #0
 800905e:	d03a      	beq.n	80090d6 <ucdr_deserialize_endian_uint16_t+0xce>
 8009060:	f899 3000 	ldrb.w	r3, [r9]
 8009064:	706b      	strb	r3, [r5, #1]
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	2102      	movs	r1, #2
 800906a:	68a2      	ldr	r2, [r4, #8]
 800906c:	3302      	adds	r3, #2
 800906e:	7da0      	ldrb	r0, [r4, #22]
 8009070:	4452      	add	r2, sl
 8009072:	7561      	strb	r1, [r4, #21]
 8009074:	1bdb      	subs	r3, r3, r7
 8009076:	f080 0001 	eor.w	r0, r0, #1
 800907a:	60a2      	str	r2, [r4, #8]
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009082:	2102      	movs	r1, #2
 8009084:	4620      	mov	r0, r4
 8009086:	f000 fd83 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 800908a:	b178      	cbz	r0, 80090ac <ucdr_deserialize_endian_uint16_t+0xa4>
 800908c:	2e01      	cmp	r6, #1
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	d011      	beq.n	80090b6 <ucdr_deserialize_endian_uint16_t+0xae>
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	702b      	strb	r3, [r5, #0]
 8009096:	68a3      	ldr	r3, [r4, #8]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	706b      	strb	r3, [r5, #1]
 800909c:	2102      	movs	r1, #2
 800909e:	68a2      	ldr	r2, [r4, #8]
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	440a      	add	r2, r1
 80090a4:	7561      	strb	r1, [r4, #21]
 80090a6:	440b      	add	r3, r1
 80090a8:	60a2      	str	r2, [r4, #8]
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	7da0      	ldrb	r0, [r4, #22]
 80090ae:	f080 0001 	eor.w	r0, r0, #1
 80090b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	802b      	strh	r3, [r5, #0]
 80090ba:	e7ef      	b.n	800909c <ucdr_deserialize_endian_uint16_t+0x94>
 80090bc:	68a2      	ldr	r2, [r4, #8]
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	1bd2      	subs	r2, r2, r7
 80090c2:	7da0      	ldrb	r0, [r4, #22]
 80090c4:	1bdb      	subs	r3, r3, r7
 80090c6:	f884 8015 	strb.w	r8, [r4, #21]
 80090ca:	f080 0001 	eor.w	r0, r0, #1
 80090ce:	60a2      	str	r2, [r4, #8]
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	706b      	strb	r3, [r5, #1]
 80090dc:	e7c3      	b.n	8009066 <ucdr_deserialize_endian_uint16_t+0x5e>
 80090de:	4649      	mov	r1, r9
 80090e0:	463a      	mov	r2, r7
 80090e2:	4628      	mov	r0, r5
 80090e4:	f007 fff8 	bl	80110d8 <memcpy>
 80090e8:	4652      	mov	r2, sl
 80090ea:	19e8      	adds	r0, r5, r7
 80090ec:	68a1      	ldr	r1, [r4, #8]
 80090ee:	f007 fff3 	bl	80110d8 <memcpy>
 80090f2:	e7b8      	b.n	8009066 <ucdr_deserialize_endian_uint16_t+0x5e>

080090f4 <ucdr_serialize_uint32_t>:
 80090f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	4604      	mov	r4, r0
 80090fc:	9101      	str	r1, [sp, #4]
 80090fe:	2104      	movs	r1, #4
 8009100:	f000 fd9a 	bl	8009c38 <ucdr_buffer_alignment>
 8009104:	4601      	mov	r1, r0
 8009106:	4620      	mov	r0, r4
 8009108:	7d67      	ldrb	r7, [r4, #21]
 800910a:	f000 fddd 	bl	8009cc8 <ucdr_advance_buffer>
 800910e:	2104      	movs	r1, #4
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fd31 	bl	8009b78 <ucdr_check_buffer_available_for>
 8009116:	2800      	cmp	r0, #0
 8009118:	d139      	bne.n	800918e <ucdr_serialize_uint32_t+0x9a>
 800911a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800911e:	42ab      	cmp	r3, r5
 8009120:	d930      	bls.n	8009184 <ucdr_serialize_uint32_t+0x90>
 8009122:	1b5e      	subs	r6, r3, r5
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	4620      	mov	r0, r4
 800912a:	f1c6 0804 	rsb	r8, r6, #4
 800912e:	4433      	add	r3, r6
 8009130:	4641      	mov	r1, r8
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	f000 fd2c 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009138:	2800      	cmp	r0, #0
 800913a:	d04c      	beq.n	80091d6 <ucdr_serialize_uint32_t+0xe2>
 800913c:	7d23      	ldrb	r3, [r4, #20]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d063      	beq.n	800920a <ucdr_serialize_uint32_t+0x116>
 8009142:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009146:	702b      	strb	r3, [r5, #0]
 8009148:	2e00      	cmp	r6, #0
 800914a:	d051      	beq.n	80091f0 <ucdr_serialize_uint32_t+0xfc>
 800914c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009150:	2e01      	cmp	r6, #1
 8009152:	706b      	strb	r3, [r5, #1]
 8009154:	d050      	beq.n	80091f8 <ucdr_serialize_uint32_t+0x104>
 8009156:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800915a:	2e02      	cmp	r6, #2
 800915c:	70ab      	strb	r3, [r5, #2]
 800915e:	d04f      	beq.n	8009200 <ucdr_serialize_uint32_t+0x10c>
 8009160:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009164:	70eb      	strb	r3, [r5, #3]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	2104      	movs	r1, #4
 800916a:	68a2      	ldr	r2, [r4, #8]
 800916c:	3304      	adds	r3, #4
 800916e:	7da0      	ldrb	r0, [r4, #22]
 8009170:	4442      	add	r2, r8
 8009172:	7561      	strb	r1, [r4, #21]
 8009174:	1b9e      	subs	r6, r3, r6
 8009176:	f080 0001 	eor.w	r0, r0, #1
 800917a:	60a2      	str	r2, [r4, #8]
 800917c:	6126      	str	r6, [r4, #16]
 800917e:	b002      	add	sp, #8
 8009180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009184:	2104      	movs	r1, #4
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fd02 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 800918c:	b1d0      	cbz	r0, 80091c4 <ucdr_serialize_uint32_t+0xd0>
 800918e:	7d23      	ldrb	r3, [r4, #20]
 8009190:	2b01      	cmp	r3, #1
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	d01c      	beq.n	80091d0 <ucdr_serialize_uint32_t+0xdc>
 8009196:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800919a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800919e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80091a2:	7018      	strb	r0, [r3, #0]
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	705a      	strb	r2, [r3, #1]
 80091a8:	68a3      	ldr	r3, [r4, #8]
 80091aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80091ae:	7099      	strb	r1, [r3, #2]
 80091b0:	68a3      	ldr	r3, [r4, #8]
 80091b2:	70da      	strb	r2, [r3, #3]
 80091b4:	2104      	movs	r1, #4
 80091b6:	68a2      	ldr	r2, [r4, #8]
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	440a      	add	r2, r1
 80091bc:	7561      	strb	r1, [r4, #21]
 80091be:	440b      	add	r3, r1
 80091c0:	60a2      	str	r2, [r4, #8]
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	7da0      	ldrb	r0, [r4, #22]
 80091c6:	f080 0001 	eor.w	r0, r0, #1
 80091ca:	b002      	add	sp, #8
 80091cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d0:	9a01      	ldr	r2, [sp, #4]
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e7ee      	b.n	80091b4 <ucdr_serialize_uint32_t+0xc0>
 80091d6:	68a2      	ldr	r2, [r4, #8]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	7da0      	ldrb	r0, [r4, #22]
 80091dc:	1b92      	subs	r2, r2, r6
 80091de:	1b9b      	subs	r3, r3, r6
 80091e0:	7567      	strb	r7, [r4, #21]
 80091e2:	f080 0001 	eor.w	r0, r0, #1
 80091e6:	60a2      	str	r2, [r4, #8]
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	b002      	add	sp, #8
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	68a3      	ldr	r3, [r4, #8]
 80091fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	68a3      	ldr	r3, [r4, #8]
 8009202:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	e7ad      	b.n	8009166 <ucdr_serialize_uint32_t+0x72>
 800920a:	4628      	mov	r0, r5
 800920c:	ad01      	add	r5, sp, #4
 800920e:	4632      	mov	r2, r6
 8009210:	4629      	mov	r1, r5
 8009212:	f007 ff61 	bl	80110d8 <memcpy>
 8009216:	4642      	mov	r2, r8
 8009218:	19a9      	adds	r1, r5, r6
 800921a:	68a0      	ldr	r0, [r4, #8]
 800921c:	f007 ff5c 	bl	80110d8 <memcpy>
 8009220:	e7a1      	b.n	8009166 <ucdr_serialize_uint32_t+0x72>
 8009222:	bf00      	nop

08009224 <ucdr_serialize_endian_uint32_t>:
 8009224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009228:	4604      	mov	r4, r0
 800922a:	b083      	sub	sp, #12
 800922c:	460d      	mov	r5, r1
 800922e:	2104      	movs	r1, #4
 8009230:	9201      	str	r2, [sp, #4]
 8009232:	f000 fd01 	bl	8009c38 <ucdr_buffer_alignment>
 8009236:	4601      	mov	r1, r0
 8009238:	4620      	mov	r0, r4
 800923a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800923e:	f000 fd43 	bl	8009cc8 <ucdr_advance_buffer>
 8009242:	2104      	movs	r1, #4
 8009244:	4620      	mov	r0, r4
 8009246:	f000 fc97 	bl	8009b78 <ucdr_check_buffer_available_for>
 800924a:	2800      	cmp	r0, #0
 800924c:	d138      	bne.n	80092c0 <ucdr_serialize_endian_uint32_t+0x9c>
 800924e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009252:	42b7      	cmp	r7, r6
 8009254:	d92f      	bls.n	80092b6 <ucdr_serialize_endian_uint32_t+0x92>
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	4620      	mov	r0, r4
 800925a:	60a7      	str	r7, [r4, #8]
 800925c:	1bbf      	subs	r7, r7, r6
 800925e:	443b      	add	r3, r7
 8009260:	f1c7 0904 	rsb	r9, r7, #4
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	4649      	mov	r1, r9
 8009268:	f000 fc92 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 800926c:	2800      	cmp	r0, #0
 800926e:	d04a      	beq.n	8009306 <ucdr_serialize_endian_uint32_t+0xe2>
 8009270:	2d01      	cmp	r5, #1
 8009272:	d063      	beq.n	800933c <ucdr_serialize_endian_uint32_t+0x118>
 8009274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009278:	7033      	strb	r3, [r6, #0]
 800927a:	2f00      	cmp	r7, #0
 800927c:	d051      	beq.n	8009322 <ucdr_serialize_endian_uint32_t+0xfe>
 800927e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009282:	2f01      	cmp	r7, #1
 8009284:	7073      	strb	r3, [r6, #1]
 8009286:	d050      	beq.n	800932a <ucdr_serialize_endian_uint32_t+0x106>
 8009288:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800928c:	2f02      	cmp	r7, #2
 800928e:	70b3      	strb	r3, [r6, #2]
 8009290:	d04f      	beq.n	8009332 <ucdr_serialize_endian_uint32_t+0x10e>
 8009292:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009296:	70f3      	strb	r3, [r6, #3]
 8009298:	6923      	ldr	r3, [r4, #16]
 800929a:	2104      	movs	r1, #4
 800929c:	68a2      	ldr	r2, [r4, #8]
 800929e:	7da0      	ldrb	r0, [r4, #22]
 80092a0:	3304      	adds	r3, #4
 80092a2:	444a      	add	r2, r9
 80092a4:	7561      	strb	r1, [r4, #21]
 80092a6:	1bdb      	subs	r3, r3, r7
 80092a8:	f080 0001 	eor.w	r0, r0, #1
 80092ac:	60a2      	str	r2, [r4, #8]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	b003      	add	sp, #12
 80092b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092b6:	2104      	movs	r1, #4
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 fc69 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 80092be:	b1c8      	cbz	r0, 80092f4 <ucdr_serialize_endian_uint32_t+0xd0>
 80092c0:	2d01      	cmp	r5, #1
 80092c2:	68a3      	ldr	r3, [r4, #8]
 80092c4:	d01c      	beq.n	8009300 <ucdr_serialize_endian_uint32_t+0xdc>
 80092c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80092ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80092ce:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80092d2:	7018      	strb	r0, [r3, #0]
 80092d4:	68a3      	ldr	r3, [r4, #8]
 80092d6:	705a      	strb	r2, [r3, #1]
 80092d8:	68a3      	ldr	r3, [r4, #8]
 80092da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80092de:	7099      	strb	r1, [r3, #2]
 80092e0:	68a3      	ldr	r3, [r4, #8]
 80092e2:	70da      	strb	r2, [r3, #3]
 80092e4:	2104      	movs	r1, #4
 80092e6:	68a2      	ldr	r2, [r4, #8]
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	440a      	add	r2, r1
 80092ec:	7561      	strb	r1, [r4, #21]
 80092ee:	440b      	add	r3, r1
 80092f0:	60a2      	str	r2, [r4, #8]
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	7da0      	ldrb	r0, [r4, #22]
 80092f6:	f080 0001 	eor.w	r0, r0, #1
 80092fa:	b003      	add	sp, #12
 80092fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009300:	9a01      	ldr	r2, [sp, #4]
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	e7ee      	b.n	80092e4 <ucdr_serialize_endian_uint32_t+0xc0>
 8009306:	68a2      	ldr	r2, [r4, #8]
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	7da0      	ldrb	r0, [r4, #22]
 800930c:	1bd2      	subs	r2, r2, r7
 800930e:	1bdb      	subs	r3, r3, r7
 8009310:	f884 8015 	strb.w	r8, [r4, #21]
 8009314:	f080 0001 	eor.w	r0, r0, #1
 8009318:	60a2      	str	r2, [r4, #8]
 800931a:	6123      	str	r3, [r4, #16]
 800931c:	b003      	add	sp, #12
 800931e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009322:	68a3      	ldr	r3, [r4, #8]
 8009324:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	e7ad      	b.n	8009298 <ucdr_serialize_endian_uint32_t+0x74>
 800933c:	ad01      	add	r5, sp, #4
 800933e:	463a      	mov	r2, r7
 8009340:	4630      	mov	r0, r6
 8009342:	4629      	mov	r1, r5
 8009344:	f007 fec8 	bl	80110d8 <memcpy>
 8009348:	464a      	mov	r2, r9
 800934a:	19e9      	adds	r1, r5, r7
 800934c:	68a0      	ldr	r0, [r4, #8]
 800934e:	f007 fec3 	bl	80110d8 <memcpy>
 8009352:	e7a1      	b.n	8009298 <ucdr_serialize_endian_uint32_t+0x74>

08009354 <ucdr_deserialize_uint32_t>:
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	2104      	movs	r1, #4
 800935e:	f000 fc6b 	bl	8009c38 <ucdr_buffer_alignment>
 8009362:	4601      	mov	r1, r0
 8009364:	4620      	mov	r0, r4
 8009366:	f894 8015 	ldrb.w	r8, [r4, #21]
 800936a:	f000 fcad 	bl	8009cc8 <ucdr_advance_buffer>
 800936e:	2104      	movs	r1, #4
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fc01 	bl	8009b78 <ucdr_check_buffer_available_for>
 8009376:	2800      	cmp	r0, #0
 8009378:	d138      	bne.n	80093ec <ucdr_deserialize_uint32_t+0x98>
 800937a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800937e:	42b7      	cmp	r7, r6
 8009380:	d92f      	bls.n	80093e2 <ucdr_deserialize_uint32_t+0x8e>
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	4620      	mov	r0, r4
 8009386:	60a7      	str	r7, [r4, #8]
 8009388:	1bbf      	subs	r7, r7, r6
 800938a:	443b      	add	r3, r7
 800938c:	f1c7 0904 	rsb	r9, r7, #4
 8009390:	6123      	str	r3, [r4, #16]
 8009392:	4649      	mov	r1, r9
 8009394:	f000 fbfc 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009398:	2800      	cmp	r0, #0
 800939a:	d046      	beq.n	800942a <ucdr_deserialize_uint32_t+0xd6>
 800939c:	7d23      	ldrb	r3, [r4, #20]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d05c      	beq.n	800945c <ucdr_deserialize_uint32_t+0x108>
 80093a2:	78f3      	ldrb	r3, [r6, #3]
 80093a4:	702b      	strb	r3, [r5, #0]
 80093a6:	2f00      	cmp	r7, #0
 80093a8:	d04c      	beq.n	8009444 <ucdr_deserialize_uint32_t+0xf0>
 80093aa:	78b3      	ldrb	r3, [r6, #2]
 80093ac:	2f01      	cmp	r7, #1
 80093ae:	706b      	strb	r3, [r5, #1]
 80093b0:	f105 0302 	add.w	r3, r5, #2
 80093b4:	d04a      	beq.n	800944c <ucdr_deserialize_uint32_t+0xf8>
 80093b6:	7873      	ldrb	r3, [r6, #1]
 80093b8:	2f02      	cmp	r7, #2
 80093ba:	70ab      	strb	r3, [r5, #2]
 80093bc:	f105 0303 	add.w	r3, r5, #3
 80093c0:	d048      	beq.n	8009454 <ucdr_deserialize_uint32_t+0x100>
 80093c2:	7833      	ldrb	r3, [r6, #0]
 80093c4:	70eb      	strb	r3, [r5, #3]
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	2104      	movs	r1, #4
 80093ca:	68a2      	ldr	r2, [r4, #8]
 80093cc:	3304      	adds	r3, #4
 80093ce:	7da0      	ldrb	r0, [r4, #22]
 80093d0:	444a      	add	r2, r9
 80093d2:	7561      	strb	r1, [r4, #21]
 80093d4:	1bdb      	subs	r3, r3, r7
 80093d6:	f080 0001 	eor.w	r0, r0, #1
 80093da:	60a2      	str	r2, [r4, #8]
 80093dc:	6123      	str	r3, [r4, #16]
 80093de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093e2:	2104      	movs	r1, #4
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fbd3 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 80093ea:	b1b0      	cbz	r0, 800941a <ucdr_deserialize_uint32_t+0xc6>
 80093ec:	7d23      	ldrb	r3, [r4, #20]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	68a3      	ldr	r3, [r4, #8]
 80093f2:	d017      	beq.n	8009424 <ucdr_deserialize_uint32_t+0xd0>
 80093f4:	78db      	ldrb	r3, [r3, #3]
 80093f6:	702b      	strb	r3, [r5, #0]
 80093f8:	68a3      	ldr	r3, [r4, #8]
 80093fa:	789b      	ldrb	r3, [r3, #2]
 80093fc:	706b      	strb	r3, [r5, #1]
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	785b      	ldrb	r3, [r3, #1]
 8009402:	70ab      	strb	r3, [r5, #2]
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	70eb      	strb	r3, [r5, #3]
 800940a:	2104      	movs	r1, #4
 800940c:	68a2      	ldr	r2, [r4, #8]
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	440a      	add	r2, r1
 8009412:	7561      	strb	r1, [r4, #21]
 8009414:	440b      	add	r3, r1
 8009416:	60a2      	str	r2, [r4, #8]
 8009418:	6123      	str	r3, [r4, #16]
 800941a:	7da0      	ldrb	r0, [r4, #22]
 800941c:	f080 0001 	eor.w	r0, r0, #1
 8009420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	e7ef      	b.n	800940a <ucdr_deserialize_uint32_t+0xb6>
 800942a:	68a2      	ldr	r2, [r4, #8]
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	1bd2      	subs	r2, r2, r7
 8009430:	7da0      	ldrb	r0, [r4, #22]
 8009432:	1bdb      	subs	r3, r3, r7
 8009434:	f884 8015 	strb.w	r8, [r4, #21]
 8009438:	f080 0001 	eor.w	r0, r0, #1
 800943c:	60a2      	str	r2, [r4, #8]
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	789b      	ldrb	r3, [r3, #2]
 8009448:	706b      	strb	r3, [r5, #1]
 800944a:	1cab      	adds	r3, r5, #2
 800944c:	68a2      	ldr	r2, [r4, #8]
 800944e:	7852      	ldrb	r2, [r2, #1]
 8009450:	f803 2b01 	strb.w	r2, [r3], #1
 8009454:	68a2      	ldr	r2, [r4, #8]
 8009456:	7812      	ldrb	r2, [r2, #0]
 8009458:	701a      	strb	r2, [r3, #0]
 800945a:	e7b4      	b.n	80093c6 <ucdr_deserialize_uint32_t+0x72>
 800945c:	4631      	mov	r1, r6
 800945e:	463a      	mov	r2, r7
 8009460:	4628      	mov	r0, r5
 8009462:	f007 fe39 	bl	80110d8 <memcpy>
 8009466:	464a      	mov	r2, r9
 8009468:	19e8      	adds	r0, r5, r7
 800946a:	68a1      	ldr	r1, [r4, #8]
 800946c:	f007 fe34 	bl	80110d8 <memcpy>
 8009470:	e7a9      	b.n	80093c6 <ucdr_deserialize_uint32_t+0x72>
 8009472:	bf00      	nop

08009474 <ucdr_deserialize_endian_uint32_t>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	4604      	mov	r4, r0
 800947a:	460e      	mov	r6, r1
 800947c:	2104      	movs	r1, #4
 800947e:	4615      	mov	r5, r2
 8009480:	f000 fbda 	bl	8009c38 <ucdr_buffer_alignment>
 8009484:	4601      	mov	r1, r0
 8009486:	4620      	mov	r0, r4
 8009488:	f894 8015 	ldrb.w	r8, [r4, #21]
 800948c:	f000 fc1c 	bl	8009cc8 <ucdr_advance_buffer>
 8009490:	2104      	movs	r1, #4
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fb70 	bl	8009b78 <ucdr_check_buffer_available_for>
 8009498:	2800      	cmp	r0, #0
 800949a:	d13c      	bne.n	8009516 <ucdr_deserialize_endian_uint32_t+0xa2>
 800949c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80094a0:	42bb      	cmp	r3, r7
 80094a2:	d933      	bls.n	800950c <ucdr_deserialize_endian_uint32_t+0x98>
 80094a4:	eba3 0907 	sub.w	r9, r3, r7
 80094a8:	60a3      	str	r3, [r4, #8]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	4620      	mov	r0, r4
 80094ae:	f1c9 0a04 	rsb	sl, r9, #4
 80094b2:	444b      	add	r3, r9
 80094b4:	4651      	mov	r1, sl
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	f000 fb6a 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d048      	beq.n	8009552 <ucdr_deserialize_endian_uint32_t+0xde>
 80094c0:	2e01      	cmp	r6, #1
 80094c2:	d061      	beq.n	8009588 <ucdr_deserialize_endian_uint32_t+0x114>
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	702b      	strb	r3, [r5, #0]
 80094c8:	f1b9 0f00 	cmp.w	r9, #0
 80094cc:	d050      	beq.n	8009570 <ucdr_deserialize_endian_uint32_t+0xfc>
 80094ce:	78bb      	ldrb	r3, [r7, #2]
 80094d0:	f1b9 0f01 	cmp.w	r9, #1
 80094d4:	706b      	strb	r3, [r5, #1]
 80094d6:	f105 0302 	add.w	r3, r5, #2
 80094da:	d04d      	beq.n	8009578 <ucdr_deserialize_endian_uint32_t+0x104>
 80094dc:	787b      	ldrb	r3, [r7, #1]
 80094de:	f1b9 0f02 	cmp.w	r9, #2
 80094e2:	70ab      	strb	r3, [r5, #2]
 80094e4:	f105 0303 	add.w	r3, r5, #3
 80094e8:	d04a      	beq.n	8009580 <ucdr_deserialize_endian_uint32_t+0x10c>
 80094ea:	783b      	ldrb	r3, [r7, #0]
 80094ec:	70eb      	strb	r3, [r5, #3]
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	2104      	movs	r1, #4
 80094f2:	68a2      	ldr	r2, [r4, #8]
 80094f4:	3304      	adds	r3, #4
 80094f6:	7da0      	ldrb	r0, [r4, #22]
 80094f8:	4452      	add	r2, sl
 80094fa:	7561      	strb	r1, [r4, #21]
 80094fc:	eba3 0309 	sub.w	r3, r3, r9
 8009500:	f080 0001 	eor.w	r0, r0, #1
 8009504:	60a2      	str	r2, [r4, #8]
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950c:	2104      	movs	r1, #4
 800950e:	4620      	mov	r0, r4
 8009510:	f000 fb3e 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009514:	b1a8      	cbz	r0, 8009542 <ucdr_deserialize_endian_uint32_t+0xce>
 8009516:	2e01      	cmp	r6, #1
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	d017      	beq.n	800954c <ucdr_deserialize_endian_uint32_t+0xd8>
 800951c:	78db      	ldrb	r3, [r3, #3]
 800951e:	702b      	strb	r3, [r5, #0]
 8009520:	68a3      	ldr	r3, [r4, #8]
 8009522:	789b      	ldrb	r3, [r3, #2]
 8009524:	706b      	strb	r3, [r5, #1]
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	70ab      	strb	r3, [r5, #2]
 800952c:	68a3      	ldr	r3, [r4, #8]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	70eb      	strb	r3, [r5, #3]
 8009532:	2104      	movs	r1, #4
 8009534:	68a2      	ldr	r2, [r4, #8]
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	440a      	add	r2, r1
 800953a:	7561      	strb	r1, [r4, #21]
 800953c:	440b      	add	r3, r1
 800953e:	60a2      	str	r2, [r4, #8]
 8009540:	6123      	str	r3, [r4, #16]
 8009542:	7da0      	ldrb	r0, [r4, #22]
 8009544:	f080 0001 	eor.w	r0, r0, #1
 8009548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	e7ef      	b.n	8009532 <ucdr_deserialize_endian_uint32_t+0xbe>
 8009552:	68a2      	ldr	r2, [r4, #8]
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	eba2 0209 	sub.w	r2, r2, r9
 800955a:	7da0      	ldrb	r0, [r4, #22]
 800955c:	eba3 0309 	sub.w	r3, r3, r9
 8009560:	f884 8015 	strb.w	r8, [r4, #21]
 8009564:	f080 0001 	eor.w	r0, r0, #1
 8009568:	60a2      	str	r2, [r4, #8]
 800956a:	6123      	str	r3, [r4, #16]
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	68a3      	ldr	r3, [r4, #8]
 8009572:	789b      	ldrb	r3, [r3, #2]
 8009574:	706b      	strb	r3, [r5, #1]
 8009576:	1cab      	adds	r3, r5, #2
 8009578:	68a2      	ldr	r2, [r4, #8]
 800957a:	7852      	ldrb	r2, [r2, #1]
 800957c:	f803 2b01 	strb.w	r2, [r3], #1
 8009580:	68a2      	ldr	r2, [r4, #8]
 8009582:	7812      	ldrb	r2, [r2, #0]
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e7b2      	b.n	80094ee <ucdr_deserialize_endian_uint32_t+0x7a>
 8009588:	4639      	mov	r1, r7
 800958a:	464a      	mov	r2, r9
 800958c:	4628      	mov	r0, r5
 800958e:	f007 fda3 	bl	80110d8 <memcpy>
 8009592:	4652      	mov	r2, sl
 8009594:	eb05 0009 	add.w	r0, r5, r9
 8009598:	68a1      	ldr	r1, [r4, #8]
 800959a:	f007 fd9d 	bl	80110d8 <memcpy>
 800959e:	e7a6      	b.n	80094ee <ucdr_deserialize_endian_uint32_t+0x7a>

080095a0 <ucdr_serialize_uint64_t>:
 80095a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a4:	4604      	mov	r4, r0
 80095a6:	b082      	sub	sp, #8
 80095a8:	2108      	movs	r1, #8
 80095aa:	e9cd 2300 	strd	r2, r3, [sp]
 80095ae:	f000 fb43 	bl	8009c38 <ucdr_buffer_alignment>
 80095b2:	4601      	mov	r1, r0
 80095b4:	4620      	mov	r0, r4
 80095b6:	7d67      	ldrb	r7, [r4, #21]
 80095b8:	f000 fb86 	bl	8009cc8 <ucdr_advance_buffer>
 80095bc:	2108      	movs	r1, #8
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fada 	bl	8009b78 <ucdr_check_buffer_available_for>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d14e      	bne.n	8009666 <ucdr_serialize_uint64_t+0xc6>
 80095c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80095cc:	42ab      	cmp	r3, r5
 80095ce:	d945      	bls.n	800965c <ucdr_serialize_uint64_t+0xbc>
 80095d0:	1b5e      	subs	r6, r3, r5
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	4620      	mov	r0, r4
 80095d8:	f1c6 0808 	rsb	r8, r6, #8
 80095dc:	4433      	add	r3, r6
 80095de:	4641      	mov	r1, r8
 80095e0:	6123      	str	r3, [r4, #16]
 80095e2:	f000 fad5 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d074      	beq.n	80096d4 <ucdr_serialize_uint64_t+0x134>
 80095ea:	7d23      	ldrb	r3, [r4, #20]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	f000 809b 	beq.w	8009728 <ucdr_serialize_uint64_t+0x188>
 80095f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80095f6:	702b      	strb	r3, [r5, #0]
 80095f8:	2e00      	cmp	r6, #0
 80095fa:	d078      	beq.n	80096ee <ucdr_serialize_uint64_t+0x14e>
 80095fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009600:	2e01      	cmp	r6, #1
 8009602:	706b      	strb	r3, [r5, #1]
 8009604:	d077      	beq.n	80096f6 <ucdr_serialize_uint64_t+0x156>
 8009606:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800960a:	2e02      	cmp	r6, #2
 800960c:	70ab      	strb	r3, [r5, #2]
 800960e:	d076      	beq.n	80096fe <ucdr_serialize_uint64_t+0x15e>
 8009610:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009614:	2e03      	cmp	r6, #3
 8009616:	70eb      	strb	r3, [r5, #3]
 8009618:	d075      	beq.n	8009706 <ucdr_serialize_uint64_t+0x166>
 800961a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800961e:	2e04      	cmp	r6, #4
 8009620:	712b      	strb	r3, [r5, #4]
 8009622:	d074      	beq.n	800970e <ucdr_serialize_uint64_t+0x16e>
 8009624:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009628:	2e05      	cmp	r6, #5
 800962a:	716b      	strb	r3, [r5, #5]
 800962c:	d073      	beq.n	8009716 <ucdr_serialize_uint64_t+0x176>
 800962e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009632:	2e06      	cmp	r6, #6
 8009634:	71ab      	strb	r3, [r5, #6]
 8009636:	d072      	beq.n	800971e <ucdr_serialize_uint64_t+0x17e>
 8009638:	f89d 3000 	ldrb.w	r3, [sp]
 800963c:	71eb      	strb	r3, [r5, #7]
 800963e:	6923      	ldr	r3, [r4, #16]
 8009640:	2108      	movs	r1, #8
 8009642:	68a2      	ldr	r2, [r4, #8]
 8009644:	3308      	adds	r3, #8
 8009646:	7da0      	ldrb	r0, [r4, #22]
 8009648:	4442      	add	r2, r8
 800964a:	7561      	strb	r1, [r4, #21]
 800964c:	1b9e      	subs	r6, r3, r6
 800964e:	f080 0001 	eor.w	r0, r0, #1
 8009652:	60a2      	str	r2, [r4, #8]
 8009654:	6126      	str	r6, [r4, #16]
 8009656:	b002      	add	sp, #8
 8009658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800965c:	2108      	movs	r1, #8
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fa96 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009664:	b350      	cbz	r0, 80096bc <ucdr_serialize_uint64_t+0x11c>
 8009666:	7d23      	ldrb	r3, [r4, #20]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d02d      	beq.n	80096c8 <ucdr_serialize_uint64_t+0x128>
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009672:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009676:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800967a:	7018      	strb	r0, [r3, #0]
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	705a      	strb	r2, [r3, #1]
 8009680:	68a3      	ldr	r3, [r4, #8]
 8009682:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009686:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800968a:	7099      	strb	r1, [r3, #2]
 800968c:	68a3      	ldr	r3, [r4, #8]
 800968e:	70da      	strb	r2, [r3, #3]
 8009690:	68a3      	ldr	r3, [r4, #8]
 8009692:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009696:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800969a:	7118      	strb	r0, [r3, #4]
 800969c:	68a3      	ldr	r3, [r4, #8]
 800969e:	715a      	strb	r2, [r3, #5]
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	f89d 2000 	ldrb.w	r2, [sp]
 80096a6:	7199      	strb	r1, [r3, #6]
 80096a8:	68a3      	ldr	r3, [r4, #8]
 80096aa:	71da      	strb	r2, [r3, #7]
 80096ac:	2108      	movs	r1, #8
 80096ae:	68a2      	ldr	r2, [r4, #8]
 80096b0:	6923      	ldr	r3, [r4, #16]
 80096b2:	440a      	add	r2, r1
 80096b4:	7561      	strb	r1, [r4, #21]
 80096b6:	440b      	add	r3, r1
 80096b8:	60a2      	str	r2, [r4, #8]
 80096ba:	6123      	str	r3, [r4, #16]
 80096bc:	7da0      	ldrb	r0, [r4, #22]
 80096be:	f080 0001 	eor.w	r0, r0, #1
 80096c2:	b002      	add	sp, #8
 80096c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c8:	466b      	mov	r3, sp
 80096ca:	68a2      	ldr	r2, [r4, #8]
 80096cc:	cb03      	ldmia	r3!, {r0, r1}
 80096ce:	6010      	str	r0, [r2, #0]
 80096d0:	6051      	str	r1, [r2, #4]
 80096d2:	e7eb      	b.n	80096ac <ucdr_serialize_uint64_t+0x10c>
 80096d4:	68a2      	ldr	r2, [r4, #8]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	7da0      	ldrb	r0, [r4, #22]
 80096da:	1b92      	subs	r2, r2, r6
 80096dc:	1b9b      	subs	r3, r3, r6
 80096de:	7567      	strb	r7, [r4, #21]
 80096e0:	f080 0001 	eor.w	r0, r0, #1
 80096e4:	60a2      	str	r2, [r4, #8]
 80096e6:	6123      	str	r3, [r4, #16]
 80096e8:	b002      	add	sp, #8
 80096ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80096f4:	701a      	strb	r2, [r3, #0]
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80096fc:	701a      	strb	r2, [r3, #0]
 80096fe:	68a3      	ldr	r3, [r4, #8]
 8009700:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009704:	701a      	strb	r2, [r3, #0]
 8009706:	68a3      	ldr	r3, [r4, #8]
 8009708:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	68a3      	ldr	r3, [r4, #8]
 8009718:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	f89d 2000 	ldrb.w	r2, [sp]
 8009724:	701a      	strb	r2, [r3, #0]
 8009726:	e78a      	b.n	800963e <ucdr_serialize_uint64_t+0x9e>
 8009728:	4628      	mov	r0, r5
 800972a:	466d      	mov	r5, sp
 800972c:	4632      	mov	r2, r6
 800972e:	4629      	mov	r1, r5
 8009730:	f007 fcd2 	bl	80110d8 <memcpy>
 8009734:	4642      	mov	r2, r8
 8009736:	19a9      	adds	r1, r5, r6
 8009738:	68a0      	ldr	r0, [r4, #8]
 800973a:	f007 fccd 	bl	80110d8 <memcpy>
 800973e:	e77e      	b.n	800963e <ucdr_serialize_uint64_t+0x9e>

08009740 <ucdr_serialize_int16_t>:
 8009740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009744:	460b      	mov	r3, r1
 8009746:	b082      	sub	sp, #8
 8009748:	4604      	mov	r4, r0
 800974a:	2102      	movs	r1, #2
 800974c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009750:	f000 fa72 	bl	8009c38 <ucdr_buffer_alignment>
 8009754:	4601      	mov	r1, r0
 8009756:	4620      	mov	r0, r4
 8009758:	7d67      	ldrb	r7, [r4, #21]
 800975a:	f000 fab5 	bl	8009cc8 <ucdr_advance_buffer>
 800975e:	2102      	movs	r1, #2
 8009760:	4620      	mov	r0, r4
 8009762:	f000 fa09 	bl	8009b78 <ucdr_check_buffer_available_for>
 8009766:	bb78      	cbnz	r0, 80097c8 <ucdr_serialize_int16_t+0x88>
 8009768:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800976c:	42ab      	cmp	r3, r5
 800976e:	d926      	bls.n	80097be <ucdr_serialize_int16_t+0x7e>
 8009770:	1b5e      	subs	r6, r3, r5
 8009772:	60a3      	str	r3, [r4, #8]
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	4620      	mov	r0, r4
 8009778:	f1c6 0802 	rsb	r8, r6, #2
 800977c:	4433      	add	r3, r6
 800977e:	4641      	mov	r1, r8
 8009780:	6123      	str	r3, [r4, #16]
 8009782:	f000 fa05 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009786:	2800      	cmp	r0, #0
 8009788:	d03b      	beq.n	8009802 <ucdr_serialize_int16_t+0xc2>
 800978a:	7d23      	ldrb	r3, [r4, #20]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d04a      	beq.n	8009826 <ucdr_serialize_int16_t+0xe6>
 8009790:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009794:	702b      	strb	r3, [r5, #0]
 8009796:	2e00      	cmp	r6, #0
 8009798:	d040      	beq.n	800981c <ucdr_serialize_int16_t+0xdc>
 800979a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800979e:	706b      	strb	r3, [r5, #1]
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	2102      	movs	r1, #2
 80097a4:	68a2      	ldr	r2, [r4, #8]
 80097a6:	3302      	adds	r3, #2
 80097a8:	7da0      	ldrb	r0, [r4, #22]
 80097aa:	4442      	add	r2, r8
 80097ac:	7561      	strb	r1, [r4, #21]
 80097ae:	1b9e      	subs	r6, r3, r6
 80097b0:	f080 0001 	eor.w	r0, r0, #1
 80097b4:	60a2      	str	r2, [r4, #8]
 80097b6:	6126      	str	r6, [r4, #16]
 80097b8:	b002      	add	sp, #8
 80097ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097be:	2102      	movs	r1, #2
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 f9e5 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 80097c6:	b190      	cbz	r0, 80097ee <ucdr_serialize_int16_t+0xae>
 80097c8:	7d23      	ldrb	r3, [r4, #20]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	d014      	beq.n	80097fa <ucdr_serialize_int16_t+0xba>
 80097d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80097d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80097d8:	7019      	strb	r1, [r3, #0]
 80097da:	68a3      	ldr	r3, [r4, #8]
 80097dc:	705a      	strb	r2, [r3, #1]
 80097de:	2102      	movs	r1, #2
 80097e0:	68a2      	ldr	r2, [r4, #8]
 80097e2:	6923      	ldr	r3, [r4, #16]
 80097e4:	440a      	add	r2, r1
 80097e6:	7561      	strb	r1, [r4, #21]
 80097e8:	440b      	add	r3, r1
 80097ea:	60a2      	str	r2, [r4, #8]
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	7da0      	ldrb	r0, [r4, #22]
 80097f0:	f080 0001 	eor.w	r0, r0, #1
 80097f4:	b002      	add	sp, #8
 80097f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	e7ed      	b.n	80097de <ucdr_serialize_int16_t+0x9e>
 8009802:	68a2      	ldr	r2, [r4, #8]
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	7da0      	ldrb	r0, [r4, #22]
 8009808:	1b92      	subs	r2, r2, r6
 800980a:	1b9b      	subs	r3, r3, r6
 800980c:	7567      	strb	r7, [r4, #21]
 800980e:	f080 0001 	eor.w	r0, r0, #1
 8009812:	60a2      	str	r2, [r4, #8]
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	b002      	add	sp, #8
 8009818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981c:	68a3      	ldr	r3, [r4, #8]
 800981e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009822:	701a      	strb	r2, [r3, #0]
 8009824:	e7bc      	b.n	80097a0 <ucdr_serialize_int16_t+0x60>
 8009826:	4628      	mov	r0, r5
 8009828:	f10d 0506 	add.w	r5, sp, #6
 800982c:	4632      	mov	r2, r6
 800982e:	4629      	mov	r1, r5
 8009830:	f007 fc52 	bl	80110d8 <memcpy>
 8009834:	4642      	mov	r2, r8
 8009836:	19a9      	adds	r1, r5, r6
 8009838:	68a0      	ldr	r0, [r4, #8]
 800983a:	f007 fc4d 	bl	80110d8 <memcpy>
 800983e:	e7af      	b.n	80097a0 <ucdr_serialize_int16_t+0x60>

08009840 <ucdr_deserialize_int16_t>:
 8009840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009844:	4604      	mov	r4, r0
 8009846:	460d      	mov	r5, r1
 8009848:	2102      	movs	r1, #2
 800984a:	f000 f9f5 	bl	8009c38 <ucdr_buffer_alignment>
 800984e:	4601      	mov	r1, r0
 8009850:	4620      	mov	r0, r4
 8009852:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009856:	f000 fa37 	bl	8009cc8 <ucdr_advance_buffer>
 800985a:	2102      	movs	r1, #2
 800985c:	4620      	mov	r0, r4
 800985e:	f000 f98b 	bl	8009b78 <ucdr_check_buffer_available_for>
 8009862:	bb60      	cbnz	r0, 80098be <ucdr_deserialize_int16_t+0x7e>
 8009864:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009868:	42be      	cmp	r6, r7
 800986a:	d923      	bls.n	80098b4 <ucdr_deserialize_int16_t+0x74>
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	4620      	mov	r0, r4
 8009870:	60a6      	str	r6, [r4, #8]
 8009872:	1bf6      	subs	r6, r6, r7
 8009874:	4433      	add	r3, r6
 8009876:	f1c6 0902 	rsb	r9, r6, #2
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	4649      	mov	r1, r9
 800987e:	f000 f987 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009882:	2800      	cmp	r0, #0
 8009884:	d034      	beq.n	80098f0 <ucdr_deserialize_int16_t+0xb0>
 8009886:	7d23      	ldrb	r3, [r4, #20]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d042      	beq.n	8009912 <ucdr_deserialize_int16_t+0xd2>
 800988c:	787b      	ldrb	r3, [r7, #1]
 800988e:	702b      	strb	r3, [r5, #0]
 8009890:	2e00      	cmp	r6, #0
 8009892:	d03a      	beq.n	800990a <ucdr_deserialize_int16_t+0xca>
 8009894:	783b      	ldrb	r3, [r7, #0]
 8009896:	706b      	strb	r3, [r5, #1]
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	2102      	movs	r1, #2
 800989c:	68a2      	ldr	r2, [r4, #8]
 800989e:	3302      	adds	r3, #2
 80098a0:	7da0      	ldrb	r0, [r4, #22]
 80098a2:	444a      	add	r2, r9
 80098a4:	7561      	strb	r1, [r4, #21]
 80098a6:	1b9b      	subs	r3, r3, r6
 80098a8:	f080 0001 	eor.w	r0, r0, #1
 80098ac:	60a2      	str	r2, [r4, #8]
 80098ae:	6123      	str	r3, [r4, #16]
 80098b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098b4:	2102      	movs	r1, #2
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 f96a 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 80098bc:	b180      	cbz	r0, 80098e0 <ucdr_deserialize_int16_t+0xa0>
 80098be:	7d23      	ldrb	r3, [r4, #20]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	68a3      	ldr	r3, [r4, #8]
 80098c4:	d011      	beq.n	80098ea <ucdr_deserialize_int16_t+0xaa>
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	702b      	strb	r3, [r5, #0]
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	706b      	strb	r3, [r5, #1]
 80098d0:	2102      	movs	r1, #2
 80098d2:	68a2      	ldr	r2, [r4, #8]
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	440a      	add	r2, r1
 80098d8:	7561      	strb	r1, [r4, #21]
 80098da:	440b      	add	r3, r1
 80098dc:	60a2      	str	r2, [r4, #8]
 80098de:	6123      	str	r3, [r4, #16]
 80098e0:	7da0      	ldrb	r0, [r4, #22]
 80098e2:	f080 0001 	eor.w	r0, r0, #1
 80098e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	802b      	strh	r3, [r5, #0]
 80098ee:	e7ef      	b.n	80098d0 <ucdr_deserialize_int16_t+0x90>
 80098f0:	68a2      	ldr	r2, [r4, #8]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	1b92      	subs	r2, r2, r6
 80098f6:	7da0      	ldrb	r0, [r4, #22]
 80098f8:	1b9b      	subs	r3, r3, r6
 80098fa:	f884 8015 	strb.w	r8, [r4, #21]
 80098fe:	f080 0001 	eor.w	r0, r0, #1
 8009902:	60a2      	str	r2, [r4, #8]
 8009904:	6123      	str	r3, [r4, #16]
 8009906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	706b      	strb	r3, [r5, #1]
 8009910:	e7c2      	b.n	8009898 <ucdr_deserialize_int16_t+0x58>
 8009912:	4639      	mov	r1, r7
 8009914:	4632      	mov	r2, r6
 8009916:	4628      	mov	r0, r5
 8009918:	f007 fbde 	bl	80110d8 <memcpy>
 800991c:	464a      	mov	r2, r9
 800991e:	19a8      	adds	r0, r5, r6
 8009920:	68a1      	ldr	r1, [r4, #8]
 8009922:	f007 fbd9 	bl	80110d8 <memcpy>
 8009926:	e7b7      	b.n	8009898 <ucdr_deserialize_int16_t+0x58>

08009928 <ucdr_serialize_int32_t>:
 8009928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	4604      	mov	r4, r0
 8009930:	9101      	str	r1, [sp, #4]
 8009932:	2104      	movs	r1, #4
 8009934:	f000 f980 	bl	8009c38 <ucdr_buffer_alignment>
 8009938:	4601      	mov	r1, r0
 800993a:	4620      	mov	r0, r4
 800993c:	7d67      	ldrb	r7, [r4, #21]
 800993e:	f000 f9c3 	bl	8009cc8 <ucdr_advance_buffer>
 8009942:	2104      	movs	r1, #4
 8009944:	4620      	mov	r0, r4
 8009946:	f000 f917 	bl	8009b78 <ucdr_check_buffer_available_for>
 800994a:	2800      	cmp	r0, #0
 800994c:	d139      	bne.n	80099c2 <ucdr_serialize_int32_t+0x9a>
 800994e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009952:	42ab      	cmp	r3, r5
 8009954:	d930      	bls.n	80099b8 <ucdr_serialize_int32_t+0x90>
 8009956:	1b5e      	subs	r6, r3, r5
 8009958:	60a3      	str	r3, [r4, #8]
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	4620      	mov	r0, r4
 800995e:	f1c6 0804 	rsb	r8, r6, #4
 8009962:	4433      	add	r3, r6
 8009964:	4641      	mov	r1, r8
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	f000 f912 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 800996c:	2800      	cmp	r0, #0
 800996e:	d04c      	beq.n	8009a0a <ucdr_serialize_int32_t+0xe2>
 8009970:	7d23      	ldrb	r3, [r4, #20]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d063      	beq.n	8009a3e <ucdr_serialize_int32_t+0x116>
 8009976:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800997a:	702b      	strb	r3, [r5, #0]
 800997c:	2e00      	cmp	r6, #0
 800997e:	d051      	beq.n	8009a24 <ucdr_serialize_int32_t+0xfc>
 8009980:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009984:	2e01      	cmp	r6, #1
 8009986:	706b      	strb	r3, [r5, #1]
 8009988:	d050      	beq.n	8009a2c <ucdr_serialize_int32_t+0x104>
 800998a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800998e:	2e02      	cmp	r6, #2
 8009990:	70ab      	strb	r3, [r5, #2]
 8009992:	d04f      	beq.n	8009a34 <ucdr_serialize_int32_t+0x10c>
 8009994:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009998:	70eb      	strb	r3, [r5, #3]
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	2104      	movs	r1, #4
 800999e:	68a2      	ldr	r2, [r4, #8]
 80099a0:	3304      	adds	r3, #4
 80099a2:	7da0      	ldrb	r0, [r4, #22]
 80099a4:	4442      	add	r2, r8
 80099a6:	7561      	strb	r1, [r4, #21]
 80099a8:	1b9e      	subs	r6, r3, r6
 80099aa:	f080 0001 	eor.w	r0, r0, #1
 80099ae:	60a2      	str	r2, [r4, #8]
 80099b0:	6126      	str	r6, [r4, #16]
 80099b2:	b002      	add	sp, #8
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b8:	2104      	movs	r1, #4
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 f8e8 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 80099c0:	b1d0      	cbz	r0, 80099f8 <ucdr_serialize_int32_t+0xd0>
 80099c2:	7d23      	ldrb	r3, [r4, #20]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	d01c      	beq.n	8009a04 <ucdr_serialize_int32_t+0xdc>
 80099ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80099ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80099d2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80099d6:	7018      	strb	r0, [r3, #0]
 80099d8:	68a3      	ldr	r3, [r4, #8]
 80099da:	705a      	strb	r2, [r3, #1]
 80099dc:	68a3      	ldr	r3, [r4, #8]
 80099de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80099e2:	7099      	strb	r1, [r3, #2]
 80099e4:	68a3      	ldr	r3, [r4, #8]
 80099e6:	70da      	strb	r2, [r3, #3]
 80099e8:	2104      	movs	r1, #4
 80099ea:	68a2      	ldr	r2, [r4, #8]
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	440a      	add	r2, r1
 80099f0:	7561      	strb	r1, [r4, #21]
 80099f2:	440b      	add	r3, r1
 80099f4:	60a2      	str	r2, [r4, #8]
 80099f6:	6123      	str	r3, [r4, #16]
 80099f8:	7da0      	ldrb	r0, [r4, #22]
 80099fa:	f080 0001 	eor.w	r0, r0, #1
 80099fe:	b002      	add	sp, #8
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	9a01      	ldr	r2, [sp, #4]
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	e7ee      	b.n	80099e8 <ucdr_serialize_int32_t+0xc0>
 8009a0a:	68a2      	ldr	r2, [r4, #8]
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	7da0      	ldrb	r0, [r4, #22]
 8009a10:	1b92      	subs	r2, r2, r6
 8009a12:	1b9b      	subs	r3, r3, r6
 8009a14:	7567      	strb	r7, [r4, #21]
 8009a16:	f080 0001 	eor.w	r0, r0, #1
 8009a1a:	60a2      	str	r2, [r4, #8]
 8009a1c:	6123      	str	r3, [r4, #16]
 8009a1e:	b002      	add	sp, #8
 8009a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	68a3      	ldr	r3, [r4, #8]
 8009a2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e7ad      	b.n	800999a <ucdr_serialize_int32_t+0x72>
 8009a3e:	4628      	mov	r0, r5
 8009a40:	ad01      	add	r5, sp, #4
 8009a42:	4632      	mov	r2, r6
 8009a44:	4629      	mov	r1, r5
 8009a46:	f007 fb47 	bl	80110d8 <memcpy>
 8009a4a:	4642      	mov	r2, r8
 8009a4c:	19a9      	adds	r1, r5, r6
 8009a4e:	68a0      	ldr	r0, [r4, #8]
 8009a50:	f007 fb42 	bl	80110d8 <memcpy>
 8009a54:	e7a1      	b.n	800999a <ucdr_serialize_int32_t+0x72>
 8009a56:	bf00      	nop

08009a58 <ucdr_deserialize_int32_t>:
 8009a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	460d      	mov	r5, r1
 8009a60:	2104      	movs	r1, #4
 8009a62:	f000 f8e9 	bl	8009c38 <ucdr_buffer_alignment>
 8009a66:	4601      	mov	r1, r0
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009a6e:	f000 f92b 	bl	8009cc8 <ucdr_advance_buffer>
 8009a72:	2104      	movs	r1, #4
 8009a74:	4620      	mov	r0, r4
 8009a76:	f000 f87f 	bl	8009b78 <ucdr_check_buffer_available_for>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d138      	bne.n	8009af0 <ucdr_deserialize_int32_t+0x98>
 8009a7e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009a82:	42b7      	cmp	r7, r6
 8009a84:	d92f      	bls.n	8009ae6 <ucdr_deserialize_int32_t+0x8e>
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	4620      	mov	r0, r4
 8009a8a:	60a7      	str	r7, [r4, #8]
 8009a8c:	1bbf      	subs	r7, r7, r6
 8009a8e:	443b      	add	r3, r7
 8009a90:	f1c7 0904 	rsb	r9, r7, #4
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	4649      	mov	r1, r9
 8009a98:	f000 f87a 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d046      	beq.n	8009b2e <ucdr_deserialize_int32_t+0xd6>
 8009aa0:	7d23      	ldrb	r3, [r4, #20]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d05c      	beq.n	8009b60 <ucdr_deserialize_int32_t+0x108>
 8009aa6:	78f3      	ldrb	r3, [r6, #3]
 8009aa8:	702b      	strb	r3, [r5, #0]
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	d04c      	beq.n	8009b48 <ucdr_deserialize_int32_t+0xf0>
 8009aae:	78b3      	ldrb	r3, [r6, #2]
 8009ab0:	2f01      	cmp	r7, #1
 8009ab2:	706b      	strb	r3, [r5, #1]
 8009ab4:	f105 0302 	add.w	r3, r5, #2
 8009ab8:	d04a      	beq.n	8009b50 <ucdr_deserialize_int32_t+0xf8>
 8009aba:	7873      	ldrb	r3, [r6, #1]
 8009abc:	2f02      	cmp	r7, #2
 8009abe:	70ab      	strb	r3, [r5, #2]
 8009ac0:	f105 0303 	add.w	r3, r5, #3
 8009ac4:	d048      	beq.n	8009b58 <ucdr_deserialize_int32_t+0x100>
 8009ac6:	7833      	ldrb	r3, [r6, #0]
 8009ac8:	70eb      	strb	r3, [r5, #3]
 8009aca:	6923      	ldr	r3, [r4, #16]
 8009acc:	2104      	movs	r1, #4
 8009ace:	68a2      	ldr	r2, [r4, #8]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	7da0      	ldrb	r0, [r4, #22]
 8009ad4:	444a      	add	r2, r9
 8009ad6:	7561      	strb	r1, [r4, #21]
 8009ad8:	1bdb      	subs	r3, r3, r7
 8009ada:	f080 0001 	eor.w	r0, r0, #1
 8009ade:	60a2      	str	r2, [r4, #8]
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae6:	2104      	movs	r1, #4
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 f851 	bl	8009b90 <ucdr_check_final_buffer_behavior>
 8009aee:	b1b0      	cbz	r0, 8009b1e <ucdr_deserialize_int32_t+0xc6>
 8009af0:	7d23      	ldrb	r3, [r4, #20]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	68a3      	ldr	r3, [r4, #8]
 8009af6:	d017      	beq.n	8009b28 <ucdr_deserialize_int32_t+0xd0>
 8009af8:	78db      	ldrb	r3, [r3, #3]
 8009afa:	702b      	strb	r3, [r5, #0]
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	789b      	ldrb	r3, [r3, #2]
 8009b00:	706b      	strb	r3, [r5, #1]
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	70ab      	strb	r3, [r5, #2]
 8009b08:	68a3      	ldr	r3, [r4, #8]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	70eb      	strb	r3, [r5, #3]
 8009b0e:	2104      	movs	r1, #4
 8009b10:	68a2      	ldr	r2, [r4, #8]
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	440a      	add	r2, r1
 8009b16:	7561      	strb	r1, [r4, #21]
 8009b18:	440b      	add	r3, r1
 8009b1a:	60a2      	str	r2, [r4, #8]
 8009b1c:	6123      	str	r3, [r4, #16]
 8009b1e:	7da0      	ldrb	r0, [r4, #22]
 8009b20:	f080 0001 	eor.w	r0, r0, #1
 8009b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	e7ef      	b.n	8009b0e <ucdr_deserialize_int32_t+0xb6>
 8009b2e:	68a2      	ldr	r2, [r4, #8]
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	1bd2      	subs	r2, r2, r7
 8009b34:	7da0      	ldrb	r0, [r4, #22]
 8009b36:	1bdb      	subs	r3, r3, r7
 8009b38:	f884 8015 	strb.w	r8, [r4, #21]
 8009b3c:	f080 0001 	eor.w	r0, r0, #1
 8009b40:	60a2      	str	r2, [r4, #8]
 8009b42:	6123      	str	r3, [r4, #16]
 8009b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b48:	68a3      	ldr	r3, [r4, #8]
 8009b4a:	789b      	ldrb	r3, [r3, #2]
 8009b4c:	706b      	strb	r3, [r5, #1]
 8009b4e:	1cab      	adds	r3, r5, #2
 8009b50:	68a2      	ldr	r2, [r4, #8]
 8009b52:	7852      	ldrb	r2, [r2, #1]
 8009b54:	f803 2b01 	strb.w	r2, [r3], #1
 8009b58:	68a2      	ldr	r2, [r4, #8]
 8009b5a:	7812      	ldrb	r2, [r2, #0]
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	e7b4      	b.n	8009aca <ucdr_deserialize_int32_t+0x72>
 8009b60:	4631      	mov	r1, r6
 8009b62:	463a      	mov	r2, r7
 8009b64:	4628      	mov	r0, r5
 8009b66:	f007 fab7 	bl	80110d8 <memcpy>
 8009b6a:	464a      	mov	r2, r9
 8009b6c:	19e8      	adds	r0, r5, r7
 8009b6e:	68a1      	ldr	r1, [r4, #8]
 8009b70:	f007 fab2 	bl	80110d8 <memcpy>
 8009b74:	e7a9      	b.n	8009aca <ucdr_deserialize_int32_t+0x72>
 8009b76:	bf00      	nop

08009b78 <ucdr_check_buffer_available_for>:
 8009b78:	7d83      	ldrb	r3, [r0, #22]
 8009b7a:	b93b      	cbnz	r3, 8009b8c <ucdr_check_buffer_available_for+0x14>
 8009b7c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009b80:	4419      	add	r1, r3
 8009b82:	4288      	cmp	r0, r1
 8009b84:	bf34      	ite	cc
 8009b86:	2000      	movcc	r0, #0
 8009b88:	2001      	movcs	r0, #1
 8009b8a:	4770      	bx	lr
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	4770      	bx	lr

08009b90 <ucdr_check_final_buffer_behavior>:
 8009b90:	7d83      	ldrb	r3, [r0, #22]
 8009b92:	b943      	cbnz	r3, 8009ba6 <ucdr_check_final_buffer_behavior+0x16>
 8009b94:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	4291      	cmp	r1, r2
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	d205      	bcs.n	8009bac <ucdr_check_final_buffer_behavior+0x1c>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	bd10      	pop	{r4, pc}
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	4770      	bx	lr
 8009bac:	6982      	ldr	r2, [r0, #24]
 8009bae:	b13a      	cbz	r2, 8009bc0 <ucdr_check_final_buffer_behavior+0x30>
 8009bb0:	69c1      	ldr	r1, [r0, #28]
 8009bb2:	4790      	blx	r2
 8009bb4:	f080 0301 	eor.w	r3, r0, #1
 8009bb8:	75a0      	strb	r0, [r4, #22]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	bd10      	pop	{r4, pc}
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	75a0      	strb	r0, [r4, #22]
 8009bc4:	e7fa      	b.n	8009bbc <ucdr_check_final_buffer_behavior+0x2c>
 8009bc6:	bf00      	nop

08009bc8 <ucdr_set_on_full_buffer_callback>:
 8009bc8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop

08009bd0 <ucdr_init_buffer_origin_offset_endian>:
 8009bd0:	b410      	push	{r4}
 8009bd2:	9c01      	ldr	r4, [sp, #4]
 8009bd4:	440a      	add	r2, r1
 8009bd6:	6001      	str	r1, [r0, #0]
 8009bd8:	6042      	str	r2, [r0, #4]
 8009bda:	190a      	adds	r2, r1, r4
 8009bdc:	441c      	add	r4, r3
 8009bde:	6082      	str	r2, [r0, #8]
 8009be0:	2200      	movs	r2, #0
 8009be2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009be6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009bea:	7542      	strb	r2, [r0, #21]
 8009bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bf0:	7582      	strb	r2, [r0, #22]
 8009bf2:	7503      	strb	r3, [r0, #20]
 8009bf4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop

08009bfc <ucdr_init_buffer_origin_offset>:
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	9c04      	ldr	r4, [sp, #16]
 8009c02:	9400      	str	r4, [sp, #0]
 8009c04:	2401      	movs	r4, #1
 8009c06:	9401      	str	r4, [sp, #4]
 8009c08:	f7ff ffe2 	bl	8009bd0 <ucdr_init_buffer_origin_offset_endian>
 8009c0c:	b002      	add	sp, #8
 8009c0e:	bd10      	pop	{r4, pc}

08009c10 <ucdr_init_buffer_origin>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	2400      	movs	r4, #0
 8009c14:	b082      	sub	sp, #8
 8009c16:	9400      	str	r4, [sp, #0]
 8009c18:	f7ff fff0 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 8009c1c:	b002      	add	sp, #8
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <ucdr_init_buffer>:
 8009c20:	2300      	movs	r3, #0
 8009c22:	f7ff bff5 	b.w	8009c10 <ucdr_init_buffer_origin>
 8009c26:	bf00      	nop

08009c28 <ucdr_alignment>:
 8009c28:	fbb0 f2f1 	udiv	r2, r0, r1
 8009c2c:	fb02 0011 	mls	r0, r2, r1, r0
 8009c30:	1e4b      	subs	r3, r1, #1
 8009c32:	1a08      	subs	r0, r1, r0
 8009c34:	4018      	ands	r0, r3
 8009c36:	4770      	bx	lr

08009c38 <ucdr_buffer_alignment>:
 8009c38:	7d43      	ldrb	r3, [r0, #21]
 8009c3a:	428b      	cmp	r3, r1
 8009c3c:	d209      	bcs.n	8009c52 <ucdr_buffer_alignment+0x1a>
 8009c3e:	6903      	ldr	r3, [r0, #16]
 8009c40:	1e4a      	subs	r2, r1, #1
 8009c42:	fbb3 f0f1 	udiv	r0, r3, r1
 8009c46:	fb01 3010 	mls	r0, r1, r0, r3
 8009c4a:	1a09      	subs	r1, r1, r0
 8009c4c:	ea01 0002 	and.w	r0, r1, r2
 8009c50:	4770      	bx	lr
 8009c52:	2000      	movs	r0, #0
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop

08009c58 <ucdr_align_to>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	460d      	mov	r5, r1
 8009c5e:	f7ff ffeb 	bl	8009c38 <ucdr_buffer_alignment>
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	7565      	strb	r5, [r4, #21]
 8009c66:	181a      	adds	r2, r3, r0
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	4418      	add	r0, r3
 8009c6c:	6863      	ldr	r3, [r4, #4]
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	6120      	str	r0, [r4, #16]
 8009c72:	bf28      	it	cs
 8009c74:	4613      	movcs	r3, r2
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	bf00      	nop

08009c7c <ucdr_buffer_length>:
 8009c7c:	6882      	ldr	r2, [r0, #8]
 8009c7e:	6800      	ldr	r0, [r0, #0]
 8009c80:	1a10      	subs	r0, r2, r0
 8009c82:	4770      	bx	lr

08009c84 <ucdr_buffer_remaining>:
 8009c84:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009c88:	1a10      	subs	r0, r2, r0
 8009c8a:	4770      	bx	lr

08009c8c <ucdr_check_final_buffer_behavior_array>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	7d83      	ldrb	r3, [r0, #22]
 8009c90:	b9a3      	cbnz	r3, 8009cbc <ucdr_check_final_buffer_behavior_array+0x30>
 8009c92:	4604      	mov	r4, r0
 8009c94:	460d      	mov	r5, r1
 8009c96:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d300      	bcc.n	8009ca0 <ucdr_check_final_buffer_behavior_array+0x14>
 8009c9e:	b931      	cbnz	r1, 8009cae <ucdr_check_final_buffer_behavior_array+0x22>
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f7ff ffef 	bl	8009c84 <ucdr_buffer_remaining>
 8009ca6:	42a8      	cmp	r0, r5
 8009ca8:	bf28      	it	cs
 8009caa:	4628      	movcs	r0, r5
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	6983      	ldr	r3, [r0, #24]
 8009cb0:	b133      	cbz	r3, 8009cc0 <ucdr_check_final_buffer_behavior_array+0x34>
 8009cb2:	69c1      	ldr	r1, [r0, #28]
 8009cb4:	4798      	blx	r3
 8009cb6:	75a0      	strb	r0, [r4, #22]
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d0f1      	beq.n	8009ca0 <ucdr_check_final_buffer_behavior_array+0x14>
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	7583      	strb	r3, [r0, #22]
 8009cc4:	e7fa      	b.n	8009cbc <ucdr_check_final_buffer_behavior_array+0x30>
 8009cc6:	bf00      	nop

08009cc8 <ucdr_advance_buffer>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4604      	mov	r4, r0
 8009ccc:	460d      	mov	r5, r1
 8009cce:	f7ff ff53 	bl	8009b78 <ucdr_check_buffer_available_for>
 8009cd2:	b178      	cbz	r0, 8009cf4 <ucdr_advance_buffer+0x2c>
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	68a2      	ldr	r2, [r4, #8]
 8009cd8:	442b      	add	r3, r5
 8009cda:	442a      	add	r2, r5
 8009cdc:	6123      	str	r3, [r4, #16]
 8009cde:	2301      	movs	r3, #1
 8009ce0:	60a2      	str	r2, [r4, #8]
 8009ce2:	7563      	strb	r3, [r4, #21]
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	68a2      	ldr	r2, [r4, #8]
 8009ce8:	1a2d      	subs	r5, r5, r0
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	4402      	add	r2, r0
 8009cee:	4418      	add	r0, r3
 8009cf0:	60a2      	str	r2, [r4, #8]
 8009cf2:	6120      	str	r0, [r4, #16]
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f7ff ffc7 	bl	8009c8c <ucdr_check_final_buffer_behavior_array>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d1f1      	bne.n	8009ce6 <ucdr_advance_buffer+0x1e>
 8009d02:	2301      	movs	r3, #1
 8009d04:	7563      	strb	r3, [r4, #21]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}

08009d08 <uxr_buffer_delete_entity>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	b08e      	sub	sp, #56	; 0x38
 8009d0e:	4604      	mov	r4, r0
 8009d10:	9103      	str	r1, [sp, #12]
 8009d12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009d16:	2303      	movs	r3, #3
 8009d18:	2204      	movs	r2, #4
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	ab06      	add	r3, sp, #24
 8009d1e:	f001 f86d 	bl	800adfc <uxr_prepare_stream_to_write_submessage>
 8009d22:	b918      	cbnz	r0, 8009d2c <uxr_buffer_delete_entity+0x24>
 8009d24:	4604      	mov	r4, r0
 8009d26:	4620      	mov	r0, r4
 8009d28:	b00e      	add	sp, #56	; 0x38
 8009d2a:	bd10      	pop	{r4, pc}
 8009d2c:	9902      	ldr	r1, [sp, #8]
 8009d2e:	aa05      	add	r2, sp, #20
 8009d30:	4620      	mov	r0, r4
 8009d32:	f001 f99f 	bl	800b074 <uxr_init_base_object_request>
 8009d36:	4604      	mov	r4, r0
 8009d38:	a905      	add	r1, sp, #20
 8009d3a:	a806      	add	r0, sp, #24
 8009d3c:	f002 fb08 	bl	800c350 <uxr_serialize_DELETE_Payload>
 8009d40:	4620      	mov	r0, r4
 8009d42:	b00e      	add	sp, #56	; 0x38
 8009d44:	bd10      	pop	{r4, pc}
 8009d46:	bf00      	nop

08009d48 <uxr_common_create_entity>:
 8009d48:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	f1bc 0f01 	cmp.w	ip, #1
 8009d52:	b08c      	sub	sp, #48	; 0x30
 8009d54:	4604      	mov	r4, r0
 8009d56:	9202      	str	r2, [sp, #8]
 8009d58:	bf0c      	ite	eq
 8009d5a:	f003 0201 	andeq.w	r2, r3, #1
 8009d5e:	2200      	movne	r2, #0
 8009d60:	330e      	adds	r3, #14
 8009d62:	9103      	str	r1, [sp, #12]
 8009d64:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8009d68:	441a      	add	r2, r3
 8009d6a:	ab04      	add	r3, sp, #16
 8009d6c:	9101      	str	r1, [sp, #4]
 8009d6e:	2101      	movs	r1, #1
 8009d70:	b292      	uxth	r2, r2
 8009d72:	9100      	str	r1, [sp, #0]
 8009d74:	9903      	ldr	r1, [sp, #12]
 8009d76:	f001 f841 	bl	800adfc <uxr_prepare_stream_to_write_submessage>
 8009d7a:	b918      	cbnz	r0, 8009d84 <uxr_common_create_entity+0x3c>
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	4620      	mov	r0, r4
 8009d80:	b00c      	add	sp, #48	; 0x30
 8009d82:	bd10      	pop	{r4, pc}
 8009d84:	9902      	ldr	r1, [sp, #8]
 8009d86:	4620      	mov	r0, r4
 8009d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d8a:	f001 f973 	bl	800b074 <uxr_init_base_object_request>
 8009d8e:	4604      	mov	r4, r0
 8009d90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d92:	a804      	add	r0, sp, #16
 8009d94:	f002 fa36 	bl	800c204 <uxr_serialize_CREATE_Payload>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	b00c      	add	sp, #48	; 0x30
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	bf00      	nop

08009da0 <uxr_buffer_create_participant_bin>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8009da6:	4605      	mov	r5, r0
 8009da8:	ac11      	add	r4, sp, #68	; 0x44
 8009daa:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8009dae:	2303      	movs	r3, #3
 8009db0:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8009db4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009db8:	7223      	strb	r3, [r4, #8]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f88d 3014 	strb.w	r3, [sp, #20]
 8009dc2:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8009dc4:	7122      	strb	r2, [r4, #4]
 8009dc6:	b1cb      	cbz	r3, 8009dfc <uxr_buffer_create_participant_bin+0x5c>
 8009dc8:	f88d 201c 	strb.w	r2, [sp, #28]
 8009dcc:	9308      	str	r3, [sp, #32]
 8009dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dd2:	a915      	add	r1, sp, #84	; 0x54
 8009dd4:	a809      	add	r0, sp, #36	; 0x24
 8009dd6:	f7ff ff23 	bl	8009c20 <ucdr_init_buffer>
 8009dda:	a905      	add	r1, sp, #20
 8009ddc:	a809      	add	r0, sp, #36	; 0x24
 8009dde:	f001 fee7 	bl	800bbb0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de4:	9600      	str	r6, [sp, #0]
 8009de6:	4628      	mov	r0, r5
 8009de8:	9401      	str	r4, [sp, #4]
 8009dea:	60e3      	str	r3, [r4, #12]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009df2:	f7ff ffa9 	bl	8009d48 <uxr_common_create_entity>
 8009df6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	f88d 301c 	strb.w	r3, [sp, #28]
 8009e00:	e7e5      	b.n	8009dce <uxr_buffer_create_participant_bin+0x2e>
 8009e02:	bf00      	nop

08009e04 <uxr_buffer_create_topic_bin>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	9105      	str	r1, [sp, #20]
 8009e10:	a997      	add	r1, sp, #604	; 0x25c
 8009e12:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8009e16:	ac13      	add	r4, sp, #76	; 0x4c
 8009e18:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8009e22:	f000 f8ed 	bl	800a000 <uxr_object_id_to_raw>
 8009e26:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8009e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e2c:	a917      	add	r1, sp, #92	; 0x5c
 8009e2e:	a80b      	add	r0, sp, #44	; 0x2c
 8009e30:	9306      	str	r3, [sp, #24]
 8009e32:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8009e34:	930a      	str	r3, [sp, #40]	; 0x28
 8009e36:	2303      	movs	r3, #3
 8009e38:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009e42:	2300      	movs	r3, #0
 8009e44:	f88d 301c 	strb.w	r3, [sp, #28]
 8009e48:	f7ff feea 	bl	8009c20 <ucdr_init_buffer>
 8009e4c:	a906      	add	r1, sp, #24
 8009e4e:	a80b      	add	r0, sp, #44	; 0x2c
 8009e50:	f001 fed0 	bl	800bbf4 <uxr_serialize_OBJK_Topic_Binary>
 8009e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e56:	4628      	mov	r0, r5
 8009e58:	9600      	str	r6, [sp, #0]
 8009e5a:	9316      	str	r3, [sp, #88]	; 0x58
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	9401      	str	r4, [sp, #4]
 8009e60:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009e64:	f7ff ff70 	bl	8009d48 <uxr_common_create_entity>
 8009e68:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	bf00      	nop

08009e70 <uxr_buffer_create_publisher_bin>:
 8009e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e72:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8009e76:	2603      	movs	r6, #3
 8009e78:	4605      	mov	r5, r0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	9105      	str	r1, [sp, #20]
 8009e7e:	a992      	add	r1, sp, #584	; 0x248
 8009e80:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8009e84:	ac0e      	add	r4, sp, #56	; 0x38
 8009e86:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8009e8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009e8e:	f000 f8b7 	bl	800a000 <uxr_object_id_to_raw>
 8009e92:	2300      	movs	r3, #0
 8009e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e98:	a912      	add	r1, sp, #72	; 0x48
 8009e9a:	a806      	add	r0, sp, #24
 8009e9c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8009ea0:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8009ea4:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8009ea8:	f7ff feba 	bl	8009c20 <ucdr_init_buffer>
 8009eac:	a993      	add	r1, sp, #588	; 0x24c
 8009eae:	a806      	add	r0, sp, #24
 8009eb0:	f001 ff54 	bl	800bd5c <uxr_serialize_OBJK_Publisher_Binary>
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	9700      	str	r7, [sp, #0]
 8009eba:	9311      	str	r3, [sp, #68]	; 0x44
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	9401      	str	r4, [sp, #4]
 8009ec0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009ec4:	f7ff ff40 	bl	8009d48 <uxr_common_create_entity>
 8009ec8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8009ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ece:	bf00      	nop

08009ed0 <uxr_buffer_create_datawriter_bin>:
 8009ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009ed8:	4606      	mov	r6, r0
 8009eda:	4618      	mov	r0, r3
 8009edc:	2703      	movs	r7, #3
 8009ede:	ac1d      	add	r4, sp, #116	; 0x74
 8009ee0:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8009ee4:	9105      	str	r1, [sp, #20]
 8009ee6:	a9a1      	add	r1, sp, #644	; 0x284
 8009ee8:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8009eec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009ef0:	2305      	movs	r3, #5
 8009ef2:	7123      	strb	r3, [r4, #4]
 8009ef4:	f000 f884 	bl	800a000 <uxr_object_id_to_raw>
 8009ef8:	a90e      	add	r1, sp, #56	; 0x38
 8009efa:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8009efc:	7227      	strb	r7, [r4, #8]
 8009efe:	f000 f87f 	bl	800a000 <uxr_object_id_to_raw>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8009f08:	3d00      	subs	r5, #0
 8009f0a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8009f0e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8009f12:	bf18      	it	ne
 8009f14:	2501      	movne	r5, #1
 8009f16:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8009f1a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8009f1e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009f22:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009f26:	2301      	movs	r3, #1
 8009f28:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8009f2c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8009f30:	bb8a      	cbnz	r2, 8009f96 <uxr_buffer_create_datawriter_bin+0xc6>
 8009f32:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8009f36:	f04f 0c13 	mov.w	ip, #19
 8009f3a:	250b      	movs	r5, #11
 8009f3c:	2221      	movs	r2, #33	; 0x21
 8009f3e:	2111      	movs	r1, #17
 8009f40:	2009      	movs	r0, #9
 8009f42:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009f46:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8009f4a:	b923      	cbnz	r3, 8009f56 <uxr_buffer_create_datawriter_bin+0x86>
 8009f4c:	4672      	mov	r2, lr
 8009f4e:	4661      	mov	r1, ip
 8009f50:	4628      	mov	r0, r5
 8009f52:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8009f56:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d025      	beq.n	8009faa <uxr_buffer_create_datawriter_bin+0xda>
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d029      	beq.n	8009fb6 <uxr_buffer_create_datawriter_bin+0xe6>
 8009f62:	b32b      	cbz	r3, 8009fb0 <uxr_buffer_create_datawriter_bin+0xe0>
 8009f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f68:	a921      	add	r1, sp, #132	; 0x84
 8009f6a:	a806      	add	r0, sp, #24
 8009f6c:	f7ff fe58 	bl	8009c20 <ucdr_init_buffer>
 8009f70:	a90e      	add	r1, sp, #56	; 0x38
 8009f72:	a806      	add	r0, sp, #24
 8009f74:	f001 ff68 	bl	800be48 <uxr_serialize_OBJK_DataWriter_Binary>
 8009f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7a:	f8cd 8000 	str.w	r8, [sp]
 8009f7e:	4630      	mov	r0, r6
 8009f80:	9401      	str	r4, [sp, #4]
 8009f82:	60e3      	str	r3, [r4, #12]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009f8a:	f7ff fedd 	bl	8009d48 <uxr_common_create_entity>
 8009f8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f96:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8009f9a:	f04f 0c12 	mov.w	ip, #18
 8009f9e:	250a      	movs	r5, #10
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	2110      	movs	r1, #16
 8009fa4:	2008      	movs	r0, #8
 8009fa6:	2702      	movs	r7, #2
 8009fa8:	e7cd      	b.n	8009f46 <uxr_buffer_create_datawriter_bin+0x76>
 8009faa:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8009fae:	e7d9      	b.n	8009f64 <uxr_buffer_create_datawriter_bin+0x94>
 8009fb0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8009fb4:	e7d6      	b.n	8009f64 <uxr_buffer_create_datawriter_bin+0x94>
 8009fb6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8009fba:	e7d3      	b.n	8009f64 <uxr_buffer_create_datawriter_bin+0x94>

08009fbc <uxr_object_id>:
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f88d 1006 	strb.w	r1, [sp, #6]
 8009fc4:	f360 030f 	bfi	r3, r0, #0, #16
 8009fc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009fcc:	f362 431f 	bfi	r3, r2, #16, #16
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	b002      	add	sp, #8
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop

08009fd8 <uxr_object_id_from_raw>:
 8009fd8:	7843      	ldrb	r3, [r0, #1]
 8009fda:	b082      	sub	sp, #8
 8009fdc:	7801      	ldrb	r1, [r0, #0]
 8009fde:	2000      	movs	r0, #0
 8009fe0:	091a      	lsrs	r2, r3, #4
 8009fe2:	f003 030f 	and.w	r3, r3, #15
 8009fe6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009fea:	f88d 3006 	strb.w	r3, [sp, #6]
 8009fee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009ff2:	f362 000f 	bfi	r0, r2, #0, #16
 8009ff6:	f363 401f 	bfi	r0, r3, #16, #16
 8009ffa:	b002      	add	sp, #8
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop

0800a000 <uxr_object_id_to_raw>:
 800a000:	4602      	mov	r2, r0
 800a002:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800a006:	b082      	sub	sp, #8
 800a008:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800a00c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800a010:	f881 c000 	strb.w	ip, [r1]
 800a014:	7048      	strb	r0, [r1, #1]
 800a016:	b002      	add	sp, #8
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop

0800a01c <on_get_fragmentation_info>:
 800a01c:	b500      	push	{lr}
 800a01e:	b08b      	sub	sp, #44	; 0x2c
 800a020:	4601      	mov	r1, r0
 800a022:	2204      	movs	r2, #4
 800a024:	a802      	add	r0, sp, #8
 800a026:	f7ff fdfb 	bl	8009c20 <ucdr_init_buffer>
 800a02a:	f10d 0305 	add.w	r3, sp, #5
 800a02e:	f10d 0206 	add.w	r2, sp, #6
 800a032:	a901      	add	r1, sp, #4
 800a034:	a802      	add	r0, sp, #8
 800a036:	f001 f9a7 	bl	800b388 <uxr_read_submessage_header>
 800a03a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a03e:	2b0d      	cmp	r3, #13
 800a040:	d003      	beq.n	800a04a <on_get_fragmentation_info+0x2e>
 800a042:	2000      	movs	r0, #0
 800a044:	b00b      	add	sp, #44	; 0x2c
 800a046:	f85d fb04 	ldr.w	pc, [sp], #4
 800a04a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a04e:	f013 0f02 	tst.w	r3, #2
 800a052:	bf14      	ite	ne
 800a054:	2002      	movne	r0, #2
 800a056:	2001      	moveq	r0, #1
 800a058:	b00b      	add	sp, #44	; 0x2c
 800a05a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a05e:	bf00      	nop

0800a060 <read_submessage_get_info>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	2500      	movs	r5, #0
 800a064:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800a068:	460e      	mov	r6, r1
 800a06a:	4604      	mov	r4, r0
 800a06c:	f44f 7224 	mov.w	r2, #656	; 0x290
 800a070:	4629      	mov	r1, r5
 800a072:	a810      	add	r0, sp, #64	; 0x40
 800a074:	9503      	str	r5, [sp, #12]
 800a076:	9504      	str	r5, [sp, #16]
 800a078:	f007 f83c 	bl	80110f4 <memset>
 800a07c:	a903      	add	r1, sp, #12
 800a07e:	4630      	mov	r0, r6
 800a080:	f002 f950 	bl	800c324 <uxr_deserialize_GET_INFO_Payload>
 800a084:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a088:	4620      	mov	r0, r4
 800a08a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a08e:	f000 ffe9 	bl	800b064 <uxr_session_header_offset>
 800a092:	462b      	mov	r3, r5
 800a094:	220c      	movs	r2, #12
 800a096:	a905      	add	r1, sp, #20
 800a098:	9000      	str	r0, [sp, #0]
 800a09a:	a808      	add	r0, sp, #32
 800a09c:	f7ff fdae 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800a0a0:	a910      	add	r1, sp, #64	; 0x40
 800a0a2:	a808      	add	r0, sp, #32
 800a0a4:	f002 f9b2 	bl	800c40c <uxr_serialize_INFO_Payload>
 800a0a8:	9b08      	ldr	r3, [sp, #32]
 800a0aa:	462a      	mov	r2, r5
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 ff84 	bl	800afbc <uxr_stamp_session_header>
 800a0b4:	a808      	add	r0, sp, #32
 800a0b6:	f7ff fde1 	bl	8009c7c <ucdr_buffer_length>
 800a0ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a0bc:	4602      	mov	r2, r0
 800a0be:	a905      	add	r1, sp, #20
 800a0c0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a0c4:	47a0      	blx	r4
 800a0c6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}

0800a0cc <write_submessage_acknack.isra.0>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	b092      	sub	sp, #72	; 0x48
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	460e      	mov	r6, r1
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	f000 ffc5 	bl	800b064 <uxr_session_header_offset>
 800a0da:	a905      	add	r1, sp, #20
 800a0dc:	9000      	str	r0, [sp, #0]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	a80a      	add	r0, sp, #40	; 0x28
 800a0e2:	2211      	movs	r2, #17
 800a0e4:	f7ff fd8a 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800a0e8:	2218      	movs	r2, #24
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	210a      	movs	r1, #10
 800a0ee:	fb02 5404 	mla	r4, r2, r4, r5
 800a0f2:	a80a      	add	r0, sp, #40	; 0x28
 800a0f4:	2205      	movs	r2, #5
 800a0f6:	3450      	adds	r4, #80	; 0x50
 800a0f8:	f001 f92c 	bl	800b354 <uxr_buffer_submessage_header>
 800a0fc:	a903      	add	r1, sp, #12
 800a0fe:	4620      	mov	r0, r4
 800a100:	f004 ffd4 	bl	800f0ac <uxr_compute_acknack>
 800a104:	ba40      	rev16	r0, r0
 800a106:	a903      	add	r1, sp, #12
 800a108:	f88d 6010 	strb.w	r6, [sp, #16]
 800a10c:	f8ad 000e 	strh.w	r0, [sp, #14]
 800a110:	a80a      	add	r0, sp, #40	; 0x28
 800a112:	f002 f9ed 	bl	800c4f0 <uxr_serialize_ACKNACK_Payload>
 800a116:	2200      	movs	r2, #0
 800a118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11a:	4628      	mov	r0, r5
 800a11c:	4611      	mov	r1, r2
 800a11e:	f000 ff4d 	bl	800afbc <uxr_stamp_session_header>
 800a122:	a80a      	add	r0, sp, #40	; 0x28
 800a124:	f7ff fdaa 	bl	8009c7c <ucdr_buffer_length>
 800a128:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a12a:	4602      	mov	r2, r0
 800a12c:	a905      	add	r1, sp, #20
 800a12e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a132:	47a0      	blx	r4
 800a134:	b012      	add	sp, #72	; 0x48
 800a136:	bd70      	pop	{r4, r5, r6, pc}

0800a138 <uxr_init_session>:
 800a138:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800a170 <uxr_init_session+0x38>
 800a13c:	2300      	movs	r3, #0
 800a13e:	b510      	push	{r4, lr}
 800a140:	4604      	mov	r4, r0
 800a142:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800a146:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800a14a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800a14e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800a152:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800a156:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800a15a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800a15e:	2181      	movs	r1, #129	; 0x81
 800a160:	f000 fe90 	bl	800ae84 <uxr_init_session_info>
 800a164:	f104 0008 	add.w	r0, r4, #8
 800a168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a16c:	f001 b80e 	b.w	800b18c <uxr_init_stream_storage>
	...

0800a178 <uxr_set_status_callback>:
 800a178:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop

0800a180 <uxr_set_topic_callback>:
 800a180:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop

0800a188 <uxr_set_request_callback>:
 800a188:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop

0800a190 <uxr_set_reply_callback>:
 800a190:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop

0800a198 <uxr_create_output_best_effort_stream>:
 800a198:	b510      	push	{r4, lr}
 800a19a:	4604      	mov	r4, r0
 800a19c:	b084      	sub	sp, #16
 800a19e:	e9cd 2100 	strd	r2, r1, [sp]
 800a1a2:	f000 ff5f 	bl	800b064 <uxr_session_header_offset>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f104 0008 	add.w	r0, r4, #8
 800a1ac:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a1b0:	b004      	add	sp, #16
 800a1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b6:	f001 b82f 	b.w	800b218 <uxr_add_output_best_effort_buffer>
 800a1ba:	bf00      	nop

0800a1bc <uxr_create_output_reliable_stream>:
 800a1bc:	b530      	push	{r4, r5, lr}
 800a1be:	b089      	sub	sp, #36	; 0x24
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	f000 ff4c 	bl	800b064 <uxr_session_header_offset>
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	9905      	ldr	r1, [sp, #20]
 800a1d0:	f104 0008 	add.w	r0, r4, #8
 800a1d4:	9500      	str	r5, [sp, #0]
 800a1d6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a1da:	f001 f831 	bl	800b240 <uxr_add_output_reliable_buffer>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	fa5f fc80 	uxtb.w	ip, r0
 800a1e4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a1e8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a1ec:	0e03      	lsrs	r3, r0, #24
 800a1ee:	f36c 0207 	bfi	r2, ip, #0, #8
 800a1f2:	f364 220f 	bfi	r2, r4, #8, #8
 800a1f6:	f361 4217 	bfi	r2, r1, #16, #8
 800a1fa:	f363 621f 	bfi	r2, r3, #24, #8
 800a1fe:	4610      	mov	r0, r2
 800a200:	b009      	add	sp, #36	; 0x24
 800a202:	bd30      	pop	{r4, r5, pc}

0800a204 <uxr_create_input_best_effort_stream>:
 800a204:	b082      	sub	sp, #8
 800a206:	3008      	adds	r0, #8
 800a208:	b002      	add	sp, #8
 800a20a:	f001 b833 	b.w	800b274 <uxr_add_input_best_effort_buffer>
 800a20e:	bf00      	nop

0800a210 <uxr_create_input_reliable_stream>:
 800a210:	b510      	push	{r4, lr}
 800a212:	4c0c      	ldr	r4, [pc, #48]	; (800a244 <uxr_create_input_reliable_stream+0x34>)
 800a214:	b084      	sub	sp, #16
 800a216:	3008      	adds	r0, #8
 800a218:	9400      	str	r4, [sp, #0]
 800a21a:	f001 f841 	bl	800b2a0 <uxr_add_input_reliable_buffer>
 800a21e:	2200      	movs	r2, #0
 800a220:	fa5f fe80 	uxtb.w	lr, r0
 800a224:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800a228:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a22c:	0e03      	lsrs	r3, r0, #24
 800a22e:	f36e 0207 	bfi	r2, lr, #0, #8
 800a232:	f36c 220f 	bfi	r2, ip, #8, #8
 800a236:	f361 4217 	bfi	r2, r1, #16, #8
 800a23a:	f363 621f 	bfi	r2, r3, #24, #8
 800a23e:	4610      	mov	r0, r2
 800a240:	b004      	add	sp, #16
 800a242:	bd10      	pop	{r4, pc}
 800a244:	0800a01d 	.word	0x0800a01d

0800a248 <uxr_epoch_nanos>:
 800a248:	b510      	push	{r4, lr}
 800a24a:	4604      	mov	r4, r0
 800a24c:	f001 f8e4 	bl	800b418 <uxr_nanos>
 800a250:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800a254:	1ac0      	subs	r0, r0, r3
 800a256:	eb61 0102 	sbc.w	r1, r1, r2
 800a25a:	bd10      	pop	{r4, pc}

0800a25c <uxr_flash_output_streams>:
 800a25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a260:	7e03      	ldrb	r3, [r0, #24]
 800a262:	b084      	sub	sp, #16
 800a264:	4604      	mov	r4, r0
 800a266:	b1fb      	cbz	r3, 800a2a8 <uxr_flash_output_streams+0x4c>
 800a268:	f04f 0900 	mov.w	r9, #0
 800a26c:	f10d 0802 	add.w	r8, sp, #2
 800a270:	af03      	add	r7, sp, #12
 800a272:	ae02      	add	r6, sp, #8
 800a274:	4648      	mov	r0, r9
 800a276:	2201      	movs	r2, #1
 800a278:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800a27c:	4611      	mov	r1, r2
 800a27e:	3508      	adds	r5, #8
 800a280:	f000 ff2a 	bl	800b0d8 <uxr_stream_id>
 800a284:	4684      	mov	ip, r0
 800a286:	4643      	mov	r3, r8
 800a288:	463a      	mov	r2, r7
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	f8cd c004 	str.w	ip, [sp, #4]
 800a292:	f004 ff95 	bl	800f1c0 <uxr_prepare_best_effort_buffer_to_send>
 800a296:	2800      	cmp	r0, #0
 800a298:	d13d      	bne.n	800a316 <uxr_flash_output_streams+0xba>
 800a29a:	f109 0901 	add.w	r9, r9, #1
 800a29e:	7e23      	ldrb	r3, [r4, #24]
 800a2a0:	fa5f f089 	uxtb.w	r0, r9
 800a2a4:	4283      	cmp	r3, r0
 800a2a6:	d8e6      	bhi.n	800a276 <uxr_flash_output_streams+0x1a>
 800a2a8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a2ac:	b383      	cbz	r3, 800a310 <uxr_flash_output_streams+0xb4>
 800a2ae:	f04f 0900 	mov.w	r9, #0
 800a2b2:	f10d 0802 	add.w	r8, sp, #2
 800a2b6:	af03      	add	r7, sp, #12
 800a2b8:	ae02      	add	r6, sp, #8
 800a2ba:	4648      	mov	r0, r9
 800a2bc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	2102      	movs	r1, #2
 800a2c4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a2c8:	f000 ff06 	bl	800b0d8 <uxr_stream_id>
 800a2cc:	9001      	str	r0, [sp, #4]
 800a2ce:	3520      	adds	r5, #32
 800a2d0:	e00c      	b.n	800a2ec <uxr_flash_output_streams+0x90>
 800a2d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a2d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a2da:	9b02      	ldr	r3, [sp, #8]
 800a2dc:	f000 fe6e 	bl	800afbc <uxr_stamp_session_header>
 800a2e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a2e2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a2e6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800a2ea:	47d0      	blx	sl
 800a2ec:	4643      	mov	r3, r8
 800a2ee:	463a      	mov	r2, r7
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f005 f988 	bl	800f608 <uxr_prepare_next_reliable_buffer_to_send>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e8      	bne.n	800a2d2 <uxr_flash_output_streams+0x76>
 800a300:	f109 0901 	add.w	r9, r9, #1
 800a304:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a308:	fa5f f089 	uxtb.w	r0, r9
 800a30c:	4283      	cmp	r3, r0
 800a30e:	d8d5      	bhi.n	800a2bc <uxr_flash_output_streams+0x60>
 800a310:	b004      	add	sp, #16
 800a312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a316:	9b02      	ldr	r3, [sp, #8]
 800a318:	4620      	mov	r0, r4
 800a31a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a31e:	f109 0901 	add.w	r9, r9, #1
 800a322:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a326:	f000 fe49 	bl	800afbc <uxr_stamp_session_header>
 800a32a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a32c:	9a03      	ldr	r2, [sp, #12]
 800a32e:	685d      	ldr	r5, [r3, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	9902      	ldr	r1, [sp, #8]
 800a334:	47a8      	blx	r5
 800a336:	7e23      	ldrb	r3, [r4, #24]
 800a338:	fa5f f089 	uxtb.w	r0, r9
 800a33c:	4283      	cmp	r3, r0
 800a33e:	d89a      	bhi.n	800a276 <uxr_flash_output_streams+0x1a>
 800a340:	e7b2      	b.n	800a2a8 <uxr_flash_output_streams+0x4c>
 800a342:	bf00      	nop

0800a344 <read_submessage_info>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	460d      	mov	r5, r1
 800a34a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800a34e:	4606      	mov	r6, r0
 800a350:	4669      	mov	r1, sp
 800a352:	4628      	mov	r0, r5
 800a354:	f001 fef8 	bl	800c148 <uxr_deserialize_BaseObjectReply>
 800a358:	4604      	mov	r4, r0
 800a35a:	a902      	add	r1, sp, #8
 800a35c:	4628      	mov	r0, r5
 800a35e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800a362:	f7fe fc99 	bl	8008c98 <ucdr_deserialize_bool>
 800a366:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a36a:	4004      	ands	r4, r0
 800a36c:	b2e4      	uxtb	r4, r4
 800a36e:	b95b      	cbnz	r3, 800a388 <read_submessage_info+0x44>
 800a370:	a987      	add	r1, sp, #540	; 0x21c
 800a372:	4628      	mov	r0, r5
 800a374:	f7fe fc90 	bl	8008c98 <ucdr_deserialize_bool>
 800a378:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800a37c:	4680      	mov	r8, r0
 800a37e:	b94b      	cbnz	r3, 800a394 <read_submessage_info+0x50>
 800a380:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a388:	a903      	add	r1, sp, #12
 800a38a:	4628      	mov	r0, r5
 800a38c:	f001 fd88 	bl	800bea0 <uxr_deserialize_ObjectVariant>
 800a390:	4004      	ands	r4, r0
 800a392:	e7ed      	b.n	800a370 <read_submessage_info+0x2c>
 800a394:	a988      	add	r1, sp, #544	; 0x220
 800a396:	4628      	mov	r0, r5
 800a398:	f7fe fcac 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800a39c:	ea14 0f08 	tst.w	r4, r8
 800a3a0:	d0ee      	beq.n	800a380 <read_submessage_info+0x3c>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d0ec      	beq.n	800a380 <read_submessage_info+0x3c>
 800a3a6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800a3aa:	2b0d      	cmp	r3, #13
 800a3ac:	d1e8      	bne.n	800a380 <read_submessage_info+0x3c>
 800a3ae:	a98a      	add	r1, sp, #552	; 0x228
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f7ff fa45 	bl	8009840 <ucdr_deserialize_int16_t>
 800a3b6:	b138      	cbz	r0, 800a3c8 <read_submessage_info+0x84>
 800a3b8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dd06      	ble.n	800a3ce <read_submessage_info+0x8a>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	bf14      	ite	ne
 800a3c4:	2001      	movne	r0, #1
 800a3c6:	2002      	moveq	r0, #2
 800a3c8:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 800a3cc:	e7d8      	b.n	800a380 <read_submessage_info+0x3c>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e7fa      	b.n	800a3c8 <read_submessage_info+0x84>
 800a3d2:	bf00      	nop

0800a3d4 <read_submessage_list>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	4604      	mov	r4, r0
 800a3da:	b097      	sub	sp, #92	; 0x5c
 800a3dc:	460d      	mov	r5, r1
 800a3de:	4ec1      	ldr	r6, [pc, #772]	; (800a6e4 <read_submessage_list+0x310>)
 800a3e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800a3e6:	aa0c      	add	r2, sp, #48	; 0x30
 800a3e8:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 ffcb 	bl	800b388 <uxr_read_submessage_header>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f000 8142 	beq.w	800a67c <read_submessage_list+0x2a8>
 800a3f8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800a3fc:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800a400:	3b02      	subs	r3, #2
 800a402:	2b0d      	cmp	r3, #13
 800a404:	d8ed      	bhi.n	800a3e2 <read_submessage_list+0xe>
 800a406:	a101      	add	r1, pc, #4	; (adr r1, 800a40c <read_submessage_list+0x38>)
 800a408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a40c:	0800a673 	.word	0x0800a673
 800a410:	0800a3e3 	.word	0x0800a3e3
 800a414:	0800a663 	.word	0x0800a663
 800a418:	0800a601 	.word	0x0800a601
 800a41c:	0800a5f7 	.word	0x0800a5f7
 800a420:	0800a3e3 	.word	0x0800a3e3
 800a424:	0800a3e3 	.word	0x0800a3e3
 800a428:	0800a54d 	.word	0x0800a54d
 800a42c:	0800a4df 	.word	0x0800a4df
 800a430:	0800a49f 	.word	0x0800a49f
 800a434:	0800a3e3 	.word	0x0800a3e3
 800a438:	0800a3e3 	.word	0x0800a3e3
 800a43c:	0800a3e3 	.word	0x0800a3e3
 800a440:	0800a445 	.word	0x0800a445
 800a444:	a910      	add	r1, sp, #64	; 0x40
 800a446:	4628      	mov	r0, r5
 800a448:	f002 f8a6 	bl	800c598 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800a44c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800a450:	f1b8 0f00 	cmp.w	r8, #0
 800a454:	f000 811a 	beq.w	800a68c <read_submessage_list+0x2b8>
 800a458:	f000 ffde 	bl	800b418 <uxr_nanos>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800a464:	2100      	movs	r1, #0
 800a466:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a468:	9006      	str	r0, [sp, #24]
 800a46a:	468c      	mov	ip, r1
 800a46c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a46e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800a472:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a474:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800a478:	468c      	mov	ip, r1
 800a47a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a47c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800a480:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800a484:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 800a488:	fbc7 0106 	smlal	r0, r1, r7, r6
 800a48c:	e9cd 0100 	strd	r0, r1, [sp]
 800a490:	4620      	mov	r0, r4
 800a492:	47c0      	blx	r8
 800a494:	f04f 0301 	mov.w	r3, #1
 800a498:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800a49c:	e7a1      	b.n	800a3e2 <read_submessage_list+0xe>
 800a49e:	a910      	add	r1, sp, #64	; 0x40
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f002 f865 	bl	800c570 <uxr_deserialize_HEARTBEAT_Payload>
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a4ac:	f000 fe42 	bl	800b134 <uxr_stream_id_from_raw>
 800a4b0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800a4b4:	900f      	str	r0, [sp, #60]	; 0x3c
 800a4b6:	f104 0008 	add.w	r0, r4, #8
 800a4ba:	4641      	mov	r1, r8
 800a4bc:	f000 ff28 	bl	800b310 <uxr_get_input_reliable_stream>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d08e      	beq.n	800a3e2 <read_submessage_list+0xe>
 800a4c4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800a4c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800a4cc:	f004 fde2 	bl	800f094 <uxr_process_heartbeat>
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7ff fdf8 	bl	800a0cc <write_submessage_acknack.isra.0>
 800a4dc:	e781      	b.n	800a3e2 <read_submessage_list+0xe>
 800a4de:	a910      	add	r1, sp, #64	; 0x40
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f002 f81d 	bl	800c520 <uxr_deserialize_ACKNACK_Payload>
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a4ec:	f000 fe22 	bl	800b134 <uxr_stream_id_from_raw>
 800a4f0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a4f4:	900d      	str	r0, [sp, #52]	; 0x34
 800a4f6:	f104 0008 	add.w	r0, r4, #8
 800a4fa:	f000 fef3 	bl	800b2e4 <uxr_get_output_reliable_stream>
 800a4fe:	4680      	mov	r8, r0
 800a500:	2800      	cmp	r0, #0
 800a502:	f43f af6e 	beq.w	800a3e2 <read_submessage_list+0xe>
 800a506:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a50a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a50e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800a512:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800a516:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a51a:	b289      	uxth	r1, r1
 800a51c:	f005 f91c 	bl	800f758 <uxr_process_acknack>
 800a520:	4640      	mov	r0, r8
 800a522:	f005 f8dd 	bl	800f6e0 <uxr_begin_output_nack_buffer_it>
 800a526:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800a52a:	e005      	b.n	800a538 <read_submessage_list+0x164>
 800a52c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a52e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800a532:	e9d3 0900 	ldrd	r0, r9, [r3]
 800a536:	47c8      	blx	r9
 800a538:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800a53c:	aa0f      	add	r2, sp, #60	; 0x3c
 800a53e:	4651      	mov	r1, sl
 800a540:	4640      	mov	r0, r8
 800a542:	f005 f8cf 	bl	800f6e4 <uxr_next_reliable_nack_buffer_to_send>
 800a546:	2800      	cmp	r0, #0
 800a548:	d1f0      	bne.n	800a52c <read_submessage_list+0x158>
 800a54a:	e74a      	b.n	800a3e2 <read_submessage_list+0xe>
 800a54c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a550:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a554:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800a558:	4628      	mov	r0, r5
 800a55a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800a55e:	4651      	mov	r1, sl
 800a560:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a564:	f1a8 0804 	sub.w	r8, r8, #4
 800a568:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800a56c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800a570:	fa1f f888 	uxth.w	r8, r8
 800a574:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a578:	f009 090e 	and.w	r9, r9, #14
 800a57c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800a580:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800a584:	f001 fd2e 	bl	800bfe4 <uxr_deserialize_BaseObjectRequest>
 800a588:	4650      	mov	r0, sl
 800a58a:	a90f      	add	r1, sp, #60	; 0x3c
 800a58c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800a590:	f000 fd90 	bl	800b0b4 <uxr_parse_base_object_request>
 800a594:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a596:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800a59a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800a59e:	9110      	str	r1, [sp, #64]	; 0x40
 800a5a0:	f1bb 0f00 	cmp.w	fp, #0
 800a5a4:	d006      	beq.n	800a5b4 <read_submessage_list+0x1e0>
 800a5a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a5aa:	4652      	mov	r2, sl
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	47d8      	blx	fp
 800a5b4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a5b6:	b182      	cbz	r2, 800a5da <read_submessage_list+0x206>
 800a5b8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a5ba:	f04f 0c00 	mov.w	ip, #0
 800a5be:	3902      	subs	r1, #2
 800a5c0:	e003      	b.n	800a5ca <read_submessage_list+0x1f6>
 800a5c2:	f10c 0c01 	add.w	ip, ip, #1
 800a5c6:	4594      	cmp	ip, r2
 800a5c8:	d007      	beq.n	800a5da <read_submessage_list+0x206>
 800a5ca:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800a5ce:	4553      	cmp	r3, sl
 800a5d0:	d1f7      	bne.n	800a5c2 <read_submessage_list+0x1ee>
 800a5d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f803 200c 	strb.w	r2, [r3, ip]
 800a5da:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800a5de:	464b      	mov	r3, r9
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	9102      	str	r1, [sp, #8]
 800a5e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a5e8:	9101      	str	r1, [sp, #4]
 800a5ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5ec:	9100      	str	r1, [sp, #0]
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f005 f93a 	bl	800f868 <read_submessage_format>
 800a5f4:	e6f5      	b.n	800a3e2 <read_submessage_list+0xe>
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7ff fea3 	bl	800a344 <read_submessage_info>
 800a5fe:	e6f0      	b.n	800a3e2 <read_submessage_list+0xe>
 800a600:	2a00      	cmp	r2, #0
 800a602:	d03e      	beq.n	800a682 <read_submessage_list+0x2ae>
 800a604:	a910      	add	r1, sp, #64	; 0x40
 800a606:	4628      	mov	r0, r5
 800a608:	f001 fee2 	bl	800c3d0 <uxr_deserialize_STATUS_Payload>
 800a60c:	a90e      	add	r1, sp, #56	; 0x38
 800a60e:	aa0d      	add	r2, sp, #52	; 0x34
 800a610:	a810      	add	r0, sp, #64	; 0x40
 800a612:	f000 fd4f 	bl	800b0b4 <uxr_parse_base_object_request>
 800a616:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a618:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800a61c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800a620:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800a624:	910f      	str	r1, [sp, #60]	; 0x3c
 800a626:	f1ba 0f00 	cmp.w	sl, #0
 800a62a:	d006      	beq.n	800a63a <read_submessage_list+0x266>
 800a62c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a630:	4642      	mov	r2, r8
 800a632:	4620      	mov	r0, r4
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	464b      	mov	r3, r9
 800a638:	47d0      	blx	sl
 800a63a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	f43f aed0 	beq.w	800a3e2 <read_submessage_list+0xe>
 800a642:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a644:	2100      	movs	r1, #0
 800a646:	3802      	subs	r0, #2
 800a648:	e003      	b.n	800a652 <read_submessage_list+0x27e>
 800a64a:	3101      	adds	r1, #1
 800a64c:	4291      	cmp	r1, r2
 800a64e:	f43f aec8 	beq.w	800a3e2 <read_submessage_list+0xe>
 800a652:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a656:	4543      	cmp	r3, r8
 800a658:	d1f7      	bne.n	800a64a <read_submessage_list+0x276>
 800a65a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a65c:	f803 9001 	strb.w	r9, [r3, r1]
 800a660:	e6bf      	b.n	800a3e2 <read_submessage_list+0xe>
 800a662:	2a00      	cmp	r2, #0
 800a664:	f47f aebd 	bne.w	800a3e2 <read_submessage_list+0xe>
 800a668:	4629      	mov	r1, r5
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fc66 	bl	800af3c <uxr_read_create_session_status>
 800a670:	e6b7      	b.n	800a3e2 <read_submessage_list+0xe>
 800a672:	4629      	mov	r1, r5
 800a674:	4620      	mov	r0, r4
 800a676:	f7ff fcf3 	bl	800a060 <read_submessage_get_info>
 800a67a:	e6b2      	b.n	800a3e2 <read_submessage_list+0xe>
 800a67c:	b017      	add	sp, #92	; 0x5c
 800a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a682:	4629      	mov	r1, r5
 800a684:	4620      	mov	r0, r4
 800a686:	f000 fc67 	bl	800af58 <uxr_read_delete_session_status>
 800a68a:	e6aa      	b.n	800a3e2 <read_submessage_list+0xe>
 800a68c:	f000 fec4 	bl	800b418 <uxr_nanos>
 800a690:	4642      	mov	r2, r8
 800a692:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a696:	fbc7 3206 	smlal	r3, r2, r7, r6
 800a69a:	1818      	adds	r0, r3, r0
 800a69c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a69e:	eb42 0101 	adc.w	r1, r2, r1
 800a6a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	fbc7 3206 	smlal	r3, r2, r7, r6
 800a6aa:	469c      	mov	ip, r3
 800a6ac:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 800a6b0:	fbc3 7806 	smlal	r7, r8, r3, r6
 800a6b4:	4643      	mov	r3, r8
 800a6b6:	eb1c 0c07 	adds.w	ip, ip, r7
 800a6ba:	eb42 0203 	adc.w	r2, r2, r3
 800a6be:	ebb0 030c 	subs.w	r3, r0, ip
 800a6c2:	eb61 0202 	sbc.w	r2, r1, r2
 800a6c6:	2a00      	cmp	r2, #0
 800a6c8:	db08      	blt.n	800a6dc <read_submessage_list+0x308>
 800a6ca:	085b      	lsrs	r3, r3, #1
 800a6cc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800a6d0:	1052      	asrs	r2, r2, #1
 800a6d2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800a6d6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 800a6da:	e6db      	b.n	800a494 <read_submessage_list+0xc0>
 800a6dc:	3301      	adds	r3, #1
 800a6de:	f142 0200 	adc.w	r2, r2, #0
 800a6e2:	e7f2      	b.n	800a6ca <read_submessage_list+0x2f6>
 800a6e4:	3b9aca00 	.word	0x3b9aca00

0800a6e8 <listen_message_reliably>:
 800a6e8:	1e0b      	subs	r3, r1, #0
 800a6ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ee:	bfb8      	it	lt
 800a6f0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800a6f4:	b09d      	sub	sp, #116	; 0x74
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	9305      	str	r3, [sp, #20]
 800a6fa:	f000 fe71 	bl	800b3e0 <uxr_millis>
 800a6fe:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800a702:	4681      	mov	r9, r0
 800a704:	2a00      	cmp	r2, #0
 800a706:	f000 809a 	beq.w	800a83e <listen_message_reliably+0x156>
 800a70a:	2600      	movs	r6, #0
 800a70c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a710:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a714:	460f      	mov	r7, r1
 800a716:	4630      	mov	r0, r6
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	e00e      	b.n	800a73a <listen_message_reliably+0x52>
 800a71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a71e:	3601      	adds	r6, #1
 800a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a722:	455a      	cmp	r2, fp
 800a724:	9903      	ldr	r1, [sp, #12]
 800a726:	b2f0      	uxtb	r0, r6
 800a728:	eb73 0101 	sbcs.w	r1, r3, r1
 800a72c:	da01      	bge.n	800a732 <listen_message_reliably+0x4a>
 800a72e:	4693      	mov	fp, r2
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800a736:	4283      	cmp	r3, r0
 800a738:	d95f      	bls.n	800a7fa <listen_message_reliably+0x112>
 800a73a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a73e:	2102      	movs	r1, #2
 800a740:	2201      	movs	r2, #1
 800a742:	00e4      	lsls	r4, r4, #3
 800a744:	f000 fcc8 	bl	800b0d8 <uxr_stream_id>
 800a748:	4601      	mov	r1, r0
 800a74a:	f104 0520 	add.w	r5, r4, #32
 800a74e:	463b      	mov	r3, r7
 800a750:	464a      	mov	r2, r9
 800a752:	9109      	str	r1, [sp, #36]	; 0x24
 800a754:	4445      	add	r5, r8
 800a756:	4628      	mov	r0, r5
 800a758:	f004 ff96 	bl	800f688 <uxr_update_output_stream_heartbeat_timestamp>
 800a75c:	eb08 0304 	add.w	r3, r8, r4
 800a760:	2800      	cmp	r0, #0
 800a762:	d0db      	beq.n	800a71c <listen_message_reliably+0x34>
 800a764:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800a768:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800a76c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a770:	4640      	mov	r0, r8
 800a772:	3501      	adds	r5, #1
 800a774:	4444      	add	r4, r8
 800a776:	9304      	str	r3, [sp, #16]
 800a778:	f000 fc74 	bl	800b064 <uxr_session_header_offset>
 800a77c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a780:	2300      	movs	r3, #0
 800a782:	2211      	movs	r2, #17
 800a784:	a90c      	add	r1, sp, #48	; 0x30
 800a786:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800a78a:	9000      	str	r0, [sp, #0]
 800a78c:	4650      	mov	r0, sl
 800a78e:	3601      	adds	r6, #1
 800a790:	f7ff fa34 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800a794:	2300      	movs	r3, #0
 800a796:	2205      	movs	r2, #5
 800a798:	210b      	movs	r1, #11
 800a79a:	4650      	mov	r0, sl
 800a79c:	f000 fdda 	bl	800b354 <uxr_buffer_submessage_header>
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	8968      	ldrh	r0, [r5, #10]
 800a7a4:	f005 f92a 	bl	800f9fc <uxr_seq_num_add>
 800a7a8:	892b      	ldrh	r3, [r5, #8]
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	a90a      	add	r1, sp, #40	; 0x28
 800a7ae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	9b04      	ldr	r3, [sp, #16]
 800a7b6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800a7ba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a7be:	f001 fec3 	bl	800c548 <uxr_serialize_HEARTBEAT_Payload>
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	f000 fbf7 	bl	800afbc <uxr_stamp_session_header>
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	f7ff fa54 	bl	8009c7c <ucdr_buffer_length>
 800a7d4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a7d8:	4602      	mov	r2, r0
 800a7da:	a90c      	add	r1, sp, #48	; 0x30
 800a7dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a7e0:	47a8      	blx	r5
 800a7e2:	9903      	ldr	r1, [sp, #12]
 800a7e4:	b2f0      	uxtb	r0, r6
 800a7e6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800a7ea:	455a      	cmp	r2, fp
 800a7ec:	eb73 0101 	sbcs.w	r1, r3, r1
 800a7f0:	db9d      	blt.n	800a72e <listen_message_reliably+0x46>
 800a7f2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800a7f6:	4283      	cmp	r3, r0
 800a7f8:	d89f      	bhi.n	800a73a <listen_message_reliably+0x52>
 800a7fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a7fe:	9a03      	ldr	r2, [sp, #12]
 800a800:	429a      	cmp	r2, r3
 800a802:	bf08      	it	eq
 800a804:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800a808:	d019      	beq.n	800a83e <listen_message_reliably+0x156>
 800a80a:	ebab 0309 	sub.w	r3, fp, r9
 800a80e:	2b00      	cmp	r3, #0
 800a810:	9d05      	ldr	r5, [sp, #20]
 800a812:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 800a816:	aa08      	add	r2, sp, #32
 800a818:	bf08      	it	eq
 800a81a:	2301      	moveq	r3, #1
 800a81c:	a907      	add	r1, sp, #28
 800a81e:	6884      	ldr	r4, [r0, #8]
 800a820:	429d      	cmp	r5, r3
 800a822:	6800      	ldr	r0, [r0, #0]
 800a824:	bfa8      	it	ge
 800a826:	461d      	movge	r5, r3
 800a828:	462b      	mov	r3, r5
 800a82a:	47a0      	blx	r4
 800a82c:	b948      	cbnz	r0, 800a842 <listen_message_reliably+0x15a>
 800a82e:	9b05      	ldr	r3, [sp, #20]
 800a830:	1b5b      	subs	r3, r3, r5
 800a832:	2b00      	cmp	r3, #0
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	f73f af60 	bgt.w	800a6fa <listen_message_reliably+0x12>
 800a83a:	4604      	mov	r4, r0
 800a83c:	e012      	b.n	800a864 <listen_message_reliably+0x17c>
 800a83e:	9b05      	ldr	r3, [sp, #20]
 800a840:	e7e5      	b.n	800a80e <listen_message_reliably+0x126>
 800a842:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a846:	4604      	mov	r4, r0
 800a848:	2500      	movs	r5, #0
 800a84a:	a80c      	add	r0, sp, #48	; 0x30
 800a84c:	f7ff f9e8 	bl	8009c20 <ucdr_init_buffer>
 800a850:	f10d 031a 	add.w	r3, sp, #26
 800a854:	aa06      	add	r2, sp, #24
 800a856:	a90c      	add	r1, sp, #48	; 0x30
 800a858:	4640      	mov	r0, r8
 800a85a:	f88d 5018 	strb.w	r5, [sp, #24]
 800a85e:	f000 fbc1 	bl	800afe4 <uxr_read_session_header>
 800a862:	b918      	cbnz	r0, 800a86c <listen_message_reliably+0x184>
 800a864:	4620      	mov	r0, r4
 800a866:	b01d      	add	sp, #116	; 0x74
 800a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86c:	4629      	mov	r1, r5
 800a86e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a872:	f000 fc5f 	bl	800b134 <uxr_stream_id_from_raw>
 800a876:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a87a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800a87e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800a882:	2e01      	cmp	r6, #1
 800a884:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800a888:	d04b      	beq.n	800a922 <listen_message_reliably+0x23a>
 800a88a:	2e02      	cmp	r6, #2
 800a88c:	d00f      	beq.n	800a8ae <listen_message_reliably+0x1c6>
 800a88e:	2e00      	cmp	r6, #0
 800a890:	d1e8      	bne.n	800a864 <listen_message_reliably+0x17c>
 800a892:	4631      	mov	r1, r6
 800a894:	4630      	mov	r0, r6
 800a896:	f000 fc4d 	bl	800b134 <uxr_stream_id_from_raw>
 800a89a:	4602      	mov	r2, r0
 800a89c:	a90c      	add	r1, sp, #48	; 0x30
 800a89e:	4640      	mov	r0, r8
 800a8a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a8a2:	f7ff fd97 	bl	800a3d4 <read_submessage_list>
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	b01d      	add	sp, #116	; 0x74
 800a8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	f108 0008 	add.w	r0, r8, #8
 800a8b4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800a8b8:	f000 fd2a 	bl	800b310 <uxr_get_input_reliable_stream>
 800a8bc:	4607      	mov	r7, r0
 800a8be:	b338      	cbz	r0, 800a910 <listen_message_reliably+0x228>
 800a8c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8c2:	a80c      	add	r0, sp, #48	; 0x30
 800a8c4:	9203      	str	r2, [sp, #12]
 800a8c6:	f7ff f9dd 	bl	8009c84 <ucdr_buffer_remaining>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	f10d 0019 	add.w	r0, sp, #25
 800a8d0:	9a03      	ldr	r2, [sp, #12]
 800a8d2:	4651      	mov	r1, sl
 800a8d4:	9000      	str	r0, [sp, #0]
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f004 fae0 	bl	800ee9c <uxr_receive_reliable_message>
 800a8dc:	b1c0      	cbz	r0, 800a910 <listen_message_reliably+0x228>
 800a8de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a8e2:	b393      	cbz	r3, 800a94a <listen_message_reliably+0x262>
 800a8e4:	ae14      	add	r6, sp, #80	; 0x50
 800a8e6:	f04f 0a02 	mov.w	sl, #2
 800a8ea:	e00a      	b.n	800a902 <listen_message_reliably+0x21a>
 800a8ec:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800a8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8fe:	f7ff fd69 	bl	800a3d4 <read_submessage_list>
 800a902:	2204      	movs	r2, #4
 800a904:	4631      	mov	r1, r6
 800a906:	4638      	mov	r0, r7
 800a908:	f004 fb4a 	bl	800efa0 <uxr_next_input_reliable_buffer_available>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d1ed      	bne.n	800a8ec <listen_message_reliably+0x204>
 800a910:	4640      	mov	r0, r8
 800a912:	462a      	mov	r2, r5
 800a914:	4649      	mov	r1, r9
 800a916:	f7ff fbd9 	bl	800a0cc <write_submessage_acknack.isra.0>
 800a91a:	4620      	mov	r0, r4
 800a91c:	b01d      	add	sp, #116	; 0x74
 800a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a922:	4629      	mov	r1, r5
 800a924:	f108 0008 	add.w	r0, r8, #8
 800a928:	f000 fce8 	bl	800b2fc <uxr_get_input_best_effort_stream>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d099      	beq.n	800a864 <listen_message_reliably+0x17c>
 800a930:	4651      	mov	r1, sl
 800a932:	f004 fa29 	bl	800ed88 <uxr_receive_best_effort_message>
 800a936:	2800      	cmp	r0, #0
 800a938:	d094      	beq.n	800a864 <listen_message_reliably+0x17c>
 800a93a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a93e:	a90c      	add	r1, sp, #48	; 0x30
 800a940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a942:	4640      	mov	r0, r8
 800a944:	f7ff fd46 	bl	800a3d4 <read_submessage_list>
 800a948:	e78c      	b.n	800a864 <listen_message_reliably+0x17c>
 800a94a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a94e:	a90c      	add	r1, sp, #48	; 0x30
 800a950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a952:	4640      	mov	r0, r8
 800a954:	f7ff fd3e 	bl	800a3d4 <read_submessage_list>
 800a958:	e7c4      	b.n	800a8e4 <listen_message_reliably+0x1fc>
 800a95a:	bf00      	nop

0800a95c <uxr_run_session_until_confirm_delivery>:
 800a95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a960:	4606      	mov	r6, r0
 800a962:	460d      	mov	r5, r1
 800a964:	f000 fd3c 	bl	800b3e0 <uxr_millis>
 800a968:	4607      	mov	r7, r0
 800a96a:	4630      	mov	r0, r6
 800a96c:	f106 0808 	add.w	r8, r6, #8
 800a970:	f7ff fc74 	bl	800a25c <uxr_flash_output_streams>
 800a974:	2d00      	cmp	r5, #0
 800a976:	db10      	blt.n	800a99a <uxr_run_session_until_confirm_delivery+0x3e>
 800a978:	462c      	mov	r4, r5
 800a97a:	e006      	b.n	800a98a <uxr_run_session_until_confirm_delivery+0x2e>
 800a97c:	f7ff feb4 	bl	800a6e8 <listen_message_reliably>
 800a980:	f000 fd2e 	bl	800b3e0 <uxr_millis>
 800a984:	1bc3      	subs	r3, r0, r7
 800a986:	1aec      	subs	r4, r5, r3
 800a988:	d407      	bmi.n	800a99a <uxr_run_session_until_confirm_delivery+0x3e>
 800a98a:	4640      	mov	r0, r8
 800a98c:	f000 fccc 	bl	800b328 <uxr_output_streams_confirmed>
 800a990:	4603      	mov	r3, r0
 800a992:	4621      	mov	r1, r4
 800a994:	4630      	mov	r0, r6
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0f0      	beq.n	800a97c <uxr_run_session_until_confirm_delivery+0x20>
 800a99a:	4640      	mov	r0, r8
 800a99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a0:	f000 bcc2 	b.w	800b328 <uxr_output_streams_confirmed>

0800a9a4 <uxr_run_session_until_all_status>:
 800a9a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	4688      	mov	r8, r1
 800a9b0:	4692      	mov	sl, r2
 800a9b2:	461f      	mov	r7, r3
 800a9b4:	f7ff fc52 	bl	800a25c <uxr_flash_output_streams>
 800a9b8:	f1bb 0f00 	cmp.w	fp, #0
 800a9bc:	d004      	beq.n	800a9c8 <uxr_run_session_until_all_status+0x24>
 800a9be:	465a      	mov	r2, fp
 800a9c0:	21ff      	movs	r1, #255	; 0xff
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	f006 fb96 	bl	80110f4 <memset>
 800a9c8:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800a9cc:	1e7d      	subs	r5, r7, #1
 800a9ce:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 800a9d2:	f000 fd05 	bl	800b3e0 <uxr_millis>
 800a9d6:	4641      	mov	r1, r8
 800a9d8:	4681      	mov	r9, r0
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f7ff fe84 	bl	800a6e8 <listen_message_reliably>
 800a9e0:	f000 fcfe 	bl	800b3e0 <uxr_millis>
 800a9e4:	eba0 0009 	sub.w	r0, r0, r9
 800a9e8:	eba8 0100 	sub.w	r1, r8, r0
 800a9ec:	f1bb 0f00 	cmp.w	fp, #0
 800a9f0:	d029      	beq.n	800aa46 <uxr_run_session_until_all_status+0xa2>
 800a9f2:	46ae      	mov	lr, r5
 800a9f4:	f04f 0c00 	mov.w	ip, #0
 800a9f8:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800a9fc:	2cff      	cmp	r4, #255	; 0xff
 800a9fe:	d015      	beq.n	800aa2c <uxr_run_session_until_all_status+0x88>
 800aa00:	f10c 0c01 	add.w	ip, ip, #1
 800aa04:	45e3      	cmp	fp, ip
 800aa06:	d8f7      	bhi.n	800a9f8 <uxr_run_session_until_all_status+0x54>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	67f3      	str	r3, [r6, #124]	; 0x7c
 800aa0c:	e000      	b.n	800aa10 <uxr_run_session_until_all_status+0x6c>
 800aa0e:	b158      	cbz	r0, 800aa28 <uxr_run_session_until_all_status+0x84>
 800aa10:	462b      	mov	r3, r5
 800aa12:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800aa16:	3302      	adds	r3, #2
 800aa18:	2801      	cmp	r0, #1
 800aa1a:	eba3 0307 	sub.w	r3, r3, r7
 800aa1e:	bf8c      	ite	hi
 800aa20:	2000      	movhi	r0, #0
 800aa22:	2001      	movls	r0, #1
 800aa24:	459b      	cmp	fp, r3
 800aa26:	d8f2      	bhi.n	800aa0e <uxr_run_session_until_all_status+0x6a>
 800aa28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800aa30:	f10c 0c01 	add.w	ip, ip, #1
 800aa34:	45dc      	cmp	ip, fp
 800aa36:	d201      	bcs.n	800aa3c <uxr_run_session_until_all_status+0x98>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0dd      	beq.n	800a9f8 <uxr_run_session_until_all_status+0x54>
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	dde3      	ble.n	800aa08 <uxr_run_session_until_all_status+0x64>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1ca      	bne.n	800a9da <uxr_run_session_until_all_status+0x36>
 800aa44:	e7e0      	b.n	800aa08 <uxr_run_session_until_all_status+0x64>
 800aa46:	2001      	movs	r0, #1
 800aa48:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800aa4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa50 <wait_session_status>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	4604      	mov	r4, r0
 800aa56:	b09d      	sub	sp, #116	; 0x74
 800aa58:	20ff      	movs	r0, #255	; 0xff
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	7160      	strb	r0, [r4, #5]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 80b6 	beq.w	800abd0 <wait_session_status+0x180>
 800aa64:	4689      	mov	r9, r1
 800aa66:	4692      	mov	sl, r2
 800aa68:	f04f 0b00 	mov.w	fp, #0
 800aa6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aa6e:	4652      	mov	r2, sl
 800aa70:	4649      	mov	r1, r9
 800aa72:	e9d3 0500 	ldrd	r0, r5, [r3]
 800aa76:	47a8      	blx	r5
 800aa78:	f000 fcb2 	bl	800b3e0 <uxr_millis>
 800aa7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa80:	4605      	mov	r5, r0
 800aa82:	e009      	b.n	800aa98 <wait_session_status+0x48>
 800aa84:	f000 fcac 	bl	800b3e0 <uxr_millis>
 800aa88:	1b40      	subs	r0, r0, r5
 800aa8a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	dd40      	ble.n	800ab14 <wait_session_status+0xc4>
 800aa92:	7960      	ldrb	r0, [r4, #5]
 800aa94:	28ff      	cmp	r0, #255	; 0xff
 800aa96:	d145      	bne.n	800ab24 <wait_session_status+0xd4>
 800aa98:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800aa9a:	a908      	add	r1, sp, #32
 800aa9c:	6896      	ldr	r6, [r2, #8]
 800aa9e:	6810      	ldr	r0, [r2, #0]
 800aaa0:	aa09      	add	r2, sp, #36	; 0x24
 800aaa2:	47b0      	blx	r6
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d0ed      	beq.n	800aa84 <wait_session_status+0x34>
 800aaa8:	a80c      	add	r0, sp, #48	; 0x30
 800aaaa:	2600      	movs	r6, #0
 800aaac:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800aab0:	f7ff f8b6 	bl	8009c20 <ucdr_init_buffer>
 800aab4:	f10d 031e 	add.w	r3, sp, #30
 800aab8:	aa07      	add	r2, sp, #28
 800aaba:	a90c      	add	r1, sp, #48	; 0x30
 800aabc:	4620      	mov	r0, r4
 800aabe:	f88d 601c 	strb.w	r6, [sp, #28]
 800aac2:	f000 fa8f 	bl	800afe4 <uxr_read_session_header>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d0dc      	beq.n	800aa84 <wait_session_status+0x34>
 800aaca:	4631      	mov	r1, r6
 800aacc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800aad0:	f000 fb30 	bl	800b134 <uxr_stream_id_from_raw>
 800aad4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800aad8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800aadc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800aae0:	2f01      	cmp	r7, #1
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800aae8:	d05c      	beq.n	800aba4 <wait_session_status+0x154>
 800aaea:	2f02      	cmp	r7, #2
 800aaec:	d020      	beq.n	800ab30 <wait_session_status+0xe0>
 800aaee:	2f00      	cmp	r7, #0
 800aaf0:	d1c8      	bne.n	800aa84 <wait_session_status+0x34>
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f000 fb1d 	bl	800b134 <uxr_stream_id_from_raw>
 800aafa:	a90c      	add	r1, sp, #48	; 0x30
 800aafc:	4602      	mov	r2, r0
 800aafe:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab00:	4620      	mov	r0, r4
 800ab02:	f7ff fc67 	bl	800a3d4 <read_submessage_list>
 800ab06:	f000 fc6b 	bl	800b3e0 <uxr_millis>
 800ab0a:	1b40      	subs	r0, r0, r5
 800ab0c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dcbe      	bgt.n	800aa92 <wait_session_status+0x42>
 800ab14:	f10b 0b01 	add.w	fp, fp, #1
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	7960      	ldrb	r0, [r4, #5]
 800ab1c:	455b      	cmp	r3, fp
 800ab1e:	d001      	beq.n	800ab24 <wait_session_status+0xd4>
 800ab20:	28ff      	cmp	r0, #255	; 0xff
 800ab22:	d0a3      	beq.n	800aa6c <wait_session_status+0x1c>
 800ab24:	38ff      	subs	r0, #255	; 0xff
 800ab26:	bf18      	it	ne
 800ab28:	2001      	movne	r0, #1
 800ab2a:	b01d      	add	sp, #116	; 0x74
 800ab2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab30:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800ab34:	4631      	mov	r1, r6
 800ab36:	f104 0008 	add.w	r0, r4, #8
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	f000 fbe8 	bl	800b310 <uxr_get_input_reliable_stream>
 800ab40:	4680      	mov	r8, r0
 800ab42:	b348      	cbz	r0, 800ab98 <wait_session_status+0x148>
 800ab44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab46:	a80c      	add	r0, sp, #48	; 0x30
 800ab48:	9205      	str	r2, [sp, #20]
 800ab4a:	f7ff f89b 	bl	8009c84 <ucdr_buffer_remaining>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f10d 001d 	add.w	r0, sp, #29
 800ab54:	9a05      	ldr	r2, [sp, #20]
 800ab56:	9000      	str	r0, [sp, #0]
 800ab58:	4640      	mov	r0, r8
 800ab5a:	9902      	ldr	r1, [sp, #8]
 800ab5c:	f004 f99e 	bl	800ee9c <uxr_receive_reliable_message>
 800ab60:	b1d0      	cbz	r0, 800ab98 <wait_session_status+0x148>
 800ab62:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d03a      	beq.n	800abe0 <wait_session_status+0x190>
 800ab6a:	9f04      	ldr	r7, [sp, #16]
 800ab6c:	e00a      	b.n	800ab84 <wait_session_status+0x134>
 800ab6e:	f04f 0302 	mov.w	r3, #2
 800ab72:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800ab76:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ab7a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800ab7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab80:	f7ff fc28 	bl	800a3d4 <read_submessage_list>
 800ab84:	a914      	add	r1, sp, #80	; 0x50
 800ab86:	2204      	movs	r2, #4
 800ab88:	4640      	mov	r0, r8
 800ab8a:	f004 fa09 	bl	800efa0 <uxr_next_input_reliable_buffer_available>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	a914      	add	r1, sp, #80	; 0x50
 800ab92:	4620      	mov	r0, r4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1ea      	bne.n	800ab6e <wait_session_status+0x11e>
 800ab98:	4632      	mov	r2, r6
 800ab9a:	9904      	ldr	r1, [sp, #16]
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7ff fa95 	bl	800a0cc <write_submessage_acknack.isra.0>
 800aba2:	e76f      	b.n	800aa84 <wait_session_status+0x34>
 800aba4:	4631      	mov	r1, r6
 800aba6:	f104 0008 	add.w	r0, r4, #8
 800abaa:	f000 fba7 	bl	800b2fc <uxr_get_input_best_effort_stream>
 800abae:	2800      	cmp	r0, #0
 800abb0:	f43f af68 	beq.w	800aa84 <wait_session_status+0x34>
 800abb4:	9902      	ldr	r1, [sp, #8]
 800abb6:	f004 f8e7 	bl	800ed88 <uxr_receive_best_effort_message>
 800abba:	2800      	cmp	r0, #0
 800abbc:	f43f af62 	beq.w	800aa84 <wait_session_status+0x34>
 800abc0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800abc4:	a90c      	add	r1, sp, #48	; 0x30
 800abc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abc8:	4620      	mov	r0, r4
 800abca:	f7ff fc03 	bl	800a3d4 <read_submessage_list>
 800abce:	e759      	b.n	800aa84 <wait_session_status+0x34>
 800abd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800abd2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800abd6:	47a0      	blx	r4
 800abd8:	2001      	movs	r0, #1
 800abda:	b01d      	add	sp, #116	; 0x74
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800abe4:	a90c      	add	r1, sp, #48	; 0x30
 800abe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abe8:	4620      	mov	r0, r4
 800abea:	f7ff fbf3 	bl	800a3d4 <read_submessage_list>
 800abee:	e7bc      	b.n	800ab6a <wait_session_status+0x11a>

0800abf0 <uxr_delete_session_retries>:
 800abf0:	b530      	push	{r4, r5, lr}
 800abf2:	b08f      	sub	sp, #60	; 0x3c
 800abf4:	4604      	mov	r4, r0
 800abf6:	460d      	mov	r5, r1
 800abf8:	f000 fa34 	bl	800b064 <uxr_session_header_offset>
 800abfc:	2300      	movs	r3, #0
 800abfe:	2210      	movs	r2, #16
 800ac00:	a902      	add	r1, sp, #8
 800ac02:	9000      	str	r0, [sp, #0]
 800ac04:	a806      	add	r0, sp, #24
 800ac06:	f7fe fff9 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800ac0a:	a906      	add	r1, sp, #24
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 f979 	bl	800af04 <uxr_buffer_delete_session>
 800ac12:	2200      	movs	r2, #0
 800ac14:	9b06      	ldr	r3, [sp, #24]
 800ac16:	4620      	mov	r0, r4
 800ac18:	4611      	mov	r1, r2
 800ac1a:	f000 f9cf 	bl	800afbc <uxr_stamp_session_header>
 800ac1e:	a806      	add	r0, sp, #24
 800ac20:	f7ff f82c 	bl	8009c7c <ucdr_buffer_length>
 800ac24:	462b      	mov	r3, r5
 800ac26:	4602      	mov	r2, r0
 800ac28:	a902      	add	r1, sp, #8
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f7ff ff10 	bl	800aa50 <wait_session_status>
 800ac30:	b118      	cbz	r0, 800ac3a <uxr_delete_session_retries+0x4a>
 800ac32:	7960      	ldrb	r0, [r4, #5]
 800ac34:	fab0 f080 	clz	r0, r0
 800ac38:	0940      	lsrs	r0, r0, #5
 800ac3a:	b00f      	add	sp, #60	; 0x3c
 800ac3c:	bd30      	pop	{r4, r5, pc}
 800ac3e:	bf00      	nop

0800ac40 <uxr_create_session>:
 800ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	f100 0b08 	add.w	fp, r0, #8
 800ac48:	4604      	mov	r4, r0
 800ac4a:	b0ab      	sub	sp, #172	; 0xac
 800ac4c:	4658      	mov	r0, fp
 800ac4e:	465e      	mov	r6, fp
 800ac50:	f000 faa6 	bl	800b1a0 <uxr_reset_stream_storage>
 800ac54:	4620      	mov	r0, r4
 800ac56:	f000 fa05 	bl	800b064 <uxr_session_header_offset>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	221c      	movs	r2, #28
 800ac5e:	a90b      	add	r1, sp, #44	; 0x2c
 800ac60:	9000      	str	r0, [sp, #0]
 800ac62:	a812      	add	r0, sp, #72	; 0x48
 800ac64:	f7fe ffca 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800ac68:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac6a:	a912      	add	r1, sp, #72	; 0x48
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	8a1a      	ldrh	r2, [r3, #16]
 800ac70:	3a04      	subs	r2, #4
 800ac72:	b292      	uxth	r2, r2
 800ac74:	f000 f91c 	bl	800aeb0 <uxr_buffer_create_session>
 800ac78:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f98a 	bl	800af94 <uxr_stamp_create_session_header>
 800ac80:	a812      	add	r0, sp, #72	; 0x48
 800ac82:	f7fe fffb 	bl	8009c7c <ucdr_buffer_length>
 800ac86:	23ff      	movs	r3, #255	; 0xff
 800ac88:	4681      	mov	r9, r0
 800ac8a:	7163      	strb	r3, [r4, #5]
 800ac8c:	230a      	movs	r3, #10
 800ac8e:	9303      	str	r3, [sp, #12]
 800ac90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac92:	464a      	mov	r2, r9
 800ac94:	a90b      	add	r1, sp, #44	; 0x2c
 800ac96:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ac9a:	47a8      	blx	r5
 800ac9c:	f000 fba0 	bl	800b3e0 <uxr_millis>
 800aca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aca4:	4605      	mov	r5, r0
 800aca6:	e009      	b.n	800acbc <uxr_create_session+0x7c>
 800aca8:	f000 fb9a 	bl	800b3e0 <uxr_millis>
 800acac:	1b40      	subs	r0, r0, r5
 800acae:	7962      	ldrb	r2, [r4, #5]
 800acb0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	dd38      	ble.n	800ad2a <uxr_create_session+0xea>
 800acb8:	2aff      	cmp	r2, #255	; 0xff
 800acba:	d13c      	bne.n	800ad36 <uxr_create_session+0xf6>
 800acbc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800acbe:	a907      	add	r1, sp, #28
 800acc0:	6897      	ldr	r7, [r2, #8]
 800acc2:	6810      	ldr	r0, [r2, #0]
 800acc4:	aa08      	add	r2, sp, #32
 800acc6:	47b8      	blx	r7
 800acc8:	2800      	cmp	r0, #0
 800acca:	d0ed      	beq.n	800aca8 <uxr_create_session+0x68>
 800accc:	a81a      	add	r0, sp, #104	; 0x68
 800acce:	2700      	movs	r7, #0
 800acd0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800acd4:	f7fe ffa4 	bl	8009c20 <ucdr_init_buffer>
 800acd8:	f10d 031a 	add.w	r3, sp, #26
 800acdc:	aa06      	add	r2, sp, #24
 800acde:	a91a      	add	r1, sp, #104	; 0x68
 800ace0:	4620      	mov	r0, r4
 800ace2:	f88d 7018 	strb.w	r7, [sp, #24]
 800ace6:	f000 f97d 	bl	800afe4 <uxr_read_session_header>
 800acea:	2800      	cmp	r0, #0
 800acec:	d0dc      	beq.n	800aca8 <uxr_create_session+0x68>
 800acee:	4639      	mov	r1, r7
 800acf0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800acf4:	f000 fa1e 	bl	800b134 <uxr_stream_id_from_raw>
 800acf8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800acfc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800ad00:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800ad04:	2f01      	cmp	r7, #1
 800ad06:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800ad0a:	d053      	beq.n	800adb4 <uxr_create_session+0x174>
 800ad0c:	2f02      	cmp	r7, #2
 800ad0e:	d018      	beq.n	800ad42 <uxr_create_session+0x102>
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	d1c9      	bne.n	800aca8 <uxr_create_session+0x68>
 800ad14:	4639      	mov	r1, r7
 800ad16:	4638      	mov	r0, r7
 800ad18:	f000 fa0c 	bl	800b134 <uxr_stream_id_from_raw>
 800ad1c:	a91a      	add	r1, sp, #104	; 0x68
 800ad1e:	4602      	mov	r2, r0
 800ad20:	900a      	str	r0, [sp, #40]	; 0x28
 800ad22:	4620      	mov	r0, r4
 800ad24:	f7ff fb56 	bl	800a3d4 <read_submessage_list>
 800ad28:	e7be      	b.n	800aca8 <uxr_create_session+0x68>
 800ad2a:	9b03      	ldr	r3, [sp, #12]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	9303      	str	r3, [sp, #12]
 800ad30:	d001      	beq.n	800ad36 <uxr_create_session+0xf6>
 800ad32:	2aff      	cmp	r2, #255	; 0xff
 800ad34:	d0ac      	beq.n	800ac90 <uxr_create_session+0x50>
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	d051      	beq.n	800adde <uxr_create_session+0x19e>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	b02b      	add	sp, #172	; 0xac
 800ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad42:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ad46:	4641      	mov	r1, r8
 800ad48:	4630      	mov	r0, r6
 800ad4a:	9304      	str	r3, [sp, #16]
 800ad4c:	f000 fae0 	bl	800b310 <uxr_get_input_reliable_stream>
 800ad50:	4682      	mov	sl, r0
 800ad52:	b348      	cbz	r0, 800ada8 <uxr_create_session+0x168>
 800ad54:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ad56:	a81a      	add	r0, sp, #104	; 0x68
 800ad58:	9205      	str	r2, [sp, #20]
 800ad5a:	f7fe ff93 	bl	8009c84 <ucdr_buffer_remaining>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f10d 0019 	add.w	r0, sp, #25
 800ad64:	9a05      	ldr	r2, [sp, #20]
 800ad66:	4659      	mov	r1, fp
 800ad68:	9000      	str	r0, [sp, #0]
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	f004 f896 	bl	800ee9c <uxr_receive_reliable_message>
 800ad70:	b1d0      	cbz	r0, 800ada8 <uxr_create_session+0x168>
 800ad72:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d038      	beq.n	800adec <uxr_create_session+0x1ac>
 800ad7a:	9f04      	ldr	r7, [sp, #16]
 800ad7c:	e00a      	b.n	800ad94 <uxr_create_session+0x154>
 800ad7e:	f04f 0302 	mov.w	r3, #2
 800ad82:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800ad86:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800ad8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad90:	f7ff fb20 	bl	800a3d4 <read_submessage_list>
 800ad94:	a922      	add	r1, sp, #136	; 0x88
 800ad96:	2204      	movs	r2, #4
 800ad98:	4650      	mov	r0, sl
 800ad9a:	f004 f901 	bl	800efa0 <uxr_next_input_reliable_buffer_available>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	a922      	add	r1, sp, #136	; 0x88
 800ada2:	4620      	mov	r0, r4
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1ea      	bne.n	800ad7e <uxr_create_session+0x13e>
 800ada8:	4642      	mov	r2, r8
 800adaa:	9904      	ldr	r1, [sp, #16]
 800adac:	4620      	mov	r0, r4
 800adae:	f7ff f98d 	bl	800a0cc <write_submessage_acknack.isra.0>
 800adb2:	e779      	b.n	800aca8 <uxr_create_session+0x68>
 800adb4:	4641      	mov	r1, r8
 800adb6:	4630      	mov	r0, r6
 800adb8:	f000 faa0 	bl	800b2fc <uxr_get_input_best_effort_stream>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f43f af73 	beq.w	800aca8 <uxr_create_session+0x68>
 800adc2:	4659      	mov	r1, fp
 800adc4:	f003 ffe0 	bl	800ed88 <uxr_receive_best_effort_message>
 800adc8:	2800      	cmp	r0, #0
 800adca:	f43f af6d 	beq.w	800aca8 <uxr_create_session+0x68>
 800adce:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800add2:	a91a      	add	r1, sp, #104	; 0x68
 800add4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff fafc 	bl	800a3d4 <read_submessage_list>
 800addc:	e764      	b.n	800aca8 <uxr_create_session+0x68>
 800adde:	4630      	mov	r0, r6
 800ade0:	f000 f9de 	bl	800b1a0 <uxr_reset_stream_storage>
 800ade4:	2001      	movs	r0, #1
 800ade6:	b02b      	add	sp, #172	; 0xac
 800ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adec:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800adf0:	a91a      	add	r1, sp, #104	; 0x68
 800adf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adf4:	4620      	mov	r0, r4
 800adf6:	f7ff faed 	bl	800a3d4 <read_submessage_list>
 800adfa:	e7be      	b.n	800ad7a <uxr_create_session+0x13a>

0800adfc <uxr_prepare_stream_to_write_submessage>:
 800adfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	4604      	mov	r4, r0
 800ae04:	4610      	mov	r0, r2
 800ae06:	4615      	mov	r5, r2
 800ae08:	461e      	mov	r6, r3
 800ae0a:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800ae0e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800ae12:	f105 0904 	add.w	r9, r5, #4
 800ae16:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800ae1a:	9101      	str	r1, [sp, #4]
 800ae1c:	f000 fada 	bl	800b3d4 <uxr_submessage_padding>
 800ae20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae24:	4481      	add	r9, r0
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d01d      	beq.n	800ae66 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d116      	bne.n	800ae5c <uxr_prepare_stream_to_write_submessage+0x60>
 800ae2e:	f104 0008 	add.w	r0, r4, #8
 800ae32:	4651      	mov	r1, sl
 800ae34:	f000 fa56 	bl	800b2e4 <uxr_get_output_reliable_stream>
 800ae38:	4604      	mov	r4, r0
 800ae3a:	b158      	cbz	r0, 800ae54 <uxr_prepare_stream_to_write_submessage+0x58>
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	4632      	mov	r2, r6
 800ae40:	f004 fa74 	bl	800f32c <uxr_prepare_reliable_buffer_to_write>
 800ae44:	4604      	mov	r4, r0
 800ae46:	b12c      	cbz	r4, 800ae54 <uxr_prepare_stream_to_write_submessage+0x58>
 800ae48:	4643      	mov	r3, r8
 800ae4a:	b2aa      	uxth	r2, r5
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f000 fa80 	bl	800b354 <uxr_buffer_submessage_header>
 800ae54:	4620      	mov	r0, r4
 800ae56:	b002      	add	sp, #8
 800ae58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5c:	2400      	movs	r4, #0
 800ae5e:	4620      	mov	r0, r4
 800ae60:	b002      	add	sp, #8
 800ae62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae66:	f104 0008 	add.w	r0, r4, #8
 800ae6a:	4651      	mov	r1, sl
 800ae6c:	f000 fa32 	bl	800b2d4 <uxr_get_output_best_effort_stream>
 800ae70:	4604      	mov	r4, r0
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d0ee      	beq.n	800ae54 <uxr_prepare_stream_to_write_submessage+0x58>
 800ae76:	4649      	mov	r1, r9
 800ae78:	4632      	mov	r2, r6
 800ae7a:	f004 f981 	bl	800f180 <uxr_prepare_best_effort_buffer_to_write>
 800ae7e:	4604      	mov	r4, r0
 800ae80:	e7e1      	b.n	800ae46 <uxr_prepare_stream_to_write_submessage+0x4a>
 800ae82:	bf00      	nop

0800ae84 <uxr_init_session_info>:
 800ae84:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800ae88:	23ff      	movs	r3, #255	; 0xff
 800ae8a:	7102      	strb	r2, [r0, #4]
 800ae8c:	f880 c001 	strb.w	ip, [r0, #1]
 800ae90:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ae94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800ae98:	7001      	strb	r1, [r0, #0]
 800ae9a:	f880 c002 	strb.w	ip, [r0, #2]
 800ae9e:	7143      	strb	r3, [r0, #5]
 800aea0:	70c2      	strb	r2, [r0, #3]
 800aea2:	b500      	push	{lr}
 800aea4:	f04f 0e09 	mov.w	lr, #9
 800aea8:	f8a0 e006 	strh.w	lr, [r0, #6]
 800aeac:	f85d fb04 	ldr.w	pc, [sp], #4

0800aeb0 <uxr_buffer_create_session>:
 800aeb0:	b530      	push	{r4, r5, lr}
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	b089      	sub	sp, #36	; 0x24
 800aeb6:	4d12      	ldr	r5, [pc, #72]	; (800af00 <uxr_buffer_create_session+0x50>)
 800aeb8:	460c      	mov	r4, r1
 800aeba:	9307      	str	r3, [sp, #28]
 800aebc:	4619      	mov	r1, r3
 800aebe:	f8ad 201c 	strh.w	r2, [sp, #28]
 800aec2:	2201      	movs	r2, #1
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	80c2      	strh	r2, [r0, #6]
 800aec8:	f88d 2004 	strb.w	r2, [sp, #4]
 800aecc:	682a      	ldr	r2, [r5, #0]
 800aece:	9303      	str	r3, [sp, #12]
 800aed0:	9200      	str	r2, [sp, #0]
 800aed2:	88aa      	ldrh	r2, [r5, #4]
 800aed4:	9306      	str	r3, [sp, #24]
 800aed6:	f8ad 2006 	strh.w	r2, [sp, #6]
 800aeda:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800aede:	9202      	str	r2, [sp, #8]
 800aee0:	7802      	ldrb	r2, [r0, #0]
 800aee2:	4620      	mov	r0, r4
 800aee4:	f88d 200c 	strb.w	r2, [sp, #12]
 800aee8:	2210      	movs	r2, #16
 800aeea:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800aeee:	f000 fa31 	bl	800b354 <uxr_buffer_submessage_header>
 800aef2:	4669      	mov	r1, sp
 800aef4:	4620      	mov	r0, r4
 800aef6:	f001 f983 	bl	800c200 <uxr_serialize_CREATE_CLIENT_Payload>
 800aefa:	b009      	add	sp, #36	; 0x24
 800aefc:	bd30      	pop	{r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	080128bc 	.word	0x080128bc

0800af04 <uxr_buffer_delete_session>:
 800af04:	4a0c      	ldr	r2, [pc, #48]	; (800af38 <uxr_buffer_delete_session+0x34>)
 800af06:	2302      	movs	r3, #2
 800af08:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800af0c:	b510      	push	{r4, lr}
 800af0e:	460c      	mov	r4, r1
 800af10:	b082      	sub	sp, #8
 800af12:	8911      	ldrh	r1, [r2, #8]
 800af14:	2204      	movs	r2, #4
 800af16:	80c3      	strh	r3, [r0, #6]
 800af18:	2300      	movs	r3, #0
 800af1a:	f8ad 1006 	strh.w	r1, [sp, #6]
 800af1e:	4620      	mov	r0, r4
 800af20:	2103      	movs	r1, #3
 800af22:	f8ad c004 	strh.w	ip, [sp, #4]
 800af26:	f000 fa15 	bl	800b354 <uxr_buffer_submessage_header>
 800af2a:	a901      	add	r1, sp, #4
 800af2c:	4620      	mov	r0, r4
 800af2e:	f001 fa0f 	bl	800c350 <uxr_serialize_DELETE_Payload>
 800af32:	b002      	add	sp, #8
 800af34:	bd10      	pop	{r4, pc}
 800af36:	bf00      	nop
 800af38:	080128bc 	.word	0x080128bc

0800af3c <uxr_read_create_session_status>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	460b      	mov	r3, r1
 800af40:	b088      	sub	sp, #32
 800af42:	4604      	mov	r4, r0
 800af44:	a901      	add	r1, sp, #4
 800af46:	4618      	mov	r0, r3
 800af48:	f001 fa12 	bl	800c370 <uxr_deserialize_STATUS_AGENT_Payload>
 800af4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800af50:	7163      	strb	r3, [r4, #5]
 800af52:	b008      	add	sp, #32
 800af54:	bd10      	pop	{r4, pc}
 800af56:	bf00      	nop

0800af58 <uxr_read_delete_session_status>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	4604      	mov	r4, r0
 800af5e:	4608      	mov	r0, r1
 800af60:	a902      	add	r1, sp, #8
 800af62:	f001 fa35 	bl	800c3d0 <uxr_deserialize_STATUS_Payload>
 800af66:	88e3      	ldrh	r3, [r4, #6]
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d001      	beq.n	800af70 <uxr_read_delete_session_status+0x18>
 800af6c:	b004      	add	sp, #16
 800af6e:	bd10      	pop	{r4, pc}
 800af70:	f10d 000a 	add.w	r0, sp, #10
 800af74:	f7ff f830 	bl	8009fd8 <uxr_object_id_from_raw>
 800af78:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800af7c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800af80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800af84:	b29b      	uxth	r3, r3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d1f0      	bne.n	800af6c <uxr_read_delete_session_status+0x14>
 800af8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800af8e:	7163      	strb	r3, [r4, #5]
 800af90:	e7ec      	b.n	800af6c <uxr_read_delete_session_status+0x14>
 800af92:	bf00      	nop

0800af94 <uxr_stamp_create_session_header>:
 800af94:	b510      	push	{r4, lr}
 800af96:	2208      	movs	r2, #8
 800af98:	b08a      	sub	sp, #40	; 0x28
 800af9a:	4604      	mov	r4, r0
 800af9c:	eb0d 0002 	add.w	r0, sp, r2
 800afa0:	f7fe fe3e 	bl	8009c20 <ucdr_init_buffer>
 800afa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa8:	2300      	movs	r3, #0
 800afaa:	a802      	add	r0, sp, #8
 800afac:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800afb0:	9400      	str	r4, [sp, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	f000 fbca 	bl	800b74c <uxr_serialize_message_header>
 800afb8:	b00a      	add	sp, #40	; 0x28
 800afba:	bd10      	pop	{r4, pc}

0800afbc <uxr_stamp_session_header>:
 800afbc:	b530      	push	{r4, r5, lr}
 800afbe:	b08d      	sub	sp, #52	; 0x34
 800afc0:	4604      	mov	r4, r0
 800afc2:	460d      	mov	r5, r1
 800afc4:	4619      	mov	r1, r3
 800afc6:	a804      	add	r0, sp, #16
 800afc8:	9203      	str	r2, [sp, #12]
 800afca:	2208      	movs	r2, #8
 800afcc:	f7fe fe28 	bl	8009c20 <ucdr_init_buffer>
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	462a      	mov	r2, r5
 800afd8:	a804      	add	r0, sp, #16
 800afda:	9400      	str	r4, [sp, #0]
 800afdc:	f000 fbb6 	bl	800b74c <uxr_serialize_message_header>
 800afe0:	b00d      	add	sp, #52	; 0x34
 800afe2:	bd30      	pop	{r4, r5, pc}

0800afe4 <uxr_read_session_header>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	4607      	mov	r7, r0
 800afea:	b084      	sub	sp, #16
 800afec:	4608      	mov	r0, r1
 800afee:	460c      	mov	r4, r1
 800aff0:	4615      	mov	r5, r2
 800aff2:	461e      	mov	r6, r3
 800aff4:	f7fe fe46 	bl	8009c84 <ucdr_buffer_remaining>
 800aff8:	2808      	cmp	r0, #8
 800affa:	d803      	bhi.n	800b004 <uxr_read_session_header+0x20>
 800affc:	2000      	movs	r0, #0
 800affe:	b004      	add	sp, #16
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b004:	f10d 080c 	add.w	r8, sp, #12
 800b008:	4633      	mov	r3, r6
 800b00a:	462a      	mov	r2, r5
 800b00c:	4620      	mov	r0, r4
 800b00e:	f10d 010b 	add.w	r1, sp, #11
 800b012:	f8cd 8000 	str.w	r8, [sp]
 800b016:	f000 fbb7 	bl	800b788 <uxr_deserialize_message_header>
 800b01a:	783a      	ldrb	r2, [r7, #0]
 800b01c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b020:	4293      	cmp	r3, r2
 800b022:	d1eb      	bne.n	800affc <uxr_read_session_header+0x18>
 800b024:	061b      	lsls	r3, r3, #24
 800b026:	d41b      	bmi.n	800b060 <uxr_read_session_header+0x7c>
 800b028:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b02c:	787b      	ldrb	r3, [r7, #1]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d003      	beq.n	800b03a <uxr_read_session_header+0x56>
 800b032:	2001      	movs	r0, #1
 800b034:	f080 0001 	eor.w	r0, r0, #1
 800b038:	e7e1      	b.n	800affe <uxr_read_session_header+0x1a>
 800b03a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800b03e:	1cb8      	adds	r0, r7, #2
 800b040:	78bb      	ldrb	r3, [r7, #2]
 800b042:	429a      	cmp	r2, r3
 800b044:	d1f5      	bne.n	800b032 <uxr_read_session_header+0x4e>
 800b046:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b04a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b04e:	429a      	cmp	r2, r3
 800b050:	d1ef      	bne.n	800b032 <uxr_read_session_header+0x4e>
 800b052:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b056:	7843      	ldrb	r3, [r0, #1]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d1ea      	bne.n	800b032 <uxr_read_session_header+0x4e>
 800b05c:	2000      	movs	r0, #0
 800b05e:	e7e9      	b.n	800b034 <uxr_read_session_header+0x50>
 800b060:	2001      	movs	r0, #1
 800b062:	e7cc      	b.n	800affe <uxr_read_session_header+0x1a>

0800b064 <uxr_session_header_offset>:
 800b064:	f990 3000 	ldrsb.w	r3, [r0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	bfac      	ite	ge
 800b06c:	2008      	movge	r0, #8
 800b06e:	2004      	movlt	r0, #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop

0800b074 <uxr_init_base_object_request>:
 800b074:	b510      	push	{r4, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800b07c:	9101      	str	r1, [sp, #4]
 800b07e:	88c3      	ldrh	r3, [r0, #6]
 800b080:	f1a3 010a 	sub.w	r1, r3, #10
 800b084:	b289      	uxth	r1, r1
 800b086:	42a1      	cmp	r1, r4
 800b088:	d80f      	bhi.n	800b0aa <uxr_init_base_object_request+0x36>
 800b08a:	3301      	adds	r3, #1
 800b08c:	b29c      	uxth	r4, r3
 800b08e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800b092:	b2db      	uxtb	r3, r3
 800b094:	80c4      	strh	r4, [r0, #6]
 800b096:	1c91      	adds	r1, r2, #2
 800b098:	9801      	ldr	r0, [sp, #4]
 800b09a:	f882 c000 	strb.w	ip, [r2]
 800b09e:	7053      	strb	r3, [r2, #1]
 800b0a0:	f7fe ffae 	bl	800a000 <uxr_object_id_to_raw>
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	b002      	add	sp, #8
 800b0a8:	bd10      	pop	{r4, pc}
 800b0aa:	230a      	movs	r3, #10
 800b0ac:	f04f 0c00 	mov.w	ip, #0
 800b0b0:	461c      	mov	r4, r3
 800b0b2:	e7ef      	b.n	800b094 <uxr_init_base_object_request+0x20>

0800b0b4 <uxr_parse_base_object_request>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	3002      	adds	r0, #2
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	4616      	mov	r6, r2
 800b0be:	f7fe ff8b 	bl	8009fd8 <uxr_object_id_from_raw>
 800b0c2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800b0c6:	8028      	strh	r0, [r5, #0]
 800b0c8:	806b      	strh	r3, [r5, #2]
 800b0ca:	7822      	ldrb	r2, [r4, #0]
 800b0cc:	7863      	ldrb	r3, [r4, #1]
 800b0ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b0d2:	8033      	strh	r3, [r6, #0]
 800b0d4:	bd70      	pop	{r4, r5, r6, pc}
 800b0d6:	bf00      	nop

0800b0d8 <uxr_stream_id>:
 800b0d8:	2901      	cmp	r1, #1
 800b0da:	4684      	mov	ip, r0
 800b0dc:	b500      	push	{lr}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	d01f      	beq.n	800b122 <uxr_stream_id+0x4a>
 800b0e2:	2902      	cmp	r1, #2
 800b0e4:	f04f 0e00 	mov.w	lr, #0
 800b0e8:	d020      	beq.n	800b12c <uxr_stream_id+0x54>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f36e 0307 	bfi	r3, lr, #0, #8
 800b0f2:	f36c 230f 	bfi	r3, ip, #8, #8
 800b0f6:	f361 4317 	bfi	r3, r1, #16, #8
 800b0fa:	f362 631f 	bfi	r3, r2, #24, #8
 800b0fe:	fa5f fc83 	uxtb.w	ip, r3
 800b102:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b106:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b10a:	0e1b      	lsrs	r3, r3, #24
 800b10c:	f36c 0007 	bfi	r0, ip, #0, #8
 800b110:	f361 200f 	bfi	r0, r1, #8, #8
 800b114:	f362 4017 	bfi	r0, r2, #16, #8
 800b118:	f363 601f 	bfi	r0, r3, #24, #8
 800b11c:	b003      	add	sp, #12
 800b11e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b122:	f100 0e01 	add.w	lr, r0, #1
 800b126:	fa5f fe8e 	uxtb.w	lr, lr
 800b12a:	e7de      	b.n	800b0ea <uxr_stream_id+0x12>
 800b12c:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 800b130:	e7db      	b.n	800b0ea <uxr_stream_id+0x12>
 800b132:	bf00      	nop

0800b134 <uxr_stream_id_from_raw>:
 800b134:	b082      	sub	sp, #8
 800b136:	b130      	cbz	r0, 800b146 <uxr_stream_id_from_raw+0x12>
 800b138:	0603      	lsls	r3, r0, #24
 800b13a:	d421      	bmi.n	800b180 <uxr_stream_id_from_raw+0x4c>
 800b13c:	1e42      	subs	r2, r0, #1
 800b13e:	f04f 0c01 	mov.w	ip, #1
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	e001      	b.n	800b14a <uxr_stream_id_from_raw+0x16>
 800b146:	4684      	mov	ip, r0
 800b148:	4602      	mov	r2, r0
 800b14a:	2300      	movs	r3, #0
 800b14c:	f360 0307 	bfi	r3, r0, #0, #8
 800b150:	2000      	movs	r0, #0
 800b152:	f362 230f 	bfi	r3, r2, #8, #8
 800b156:	f36c 4317 	bfi	r3, ip, #16, #8
 800b15a:	f361 631f 	bfi	r3, r1, #24, #8
 800b15e:	fa5f fc83 	uxtb.w	ip, r3
 800b162:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b166:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b16a:	0e1b      	lsrs	r3, r3, #24
 800b16c:	f36c 0007 	bfi	r0, ip, #0, #8
 800b170:	f361 200f 	bfi	r0, r1, #8, #8
 800b174:	f362 4017 	bfi	r0, r2, #16, #8
 800b178:	f363 601f 	bfi	r0, r3, #24, #8
 800b17c:	b002      	add	sp, #8
 800b17e:	4770      	bx	lr
 800b180:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800b184:	f04f 0c02 	mov.w	ip, #2
 800b188:	e7df      	b.n	800b14a <uxr_stream_id_from_raw+0x16>
 800b18a:	bf00      	nop

0800b18c <uxr_init_stream_storage>:
 800b18c:	2300      	movs	r3, #0
 800b18e:	7403      	strb	r3, [r0, #16]
 800b190:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800b194:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800b198:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop

0800b1a0 <uxr_reset_stream_storage>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	7c03      	ldrb	r3, [r0, #16]
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	b14b      	cbz	r3, 800b1bc <uxr_reset_stream_storage+0x1c>
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	2500      	movs	r5, #0
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	3501      	adds	r5, #1
 800b1b0:	f003 ffe0 	bl	800f174 <uxr_reset_output_best_effort_stream>
 800b1b4:	7c23      	ldrb	r3, [r4, #16]
 800b1b6:	3610      	adds	r6, #16
 800b1b8:	42ab      	cmp	r3, r5
 800b1ba:	d8f7      	bhi.n	800b1ac <uxr_reset_stream_storage+0xc>
 800b1bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b1c0:	b15b      	cbz	r3, 800b1da <uxr_reset_stream_storage+0x3a>
 800b1c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b1c6:	2500      	movs	r5, #0
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	3501      	adds	r5, #1
 800b1cc:	f003 fdd8 	bl	800ed80 <uxr_reset_input_best_effort_stream>
 800b1d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b1d4:	3602      	adds	r6, #2
 800b1d6:	42ab      	cmp	r3, r5
 800b1d8:	d8f6      	bhi.n	800b1c8 <uxr_reset_stream_storage+0x28>
 800b1da:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b1de:	b15b      	cbz	r3, 800b1f8 <uxr_reset_stream_storage+0x58>
 800b1e0:	f104 0618 	add.w	r6, r4, #24
 800b1e4:	2500      	movs	r5, #0
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	3501      	adds	r5, #1
 800b1ea:	f004 f871 	bl	800f2d0 <uxr_reset_output_reliable_stream>
 800b1ee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b1f2:	3628      	adds	r6, #40	; 0x28
 800b1f4:	42ab      	cmp	r3, r5
 800b1f6:	d8f6      	bhi.n	800b1e6 <uxr_reset_stream_storage+0x46>
 800b1f8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b1fc:	b15b      	cbz	r3, 800b216 <uxr_reset_stream_storage+0x76>
 800b1fe:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800b202:	2500      	movs	r5, #0
 800b204:	4630      	mov	r0, r6
 800b206:	3501      	adds	r5, #1
 800b208:	f003 fe26 	bl	800ee58 <uxr_reset_input_reliable_stream>
 800b20c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b210:	3618      	adds	r6, #24
 800b212:	42ab      	cmp	r3, r5
 800b214:	d8f6      	bhi.n	800b204 <uxr_reset_stream_storage+0x64>
 800b216:	bd70      	pop	{r4, r5, r6, pc}

0800b218 <uxr_add_output_best_effort_buffer>:
 800b218:	b510      	push	{r4, lr}
 800b21a:	7c04      	ldrb	r4, [r0, #16]
 800b21c:	b082      	sub	sp, #8
 800b21e:	f104 0c01 	add.w	ip, r4, #1
 800b222:	f880 c010 	strb.w	ip, [r0, #16]
 800b226:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800b22a:	f003 ff99 	bl	800f160 <uxr_init_output_best_effort_stream>
 800b22e:	2201      	movs	r2, #1
 800b230:	4620      	mov	r0, r4
 800b232:	4611      	mov	r1, r2
 800b234:	b002      	add	sp, #8
 800b236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b23a:	f7ff bf4d 	b.w	800b0d8 <uxr_stream_id>
 800b23e:	bf00      	nop

0800b240 <uxr_add_output_reliable_buffer>:
 800b240:	b510      	push	{r4, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	4684      	mov	ip, r0
 800b246:	2028      	movs	r0, #40	; 0x28
 800b248:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800b24c:	9400      	str	r4, [sp, #0]
 800b24e:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800b252:	fb00 c004 	mla	r0, r0, r4, ip
 800b256:	f104 0e01 	add.w	lr, r4, #1
 800b25a:	3018      	adds	r0, #24
 800b25c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800b260:	f003 fffe 	bl	800f260 <uxr_init_output_reliable_stream>
 800b264:	2201      	movs	r2, #1
 800b266:	2102      	movs	r1, #2
 800b268:	4620      	mov	r0, r4
 800b26a:	b004      	add	sp, #16
 800b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b270:	f7ff bf32 	b.w	800b0d8 <uxr_stream_id>

0800b274 <uxr_add_input_best_effort_buffer>:
 800b274:	b510      	push	{r4, lr}
 800b276:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800b27a:	b082      	sub	sp, #8
 800b27c:	1c62      	adds	r2, r4, #1
 800b27e:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800b282:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800b286:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800b28a:	f003 fd75 	bl	800ed78 <uxr_init_input_best_effort_stream>
 800b28e:	2200      	movs	r2, #0
 800b290:	2101      	movs	r1, #1
 800b292:	4620      	mov	r0, r4
 800b294:	b002      	add	sp, #8
 800b296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b29a:	f7ff bf1d 	b.w	800b0d8 <uxr_stream_id>
 800b29e:	bf00      	nop

0800b2a0 <uxr_add_input_reliable_buffer>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	4684      	mov	ip, r0
 800b2a6:	2018      	movs	r0, #24
 800b2a8:	9c06      	ldr	r4, [sp, #24]
 800b2aa:	9400      	str	r4, [sp, #0]
 800b2ac:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800b2b0:	fb00 c004 	mla	r0, r0, r4, ip
 800b2b4:	f104 0e01 	add.w	lr, r4, #1
 800b2b8:	3048      	adds	r0, #72	; 0x48
 800b2ba:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800b2be:	f003 fda5 	bl	800ee0c <uxr_init_input_reliable_stream>
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2102      	movs	r1, #2
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	b004      	add	sp, #16
 800b2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ce:	f7ff bf03 	b.w	800b0d8 <uxr_stream_id>
 800b2d2:	bf00      	nop

0800b2d4 <uxr_get_output_best_effort_stream>:
 800b2d4:	7c03      	ldrb	r3, [r0, #16]
 800b2d6:	428b      	cmp	r3, r1
 800b2d8:	bf8c      	ite	hi
 800b2da:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800b2de:	2000      	movls	r0, #0
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop

0800b2e4 <uxr_get_output_reliable_stream>:
 800b2e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b2e8:	428b      	cmp	r3, r1
 800b2ea:	d904      	bls.n	800b2f6 <uxr_get_output_reliable_stream+0x12>
 800b2ec:	2328      	movs	r3, #40	; 0x28
 800b2ee:	fb03 0001 	mla	r0, r3, r1, r0
 800b2f2:	3018      	adds	r0, #24
 800b2f4:	4770      	bx	lr
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop

0800b2fc <uxr_get_input_best_effort_stream>:
 800b2fc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b300:	428b      	cmp	r3, r1
 800b302:	d903      	bls.n	800b30c <uxr_get_input_best_effort_stream+0x10>
 800b304:	3121      	adds	r1, #33	; 0x21
 800b306:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b30a:	4770      	bx	lr
 800b30c:	2000      	movs	r0, #0
 800b30e:	4770      	bx	lr

0800b310 <uxr_get_input_reliable_stream>:
 800b310:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800b314:	428b      	cmp	r3, r1
 800b316:	d904      	bls.n	800b322 <uxr_get_input_reliable_stream+0x12>
 800b318:	2318      	movs	r3, #24
 800b31a:	fb03 0001 	mla	r0, r3, r1, r0
 800b31e:	3048      	adds	r0, #72	; 0x48
 800b320:	4770      	bx	lr
 800b322:	2000      	movs	r0, #0
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop

0800b328 <uxr_output_streams_confirmed>:
 800b328:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b32c:	b183      	cbz	r3, 800b350 <uxr_output_streams_confirmed+0x28>
 800b32e:	b570      	push	{r4, r5, r6, lr}
 800b330:	4606      	mov	r6, r0
 800b332:	f100 0518 	add.w	r5, r0, #24
 800b336:	2400      	movs	r4, #0
 800b338:	e000      	b.n	800b33c <uxr_output_streams_confirmed+0x14>
 800b33a:	b140      	cbz	r0, 800b34e <uxr_output_streams_confirmed+0x26>
 800b33c:	4628      	mov	r0, r5
 800b33e:	3401      	adds	r4, #1
 800b340:	f004 fa3a 	bl	800f7b8 <uxr_is_output_up_to_date>
 800b344:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800b348:	3528      	adds	r5, #40	; 0x28
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	d8f5      	bhi.n	800b33a <uxr_output_streams_confirmed+0x12>
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	2001      	movs	r0, #1
 800b352:	4770      	bx	lr

0800b354 <uxr_buffer_submessage_header>:
 800b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b356:	460e      	mov	r6, r1
 800b358:	2104      	movs	r1, #4
 800b35a:	4604      	mov	r4, r0
 800b35c:	4615      	mov	r5, r2
 800b35e:	461f      	mov	r7, r3
 800b360:	f7fe fc7a 	bl	8009c58 <ucdr_align_to>
 800b364:	2301      	movs	r3, #1
 800b366:	4631      	mov	r1, r6
 800b368:	4620      	mov	r0, r4
 800b36a:	ea47 0203 	orr.w	r2, r7, r3
 800b36e:	7523      	strb	r3, [r4, #20]
 800b370:	462b      	mov	r3, r5
 800b372:	f000 fa29 	bl	800b7c8 <uxr_serialize_submessage_header>
 800b376:	4620      	mov	r0, r4
 800b378:	f7fe fc84 	bl	8009c84 <ucdr_buffer_remaining>
 800b37c:	42a8      	cmp	r0, r5
 800b37e:	bf34      	ite	cc
 800b380:	2000      	movcc	r0, #0
 800b382:	2001      	movcs	r0, #1
 800b384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b386:	bf00      	nop

0800b388 <uxr_read_submessage_header>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	4604      	mov	r4, r0
 800b38e:	460d      	mov	r5, r1
 800b390:	2104      	movs	r1, #4
 800b392:	4616      	mov	r6, r2
 800b394:	4698      	mov	r8, r3
 800b396:	f7fe fc5f 	bl	8009c58 <ucdr_align_to>
 800b39a:	4620      	mov	r0, r4
 800b39c:	f7fe fc72 	bl	8009c84 <ucdr_buffer_remaining>
 800b3a0:	2803      	cmp	r0, #3
 800b3a2:	bf8c      	ite	hi
 800b3a4:	2701      	movhi	r7, #1
 800b3a6:	2700      	movls	r7, #0
 800b3a8:	d802      	bhi.n	800b3b0 <uxr_read_submessage_header+0x28>
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b0:	4633      	mov	r3, r6
 800b3b2:	4642      	mov	r2, r8
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	f000 fa1a 	bl	800b7f0 <uxr_deserialize_submessage_header>
 800b3bc:	f898 3000 	ldrb.w	r3, [r8]
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f003 0201 	and.w	r2, r3, #1
 800b3c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b3ca:	f888 3000 	strb.w	r3, [r8]
 800b3ce:	7522      	strb	r2, [r4, #20]
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3d4 <uxr_submessage_padding>:
 800b3d4:	f010 0003 	ands.w	r0, r0, #3
 800b3d8:	bf18      	it	ne
 800b3da:	f1c0 0004 	rsbne	r0, r0, #4
 800b3de:	4770      	bx	lr

0800b3e0 <uxr_millis>:
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	2001      	movs	r0, #1
 800b3e6:	4669      	mov	r1, sp
 800b3e8:	f7f5 fc9e 	bl	8000d28 <clock_gettime>
 800b3ec:	4908      	ldr	r1, [pc, #32]	; (800b410 <uxr_millis+0x30>)
 800b3ee:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800b3f2:	fba0 0301 	umull	r0, r3, r0, r1
 800b3f6:	1900      	adds	r0, r0, r4
 800b3f8:	fb01 3102 	mla	r1, r1, r2, r3
 800b3fc:	4a05      	ldr	r2, [pc, #20]	; (800b414 <uxr_millis+0x34>)
 800b3fe:	f04f 0300 	mov.w	r3, #0
 800b402:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b406:	f7f4 ff7d 	bl	8000304 <__aeabi_ldivmod>
 800b40a:	b004      	add	sp, #16
 800b40c:	bd10      	pop	{r4, pc}
 800b40e:	bf00      	nop
 800b410:	3b9aca00 	.word	0x3b9aca00
 800b414:	000f4240 	.word	0x000f4240

0800b418 <uxr_nanos>:
 800b418:	b510      	push	{r4, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	2001      	movs	r0, #1
 800b41e:	4669      	mov	r1, sp
 800b420:	f7f5 fc82 	bl	8000d28 <clock_gettime>
 800b424:	4a06      	ldr	r2, [pc, #24]	; (800b440 <uxr_nanos+0x28>)
 800b426:	9800      	ldr	r0, [sp, #0]
 800b428:	9902      	ldr	r1, [sp, #8]
 800b42a:	fba0 0302 	umull	r0, r3, r0, r2
 800b42e:	9c01      	ldr	r4, [sp, #4]
 800b430:	1840      	adds	r0, r0, r1
 800b432:	fb02 3304 	mla	r3, r2, r4, r3
 800b436:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800b43a:	b004      	add	sp, #16
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	3b9aca00 	.word	0x3b9aca00

0800b444 <on_full_output_buffer_fragmented>:
 800b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b448:	460c      	mov	r4, r1
 800b44a:	b08a      	sub	sp, #40	; 0x28
 800b44c:	4606      	mov	r6, r0
 800b44e:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800b452:	f104 0008 	add.w	r0, r4, #8
 800b456:	f7ff ff45 	bl	800b2e4 <uxr_get_output_reliable_stream>
 800b45a:	4605      	mov	r5, r0
 800b45c:	f004 f9b6 	bl	800f7cc <get_available_free_slots>
 800b460:	b968      	cbnz	r0, 800b47e <on_full_output_buffer_fragmented+0x3a>
 800b462:	4620      	mov	r0, r4
 800b464:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800b468:	4798      	blx	r3
 800b46a:	b918      	cbnz	r0, 800b474 <on_full_output_buffer_fragmented+0x30>
 800b46c:	2001      	movs	r0, #1
 800b46e:	b00a      	add	sp, #40	; 0x28
 800b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b474:	4628      	mov	r0, r5
 800b476:	f004 f9a9 	bl	800f7cc <get_available_free_slots>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d0f6      	beq.n	800b46c <on_full_output_buffer_fragmented+0x28>
 800b47e:	8929      	ldrh	r1, [r5, #8]
 800b480:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800b484:	89eb      	ldrh	r3, [r5, #14]
 800b486:	7b28      	ldrb	r0, [r5, #12]
 800b488:	686f      	ldr	r7, [r5, #4]
 800b48a:	1a12      	subs	r2, r2, r0
 800b48c:	fbb3 f0f1 	udiv	r0, r3, r1
 800b490:	fbb7 f7f1 	udiv	r7, r7, r1
 800b494:	fb01 3110 	mls	r1, r1, r0, r3
 800b498:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800b49c:	b289      	uxth	r1, r1
 800b49e:	fb07 f101 	mul.w	r1, r7, r1
 800b4a2:	3f04      	subs	r7, #4
 800b4a4:	443a      	add	r2, r7
 800b4a6:	3104      	adds	r1, #4
 800b4a8:	fa1f f882 	uxth.w	r8, r2
 800b4ac:	463a      	mov	r2, r7
 800b4ae:	eba3 0308 	sub.w	r3, r3, r8
 800b4b2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800b4b6:	682b      	ldr	r3, [r5, #0]
 800b4b8:	4419      	add	r1, r3
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b4c0:	9000      	str	r0, [sp, #0]
 800b4c2:	a802      	add	r0, sp, #8
 800b4c4:	f7fe fb9a 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800b4c8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b4cc:	f102 0308 	add.w	r3, r2, #8
 800b4d0:	42bb      	cmp	r3, r7
 800b4d2:	d927      	bls.n	800b524 <on_full_output_buffer_fragmented+0xe0>
 800b4d4:	4642      	mov	r2, r8
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	210d      	movs	r1, #13
 800b4da:	a802      	add	r0, sp, #8
 800b4dc:	f7ff ff3a 	bl	800b354 <uxr_buffer_submessage_header>
 800b4e0:	8929      	ldrh	r1, [r5, #8]
 800b4e2:	89eb      	ldrh	r3, [r5, #14]
 800b4e4:	686a      	ldr	r2, [r5, #4]
 800b4e6:	fbb3 f0f1 	udiv	r0, r3, r1
 800b4ea:	fbb2 f2f1 	udiv	r2, r2, r1
 800b4ee:	fb01 3310 	mls	r3, r1, r0, r3
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	fb02 f303 	mul.w	r3, r2, r3
 800b4f8:	682a      	ldr	r2, [r5, #0]
 800b4fa:	50d7      	str	r7, [r2, r3]
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	89e8      	ldrh	r0, [r5, #14]
 800b500:	f004 fa7c 	bl	800f9fc <uxr_seq_num_add>
 800b504:	9904      	ldr	r1, [sp, #16]
 800b506:	9a03      	ldr	r2, [sp, #12]
 800b508:	81e8      	strh	r0, [r5, #14]
 800b50a:	4630      	mov	r0, r6
 800b50c:	1a52      	subs	r2, r2, r1
 800b50e:	f7fe fb87 	bl	8009c20 <ucdr_init_buffer>
 800b512:	4630      	mov	r0, r6
 800b514:	4622      	mov	r2, r4
 800b516:	490f      	ldr	r1, [pc, #60]	; (800b554 <on_full_output_buffer_fragmented+0x110>)
 800b518:	f7fe fb56 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800b51c:	2000      	movs	r0, #0
 800b51e:	b00a      	add	sp, #40	; 0x28
 800b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b524:	b292      	uxth	r2, r2
 800b526:	2302      	movs	r3, #2
 800b528:	210d      	movs	r1, #13
 800b52a:	a802      	add	r0, sp, #8
 800b52c:	f7ff ff12 	bl	800b354 <uxr_buffer_submessage_header>
 800b530:	8928      	ldrh	r0, [r5, #8]
 800b532:	89eb      	ldrh	r3, [r5, #14]
 800b534:	6869      	ldr	r1, [r5, #4]
 800b536:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b53a:	fbb3 f7f0 	udiv	r7, r3, r0
 800b53e:	fbb1 f1f0 	udiv	r1, r1, r0
 800b542:	fb00 3317 	mls	r3, r0, r7, r3
 800b546:	3208      	adds	r2, #8
 800b548:	b29b      	uxth	r3, r3
 800b54a:	fb01 f303 	mul.w	r3, r1, r3
 800b54e:	6829      	ldr	r1, [r5, #0]
 800b550:	50ca      	str	r2, [r1, r3]
 800b552:	e7d3      	b.n	800b4fc <on_full_output_buffer_fragmented+0xb8>
 800b554:	0800b445 	.word	0x0800b445

0800b558 <uxr_prepare_output_stream>:
 800b558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55a:	b087      	sub	sp, #28
 800b55c:	2707      	movs	r7, #7
 800b55e:	2500      	movs	r5, #0
 800b560:	461c      	mov	r4, r3
 800b562:	4606      	mov	r6, r0
 800b564:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b56a:	e9cd 7500 	strd	r7, r5, [sp]
 800b56e:	3204      	adds	r2, #4
 800b570:	f7ff fc44 	bl	800adfc <uxr_prepare_stream_to_write_submessage>
 800b574:	f080 0201 	eor.w	r2, r0, #1
 800b578:	b2d2      	uxtb	r2, r2
 800b57a:	75a2      	strb	r2, [r4, #22]
 800b57c:	b112      	cbz	r2, 800b584 <uxr_prepare_output_stream+0x2c>
 800b57e:	4628      	mov	r0, r5
 800b580:	b007      	add	sp, #28
 800b582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b584:	aa05      	add	r2, sp, #20
 800b586:	9902      	ldr	r1, [sp, #8]
 800b588:	4630      	mov	r0, r6
 800b58a:	f7ff fd73 	bl	800b074 <uxr_init_base_object_request>
 800b58e:	a905      	add	r1, sp, #20
 800b590:	4605      	mov	r5, r0
 800b592:	4620      	mov	r0, r4
 800b594:	f000 ff9c 	bl	800c4d0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800b598:	69a6      	ldr	r6, [r4, #24]
 800b59a:	69e7      	ldr	r7, [r4, #28]
 800b59c:	4620      	mov	r0, r4
 800b59e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800b5a2:	1a52      	subs	r2, r2, r1
 800b5a4:	f7fe fb3c 	bl	8009c20 <ucdr_init_buffer>
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	463a      	mov	r2, r7
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	f7fe fb0b 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	b007      	add	sp, #28
 800b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5b8 <uxr_prepare_output_stream_fragmented>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	b091      	sub	sp, #68	; 0x44
 800b5be:	4605      	mov	r5, r0
 800b5c0:	3008      	adds	r0, #8
 800b5c2:	461e      	mov	r6, r3
 800b5c4:	9105      	str	r1, [sp, #20]
 800b5c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800b5ca:	9204      	str	r2, [sp, #16]
 800b5cc:	f7ff fe8a 	bl	800b2e4 <uxr_get_output_reliable_stream>
 800b5d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	f000 8093 	beq.w	800b700 <uxr_prepare_output_stream_fragmented+0x148>
 800b5da:	4604      	mov	r4, r0
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	f000 808f 	beq.w	800b700 <uxr_prepare_output_stream_fragmented+0x148>
 800b5e2:	f004 f8f3 	bl	800f7cc <get_available_free_slots>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f000 8085 	beq.w	800b6f6 <uxr_prepare_output_stream_fragmented+0x13e>
 800b5ec:	8923      	ldrh	r3, [r4, #8]
 800b5ee:	89e7      	ldrh	r7, [r4, #14]
 800b5f0:	6862      	ldr	r2, [r4, #4]
 800b5f2:	fbb7 f9f3 	udiv	r9, r7, r3
 800b5f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800b5fa:	fb03 7919 	mls	r9, r3, r9, r7
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	f1a2 0b04 	sub.w	fp, r2, #4
 800b604:	9203      	str	r2, [sp, #12]
 800b606:	fa1f f989 	uxth.w	r9, r9
 800b60a:	fb02 f909 	mul.w	r9, r2, r9
 800b60e:	f109 0904 	add.w	r9, r9, #4
 800b612:	4499      	add	r9, r3
 800b614:	7b23      	ldrb	r3, [r4, #12]
 800b616:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b61a:	4543      	cmp	r3, r8
 800b61c:	d37c      	bcc.n	800b718 <uxr_prepare_output_stream_fragmented+0x160>
 800b61e:	f1ab 0a04 	sub.w	sl, fp, #4
 800b622:	465a      	mov	r2, fp
 800b624:	4649      	mov	r1, r9
 800b626:	a808      	add	r0, sp, #32
 800b628:	ebaa 0a03 	sub.w	sl, sl, r3
 800b62c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b62e:	f8cd 8000 	str.w	r8, [sp]
 800b632:	3308      	adds	r3, #8
 800b634:	fa1f fa8a 	uxth.w	sl, sl
 800b638:	9302      	str	r3, [sp, #8]
 800b63a:	2300      	movs	r3, #0
 800b63c:	f7fe fade 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	4652      	mov	r2, sl
 800b644:	210d      	movs	r1, #13
 800b646:	455b      	cmp	r3, fp
 800b648:	bf34      	ite	cc
 800b64a:	2302      	movcc	r3, #2
 800b64c:	2300      	movcs	r3, #0
 800b64e:	a808      	add	r0, sp, #32
 800b650:	f7ff fe80 	bl	800b354 <uxr_buffer_submessage_header>
 800b654:	8921      	ldrh	r1, [r4, #8]
 800b656:	6863      	ldr	r3, [r4, #4]
 800b658:	4638      	mov	r0, r7
 800b65a:	fbb7 f2f1 	udiv	r2, r7, r1
 800b65e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b662:	fb01 7212 	mls	r2, r1, r2, r7
 800b666:	2101      	movs	r1, #1
 800b668:	b292      	uxth	r2, r2
 800b66a:	fb02 f303 	mul.w	r3, r2, r3
 800b66e:	6822      	ldr	r2, [r4, #0]
 800b670:	f842 b003 	str.w	fp, [r2, r3]
 800b674:	f004 f9c2 	bl	800f9fc <uxr_seq_num_add>
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	f108 0104 	add.w	r1, r8, #4
 800b67e:	4607      	mov	r7, r0
 800b680:	f1a3 0208 	sub.w	r2, r3, #8
 800b684:	4630      	mov	r0, r6
 800b686:	4449      	add	r1, r9
 800b688:	eba2 0208 	sub.w	r2, r2, r8
 800b68c:	f7fe fac8 	bl	8009c20 <ucdr_init_buffer>
 800b690:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b692:	2107      	movs	r1, #7
 800b694:	81e7      	strh	r7, [r4, #14]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	2300      	movs	r3, #0
 800b69a:	4630      	mov	r0, r6
 800b69c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b6a0:	bf28      	it	cs
 800b6a2:	461a      	movcs	r2, r3
 800b6a4:	b292      	uxth	r2, r2
 800b6a6:	f7ff fe55 	bl	800b354 <uxr_buffer_submessage_header>
 800b6aa:	aa07      	add	r2, sp, #28
 800b6ac:	9904      	ldr	r1, [sp, #16]
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7ff fce0 	bl	800b074 <uxr_init_base_object_request>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	b320      	cbz	r0, 800b702 <uxr_prepare_output_stream_fragmented+0x14a>
 800b6b8:	a907      	add	r1, sp, #28
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f000 ff08 	bl	800c4d0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800b6c6:	1a52      	subs	r2, r2, r1
 800b6c8:	f7fe faaa 	bl	8009c20 <ucdr_init_buffer>
 800b6cc:	9b05      	ldr	r3, [sp, #20]
 800b6ce:	9a02      	ldr	r2, [sp, #8]
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800b6d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6d8:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800b6dc:	462a      	mov	r2, r5
 800b6de:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800b6e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b6e4:	4918      	ldr	r1, [pc, #96]	; (800b748 <uxr_prepare_output_stream_fragmented+0x190>)
 800b6e6:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800b6ea:	f7fe fa6d 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	b011      	add	sp, #68	; 0x44
 800b6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6fc:	4798      	blx	r3
 800b6fe:	b920      	cbnz	r0, 800b70a <uxr_prepare_output_stream_fragmented+0x152>
 800b700:	2400      	movs	r4, #0
 800b702:	4620      	mov	r0, r4
 800b704:	b011      	add	sp, #68	; 0x44
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	4620      	mov	r0, r4
 800b70c:	f004 f85e 	bl	800f7cc <get_available_free_slots>
 800b710:	2800      	cmp	r0, #0
 800b712:	f47f af6b 	bne.w	800b5ec <uxr_prepare_output_stream_fragmented+0x34>
 800b716:	e7f3      	b.n	800b700 <uxr_prepare_output_stream_fragmented+0x148>
 800b718:	4638      	mov	r0, r7
 800b71a:	2101      	movs	r1, #1
 800b71c:	f004 f96e 	bl	800f9fc <uxr_seq_num_add>
 800b720:	8922      	ldrh	r2, [r4, #8]
 800b722:	6863      	ldr	r3, [r4, #4]
 800b724:	4607      	mov	r7, r0
 800b726:	fbb3 f9f2 	udiv	r9, r3, r2
 800b72a:	fbb0 f3f2 	udiv	r3, r0, r2
 800b72e:	fb02 0313 	mls	r3, r2, r3, r0
 800b732:	b29b      	uxth	r3, r3
 800b734:	fb03 f909 	mul.w	r9, r3, r9
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	f109 0904 	add.w	r9, r9, #4
 800b73e:	4499      	add	r9, r3
 800b740:	7b23      	ldrb	r3, [r4, #12]
 800b742:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b746:	e76a      	b.n	800b61e <uxr_prepare_output_stream_fragmented+0x66>
 800b748:	0800b445 	.word	0x0800b445

0800b74c <uxr_serialize_message_header>:
 800b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74e:	4616      	mov	r6, r2
 800b750:	b083      	sub	sp, #12
 800b752:	4604      	mov	r4, r0
 800b754:	460d      	mov	r5, r1
 800b756:	9301      	str	r3, [sp, #4]
 800b758:	9f08      	ldr	r7, [sp, #32]
 800b75a:	f7fd fab5 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800b75e:	4631      	mov	r1, r6
 800b760:	4620      	mov	r0, r4
 800b762:	f7fd fab1 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800b766:	9a01      	ldr	r2, [sp, #4]
 800b768:	2101      	movs	r1, #1
 800b76a:	4620      	mov	r0, r4
 800b76c:	f7fd fb58 	bl	8008e20 <ucdr_serialize_endian_uint16_t>
 800b770:	062b      	lsls	r3, r5, #24
 800b772:	d501      	bpl.n	800b778 <uxr_serialize_message_header+0x2c>
 800b774:	b003      	add	sp, #12
 800b776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b778:	2204      	movs	r2, #4
 800b77a:	4639      	mov	r1, r7
 800b77c:	4620      	mov	r0, r4
 800b77e:	b003      	add	sp, #12
 800b780:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b784:	f003 b8fe 	b.w	800e984 <ucdr_serialize_array_uint8_t>

0800b788 <uxr_deserialize_message_header>:
 800b788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b78a:	4616      	mov	r6, r2
 800b78c:	b083      	sub	sp, #12
 800b78e:	4604      	mov	r4, r0
 800b790:	460d      	mov	r5, r1
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	9f08      	ldr	r7, [sp, #32]
 800b796:	f7fd faad 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800b79a:	4631      	mov	r1, r6
 800b79c:	4620      	mov	r0, r4
 800b79e:	f7fd faa9 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800b7a2:	9a01      	ldr	r2, [sp, #4]
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f7fd fc2e 	bl	8009008 <ucdr_deserialize_endian_uint16_t>
 800b7ac:	f995 3000 	ldrsb.w	r3, [r5]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	da01      	bge.n	800b7b8 <uxr_deserialize_message_header+0x30>
 800b7b4:	b003      	add	sp, #12
 800b7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b8:	2204      	movs	r2, #4
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4620      	mov	r0, r4
 800b7be:	b003      	add	sp, #12
 800b7c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b7c4:	f003 b942 	b.w	800ea4c <ucdr_deserialize_array_uint8_t>

0800b7c8 <uxr_serialize_submessage_header>:
 800b7c8:	b530      	push	{r4, r5, lr}
 800b7ca:	4615      	mov	r5, r2
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	f7fd fa79 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f7fd fa75 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	b003      	add	sp, #12
 800b7e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ea:	f7fd bb19 	b.w	8008e20 <ucdr_serialize_endian_uint16_t>
 800b7ee:	bf00      	nop

0800b7f0 <uxr_deserialize_submessage_header>:
 800b7f0:	b530      	push	{r4, r5, lr}
 800b7f2:	4615      	mov	r5, r2
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	f7fd fa7b 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800b7fe:	4629      	mov	r1, r5
 800b800:	4620      	mov	r0, r4
 800b802:	f7fd fa77 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800b806:	9a01      	ldr	r2, [sp, #4]
 800b808:	2101      	movs	r1, #1
 800b80a:	4620      	mov	r0, r4
 800b80c:	b003      	add	sp, #12
 800b80e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b812:	f7fd bbf9 	b.w	8009008 <ucdr_deserialize_endian_uint16_t>
 800b816:	bf00      	nop

0800b818 <uxr_serialize_CLIENT_Representation>:
 800b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b81c:	2204      	movs	r2, #4
 800b81e:	460e      	mov	r6, r1
 800b820:	4605      	mov	r5, r0
 800b822:	f003 f8af 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800b826:	4607      	mov	r7, r0
 800b828:	2202      	movs	r2, #2
 800b82a:	1d31      	adds	r1, r6, #4
 800b82c:	4628      	mov	r0, r5
 800b82e:	f003 f8a9 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800b832:	4038      	ands	r0, r7
 800b834:	2202      	movs	r2, #2
 800b836:	1db1      	adds	r1, r6, #6
 800b838:	b2c7      	uxtb	r7, r0
 800b83a:	4628      	mov	r0, r5
 800b83c:	f003 f8a2 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800b840:	2204      	movs	r2, #4
 800b842:	4007      	ands	r7, r0
 800b844:	f106 0108 	add.w	r1, r6, #8
 800b848:	4628      	mov	r0, r5
 800b84a:	f003 f89b 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800b84e:	4007      	ands	r7, r0
 800b850:	7b31      	ldrb	r1, [r6, #12]
 800b852:	4628      	mov	r0, r5
 800b854:	f7fd fa38 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800b858:	7b71      	ldrb	r1, [r6, #13]
 800b85a:	4007      	ands	r7, r0
 800b85c:	4628      	mov	r0, r5
 800b85e:	f7fd fa05 	bl	8008c6c <ucdr_serialize_bool>
 800b862:	7b73      	ldrb	r3, [r6, #13]
 800b864:	ea07 0800 	and.w	r8, r7, r0
 800b868:	b93b      	cbnz	r3, 800b87a <uxr_serialize_CLIENT_Representation+0x62>
 800b86a:	8bb1      	ldrh	r1, [r6, #28]
 800b86c:	4628      	mov	r0, r5
 800b86e:	f7fd fa57 	bl	8008d20 <ucdr_serialize_uint16_t>
 800b872:	ea08 0000 	and.w	r0, r8, r0
 800b876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b87a:	6931      	ldr	r1, [r6, #16]
 800b87c:	4628      	mov	r0, r5
 800b87e:	f7fd fc39 	bl	80090f4 <ucdr_serialize_uint32_t>
 800b882:	6933      	ldr	r3, [r6, #16]
 800b884:	b1e3      	cbz	r3, 800b8c0 <uxr_serialize_CLIENT_Representation+0xa8>
 800b886:	b1c0      	cbz	r0, 800b8ba <uxr_serialize_CLIENT_Representation+0xa2>
 800b888:	4637      	mov	r7, r6
 800b88a:	f04f 0900 	mov.w	r9, #0
 800b88e:	e000      	b.n	800b892 <uxr_serialize_CLIENT_Representation+0x7a>
 800b890:	b19c      	cbz	r4, 800b8ba <uxr_serialize_CLIENT_Representation+0xa2>
 800b892:	6979      	ldr	r1, [r7, #20]
 800b894:	4628      	mov	r0, r5
 800b896:	f003 f999 	bl	800ebcc <ucdr_serialize_string>
 800b89a:	69b9      	ldr	r1, [r7, #24]
 800b89c:	4604      	mov	r4, r0
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f003 f994 	bl	800ebcc <ucdr_serialize_string>
 800b8a4:	f109 0901 	add.w	r9, r9, #1
 800b8a8:	6933      	ldr	r3, [r6, #16]
 800b8aa:	4004      	ands	r4, r0
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	4599      	cmp	r9, r3
 800b8b0:	b2e4      	uxtb	r4, r4
 800b8b2:	d3ed      	bcc.n	800b890 <uxr_serialize_CLIENT_Representation+0x78>
 800b8b4:	ea08 0804 	and.w	r8, r8, r4
 800b8b8:	e7d7      	b.n	800b86a <uxr_serialize_CLIENT_Representation+0x52>
 800b8ba:	f04f 0800 	mov.w	r8, #0
 800b8be:	e7d4      	b.n	800b86a <uxr_serialize_CLIENT_Representation+0x52>
 800b8c0:	ea08 0800 	and.w	r8, r8, r0
 800b8c4:	e7d1      	b.n	800b86a <uxr_serialize_CLIENT_Representation+0x52>
 800b8c6:	bf00      	nop

0800b8c8 <uxr_deserialize_CLIENT_Representation>:
 800b8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8cc:	2204      	movs	r2, #4
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	f003 f8bb 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	2202      	movs	r2, #2
 800b8da:	1d21      	adds	r1, r4, #4
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f003 f8b5 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800b8e2:	4038      	ands	r0, r7
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	1da1      	adds	r1, r4, #6
 800b8e8:	b2c6      	uxtb	r6, r0
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f003 f8ae 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800b8f0:	2204      	movs	r2, #4
 800b8f2:	4006      	ands	r6, r0
 800b8f4:	f104 0108 	add.w	r1, r4, #8
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f003 f8a7 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800b8fe:	4006      	ands	r6, r0
 800b900:	f104 010c 	add.w	r1, r4, #12
 800b904:	4628      	mov	r0, r5
 800b906:	f7fd f9f5 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800b90a:	f104 010d 	add.w	r1, r4, #13
 800b90e:	ea06 0700 	and.w	r7, r6, r0
 800b912:	4628      	mov	r0, r5
 800b914:	f7fd f9c0 	bl	8008c98 <ucdr_deserialize_bool>
 800b918:	7b63      	ldrb	r3, [r4, #13]
 800b91a:	4007      	ands	r7, r0
 800b91c:	b93b      	cbnz	r3, 800b92e <uxr_deserialize_CLIENT_Representation+0x66>
 800b91e:	f104 011c 	add.w	r1, r4, #28
 800b922:	4628      	mov	r0, r5
 800b924:	f7fd fafc 	bl	8008f20 <ucdr_deserialize_uint16_t>
 800b928:	4038      	ands	r0, r7
 800b92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b92e:	f104 0110 	add.w	r1, r4, #16
 800b932:	4628      	mov	r0, r5
 800b934:	f7fd fd0e 	bl	8009354 <ucdr_deserialize_uint32_t>
 800b938:	6923      	ldr	r3, [r4, #16]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d903      	bls.n	800b946 <uxr_deserialize_CLIENT_Representation+0x7e>
 800b93e:	2301      	movs	r3, #1
 800b940:	2700      	movs	r7, #0
 800b942:	75ab      	strb	r3, [r5, #22]
 800b944:	e7eb      	b.n	800b91e <uxr_deserialize_CLIENT_Representation+0x56>
 800b946:	b30b      	cbz	r3, 800b98c <uxr_deserialize_CLIENT_Representation+0xc4>
 800b948:	b1f0      	cbz	r0, 800b988 <uxr_deserialize_CLIENT_Representation+0xc0>
 800b94a:	46a0      	mov	r8, r4
 800b94c:	f04f 0900 	mov.w	r9, #0
 800b950:	e000      	b.n	800b954 <uxr_deserialize_CLIENT_Representation+0x8c>
 800b952:	b1ce      	cbz	r6, 800b988 <uxr_deserialize_CLIENT_Representation+0xc0>
 800b954:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b958:	f108 0808 	add.w	r8, r8, #8
 800b95c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b960:	4628      	mov	r0, r5
 800b962:	f003 f943 	bl	800ebec <ucdr_deserialize_string>
 800b966:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b96a:	4606      	mov	r6, r0
 800b96c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b970:	4628      	mov	r0, r5
 800b972:	f109 0901 	add.w	r9, r9, #1
 800b976:	f003 f939 	bl	800ebec <ucdr_deserialize_string>
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	4006      	ands	r6, r0
 800b97e:	4599      	cmp	r9, r3
 800b980:	b2f6      	uxtb	r6, r6
 800b982:	d3e6      	bcc.n	800b952 <uxr_deserialize_CLIENT_Representation+0x8a>
 800b984:	4037      	ands	r7, r6
 800b986:	e7ca      	b.n	800b91e <uxr_deserialize_CLIENT_Representation+0x56>
 800b988:	2700      	movs	r7, #0
 800b98a:	e7c8      	b.n	800b91e <uxr_deserialize_CLIENT_Representation+0x56>
 800b98c:	4007      	ands	r7, r0
 800b98e:	e7c6      	b.n	800b91e <uxr_deserialize_CLIENT_Representation+0x56>

0800b990 <uxr_serialize_AGENT_Representation>:
 800b990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b994:	2204      	movs	r2, #4
 800b996:	460f      	mov	r7, r1
 800b998:	4605      	mov	r5, r0
 800b99a:	f002 fff3 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800b99e:	4604      	mov	r4, r0
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	1d39      	adds	r1, r7, #4
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f002 ffed 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800b9aa:	4020      	ands	r0, r4
 800b9ac:	2202      	movs	r2, #2
 800b9ae:	1db9      	adds	r1, r7, #6
 800b9b0:	b2c4      	uxtb	r4, r0
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f002 ffe6 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800b9b8:	7a39      	ldrb	r1, [r7, #8]
 800b9ba:	4004      	ands	r4, r0
 800b9bc:	4628      	mov	r0, r5
 800b9be:	f7fd f955 	bl	8008c6c <ucdr_serialize_bool>
 800b9c2:	7a3b      	ldrb	r3, [r7, #8]
 800b9c4:	ea00 0804 	and.w	r8, r0, r4
 800b9c8:	b913      	cbnz	r3, 800b9d0 <uxr_serialize_AGENT_Representation+0x40>
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d0:	68f9      	ldr	r1, [r7, #12]
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f7fd fb8e 	bl	80090f4 <ucdr_serialize_uint32_t>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	b303      	cbz	r3, 800ba1e <uxr_serialize_AGENT_Representation+0x8e>
 800b9dc:	b1d0      	cbz	r0, 800ba14 <uxr_serialize_AGENT_Representation+0x84>
 800b9de:	463e      	mov	r6, r7
 800b9e0:	f04f 0900 	mov.w	r9, #0
 800b9e4:	e000      	b.n	800b9e8 <uxr_serialize_AGENT_Representation+0x58>
 800b9e6:	b1ac      	cbz	r4, 800ba14 <uxr_serialize_AGENT_Representation+0x84>
 800b9e8:	6931      	ldr	r1, [r6, #16]
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f003 f8ee 	bl	800ebcc <ucdr_serialize_string>
 800b9f0:	6971      	ldr	r1, [r6, #20]
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f003 f8e9 	bl	800ebcc <ucdr_serialize_string>
 800b9fa:	f109 0901 	add.w	r9, r9, #1
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4004      	ands	r4, r0
 800ba02:	3608      	adds	r6, #8
 800ba04:	4599      	cmp	r9, r3
 800ba06:	b2e4      	uxtb	r4, r4
 800ba08:	d3ed      	bcc.n	800b9e6 <uxr_serialize_AGENT_Representation+0x56>
 800ba0a:	ea08 0804 	and.w	r8, r8, r4
 800ba0e:	4640      	mov	r0, r8
 800ba10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba14:	f04f 0800 	mov.w	r8, #0
 800ba18:	4640      	mov	r0, r8
 800ba1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba1e:	ea08 0800 	and.w	r8, r8, r0
 800ba22:	e7d2      	b.n	800b9ca <uxr_serialize_AGENT_Representation+0x3a>

0800ba24 <uxr_serialize_DATAWRITER_Representation>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	460d      	mov	r5, r1
 800ba28:	7809      	ldrb	r1, [r1, #0]
 800ba2a:	4606      	mov	r6, r0
 800ba2c:	f7fd f94c 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800ba30:	4604      	mov	r4, r0
 800ba32:	b130      	cbz	r0, 800ba42 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ba34:	782b      	ldrb	r3, [r5, #0]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d00c      	beq.n	800ba54 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d010      	beq.n	800ba60 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d008      	beq.n	800ba54 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ba42:	2202      	movs	r2, #2
 800ba44:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f002 ff9b 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800ba4e:	4020      	ands	r0, r4
 800ba50:	b2c0      	uxtb	r0, r0
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	6869      	ldr	r1, [r5, #4]
 800ba56:	4630      	mov	r0, r6
 800ba58:	f003 f8b8 	bl	800ebcc <ucdr_serialize_string>
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	e7f0      	b.n	800ba42 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ba60:	4629      	mov	r1, r5
 800ba62:	4630      	mov	r0, r6
 800ba64:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ba68:	3104      	adds	r1, #4
 800ba6a:	f003 f883 	bl	800eb74 <ucdr_serialize_sequence_uint8_t>
 800ba6e:	4604      	mov	r4, r0
 800ba70:	e7e7      	b.n	800ba42 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ba72:	bf00      	nop

0800ba74 <uxr_serialize_ObjectVariant.part.0>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	780b      	ldrb	r3, [r1, #0]
 800ba78:	460c      	mov	r4, r1
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	2b0d      	cmp	r3, #13
 800ba80:	d854      	bhi.n	800bb2c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ba82:	e8df f003 	tbb	[pc, r3]
 800ba86:	0730      	.short	0x0730
 800ba88:	07071b1b 	.word	0x07071b1b
 800ba8c:	0c530707 	.word	0x0c530707
 800ba90:	494e0c0c 	.word	0x494e0c0c
 800ba94:	3104      	adds	r1, #4
 800ba96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba9a:	f7ff bfc3 	b.w	800ba24 <uxr_serialize_DATAWRITER_Representation>
 800ba9e:	7909      	ldrb	r1, [r1, #4]
 800baa0:	f7fd f912 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800baa4:	b1e8      	cbz	r0, 800bae2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800baa6:	7923      	ldrb	r3, [r4, #4]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d001      	beq.n	800bab0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800baac:	2b02      	cmp	r3, #2
 800baae:	d13d      	bne.n	800bb2c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800bab0:	68a1      	ldr	r1, [r4, #8]
 800bab2:	4628      	mov	r0, r5
 800bab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bab8:	f003 b888 	b.w	800ebcc <ucdr_serialize_string>
 800babc:	7909      	ldrb	r1, [r1, #4]
 800babe:	f7fd f903 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800bac2:	4606      	mov	r6, r0
 800bac4:	b120      	cbz	r0, 800bad0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bac6:	7923      	ldrb	r3, [r4, #4]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d039      	beq.n	800bb40 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d02f      	beq.n	800bb30 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800bad0:	2202      	movs	r2, #2
 800bad2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800bad6:	4628      	mov	r0, r5
 800bad8:	f002 ff54 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800badc:	4030      	ands	r0, r6
 800bade:	b2c0      	uxtb	r0, r0
 800bae0:	bd70      	pop	{r4, r5, r6, pc}
 800bae2:	2000      	movs	r0, #0
 800bae4:	bd70      	pop	{r4, r5, r6, pc}
 800bae6:	7909      	ldrb	r1, [r1, #4]
 800bae8:	f7fd f8ee 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800baec:	4606      	mov	r6, r0
 800baee:	b158      	cbz	r0, 800bb08 <uxr_serialize_ObjectVariant.part.0+0x94>
 800baf0:	7923      	ldrb	r3, [r4, #4]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d003      	beq.n	800bafe <uxr_serialize_ObjectVariant.part.0+0x8a>
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	d028      	beq.n	800bb4c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d104      	bne.n	800bb08 <uxr_serialize_ObjectVariant.part.0+0x94>
 800bafe:	68a1      	ldr	r1, [r4, #8]
 800bb00:	4628      	mov	r0, r5
 800bb02:	f003 f863 	bl	800ebcc <ucdr_serialize_string>
 800bb06:	4606      	mov	r6, r0
 800bb08:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f7fd fe17 	bl	8009740 <ucdr_serialize_int16_t>
 800bb12:	4030      	ands	r0, r6
 800bb14:	b2c0      	uxtb	r0, r0
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	3104      	adds	r1, #4
 800bb1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb1e:	f7ff be7b 	b.w	800b818 <uxr_serialize_CLIENT_Representation>
 800bb22:	3104      	adds	r1, #4
 800bb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb28:	f7ff bf32 	b.w	800b990 <uxr_serialize_AGENT_Representation>
 800bb2c:	2001      	movs	r0, #1
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	68a2      	ldr	r2, [r4, #8]
 800bb32:	f104 010c 	add.w	r1, r4, #12
 800bb36:	4628      	mov	r0, r5
 800bb38:	f003 f81c 	bl	800eb74 <ucdr_serialize_sequence_uint8_t>
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	e7c7      	b.n	800bad0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bb40:	68a1      	ldr	r1, [r4, #8]
 800bb42:	4628      	mov	r0, r5
 800bb44:	f003 f842 	bl	800ebcc <ucdr_serialize_string>
 800bb48:	4606      	mov	r6, r0
 800bb4a:	e7c1      	b.n	800bad0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bb4c:	68a2      	ldr	r2, [r4, #8]
 800bb4e:	f104 010c 	add.w	r1, r4, #12
 800bb52:	4628      	mov	r0, r5
 800bb54:	f003 f80e 	bl	800eb74 <ucdr_serialize_sequence_uint8_t>
 800bb58:	4606      	mov	r6, r0
 800bb5a:	e7d5      	b.n	800bb08 <uxr_serialize_ObjectVariant.part.0+0x94>

0800bb5c <uxr_deserialize_DATAWRITER_Representation>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460d      	mov	r5, r1
 800bb62:	f7fd f8c7 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800bb66:	4604      	mov	r4, r0
 800bb68:	b130      	cbz	r0, 800bb78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bb6a:	782b      	ldrb	r3, [r5, #0]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d00c      	beq.n	800bb8a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d012      	beq.n	800bb9a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d008      	beq.n	800bb8a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bb78:	2202      	movs	r2, #2
 800bb7a:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f002 ff64 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800bb84:	4020      	ands	r0, r4
 800bb86:	b2c0      	uxtb	r0, r0
 800bb88:	bd70      	pop	{r4, r5, r6, pc}
 800bb8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb8e:	6869      	ldr	r1, [r5, #4]
 800bb90:	4630      	mov	r0, r6
 800bb92:	f003 f82b 	bl	800ebec <ucdr_deserialize_string>
 800bb96:	4604      	mov	r4, r0
 800bb98:	e7ee      	b.n	800bb78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bb9a:	1d2b      	adds	r3, r5, #4
 800bb9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bba0:	f105 0108 	add.w	r1, r5, #8
 800bba4:	4630      	mov	r0, r6
 800bba6:	f002 fff7 	bl	800eb98 <ucdr_deserialize_sequence_uint8_t>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	e7e4      	b.n	800bb78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bbae:	bf00      	nop

0800bbb0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	7809      	ldrb	r1, [r1, #0]
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	f7fd f858 	bl	8008c6c <ucdr_serialize_bool>
 800bbbc:	782b      	ldrb	r3, [r5, #0]
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	b94b      	cbnz	r3, 800bbd6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800bbc2:	7a29      	ldrb	r1, [r5, #8]
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	f7fd f851 	bl	8008c6c <ucdr_serialize_bool>
 800bbca:	7a2b      	ldrb	r3, [r5, #8]
 800bbcc:	4004      	ands	r4, r0
 800bbce:	b2e4      	uxtb	r4, r4
 800bbd0:	b943      	cbnz	r3, 800bbe4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	bd70      	pop	{r4, r5, r6, pc}
 800bbd6:	6869      	ldr	r1, [r5, #4]
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f002 fff7 	bl	800ebcc <ucdr_serialize_string>
 800bbde:	4004      	ands	r4, r0
 800bbe0:	b2e4      	uxtb	r4, r4
 800bbe2:	e7ee      	b.n	800bbc2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800bbe4:	68e9      	ldr	r1, [r5, #12]
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f002 fff0 	bl	800ebcc <ucdr_serialize_string>
 800bbec:	4004      	ands	r4, r0
 800bbee:	4620      	mov	r0, r4
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
 800bbf2:	bf00      	nop

0800bbf4 <uxr_serialize_OBJK_Topic_Binary>:
 800bbf4:	b570      	push	{r4, r5, r6, lr}
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	6809      	ldr	r1, [r1, #0]
 800bbfc:	f002 ffe6 	bl	800ebcc <ucdr_serialize_string>
 800bc00:	4604      	mov	r4, r0
 800bc02:	7929      	ldrb	r1, [r5, #4]
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7fd f831 	bl	8008c6c <ucdr_serialize_bool>
 800bc0a:	792b      	ldrb	r3, [r5, #4]
 800bc0c:	4004      	ands	r4, r0
 800bc0e:	b2e4      	uxtb	r4, r4
 800bc10:	b943      	cbnz	r3, 800bc24 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800bc12:	7b29      	ldrb	r1, [r5, #12]
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7fd f829 	bl	8008c6c <ucdr_serialize_bool>
 800bc1a:	7b2b      	ldrb	r3, [r5, #12]
 800bc1c:	4004      	ands	r4, r0
 800bc1e:	b93b      	cbnz	r3, 800bc30 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800bc20:	4620      	mov	r0, r4
 800bc22:	bd70      	pop	{r4, r5, r6, pc}
 800bc24:	68a9      	ldr	r1, [r5, #8]
 800bc26:	4630      	mov	r0, r6
 800bc28:	f002 ffd0 	bl	800ebcc <ucdr_serialize_string>
 800bc2c:	4004      	ands	r4, r0
 800bc2e:	e7f0      	b.n	800bc12 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800bc30:	6929      	ldr	r1, [r5, #16]
 800bc32:	4630      	mov	r0, r6
 800bc34:	f002 ffca 	bl	800ebcc <ucdr_serialize_string>
 800bc38:	4004      	ands	r4, r0
 800bc3a:	b2e4      	uxtb	r4, r4
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}

0800bc40 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	460c      	mov	r4, r1
 800bc46:	7809      	ldrb	r1, [r1, #0]
 800bc48:	4606      	mov	r6, r0
 800bc4a:	f7fd f80f 	bl	8008c6c <ucdr_serialize_bool>
 800bc4e:	7823      	ldrb	r3, [r4, #0]
 800bc50:	4605      	mov	r5, r0
 800bc52:	b96b      	cbnz	r3, 800bc70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800bc54:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7fd f807 	bl	8008c6c <ucdr_serialize_bool>
 800bc5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc62:	4005      	ands	r5, r0
 800bc64:	b2ed      	uxtb	r5, r5
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d169      	bne.n	800bd3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc70:	6861      	ldr	r1, [r4, #4]
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7fd fa3e 	bl	80090f4 <ucdr_serialize_uint32_t>
 800bc78:	6863      	ldr	r3, [r4, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d06b      	beq.n	800bd56 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d067      	beq.n	800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bc82:	68a1      	ldr	r1, [r4, #8]
 800bc84:	4630      	mov	r0, r6
 800bc86:	f002 ffa1 	bl	800ebcc <ucdr_serialize_string>
 800bc8a:	6863      	ldr	r3, [r4, #4]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d953      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d05e      	beq.n	800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bc94:	68e1      	ldr	r1, [r4, #12]
 800bc96:	4630      	mov	r0, r6
 800bc98:	f002 ff98 	bl	800ebcc <ucdr_serialize_string>
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d94a      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d055      	beq.n	800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bca6:	6921      	ldr	r1, [r4, #16]
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f002 ff8f 	bl	800ebcc <ucdr_serialize_string>
 800bcae:	6863      	ldr	r3, [r4, #4]
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d941      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d04c      	beq.n	800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcb8:	6961      	ldr	r1, [r4, #20]
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f002 ff86 	bl	800ebcc <ucdr_serialize_string>
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	d938      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d043      	beq.n	800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcca:	69a1      	ldr	r1, [r4, #24]
 800bccc:	4630      	mov	r0, r6
 800bcce:	f002 ff7d 	bl	800ebcc <ucdr_serialize_string>
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	2b05      	cmp	r3, #5
 800bcd6:	d92f      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d03a      	beq.n	800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcdc:	69e1      	ldr	r1, [r4, #28]
 800bcde:	4630      	mov	r0, r6
 800bce0:	f002 ff74 	bl	800ebcc <ucdr_serialize_string>
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	2b06      	cmp	r3, #6
 800bce8:	d926      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcea:	b390      	cbz	r0, 800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcec:	6a21      	ldr	r1, [r4, #32]
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f002 ff6c 	bl	800ebcc <ucdr_serialize_string>
 800bcf4:	6863      	ldr	r3, [r4, #4]
 800bcf6:	2b07      	cmp	r3, #7
 800bcf8:	d91e      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcfa:	b350      	cbz	r0, 800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f002 ff64 	bl	800ebcc <ucdr_serialize_string>
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	2b08      	cmp	r3, #8
 800bd08:	d916      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd0a:	b310      	cbz	r0, 800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f002 ff5c 	bl	800ebcc <ucdr_serialize_string>
 800bd14:	6863      	ldr	r3, [r4, #4]
 800bd16:	2b09      	cmp	r3, #9
 800bd18:	d90e      	bls.n	800bd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd1a:	b1d0      	cbz	r0, 800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd1c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800bd20:	2709      	movs	r7, #9
 800bd22:	e000      	b.n	800bd26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800bd24:	b1a8      	cbz	r0, 800bd52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd26:	f858 1b04 	ldr.w	r1, [r8], #4
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f002 ff4e 	bl	800ebcc <ucdr_serialize_string>
 800bd30:	3701      	adds	r7, #1
 800bd32:	6862      	ldr	r2, [r4, #4]
 800bd34:	4297      	cmp	r7, r2
 800bd36:	d3f5      	bcc.n	800bd24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800bd38:	4005      	ands	r5, r0
 800bd3a:	b2ed      	uxtb	r5, r5
 800bd3c:	e78a      	b.n	800bc54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bd3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bd40:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800bd44:	4630      	mov	r0, r6
 800bd46:	f002 ff15 	bl	800eb74 <ucdr_serialize_sequence_uint8_t>
 800bd4a:	4005      	ands	r5, r0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd52:	2500      	movs	r5, #0
 800bd54:	e77e      	b.n	800bc54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bd56:	4028      	ands	r0, r5
 800bd58:	b2c5      	uxtb	r5, r0
 800bd5a:	e77b      	b.n	800bc54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800bd5c <uxr_serialize_OBJK_Publisher_Binary>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	460d      	mov	r5, r1
 800bd60:	7809      	ldrb	r1, [r1, #0]
 800bd62:	4606      	mov	r6, r0
 800bd64:	f7fc ff82 	bl	8008c6c <ucdr_serialize_bool>
 800bd68:	782b      	ldrb	r3, [r5, #0]
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	b94b      	cbnz	r3, 800bd82 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800bd6e:	7a29      	ldrb	r1, [r5, #8]
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7fc ff7b 	bl	8008c6c <ucdr_serialize_bool>
 800bd76:	7a2b      	ldrb	r3, [r5, #8]
 800bd78:	4004      	ands	r4, r0
 800bd7a:	b2e4      	uxtb	r4, r4
 800bd7c:	b943      	cbnz	r3, 800bd90 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800bd7e:	4620      	mov	r0, r4
 800bd80:	bd70      	pop	{r4, r5, r6, pc}
 800bd82:	6869      	ldr	r1, [r5, #4]
 800bd84:	4630      	mov	r0, r6
 800bd86:	f002 ff21 	bl	800ebcc <ucdr_serialize_string>
 800bd8a:	4004      	ands	r4, r0
 800bd8c:	b2e4      	uxtb	r4, r4
 800bd8e:	e7ee      	b.n	800bd6e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800bd90:	f105 010c 	add.w	r1, r5, #12
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7ff ff53 	bl	800bc40 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800bd9a:	4004      	ands	r4, r0
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}

0800bda0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800bda0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800bda4:	4688      	mov	r8, r1
 800bda6:	4681      	mov	r9, r0
 800bda8:	8809      	ldrh	r1, [r1, #0]
 800bdaa:	f7fc ffb9 	bl	8008d20 <ucdr_serialize_uint16_t>
 800bdae:	4606      	mov	r6, r0
 800bdb0:	f898 1002 	ldrb.w	r1, [r8, #2]
 800bdb4:	4648      	mov	r0, r9
 800bdb6:	f7fc ff59 	bl	8008c6c <ucdr_serialize_bool>
 800bdba:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bdbe:	4006      	ands	r6, r0
 800bdc0:	b2f5      	uxtb	r5, r6
 800bdc2:	b9eb      	cbnz	r3, 800be00 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800bdc4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800bdc8:	4648      	mov	r0, r9
 800bdca:	f7fc ff4f 	bl	8008c6c <ucdr_serialize_bool>
 800bdce:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bdd2:	4005      	ands	r5, r0
 800bdd4:	bb7b      	cbnz	r3, 800be36 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800bdd6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800bdda:	4648      	mov	r0, r9
 800bddc:	f7fc ff46 	bl	8008c6c <ucdr_serialize_bool>
 800bde0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800bde4:	4005      	ands	r5, r0
 800bde6:	b9f3      	cbnz	r3, 800be26 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800bde8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800bdec:	4648      	mov	r0, r9
 800bdee:	f7fc ff3d 	bl	8008c6c <ucdr_serialize_bool>
 800bdf2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800bdf6:	4005      	ands	r5, r0
 800bdf8:	b94b      	cbnz	r3, 800be0e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800be00:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800be04:	4648      	mov	r0, r9
 800be06:	f7fc ff8b 	bl	8008d20 <ucdr_serialize_uint16_t>
 800be0a:	4005      	ands	r5, r0
 800be0c:	e7da      	b.n	800bdc4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800be0e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800be12:	f108 011c 	add.w	r1, r8, #28
 800be16:	4648      	mov	r0, r9
 800be18:	f002 feac 	bl	800eb74 <ucdr_serialize_sequence_uint8_t>
 800be1c:	4028      	ands	r0, r5
 800be1e:	b2c5      	uxtb	r5, r0
 800be20:	4628      	mov	r0, r5
 800be22:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800be26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800be2a:	4648      	mov	r0, r9
 800be2c:	f7fd f962 	bl	80090f4 <ucdr_serialize_uint32_t>
 800be30:	4028      	ands	r0, r5
 800be32:	b2c5      	uxtb	r5, r0
 800be34:	e7d8      	b.n	800bde8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800be36:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800be3a:	4648      	mov	r0, r9
 800be3c:	f7fd f95a 	bl	80090f4 <ucdr_serialize_uint32_t>
 800be40:	4028      	ands	r0, r5
 800be42:	b2c5      	uxtb	r5, r0
 800be44:	e7c7      	b.n	800bdd6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800be46:	bf00      	nop

0800be48 <uxr_serialize_OBJK_DataWriter_Binary>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	2202      	movs	r2, #2
 800be4c:	460d      	mov	r5, r1
 800be4e:	4606      	mov	r6, r0
 800be50:	f002 fd98 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800be54:	4604      	mov	r4, r0
 800be56:	78a9      	ldrb	r1, [r5, #2]
 800be58:	4630      	mov	r0, r6
 800be5a:	f7fc ff07 	bl	8008c6c <ucdr_serialize_bool>
 800be5e:	78ab      	ldrb	r3, [r5, #2]
 800be60:	4004      	ands	r4, r0
 800be62:	b2e4      	uxtb	r4, r4
 800be64:	b90b      	cbnz	r3, 800be6a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800be66:	4620      	mov	r0, r4
 800be68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be6a:	f105 0108 	add.w	r1, r5, #8
 800be6e:	4630      	mov	r0, r6
 800be70:	f7ff ff96 	bl	800bda0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800be74:	4607      	mov	r7, r0
 800be76:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7fc fef6 	bl	8008c6c <ucdr_serialize_bool>
 800be80:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800be84:	4038      	ands	r0, r7
 800be86:	b2c7      	uxtb	r7, r0
 800be88:	b913      	cbnz	r3, 800be90 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800be8a:	403c      	ands	r4, r7
 800be8c:	4620      	mov	r0, r4
 800be8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be90:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800be94:	4630      	mov	r0, r6
 800be96:	f7fd fb83 	bl	80095a0 <ucdr_serialize_uint64_t>
 800be9a:	4007      	ands	r7, r0
 800be9c:	e7f5      	b.n	800be8a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800be9e:	bf00      	nop

0800bea0 <uxr_deserialize_ObjectVariant>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	4605      	mov	r5, r0
 800bea4:	460e      	mov	r6, r1
 800bea6:	f7fc ff25 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800beaa:	b168      	cbz	r0, 800bec8 <uxr_deserialize_ObjectVariant+0x28>
 800beac:	7833      	ldrb	r3, [r6, #0]
 800beae:	4604      	mov	r4, r0
 800beb0:	3b01      	subs	r3, #1
 800beb2:	2b0d      	cmp	r3, #13
 800beb4:	d809      	bhi.n	800beca <uxr_deserialize_ObjectVariant+0x2a>
 800beb6:	e8df f003 	tbb	[pc, r3]
 800beba:	0a41      	.short	0x0a41
 800bebc:	0a0a2323 	.word	0x0a0a2323
 800bec0:	10080a0a 	.word	0x10080a0a
 800bec4:	565c1010 	.word	0x565c1010
 800bec8:	2400      	movs	r4, #0
 800beca:	4620      	mov	r0, r4
 800becc:	bd70      	pop	{r4, r5, r6, pc}
 800bece:	1d31      	adds	r1, r6, #4
 800bed0:	4628      	mov	r0, r5
 800bed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bed6:	f7ff be41 	b.w	800bb5c <uxr_deserialize_DATAWRITER_Representation>
 800beda:	1d31      	adds	r1, r6, #4
 800bedc:	4628      	mov	r0, r5
 800bede:	f7fc ff09 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d0f0      	beq.n	800bec8 <uxr_deserialize_ObjectVariant+0x28>
 800bee6:	7933      	ldrb	r3, [r6, #4]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d001      	beq.n	800bef0 <uxr_deserialize_ObjectVariant+0x50>
 800beec:	2b02      	cmp	r3, #2
 800beee:	d1ec      	bne.n	800beca <uxr_deserialize_ObjectVariant+0x2a>
 800bef0:	68b1      	ldr	r1, [r6, #8]
 800bef2:	4628      	mov	r0, r5
 800bef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800befc:	f002 be76 	b.w	800ebec <ucdr_deserialize_string>
 800bf00:	1d31      	adds	r1, r6, #4
 800bf02:	4628      	mov	r0, r5
 800bf04:	f7fc fef6 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	b170      	cbz	r0, 800bf2a <uxr_deserialize_ObjectVariant+0x8a>
 800bf0c:	7933      	ldrb	r3, [r6, #4]
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d04c      	beq.n	800bfac <uxr_deserialize_ObjectVariant+0x10c>
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d109      	bne.n	800bf2a <uxr_deserialize_ObjectVariant+0x8a>
 800bf16:	f106 0308 	add.w	r3, r6, #8
 800bf1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf1e:	f106 010c 	add.w	r1, r6, #12
 800bf22:	4628      	mov	r0, r5
 800bf24:	f002 fe38 	bl	800eb98 <ucdr_deserialize_sequence_uint8_t>
 800bf28:	4604      	mov	r4, r0
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800bf30:	4628      	mov	r0, r5
 800bf32:	f002 fd8b 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800bf36:	4020      	ands	r0, r4
 800bf38:	b2c4      	uxtb	r4, r0
 800bf3a:	e7c6      	b.n	800beca <uxr_deserialize_ObjectVariant+0x2a>
 800bf3c:	1d31      	adds	r1, r6, #4
 800bf3e:	4628      	mov	r0, r5
 800bf40:	f7fc fed8 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800bf44:	4604      	mov	r4, r0
 800bf46:	b130      	cbz	r0, 800bf56 <uxr_deserialize_ObjectVariant+0xb6>
 800bf48:	7933      	ldrb	r3, [r6, #4]
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d036      	beq.n	800bfbc <uxr_deserialize_ObjectVariant+0x11c>
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d03c      	beq.n	800bfcc <uxr_deserialize_ObjectVariant+0x12c>
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d032      	beq.n	800bfbc <uxr_deserialize_ObjectVariant+0x11c>
 800bf56:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f7fd fc70 	bl	8009840 <ucdr_deserialize_int16_t>
 800bf60:	4020      	ands	r0, r4
 800bf62:	b2c4      	uxtb	r4, r0
 800bf64:	e7b1      	b.n	800beca <uxr_deserialize_ObjectVariant+0x2a>
 800bf66:	1d31      	adds	r1, r6, #4
 800bf68:	4628      	mov	r0, r5
 800bf6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf6e:	f7ff bcab 	b.w	800b8c8 <uxr_deserialize_CLIENT_Representation>
 800bf72:	2204      	movs	r2, #4
 800bf74:	4628      	mov	r0, r5
 800bf76:	18b1      	adds	r1, r6, r2
 800bf78:	f002 fd68 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	2202      	movs	r2, #2
 800bf80:	f106 0108 	add.w	r1, r6, #8
 800bf84:	4628      	mov	r0, r5
 800bf86:	f002 fd61 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800bf8a:	4004      	ands	r4, r0
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f106 010a 	add.w	r1, r6, #10
 800bf92:	4628      	mov	r0, r5
 800bf94:	b2e4      	uxtb	r4, r4
 800bf96:	f002 fd59 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	f106 010c 	add.w	r1, r6, #12
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	401c      	ands	r4, r3
 800bfa4:	f7fc fe78 	bl	8008c98 <ucdr_deserialize_bool>
 800bfa8:	4004      	ands	r4, r0
 800bfaa:	e78e      	b.n	800beca <uxr_deserialize_ObjectVariant+0x2a>
 800bfac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfb0:	68b1      	ldr	r1, [r6, #8]
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f002 fe1a 	bl	800ebec <ucdr_deserialize_string>
 800bfb8:	4604      	mov	r4, r0
 800bfba:	e7b6      	b.n	800bf2a <uxr_deserialize_ObjectVariant+0x8a>
 800bfbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfc0:	68b1      	ldr	r1, [r6, #8]
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f002 fe12 	bl	800ebec <ucdr_deserialize_string>
 800bfc8:	4604      	mov	r4, r0
 800bfca:	e7c4      	b.n	800bf56 <uxr_deserialize_ObjectVariant+0xb6>
 800bfcc:	f106 0308 	add.w	r3, r6, #8
 800bfd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfd4:	f106 010c 	add.w	r1, r6, #12
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f002 fddd 	bl	800eb98 <ucdr_deserialize_sequence_uint8_t>
 800bfde:	4604      	mov	r4, r0
 800bfe0:	e7b9      	b.n	800bf56 <uxr_deserialize_ObjectVariant+0xb6>
 800bfe2:	bf00      	nop

0800bfe4 <uxr_deserialize_BaseObjectRequest>:
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	4605      	mov	r5, r0
 800bfea:	460e      	mov	r6, r1
 800bfec:	f002 fd2e 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800bff0:	2202      	movs	r2, #2
 800bff2:	4604      	mov	r4, r0
 800bff4:	4628      	mov	r0, r5
 800bff6:	18b1      	adds	r1, r6, r2
 800bff8:	f002 fd28 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800bffc:	4020      	ands	r0, r4
 800bffe:	b2c0      	uxtb	r0, r0
 800c000:	bd70      	pop	{r4, r5, r6, pc}
 800c002:	bf00      	nop

0800c004 <uxr_serialize_ActivityInfoVariant>:
 800c004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c008:	460e      	mov	r6, r1
 800c00a:	7809      	ldrb	r1, [r1, #0]
 800c00c:	4680      	mov	r8, r0
 800c00e:	f7fc fe5b 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c012:	4607      	mov	r7, r0
 800c014:	b138      	cbz	r0, 800c026 <uxr_serialize_ActivityInfoVariant+0x22>
 800c016:	7833      	ldrb	r3, [r6, #0]
 800c018:	2b06      	cmp	r3, #6
 800c01a:	f000 8081 	beq.w	800c120 <uxr_serialize_ActivityInfoVariant+0x11c>
 800c01e:	2b0d      	cmp	r3, #13
 800c020:	d014      	beq.n	800c04c <uxr_serialize_ActivityInfoVariant+0x48>
 800c022:	2b05      	cmp	r3, #5
 800c024:	d002      	beq.n	800c02c <uxr_serialize_ActivityInfoVariant+0x28>
 800c026:	4638      	mov	r0, r7
 800c028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800c030:	4640      	mov	r0, r8
 800c032:	f7fd fb85 	bl	8009740 <ucdr_serialize_int16_t>
 800c036:	4607      	mov	r7, r0
 800c038:	4640      	mov	r0, r8
 800c03a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800c03e:	f7fd faaf 	bl	80095a0 <ucdr_serialize_uint64_t>
 800c042:	4038      	ands	r0, r7
 800c044:	b2c7      	uxtb	r7, r0
 800c046:	4638      	mov	r0, r7
 800c048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c04c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800c050:	4640      	mov	r0, r8
 800c052:	f7fd fb75 	bl	8009740 <ucdr_serialize_int16_t>
 800c056:	68f1      	ldr	r1, [r6, #12]
 800c058:	4607      	mov	r7, r0
 800c05a:	4640      	mov	r0, r8
 800c05c:	f7fd f84a 	bl	80090f4 <ucdr_serialize_uint32_t>
 800c060:	68f3      	ldr	r3, [r6, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0ed      	beq.n	800c042 <uxr_serialize_ActivityInfoVariant+0x3e>
 800c066:	b318      	cbz	r0, 800c0b0 <uxr_serialize_ActivityInfoVariant+0xac>
 800c068:	f106 090c 	add.w	r9, r6, #12
 800c06c:	2400      	movs	r4, #0
 800c06e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c072:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800c076:	7c29      	ldrb	r1, [r5, #16]
 800c078:	4640      	mov	r0, r8
 800c07a:	f7fc fe25 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c07e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800c082:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800c086:	2800      	cmp	r0, #0
 800c088:	d051      	beq.n	800c12e <uxr_serialize_ActivityInfoVariant+0x12a>
 800c08a:	7c2b      	ldrb	r3, [r5, #16]
 800c08c:	00c9      	lsls	r1, r1, #3
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d854      	bhi.n	800c13c <uxr_serialize_ActivityInfoVariant+0x138>
 800c092:	e8df f003 	tbb	[pc, r3]
 800c096:	2133      	.short	0x2133
 800c098:	020f      	.short	0x020f
 800c09a:	4449      	add	r1, r9
 800c09c:	4640      	mov	r0, r8
 800c09e:	6889      	ldr	r1, [r1, #8]
 800c0a0:	f002 fd94 	bl	800ebcc <ucdr_serialize_string>
 800c0a4:	3401      	adds	r4, #1
 800c0a6:	68f2      	ldr	r2, [r6, #12]
 800c0a8:	4294      	cmp	r4, r2
 800c0aa:	d244      	bcs.n	800c136 <uxr_serialize_ActivityInfoVariant+0x132>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d1de      	bne.n	800c06e <uxr_serialize_ActivityInfoVariant+0x6a>
 800c0b0:	2700      	movs	r7, #0
 800c0b2:	e7b8      	b.n	800c026 <uxr_serialize_ActivityInfoVariant+0x22>
 800c0b4:	3108      	adds	r1, #8
 800c0b6:	44a2      	add	sl, r4
 800c0b8:	2210      	movs	r2, #16
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4449      	add	r1, r9
 800c0be:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c0c2:	f002 fc5f 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	f7fd f811 	bl	80090f4 <ucdr_serialize_uint32_t>
 800c0d2:	4028      	ands	r0, r5
 800c0d4:	b2c0      	uxtb	r0, r0
 800c0d6:	e7e5      	b.n	800c0a4 <uxr_serialize_ActivityInfoVariant+0xa0>
 800c0d8:	3108      	adds	r1, #8
 800c0da:	44a2      	add	sl, r4
 800c0dc:	2204      	movs	r2, #4
 800c0de:	4640      	mov	r0, r8
 800c0e0:	4449      	add	r1, r9
 800c0e2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c0e6:	f002 fc4d 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	f7fc fe15 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c0f6:	4028      	ands	r0, r5
 800c0f8:	b2c0      	uxtb	r0, r0
 800c0fa:	e7d3      	b.n	800c0a4 <uxr_serialize_ActivityInfoVariant+0xa0>
 800c0fc:	3108      	adds	r1, #8
 800c0fe:	44a2      	add	sl, r4
 800c100:	2202      	movs	r2, #2
 800c102:	4640      	mov	r0, r8
 800c104:	4449      	add	r1, r9
 800c106:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c10a:	f002 fc3b 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c10e:	4605      	mov	r5, r0
 800c110:	f89a 1016 	ldrb.w	r1, [sl, #22]
 800c114:	4640      	mov	r0, r8
 800c116:	f7fc fdd7 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c11a:	4028      	ands	r0, r5
 800c11c:	b2c0      	uxtb	r0, r0
 800c11e:	e7c1      	b.n	800c0a4 <uxr_serialize_ActivityInfoVariant+0xa0>
 800c120:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800c124:	4640      	mov	r0, r8
 800c126:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12a:	f7fd bb09 	b.w	8009740 <ucdr_serialize_int16_t>
 800c12e:	3401      	adds	r4, #1
 800c130:	68f2      	ldr	r2, [r6, #12]
 800c132:	42a2      	cmp	r2, r4
 800c134:	d8bc      	bhi.n	800c0b0 <uxr_serialize_ActivityInfoVariant+0xac>
 800c136:	4007      	ands	r7, r0
 800c138:	b2ff      	uxtb	r7, r7
 800c13a:	e774      	b.n	800c026 <uxr_serialize_ActivityInfoVariant+0x22>
 800c13c:	3401      	adds	r4, #1
 800c13e:	68f3      	ldr	r3, [r6, #12]
 800c140:	3518      	adds	r5, #24
 800c142:	429c      	cmp	r4, r3
 800c144:	d397      	bcc.n	800c076 <uxr_serialize_ActivityInfoVariant+0x72>
 800c146:	e76e      	b.n	800c026 <uxr_serialize_ActivityInfoVariant+0x22>

0800c148 <uxr_deserialize_BaseObjectReply>:
 800c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14c:	2202      	movs	r2, #2
 800c14e:	4606      	mov	r6, r0
 800c150:	460f      	mov	r7, r1
 800c152:	f002 fc7b 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c156:	2202      	movs	r2, #2
 800c158:	4605      	mov	r5, r0
 800c15a:	4630      	mov	r0, r6
 800c15c:	18b9      	adds	r1, r7, r2
 800c15e:	f002 fc75 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c162:	4680      	mov	r8, r0
 800c164:	1d39      	adds	r1, r7, #4
 800c166:	4630      	mov	r0, r6
 800c168:	f7fc fdc4 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c16c:	ea05 0508 	and.w	r5, r5, r8
 800c170:	4604      	mov	r4, r0
 800c172:	1d79      	adds	r1, r7, #5
 800c174:	4630      	mov	r0, r6
 800c176:	402c      	ands	r4, r5
 800c178:	f7fc fdbc 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c17c:	4020      	ands	r0, r4
 800c17e:	b2c0      	uxtb	r0, r0
 800c180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c184 <uxr_serialize_ReadSpecification>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	460e      	mov	r6, r1
 800c188:	4607      	mov	r7, r0
 800c18a:	7809      	ldrb	r1, [r1, #0]
 800c18c:	f7fc fd9c 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c190:	4604      	mov	r4, r0
 800c192:	7871      	ldrb	r1, [r6, #1]
 800c194:	4638      	mov	r0, r7
 800c196:	f7fc fd97 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c19a:	4004      	ands	r4, r0
 800c19c:	78b1      	ldrb	r1, [r6, #2]
 800c19e:	4638      	mov	r0, r7
 800c1a0:	f7fc fd64 	bl	8008c6c <ucdr_serialize_bool>
 800c1a4:	78b3      	ldrb	r3, [r6, #2]
 800c1a6:	b2e4      	uxtb	r4, r4
 800c1a8:	4004      	ands	r4, r0
 800c1aa:	b943      	cbnz	r3, 800c1be <uxr_serialize_ReadSpecification+0x3a>
 800c1ac:	7a31      	ldrb	r1, [r6, #8]
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f7fc fd5c 	bl	8008c6c <ucdr_serialize_bool>
 800c1b4:	7a33      	ldrb	r3, [r6, #8]
 800c1b6:	4004      	ands	r4, r0
 800c1b8:	b93b      	cbnz	r3, 800c1ca <uxr_serialize_ReadSpecification+0x46>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1be:	6871      	ldr	r1, [r6, #4]
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f002 fd03 	bl	800ebcc <ucdr_serialize_string>
 800c1c6:	4004      	ands	r4, r0
 800c1c8:	e7f0      	b.n	800c1ac <uxr_serialize_ReadSpecification+0x28>
 800c1ca:	8971      	ldrh	r1, [r6, #10]
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	f7fc fda7 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	89b1      	ldrh	r1, [r6, #12]
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	f7fc fda2 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c1dc:	4005      	ands	r5, r0
 800c1de:	89f1      	ldrh	r1, [r6, #14]
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	b2ed      	uxtb	r5, r5
 800c1e4:	f7fc fd9c 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c1e8:	8a31      	ldrh	r1, [r6, #16]
 800c1ea:	4025      	ands	r5, r4
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	4025      	ands	r5, r4
 800c1f2:	f7fc fd95 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c1f6:	ea00 0405 	and.w	r4, r0, r5
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1fe:	bf00      	nop

0800c200 <uxr_serialize_CREATE_CLIENT_Payload>:
 800c200:	f7ff bb0a 	b.w	800b818 <uxr_serialize_CLIENT_Representation>

0800c204 <uxr_serialize_CREATE_Payload>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	2202      	movs	r2, #2
 800c208:	4607      	mov	r7, r0
 800c20a:	460e      	mov	r6, r1
 800c20c:	f002 fbba 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c210:	2202      	movs	r2, #2
 800c212:	4605      	mov	r5, r0
 800c214:	4638      	mov	r0, r7
 800c216:	18b1      	adds	r1, r6, r2
 800c218:	f002 fbb4 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c21c:	7931      	ldrb	r1, [r6, #4]
 800c21e:	4604      	mov	r4, r0
 800c220:	4638      	mov	r0, r7
 800c222:	f7fc fd51 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c226:	b170      	cbz	r0, 800c246 <uxr_serialize_CREATE_Payload+0x42>
 800c228:	7933      	ldrb	r3, [r6, #4]
 800c22a:	402c      	ands	r4, r5
 800c22c:	3b01      	subs	r3, #1
 800c22e:	b2e4      	uxtb	r4, r4
 800c230:	2b0d      	cmp	r3, #13
 800c232:	d809      	bhi.n	800c248 <uxr_serialize_CREATE_Payload+0x44>
 800c234:	e8df f003 	tbb	[pc, r3]
 800c238:	23230a4c 	.word	0x23230a4c
 800c23c:	0a0a0a0a 	.word	0x0a0a0a0a
 800c240:	12121208 	.word	0x12121208
 800c244:	3e45      	.short	0x3e45
 800c246:	2400      	movs	r4, #0
 800c248:	4620      	mov	r0, r4
 800c24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c24c:	f106 0108 	add.w	r1, r6, #8
 800c250:	4638      	mov	r0, r7
 800c252:	f7ff fbe7 	bl	800ba24 <uxr_serialize_DATAWRITER_Representation>
 800c256:	4004      	ands	r4, r0
 800c258:	4620      	mov	r0, r4
 800c25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c25c:	7a31      	ldrb	r1, [r6, #8]
 800c25e:	4638      	mov	r0, r7
 800c260:	f7fc fd32 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c264:	2800      	cmp	r0, #0
 800c266:	d0ee      	beq.n	800c246 <uxr_serialize_CREATE_Payload+0x42>
 800c268:	7a33      	ldrb	r3, [r6, #8]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d001      	beq.n	800c272 <uxr_serialize_CREATE_Payload+0x6e>
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d1ea      	bne.n	800c248 <uxr_serialize_CREATE_Payload+0x44>
 800c272:	68f1      	ldr	r1, [r6, #12]
 800c274:	4638      	mov	r0, r7
 800c276:	f002 fca9 	bl	800ebcc <ucdr_serialize_string>
 800c27a:	4004      	ands	r4, r0
 800c27c:	e7e4      	b.n	800c248 <uxr_serialize_CREATE_Payload+0x44>
 800c27e:	7a31      	ldrb	r1, [r6, #8]
 800c280:	4638      	mov	r0, r7
 800c282:	f7fc fd21 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c286:	4605      	mov	r5, r0
 800c288:	b158      	cbz	r0, 800c2a2 <uxr_serialize_CREATE_Payload+0x9e>
 800c28a:	7a33      	ldrb	r3, [r6, #8]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d034      	beq.n	800c2fa <uxr_serialize_CREATE_Payload+0xf6>
 800c290:	2b03      	cmp	r3, #3
 800c292:	d106      	bne.n	800c2a2 <uxr_serialize_CREATE_Payload+0x9e>
 800c294:	68f2      	ldr	r2, [r6, #12]
 800c296:	f106 0110 	add.w	r1, r6, #16
 800c29a:	4638      	mov	r0, r7
 800c29c:	f002 fc6a 	bl	800eb74 <ucdr_serialize_sequence_uint8_t>
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f002 fb6b 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c2ae:	4028      	ands	r0, r5
 800c2b0:	4004      	ands	r4, r0
 800c2b2:	e7c9      	b.n	800c248 <uxr_serialize_CREATE_Payload+0x44>
 800c2b4:	f106 0108 	add.w	r1, r6, #8
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff faad 	bl	800b818 <uxr_serialize_CLIENT_Representation>
 800c2be:	4004      	ands	r4, r0
 800c2c0:	e7c2      	b.n	800c248 <uxr_serialize_CREATE_Payload+0x44>
 800c2c2:	f106 0108 	add.w	r1, r6, #8
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f7ff fb62 	bl	800b990 <uxr_serialize_AGENT_Representation>
 800c2cc:	4004      	ands	r4, r0
 800c2ce:	e7bb      	b.n	800c248 <uxr_serialize_CREATE_Payload+0x44>
 800c2d0:	7a31      	ldrb	r1, [r6, #8]
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f7fc fcf8 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c2d8:	4605      	mov	r5, r0
 800c2da:	b130      	cbz	r0, 800c2ea <uxr_serialize_CREATE_Payload+0xe6>
 800c2dc:	7a33      	ldrb	r3, [r6, #8]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d011      	beq.n	800c306 <uxr_serialize_CREATE_Payload+0x102>
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d015      	beq.n	800c312 <uxr_serialize_CREATE_Payload+0x10e>
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d00d      	beq.n	800c306 <uxr_serialize_CREATE_Payload+0x102>
 800c2ea:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	f7fd fa26 	bl	8009740 <ucdr_serialize_int16_t>
 800c2f4:	4028      	ands	r0, r5
 800c2f6:	4004      	ands	r4, r0
 800c2f8:	e7a6      	b.n	800c248 <uxr_serialize_CREATE_Payload+0x44>
 800c2fa:	68f1      	ldr	r1, [r6, #12]
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f002 fc65 	bl	800ebcc <ucdr_serialize_string>
 800c302:	4605      	mov	r5, r0
 800c304:	e7cd      	b.n	800c2a2 <uxr_serialize_CREATE_Payload+0x9e>
 800c306:	68f1      	ldr	r1, [r6, #12]
 800c308:	4638      	mov	r0, r7
 800c30a:	f002 fc5f 	bl	800ebcc <ucdr_serialize_string>
 800c30e:	4605      	mov	r5, r0
 800c310:	e7eb      	b.n	800c2ea <uxr_serialize_CREATE_Payload+0xe6>
 800c312:	68f2      	ldr	r2, [r6, #12]
 800c314:	f106 0110 	add.w	r1, r6, #16
 800c318:	4638      	mov	r0, r7
 800c31a:	f002 fc2b 	bl	800eb74 <ucdr_serialize_sequence_uint8_t>
 800c31e:	4605      	mov	r5, r0
 800c320:	e7e3      	b.n	800c2ea <uxr_serialize_CREATE_Payload+0xe6>
 800c322:	bf00      	nop

0800c324 <uxr_deserialize_GET_INFO_Payload>:
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	2202      	movs	r2, #2
 800c328:	4605      	mov	r5, r0
 800c32a:	460e      	mov	r6, r1
 800c32c:	f002 fb8e 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c330:	2202      	movs	r2, #2
 800c332:	4604      	mov	r4, r0
 800c334:	4628      	mov	r0, r5
 800c336:	18b1      	adds	r1, r6, r2
 800c338:	f002 fb88 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c33c:	4603      	mov	r3, r0
 800c33e:	1d31      	adds	r1, r6, #4
 800c340:	4628      	mov	r0, r5
 800c342:	401c      	ands	r4, r3
 800c344:	f7fd f806 	bl	8009354 <ucdr_deserialize_uint32_t>
 800c348:	b2e4      	uxtb	r4, r4
 800c34a:	4020      	ands	r0, r4
 800c34c:	bd70      	pop	{r4, r5, r6, pc}
 800c34e:	bf00      	nop

0800c350 <uxr_serialize_DELETE_Payload>:
 800c350:	b570      	push	{r4, r5, r6, lr}
 800c352:	2202      	movs	r2, #2
 800c354:	4605      	mov	r5, r0
 800c356:	460e      	mov	r6, r1
 800c358:	f002 fb14 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c35c:	2202      	movs	r2, #2
 800c35e:	4604      	mov	r4, r0
 800c360:	4628      	mov	r0, r5
 800c362:	18b1      	adds	r1, r6, r2
 800c364:	f002 fb0e 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c368:	4020      	ands	r0, r4
 800c36a:	b2c0      	uxtb	r0, r0
 800c36c:	bd70      	pop	{r4, r5, r6, pc}
 800c36e:	bf00      	nop

0800c370 <uxr_deserialize_STATUS_AGENT_Payload>:
 800c370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c374:	460e      	mov	r6, r1
 800c376:	4605      	mov	r5, r0
 800c378:	f7fc fcbc 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c37c:	4604      	mov	r4, r0
 800c37e:	1c71      	adds	r1, r6, #1
 800c380:	4628      	mov	r0, r5
 800c382:	f7fc fcb7 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c386:	2204      	movs	r2, #4
 800c388:	4681      	mov	r9, r0
 800c38a:	4628      	mov	r0, r5
 800c38c:	18b1      	adds	r1, r6, r2
 800c38e:	f002 fb5d 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c392:	f106 0108 	add.w	r1, r6, #8
 800c396:	4680      	mov	r8, r0
 800c398:	2202      	movs	r2, #2
 800c39a:	4628      	mov	r0, r5
 800c39c:	f002 fb56 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c3a0:	ea04 0309 	and.w	r3, r4, r9
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	f106 010a 	add.w	r1, r6, #10
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	ea03 0408 	and.w	r4, r3, r8
 800c3b4:	f002 fb4a 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	403c      	ands	r4, r7
 800c3be:	f106 010c 	add.w	r1, r6, #12
 800c3c2:	461d      	mov	r5, r3
 800c3c4:	f7fc fc68 	bl	8008c98 <ucdr_deserialize_bool>
 800c3c8:	4025      	ands	r5, r4
 800c3ca:	4028      	ands	r0, r5
 800c3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c3d0 <uxr_deserialize_STATUS_Payload>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	460f      	mov	r7, r1
 800c3da:	f002 fb37 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c3de:	2202      	movs	r2, #2
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	18b9      	adds	r1, r7, r2
 800c3e6:	f002 fb31 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c3ea:	4680      	mov	r8, r0
 800c3ec:	1d39      	adds	r1, r7, #4
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f7fc fc80 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c3f4:	ea05 0508 	and.w	r5, r5, r8
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	1d79      	adds	r1, r7, #5
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	402c      	ands	r4, r5
 800c400:	f7fc fc78 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c404:	4020      	ands	r0, r4
 800c406:	b2c0      	uxtb	r0, r0
 800c408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c40c <uxr_serialize_INFO_Payload>:
 800c40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c410:	2202      	movs	r2, #2
 800c412:	460c      	mov	r4, r1
 800c414:	4605      	mov	r5, r0
 800c416:	f002 fab5 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c41a:	2202      	movs	r2, #2
 800c41c:	4680      	mov	r8, r0
 800c41e:	4628      	mov	r0, r5
 800c420:	18a1      	adds	r1, r4, r2
 800c422:	f002 faaf 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c426:	4607      	mov	r7, r0
 800c428:	7921      	ldrb	r1, [r4, #4]
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7fc fc4c 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c430:	ea08 0807 	and.w	r8, r8, r7
 800c434:	4606      	mov	r6, r0
 800c436:	7961      	ldrb	r1, [r4, #5]
 800c438:	4628      	mov	r0, r5
 800c43a:	ea06 0608 	and.w	r6, r6, r8
 800c43e:	f7fc fc43 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c442:	7a21      	ldrb	r1, [r4, #8]
 800c444:	4030      	ands	r0, r6
 800c446:	b2c7      	uxtb	r7, r0
 800c448:	4628      	mov	r0, r5
 800c44a:	f7fc fc0f 	bl	8008c6c <ucdr_serialize_bool>
 800c44e:	7a23      	ldrb	r3, [r4, #8]
 800c450:	4606      	mov	r6, r0
 800c452:	b96b      	cbnz	r3, 800c470 <uxr_serialize_INFO_Payload+0x64>
 800c454:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800c458:	4628      	mov	r0, r5
 800c45a:	f7fc fc07 	bl	8008c6c <ucdr_serialize_bool>
 800c45e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800c462:	4030      	ands	r0, r6
 800c464:	b2c6      	uxtb	r6, r0
 800c466:	b983      	cbnz	r3, 800c48a <uxr_serialize_INFO_Payload+0x7e>
 800c468:	ea06 0007 	and.w	r0, r6, r7
 800c46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c470:	7b21      	ldrb	r1, [r4, #12]
 800c472:	4628      	mov	r0, r5
 800c474:	f7fc fc28 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c478:	b188      	cbz	r0, 800c49e <uxr_serialize_INFO_Payload+0x92>
 800c47a:	f104 010c 	add.w	r1, r4, #12
 800c47e:	4628      	mov	r0, r5
 800c480:	f7ff faf8 	bl	800ba74 <uxr_serialize_ObjectVariant.part.0>
 800c484:	4030      	ands	r0, r6
 800c486:	b2c6      	uxtb	r6, r0
 800c488:	e7e4      	b.n	800c454 <uxr_serialize_INFO_Payload+0x48>
 800c48a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800c48e:	4628      	mov	r0, r5
 800c490:	f7ff fdb8 	bl	800c004 <uxr_serialize_ActivityInfoVariant>
 800c494:	4006      	ands	r6, r0
 800c496:	ea06 0007 	and.w	r0, r6, r7
 800c49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49e:	4606      	mov	r6, r0
 800c4a0:	e7d8      	b.n	800c454 <uxr_serialize_INFO_Payload+0x48>
 800c4a2:	bf00      	nop

0800c4a4 <uxr_serialize_READ_DATA_Payload>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	460e      	mov	r6, r1
 800c4ac:	f002 fa6a 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	18b1      	adds	r1, r6, r2
 800c4b8:	f002 fa64 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	1d31      	adds	r1, r6, #4
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	401c      	ands	r4, r3
 800c4c4:	f7ff fe5e 	bl	800c184 <uxr_serialize_ReadSpecification>
 800c4c8:	b2e4      	uxtb	r4, r4
 800c4ca:	4020      	ands	r0, r4
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	bf00      	nop

0800c4d0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	460e      	mov	r6, r1
 800c4d8:	f002 fa54 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c4dc:	2202      	movs	r2, #2
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	18b1      	adds	r1, r6, r2
 800c4e4:	f002 fa4e 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c4e8:	4020      	ands	r0, r4
 800c4ea:	b2c0      	uxtb	r0, r0
 800c4ec:	bd70      	pop	{r4, r5, r6, pc}
 800c4ee:	bf00      	nop

0800c4f0 <uxr_serialize_ACKNACK_Payload>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	460e      	mov	r6, r1
 800c4f8:	f834 1b02 	ldrh.w	r1, [r4], #2
 800c4fc:	f7fc fc10 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c500:	2202      	movs	r2, #2
 800c502:	4621      	mov	r1, r4
 800c504:	4604      	mov	r4, r0
 800c506:	4628      	mov	r0, r5
 800c508:	f002 fa3c 	bl	800e984 <ucdr_serialize_array_uint8_t>
 800c50c:	4603      	mov	r3, r0
 800c50e:	7931      	ldrb	r1, [r6, #4]
 800c510:	4628      	mov	r0, r5
 800c512:	401c      	ands	r4, r3
 800c514:	f7fc fbd8 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c518:	b2e4      	uxtb	r4, r4
 800c51a:	4020      	ands	r0, r4
 800c51c:	bd70      	pop	{r4, r5, r6, pc}
 800c51e:	bf00      	nop

0800c520 <uxr_deserialize_ACKNACK_Payload>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	460e      	mov	r6, r1
 800c524:	4605      	mov	r5, r0
 800c526:	f7fc fcfb 	bl	8008f20 <ucdr_deserialize_uint16_t>
 800c52a:	2202      	movs	r2, #2
 800c52c:	4604      	mov	r4, r0
 800c52e:	4628      	mov	r0, r5
 800c530:	18b1      	adds	r1, r6, r2
 800c532:	f002 fa8b 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c536:	4603      	mov	r3, r0
 800c538:	1d31      	adds	r1, r6, #4
 800c53a:	4628      	mov	r0, r5
 800c53c:	401c      	ands	r4, r3
 800c53e:	f7fc fbd9 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c542:	b2e4      	uxtb	r4, r4
 800c544:	4020      	ands	r0, r4
 800c546:	bd70      	pop	{r4, r5, r6, pc}

0800c548 <uxr_serialize_HEARTBEAT_Payload>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	460d      	mov	r5, r1
 800c54c:	4606      	mov	r6, r0
 800c54e:	8809      	ldrh	r1, [r1, #0]
 800c550:	f7fc fbe6 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c554:	8869      	ldrh	r1, [r5, #2]
 800c556:	4604      	mov	r4, r0
 800c558:	4630      	mov	r0, r6
 800c55a:	f7fc fbe1 	bl	8008d20 <ucdr_serialize_uint16_t>
 800c55e:	4603      	mov	r3, r0
 800c560:	7929      	ldrb	r1, [r5, #4]
 800c562:	4630      	mov	r0, r6
 800c564:	401c      	ands	r4, r3
 800c566:	f7fc fbaf 	bl	8008cc8 <ucdr_serialize_uint8_t>
 800c56a:	b2e4      	uxtb	r4, r4
 800c56c:	4020      	ands	r0, r4
 800c56e:	bd70      	pop	{r4, r5, r6, pc}

0800c570 <uxr_deserialize_HEARTBEAT_Payload>:
 800c570:	b570      	push	{r4, r5, r6, lr}
 800c572:	460e      	mov	r6, r1
 800c574:	4605      	mov	r5, r0
 800c576:	f7fc fcd3 	bl	8008f20 <ucdr_deserialize_uint16_t>
 800c57a:	4604      	mov	r4, r0
 800c57c:	1cb1      	adds	r1, r6, #2
 800c57e:	4628      	mov	r0, r5
 800c580:	f7fc fcce 	bl	8008f20 <ucdr_deserialize_uint16_t>
 800c584:	4603      	mov	r3, r0
 800c586:	1d31      	adds	r1, r6, #4
 800c588:	4628      	mov	r0, r5
 800c58a:	401c      	ands	r4, r3
 800c58c:	f7fc fbb2 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c590:	b2e4      	uxtb	r4, r4
 800c592:	4020      	ands	r0, r4
 800c594:	bd70      	pop	{r4, r5, r6, pc}
 800c596:	bf00      	nop

0800c598 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800c598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c59c:	460e      	mov	r6, r1
 800c59e:	4605      	mov	r5, r0
 800c5a0:	f7fd fa5a 	bl	8009a58 <ucdr_deserialize_int32_t>
 800c5a4:	4607      	mov	r7, r0
 800c5a6:	1d31      	adds	r1, r6, #4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f7fc fed3 	bl	8009354 <ucdr_deserialize_uint32_t>
 800c5ae:	4680      	mov	r8, r0
 800c5b0:	f106 0108 	add.w	r1, r6, #8
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	f7fd fa4f 	bl	8009a58 <ucdr_deserialize_int32_t>
 800c5ba:	ea07 0708 	and.w	r7, r7, r8
 800c5be:	4604      	mov	r4, r0
 800c5c0:	f106 010c 	add.w	r1, r6, #12
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	403c      	ands	r4, r7
 800c5c8:	f7fc fec4 	bl	8009354 <ucdr_deserialize_uint32_t>
 800c5cc:	f106 0110 	add.w	r1, r6, #16
 800c5d0:	4004      	ands	r4, r0
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f7fd fa40 	bl	8009a58 <ucdr_deserialize_int32_t>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	b2e4      	uxtb	r4, r4
 800c5dc:	4628      	mov	r0, r5
 800c5de:	461d      	mov	r5, r3
 800c5e0:	f106 0114 	add.w	r1, r6, #20
 800c5e4:	f7fc feb6 	bl	8009354 <ucdr_deserialize_uint32_t>
 800c5e8:	402c      	ands	r4, r5
 800c5ea:	4020      	ands	r0, r4
 800c5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5f0 <uxr_deserialize_SampleIdentity>:
 800c5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	460d      	mov	r5, r1
 800c5f8:	220c      	movs	r2, #12
 800c5fa:	f002 fa27 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c5fe:	2203      	movs	r2, #3
 800c600:	f105 010c 	add.w	r1, r5, #12
 800c604:	4607      	mov	r7, r0
 800c606:	4620      	mov	r0, r4
 800c608:	f002 fa20 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 800c60c:	f105 010f 	add.w	r1, r5, #15
 800c610:	4680      	mov	r8, r0
 800c612:	4620      	mov	r0, r4
 800c614:	f7fc fb6e 	bl	8008cf4 <ucdr_deserialize_uint8_t>
 800c618:	f105 0110 	add.w	r1, r5, #16
 800c61c:	4606      	mov	r6, r0
 800c61e:	4620      	mov	r0, r4
 800c620:	f7fd fa1a 	bl	8009a58 <ucdr_deserialize_int32_t>
 800c624:	ea07 0708 	and.w	r7, r7, r8
 800c628:	4603      	mov	r3, r0
 800c62a:	4620      	mov	r0, r4
 800c62c:	403e      	ands	r6, r7
 800c62e:	f105 0114 	add.w	r1, r5, #20
 800c632:	461c      	mov	r4, r3
 800c634:	f7fc fe8e 	bl	8009354 <ucdr_deserialize_uint32_t>
 800c638:	4034      	ands	r4, r6
 800c63a:	4020      	ands	r0, r4
 800c63c:	b2c0      	uxtb	r0, r0
 800c63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c642:	bf00      	nop

0800c644 <rcl_convert_rmw_ret_to_rcl_ret>:
 800c644:	280b      	cmp	r0, #11
 800c646:	dc0d      	bgt.n	800c664 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800c648:	2800      	cmp	r0, #0
 800c64a:	db09      	blt.n	800c660 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c64c:	280b      	cmp	r0, #11
 800c64e:	d807      	bhi.n	800c660 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c650:	e8df f000 	tbb	[pc, r0]
 800c654:	07060607 	.word	0x07060607
 800c658:	06060606 	.word	0x06060606
 800c65c:	07070606 	.word	0x07070606
 800c660:	2001      	movs	r0, #1
 800c662:	4770      	bx	lr
 800c664:	28cb      	cmp	r0, #203	; 0xcb
 800c666:	bf18      	it	ne
 800c668:	2001      	movne	r0, #1
 800c66a:	4770      	bx	lr

0800c66c <rcl_get_zero_initialized_context>:
 800c66c:	4a03      	ldr	r2, [pc, #12]	; (800c67c <rcl_get_zero_initialized_context+0x10>)
 800c66e:	4603      	mov	r3, r0
 800c670:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c674:	e883 0003 	stmia.w	r3, {r0, r1}
 800c678:	4618      	mov	r0, r3
 800c67a:	4770      	bx	lr
 800c67c:	08012b5c 	.word	0x08012b5c

0800c680 <rcl_context_is_valid>:
 800c680:	b118      	cbz	r0, 800c68a <rcl_context_is_valid+0xa>
 800c682:	6840      	ldr	r0, [r0, #4]
 800c684:	3800      	subs	r0, #0
 800c686:	bf18      	it	ne
 800c688:	2001      	movne	r0, #1
 800c68a:	4770      	bx	lr

0800c68c <__cleanup_context>:
 800c68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c690:	4606      	mov	r6, r0
 800c692:	2300      	movs	r3, #0
 800c694:	6800      	ldr	r0, [r0, #0]
 800c696:	6073      	str	r3, [r6, #4]
 800c698:	2800      	cmp	r0, #0
 800c69a:	d049      	beq.n	800c730 <__cleanup_context+0xa4>
 800c69c:	6947      	ldr	r7, [r0, #20]
 800c69e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c6a2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c6a6:	b137      	cbz	r7, 800c6b6 <__cleanup_context+0x2a>
 800c6a8:	3014      	adds	r0, #20
 800c6aa:	f000 f9e7 	bl	800ca7c <rcl_init_options_fini>
 800c6ae:	4607      	mov	r7, r0
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d144      	bne.n	800c73e <__cleanup_context+0xb2>
 800c6b4:	6830      	ldr	r0, [r6, #0]
 800c6b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c6b8:	b143      	cbz	r3, 800c6cc <__cleanup_context+0x40>
 800c6ba:	3028      	adds	r0, #40	; 0x28
 800c6bc:	f001 fe16 	bl	800e2ec <rmw_context_fini>
 800c6c0:	b118      	cbz	r0, 800c6ca <__cleanup_context+0x3e>
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	d03e      	beq.n	800c744 <__cleanup_context+0xb8>
 800c6c6:	f7fb fdc3 	bl	8008250 <rcutils_reset_error>
 800c6ca:	6830      	ldr	r0, [r6, #0]
 800c6cc:	6a03      	ldr	r3, [r0, #32]
 800c6ce:	b1db      	cbz	r3, 800c708 <__cleanup_context+0x7c>
 800c6d0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800c6d4:	2a01      	cmp	r2, #1
 800c6d6:	f17c 0100 	sbcs.w	r1, ip, #0
 800c6da:	db11      	blt.n	800c700 <__cleanup_context+0x74>
 800c6dc:	2400      	movs	r4, #0
 800c6de:	4625      	mov	r5, r4
 800c6e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	b1b8      	cbz	r0, 800c718 <__cleanup_context+0x8c>
 800c6e8:	47c0      	blx	r8
 800c6ea:	6833      	ldr	r3, [r6, #0]
 800c6ec:	3401      	adds	r4, #1
 800c6ee:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800c6f2:	f145 0500 	adc.w	r5, r5, #0
 800c6f6:	6a1b      	ldr	r3, [r3, #32]
 800c6f8:	4294      	cmp	r4, r2
 800c6fa:	eb75 010c 	sbcs.w	r1, r5, ip
 800c6fe:	dbef      	blt.n	800c6e0 <__cleanup_context+0x54>
 800c700:	4618      	mov	r0, r3
 800c702:	4649      	mov	r1, r9
 800c704:	47c0      	blx	r8
 800c706:	6830      	ldr	r0, [r6, #0]
 800c708:	4649      	mov	r1, r9
 800c70a:	47c0      	blx	r8
 800c70c:	2300      	movs	r3, #0
 800c70e:	4638      	mov	r0, r7
 800c710:	e9c6 3300 	strd	r3, r3, [r6]
 800c714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c718:	3401      	adds	r4, #1
 800c71a:	f145 0500 	adc.w	r5, r5, #0
 800c71e:	4294      	cmp	r4, r2
 800c720:	eb75 010c 	sbcs.w	r1, r5, ip
 800c724:	dbdc      	blt.n	800c6e0 <__cleanup_context+0x54>
 800c726:	4618      	mov	r0, r3
 800c728:	4649      	mov	r1, r9
 800c72a:	47c0      	blx	r8
 800c72c:	6830      	ldr	r0, [r6, #0]
 800c72e:	e7eb      	b.n	800c708 <__cleanup_context+0x7c>
 800c730:	4607      	mov	r7, r0
 800c732:	2300      	movs	r3, #0
 800c734:	4638      	mov	r0, r7
 800c736:	e9c6 3300 	strd	r3, r3, [r6]
 800c73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73e:	f7fb fd87 	bl	8008250 <rcutils_reset_error>
 800c742:	e7b7      	b.n	800c6b4 <__cleanup_context+0x28>
 800c744:	f7ff ff7e 	bl	800c644 <rcl_convert_rmw_ret_to_rcl_ret>
 800c748:	4607      	mov	r7, r0
 800c74a:	e7bc      	b.n	800c6c6 <__cleanup_context+0x3a>

0800c74c <rcl_init>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	1e05      	subs	r5, r0, #0
 800c752:	b0a7      	sub	sp, #156	; 0x9c
 800c754:	460e      	mov	r6, r1
 800c756:	4690      	mov	r8, r2
 800c758:	461f      	mov	r7, r3
 800c75a:	f340 80a0 	ble.w	800c89e <rcl_init+0x152>
 800c75e:	2900      	cmp	r1, #0
 800c760:	f000 80a0 	beq.w	800c8a4 <rcl_init+0x158>
 800c764:	f1a1 0e04 	sub.w	lr, r1, #4
 800c768:	f04f 0c00 	mov.w	ip, #0
 800c76c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800c770:	f10c 0c01 	add.w	ip, ip, #1
 800c774:	2c00      	cmp	r4, #0
 800c776:	f000 8095 	beq.w	800c8a4 <rcl_init+0x158>
 800c77a:	4565      	cmp	r5, ip
 800c77c:	d1f6      	bne.n	800c76c <rcl_init+0x20>
 800c77e:	f1b8 0f00 	cmp.w	r8, #0
 800c782:	f000 808f 	beq.w	800c8a4 <rcl_init+0x158>
 800c786:	f8d8 4000 	ldr.w	r4, [r8]
 800c78a:	2c00      	cmp	r4, #0
 800c78c:	f000 808a 	beq.w	800c8a4 <rcl_init+0x158>
 800c790:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800c794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c796:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	a821      	add	r0, sp, #132	; 0x84
 800c79e:	f8cc 3000 	str.w	r3, [ip]
 800c7a2:	f7fb fd31 	bl	8008208 <rcutils_allocator_is_valid>
 800c7a6:	f080 0001 	eor.w	r0, r0, #1
 800c7aa:	b2c0      	uxtb	r0, r0
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d179      	bne.n	800c8a4 <rcl_init+0x158>
 800c7b0:	2f00      	cmp	r7, #0
 800c7b2:	d077      	beq.n	800c8a4 <rcl_init+0x158>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d179      	bne.n	800c8ae <rcl_init+0x162>
 800c7ba:	2198      	movs	r1, #152	; 0x98
 800c7bc:	2001      	movs	r0, #1
 800c7be:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800c7c2:	4798      	blx	r3
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	6038      	str	r0, [r7, #0]
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	f000 80cd 	beq.w	800c968 <rcl_init+0x21c>
 800c7ce:	a802      	add	r0, sp, #8
 800c7d0:	f001 f9e2 	bl	800db98 <rmw_get_zero_initialized_context>
 800c7d4:	a902      	add	r1, sp, #8
 800c7d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7da:	2270      	movs	r2, #112	; 0x70
 800c7dc:	f004 fc7c 	bl	80110d8 <memcpy>
 800c7e0:	f8d7 e000 	ldr.w	lr, [r7]
 800c7e4:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800c7e8:	4674      	mov	r4, lr
 800c7ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7f0:	f8dc 3000 	ldr.w	r3, [ip]
 800c7f4:	f10e 0114 	add.w	r1, lr, #20
 800c7f8:	4640      	mov	r0, r8
 800c7fa:	6023      	str	r3, [r4, #0]
 800c7fc:	f000 f968 	bl	800cad0 <rcl_init_options_copy>
 800c800:	4604      	mov	r4, r0
 800c802:	2800      	cmp	r0, #0
 800c804:	d144      	bne.n	800c890 <rcl_init+0x144>
 800c806:	f8d7 9000 	ldr.w	r9, [r7]
 800c80a:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800c80e:	f8c9 0020 	str.w	r0, [r9, #32]
 800c812:	f8c9 5018 	str.w	r5, [r9, #24]
 800c816:	f8c9 a01c 	str.w	sl, [r9, #28]
 800c81a:	2d00      	cmp	r5, #0
 800c81c:	d04e      	beq.n	800c8bc <rcl_init+0x170>
 800c81e:	2e00      	cmp	r6, #0
 800c820:	d04c      	beq.n	800c8bc <rcl_init+0x170>
 800c822:	2104      	movs	r1, #4
 800c824:	4628      	mov	r0, r5
 800c826:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800c82a:	4798      	blx	r3
 800c82c:	f8c9 0020 	str.w	r0, [r9, #32]
 800c830:	f8d7 9000 	ldr.w	r9, [r7]
 800c834:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800c838:	46cb      	mov	fp, r9
 800c83a:	b343      	cbz	r3, 800c88e <rcl_init+0x142>
 800c83c:	2d01      	cmp	r5, #1
 800c83e:	f17a 0300 	sbcs.w	r3, sl, #0
 800c842:	db3b      	blt.n	800c8bc <rcl_init+0x170>
 800c844:	2400      	movs	r4, #0
 800c846:	3e04      	subs	r6, #4
 800c848:	46a1      	mov	r9, r4
 800c84a:	e00b      	b.n	800c864 <rcl_init+0x118>
 800c84c:	6831      	ldr	r1, [r6, #0]
 800c84e:	f004 fc43 	bl	80110d8 <memcpy>
 800c852:	3401      	adds	r4, #1
 800c854:	f149 0900 	adc.w	r9, r9, #0
 800c858:	45ca      	cmp	sl, r9
 800c85a:	bf08      	it	eq
 800c85c:	42a5      	cmpeq	r5, r4
 800c85e:	d02b      	beq.n	800c8b8 <rcl_init+0x16c>
 800c860:	f8d7 b000 	ldr.w	fp, [r7]
 800c864:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800c868:	f7f3 fd44 	bl	80002f4 <strlen>
 800c86c:	1c42      	adds	r2, r0, #1
 800c86e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c870:	4610      	mov	r0, r2
 800c872:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c874:	f8db b020 	ldr.w	fp, [fp, #32]
 800c878:	9201      	str	r2, [sp, #4]
 800c87a:	4798      	blx	r3
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800c882:	6a1b      	ldr	r3, [r3, #32]
 800c884:	9a01      	ldr	r2, [sp, #4]
 800c886:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d1de      	bne.n	800c84c <rcl_init+0x100>
 800c88e:	240a      	movs	r4, #10
 800c890:	4638      	mov	r0, r7
 800c892:	f7ff fefb 	bl	800c68c <__cleanup_context>
 800c896:	4620      	mov	r0, r4
 800c898:	b027      	add	sp, #156	; 0x9c
 800c89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c89e:	2900      	cmp	r1, #0
 800c8a0:	f43f af6d 	beq.w	800c77e <rcl_init+0x32>
 800c8a4:	240b      	movs	r4, #11
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	b027      	add	sp, #156	; 0x9c
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ae:	2464      	movs	r4, #100	; 0x64
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	b027      	add	sp, #156	; 0x9c
 800c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b8:	f8d7 9000 	ldr.w	r9, [r7]
 800c8bc:	493f      	ldr	r1, [pc, #252]	; (800c9bc <rcl_init+0x270>)
 800c8be:	680b      	ldr	r3, [r1, #0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	d04c      	beq.n	800c95e <rcl_init+0x212>
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	600b      	str	r3, [r1, #0]
 800c8ca:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800c8ce:	607b      	str	r3, [r7, #4]
 800c8d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800c8d8:	d05d      	beq.n	800c996 <rcl_init+0x24a>
 800c8da:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d044      	beq.n	800c96c <rcl_init+0x220>
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d04e      	beq.n	800c984 <rcl_init+0x238>
 800c8e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ea:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800c8ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d05a      	beq.n	800c9ac <rcl_init+0x260>
 800c8f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c8f8:	b953      	cbnz	r3, 800c910 <rcl_init+0x1c4>
 800c8fa:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800c8fe:	2801      	cmp	r0, #1
 800c900:	d008      	beq.n	800c914 <rcl_init+0x1c8>
 800c902:	a921      	add	r1, sp, #132	; 0x84
 800c904:	4630      	mov	r0, r6
 800c906:	f003 fd61 	bl	80103cc <rcl_get_discovery_static_peers>
 800c90a:	4604      	mov	r4, r0
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d1bf      	bne.n	800c890 <rcl_init+0x144>
 800c910:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800c914:	f003 fd50 	bl	80103b8 <rcl_automatic_discovery_range_to_string>
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	aa20      	add	r2, sp, #128	; 0x80
 800c91c:	a91f      	add	r1, sp, #124	; 0x7c
 800c91e:	695b      	ldr	r3, [r3, #20]
 800c920:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c922:	f000 fdf3 	bl	800d50c <rcl_validate_enclave_name>
 800c926:	4604      	mov	r4, r0
 800c928:	2800      	cmp	r0, #0
 800c92a:	d1b1      	bne.n	800c890 <rcl_init+0x144>
 800c92c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c92e:	bb83      	cbnz	r3, 800c992 <rcl_init+0x246>
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	694b      	ldr	r3, [r1, #20]
 800c934:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c938:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c93a:	f000 fc97 	bl	800d26c <rcl_get_security_options_from_environment>
 800c93e:	4604      	mov	r4, r0
 800c940:	2800      	cmp	r0, #0
 800c942:	d1a5      	bne.n	800c890 <rcl_init+0x144>
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	6948      	ldr	r0, [r1, #20]
 800c948:	3128      	adds	r1, #40	; 0x28
 800c94a:	3018      	adds	r0, #24
 800c94c:	f001 fb98 	bl	800e080 <rmw_init>
 800c950:	4604      	mov	r4, r0
 800c952:	2800      	cmp	r0, #0
 800c954:	d0a7      	beq.n	800c8a6 <rcl_init+0x15a>
 800c956:	f7ff fe75 	bl	800c644 <rcl_convert_rmw_ret_to_rcl_ret>
 800c95a:	4604      	mov	r4, r0
 800c95c:	e798      	b.n	800c890 <rcl_init+0x144>
 800c95e:	2201      	movs	r2, #1
 800c960:	4618      	mov	r0, r3
 800c962:	600a      	str	r2, [r1, #0]
 800c964:	4613      	mov	r3, r2
 800c966:	e7b0      	b.n	800c8ca <rcl_init+0x17e>
 800c968:	240a      	movs	r4, #10
 800c96a:	e79c      	b.n	800c8a6 <rcl_init+0x15a>
 800c96c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800c970:	f000 f90c 	bl	800cb8c <rcl_get_localhost_only>
 800c974:	4604      	mov	r4, r0
 800c976:	2800      	cmp	r0, #0
 800c978:	d18a      	bne.n	800c890 <rcl_init+0x144>
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800c980:	6955      	ldr	r5, [r2, #20]
 800c982:	e7ae      	b.n	800c8e2 <rcl_init+0x196>
 800c984:	2302      	movs	r3, #2
 800c986:	2200      	movs	r2, #0
 800c988:	4618      	mov	r0, r3
 800c98a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800c98e:	63ea      	str	r2, [r5, #60]	; 0x3c
 800c990:	e7c0      	b.n	800c914 <rcl_init+0x1c8>
 800c992:	2401      	movs	r4, #1
 800c994:	e77c      	b.n	800c890 <rcl_init+0x144>
 800c996:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800c99a:	f003 fd7d 	bl	8010498 <rcl_get_default_domain_id>
 800c99e:	4604      	mov	r4, r0
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	f47f af75 	bne.w	800c890 <rcl_init+0x144>
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	695d      	ldr	r5, [r3, #20]
 800c9aa:	e796      	b.n	800c8da <rcl_init+0x18e>
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f003 fcc1 	bl	8010334 <rcl_get_automatic_discovery_range>
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d09e      	beq.n	800c8f6 <rcl_init+0x1aa>
 800c9b8:	e76a      	b.n	800c890 <rcl_init+0x144>
 800c9ba:	bf00      	nop
 800c9bc:	2000db3c 	.word	0x2000db3c

0800c9c0 <rcl_get_zero_initialized_init_options>:
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	4770      	bx	lr

0800c9c4 <rcl_init_options_init>:
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	b570      	push	{r4, r5, r6, lr}
 800c9c8:	b09e      	sub	sp, #120	; 0x78
 800c9ca:	ad23      	add	r5, sp, #140	; 0x8c
 800c9cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d046      	beq.n	800ca62 <rcl_init_options_init+0x9e>
 800c9d4:	6803      	ldr	r3, [r0, #0]
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	b133      	cbz	r3, 800c9e8 <rcl_init_options_init+0x24>
 800c9da:	2564      	movs	r5, #100	; 0x64
 800c9dc:	4628      	mov	r0, r5
 800c9de:	b01e      	add	sp, #120	; 0x78
 800c9e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9e4:	b004      	add	sp, #16
 800c9e6:	4770      	bx	lr
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f7fb fc0d 	bl	8008208 <rcutils_allocator_is_valid>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d037      	beq.n	800ca62 <rcl_init_options_init+0x9e>
 800c9f2:	46ae      	mov	lr, r5
 800c9f4:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800c9f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c9fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca00:	f8de 3000 	ldr.w	r3, [lr]
 800ca04:	2070      	movs	r0, #112	; 0x70
 800ca06:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800ca08:	f8cc 3000 	str.w	r3, [ip]
 800ca0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ca0e:	4798      	blx	r3
 800ca10:	4606      	mov	r6, r0
 800ca12:	6020      	str	r0, [r4, #0]
 800ca14:	b338      	cbz	r0, 800ca66 <rcl_init_options_init+0xa2>
 800ca16:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800ca1a:	4686      	mov	lr, r0
 800ca1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca24:	f8dc 3000 	ldr.w	r3, [ip]
 800ca28:	a802      	add	r0, sp, #8
 800ca2a:	f8ce 3000 	str.w	r3, [lr]
 800ca2e:	f001 f8c7 	bl	800dbc0 <rmw_get_zero_initialized_init_options>
 800ca32:	2258      	movs	r2, #88	; 0x58
 800ca34:	a902      	add	r1, sp, #8
 800ca36:	f106 0018 	add.w	r0, r6, #24
 800ca3a:	f004 fb4d 	bl	80110d8 <memcpy>
 800ca3e:	ab26      	add	r3, sp, #152	; 0x98
 800ca40:	6826      	ldr	r6, [r4, #0]
 800ca42:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ca46:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ca4a:	f106 0018 	add.w	r0, r6, #24
 800ca4e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ca52:	f001 fa45 	bl	800dee0 <rmw_init_options_init>
 800ca56:	4605      	mov	r5, r0
 800ca58:	b938      	cbnz	r0, 800ca6a <rcl_init_options_init+0xa6>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 800ca60:	e7bc      	b.n	800c9dc <rcl_init_options_init+0x18>
 800ca62:	250b      	movs	r5, #11
 800ca64:	e7ba      	b.n	800c9dc <rcl_init_options_init+0x18>
 800ca66:	250a      	movs	r5, #10
 800ca68:	e7b8      	b.n	800c9dc <rcl_init_options_init+0x18>
 800ca6a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800ca6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ca6e:	6820      	ldr	r0, [r4, #0]
 800ca70:	4798      	blx	r3
 800ca72:	4628      	mov	r0, r5
 800ca74:	f7ff fde6 	bl	800c644 <rcl_convert_rmw_ret_to_rcl_ret>
 800ca78:	4605      	mov	r5, r0
 800ca7a:	e7af      	b.n	800c9dc <rcl_init_options_init+0x18>

0800ca7c <rcl_init_options_fini>:
 800ca7c:	b530      	push	{r4, r5, lr}
 800ca7e:	b087      	sub	sp, #28
 800ca80:	b1f0      	cbz	r0, 800cac0 <rcl_init_options_fini+0x44>
 800ca82:	6803      	ldr	r3, [r0, #0]
 800ca84:	4604      	mov	r4, r0
 800ca86:	b1db      	cbz	r3, 800cac0 <rcl_init_options_fini+0x44>
 800ca88:	469c      	mov	ip, r3
 800ca8a:	f10d 0e04 	add.w	lr, sp, #4
 800ca8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca96:	f8dc 3000 	ldr.w	r3, [ip]
 800ca9a:	a801      	add	r0, sp, #4
 800ca9c:	f8ce 3000 	str.w	r3, [lr]
 800caa0:	f7fb fbb2 	bl	8008208 <rcutils_allocator_is_valid>
 800caa4:	b160      	cbz	r0, 800cac0 <rcl_init_options_fini+0x44>
 800caa6:	6820      	ldr	r0, [r4, #0]
 800caa8:	3018      	adds	r0, #24
 800caaa:	f001 fab3 	bl	800e014 <rmw_init_options_fini>
 800caae:	4605      	mov	r5, r0
 800cab0:	b950      	cbnz	r0, 800cac8 <rcl_init_options_fini+0x4c>
 800cab2:	6820      	ldr	r0, [r4, #0]
 800cab4:	9b02      	ldr	r3, [sp, #8]
 800cab6:	9905      	ldr	r1, [sp, #20]
 800cab8:	4798      	blx	r3
 800caba:	4628      	mov	r0, r5
 800cabc:	b007      	add	sp, #28
 800cabe:	bd30      	pop	{r4, r5, pc}
 800cac0:	250b      	movs	r5, #11
 800cac2:	4628      	mov	r0, r5
 800cac4:	b007      	add	sp, #28
 800cac6:	bd30      	pop	{r4, r5, pc}
 800cac8:	f7ff fdbc 	bl	800c644 <rcl_convert_rmw_ret_to_rcl_ret>
 800cacc:	4605      	mov	r5, r0
 800cace:	e7f8      	b.n	800cac2 <rcl_init_options_fini+0x46>

0800cad0 <rcl_init_options_copy>:
 800cad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad2:	b09d      	sub	sp, #116	; 0x74
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d04d      	beq.n	800cb74 <rcl_init_options_copy+0xa4>
 800cad8:	4604      	mov	r4, r0
 800cada:	6800      	ldr	r0, [r0, #0]
 800cadc:	2800      	cmp	r0, #0
 800cade:	d049      	beq.n	800cb74 <rcl_init_options_copy+0xa4>
 800cae0:	460d      	mov	r5, r1
 800cae2:	f7fb fb91 	bl	8008208 <rcutils_allocator_is_valid>
 800cae6:	2d00      	cmp	r5, #0
 800cae8:	d044      	beq.n	800cb74 <rcl_init_options_copy+0xa4>
 800caea:	f080 0001 	eor.w	r0, r0, #1
 800caee:	b2c0      	uxtb	r0, r0
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d13f      	bne.n	800cb74 <rcl_init_options_copy+0xa4>
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	b11b      	cbz	r3, 800cb00 <rcl_init_options_copy+0x30>
 800caf8:	2464      	movs	r4, #100	; 0x64
 800cafa:	4620      	mov	r0, r4
 800cafc:	b01d      	add	sp, #116	; 0x74
 800cafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb00:	6826      	ldr	r6, [r4, #0]
 800cb02:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800cb06:	46b6      	mov	lr, r6
 800cb08:	6837      	ldr	r7, [r6, #0]
 800cb0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb12:	f8de 3000 	ldr.w	r3, [lr]
 800cb16:	2070      	movs	r0, #112	; 0x70
 800cb18:	4619      	mov	r1, r3
 800cb1a:	f8cc 3000 	str.w	r3, [ip]
 800cb1e:	47b8      	blx	r7
 800cb20:	4606      	mov	r6, r0
 800cb22:	6028      	str	r0, [r5, #0]
 800cb24:	b350      	cbz	r0, 800cb7c <rcl_init_options_copy+0xac>
 800cb26:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800cb2a:	4686      	mov	lr, r0
 800cb2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb34:	f8dc 3000 	ldr.w	r3, [ip]
 800cb38:	4668      	mov	r0, sp
 800cb3a:	f8ce 3000 	str.w	r3, [lr]
 800cb3e:	f001 f83f 	bl	800dbc0 <rmw_get_zero_initialized_init_options>
 800cb42:	2258      	movs	r2, #88	; 0x58
 800cb44:	4669      	mov	r1, sp
 800cb46:	f106 0018 	add.w	r0, r6, #24
 800cb4a:	f004 fac5 	bl	80110d8 <memcpy>
 800cb4e:	6820      	ldr	r0, [r4, #0]
 800cb50:	6829      	ldr	r1, [r5, #0]
 800cb52:	3018      	adds	r0, #24
 800cb54:	3118      	adds	r1, #24
 800cb56:	f001 fa2b 	bl	800dfb0 <rmw_init_options_copy>
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d0cc      	beq.n	800cafa <rcl_init_options_copy+0x2a>
 800cb60:	f7fb fb60 	bl	8008224 <rcutils_get_error_string>
 800cb64:	f7fb fb74 	bl	8008250 <rcutils_reset_error>
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f7ff ff87 	bl	800ca7c <rcl_init_options_fini>
 800cb6e:	b138      	cbz	r0, 800cb80 <rcl_init_options_copy+0xb0>
 800cb70:	4604      	mov	r4, r0
 800cb72:	e7c2      	b.n	800cafa <rcl_init_options_copy+0x2a>
 800cb74:	240b      	movs	r4, #11
 800cb76:	4620      	mov	r0, r4
 800cb78:	b01d      	add	sp, #116	; 0x74
 800cb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb7c:	240a      	movs	r4, #10
 800cb7e:	e7bc      	b.n	800cafa <rcl_init_options_copy+0x2a>
 800cb80:	4620      	mov	r0, r4
 800cb82:	b01d      	add	sp, #116	; 0x74
 800cb84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb88:	f7ff bd5c 	b.w	800c644 <rcl_convert_rmw_ret_to_rcl_ret>

0800cb8c <rcl_get_localhost_only>:
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	2300      	movs	r3, #0
 800cb90:	b082      	sub	sp, #8
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	b1c0      	cbz	r0, 800cbc8 <rcl_get_localhost_only+0x3c>
 800cb96:	4604      	mov	r4, r0
 800cb98:	a901      	add	r1, sp, #4
 800cb9a:	480d      	ldr	r0, [pc, #52]	; (800cbd0 <rcl_get_localhost_only+0x44>)
 800cb9c:	f000 fcfe 	bl	800d59c <rcutils_get_env>
 800cba0:	b110      	cbz	r0, 800cba8 <rcl_get_localhost_only+0x1c>
 800cba2:	2001      	movs	r0, #1
 800cba4:	b002      	add	sp, #8
 800cba6:	bd10      	pop	{r4, pc}
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	b10b      	cbz	r3, 800cbb0 <rcl_get_localhost_only+0x24>
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b923      	cbnz	r3, 800cbba <rcl_get_localhost_only+0x2e>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	7023      	strb	r3, [r4, #0]
 800cbb6:	b002      	add	sp, #8
 800cbb8:	bd10      	pop	{r4, pc}
 800cbba:	2b31      	cmp	r3, #49	; 0x31
 800cbbc:	bf0c      	ite	eq
 800cbbe:	2301      	moveq	r3, #1
 800cbc0:	2302      	movne	r3, #2
 800cbc2:	7023      	strb	r3, [r4, #0]
 800cbc4:	b002      	add	sp, #8
 800cbc6:	bd10      	pop	{r4, pc}
 800cbc8:	200b      	movs	r0, #11
 800cbca:	b002      	add	sp, #8
 800cbcc:	bd10      	pop	{r4, pc}
 800cbce:	bf00      	nop
 800cbd0:	08012b64 	.word	0x08012b64

0800cbd4 <rcl_get_zero_initialized_node>:
 800cbd4:	4a03      	ldr	r2, [pc, #12]	; (800cbe4 <rcl_get_zero_initialized_node+0x10>)
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbdc:	e883 0003 	stmia.w	r3, {r0, r1}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	4770      	bx	lr
 800cbe4:	08012ba8 	.word	0x08012ba8

0800cbe8 <rcl_node_init>:
 800cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	b0ab      	sub	sp, #172	; 0xac
 800cbee:	4604      	mov	r4, r0
 800cbf0:	460e      	mov	r6, r1
 800cbf2:	4615      	mov	r5, r2
 800cbf4:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 800cbf8:	a825      	add	r0, sp, #148	; 0x94
 800cbfa:	461f      	mov	r7, r3
 800cbfc:	f003 fe72 	bl	80108e4 <rcl_guard_condition_get_default_options>
 800cc00:	f1b8 0f00 	cmp.w	r8, #0
 800cc04:	f000 80f3 	beq.w	800cdee <rcl_node_init+0x206>
 800cc08:	4640      	mov	r0, r8
 800cc0a:	f7fb fafd 	bl	8008208 <rcutils_allocator_is_valid>
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	bf18      	it	ne
 800cc12:	2c00      	cmpne	r4, #0
 800cc14:	f080 0001 	eor.w	r0, r0, #1
 800cc18:	bf0c      	ite	eq
 800cc1a:	f04f 0c01 	moveq.w	ip, #1
 800cc1e:	f04f 0c00 	movne.w	ip, #0
 800cc22:	2e00      	cmp	r6, #0
 800cc24:	bf08      	it	eq
 800cc26:	f04c 0c01 	orreq.w	ip, ip, #1
 800cc2a:	ea4c 0c00 	orr.w	ip, ip, r0
 800cc2e:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800cc32:	f040 80dc 	bne.w	800cdee <rcl_node_init+0x206>
 800cc36:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800cc3a:	f1ba 0f00 	cmp.w	sl, #0
 800cc3e:	f040 80fc 	bne.w	800ce3a <rcl_node_init+0x252>
 800cc42:	2f00      	cmp	r7, #0
 800cc44:	f000 80d3 	beq.w	800cdee <rcl_node_init+0x206>
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff fd19 	bl	800c680 <rcl_context_is_valid>
 800cc4e:	4683      	mov	fp, r0
 800cc50:	2800      	cmp	r0, #0
 800cc52:	f000 80d2 	beq.w	800cdfa <rcl_node_init+0x212>
 800cc56:	4652      	mov	r2, sl
 800cc58:	4630      	mov	r0, r6
 800cc5a:	a924      	add	r1, sp, #144	; 0x90
 800cc5c:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 800cc60:	f001 f8b4 	bl	800ddcc <rmw_validate_node_name>
 800cc64:	4682      	mov	sl, r0
 800cc66:	2800      	cmp	r0, #0
 800cc68:	f040 80c3 	bne.w	800cdf2 <rcl_node_init+0x20a>
 800cc6c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f040 80f1 	bne.w	800ce56 <rcl_node_init+0x26e>
 800cc74:	4628      	mov	r0, r5
 800cc76:	f7f3 fb3d 	bl	80002f4 <strlen>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f040 80c0 	bne.w	800ce00 <rcl_node_init+0x218>
 800cc80:	4d79      	ldr	r5, [pc, #484]	; (800ce68 <rcl_node_init+0x280>)
 800cc82:	a924      	add	r1, sp, #144	; 0x90
 800cc84:	2200      	movs	r2, #0
 800cc86:	4628      	mov	r0, r5
 800cc88:	f001 f882 	bl	800dd90 <rmw_validate_namespace>
 800cc8c:	4682      	mov	sl, r0
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f040 80af 	bne.w	800cdf2 <rcl_node_init+0x20a>
 800cc94:	9824      	ldr	r0, [sp, #144]	; 0x90
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f040 80d5 	bne.w	800ce46 <rcl_node_init+0x25e>
 800cc9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cca0:	2080      	movs	r0, #128	; 0x80
 800cca2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cca6:	4798      	blx	r3
 800cca8:	4682      	mov	sl, r0
 800ccaa:	6060      	str	r0, [r4, #4]
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f000 80cf 	beq.w	800ce50 <rcl_node_init+0x268>
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	a808      	add	r0, sp, #32
 800ccb8:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800ccbc:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 800ccc0:	f000 f922 	bl	800cf08 <rcl_node_get_default_options>
 800ccc4:	a908      	add	r1, sp, #32
 800ccc6:	4650      	mov	r0, sl
 800ccc8:	2270      	movs	r2, #112	; 0x70
 800ccca:	f004 fa05 	bl	80110d8 <memcpy>
 800ccce:	6861      	ldr	r1, [r4, #4]
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	6027      	str	r7, [r4, #0]
 800ccd4:	f000 f926 	bl	800cf24 <rcl_node_options_copy>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d158      	bne.n	800cd8e <rcl_node_init+0x1a6>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7f3 fb09 	bl	80002f4 <strlen>
 800cce2:	4428      	add	r0, r5
 800cce4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800cce8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ccec:	2b2f      	cmp	r3, #47	; 0x2f
 800ccee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	bf0c      	ite	eq
 800ccf6:	4b5d      	ldreq	r3, [pc, #372]	; (800ce6c <rcl_node_init+0x284>)
 800ccf8:	4b5d      	ldrne	r3, [pc, #372]	; (800ce70 <rcl_node_init+0x288>)
 800ccfa:	9302      	str	r3, [sp, #8]
 800ccfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800cd06:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800cd0a:	f000 fc6f 	bl	800d5ec <rcutils_format_string_limit>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 800cd14:	4631      	mov	r1, r6
 800cd16:	6818      	ldr	r0, [r3, #0]
 800cd18:	462a      	mov	r2, r5
 800cd1a:	6866      	ldr	r6, [r4, #4]
 800cd1c:	3028      	adds	r0, #40	; 0x28
 800cd1e:	f001 fc09 	bl	800e534 <rmw_create_node>
 800cd22:	6863      	ldr	r3, [r4, #4]
 800cd24:	6730      	str	r0, [r6, #112]	; 0x70
 800cd26:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d032      	beq.n	800cd92 <rcl_node_init+0x1aa>
 800cd2c:	f001 fc92 	bl	800e654 <rmw_node_get_graph_guard_condition>
 800cd30:	4682      	mov	sl, r0
 800cd32:	b360      	cbz	r0, 800cd8e <rcl_node_init+0x1a6>
 800cd34:	f8d8 3000 	ldr.w	r3, [r8]
 800cd38:	2008      	movs	r0, #8
 800cd3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cd3e:	6866      	ldr	r6, [r4, #4]
 800cd40:	4798      	blx	r3
 800cd42:	6863      	ldr	r3, [r4, #4]
 800cd44:	6770      	str	r0, [r6, #116]	; 0x74
 800cd46:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 800cd4a:	f1bb 0f00 	cmp.w	fp, #0
 800cd4e:	d020      	beq.n	800cd92 <rcl_node_init+0x1aa>
 800cd50:	a806      	add	r0, sp, #24
 800cd52:	ae25      	add	r6, sp, #148	; 0x94
 800cd54:	f003 fd3a 	bl	80107cc <rcl_get_zero_initialized_guard_condition>
 800cd58:	a806      	add	r0, sp, #24
 800cd5a:	6863      	ldr	r3, [r4, #4]
 800cd5c:	46c4      	mov	ip, r8
 800cd5e:	c803      	ldmia	r0, {r0, r1}
 800cd60:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 800cd64:	e88b 0003 	stmia.w	fp, {r0, r1}
 800cd68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cd6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cd6e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd72:	6033      	str	r3, [r6, #0]
 800cd74:	ab2a      	add	r3, sp, #168	; 0xa8
 800cd76:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800cd7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cd7e:	4651      	mov	r1, sl
 800cd80:	463a      	mov	r2, r7
 800cd82:	4670      	mov	r0, lr
 800cd84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800cd86:	f003 fd2b 	bl	80107e0 <rcl_guard_condition_init_from_rmw>
 800cd8a:	4682      	mov	sl, r0
 800cd8c:	b328      	cbz	r0, 800cdda <rcl_node_init+0x1f2>
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	b1f3      	cbz	r3, 800cdd0 <rcl_node_init+0x1e8>
 800cd92:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cd94:	b128      	cbz	r0, 800cda2 <rcl_node_init+0x1ba>
 800cd96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd9a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cd9e:	4798      	blx	r3
 800cda0:	6863      	ldr	r3, [r4, #4]
 800cda2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800cda4:	b110      	cbz	r0, 800cdac <rcl_node_init+0x1c4>
 800cda6:	f001 fbd7 	bl	800e558 <rmw_destroy_node>
 800cdaa:	6863      	ldr	r3, [r4, #4]
 800cdac:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800cdae:	b148      	cbz	r0, 800cdc4 <rcl_node_init+0x1dc>
 800cdb0:	f003 fd72 	bl	8010898 <rcl_guard_condition_fini>
 800cdb4:	6863      	ldr	r3, [r4, #4]
 800cdb6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cdba:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800cdbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdc0:	4798      	blx	r3
 800cdc2:	6863      	ldr	r3, [r4, #4]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cdca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdce:	4798      	blx	r3
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f04f 0a01 	mov.w	sl, #1
 800cdd6:	e9c4 3300 	strd	r3, r3, [r4]
 800cdda:	f1b9 0f00 	cmp.w	r9, #0
 800cdde:	d008      	beq.n	800cdf2 <rcl_node_init+0x20a>
 800cde0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cde4:	4628      	mov	r0, r5
 800cde6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cdea:	4798      	blx	r3
 800cdec:	e001      	b.n	800cdf2 <rcl_node_init+0x20a>
 800cdee:	f04f 0a0b 	mov.w	sl, #11
 800cdf2:	4650      	mov	r0, sl
 800cdf4:	b02b      	add	sp, #172	; 0xac
 800cdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfa:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800cdfe:	e7f8      	b.n	800cdf2 <rcl_node_init+0x20a>
 800ce00:	782b      	ldrb	r3, [r5, #0]
 800ce02:	2b2f      	cmp	r3, #47	; 0x2f
 800ce04:	f43f af3d 	beq.w	800cc82 <rcl_node_init+0x9a>
 800ce08:	9503      	str	r5, [sp, #12]
 800ce0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <rcl_node_init+0x28c>)
 800ce12:	9302      	str	r3, [sp, #8]
 800ce14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ce1e:	f000 fbe5 	bl	800d5ec <rcutils_format_string_limit>
 800ce22:	4605      	mov	r5, r0
 800ce24:	b1e0      	cbz	r0, 800ce60 <rcl_node_init+0x278>
 800ce26:	2200      	movs	r2, #0
 800ce28:	a924      	add	r1, sp, #144	; 0x90
 800ce2a:	9224      	str	r2, [sp, #144]	; 0x90
 800ce2c:	f000 ffb0 	bl	800dd90 <rmw_validate_namespace>
 800ce30:	4682      	mov	sl, r0
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d1d4      	bne.n	800cde0 <rcl_node_init+0x1f8>
 800ce36:	46d9      	mov	r9, fp
 800ce38:	e72c      	b.n	800cc94 <rcl_node_init+0xac>
 800ce3a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800ce3e:	4650      	mov	r0, sl
 800ce40:	b02b      	add	sp, #172	; 0xac
 800ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce46:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800ce4a:	f000 ffb3 	bl	800ddb4 <rmw_namespace_validation_result_string>
 800ce4e:	e7c4      	b.n	800cdda <rcl_node_init+0x1f2>
 800ce50:	f04f 0a0a 	mov.w	sl, #10
 800ce54:	e7c1      	b.n	800cdda <rcl_node_init+0x1f2>
 800ce56:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800ce5a:	f001 f80b 	bl	800de74 <rmw_node_name_validation_result_string>
 800ce5e:	e7c8      	b.n	800cdf2 <rcl_node_init+0x20a>
 800ce60:	f04f 0a0a 	mov.w	sl, #10
 800ce64:	e7c5      	b.n	800cdf2 <rcl_node_init+0x20a>
 800ce66:	bf00      	nop
 800ce68:	08012b7c 	.word	0x08012b7c
 800ce6c:	08012a00 	.word	0x08012a00
 800ce70:	08012b84 	.word	0x08012b84
 800ce74:	08012b80 	.word	0x08012b80

0800ce78 <rcl_node_is_valid>:
 800ce78:	b130      	cbz	r0, 800ce88 <rcl_node_is_valid+0x10>
 800ce7a:	6843      	ldr	r3, [r0, #4]
 800ce7c:	b123      	cbz	r3, 800ce88 <rcl_node_is_valid+0x10>
 800ce7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce80:	b113      	cbz	r3, 800ce88 <rcl_node_is_valid+0x10>
 800ce82:	6800      	ldr	r0, [r0, #0]
 800ce84:	f7ff bbfc 	b.w	800c680 <rcl_context_is_valid>
 800ce88:	2000      	movs	r0, #0
 800ce8a:	4770      	bx	lr

0800ce8c <rcl_node_get_name>:
 800ce8c:	b120      	cbz	r0, 800ce98 <rcl_node_get_name+0xc>
 800ce8e:	6840      	ldr	r0, [r0, #4]
 800ce90:	b110      	cbz	r0, 800ce98 <rcl_node_get_name+0xc>
 800ce92:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800ce94:	b100      	cbz	r0, 800ce98 <rcl_node_get_name+0xc>
 800ce96:	6880      	ldr	r0, [r0, #8]
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop

0800ce9c <rcl_node_get_namespace>:
 800ce9c:	b120      	cbz	r0, 800cea8 <rcl_node_get_namespace+0xc>
 800ce9e:	6840      	ldr	r0, [r0, #4]
 800cea0:	b110      	cbz	r0, 800cea8 <rcl_node_get_namespace+0xc>
 800cea2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800cea4:	b100      	cbz	r0, 800cea8 <rcl_node_get_namespace+0xc>
 800cea6:	68c0      	ldr	r0, [r0, #12]
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop

0800ceac <rcl_node_get_options>:
 800ceac:	b128      	cbz	r0, 800ceba <rcl_node_get_options+0xe>
 800ceae:	6840      	ldr	r0, [r0, #4]
 800ceb0:	b118      	cbz	r0, 800ceba <rcl_node_get_options+0xe>
 800ceb2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	bf08      	it	eq
 800ceb8:	2000      	moveq	r0, #0
 800ceba:	4770      	bx	lr

0800cebc <rcl_node_get_rmw_handle>:
 800cebc:	b110      	cbz	r0, 800cec4 <rcl_node_get_rmw_handle+0x8>
 800cebe:	6840      	ldr	r0, [r0, #4]
 800cec0:	b100      	cbz	r0, 800cec4 <rcl_node_get_rmw_handle+0x8>
 800cec2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop

0800cec8 <rcl_get_disable_loaned_message>:
 800cec8:	b510      	push	{r4, lr}
 800ceca:	2300      	movs	r3, #0
 800cecc:	b082      	sub	sp, #8
 800cece:	9301      	str	r3, [sp, #4]
 800ced0:	b1a0      	cbz	r0, 800cefc <rcl_get_disable_loaned_message+0x34>
 800ced2:	4604      	mov	r4, r0
 800ced4:	a901      	add	r1, sp, #4
 800ced6:	480b      	ldr	r0, [pc, #44]	; (800cf04 <rcl_get_disable_loaned_message+0x3c>)
 800ced8:	f000 fb60 	bl	800d59c <rcutils_get_env>
 800cedc:	b110      	cbz	r0, 800cee4 <rcl_get_disable_loaned_message+0x1c>
 800cede:	2001      	movs	r0, #1
 800cee0:	b002      	add	sp, #8
 800cee2:	bd10      	pop	{r4, pc}
 800cee4:	9a01      	ldr	r2, [sp, #4]
 800cee6:	2000      	movs	r0, #0
 800cee8:	7813      	ldrb	r3, [r2, #0]
 800ceea:	3b31      	subs	r3, #49	; 0x31
 800ceec:	bf08      	it	eq
 800ceee:	7853      	ldrbeq	r3, [r2, #1]
 800cef0:	fab3 f383 	clz	r3, r3
 800cef4:	095b      	lsrs	r3, r3, #5
 800cef6:	7023      	strb	r3, [r4, #0]
 800cef8:	b002      	add	sp, #8
 800cefa:	bd10      	pop	{r4, pc}
 800cefc:	200b      	movs	r0, #11
 800cefe:	b002      	add	sp, #8
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	bf00      	nop
 800cf04:	08012b8c 	.word	0x08012b8c

0800cf08 <rcl_node_get_default_options>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	2270      	movs	r2, #112	; 0x70
 800cf0e:	2100      	movs	r1, #0
 800cf10:	f004 f8f0 	bl	80110f4 <memset>
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7fb f969 	bl	80081ec <rcutils_get_default_allocator>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	7523      	strb	r3, [r4, #20]
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	bf00      	nop

0800cf24 <rcl_node_options_copy>:
 800cf24:	2800      	cmp	r0, #0
 800cf26:	bf18      	it	ne
 800cf28:	4288      	cmpne	r0, r1
 800cf2a:	d01b      	beq.n	800cf64 <rcl_node_options_copy+0x40>
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	fab1 f681 	clz	r6, r1
 800cf32:	460c      	mov	r4, r1
 800cf34:	0976      	lsrs	r6, r6, #5
 800cf36:	b199      	cbz	r1, 800cf60 <rcl_node_options_copy+0x3c>
 800cf38:	4605      	mov	r5, r0
 800cf3a:	8a87      	ldrh	r7, [r0, #20]
 800cf3c:	4684      	mov	ip, r0
 800cf3e:	468e      	mov	lr, r1
 800cf40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cf46:	682b      	ldr	r3, [r5, #0]
 800cf48:	2250      	movs	r2, #80	; 0x50
 800cf4a:	f10c 0118 	add.w	r1, ip, #24
 800cf4e:	f104 0018 	add.w	r0, r4, #24
 800cf52:	f8ce 3000 	str.w	r3, [lr]
 800cf56:	82a7      	strh	r7, [r4, #20]
 800cf58:	f004 f8be 	bl	80110d8 <memcpy>
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf60:	200b      	movs	r0, #11
 800cf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf64:	200b      	movs	r0, #11
 800cf66:	4770      	bx	lr

0800cf68 <rcl_node_resolve_name>:
 800cf68:	b082      	sub	sp, #8
 800cf6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6e:	b091      	sub	sp, #68	; 0x44
 800cf70:	ac1a      	add	r4, sp, #104	; 0x68
 800cf72:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800cf76:	e884 000c 	stmia.w	r4, {r2, r3}
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d03d      	beq.n	800cffa <rcl_node_resolve_name+0x92>
 800cf7e:	460c      	mov	r4, r1
 800cf80:	4605      	mov	r5, r0
 800cf82:	f7ff ff93 	bl	800ceac <rcl_node_get_options>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d03a      	beq.n	800d000 <rcl_node_resolve_name+0x98>
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f7ff ff7e 	bl	800ce8c <rcl_node_get_name>
 800cf90:	4606      	mov	r6, r0
 800cf92:	4628      	mov	r0, r5
 800cf94:	ad0b      	add	r5, sp, #44	; 0x2c
 800cf96:	f7ff ff81 	bl	800ce9c <rcl_node_get_namespace>
 800cf9a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	46ac      	mov	ip, r5
 800cfa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cfa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfaa:	f8de 3000 	ldr.w	r3, [lr]
 800cfae:	f8cc 3000 	str.w	r3, [ip]
 800cfb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfb4:	b30b      	cbz	r3, 800cffa <rcl_node_resolve_name+0x92>
 800cfb6:	4689      	mov	r9, r1
 800cfb8:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800cfbc:	f000 fc98 	bl	800d8f0 <rcutils_get_zero_initialized_string_map>
 800cfc0:	ab10      	add	r3, sp, #64	; 0x40
 800cfc2:	9008      	str	r0, [sp, #32]
 800cfc4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cfc8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cfcc:	2100      	movs	r1, #0
 800cfce:	a808      	add	r0, sp, #32
 800cfd0:	e895 000c 	ldmia.w	r5, {r2, r3}
 800cfd4:	f000 fcde 	bl	800d994 <rcutils_string_map_init>
 800cfd8:	4683      	mov	fp, r0
 800cfda:	b1a0      	cbz	r0, 800d006 <rcl_node_resolve_name+0x9e>
 800cfdc:	f7fb f922 	bl	8008224 <rcutils_get_error_string>
 800cfe0:	f7fb f936 	bl	8008250 <rcutils_reset_error>
 800cfe4:	f1bb 0f0a 	cmp.w	fp, #10
 800cfe8:	bf18      	it	ne
 800cfea:	f04f 0b01 	movne.w	fp, #1
 800cfee:	4658      	mov	r0, fp
 800cff0:	b011      	add	sp, #68	; 0x44
 800cff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff6:	b002      	add	sp, #8
 800cff8:	4770      	bx	lr
 800cffa:	f04f 0b0b 	mov.w	fp, #11
 800cffe:	e7f6      	b.n	800cfee <rcl_node_resolve_name+0x86>
 800d000:	f04f 0b01 	mov.w	fp, #1
 800d004:	e7f3      	b.n	800cfee <rcl_node_resolve_name+0x86>
 800d006:	9009      	str	r0, [sp, #36]	; 0x24
 800d008:	9007      	str	r0, [sp, #28]
 800d00a:	a808      	add	r0, sp, #32
 800d00c:	f003 fbd8 	bl	80107c0 <rcl_get_default_topic_name_substitutions>
 800d010:	4683      	mov	fp, r0
 800d012:	b180      	cbz	r0, 800d036 <rcl_node_resolve_name+0xce>
 800d014:	280a      	cmp	r0, #10
 800d016:	a808      	add	r0, sp, #32
 800d018:	bf18      	it	ne
 800d01a:	f04f 0b01 	movne.w	fp, #1
 800d01e:	f000 fcf7 	bl	800da10 <rcutils_string_map_fini>
 800d022:	4604      	mov	r4, r0
 800d024:	2800      	cmp	r0, #0
 800d026:	d15b      	bne.n	800d0e0 <rcl_node_resolve_name+0x178>
 800d028:	4651      	mov	r1, sl
 800d02a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d02c:	47c8      	blx	r9
 800d02e:	4651      	mov	r1, sl
 800d030:	4620      	mov	r0, r4
 800d032:	47c8      	blx	r9
 800d034:	e7db      	b.n	800cfee <rcl_node_resolve_name+0x86>
 800d036:	ab09      	add	r3, sp, #36	; 0x24
 800d038:	46ec      	mov	ip, sp
 800d03a:	9305      	str	r3, [sp, #20]
 800d03c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d03e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d042:	682b      	ldr	r3, [r5, #0]
 800d044:	463a      	mov	r2, r7
 800d046:	4631      	mov	r1, r6
 800d048:	4620      	mov	r0, r4
 800d04a:	f8cc 3000 	str.w	r3, [ip]
 800d04e:	ab08      	add	r3, sp, #32
 800d050:	f003 fa56 	bl	8010500 <rcl_expand_topic_name>
 800d054:	4683      	mov	fp, r0
 800d056:	b9d8      	cbnz	r0, 800d090 <rcl_node_resolve_name+0x128>
 800d058:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d05a:	4602      	mov	r2, r0
 800d05c:	9009      	str	r0, [sp, #36]	; 0x24
 800d05e:	a90a      	add	r1, sp, #40	; 0x28
 800d060:	4620      	mov	r0, r4
 800d062:	f000 fdc5 	bl	800dbf0 <rmw_validate_full_topic_name>
 800d066:	bb50      	cbnz	r0, 800d0be <rcl_node_resolve_name+0x156>
 800d068:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d06a:	2d00      	cmp	r5, #0
 800d06c:	d140      	bne.n	800d0f0 <rcl_node_resolve_name+0x188>
 800d06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d070:	a808      	add	r0, sp, #32
 800d072:	601c      	str	r4, [r3, #0]
 800d074:	f000 fccc 	bl	800da10 <rcutils_string_map_fini>
 800d078:	4683      	mov	fp, r0
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d043      	beq.n	800d106 <rcl_node_resolve_name+0x19e>
 800d07e:	f7fb f8d1 	bl	8008224 <rcutils_get_error_string>
 800d082:	46a8      	mov	r8, r5
 800d084:	f04f 0b01 	mov.w	fp, #1
 800d088:	462c      	mov	r4, r5
 800d08a:	f7fb f8e1 	bl	8008250 <rcutils_reset_error>
 800d08e:	e00a      	b.n	800d0a6 <rcl_node_resolve_name+0x13e>
 800d090:	2867      	cmp	r0, #103	; 0x67
 800d092:	bf14      	ite	ne
 800d094:	f04f 0800 	movne.w	r8, #0
 800d098:	f008 0801 	andeq.w	r8, r8, #1
 800d09c:	9c07      	ldr	r4, [sp, #28]
 800d09e:	a808      	add	r0, sp, #32
 800d0a0:	f000 fcb6 	bl	800da10 <rcutils_string_map_fini>
 800d0a4:	bb50      	cbnz	r0, 800d0fc <rcl_node_resolve_name+0x194>
 800d0a6:	4651      	mov	r1, sl
 800d0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0aa:	47c8      	blx	r9
 800d0ac:	4651      	mov	r1, sl
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	47c8      	blx	r9
 800d0b2:	f1b8 0f00 	cmp.w	r8, #0
 800d0b6:	bf18      	it	ne
 800d0b8:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800d0bc:	e797      	b.n	800cfee <rcl_node_resolve_name+0x86>
 800d0be:	f7fb f8b1 	bl	8008224 <rcutils_get_error_string>
 800d0c2:	f7fb f8c5 	bl	8008250 <rcutils_reset_error>
 800d0c6:	a808      	add	r0, sp, #32
 800d0c8:	f000 fca2 	bl	800da10 <rcutils_string_map_fini>
 800d0cc:	b998      	cbnz	r0, 800d0f6 <rcl_node_resolve_name+0x18e>
 800d0ce:	4651      	mov	r1, sl
 800d0d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0d2:	47c8      	blx	r9
 800d0d4:	4651      	mov	r1, sl
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f04f 0b01 	mov.w	fp, #1
 800d0dc:	47c8      	blx	r9
 800d0de:	e786      	b.n	800cfee <rcl_node_resolve_name+0x86>
 800d0e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800d0e4:	f7fb f89e 	bl	8008224 <rcutils_get_error_string>
 800d0e8:	f7fb f8b2 	bl	8008250 <rcutils_reset_error>
 800d0ec:	4644      	mov	r4, r8
 800d0ee:	e7da      	b.n	800d0a6 <rcl_node_resolve_name+0x13e>
 800d0f0:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d0f4:	e7d3      	b.n	800d09e <rcl_node_resolve_name+0x136>
 800d0f6:	46d8      	mov	r8, fp
 800d0f8:	f04f 0b01 	mov.w	fp, #1
 800d0fc:	f7fb f892 	bl	8008224 <rcutils_get_error_string>
 800d100:	f7fb f8a6 	bl	8008250 <rcutils_reset_error>
 800d104:	e7cf      	b.n	800d0a6 <rcl_node_resolve_name+0x13e>
 800d106:	4651      	mov	r1, sl
 800d108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d10a:	47c8      	blx	r9
 800d10c:	4651      	mov	r1, sl
 800d10e:	4658      	mov	r0, fp
 800d110:	47c8      	blx	r9
 800d112:	e76c      	b.n	800cfee <rcl_node_resolve_name+0x86>

0800d114 <exact_match_lookup>:
 800d114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d116:	f102 0708 	add.w	r7, r2, #8
 800d11a:	460b      	mov	r3, r1
 800d11c:	b085      	sub	sp, #20
 800d11e:	4614      	mov	r4, r2
 800d120:	4606      	mov	r6, r0
 800d122:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d126:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d12a:	4618      	mov	r0, r3
 800d12c:	4919      	ldr	r1, [pc, #100]	; (800d194 <exact_match_lookup+0x80>)
 800d12e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d132:	f000 fa4d 	bl	800d5d0 <rcutils_join_path>
 800d136:	7833      	ldrb	r3, [r6, #0]
 800d138:	4605      	mov	r5, r0
 800d13a:	2b2f      	cmp	r3, #47	; 0x2f
 800d13c:	d023      	beq.n	800d186 <exact_match_lookup+0x72>
 800d13e:	f104 030c 	add.w	r3, r4, #12
 800d142:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d146:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d14a:	1c70      	adds	r0, r6, #1
 800d14c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d150:	f000 fa44 	bl	800d5dc <rcutils_to_native_path>
 800d154:	4606      	mov	r6, r0
 800d156:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d15a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d15e:	4631      	mov	r1, r6
 800d160:	4628      	mov	r0, r5
 800d162:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d166:	f000 fa33 	bl	800d5d0 <rcutils_join_path>
 800d16a:	4603      	mov	r3, r0
 800d16c:	4630      	mov	r0, r6
 800d16e:	6862      	ldr	r2, [r4, #4]
 800d170:	461e      	mov	r6, r3
 800d172:	6921      	ldr	r1, [r4, #16]
 800d174:	4790      	blx	r2
 800d176:	4628      	mov	r0, r5
 800d178:	4635      	mov	r5, r6
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	6921      	ldr	r1, [r4, #16]
 800d17e:	4798      	blx	r3
 800d180:	4628      	mov	r0, r5
 800d182:	b005      	add	sp, #20
 800d184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d186:	7873      	ldrb	r3, [r6, #1]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1d8      	bne.n	800d13e <exact_match_lookup+0x2a>
 800d18c:	4628      	mov	r0, r5
 800d18e:	b005      	add	sp, #20
 800d190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d192:	bf00      	nop
 800d194:	08012bec 	.word	0x08012bec

0800d198 <rcl_get_secure_root>:
 800d198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d19c:	b085      	sub	sp, #20
 800d19e:	b168      	cbz	r0, 800d1bc <rcl_get_secure_root+0x24>
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	4608      	mov	r0, r1
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	f7fb f82f 	bl	8008208 <rcutils_allocator_is_valid>
 800d1aa:	b138      	cbz	r0, 800d1bc <rcl_get_secure_root+0x24>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	482d      	ldr	r0, [pc, #180]	; (800d264 <rcl_get_secure_root+0xcc>)
 800d1b0:	a903      	add	r1, sp, #12
 800d1b2:	9303      	str	r3, [sp, #12]
 800d1b4:	f000 f9f2 	bl	800d59c <rcutils_get_env>
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	b120      	cbz	r0, 800d1c6 <rcl_get_secure_root+0x2e>
 800d1bc:	2500      	movs	r5, #0
 800d1be:	4628      	mov	r0, r5
 800d1c0:	b005      	add	sp, #20
 800d1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	781a      	ldrb	r2, [r3, #0]
 800d1ca:	2a00      	cmp	r2, #0
 800d1cc:	d0f6      	beq.n	800d1bc <rcl_get_secure_root+0x24>
 800d1ce:	f104 090c 	add.w	r9, r4, #12
 800d1d2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d1d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d1e0:	f000 fb3e 	bl	800d860 <rcutils_strdup>
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d0e8      	beq.n	800d1bc <rcl_get_secure_root+0x24>
 800d1ea:	a903      	add	r1, sp, #12
 800d1ec:	481e      	ldr	r0, [pc, #120]	; (800d268 <rcl_get_secure_root+0xd0>)
 800d1ee:	9503      	str	r5, [sp, #12]
 800d1f0:	f000 f9d4 	bl	800d59c <rcutils_get_env>
 800d1f4:	b160      	cbz	r0, 800d210 <rcl_get_secure_root+0x78>
 800d1f6:	2600      	movs	r6, #0
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	6863      	ldr	r3, [r4, #4]
 800d1fc:	6921      	ldr	r1, [r4, #16]
 800d1fe:	4798      	blx	r3
 800d200:	4640      	mov	r0, r8
 800d202:	6863      	ldr	r3, [r4, #4]
 800d204:	6921      	ldr	r1, [r4, #16]
 800d206:	4798      	blx	r3
 800d208:	4628      	mov	r0, r5
 800d20a:	b005      	add	sp, #20
 800d20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d210:	9b03      	ldr	r3, [sp, #12]
 800d212:	781e      	ldrb	r6, [r3, #0]
 800d214:	b1f6      	cbz	r6, 800d254 <rcl_get_secure_root+0xbc>
 800d216:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d21a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d21e:	4618      	mov	r0, r3
 800d220:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d224:	f000 fb1c 	bl	800d860 <rcutils_strdup>
 800d228:	4606      	mov	r6, r0
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d0e3      	beq.n	800d1f6 <rcl_get_secure_root+0x5e>
 800d22e:	4622      	mov	r2, r4
 800d230:	4641      	mov	r1, r8
 800d232:	f7ff ff6f 	bl	800d114 <exact_match_lookup>
 800d236:	4605      	mov	r5, r0
 800d238:	2d00      	cmp	r5, #0
 800d23a:	d0dd      	beq.n	800d1f8 <rcl_get_secure_root+0x60>
 800d23c:	4628      	mov	r0, r5
 800d23e:	f000 f9c5 	bl	800d5cc <rcutils_is_directory>
 800d242:	4603      	mov	r3, r0
 800d244:	2800      	cmp	r0, #0
 800d246:	d1d7      	bne.n	800d1f8 <rcl_get_secure_root+0x60>
 800d248:	4628      	mov	r0, r5
 800d24a:	6921      	ldr	r1, [r4, #16]
 800d24c:	461d      	mov	r5, r3
 800d24e:	6863      	ldr	r3, [r4, #4]
 800d250:	4798      	blx	r3
 800d252:	e7d1      	b.n	800d1f8 <rcl_get_secure_root+0x60>
 800d254:	4622      	mov	r2, r4
 800d256:	4638      	mov	r0, r7
 800d258:	4641      	mov	r1, r8
 800d25a:	f7ff ff5b 	bl	800d114 <exact_match_lookup>
 800d25e:	4605      	mov	r5, r0
 800d260:	e7ea      	b.n	800d238 <rcl_get_secure_root+0xa0>
 800d262:	bf00      	nop
 800d264:	08012bf8 	.word	0x08012bf8
 800d268:	08012c10 	.word	0x08012c10

0800d26c <rcl_get_security_options_from_environment>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	2300      	movs	r3, #0
 800d274:	4606      	mov	r6, r0
 800d276:	460f      	mov	r7, r1
 800d278:	4821      	ldr	r0, [pc, #132]	; (800d300 <rcl_get_security_options_from_environment+0x94>)
 800d27a:	a901      	add	r1, sp, #4
 800d27c:	4690      	mov	r8, r2
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	f000 f98c 	bl	800d59c <rcutils_get_env>
 800d284:	b120      	cbz	r0, 800d290 <rcl_get_security_options_from_environment+0x24>
 800d286:	2501      	movs	r5, #1
 800d288:	4628      	mov	r0, r5
 800d28a:	b002      	add	sp, #8
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d290:	4604      	mov	r4, r0
 800d292:	491c      	ldr	r1, [pc, #112]	; (800d304 <rcl_get_security_options_from_environment+0x98>)
 800d294:	9801      	ldr	r0, [sp, #4]
 800d296:	f7f3 f823 	bl	80002e0 <strcmp>
 800d29a:	4605      	mov	r5, r0
 800d29c:	b9f0      	cbnz	r0, 800d2dc <rcl_get_security_options_from_environment+0x70>
 800d29e:	9001      	str	r0, [sp, #4]
 800d2a0:	f1b8 0f00 	cmp.w	r8, #0
 800d2a4:	d021      	beq.n	800d2ea <rcl_get_security_options_from_environment+0x7e>
 800d2a6:	a901      	add	r1, sp, #4
 800d2a8:	4817      	ldr	r0, [pc, #92]	; (800d308 <rcl_get_security_options_from_environment+0x9c>)
 800d2aa:	f000 f977 	bl	800d59c <rcutils_get_env>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d1e9      	bne.n	800d286 <rcl_get_security_options_from_environment+0x1a>
 800d2b2:	4916      	ldr	r1, [pc, #88]	; (800d30c <rcl_get_security_options_from_environment+0xa0>)
 800d2b4:	9801      	ldr	r0, [sp, #4]
 800d2b6:	f7f3 f813 	bl	80002e0 <strcmp>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	4639      	mov	r1, r7
 800d2be:	4630      	mov	r0, r6
 800d2c0:	fab3 f383 	clz	r3, r3
 800d2c4:	095b      	lsrs	r3, r3, #5
 800d2c6:	f888 3000 	strb.w	r3, [r8]
 800d2ca:	f7ff ff65 	bl	800d198 <rcl_get_secure_root>
 800d2ce:	b170      	cbz	r0, 800d2ee <rcl_get_security_options_from_environment+0x82>
 800d2d0:	f8c8 0004 	str.w	r0, [r8, #4]
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	b002      	add	sp, #8
 800d2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2dc:	4625      	mov	r5, r4
 800d2de:	f888 4000 	strb.w	r4, [r8]
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	b002      	add	sp, #8
 800d2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ea:	250b      	movs	r5, #11
 800d2ec:	e7cc      	b.n	800d288 <rcl_get_security_options_from_environment+0x1c>
 800d2ee:	f898 5000 	ldrb.w	r5, [r8]
 800d2f2:	f1a5 0501 	sub.w	r5, r5, #1
 800d2f6:	fab5 f585 	clz	r5, r5
 800d2fa:	096d      	lsrs	r5, r5, #5
 800d2fc:	e7c4      	b.n	800d288 <rcl_get_security_options_from_environment+0x1c>
 800d2fe:	bf00      	nop
 800d300:	08012bb0 	.word	0x08012bb0
 800d304:	08012bc4 	.word	0x08012bc4
 800d308:	08012bcc 	.word	0x08012bcc
 800d30c:	08012be4 	.word	0x08012be4

0800d310 <rcl_get_system_time>:
 800d310:	4608      	mov	r0, r1
 800d312:	f000 bbf1 	b.w	800daf8 <rcutils_system_time_now>
 800d316:	bf00      	nop

0800d318 <rcl_get_steady_time>:
 800d318:	4608      	mov	r0, r1
 800d31a:	f000 bc15 	b.w	800db48 <rcutils_steady_time_now>
 800d31e:	bf00      	nop

0800d320 <rcl_get_ros_time>:
 800d320:	7a03      	ldrb	r3, [r0, #8]
 800d322:	b510      	push	{r4, lr}
 800d324:	460c      	mov	r4, r1
 800d326:	b143      	cbz	r3, 800d33a <rcl_get_ros_time+0x1a>
 800d328:	2105      	movs	r1, #5
 800d32a:	f000 f901 	bl	800d530 <__atomic_load_8>
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	2000      	movs	r0, #0
 800d334:	e9c4 2300 	strd	r2, r3, [r4]
 800d338:	bd10      	pop	{r4, pc}
 800d33a:	4608      	mov	r0, r1
 800d33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d340:	f000 bbda 	b.w	800daf8 <rcutils_system_time_now>

0800d344 <rcl_clock_init>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	4605      	mov	r5, r0
 800d348:	4610      	mov	r0, r2
 800d34a:	4614      	mov	r4, r2
 800d34c:	460e      	mov	r6, r1
 800d34e:	f7fa ff5b 	bl	8008208 <rcutils_allocator_is_valid>
 800d352:	b128      	cbz	r0, 800d360 <rcl_clock_init+0x1c>
 800d354:	2d03      	cmp	r5, #3
 800d356:	d803      	bhi.n	800d360 <rcl_clock_init+0x1c>
 800d358:	e8df f005 	tbb	[pc, r5]
 800d35c:	0659301f 	.word	0x0659301f
 800d360:	f04f 0c0b 	mov.w	ip, #11
 800d364:	4660      	mov	r0, ip
 800d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d368:	2c00      	cmp	r4, #0
 800d36a:	d0f9      	beq.n	800d360 <rcl_clock_init+0x1c>
 800d36c:	fab6 f386 	clz	r3, r6
 800d370:	095b      	lsrs	r3, r3, #5
 800d372:	2e00      	cmp	r6, #0
 800d374:	d0f4      	beq.n	800d360 <rcl_clock_init+0x1c>
 800d376:	6133      	str	r3, [r6, #16]
 800d378:	469c      	mov	ip, r3
 800d37a:	f106 0514 	add.w	r5, r6, #20
 800d37e:	4f32      	ldr	r7, [pc, #200]	; (800d448 <rcl_clock_init+0x104>)
 800d380:	f04f 0e03 	mov.w	lr, #3
 800d384:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d38a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	4660      	mov	r0, ip
 800d390:	602b      	str	r3, [r5, #0]
 800d392:	60f7      	str	r7, [r6, #12]
 800d394:	f886 e000 	strb.w	lr, [r6]
 800d398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d39a:	2e00      	cmp	r6, #0
 800d39c:	d0e0      	beq.n	800d360 <rcl_clock_init+0x1c>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f106 0514 	add.w	r5, r6, #20
 800d3a4:	7033      	strb	r3, [r6, #0]
 800d3a6:	469c      	mov	ip, r3
 800d3a8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d3ac:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800d3b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	4660      	mov	r0, ip
 800d3b8:	602b      	str	r3, [r5, #0]
 800d3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3bc:	2c00      	cmp	r4, #0
 800d3be:	d0cf      	beq.n	800d360 <rcl_clock_init+0x1c>
 800d3c0:	fab6 f586 	clz	r5, r6
 800d3c4:	096d      	lsrs	r5, r5, #5
 800d3c6:	2e00      	cmp	r6, #0
 800d3c8:	d0ca      	beq.n	800d360 <rcl_clock_init+0x1c>
 800d3ca:	46a6      	mov	lr, r4
 800d3cc:	7035      	strb	r5, [r6, #0]
 800d3ce:	f106 0c14 	add.w	ip, r6, #20
 800d3d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3d6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800d3da:	e9c6 5503 	strd	r5, r5, [r6, #12]
 800d3de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3e2:	f8de 3000 	ldr.w	r3, [lr]
 800d3e6:	2010      	movs	r0, #16
 800d3e8:	f8cc 3000 	str.w	r3, [ip]
 800d3ec:	6823      	ldr	r3, [r4, #0]
 800d3ee:	6921      	ldr	r1, [r4, #16]
 800d3f0:	4798      	blx	r3
 800d3f2:	6130      	str	r0, [r6, #16]
 800d3f4:	b320      	cbz	r0, 800d440 <rcl_clock_init+0xfc>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	46ac      	mov	ip, r5
 800d3fc:	7205      	strb	r5, [r0, #8]
 800d3fe:	e9c0 2300 	strd	r2, r3, [r0]
 800d402:	4a12      	ldr	r2, [pc, #72]	; (800d44c <rcl_clock_init+0x108>)
 800d404:	2301      	movs	r3, #1
 800d406:	4660      	mov	r0, ip
 800d408:	60f2      	str	r2, [r6, #12]
 800d40a:	7033      	strb	r3, [r6, #0]
 800d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d40e:	2c00      	cmp	r4, #0
 800d410:	d0a6      	beq.n	800d360 <rcl_clock_init+0x1c>
 800d412:	fab6 f386 	clz	r3, r6
 800d416:	095b      	lsrs	r3, r3, #5
 800d418:	2e00      	cmp	r6, #0
 800d41a:	d0a1      	beq.n	800d360 <rcl_clock_init+0x1c>
 800d41c:	6133      	str	r3, [r6, #16]
 800d41e:	469c      	mov	ip, r3
 800d420:	f106 0514 	add.w	r5, r6, #20
 800d424:	f8df e028 	ldr.w	lr, [pc, #40]	; 800d450 <rcl_clock_init+0x10c>
 800d428:	2702      	movs	r7, #2
 800d42a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800d42e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	4660      	mov	r0, ip
 800d436:	602b      	str	r3, [r5, #0]
 800d438:	f8c6 e00c 	str.w	lr, [r6, #12]
 800d43c:	7037      	strb	r7, [r6, #0]
 800d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d440:	f04f 0c0a 	mov.w	ip, #10
 800d444:	e78e      	b.n	800d364 <rcl_clock_init+0x20>
 800d446:	bf00      	nop
 800d448:	0800d319 	.word	0x0800d319
 800d44c:	0800d321 	.word	0x0800d321
 800d450:	0800d311 	.word	0x0800d311

0800d454 <rcl_validate_enclave_name_with_size>:
 800d454:	2800      	cmp	r0, #0
 800d456:	d049      	beq.n	800d4ec <rcl_validate_enclave_name_with_size+0x98>
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	4615      	mov	r5, r2
 800d45c:	b0c2      	sub	sp, #264	; 0x108
 800d45e:	b19a      	cbz	r2, 800d488 <rcl_validate_enclave_name_with_size+0x34>
 800d460:	461e      	mov	r6, r3
 800d462:	466a      	mov	r2, sp
 800d464:	ab01      	add	r3, sp, #4
 800d466:	460c      	mov	r4, r1
 800d468:	f000 fc3e 	bl	800dce8 <rmw_validate_namespace_with_size>
 800d46c:	4684      	mov	ip, r0
 800d46e:	b9b8      	cbnz	r0, 800d4a0 <rcl_validate_enclave_name_with_size+0x4c>
 800d470:	9900      	ldr	r1, [sp, #0]
 800d472:	b171      	cbz	r1, 800d492 <rcl_validate_enclave_name_with_size+0x3e>
 800d474:	2907      	cmp	r1, #7
 800d476:	d019      	beq.n	800d4ac <rcl_validate_enclave_name_with_size+0x58>
 800d478:	1e4b      	subs	r3, r1, #1
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	d83a      	bhi.n	800d4f4 <rcl_validate_enclave_name_with_size+0xa0>
 800d47e:	e8df f003 	tbb	[pc, r3]
 800d482:	2926      	.short	0x2926
 800d484:	1d322f2c 	.word	0x1d322f2c
 800d488:	f04f 0c0b 	mov.w	ip, #11
 800d48c:	4660      	mov	r0, ip
 800d48e:	b042      	add	sp, #264	; 0x108
 800d490:	bd70      	pop	{r4, r5, r6, pc}
 800d492:	2907      	cmp	r1, #7
 800d494:	d00a      	beq.n	800d4ac <rcl_validate_enclave_name_with_size+0x58>
 800d496:	2300      	movs	r3, #0
 800d498:	4660      	mov	r0, ip
 800d49a:	602b      	str	r3, [r5, #0]
 800d49c:	b042      	add	sp, #264	; 0x108
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	f7ff f8d0 	bl	800c644 <rcl_convert_rmw_ret_to_rcl_ret>
 800d4a4:	4684      	mov	ip, r0
 800d4a6:	4660      	mov	r0, ip
 800d4a8:	b042      	add	sp, #264	; 0x108
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
 800d4ac:	2cff      	cmp	r4, #255	; 0xff
 800d4ae:	d9f2      	bls.n	800d496 <rcl_validate_enclave_name_with_size+0x42>
 800d4b0:	6029      	str	r1, [r5, #0]
 800d4b2:	2e00      	cmp	r6, #0
 800d4b4:	d0ea      	beq.n	800d48c <rcl_validate_enclave_name_with_size+0x38>
 800d4b6:	23fe      	movs	r3, #254	; 0xfe
 800d4b8:	6033      	str	r3, [r6, #0]
 800d4ba:	e7e7      	b.n	800d48c <rcl_validate_enclave_name_with_size+0x38>
 800d4bc:	2306      	movs	r3, #6
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	2e00      	cmp	r6, #0
 800d4c2:	d0e3      	beq.n	800d48c <rcl_validate_enclave_name_with_size+0x38>
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	4660      	mov	r0, ip
 800d4c8:	6033      	str	r3, [r6, #0]
 800d4ca:	b042      	add	sp, #264	; 0x108
 800d4cc:	bd70      	pop	{r4, r5, r6, pc}
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	602b      	str	r3, [r5, #0]
 800d4d2:	e7f5      	b.n	800d4c0 <rcl_validate_enclave_name_with_size+0x6c>
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	602b      	str	r3, [r5, #0]
 800d4d8:	e7f2      	b.n	800d4c0 <rcl_validate_enclave_name_with_size+0x6c>
 800d4da:	2303      	movs	r3, #3
 800d4dc:	602b      	str	r3, [r5, #0]
 800d4de:	e7ef      	b.n	800d4c0 <rcl_validate_enclave_name_with_size+0x6c>
 800d4e0:	2304      	movs	r3, #4
 800d4e2:	602b      	str	r3, [r5, #0]
 800d4e4:	e7ec      	b.n	800d4c0 <rcl_validate_enclave_name_with_size+0x6c>
 800d4e6:	2305      	movs	r3, #5
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	e7e9      	b.n	800d4c0 <rcl_validate_enclave_name_with_size+0x6c>
 800d4ec:	f04f 0c0b 	mov.w	ip, #11
 800d4f0:	4660      	mov	r0, ip
 800d4f2:	4770      	bx	lr
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4a04      	ldr	r2, [pc, #16]	; (800d508 <rcl_validate_enclave_name_with_size+0xb4>)
 800d4f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d4fc:	a802      	add	r0, sp, #8
 800d4fe:	f000 f961 	bl	800d7c4 <rcutils_snprintf>
 800d502:	f04f 0c01 	mov.w	ip, #1
 800d506:	e7c1      	b.n	800d48c <rcl_validate_enclave_name_with_size+0x38>
 800d508:	08012c30 	.word	0x08012c30

0800d50c <rcl_validate_enclave_name>:
 800d50c:	b168      	cbz	r0, 800d52a <rcl_validate_enclave_name+0x1e>
 800d50e:	b570      	push	{r4, r5, r6, lr}
 800d510:	460d      	mov	r5, r1
 800d512:	4616      	mov	r6, r2
 800d514:	4604      	mov	r4, r0
 800d516:	f7f2 feed 	bl	80002f4 <strlen>
 800d51a:	4633      	mov	r3, r6
 800d51c:	4601      	mov	r1, r0
 800d51e:	462a      	mov	r2, r5
 800d520:	4620      	mov	r0, r4
 800d522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d526:	f7ff bf95 	b.w	800d454 <rcl_validate_enclave_name_with_size>
 800d52a:	200b      	movs	r0, #11
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop

0800d530 <__atomic_load_8>:
 800d530:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d534:	4a16      	ldr	r2, [pc, #88]	; (800d590 <__atomic_load_8+0x60>)
 800d536:	4b17      	ldr	r3, [pc, #92]	; (800d594 <__atomic_load_8+0x64>)
 800d538:	f04f 0c01 	mov.w	ip, #1
 800d53c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800d540:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d544:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d548:	fb02 f101 	mul.w	r1, r2, r1
 800d54c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d550:	fba3 2301 	umull	r2, r3, r3, r1
 800d554:	091b      	lsrs	r3, r3, #4
 800d556:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d55a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800d55e:	b4d0      	push	{r4, r6, r7}
 800d560:	1ac9      	subs	r1, r1, r3
 800d562:	4c0d      	ldr	r4, [pc, #52]	; (800d598 <__atomic_load_8+0x68>)
 800d564:	1862      	adds	r2, r4, r1
 800d566:	e8d2 3f4f 	ldrexb	r3, [r2]
 800d56a:	e8c2 cf46 	strexb	r6, ip, [r2]
 800d56e:	2e00      	cmp	r6, #0
 800d570:	d1f9      	bne.n	800d566 <__atomic_load_8+0x36>
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f3bf 8f5b 	dmb	ish
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f4      	bne.n	800d566 <__atomic_load_8+0x36>
 800d57c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d580:	f3bf 8f5b 	dmb	ish
 800d584:	5463      	strb	r3, [r4, r1]
 800d586:	4630      	mov	r0, r6
 800d588:	4639      	mov	r1, r7
 800d58a:	bcd0      	pop	{r4, r6, r7}
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	27d4eb2d 	.word	0x27d4eb2d
 800d594:	b21642c9 	.word	0xb21642c9
 800d598:	2000db40 	.word	0x2000db40

0800d59c <rcutils_get_env>:
 800d59c:	b168      	cbz	r0, 800d5ba <rcutils_get_env+0x1e>
 800d59e:	b510      	push	{r4, lr}
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	b129      	cbz	r1, 800d5b0 <rcutils_get_env+0x14>
 800d5a4:	f003 fd1c 	bl	8010fe0 <getenv>
 800d5a8:	b120      	cbz	r0, 800d5b4 <rcutils_get_env+0x18>
 800d5aa:	6020      	str	r0, [r4, #0]
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	bd10      	pop	{r4, pc}
 800d5b0:	4803      	ldr	r0, [pc, #12]	; (800d5c0 <rcutils_get_env+0x24>)
 800d5b2:	bd10      	pop	{r4, pc}
 800d5b4:	4b03      	ldr	r3, [pc, #12]	; (800d5c4 <rcutils_get_env+0x28>)
 800d5b6:	6023      	str	r3, [r4, #0]
 800d5b8:	bd10      	pop	{r4, pc}
 800d5ba:	4803      	ldr	r0, [pc, #12]	; (800d5c8 <rcutils_get_env+0x2c>)
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	08012cac 	.word	0x08012cac
 800d5c4:	08012dd0 	.word	0x08012dd0
 800d5c8:	08012c90 	.word	0x08012c90

0800d5cc <rcutils_is_directory>:
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	4770      	bx	lr

0800d5d0 <rcutils_join_path>:
 800d5d0:	b082      	sub	sp, #8
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	e88d 000c 	stmia.w	sp, {r2, r3}
 800d5d8:	b002      	add	sp, #8
 800d5da:	4770      	bx	lr

0800d5dc <rcutils_to_native_path>:
 800d5dc:	b084      	sub	sp, #16
 800d5de:	2000      	movs	r0, #0
 800d5e0:	f10d 0c04 	add.w	ip, sp, #4
 800d5e4:	b004      	add	sp, #16
 800d5e6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800d5ea:	4770      	bx	lr

0800d5ec <rcutils_format_string_limit>:
 800d5ec:	b40f      	push	{r0, r1, r2, r3}
 800d5ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f0:	b083      	sub	sp, #12
 800d5f2:	ac08      	add	r4, sp, #32
 800d5f4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d5f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d5fa:	b326      	cbz	r6, 800d646 <rcutils_format_string_limit+0x5a>
 800d5fc:	a808      	add	r0, sp, #32
 800d5fe:	f7fa fe03 	bl	8008208 <rcutils_allocator_is_valid>
 800d602:	b300      	cbz	r0, 800d646 <rcutils_format_string_limit+0x5a>
 800d604:	2100      	movs	r1, #0
 800d606:	ab0f      	add	r3, sp, #60	; 0x3c
 800d608:	4632      	mov	r2, r6
 800d60a:	4608      	mov	r0, r1
 800d60c:	e9cd 3300 	strd	r3, r3, [sp]
 800d610:	f000 f906 	bl	800d820 <rcutils_vsnprintf>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	4605      	mov	r5, r0
 800d618:	d015      	beq.n	800d646 <rcutils_format_string_limit+0x5a>
 800d61a:	1c47      	adds	r7, r0, #1
 800d61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d61e:	429f      	cmp	r7, r3
 800d620:	d901      	bls.n	800d626 <rcutils_format_string_limit+0x3a>
 800d622:	1e5d      	subs	r5, r3, #1
 800d624:	461f      	mov	r7, r3
 800d626:	9b08      	ldr	r3, [sp, #32]
 800d628:	4638      	mov	r0, r7
 800d62a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d62c:	4798      	blx	r3
 800d62e:	4604      	mov	r4, r0
 800d630:	b148      	cbz	r0, 800d646 <rcutils_format_string_limit+0x5a>
 800d632:	4632      	mov	r2, r6
 800d634:	4639      	mov	r1, r7
 800d636:	9b01      	ldr	r3, [sp, #4]
 800d638:	f000 f8f2 	bl	800d820 <rcutils_vsnprintf>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	db09      	blt.n	800d654 <rcutils_format_string_limit+0x68>
 800d640:	2300      	movs	r3, #0
 800d642:	5563      	strb	r3, [r4, r5]
 800d644:	e000      	b.n	800d648 <rcutils_format_string_limit+0x5c>
 800d646:	2400      	movs	r4, #0
 800d648:	4620      	mov	r0, r4
 800d64a:	b003      	add	sp, #12
 800d64c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d650:	b004      	add	sp, #16
 800d652:	4770      	bx	lr
 800d654:	4620      	mov	r0, r4
 800d656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d658:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d65a:	2400      	movs	r4, #0
 800d65c:	4798      	blx	r3
 800d65e:	e7f3      	b.n	800d648 <rcutils_format_string_limit+0x5c>

0800d660 <rcutils_repl_str>:
 800d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d664:	ed2d 8b02 	vpush	{d8}
 800d668:	b087      	sub	sp, #28
 800d66a:	2600      	movs	r6, #0
 800d66c:	4680      	mov	r8, r0
 800d66e:	468a      	mov	sl, r1
 800d670:	9000      	str	r0, [sp, #0]
 800d672:	4608      	mov	r0, r1
 800d674:	ee08 2a10 	vmov	s16, r2
 800d678:	4699      	mov	r9, r3
 800d67a:	2510      	movs	r5, #16
 800d67c:	f7f2 fe3a 	bl	80002f4 <strlen>
 800d680:	4637      	mov	r7, r6
 800d682:	46b3      	mov	fp, r6
 800d684:	9001      	str	r0, [sp, #4]
 800d686:	e01e      	b.n	800d6c6 <rcutils_repl_str+0x66>
 800d688:	f10b 0b01 	add.w	fp, fp, #1
 800d68c:	9b01      	ldr	r3, [sp, #4]
 800d68e:	455e      	cmp	r6, fp
 800d690:	eb04 0803 	add.w	r8, r4, r3
 800d694:	d211      	bcs.n	800d6ba <rcutils_repl_str+0x5a>
 800d696:	442e      	add	r6, r5
 800d698:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d69c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d6a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6a4:	00b1      	lsls	r1, r6, #2
 800d6a6:	4798      	blx	r3
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	f000 8088 	beq.w	800d7be <rcutils_repl_str+0x15e>
 800d6ae:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800d6b2:	4607      	mov	r7, r0
 800d6b4:	bf28      	it	cs
 800d6b6:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800d6ba:	9a00      	ldr	r2, [sp, #0]
 800d6bc:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800d6c0:	1aa4      	subs	r4, r4, r2
 800d6c2:	f843 4c04 	str.w	r4, [r3, #-4]
 800d6c6:	4651      	mov	r1, sl
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	f003 ff1d 	bl	8011508 <strstr>
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	2c00      	cmp	r4, #0
 800d6d4:	d1d8      	bne.n	800d688 <rcutils_repl_str+0x28>
 800d6d6:	4640      	mov	r0, r8
 800d6d8:	f7f2 fe0c 	bl	80002f4 <strlen>
 800d6dc:	9b00      	ldr	r3, [sp, #0]
 800d6de:	eba8 0803 	sub.w	r8, r8, r3
 800d6e2:	eb08 0400 	add.w	r4, r8, r0
 800d6e6:	9402      	str	r4, [sp, #8]
 800d6e8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ec:	d045      	beq.n	800d77a <rcutils_repl_str+0x11a>
 800d6ee:	ee18 0a10 	vmov	r0, s16
 800d6f2:	f7f2 fdff 	bl	80002f4 <strlen>
 800d6f6:	9a01      	ldr	r2, [sp, #4]
 800d6f8:	4606      	mov	r6, r0
 800d6fa:	f8d9 3000 	ldr.w	r3, [r9]
 800d6fe:	1a82      	subs	r2, r0, r2
 800d700:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d704:	fb0b 4202 	mla	r2, fp, r2, r4
 800d708:	1c50      	adds	r0, r2, #1
 800d70a:	9205      	str	r2, [sp, #20]
 800d70c:	4798      	blx	r3
 800d70e:	4682      	mov	sl, r0
 800d710:	2800      	cmp	r0, #0
 800d712:	d054      	beq.n	800d7be <rcutils_repl_str+0x15e>
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	463d      	mov	r5, r7
 800d718:	9900      	ldr	r1, [sp, #0]
 800d71a:	2401      	movs	r4, #1
 800d71c:	f003 fcdc 	bl	80110d8 <memcpy>
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 800d726:	eb0a 0803 	add.w	r8, sl, r3
 800d72a:	ee18 7a10 	vmov	r7, s16
 800d72e:	f8dd a000 	ldr.w	sl, [sp]
 800d732:	f8cd 9000 	str.w	r9, [sp]
 800d736:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d73a:	4632      	mov	r2, r6
 800d73c:	4639      	mov	r1, r7
 800d73e:	4640      	mov	r0, r8
 800d740:	44b0      	add	r8, r6
 800d742:	f003 fcc9 	bl	80110d8 <memcpy>
 800d746:	f855 2b04 	ldr.w	r2, [r5], #4
 800d74a:	45a3      	cmp	fp, r4
 800d74c:	444a      	add	r2, r9
 800d74e:	eb0a 0102 	add.w	r1, sl, r2
 800d752:	d02a      	beq.n	800d7aa <rcutils_repl_str+0x14a>
 800d754:	6828      	ldr	r0, [r5, #0]
 800d756:	1a82      	subs	r2, r0, r2
 800d758:	4640      	mov	r0, r8
 800d75a:	4490      	add	r8, r2
 800d75c:	f003 fcbc 	bl	80110d8 <memcpy>
 800d760:	1c62      	adds	r2, r4, #1
 800d762:	45a3      	cmp	fp, r4
 800d764:	4614      	mov	r4, r2
 800d766:	d8e8      	bhi.n	800d73a <rcutils_repl_str+0xda>
 800d768:	f8dd 9000 	ldr.w	r9, [sp]
 800d76c:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800d770:	2300      	movs	r3, #0
 800d772:	9a05      	ldr	r2, [sp, #20]
 800d774:	f80a 3002 	strb.w	r3, [sl, r2]
 800d778:	e00b      	b.n	800d792 <rcutils_repl_str+0x132>
 800d77a:	4620      	mov	r0, r4
 800d77c:	f8d9 3000 	ldr.w	r3, [r9]
 800d780:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d784:	3001      	adds	r0, #1
 800d786:	4798      	blx	r3
 800d788:	4682      	mov	sl, r0
 800d78a:	b110      	cbz	r0, 800d792 <rcutils_repl_str+0x132>
 800d78c:	9900      	ldr	r1, [sp, #0]
 800d78e:	f003 fe8c 	bl	80114aa <strcpy>
 800d792:	4638      	mov	r0, r7
 800d794:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d798:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d79c:	4798      	blx	r3
 800d79e:	4650      	mov	r0, sl
 800d7a0:	b007      	add	sp, #28
 800d7a2:	ecbd 8b02 	vpop	{d8}
 800d7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7aa:	9b02      	ldr	r3, [sp, #8]
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	f8dd 9000 	ldr.w	r9, [sp]
 800d7b2:	1a9a      	subs	r2, r3, r2
 800d7b4:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800d7b8:	f003 fc8e 	bl	80110d8 <memcpy>
 800d7bc:	e7d8      	b.n	800d770 <rcutils_repl_str+0x110>
 800d7be:	f04f 0a00 	mov.w	sl, #0
 800d7c2:	e7e6      	b.n	800d792 <rcutils_repl_str+0x132>

0800d7c4 <rcutils_snprintf>:
 800d7c4:	b40c      	push	{r2, r3}
 800d7c6:	b530      	push	{r4, r5, lr}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	ab06      	add	r3, sp, #24
 800d7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d0:	9301      	str	r3, [sp, #4]
 800d7d2:	b1e2      	cbz	r2, 800d80e <rcutils_snprintf+0x4a>
 800d7d4:	fab0 f480 	clz	r4, r0
 800d7d8:	fab1 f581 	clz	r5, r1
 800d7dc:	ea50 0c01 	orrs.w	ip, r0, r1
 800d7e0:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800d7e4:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d7e8:	d008      	beq.n	800d7fc <rcutils_snprintf+0x38>
 800d7ea:	b984      	cbnz	r4, 800d80e <rcutils_snprintf+0x4a>
 800d7ec:	b97d      	cbnz	r5, 800d80e <rcutils_snprintf+0x4a>
 800d7ee:	f003 ff49 	bl	8011684 <vsniprintf>
 800d7f2:	b003      	add	sp, #12
 800d7f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7f8:	b002      	add	sp, #8
 800d7fa:	4770      	bx	lr
 800d7fc:	4661      	mov	r1, ip
 800d7fe:	4660      	mov	r0, ip
 800d800:	f003 ff40 	bl	8011684 <vsniprintf>
 800d804:	b003      	add	sp, #12
 800d806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d80a:	b002      	add	sp, #8
 800d80c:	4770      	bx	lr
 800d80e:	f003 fbe1 	bl	8010fd4 <__errno>
 800d812:	2216      	movs	r2, #22
 800d814:	4603      	mov	r3, r0
 800d816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	e7e9      	b.n	800d7f2 <rcutils_snprintf+0x2e>
 800d81e:	bf00      	nop

0800d820 <rcutils_vsnprintf>:
 800d820:	b570      	push	{r4, r5, r6, lr}
 800d822:	b1b2      	cbz	r2, 800d852 <rcutils_vsnprintf+0x32>
 800d824:	fab0 f480 	clz	r4, r0
 800d828:	fab1 f581 	clz	r5, r1
 800d82c:	ea50 0c01 	orrs.w	ip, r0, r1
 800d830:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800d834:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d838:	d005      	beq.n	800d846 <rcutils_vsnprintf+0x26>
 800d83a:	b954      	cbnz	r4, 800d852 <rcutils_vsnprintf+0x32>
 800d83c:	b94d      	cbnz	r5, 800d852 <rcutils_vsnprintf+0x32>
 800d83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d842:	f003 bf1f 	b.w	8011684 <vsniprintf>
 800d846:	4661      	mov	r1, ip
 800d848:	4660      	mov	r0, ip
 800d84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d84e:	f003 bf19 	b.w	8011684 <vsniprintf>
 800d852:	f003 fbbf 	bl	8010fd4 <__errno>
 800d856:	2316      	movs	r3, #22
 800d858:	6003      	str	r3, [r0, #0]
 800d85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d85e:	bd70      	pop	{r4, r5, r6, pc}

0800d860 <rcutils_strdup>:
 800d860:	b084      	sub	sp, #16
 800d862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d864:	ac07      	add	r4, sp, #28
 800d866:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800d868:	4605      	mov	r5, r0
 800d86a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800d86e:	b1d0      	cbz	r0, 800d8a6 <rcutils_strdup+0x46>
 800d870:	460c      	mov	r4, r1
 800d872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d876:	2100      	movs	r1, #0
 800d878:	f7f2 fce2 	bl	8000240 <memchr>
 800d87c:	b180      	cbz	r0, 800d8a0 <rcutils_strdup+0x40>
 800d87e:	1b46      	subs	r6, r0, r5
 800d880:	1c70      	adds	r0, r6, #1
 800d882:	4639      	mov	r1, r7
 800d884:	47a0      	blx	r4
 800d886:	4604      	mov	r4, r0
 800d888:	b128      	cbz	r0, 800d896 <rcutils_strdup+0x36>
 800d88a:	4632      	mov	r2, r6
 800d88c:	4629      	mov	r1, r5
 800d88e:	f003 fc23 	bl	80110d8 <memcpy>
 800d892:	2300      	movs	r3, #0
 800d894:	55a3      	strb	r3, [r4, r6]
 800d896:	4620      	mov	r0, r4
 800d898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d89c:	b004      	add	sp, #16
 800d89e:	4770      	bx	lr
 800d8a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d8a4:	e7ed      	b.n	800d882 <rcutils_strdup+0x22>
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	e7f5      	b.n	800d896 <rcutils_strdup+0x36>
 800d8aa:	bf00      	nop

0800d8ac <rcutils_strndup>:
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	b570      	push	{r4, r5, r6, lr}
 800d8b0:	ac04      	add	r4, sp, #16
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	e884 000c 	stmia.w	r4, {r2, r3}
 800d8b8:	b1b8      	cbz	r0, 800d8ea <rcutils_strndup+0x3e>
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	460a      	mov	r2, r1
 800d8be:	2100      	movs	r1, #0
 800d8c0:	f7f2 fcbe 	bl	8000240 <memchr>
 800d8c4:	b100      	cbz	r0, 800d8c8 <rcutils_strndup+0x1c>
 800d8c6:	1b84      	subs	r4, r0, r6
 800d8c8:	9b04      	ldr	r3, [sp, #16]
 800d8ca:	1c60      	adds	r0, r4, #1
 800d8cc:	9908      	ldr	r1, [sp, #32]
 800d8ce:	4798      	blx	r3
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	b128      	cbz	r0, 800d8e0 <rcutils_strndup+0x34>
 800d8d4:	4622      	mov	r2, r4
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	f003 fbfe 	bl	80110d8 <memcpy>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	552b      	strb	r3, [r5, r4]
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8e6:	b002      	add	sp, #8
 800d8e8:	4770      	bx	lr
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	e7f8      	b.n	800d8e0 <rcutils_strndup+0x34>
 800d8ee:	bf00      	nop

0800d8f0 <rcutils_get_zero_initialized_string_map>:
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	4b01      	ldr	r3, [pc, #4]	; (800d8f8 <rcutils_get_zero_initialized_string_map+0x8>)
 800d8f4:	6018      	str	r0, [r3, #0]
 800d8f6:	4770      	bx	lr
 800d8f8:	2000db58 	.word	0x2000db58

0800d8fc <rcutils_string_map_reserve>:
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d03e      	beq.n	800d97e <rcutils_string_map_reserve+0x82>
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	6805      	ldr	r5, [r0, #0]
 800d904:	4606      	mov	r6, r0
 800d906:	460c      	mov	r4, r1
 800d908:	b12d      	cbz	r5, 800d916 <rcutils_string_map_reserve+0x1a>
 800d90a:	68ab      	ldr	r3, [r5, #8]
 800d90c:	42a3      	cmp	r3, r4
 800d90e:	d904      	bls.n	800d91a <rcutils_string_map_reserve+0x1e>
 800d910:	461c      	mov	r4, r3
 800d912:	2d00      	cmp	r5, #0
 800d914:	d1f9      	bne.n	800d90a <rcutils_string_map_reserve+0xe>
 800d916:	201f      	movs	r0, #31
 800d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91a:	686b      	ldr	r3, [r5, #4]
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	d02a      	beq.n	800d976 <rcutils_string_map_reserve+0x7a>
 800d920:	69e9      	ldr	r1, [r5, #28]
 800d922:	b304      	cbz	r4, 800d966 <rcutils_string_map_reserve+0x6a>
 800d924:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800d928:	d227      	bcs.n	800d97a <rcutils_string_map_reserve+0x7e>
 800d92a:	00e7      	lsls	r7, r4, #3
 800d92c:	460a      	mov	r2, r1
 800d92e:	696b      	ldr	r3, [r5, #20]
 800d930:	6828      	ldr	r0, [r5, #0]
 800d932:	4639      	mov	r1, r7
 800d934:	4798      	blx	r3
 800d936:	b300      	cbz	r0, 800d97a <rcutils_string_map_reserve+0x7e>
 800d938:	6835      	ldr	r5, [r6, #0]
 800d93a:	686a      	ldr	r2, [r5, #4]
 800d93c:	6028      	str	r0, [r5, #0]
 800d93e:	42a2      	cmp	r2, r4
 800d940:	d216      	bcs.n	800d970 <rcutils_string_map_reserve+0x74>
 800d942:	43d1      	mvns	r1, r2
 800d944:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 800d948:	4421      	add	r1, r4
 800d94a:	2909      	cmp	r1, #9
 800d94c:	d919      	bls.n	800d982 <rcutils_string_map_reserve+0x86>
 800d94e:	0759      	lsls	r1, r3, #29
 800d950:	d117      	bne.n	800d982 <rcutils_string_map_reserve+0x86>
 800d952:	1aa1      	subs	r1, r4, r2
 800d954:	2600      	movs	r6, #0
 800d956:	2200      	movs	r2, #0
 800d958:	2700      	movs	r7, #0
 800d95a:	3201      	adds	r2, #1
 800d95c:	4291      	cmp	r1, r2
 800d95e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d962:	d8fa      	bhi.n	800d95a <rcutils_string_map_reserve+0x5e>
 800d964:	e004      	b.n	800d970 <rcutils_string_map_reserve+0x74>
 800d966:	692b      	ldr	r3, [r5, #16]
 800d968:	6828      	ldr	r0, [r5, #0]
 800d96a:	4798      	blx	r3
 800d96c:	6835      	ldr	r5, [r6, #0]
 800d96e:	602c      	str	r4, [r5, #0]
 800d970:	2000      	movs	r0, #0
 800d972:	606c      	str	r4, [r5, #4]
 800d974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d976:	2000      	movs	r0, #0
 800d978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d97a:	200a      	movs	r0, #10
 800d97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d97e:	200b      	movs	r0, #11
 800d980:	4770      	bx	lr
 800d982:	4438      	add	r0, r7
 800d984:	2200      	movs	r2, #0
 800d986:	e9c3 2200 	strd	r2, r2, [r3]
 800d98a:	3308      	adds	r3, #8
 800d98c:	4283      	cmp	r3, r0
 800d98e:	d1fa      	bne.n	800d986 <rcutils_string_map_reserve+0x8a>
 800d990:	e7ee      	b.n	800d970 <rcutils_string_map_reserve+0x74>
 800d992:	bf00      	nop

0800d994 <rcutils_string_map_init>:
 800d994:	b082      	sub	sp, #8
 800d996:	b570      	push	{r4, r5, r6, lr}
 800d998:	ac04      	add	r4, sp, #16
 800d99a:	e884 000c 	stmia.w	r4, {r2, r3}
 800d99e:	b378      	cbz	r0, 800da00 <rcutils_string_map_init+0x6c>
 800d9a0:	6806      	ldr	r6, [r0, #0]
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	b12e      	cbz	r6, 800d9b2 <rcutils_string_map_init+0x1e>
 800d9a6:	251e      	movs	r5, #30
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9ae:	b002      	add	sp, #8
 800d9b0:	4770      	bx	lr
 800d9b2:	a804      	add	r0, sp, #16
 800d9b4:	460d      	mov	r5, r1
 800d9b6:	f7fa fc27 	bl	8008208 <rcutils_allocator_is_valid>
 800d9ba:	b308      	cbz	r0, 800da00 <rcutils_string_map_init+0x6c>
 800d9bc:	9b04      	ldr	r3, [sp, #16]
 800d9be:	2020      	movs	r0, #32
 800d9c0:	9908      	ldr	r1, [sp, #32]
 800d9c2:	4798      	blx	r3
 800d9c4:	6020      	str	r0, [r4, #0]
 800d9c6:	b308      	cbz	r0, 800da0c <rcutils_string_map_init+0x78>
 800d9c8:	f10d 0e10 	add.w	lr, sp, #16
 800d9cc:	6086      	str	r6, [r0, #8]
 800d9ce:	f100 0c0c 	add.w	ip, r0, #12
 800d9d2:	e9c0 6600 	strd	r6, r6, [r0]
 800d9d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d9da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9de:	f8de 3000 	ldr.w	r3, [lr]
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f8cc 3000 	str.w	r3, [ip]
 800d9ea:	f7ff ff87 	bl	800d8fc <rcutils_string_map_reserve>
 800d9ee:	4605      	mov	r5, r0
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d0d9      	beq.n	800d9a8 <rcutils_string_map_init+0x14>
 800d9f4:	9b05      	ldr	r3, [sp, #20]
 800d9f6:	9908      	ldr	r1, [sp, #32]
 800d9f8:	6820      	ldr	r0, [r4, #0]
 800d9fa:	4798      	blx	r3
 800d9fc:	6026      	str	r6, [r4, #0]
 800d9fe:	e7d3      	b.n	800d9a8 <rcutils_string_map_init+0x14>
 800da00:	250b      	movs	r5, #11
 800da02:	4628      	mov	r0, r5
 800da04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da08:	b002      	add	sp, #8
 800da0a:	4770      	bx	lr
 800da0c:	250a      	movs	r5, #10
 800da0e:	e7cb      	b.n	800d9a8 <rcutils_string_map_init+0x14>

0800da10 <rcutils_string_map_fini>:
 800da10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da14:	b083      	sub	sp, #12
 800da16:	2800      	cmp	r0, #0
 800da18:	d03e      	beq.n	800da98 <rcutils_string_map_fini+0x88>
 800da1a:	6804      	ldr	r4, [r0, #0]
 800da1c:	4606      	mov	r6, r0
 800da1e:	2c00      	cmp	r4, #0
 800da20:	d036      	beq.n	800da90 <rcutils_string_map_fini+0x80>
 800da22:	6863      	ldr	r3, [r4, #4]
 800da24:	b34b      	cbz	r3, 800da7a <rcutils_string_map_fini+0x6a>
 800da26:	2500      	movs	r5, #0
 800da28:	6822      	ldr	r2, [r4, #0]
 800da2a:	462f      	mov	r7, r5
 800da2c:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800da30:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800da34:	b1f0      	cbz	r0, 800da74 <rcutils_string_map_fini+0x64>
 800da36:	69e1      	ldr	r1, [r4, #28]
 800da38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800da3c:	9101      	str	r1, [sp, #4]
 800da3e:	47c8      	blx	r9
 800da40:	6823      	ldr	r3, [r4, #0]
 800da42:	9901      	ldr	r1, [sp, #4]
 800da44:	eb03 0208 	add.w	r2, r3, r8
 800da48:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 800da4c:	3501      	adds	r5, #1
 800da4e:	6850      	ldr	r0, [r2, #4]
 800da50:	47c8      	blx	r9
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	6822      	ldr	r2, [r4, #0]
 800da56:	3b01      	subs	r3, #1
 800da58:	4442      	add	r2, r8
 800da5a:	6057      	str	r7, [r2, #4]
 800da5c:	60a3      	str	r3, [r4, #8]
 800da5e:	6834      	ldr	r4, [r6, #0]
 800da60:	6863      	ldr	r3, [r4, #4]
 800da62:	429d      	cmp	r5, r3
 800da64:	d209      	bcs.n	800da7a <rcutils_string_map_fini+0x6a>
 800da66:	6822      	ldr	r2, [r4, #0]
 800da68:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800da6c:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800da70:	2800      	cmp	r0, #0
 800da72:	d1e0      	bne.n	800da36 <rcutils_string_map_fini+0x26>
 800da74:	3501      	adds	r5, #1
 800da76:	429d      	cmp	r5, r3
 800da78:	d3d8      	bcc.n	800da2c <rcutils_string_map_fini+0x1c>
 800da7a:	2100      	movs	r1, #0
 800da7c:	4630      	mov	r0, r6
 800da7e:	f7ff ff3d 	bl	800d8fc <rcutils_string_map_reserve>
 800da82:	4604      	mov	r4, r0
 800da84:	b920      	cbnz	r0, 800da90 <rcutils_string_map_fini+0x80>
 800da86:	6830      	ldr	r0, [r6, #0]
 800da88:	6903      	ldr	r3, [r0, #16]
 800da8a:	69c1      	ldr	r1, [r0, #28]
 800da8c:	4798      	blx	r3
 800da8e:	6034      	str	r4, [r6, #0]
 800da90:	4620      	mov	r0, r4
 800da92:	b003      	add	sp, #12
 800da94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da98:	240b      	movs	r4, #11
 800da9a:	4620      	mov	r0, r4
 800da9c:	b003      	add	sp, #12
 800da9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daa2:	bf00      	nop

0800daa4 <rcutils_string_map_getn>:
 800daa4:	b338      	cbz	r0, 800daf6 <rcutils_string_map_getn+0x52>
 800daa6:	6803      	ldr	r3, [r0, #0]
 800daa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daac:	4688      	mov	r8, r1
 800daae:	b1d9      	cbz	r1, 800dae8 <rcutils_string_map_getn+0x44>
 800dab0:	fab3 f483 	clz	r4, r3
 800dab4:	0964      	lsrs	r4, r4, #5
 800dab6:	b1bb      	cbz	r3, 800dae8 <rcutils_string_map_getn+0x44>
 800dab8:	4691      	mov	r9, r2
 800daba:	e9d3 7600 	ldrd	r7, r6, [r3]
 800dabe:	b19e      	cbz	r6, 800dae8 <rcutils_string_map_getn+0x44>
 800dac0:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 800dac4:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 800dac8:	3401      	adds	r4, #1
 800daca:	4628      	mov	r0, r5
 800dacc:	b155      	cbz	r5, 800dae4 <rcutils_string_map_getn+0x40>
 800dace:	f7f2 fc11 	bl	80002f4 <strlen>
 800dad2:	4602      	mov	r2, r0
 800dad4:	4629      	mov	r1, r5
 800dad6:	4640      	mov	r0, r8
 800dad8:	454a      	cmp	r2, r9
 800dada:	bf38      	it	cc
 800dadc:	464a      	movcc	r2, r9
 800dade:	f003 fcec 	bl	80114ba <strncmp>
 800dae2:	b120      	cbz	r0, 800daee <rcutils_string_map_getn+0x4a>
 800dae4:	42a6      	cmp	r6, r4
 800dae6:	d1eb      	bne.n	800dac0 <rcutils_string_map_getn+0x1c>
 800dae8:	2000      	movs	r0, #0
 800daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daee:	f8da 0004 	ldr.w	r0, [sl, #4]
 800daf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf6:	4770      	bx	lr

0800daf8 <rcutils_system_time_now>:
 800daf8:	b310      	cbz	r0, 800db40 <rcutils_system_time_now+0x48>
 800dafa:	b570      	push	{r4, r5, r6, lr}
 800dafc:	b084      	sub	sp, #16
 800dafe:	4604      	mov	r4, r0
 800db00:	2001      	movs	r0, #1
 800db02:	4669      	mov	r1, sp
 800db04:	f7f3 f910 	bl	8000d28 <clock_gettime>
 800db08:	2800      	cmp	r0, #0
 800db0a:	db16      	blt.n	800db3a <rcutils_system_time_now+0x42>
 800db0c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800db10:	2900      	cmp	r1, #0
 800db12:	db12      	blt.n	800db3a <rcutils_system_time_now+0x42>
 800db14:	ea53 0201 	orrs.w	r2, r3, r1
 800db18:	9d02      	ldr	r5, [sp, #8]
 800db1a:	d101      	bne.n	800db20 <rcutils_system_time_now+0x28>
 800db1c:	2d00      	cmp	r5, #0
 800db1e:	db0c      	blt.n	800db3a <rcutils_system_time_now+0x42>
 800db20:	4e08      	ldr	r6, [pc, #32]	; (800db44 <rcutils_system_time_now+0x4c>)
 800db22:	2000      	movs	r0, #0
 800db24:	fba3 3206 	umull	r3, r2, r3, r6
 800db28:	195b      	adds	r3, r3, r5
 800db2a:	fb06 2201 	mla	r2, r6, r1, r2
 800db2e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800db32:	e9c4 3200 	strd	r3, r2, [r4]
 800db36:	b004      	add	sp, #16
 800db38:	bd70      	pop	{r4, r5, r6, pc}
 800db3a:	2002      	movs	r0, #2
 800db3c:	b004      	add	sp, #16
 800db3e:	bd70      	pop	{r4, r5, r6, pc}
 800db40:	200b      	movs	r0, #11
 800db42:	4770      	bx	lr
 800db44:	3b9aca00 	.word	0x3b9aca00

0800db48 <rcutils_steady_time_now>:
 800db48:	b310      	cbz	r0, 800db90 <rcutils_steady_time_now+0x48>
 800db4a:	b570      	push	{r4, r5, r6, lr}
 800db4c:	b084      	sub	sp, #16
 800db4e:	4604      	mov	r4, r0
 800db50:	2000      	movs	r0, #0
 800db52:	4669      	mov	r1, sp
 800db54:	f7f3 f8e8 	bl	8000d28 <clock_gettime>
 800db58:	2800      	cmp	r0, #0
 800db5a:	db16      	blt.n	800db8a <rcutils_steady_time_now+0x42>
 800db5c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800db60:	2900      	cmp	r1, #0
 800db62:	db12      	blt.n	800db8a <rcutils_steady_time_now+0x42>
 800db64:	ea53 0201 	orrs.w	r2, r3, r1
 800db68:	9d02      	ldr	r5, [sp, #8]
 800db6a:	d101      	bne.n	800db70 <rcutils_steady_time_now+0x28>
 800db6c:	2d00      	cmp	r5, #0
 800db6e:	db0c      	blt.n	800db8a <rcutils_steady_time_now+0x42>
 800db70:	4e08      	ldr	r6, [pc, #32]	; (800db94 <rcutils_steady_time_now+0x4c>)
 800db72:	2000      	movs	r0, #0
 800db74:	fba3 3206 	umull	r3, r2, r3, r6
 800db78:	195b      	adds	r3, r3, r5
 800db7a:	fb06 2201 	mla	r2, r6, r1, r2
 800db7e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800db82:	e9c4 3200 	strd	r3, r2, [r4]
 800db86:	b004      	add	sp, #16
 800db88:	bd70      	pop	{r4, r5, r6, pc}
 800db8a:	2002      	movs	r0, #2
 800db8c:	b004      	add	sp, #16
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	200b      	movs	r0, #11
 800db92:	4770      	bx	lr
 800db94:	3b9aca00 	.word	0x3b9aca00

0800db98 <rmw_get_zero_initialized_context>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	4604      	mov	r4, r0
 800db9c:	3010      	adds	r0, #16
 800db9e:	f000 f80f 	bl	800dbc0 <rmw_get_zero_initialized_init_options>
 800dba2:	2300      	movs	r3, #0
 800dba4:	4620      	mov	r0, r4
 800dba6:	60a3      	str	r3, [r4, #8]
 800dba8:	66a3      	str	r3, [r4, #104]	; 0x68
 800dbaa:	66e3      	str	r3, [r4, #108]	; 0x6c
 800dbac:	ed9f 7b02 	vldr	d7, [pc, #8]	; 800dbb8 <rmw_get_zero_initialized_context+0x20>
 800dbb0:	ed84 7b00 	vstr	d7, [r4]
 800dbb4:	bd10      	pop	{r4, pc}
 800dbb6:	bf00      	nop
	...

0800dbc0 <rmw_get_zero_initialized_init_options>:
 800dbc0:	b510      	push	{r4, lr}
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	2258      	movs	r2, #88	; 0x58
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	f003 fa94 	bl	80110f4 <memset>
 800dbcc:	f104 0010 	add.w	r0, r4, #16
 800dbd0:	f000 f80a 	bl	800dbe8 <rmw_get_default_security_options>
 800dbd4:	f104 001c 	add.w	r0, r4, #28
 800dbd8:	f003 f86a 	bl	8010cb0 <rmw_get_zero_initialized_discovery_options>
 800dbdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	60e3      	str	r3, [r4, #12]
 800dbe4:	bd10      	pop	{r4, pc}
 800dbe6:	bf00      	nop

0800dbe8 <rmw_get_default_security_options>:
 800dbe8:	2200      	movs	r2, #0
 800dbea:	7002      	strb	r2, [r0, #0]
 800dbec:	6042      	str	r2, [r0, #4]
 800dbee:	4770      	bx	lr

0800dbf0 <rmw_validate_full_topic_name>:
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d05d      	beq.n	800dcb0 <rmw_validate_full_topic_name+0xc0>
 800dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	2900      	cmp	r1, #0
 800dbfc:	d05a      	beq.n	800dcb4 <rmw_validate_full_topic_name+0xc4>
 800dbfe:	4604      	mov	r4, r0
 800dc00:	4616      	mov	r6, r2
 800dc02:	f7f2 fb77 	bl	80002f4 <strlen>
 800dc06:	b150      	cbz	r0, 800dc1e <rmw_validate_full_topic_name+0x2e>
 800dc08:	7823      	ldrb	r3, [r4, #0]
 800dc0a:	2b2f      	cmp	r3, #47	; 0x2f
 800dc0c:	d00e      	beq.n	800dc2c <rmw_validate_full_topic_name+0x3c>
 800dc0e:	2302      	movs	r3, #2
 800dc10:	602b      	str	r3, [r5, #0]
 800dc12:	b146      	cbz	r6, 800dc26 <rmw_validate_full_topic_name+0x36>
 800dc14:	2300      	movs	r3, #0
 800dc16:	4618      	mov	r0, r3
 800dc18:	6033      	str	r3, [r6, #0]
 800dc1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1e:	2301      	movs	r3, #1
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	2e00      	cmp	r6, #0
 800dc24:	d1f6      	bne.n	800dc14 <rmw_validate_full_topic_name+0x24>
 800dc26:	2000      	movs	r0, #0
 800dc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc2c:	1e43      	subs	r3, r0, #1
 800dc2e:	5ce2      	ldrb	r2, [r4, r3]
 800dc30:	2a2f      	cmp	r2, #47	; 0x2f
 800dc32:	d041      	beq.n	800dcb8 <rmw_validate_full_topic_name+0xc8>
 800dc34:	1e62      	subs	r2, r4, #1
 800dc36:	f1c4 0e01 	rsb	lr, r4, #1
 800dc3a:	eb02 0800 	add.w	r8, r2, r0
 800dc3e:	eb0e 0702 	add.w	r7, lr, r2
 800dc42:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800dc46:	f023 0120 	bic.w	r1, r3, #32
 800dc4a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 800dc4e:	3941      	subs	r1, #65	; 0x41
 800dc50:	2919      	cmp	r1, #25
 800dc52:	d90f      	bls.n	800dc74 <rmw_validate_full_topic_name+0x84>
 800dc54:	f1bc 0f0a 	cmp.w	ip, #10
 800dc58:	d90c      	bls.n	800dc74 <rmw_validate_full_topic_name+0x84>
 800dc5a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 800dc5e:	fab3 f383 	clz	r3, r3
 800dc62:	095b      	lsrs	r3, r3, #5
 800dc64:	b933      	cbnz	r3, 800dc74 <rmw_validate_full_topic_name+0x84>
 800dc66:	2204      	movs	r2, #4
 800dc68:	602a      	str	r2, [r5, #0]
 800dc6a:	2e00      	cmp	r6, #0
 800dc6c:	d0db      	beq.n	800dc26 <rmw_validate_full_topic_name+0x36>
 800dc6e:	4618      	mov	r0, r3
 800dc70:	6037      	str	r7, [r6, #0]
 800dc72:	e7d2      	b.n	800dc1a <rmw_validate_full_topic_name+0x2a>
 800dc74:	4542      	cmp	r2, r8
 800dc76:	d1e2      	bne.n	800dc3e <rmw_validate_full_topic_name+0x4e>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	4f1a      	ldr	r7, [pc, #104]	; (800dce4 <rmw_validate_full_topic_name+0xf4>)
 800dc7c:	e004      	b.n	800dc88 <rmw_validate_full_topic_name+0x98>
 800dc7e:	4298      	cmp	r0, r3
 800dc80:	f104 0401 	add.w	r4, r4, #1
 800dc84:	4613      	mov	r3, r2
 800dc86:	d91c      	bls.n	800dcc2 <rmw_validate_full_topic_name+0xd2>
 800dc88:	4298      	cmp	r0, r3
 800dc8a:	f103 0201 	add.w	r2, r3, #1
 800dc8e:	d0f6      	beq.n	800dc7e <rmw_validate_full_topic_name+0x8e>
 800dc90:	7821      	ldrb	r1, [r4, #0]
 800dc92:	292f      	cmp	r1, #47	; 0x2f
 800dc94:	d1f3      	bne.n	800dc7e <rmw_validate_full_topic_name+0x8e>
 800dc96:	7861      	ldrb	r1, [r4, #1]
 800dc98:	292f      	cmp	r1, #47	; 0x2f
 800dc9a:	d01e      	beq.n	800dcda <rmw_validate_full_topic_name+0xea>
 800dc9c:	5dc9      	ldrb	r1, [r1, r7]
 800dc9e:	0749      	lsls	r1, r1, #29
 800dca0:	d5ed      	bpl.n	800dc7e <rmw_validate_full_topic_name+0x8e>
 800dca2:	2206      	movs	r2, #6
 800dca4:	602a      	str	r2, [r5, #0]
 800dca6:	2e00      	cmp	r6, #0
 800dca8:	d0bd      	beq.n	800dc26 <rmw_validate_full_topic_name+0x36>
 800dcaa:	2000      	movs	r0, #0
 800dcac:	6033      	str	r3, [r6, #0]
 800dcae:	e7b4      	b.n	800dc1a <rmw_validate_full_topic_name+0x2a>
 800dcb0:	200b      	movs	r0, #11
 800dcb2:	4770      	bx	lr
 800dcb4:	200b      	movs	r0, #11
 800dcb6:	e7b0      	b.n	800dc1a <rmw_validate_full_topic_name+0x2a>
 800dcb8:	2203      	movs	r2, #3
 800dcba:	602a      	str	r2, [r5, #0]
 800dcbc:	2e00      	cmp	r6, #0
 800dcbe:	d1f4      	bne.n	800dcaa <rmw_validate_full_topic_name+0xba>
 800dcc0:	e7b1      	b.n	800dc26 <rmw_validate_full_topic_name+0x36>
 800dcc2:	28f7      	cmp	r0, #247	; 0xf7
 800dcc4:	d803      	bhi.n	800dcce <rmw_validate_full_topic_name+0xde>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	4618      	mov	r0, r3
 800dcca:	602b      	str	r3, [r5, #0]
 800dccc:	e7a5      	b.n	800dc1a <rmw_validate_full_topic_name+0x2a>
 800dcce:	2307      	movs	r3, #7
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	2e00      	cmp	r6, #0
 800dcd4:	d0a7      	beq.n	800dc26 <rmw_validate_full_topic_name+0x36>
 800dcd6:	23f6      	movs	r3, #246	; 0xf6
 800dcd8:	e7e7      	b.n	800dcaa <rmw_validate_full_topic_name+0xba>
 800dcda:	2205      	movs	r2, #5
 800dcdc:	602a      	str	r2, [r5, #0]
 800dcde:	2e00      	cmp	r6, #0
 800dce0:	d1e3      	bne.n	800dcaa <rmw_validate_full_topic_name+0xba>
 800dce2:	e7a0      	b.n	800dc26 <rmw_validate_full_topic_name+0x36>
 800dce4:	080133e1 	.word	0x080133e1

0800dce8 <rmw_validate_namespace_with_size>:
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d043      	beq.n	800dd74 <rmw_validate_namespace_with_size+0x8c>
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	4614      	mov	r4, r2
 800dcf0:	b0c2      	sub	sp, #264	; 0x108
 800dcf2:	b32a      	cbz	r2, 800dd40 <rmw_validate_namespace_with_size+0x58>
 800dcf4:	2901      	cmp	r1, #1
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	461e      	mov	r6, r3
 800dcfa:	d102      	bne.n	800dd02 <rmw_validate_namespace_with_size+0x1a>
 800dcfc:	7803      	ldrb	r3, [r0, #0]
 800dcfe:	2b2f      	cmp	r3, #47	; 0x2f
 800dd00:	d012      	beq.n	800dd28 <rmw_validate_namespace_with_size+0x40>
 800dd02:	aa01      	add	r2, sp, #4
 800dd04:	4669      	mov	r1, sp
 800dd06:	f7ff ff73 	bl	800dbf0 <rmw_validate_full_topic_name>
 800dd0a:	b980      	cbnz	r0, 800dd2e <rmw_validate_namespace_with_size+0x46>
 800dd0c:	9a00      	ldr	r2, [sp, #0]
 800dd0e:	b14a      	cbz	r2, 800dd24 <rmw_validate_namespace_with_size+0x3c>
 800dd10:	2a07      	cmp	r2, #7
 800dd12:	d007      	beq.n	800dd24 <rmw_validate_namespace_with_size+0x3c>
 800dd14:	1e53      	subs	r3, r2, #1
 800dd16:	2b05      	cmp	r3, #5
 800dd18:	d82e      	bhi.n	800dd78 <rmw_validate_namespace_with_size+0x90>
 800dd1a:	e8df f003 	tbb	[pc, r3]
 800dd1e:	1f1c      	.short	0x1f1c
 800dd20:	14282522 	.word	0x14282522
 800dd24:	2df5      	cmp	r5, #245	; 0xf5
 800dd26:	d804      	bhi.n	800dd32 <rmw_validate_namespace_with_size+0x4a>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	6023      	str	r3, [r4, #0]
 800dd2e:	b042      	add	sp, #264	; 0x108
 800dd30:	bd70      	pop	{r4, r5, r6, pc}
 800dd32:	2307      	movs	r3, #7
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	2e00      	cmp	r6, #0
 800dd38:	d0f9      	beq.n	800dd2e <rmw_validate_namespace_with_size+0x46>
 800dd3a:	23f4      	movs	r3, #244	; 0xf4
 800dd3c:	6033      	str	r3, [r6, #0]
 800dd3e:	e7f6      	b.n	800dd2e <rmw_validate_namespace_with_size+0x46>
 800dd40:	200b      	movs	r0, #11
 800dd42:	b042      	add	sp, #264	; 0x108
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
 800dd46:	2306      	movs	r3, #6
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	2e00      	cmp	r6, #0
 800dd4c:	d0ef      	beq.n	800dd2e <rmw_validate_namespace_with_size+0x46>
 800dd4e:	9b01      	ldr	r3, [sp, #4]
 800dd50:	6033      	str	r3, [r6, #0]
 800dd52:	b042      	add	sp, #264	; 0x108
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
 800dd56:	2301      	movs	r3, #1
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	e7f6      	b.n	800dd4a <rmw_validate_namespace_with_size+0x62>
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	6023      	str	r3, [r4, #0]
 800dd60:	e7f3      	b.n	800dd4a <rmw_validate_namespace_with_size+0x62>
 800dd62:	2303      	movs	r3, #3
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	e7f0      	b.n	800dd4a <rmw_validate_namespace_with_size+0x62>
 800dd68:	2304      	movs	r3, #4
 800dd6a:	6023      	str	r3, [r4, #0]
 800dd6c:	e7ed      	b.n	800dd4a <rmw_validate_namespace_with_size+0x62>
 800dd6e:	2305      	movs	r3, #5
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	e7ea      	b.n	800dd4a <rmw_validate_namespace_with_size+0x62>
 800dd74:	200b      	movs	r0, #11
 800dd76:	4770      	bx	lr
 800dd78:	4613      	mov	r3, r2
 800dd7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd7e:	4a03      	ldr	r2, [pc, #12]	; (800dd8c <rmw_validate_namespace_with_size+0xa4>)
 800dd80:	a802      	add	r0, sp, #8
 800dd82:	f7ff fd1f 	bl	800d7c4 <rcutils_snprintf>
 800dd86:	2001      	movs	r0, #1
 800dd88:	e7d1      	b.n	800dd2e <rmw_validate_namespace_with_size+0x46>
 800dd8a:	bf00      	nop
 800dd8c:	08012cc8 	.word	0x08012cc8

0800dd90 <rmw_validate_namespace>:
 800dd90:	b168      	cbz	r0, 800ddae <rmw_validate_namespace+0x1e>
 800dd92:	b570      	push	{r4, r5, r6, lr}
 800dd94:	460d      	mov	r5, r1
 800dd96:	4616      	mov	r6, r2
 800dd98:	4604      	mov	r4, r0
 800dd9a:	f7f2 faab 	bl	80002f4 <strlen>
 800dd9e:	4633      	mov	r3, r6
 800dda0:	4601      	mov	r1, r0
 800dda2:	462a      	mov	r2, r5
 800dda4:	4620      	mov	r0, r4
 800dda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddaa:	f7ff bf9d 	b.w	800dce8 <rmw_validate_namespace_with_size>
 800ddae:	200b      	movs	r0, #11
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop

0800ddb4 <rmw_namespace_validation_result_string>:
 800ddb4:	2807      	cmp	r0, #7
 800ddb6:	d803      	bhi.n	800ddc0 <rmw_namespace_validation_result_string+0xc>
 800ddb8:	4b02      	ldr	r3, [pc, #8]	; (800ddc4 <rmw_namespace_validation_result_string+0x10>)
 800ddba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ddbe:	4770      	bx	lr
 800ddc0:	4801      	ldr	r0, [pc, #4]	; (800ddc8 <rmw_namespace_validation_result_string+0x14>)
 800ddc2:	4770      	bx	lr
 800ddc4:	08012ec0 	.word	0x08012ec0
 800ddc8:	08012d18 	.word	0x08012d18

0800ddcc <rmw_validate_node_name>:
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d042      	beq.n	800de56 <rmw_validate_node_name+0x8a>
 800ddd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd4:	460d      	mov	r5, r1
 800ddd6:	2900      	cmp	r1, #0
 800ddd8:	d03f      	beq.n	800de5a <rmw_validate_node_name+0x8e>
 800ddda:	4604      	mov	r4, r0
 800dddc:	4616      	mov	r6, r2
 800ddde:	f7f2 fa89 	bl	80002f4 <strlen>
 800dde2:	b310      	cbz	r0, 800de2a <rmw_validate_node_name+0x5e>
 800dde4:	1e63      	subs	r3, r4, #1
 800dde6:	f1c4 0101 	rsb	r1, r4, #1
 800ddea:	eb03 0800 	add.w	r8, r3, r0
 800ddee:	18cf      	adds	r7, r1, r3
 800ddf0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800ddf4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800ddf8:	f02e 0c20 	bic.w	ip, lr, #32
 800ddfc:	2a09      	cmp	r2, #9
 800ddfe:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800de02:	d905      	bls.n	800de10 <rmw_validate_node_name+0x44>
 800de04:	f1bc 0f19 	cmp.w	ip, #25
 800de08:	d902      	bls.n	800de10 <rmw_validate_node_name+0x44>
 800de0a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800de0e:	d114      	bne.n	800de3a <rmw_validate_node_name+0x6e>
 800de10:	4598      	cmp	r8, r3
 800de12:	d1ec      	bne.n	800ddee <rmw_validate_node_name+0x22>
 800de14:	7822      	ldrb	r2, [r4, #0]
 800de16:	4b16      	ldr	r3, [pc, #88]	; (800de70 <rmw_validate_node_name+0xa4>)
 800de18:	5cd3      	ldrb	r3, [r2, r3]
 800de1a:	f013 0304 	ands.w	r3, r3, #4
 800de1e:	d113      	bne.n	800de48 <rmw_validate_node_name+0x7c>
 800de20:	28ff      	cmp	r0, #255	; 0xff
 800de22:	d81c      	bhi.n	800de5e <rmw_validate_node_name+0x92>
 800de24:	4618      	mov	r0, r3
 800de26:	602b      	str	r3, [r5, #0]
 800de28:	e00c      	b.n	800de44 <rmw_validate_node_name+0x78>
 800de2a:	2301      	movs	r3, #1
 800de2c:	602b      	str	r3, [r5, #0]
 800de2e:	b17e      	cbz	r6, 800de50 <rmw_validate_node_name+0x84>
 800de30:	2300      	movs	r3, #0
 800de32:	4618      	mov	r0, r3
 800de34:	6033      	str	r3, [r6, #0]
 800de36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de3a:	2302      	movs	r3, #2
 800de3c:	602b      	str	r3, [r5, #0]
 800de3e:	b13e      	cbz	r6, 800de50 <rmw_validate_node_name+0x84>
 800de40:	2000      	movs	r0, #0
 800de42:	6037      	str	r7, [r6, #0]
 800de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de48:	2303      	movs	r3, #3
 800de4a:	602b      	str	r3, [r5, #0]
 800de4c:	2e00      	cmp	r6, #0
 800de4e:	d1ef      	bne.n	800de30 <rmw_validate_node_name+0x64>
 800de50:	2000      	movs	r0, #0
 800de52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de56:	200b      	movs	r0, #11
 800de58:	4770      	bx	lr
 800de5a:	200b      	movs	r0, #11
 800de5c:	e7f2      	b.n	800de44 <rmw_validate_node_name+0x78>
 800de5e:	2204      	movs	r2, #4
 800de60:	602a      	str	r2, [r5, #0]
 800de62:	2e00      	cmp	r6, #0
 800de64:	d0f4      	beq.n	800de50 <rmw_validate_node_name+0x84>
 800de66:	22fe      	movs	r2, #254	; 0xfe
 800de68:	4618      	mov	r0, r3
 800de6a:	6032      	str	r2, [r6, #0]
 800de6c:	e7ea      	b.n	800de44 <rmw_validate_node_name+0x78>
 800de6e:	bf00      	nop
 800de70:	080133e1 	.word	0x080133e1

0800de74 <rmw_node_name_validation_result_string>:
 800de74:	2804      	cmp	r0, #4
 800de76:	d803      	bhi.n	800de80 <rmw_node_name_validation_result_string+0xc>
 800de78:	4b02      	ldr	r3, [pc, #8]	; (800de84 <rmw_node_name_validation_result_string+0x10>)
 800de7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800de7e:	4770      	bx	lr
 800de80:	4801      	ldr	r0, [pc, #4]	; (800de88 <rmw_node_name_validation_result_string+0x14>)
 800de82:	4770      	bx	lr
 800de84:	08012fcc 	.word	0x08012fcc
 800de88:	08012ee0 	.word	0x08012ee0

0800de8c <get_memory>:
 800de8c:	4603      	mov	r3, r0
 800de8e:	6840      	ldr	r0, [r0, #4]
 800de90:	b158      	cbz	r0, 800deaa <get_memory+0x1e>
 800de92:	6842      	ldr	r2, [r0, #4]
 800de94:	605a      	str	r2, [r3, #4]
 800de96:	b10a      	cbz	r2, 800de9c <get_memory+0x10>
 800de98:	2100      	movs	r1, #0
 800de9a:	6011      	str	r1, [r2, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	6042      	str	r2, [r0, #4]
 800dea0:	b102      	cbz	r2, 800dea4 <get_memory+0x18>
 800dea2:	6010      	str	r0, [r2, #0]
 800dea4:	2200      	movs	r2, #0
 800dea6:	6002      	str	r2, [r0, #0]
 800dea8:	6018      	str	r0, [r3, #0]
 800deaa:	4770      	bx	lr

0800deac <put_memory>:
 800deac:	680b      	ldr	r3, [r1, #0]
 800deae:	b10b      	cbz	r3, 800deb4 <put_memory+0x8>
 800deb0:	684a      	ldr	r2, [r1, #4]
 800deb2:	605a      	str	r2, [r3, #4]
 800deb4:	684a      	ldr	r2, [r1, #4]
 800deb6:	b102      	cbz	r2, 800deba <put_memory+0xe>
 800deb8:	6013      	str	r3, [r2, #0]
 800deba:	6803      	ldr	r3, [r0, #0]
 800debc:	428b      	cmp	r3, r1
 800debe:	6843      	ldr	r3, [r0, #4]
 800dec0:	bf08      	it	eq
 800dec2:	6002      	streq	r2, [r0, #0]
 800dec4:	604b      	str	r3, [r1, #4]
 800dec6:	b103      	cbz	r3, 800deca <put_memory+0x1e>
 800dec8:	6019      	str	r1, [r3, #0]
 800deca:	2300      	movs	r3, #0
 800decc:	600b      	str	r3, [r1, #0]
 800dece:	6041      	str	r1, [r0, #4]
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop

0800ded4 <rmw_get_implementation_identifier>:
 800ded4:	4b01      	ldr	r3, [pc, #4]	; (800dedc <rmw_get_implementation_identifier+0x8>)
 800ded6:	6818      	ldr	r0, [r3, #0]
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	08012ff8 	.word	0x08012ff8

0800dee0 <rmw_init_options_init>:
 800dee0:	b084      	sub	sp, #16
 800dee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee4:	b083      	sub	sp, #12
 800dee6:	ad09      	add	r5, sp, #36	; 0x24
 800dee8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800deec:	b130      	cbz	r0, 800defc <rmw_init_options_init+0x1c>
 800deee:	4604      	mov	r4, r0
 800def0:	4628      	mov	r0, r5
 800def2:	f7fa f989 	bl	8008208 <rcutils_allocator_is_valid>
 800def6:	b108      	cbz	r0, 800defc <rmw_init_options_init+0x1c>
 800def8:	68a6      	ldr	r6, [r4, #8]
 800defa:	b12e      	cbz	r6, 800df08 <rmw_init_options_init+0x28>
 800defc:	200b      	movs	r0, #11
 800defe:	b003      	add	sp, #12
 800df00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df04:	b004      	add	sp, #16
 800df06:	4770      	bx	lr
 800df08:	2200      	movs	r2, #0
 800df0a:	2300      	movs	r3, #0
 800df0c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800df10:	f8df e098 	ldr.w	lr, [pc, #152]	; 800dfac <rmw_init_options_init+0xcc>
 800df14:	466f      	mov	r7, sp
 800df16:	e9c4 2300 	strd	r2, r3, [r4]
 800df1a:	4b20      	ldr	r3, [pc, #128]	; (800df9c <rmw_init_options_init+0xbc>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	60a3      	str	r3, [r4, #8]
 800df20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df26:	682b      	ldr	r3, [r5, #0]
 800df28:	4638      	mov	r0, r7
 800df2a:	f8cc 3000 	str.w	r3, [ip]
 800df2e:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 800df32:	60e6      	str	r6, [r4, #12]
 800df34:	f7ff fe58 	bl	800dbe8 <rmw_get_default_security_options>
 800df38:	f104 0310 	add.w	r3, r4, #16
 800df3c:	2203      	movs	r2, #3
 800df3e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800df42:	e883 0003 	stmia.w	r3, {r0, r1}
 800df46:	4816      	ldr	r0, [pc, #88]	; (800dfa0 <rmw_init_options_init+0xc0>)
 800df48:	4916      	ldr	r1, [pc, #88]	; (800dfa4 <rmw_init_options_init+0xc4>)
 800df4a:	7626      	strb	r6, [r4, #24]
 800df4c:	f7fa fc66 	bl	800881c <rmw_uxrce_init_init_options_impl_memory>
 800df50:	4813      	ldr	r0, [pc, #76]	; (800dfa0 <rmw_init_options_init+0xc0>)
 800df52:	f7ff ff9b 	bl	800de8c <get_memory>
 800df56:	b1f0      	cbz	r0, 800df96 <rmw_init_options_init+0xb6>
 800df58:	4a13      	ldr	r2, [pc, #76]	; (800dfa8 <rmw_init_options_init+0xc8>)
 800df5a:	6883      	ldr	r3, [r0, #8]
 800df5c:	6851      	ldr	r1, [r2, #4]
 800df5e:	6563      	str	r3, [r4, #84]	; 0x54
 800df60:	7810      	ldrb	r0, [r2, #0]
 800df62:	6159      	str	r1, [r3, #20]
 800df64:	68d1      	ldr	r1, [r2, #12]
 800df66:	7418      	strb	r0, [r3, #16]
 800df68:	61d9      	str	r1, [r3, #28]
 800df6a:	6911      	ldr	r1, [r2, #16]
 800df6c:	6219      	str	r1, [r3, #32]
 800df6e:	6951      	ldr	r1, [r2, #20]
 800df70:	6892      	ldr	r2, [r2, #8]
 800df72:	6259      	str	r1, [r3, #36]	; 0x24
 800df74:	619a      	str	r2, [r3, #24]
 800df76:	f7fd fa4f 	bl	800b418 <uxr_nanos>
 800df7a:	f003 f9d1 	bl	8011320 <srand>
 800df7e:	f003 f9fd 	bl	801137c <rand>
 800df82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800df84:	6298      	str	r0, [r3, #40]	; 0x28
 800df86:	2800      	cmp	r0, #0
 800df88:	d0f9      	beq.n	800df7e <rmw_init_options_init+0x9e>
 800df8a:	2000      	movs	r0, #0
 800df8c:	b003      	add	sp, #12
 800df8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df92:	b004      	add	sp, #16
 800df94:	4770      	bx	lr
 800df96:	2001      	movs	r0, #1
 800df98:	e7b1      	b.n	800defe <rmw_init_options_init+0x1e>
 800df9a:	bf00      	nop
 800df9c:	08012ff8 	.word	0x08012ff8
 800dfa0:	2000daac 	.word	0x2000daac
 800dfa4:	20009348 	.word	0x20009348
 800dfa8:	200091d4 	.word	0x200091d4
 800dfac:	08012b7c 	.word	0x08012b7c

0800dfb0 <rmw_init_options_copy>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	b158      	cbz	r0, 800dfcc <rmw_init_options_copy+0x1c>
 800dfb4:	460d      	mov	r5, r1
 800dfb6:	b149      	cbz	r1, 800dfcc <rmw_init_options_copy+0x1c>
 800dfb8:	4604      	mov	r4, r0
 800dfba:	6880      	ldr	r0, [r0, #8]
 800dfbc:	b120      	cbz	r0, 800dfc8 <rmw_init_options_copy+0x18>
 800dfbe:	4b13      	ldr	r3, [pc, #76]	; (800e00c <rmw_init_options_copy+0x5c>)
 800dfc0:	6819      	ldr	r1, [r3, #0]
 800dfc2:	f7f2 f98d 	bl	80002e0 <strcmp>
 800dfc6:	b9d8      	cbnz	r0, 800e000 <rmw_init_options_copy+0x50>
 800dfc8:	68ae      	ldr	r6, [r5, #8]
 800dfca:	b116      	cbz	r6, 800dfd2 <rmw_init_options_copy+0x22>
 800dfcc:	260b      	movs	r6, #11
 800dfce:	4630      	mov	r0, r6
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
 800dfd2:	2258      	movs	r2, #88	; 0x58
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f003 f87e 	bl	80110d8 <memcpy>
 800dfdc:	480c      	ldr	r0, [pc, #48]	; (800e010 <rmw_init_options_copy+0x60>)
 800dfde:	f7ff ff55 	bl	800de8c <get_memory>
 800dfe2:	b180      	cbz	r0, 800e006 <rmw_init_options_copy+0x56>
 800dfe4:	6883      	ldr	r3, [r0, #8]
 800dfe6:	656b      	str	r3, [r5, #84]	; 0x54
 800dfe8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800dfea:	f103 0410 	add.w	r4, r3, #16
 800dfee:	3510      	adds	r5, #16
 800dff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dffc:	4630      	mov	r0, r6
 800dffe:	bd70      	pop	{r4, r5, r6, pc}
 800e000:	260c      	movs	r6, #12
 800e002:	4630      	mov	r0, r6
 800e004:	bd70      	pop	{r4, r5, r6, pc}
 800e006:	2601      	movs	r6, #1
 800e008:	e7e1      	b.n	800dfce <rmw_init_options_copy+0x1e>
 800e00a:	bf00      	nop
 800e00c:	08012ff8 	.word	0x08012ff8
 800e010:	2000daac 	.word	0x2000daac

0800e014 <rmw_init_options_fini>:
 800e014:	b368      	cbz	r0, 800e072 <rmw_init_options_fini+0x5e>
 800e016:	b510      	push	{r4, lr}
 800e018:	4604      	mov	r4, r0
 800e01a:	b096      	sub	sp, #88	; 0x58
 800e01c:	3040      	adds	r0, #64	; 0x40
 800e01e:	f7fa f8f3 	bl	8008208 <rcutils_allocator_is_valid>
 800e022:	b1f0      	cbz	r0, 800e062 <rmw_init_options_fini+0x4e>
 800e024:	68a0      	ldr	r0, [r4, #8]
 800e026:	b120      	cbz	r0, 800e032 <rmw_init_options_fini+0x1e>
 800e028:	4b13      	ldr	r3, [pc, #76]	; (800e078 <rmw_init_options_fini+0x64>)
 800e02a:	6819      	ldr	r1, [r3, #0]
 800e02c:	f7f2 f958 	bl	80002e0 <strcmp>
 800e030:	b9e8      	cbnz	r0, 800e06e <rmw_init_options_fini+0x5a>
 800e032:	4b12      	ldr	r3, [pc, #72]	; (800e07c <rmw_init_options_fini+0x68>)
 800e034:	6819      	ldr	r1, [r3, #0]
 800e036:	b1b9      	cbz	r1, 800e068 <rmw_init_options_fini+0x54>
 800e038:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e03a:	e001      	b.n	800e040 <rmw_init_options_fini+0x2c>
 800e03c:	6849      	ldr	r1, [r1, #4]
 800e03e:	b199      	cbz	r1, 800e068 <rmw_init_options_fini+0x54>
 800e040:	688b      	ldr	r3, [r1, #8]
 800e042:	429a      	cmp	r2, r3
 800e044:	d1fa      	bne.n	800e03c <rmw_init_options_fini+0x28>
 800e046:	480d      	ldr	r0, [pc, #52]	; (800e07c <rmw_init_options_fini+0x68>)
 800e048:	f7ff ff30 	bl	800deac <put_memory>
 800e04c:	4668      	mov	r0, sp
 800e04e:	f7ff fdb7 	bl	800dbc0 <rmw_get_zero_initialized_init_options>
 800e052:	2258      	movs	r2, #88	; 0x58
 800e054:	4669      	mov	r1, sp
 800e056:	4620      	mov	r0, r4
 800e058:	f003 f83e 	bl	80110d8 <memcpy>
 800e05c:	2000      	movs	r0, #0
 800e05e:	b016      	add	sp, #88	; 0x58
 800e060:	bd10      	pop	{r4, pc}
 800e062:	200b      	movs	r0, #11
 800e064:	b016      	add	sp, #88	; 0x58
 800e066:	bd10      	pop	{r4, pc}
 800e068:	2001      	movs	r0, #1
 800e06a:	b016      	add	sp, #88	; 0x58
 800e06c:	bd10      	pop	{r4, pc}
 800e06e:	200c      	movs	r0, #12
 800e070:	e7f5      	b.n	800e05e <rmw_init_options_fini+0x4a>
 800e072:	200b      	movs	r0, #11
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	08012ff8 	.word	0x08012ff8
 800e07c:	2000daac 	.word	0x2000daac

0800e080 <rmw_init>:
 800e080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e084:	b083      	sub	sp, #12
 800e086:	2800      	cmp	r0, #0
 800e088:	f000 80d3 	beq.w	800e232 <rmw_init+0x1b2>
 800e08c:	460e      	mov	r6, r1
 800e08e:	2900      	cmp	r1, #0
 800e090:	f000 80cf 	beq.w	800e232 <rmw_init+0x1b2>
 800e094:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e096:	4605      	mov	r5, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f000 80ca 	beq.w	800e232 <rmw_init+0x1b2>
 800e09e:	4b78      	ldr	r3, [pc, #480]	; (800e280 <rmw_init+0x200>)
 800e0a0:	6880      	ldr	r0, [r0, #8]
 800e0a2:	681f      	ldr	r7, [r3, #0]
 800e0a4:	b128      	cbz	r0, 800e0b2 <rmw_init+0x32>
 800e0a6:	4639      	mov	r1, r7
 800e0a8:	f7f2 f91a 	bl	80002e0 <strcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	f040 80ca 	bne.w	800e246 <rmw_init+0x1c6>
 800e0b2:	4c74      	ldr	r4, [pc, #464]	; (800e284 <rmw_init+0x204>)
 800e0b4:	f04f 0800 	mov.w	r8, #0
 800e0b8:	4973      	ldr	r1, [pc, #460]	; (800e288 <rmw_init+0x208>)
 800e0ba:	4874      	ldr	r0, [pc, #464]	; (800e28c <rmw_init+0x20c>)
 800e0bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0c0:	60b7      	str	r7, [r6, #8]
 800e0c2:	e9c6 2300 	strd	r2, r3, [r6]
 800e0c6:	68eb      	ldr	r3, [r5, #12]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	66b3      	str	r3, [r6, #104]	; 0x68
 800e0cc:	f7fa fb46 	bl	800875c <rmw_uxrce_init_session_memory>
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	2204      	movs	r2, #4
 800e0d4:	496e      	ldr	r1, [pc, #440]	; (800e290 <rmw_init+0x210>)
 800e0d6:	f7fa fb81 	bl	80087dc <rmw_uxrce_init_static_input_buffer_memory>
 800e0da:	486c      	ldr	r0, [pc, #432]	; (800e28c <rmw_init+0x20c>)
 800e0dc:	f884 800d 	strb.w	r8, [r4, #13]
 800e0e0:	f7ff fed4 	bl	800de8c <get_memory>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	f000 80a9 	beq.w	800e23c <rmw_init+0x1bc>
 800e0ea:	6884      	ldr	r4, [r0, #8]
 800e0ec:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800e0ee:	f104 0910 	add.w	r9, r4, #16
 800e0f2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e0f4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e0f8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e0fc:	9101      	str	r1, [sp, #4]
 800e0fe:	4661      	mov	r1, ip
 800e100:	6a00      	ldr	r0, [r0, #32]
 800e102:	9000      	str	r0, [sp, #0]
 800e104:	4648      	mov	r0, r9
 800e106:	f000 fdf5 	bl	800ecf4 <uxr_set_custom_transport_callbacks>
 800e10a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e10e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800e112:	4960      	ldr	r1, [pc, #384]	; (800e294 <rmw_init+0x214>)
 800e114:	4860      	ldr	r0, [pc, #384]	; (800e298 <rmw_init+0x218>)
 800e116:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800e11a:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800e11e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800e122:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800e126:	2201      	movs	r2, #1
 800e128:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800e12c:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800e130:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800e134:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800e138:	66f4      	str	r4, [r6, #108]	; 0x6c
 800e13a:	f7fa faef 	bl	800871c <rmw_uxrce_init_node_memory>
 800e13e:	2205      	movs	r2, #5
 800e140:	4956      	ldr	r1, [pc, #344]	; (800e29c <rmw_init+0x21c>)
 800e142:	4857      	ldr	r0, [pc, #348]	; (800e2a0 <rmw_init+0x220>)
 800e144:	f7fa faca 	bl	80086dc <rmw_uxrce_init_subscription_memory>
 800e148:	220a      	movs	r2, #10
 800e14a:	4956      	ldr	r1, [pc, #344]	; (800e2a4 <rmw_init+0x224>)
 800e14c:	4856      	ldr	r0, [pc, #344]	; (800e2a8 <rmw_init+0x228>)
 800e14e:	f7fa faa5 	bl	800869c <rmw_uxrce_init_publisher_memory>
 800e152:	2201      	movs	r2, #1
 800e154:	4955      	ldr	r1, [pc, #340]	; (800e2ac <rmw_init+0x22c>)
 800e156:	4856      	ldr	r0, [pc, #344]	; (800e2b0 <rmw_init+0x230>)
 800e158:	f7fa fa60 	bl	800861c <rmw_uxrce_init_service_memory>
 800e15c:	2201      	movs	r2, #1
 800e15e:	4955      	ldr	r1, [pc, #340]	; (800e2b4 <rmw_init+0x234>)
 800e160:	4855      	ldr	r0, [pc, #340]	; (800e2b8 <rmw_init+0x238>)
 800e162:	f7fa fa7b 	bl	800865c <rmw_uxrce_init_client_memory>
 800e166:	220f      	movs	r2, #15
 800e168:	4954      	ldr	r1, [pc, #336]	; (800e2bc <rmw_init+0x23c>)
 800e16a:	4855      	ldr	r0, [pc, #340]	; (800e2c0 <rmw_init+0x240>)
 800e16c:	f7fa fb16 	bl	800879c <rmw_uxrce_init_topic_memory>
 800e170:	2203      	movs	r2, #3
 800e172:	4954      	ldr	r1, [pc, #336]	; (800e2c4 <rmw_init+0x244>)
 800e174:	4854      	ldr	r0, [pc, #336]	; (800e2c8 <rmw_init+0x248>)
 800e176:	f7fa fb51 	bl	800881c <rmw_uxrce_init_init_options_impl_memory>
 800e17a:	2204      	movs	r2, #4
 800e17c:	4953      	ldr	r1, [pc, #332]	; (800e2cc <rmw_init+0x24c>)
 800e17e:	4854      	ldr	r0, [pc, #336]	; (800e2d0 <rmw_init+0x250>)
 800e180:	f7fa fb6c 	bl	800885c <rmw_uxrce_init_wait_set_memory>
 800e184:	4953      	ldr	r1, [pc, #332]	; (800e2d4 <rmw_init+0x254>)
 800e186:	4854      	ldr	r0, [pc, #336]	; (800e2d8 <rmw_init+0x258>)
 800e188:	2204      	movs	r2, #4
 800e18a:	f7fa fb87 	bl	800889c <rmw_uxrce_init_guard_condition_memory>
 800e18e:	4642      	mov	r2, r8
 800e190:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800e192:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 800e194:	f000 fb0a 	bl	800e7ac <rmw_uxrce_transport_init>
 800e198:	4607      	mov	r7, r0
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d158      	bne.n	800e250 <rmw_init+0x1d0>
 800e19e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e1a0:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800e1a4:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800e1a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f7fb ffc4 	bl	800a138 <uxr_init_session>
 800e1b0:	4622      	mov	r2, r4
 800e1b2:	494a      	ldr	r1, [pc, #296]	; (800e2dc <rmw_init+0x25c>)
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f7fb ffe3 	bl	800a180 <uxr_set_topic_callback>
 800e1ba:	463a      	mov	r2, r7
 800e1bc:	4948      	ldr	r1, [pc, #288]	; (800e2e0 <rmw_init+0x260>)
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7fb ffda 	bl	800a178 <uxr_set_status_callback>
 800e1c4:	463a      	mov	r2, r7
 800e1c6:	4947      	ldr	r1, [pc, #284]	; (800e2e4 <rmw_init+0x264>)
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f7fb ffdd 	bl	800a188 <uxr_set_request_callback>
 800e1ce:	463a      	mov	r2, r7
 800e1d0:	4945      	ldr	r1, [pc, #276]	; (800e2e8 <rmw_init+0x268>)
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f7fb ffdc 	bl	800a190 <uxr_set_reply_callback>
 800e1d8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e1dc:	2304      	movs	r3, #4
 800e1de:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800e1e2:	0092      	lsls	r2, r2, #2
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f7fc f813 	bl	800a210 <uxr_create_input_reliable_stream>
 800e1ea:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e1ee:	2304      	movs	r3, #4
 800e1f0:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800e1f4:	0092      	lsls	r2, r2, #2
 800e1f6:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f7fb ffde 	bl	800a1bc <uxr_create_output_reliable_stream>
 800e200:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800e204:	4628      	mov	r0, r5
 800e206:	f7fb fffd 	bl	800a204 <uxr_create_input_best_effort_stream>
 800e20a:	f241 3194 	movw	r1, #5012	; 0x1394
 800e20e:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800e212:	4628      	mov	r0, r5
 800e214:	4421      	add	r1, r4
 800e216:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e21a:	f7fb ffbd 	bl	800a198 <uxr_create_output_best_effort_stream>
 800e21e:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800e222:	4628      	mov	r0, r5
 800e224:	f7fc fd0c 	bl	800ac40 <uxr_create_session>
 800e228:	b1f8      	cbz	r0, 800e26a <rmw_init+0x1ea>
 800e22a:	4638      	mov	r0, r7
 800e22c:	b003      	add	sp, #12
 800e22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e232:	270b      	movs	r7, #11
 800e234:	4638      	mov	r0, r7
 800e236:	b003      	add	sp, #12
 800e238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e23c:	2701      	movs	r7, #1
 800e23e:	4638      	mov	r0, r7
 800e240:	b003      	add	sp, #12
 800e242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e246:	270c      	movs	r7, #12
 800e248:	4638      	mov	r0, r7
 800e24a:	b003      	add	sp, #12
 800e24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e250:	4648      	mov	r0, r9
 800e252:	f000 fd8d 	bl	800ed70 <uxr_close_custom_transport>
 800e256:	4621      	mov	r1, r4
 800e258:	480c      	ldr	r0, [pc, #48]	; (800e28c <rmw_init+0x20c>)
 800e25a:	f7ff fe27 	bl	800deac <put_memory>
 800e25e:	4638      	mov	r0, r7
 800e260:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 800e264:	b003      	add	sp, #12
 800e266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e26a:	4648      	mov	r0, r9
 800e26c:	f000 fd80 	bl	800ed70 <uxr_close_custom_transport>
 800e270:	4621      	mov	r1, r4
 800e272:	4806      	ldr	r0, [pc, #24]	; (800e28c <rmw_init+0x20c>)
 800e274:	f7ff fe1a 	bl	800deac <put_memory>
 800e278:	66f7      	str	r7, [r6, #108]	; 0x6c
 800e27a:	2701      	movs	r7, #1
 800e27c:	e7d5      	b.n	800e22a <rmw_init+0x1aa>
 800e27e:	bf00      	nop
 800e280:	08012ff8 	.word	0x08012ff8
 800e284:	2000dafc 	.word	0x2000dafc
 800e288:	20009da8 	.word	0x20009da8
 800e28c:	2000daec 	.word	0x2000daec
 800e290:	2000b350 	.word	0x2000b350
 800e294:	200093cc 	.word	0x200093cc
 800e298:	2000dabc 	.word	0x2000dabc
 800e29c:	2000d450 	.word	0x2000d450
 800e2a0:	2000db0c 	.word	0x2000db0c
 800e2a4:	20009470 	.word	0x20009470
 800e2a8:	2000dacc 	.word	0x2000dacc
 800e2ac:	20009ce0 	.word	0x20009ce0
 800e2b0:	2000dadc 	.word	0x2000dadc
 800e2b4:	20009200 	.word	0x20009200
 800e2b8:	200091f0 	.word	0x200091f0
 800e2bc:	2000d888 	.word	0x2000d888
 800e2c0:	2000db1c 	.word	0x2000db1c
 800e2c4:	20009348 	.word	0x20009348
 800e2c8:	2000daac 	.word	0x2000daac
 800e2cc:	2000da2c 	.word	0x2000da2c
 800e2d0:	2000db2c 	.word	0x2000db2c
 800e2d4:	200092c8 	.word	0x200092c8
 800e2d8:	2000da9c 	.word	0x2000da9c
 800e2dc:	08010d21 	.word	0x08010d21
 800e2e0:	08010d19 	.word	0x08010d19
 800e2e4:	08010db9 	.word	0x08010db9
 800e2e8:	08010e55 	.word	0x08010e55

0800e2ec <rmw_context_fini>:
 800e2ec:	4b17      	ldr	r3, [pc, #92]	; (800e34c <rmw_context_fini+0x60>)
 800e2ee:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800e2f0:	b570      	push	{r4, r5, r6, lr}
 800e2f2:	681c      	ldr	r4, [r3, #0]
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	b334      	cbz	r4, 800e346 <rmw_context_fini+0x5a>
 800e2f8:	2600      	movs	r6, #0
 800e2fa:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e2fe:	6902      	ldr	r2, [r0, #16]
 800e300:	428a      	cmp	r2, r1
 800e302:	d018      	beq.n	800e336 <rmw_context_fini+0x4a>
 800e304:	2c00      	cmp	r4, #0
 800e306:	d1f8      	bne.n	800e2fa <rmw_context_fini+0xe>
 800e308:	b189      	cbz	r1, 800e32e <rmw_context_fini+0x42>
 800e30a:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800e30e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800e312:	789b      	ldrb	r3, [r3, #2]
 800e314:	2b01      	cmp	r3, #1
 800e316:	bf14      	ite	ne
 800e318:	210a      	movne	r1, #10
 800e31a:	2100      	moveq	r1, #0
 800e31c:	f7fc fc68 	bl	800abf0 <uxr_delete_session_retries>
 800e320:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800e322:	f7fa fadb 	bl	80088dc <rmw_uxrce_fini_session_memory>
 800e326:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800e328:	3010      	adds	r0, #16
 800e32a:	f000 fd21 	bl	800ed70 <uxr_close_custom_transport>
 800e32e:	2300      	movs	r3, #0
 800e330:	4630      	mov	r0, r6
 800e332:	66eb      	str	r3, [r5, #108]	; 0x6c
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	3018      	adds	r0, #24
 800e338:	f000 f90e 	bl	800e558 <rmw_destroy_node>
 800e33c:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800e33e:	4606      	mov	r6, r0
 800e340:	2c00      	cmp	r4, #0
 800e342:	d1da      	bne.n	800e2fa <rmw_context_fini+0xe>
 800e344:	e7e0      	b.n	800e308 <rmw_context_fini+0x1c>
 800e346:	4626      	mov	r6, r4
 800e348:	e7de      	b.n	800e308 <rmw_context_fini+0x1c>
 800e34a:	bf00      	nop
 800e34c:	2000dabc 	.word	0x2000dabc

0800e350 <create_topic>:
 800e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e354:	4605      	mov	r5, r0
 800e356:	b084      	sub	sp, #16
 800e358:	4822      	ldr	r0, [pc, #136]	; (800e3e4 <create_topic+0x94>)
 800e35a:	460f      	mov	r7, r1
 800e35c:	4616      	mov	r6, r2
 800e35e:	f7ff fd95 	bl	800de8c <get_memory>
 800e362:	4604      	mov	r4, r0
 800e364:	2800      	cmp	r0, #0
 800e366:	d039      	beq.n	800e3dc <create_topic+0x8c>
 800e368:	692b      	ldr	r3, [r5, #16]
 800e36a:	2102      	movs	r1, #2
 800e36c:	6884      	ldr	r4, [r0, #8]
 800e36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e372:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800e3ec <create_topic+0x9c>
 800e376:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800e37a:	1c42      	adds	r2, r0, #1
 800e37c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800e380:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800e384:	f7fb fe1a 	bl	8009fbc <uxr_object_id>
 800e388:	223c      	movs	r2, #60	; 0x3c
 800e38a:	6120      	str	r0, [r4, #16]
 800e38c:	4641      	mov	r1, r8
 800e38e:	4638      	mov	r0, r7
 800e390:	f7fa fbe2 	bl	8008b58 <generate_topic_name>
 800e394:	b1f0      	cbz	r0, 800e3d4 <create_topic+0x84>
 800e396:	4f14      	ldr	r7, [pc, #80]	; (800e3e8 <create_topic+0x98>)
 800e398:	4630      	mov	r0, r6
 800e39a:	2264      	movs	r2, #100	; 0x64
 800e39c:	4639      	mov	r1, r7
 800e39e:	f7fa fbad 	bl	8008afc <generate_type_name>
 800e3a2:	b1b8      	cbz	r0, 800e3d4 <create_topic+0x84>
 800e3a4:	6928      	ldr	r0, [r5, #16]
 800e3a6:	2106      	movs	r1, #6
 800e3a8:	696b      	ldr	r3, [r5, #20]
 800e3aa:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e3ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e3b2:	f8cd 8000 	str.w	r8, [sp]
 800e3b6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 800e3ba:	6811      	ldr	r1, [r2, #0]
 800e3bc:	6922      	ldr	r2, [r4, #16]
 800e3be:	f7fb fd21 	bl	8009e04 <uxr_buffer_create_topic_bin>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	6928      	ldr	r0, [r5, #16]
 800e3c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e3ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e3ce:	f7fa fb61 	bl	8008a94 <run_xrce_session>
 800e3d2:	b918      	cbnz	r0, 800e3dc <create_topic+0x8c>
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	2400      	movs	r4, #0
 800e3d8:	f7fa faf6 	bl	80089c8 <rmw_uxrce_fini_topic_memory>
 800e3dc:	4620      	mov	r0, r4
 800e3de:	b004      	add	sp, #16
 800e3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e4:	2000db1c 	.word	0x2000db1c
 800e3e8:	2000db98 	.word	0x2000db98
 800e3ec:	2000db5c 	.word	0x2000db5c

0800e3f0 <destroy_topic>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	6985      	ldr	r5, [r0, #24]
 800e3f4:	b1dd      	cbz	r5, 800e42e <destroy_topic+0x3e>
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	6928      	ldr	r0, [r5, #16]
 800e3fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e3fe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e402:	6922      	ldr	r2, [r4, #16]
 800e404:	6819      	ldr	r1, [r3, #0]
 800e406:	f7fb fc7f 	bl	8009d08 <uxr_buffer_delete_entity>
 800e40a:	4602      	mov	r2, r0
 800e40c:	6928      	ldr	r0, [r5, #16]
 800e40e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e412:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e416:	f7fa fb3d 	bl	8008a94 <run_xrce_session>
 800e41a:	4603      	mov	r3, r0
 800e41c:	4620      	mov	r0, r4
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bf14      	ite	ne
 800e422:	2400      	movne	r4, #0
 800e424:	2402      	moveq	r4, #2
 800e426:	f7fa facf 	bl	80089c8 <rmw_uxrce_fini_topic_memory>
 800e42a:	4620      	mov	r0, r4
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
 800e42e:	2401      	movs	r4, #1
 800e430:	4620      	mov	r0, r4
 800e432:	bd38      	pop	{r3, r4, r5, pc}

0800e434 <create_node>:
 800e434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e438:	b083      	sub	sp, #12
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d064      	beq.n	800e508 <create_node+0xd4>
 800e43e:	4606      	mov	r6, r0
 800e440:	4838      	ldr	r0, [pc, #224]	; (800e524 <create_node+0xf0>)
 800e442:	460f      	mov	r7, r1
 800e444:	4690      	mov	r8, r2
 800e446:	461d      	mov	r5, r3
 800e448:	f7ff fd20 	bl	800de8c <get_memory>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d05b      	beq.n	800e508 <create_node+0xd4>
 800e450:	6884      	ldr	r4, [r0, #8]
 800e452:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800e454:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800e458:	f104 0518 	add.w	r5, r4, #24
 800e45c:	6123      	str	r3, [r4, #16]
 800e45e:	f7ff fd39 	bl	800ded4 <rmw_get_implementation_identifier>
 800e462:	f8c4 9020 	str.w	r9, [r4, #32]
 800e466:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7f1 ff42 	bl	80002f4 <strlen>
 800e470:	1c42      	adds	r2, r0, #1
 800e472:	2a3c      	cmp	r2, #60	; 0x3c
 800e474:	d840      	bhi.n	800e4f8 <create_node+0xc4>
 800e476:	4648      	mov	r0, r9
 800e478:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800e47c:	4631      	mov	r1, r6
 800e47e:	f002 fe2b 	bl	80110d8 <memcpy>
 800e482:	4638      	mov	r0, r7
 800e484:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800e488:	f7f1 ff34 	bl	80002f4 <strlen>
 800e48c:	1c42      	adds	r2, r0, #1
 800e48e:	2a3c      	cmp	r2, #60	; 0x3c
 800e490:	d832      	bhi.n	800e4f8 <create_node+0xc4>
 800e492:	4639      	mov	r1, r7
 800e494:	4648      	mov	r0, r9
 800e496:	f002 fe1f 	bl	80110d8 <memcpy>
 800e49a:	6923      	ldr	r3, [r4, #16]
 800e49c:	2101      	movs	r1, #1
 800e49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800e4a6:	1842      	adds	r2, r0, r1
 800e4a8:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800e4ac:	f7fb fd86 	bl	8009fbc <uxr_object_id>
 800e4b0:	6160      	str	r0, [r4, #20]
 800e4b2:	783b      	ldrb	r3, [r7, #0]
 800e4b4:	2b2f      	cmp	r3, #47	; 0x2f
 800e4b6:	d12c      	bne.n	800e512 <create_node+0xde>
 800e4b8:	787b      	ldrb	r3, [r7, #1]
 800e4ba:	bb53      	cbnz	r3, 800e512 <create_node+0xde>
 800e4bc:	4633      	mov	r3, r6
 800e4be:	4a1a      	ldr	r2, [pc, #104]	; (800e528 <create_node+0xf4>)
 800e4c0:	213c      	movs	r1, #60	; 0x3c
 800e4c2:	481a      	ldr	r0, [pc, #104]	; (800e52c <create_node+0xf8>)
 800e4c4:	f002 ffb0 	bl	8011428 <sniprintf>
 800e4c8:	6920      	ldr	r0, [r4, #16]
 800e4ca:	2106      	movs	r1, #6
 800e4cc:	fa1f f388 	uxth.w	r3, r8
 800e4d0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e4d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e4d8:	9101      	str	r1, [sp, #4]
 800e4da:	4914      	ldr	r1, [pc, #80]	; (800e52c <create_node+0xf8>)
 800e4dc:	9100      	str	r1, [sp, #0]
 800e4de:	6811      	ldr	r1, [r2, #0]
 800e4e0:	6962      	ldr	r2, [r4, #20]
 800e4e2:	f7fb fc5d 	bl	8009da0 <uxr_buffer_create_participant_bin>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	6920      	ldr	r0, [r4, #16]
 800e4ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e4ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e4f2:	f7fa facf 	bl	8008a94 <run_xrce_session>
 800e4f6:	b918      	cbnz	r0, 800e500 <create_node+0xcc>
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	2500      	movs	r5, #0
 800e4fc:	f7fa f9f4 	bl	80088e8 <rmw_uxrce_fini_node_memory>
 800e500:	4628      	mov	r0, r5
 800e502:	b003      	add	sp, #12
 800e504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e508:	2500      	movs	r5, #0
 800e50a:	4628      	mov	r0, r5
 800e50c:	b003      	add	sp, #12
 800e50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e512:	463b      	mov	r3, r7
 800e514:	4a06      	ldr	r2, [pc, #24]	; (800e530 <create_node+0xfc>)
 800e516:	213c      	movs	r1, #60	; 0x3c
 800e518:	9600      	str	r6, [sp, #0]
 800e51a:	4804      	ldr	r0, [pc, #16]	; (800e52c <create_node+0xf8>)
 800e51c:	f002 ff84 	bl	8011428 <sniprintf>
 800e520:	e7d2      	b.n	800e4c8 <create_node+0x94>
 800e522:	bf00      	nop
 800e524:	2000dabc 	.word	0x2000dabc
 800e528:	080129f4 	.word	0x080129f4
 800e52c:	2000dbfc 	.word	0x2000dbfc
 800e530:	08012b84 	.word	0x08012b84

0800e534 <rmw_create_node>:
 800e534:	468c      	mov	ip, r1
 800e536:	4611      	mov	r1, r2
 800e538:	f1bc 0f00 	cmp.w	ip, #0
 800e53c:	d00a      	beq.n	800e554 <rmw_create_node+0x20>
 800e53e:	f89c 3000 	ldrb.w	r3, [ip]
 800e542:	b13b      	cbz	r3, 800e554 <rmw_create_node+0x20>
 800e544:	b132      	cbz	r2, 800e554 <rmw_create_node+0x20>
 800e546:	7813      	ldrb	r3, [r2, #0]
 800e548:	b123      	cbz	r3, 800e554 <rmw_create_node+0x20>
 800e54a:	4603      	mov	r3, r0
 800e54c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800e54e:	4660      	mov	r0, ip
 800e550:	f7ff bf70 	b.w	800e434 <create_node>
 800e554:	2000      	movs	r0, #0
 800e556:	4770      	bx	lr

0800e558 <rmw_destroy_node>:
 800e558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55a:	b328      	cbz	r0, 800e5a8 <rmw_destroy_node+0x50>
 800e55c:	4607      	mov	r7, r0
 800e55e:	6800      	ldr	r0, [r0, #0]
 800e560:	b120      	cbz	r0, 800e56c <rmw_destroy_node+0x14>
 800e562:	4b37      	ldr	r3, [pc, #220]	; (800e640 <rmw_destroy_node+0xe8>)
 800e564:	6819      	ldr	r1, [r3, #0]
 800e566:	f7f1 febb 	bl	80002e0 <strcmp>
 800e56a:	b9e8      	cbnz	r0, 800e5a8 <rmw_destroy_node+0x50>
 800e56c:	687d      	ldr	r5, [r7, #4]
 800e56e:	b1dd      	cbz	r5, 800e5a8 <rmw_destroy_node+0x50>
 800e570:	4b34      	ldr	r3, [pc, #208]	; (800e644 <rmw_destroy_node+0xec>)
 800e572:	681c      	ldr	r4, [r3, #0]
 800e574:	2c00      	cmp	r4, #0
 800e576:	d060      	beq.n	800e63a <rmw_destroy_node+0xe2>
 800e578:	2600      	movs	r6, #0
 800e57a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e57e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e582:	429d      	cmp	r5, r3
 800e584:	d013      	beq.n	800e5ae <rmw_destroy_node+0x56>
 800e586:	2c00      	cmp	r4, #0
 800e588:	d1f7      	bne.n	800e57a <rmw_destroy_node+0x22>
 800e58a:	4b2f      	ldr	r3, [pc, #188]	; (800e648 <rmw_destroy_node+0xf0>)
 800e58c:	681c      	ldr	r4, [r3, #0]
 800e58e:	b1c4      	cbz	r4, 800e5c2 <rmw_destroy_node+0x6a>
 800e590:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e594:	6a0b      	ldr	r3, [r1, #32]
 800e596:	429d      	cmp	r5, r3
 800e598:	d1f9      	bne.n	800e58e <rmw_destroy_node+0x36>
 800e59a:	317c      	adds	r1, #124	; 0x7c
 800e59c:	4638      	mov	r0, r7
 800e59e:	f000 f8a3 	bl	800e6e8 <rmw_destroy_subscription>
 800e5a2:	2801      	cmp	r0, #1
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	d1f2      	bne.n	800e58e <rmw_destroy_node+0x36>
 800e5a8:	2601      	movs	r6, #1
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ae:	3184      	adds	r1, #132	; 0x84
 800e5b0:	4638      	mov	r0, r7
 800e5b2:	f7f9 ffdf 	bl	8008574 <rmw_destroy_publisher>
 800e5b6:	2801      	cmp	r0, #1
 800e5b8:	4606      	mov	r6, r0
 800e5ba:	d0f5      	beq.n	800e5a8 <rmw_destroy_node+0x50>
 800e5bc:	2c00      	cmp	r4, #0
 800e5be:	d1dc      	bne.n	800e57a <rmw_destroy_node+0x22>
 800e5c0:	e7e3      	b.n	800e58a <rmw_destroy_node+0x32>
 800e5c2:	4b22      	ldr	r3, [pc, #136]	; (800e64c <rmw_destroy_node+0xf4>)
 800e5c4:	681c      	ldr	r4, [r3, #0]
 800e5c6:	b16c      	cbz	r4, 800e5e4 <rmw_destroy_node+0x8c>
 800e5c8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e5cc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e5ce:	429d      	cmp	r5, r3
 800e5d0:	d1f9      	bne.n	800e5c6 <rmw_destroy_node+0x6e>
 800e5d2:	317c      	adds	r1, #124	; 0x7c
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	f000 f843 	bl	800e660 <rmw_destroy_service>
 800e5da:	2801      	cmp	r0, #1
 800e5dc:	4606      	mov	r6, r0
 800e5de:	d0e3      	beq.n	800e5a8 <rmw_destroy_node+0x50>
 800e5e0:	2c00      	cmp	r4, #0
 800e5e2:	d1f1      	bne.n	800e5c8 <rmw_destroy_node+0x70>
 800e5e4:	4b1a      	ldr	r3, [pc, #104]	; (800e650 <rmw_destroy_node+0xf8>)
 800e5e6:	681c      	ldr	r4, [r3, #0]
 800e5e8:	b16c      	cbz	r4, 800e606 <rmw_destroy_node+0xae>
 800e5ea:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e5ee:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e5f0:	429d      	cmp	r5, r3
 800e5f2:	d1f9      	bne.n	800e5e8 <rmw_destroy_node+0x90>
 800e5f4:	317c      	adds	r1, #124	; 0x7c
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	f002 fc76 	bl	8010ee8 <rmw_destroy_client>
 800e5fc:	2801      	cmp	r0, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	d0d2      	beq.n	800e5a8 <rmw_destroy_node+0x50>
 800e602:	2c00      	cmp	r4, #0
 800e604:	d1f1      	bne.n	800e5ea <rmw_destroy_node+0x92>
 800e606:	6928      	ldr	r0, [r5, #16]
 800e608:	696a      	ldr	r2, [r5, #20]
 800e60a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e60e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e612:	6819      	ldr	r1, [r3, #0]
 800e614:	f7fb fb78 	bl	8009d08 <uxr_buffer_delete_entity>
 800e618:	4602      	mov	r2, r0
 800e61a:	6928      	ldr	r0, [r5, #16]
 800e61c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e620:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e624:	f7fa fa36 	bl	8008a94 <run_xrce_session>
 800e628:	4603      	mov	r3, r0
 800e62a:	4638      	mov	r0, r7
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	bf08      	it	eq
 800e630:	2602      	moveq	r6, #2
 800e632:	f7fa f959 	bl	80088e8 <rmw_uxrce_fini_node_memory>
 800e636:	4630      	mov	r0, r6
 800e638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e63a:	4626      	mov	r6, r4
 800e63c:	e7a5      	b.n	800e58a <rmw_destroy_node+0x32>
 800e63e:	bf00      	nop
 800e640:	08012ff8 	.word	0x08012ff8
 800e644:	2000dacc 	.word	0x2000dacc
 800e648:	2000db0c 	.word	0x2000db0c
 800e64c:	2000dadc 	.word	0x2000dadc
 800e650:	200091f0 	.word	0x200091f0

0800e654 <rmw_node_get_graph_guard_condition>:
 800e654:	6843      	ldr	r3, [r0, #4]
 800e656:	6918      	ldr	r0, [r3, #16]
 800e658:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop

0800e660 <rmw_destroy_service>:
 800e660:	b570      	push	{r4, r5, r6, lr}
 800e662:	b128      	cbz	r0, 800e670 <rmw_destroy_service+0x10>
 800e664:	4604      	mov	r4, r0
 800e666:	6800      	ldr	r0, [r0, #0]
 800e668:	460d      	mov	r5, r1
 800e66a:	f7fa fa8d 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 800e66e:	b910      	cbnz	r0, 800e676 <rmw_destroy_service+0x16>
 800e670:	2401      	movs	r4, #1
 800e672:	4620      	mov	r0, r4
 800e674:	bd70      	pop	{r4, r5, r6, pc}
 800e676:	6863      	ldr	r3, [r4, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d0f9      	beq.n	800e670 <rmw_destroy_service+0x10>
 800e67c:	2d00      	cmp	r5, #0
 800e67e:	d0f7      	beq.n	800e670 <rmw_destroy_service+0x10>
 800e680:	6828      	ldr	r0, [r5, #0]
 800e682:	f7fa fa81 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 800e686:	2800      	cmp	r0, #0
 800e688:	d0f2      	beq.n	800e670 <rmw_destroy_service+0x10>
 800e68a:	686e      	ldr	r6, [r5, #4]
 800e68c:	2e00      	cmp	r6, #0
 800e68e:	d0ef      	beq.n	800e670 <rmw_destroy_service+0x10>
 800e690:	6864      	ldr	r4, [r4, #4]
 800e692:	6932      	ldr	r2, [r6, #16]
 800e694:	6920      	ldr	r0, [r4, #16]
 800e696:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e69a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e69e:	6819      	ldr	r1, [r3, #0]
 800e6a0:	f001 f8b6 	bl	800f810 <uxr_buffer_cancel_data>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	6920      	ldr	r0, [r4, #16]
 800e6a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e6ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e6b0:	f7fa f9f0 	bl	8008a94 <run_xrce_session>
 800e6b4:	6920      	ldr	r0, [r4, #16]
 800e6b6:	6932      	ldr	r2, [r6, #16]
 800e6b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e6bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6c0:	6819      	ldr	r1, [r3, #0]
 800e6c2:	f7fb fb21 	bl	8009d08 <uxr_buffer_delete_entity>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	6920      	ldr	r0, [r4, #16]
 800e6ca:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e6ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e6d2:	f7fa f9df 	bl	8008a94 <run_xrce_session>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	4628      	mov	r0, r5
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bf14      	ite	ne
 800e6de:	2400      	movne	r4, #0
 800e6e0:	2402      	moveq	r4, #2
 800e6e2:	f7fa f945 	bl	8008970 <rmw_uxrce_fini_service_memory>
 800e6e6:	e7c4      	b.n	800e672 <rmw_destroy_service+0x12>

0800e6e8 <rmw_destroy_subscription>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	b128      	cbz	r0, 800e6fa <rmw_destroy_subscription+0x12>
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	6800      	ldr	r0, [r0, #0]
 800e6f2:	460d      	mov	r5, r1
 800e6f4:	f7fa fa48 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 800e6f8:	b918      	cbnz	r0, 800e702 <rmw_destroy_subscription+0x1a>
 800e6fa:	2401      	movs	r4, #1
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e702:	6863      	ldr	r3, [r4, #4]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0f8      	beq.n	800e6fa <rmw_destroy_subscription+0x12>
 800e708:	fab5 f485 	clz	r4, r5
 800e70c:	0964      	lsrs	r4, r4, #5
 800e70e:	2d00      	cmp	r5, #0
 800e710:	d0f3      	beq.n	800e6fa <rmw_destroy_subscription+0x12>
 800e712:	6828      	ldr	r0, [r5, #0]
 800e714:	f7fa fa38 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d0ee      	beq.n	800e6fa <rmw_destroy_subscription+0x12>
 800e71c:	686e      	ldr	r6, [r5, #4]
 800e71e:	2e00      	cmp	r6, #0
 800e720:	d0eb      	beq.n	800e6fa <rmw_destroy_subscription+0x12>
 800e722:	6a37      	ldr	r7, [r6, #32]
 800e724:	6972      	ldr	r2, [r6, #20]
 800e726:	6938      	ldr	r0, [r7, #16]
 800e728:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e72c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e730:	6819      	ldr	r1, [r3, #0]
 800e732:	f001 f86d 	bl	800f810 <uxr_buffer_cancel_data>
 800e736:	4602      	mov	r2, r0
 800e738:	6938      	ldr	r0, [r7, #16]
 800e73a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e73e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e742:	f7fa f9a7 	bl	8008a94 <run_xrce_session>
 800e746:	69f0      	ldr	r0, [r6, #28]
 800e748:	f7ff fe52 	bl	800e3f0 <destroy_topic>
 800e74c:	6a33      	ldr	r3, [r6, #32]
 800e74e:	6972      	ldr	r2, [r6, #20]
 800e750:	6918      	ldr	r0, [r3, #16]
 800e752:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e756:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e75a:	6819      	ldr	r1, [r3, #0]
 800e75c:	f7fb fad4 	bl	8009d08 <uxr_buffer_delete_entity>
 800e760:	6a33      	ldr	r3, [r6, #32]
 800e762:	4680      	mov	r8, r0
 800e764:	6932      	ldr	r2, [r6, #16]
 800e766:	6918      	ldr	r0, [r3, #16]
 800e768:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e76c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e770:	6819      	ldr	r1, [r3, #0]
 800e772:	f7fb fac9 	bl	8009d08 <uxr_buffer_delete_entity>
 800e776:	4606      	mov	r6, r0
 800e778:	6938      	ldr	r0, [r7, #16]
 800e77a:	4642      	mov	r2, r8
 800e77c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e780:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e784:	f7fa f986 	bl	8008a94 <run_xrce_session>
 800e788:	693f      	ldr	r7, [r7, #16]
 800e78a:	4632      	mov	r2, r6
 800e78c:	4606      	mov	r6, r0
 800e78e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800e792:	4638      	mov	r0, r7
 800e794:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800e798:	f7fa f97c 	bl	8008a94 <run_xrce_session>
 800e79c:	b126      	cbz	r6, 800e7a8 <rmw_destroy_subscription+0xc0>
 800e79e:	b118      	cbz	r0, 800e7a8 <rmw_destroy_subscription+0xc0>
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f7fa f8cf 	bl	8008944 <rmw_uxrce_fini_subscription_memory>
 800e7a6:	e7a9      	b.n	800e6fc <rmw_destroy_subscription+0x14>
 800e7a8:	2402      	movs	r4, #2
 800e7aa:	e7f9      	b.n	800e7a0 <rmw_destroy_subscription+0xb8>

0800e7ac <rmw_uxrce_transport_init>:
 800e7ac:	b508      	push	{r3, lr}
 800e7ae:	b108      	cbz	r0, 800e7b4 <rmw_uxrce_transport_init+0x8>
 800e7b0:	f100 0210 	add.w	r2, r0, #16
 800e7b4:	b139      	cbz	r1, 800e7c6 <rmw_uxrce_transport_init+0x1a>
 800e7b6:	6949      	ldr	r1, [r1, #20]
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	f000 faa5 	bl	800ed08 <uxr_init_custom_transport>
 800e7be:	f080 0001 	eor.w	r0, r0, #1
 800e7c2:	b2c0      	uxtb	r0, r0
 800e7c4:	bd08      	pop	{r3, pc}
 800e7c6:	4b04      	ldr	r3, [pc, #16]	; (800e7d8 <rmw_uxrce_transport_init+0x2c>)
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	6859      	ldr	r1, [r3, #4]
 800e7cc:	f000 fa9c 	bl	800ed08 <uxr_init_custom_transport>
 800e7d0:	f080 0001 	eor.w	r0, r0, #1
 800e7d4:	b2c0      	uxtb	r0, r0
 800e7d6:	bd08      	pop	{r3, pc}
 800e7d8:	200091d4 	.word	0x200091d4

0800e7dc <rmw_uros_epoch_nanos>:
 800e7dc:	4b05      	ldr	r3, [pc, #20]	; (800e7f4 <rmw_uros_epoch_nanos+0x18>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	b123      	cbz	r3, 800e7ec <rmw_uros_epoch_nanos+0x10>
 800e7e2:	6898      	ldr	r0, [r3, #8]
 800e7e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e7e8:	f7fb bd2e 	b.w	800a248 <uxr_epoch_nanos>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	2000daec 	.word	0x2000daec

0800e7f8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7fc:	6805      	ldr	r5, [r0, #0]
 800e7fe:	4604      	mov	r4, r0
 800e800:	460e      	mov	r6, r1
 800e802:	4628      	mov	r0, r5
 800e804:	f7f1 fd6c 	bl	80002e0 <strcmp>
 800e808:	b1c8      	cbz	r0, 800e83e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e80a:	4b11      	ldr	r3, [pc, #68]	; (800e850 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	429d      	cmp	r5, r3
 800e810:	d112      	bne.n	800e838 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e812:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e816:	f8d8 4000 	ldr.w	r4, [r8]
 800e81a:	b16c      	cbz	r4, 800e838 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e81c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e820:	2700      	movs	r7, #0
 800e822:	3d04      	subs	r5, #4
 800e824:	4631      	mov	r1, r6
 800e826:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e82a:	f7f1 fd59 	bl	80002e0 <strcmp>
 800e82e:	00bb      	lsls	r3, r7, #2
 800e830:	b140      	cbz	r0, 800e844 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e832:	3701      	adds	r7, #1
 800e834:	42bc      	cmp	r4, r7
 800e836:	d1f5      	bne.n	800e824 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e838:	2000      	movs	r0, #0
 800e83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e83e:	4620      	mov	r0, r4
 800e840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e844:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e84c:	58d3      	ldr	r3, [r2, r3]
 800e84e:	4718      	bx	r3
 800e850:	200000d0 	.word	0x200000d0

0800e854 <std_msgs__msg__Int32__get_type_hash>:
 800e854:	4800      	ldr	r0, [pc, #0]	; (800e858 <std_msgs__msg__Int32__get_type_hash+0x4>)
 800e856:	4770      	bx	lr
 800e858:	200000d8 	.word	0x200000d8

0800e85c <std_msgs__msg__Int32__get_type_description>:
 800e85c:	4b03      	ldr	r3, [pc, #12]	; (800e86c <std_msgs__msg__Int32__get_type_description+0x10>)
 800e85e:	781a      	ldrb	r2, [r3, #0]
 800e860:	b90a      	cbnz	r2, 800e866 <std_msgs__msg__Int32__get_type_description+0xa>
 800e862:	2201      	movs	r2, #1
 800e864:	701a      	strb	r2, [r3, #0]
 800e866:	4802      	ldr	r0, [pc, #8]	; (800e870 <std_msgs__msg__Int32__get_type_description+0x14>)
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	2000dc39 	.word	0x2000dc39
 800e870:	08013014 	.word	0x08013014

0800e874 <std_msgs__msg__Int32__get_type_description_sources>:
 800e874:	4b09      	ldr	r3, [pc, #36]	; (800e89c <std_msgs__msg__Int32__get_type_description_sources+0x28>)
 800e876:	781a      	ldrb	r2, [r3, #0]
 800e878:	b96a      	cbnz	r2, 800e896 <std_msgs__msg__Int32__get_type_description_sources+0x22>
 800e87a:	2201      	movs	r2, #1
 800e87c:	b430      	push	{r4, r5}
 800e87e:	4d08      	ldr	r5, [pc, #32]	; (800e8a0 <std_msgs__msg__Int32__get_type_description_sources+0x2c>)
 800e880:	4c08      	ldr	r4, [pc, #32]	; (800e8a4 <std_msgs__msg__Int32__get_type_description_sources+0x30>)
 800e882:	701a      	strb	r2, [r3, #0]
 800e884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e88a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	4806      	ldr	r0, [pc, #24]	; (800e8a8 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	bc30      	pop	{r4, r5}
 800e894:	4770      	bx	lr
 800e896:	4804      	ldr	r0, [pc, #16]	; (800e8a8 <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop
 800e89c:	2000dc38 	.word	0x2000dc38
 800e8a0:	08013038 	.word	0x08013038
 800e8a4:	2000dc3c 	.word	0x2000dc3c
 800e8a8:	0801305c 	.word	0x0801305c

0800e8ac <std_msgs__msg__Int32__init>:
 800e8ac:	3800      	subs	r0, #0
 800e8ae:	bf18      	it	ne
 800e8b0:	2001      	movne	r0, #1
 800e8b2:	4770      	bx	lr

0800e8b4 <std_msgs__msg__Int32__fini>:
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop

0800e8b8 <ucdr_serialize_endian_array_char>:
 800e8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8bc:	4619      	mov	r1, r3
 800e8be:	461f      	mov	r7, r3
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	4690      	mov	r8, r2
 800e8c4:	f7fb f958 	bl	8009b78 <ucdr_check_buffer_available_for>
 800e8c8:	b9e0      	cbnz	r0, 800e904 <ucdr_serialize_endian_array_char+0x4c>
 800e8ca:	463e      	mov	r6, r7
 800e8cc:	e00b      	b.n	800e8e6 <ucdr_serialize_endian_array_char+0x2e>
 800e8ce:	4441      	add	r1, r8
 800e8d0:	68a8      	ldr	r0, [r5, #8]
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	1b36      	subs	r6, r6, r4
 800e8d6:	f002 fbff 	bl	80110d8 <memcpy>
 800e8da:	68ab      	ldr	r3, [r5, #8]
 800e8dc:	6928      	ldr	r0, [r5, #16]
 800e8de:	4423      	add	r3, r4
 800e8e0:	4420      	add	r0, r4
 800e8e2:	60ab      	str	r3, [r5, #8]
 800e8e4:	6128      	str	r0, [r5, #16]
 800e8e6:	4631      	mov	r1, r6
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f7fb f9ce 	bl	8009c8c <ucdr_check_final_buffer_behavior_array>
 800e8f0:	1bb9      	subs	r1, r7, r6
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d1ea      	bne.n	800e8ce <ucdr_serialize_endian_array_char+0x16>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	7da8      	ldrb	r0, [r5, #22]
 800e8fc:	756b      	strb	r3, [r5, #21]
 800e8fe:	4058      	eors	r0, r3
 800e900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e904:	463a      	mov	r2, r7
 800e906:	4641      	mov	r1, r8
 800e908:	68a8      	ldr	r0, [r5, #8]
 800e90a:	f002 fbe5 	bl	80110d8 <memcpy>
 800e90e:	68aa      	ldr	r2, [r5, #8]
 800e910:	692b      	ldr	r3, [r5, #16]
 800e912:	443a      	add	r2, r7
 800e914:	443b      	add	r3, r7
 800e916:	60aa      	str	r2, [r5, #8]
 800e918:	612b      	str	r3, [r5, #16]
 800e91a:	e7ed      	b.n	800e8f8 <ucdr_serialize_endian_array_char+0x40>

0800e91c <ucdr_deserialize_endian_array_char>:
 800e91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e920:	4619      	mov	r1, r3
 800e922:	461f      	mov	r7, r3
 800e924:	4605      	mov	r5, r0
 800e926:	4690      	mov	r8, r2
 800e928:	f7fb f926 	bl	8009b78 <ucdr_check_buffer_available_for>
 800e92c:	b9e8      	cbnz	r0, 800e96a <ucdr_deserialize_endian_array_char+0x4e>
 800e92e:	463e      	mov	r6, r7
 800e930:	e00c      	b.n	800e94c <ucdr_deserialize_endian_array_char+0x30>
 800e932:	eb08 0003 	add.w	r0, r8, r3
 800e936:	68a9      	ldr	r1, [r5, #8]
 800e938:	4622      	mov	r2, r4
 800e93a:	1b36      	subs	r6, r6, r4
 800e93c:	f002 fbcc 	bl	80110d8 <memcpy>
 800e940:	68ab      	ldr	r3, [r5, #8]
 800e942:	6928      	ldr	r0, [r5, #16]
 800e944:	4423      	add	r3, r4
 800e946:	4420      	add	r0, r4
 800e948:	60ab      	str	r3, [r5, #8]
 800e94a:	6128      	str	r0, [r5, #16]
 800e94c:	4631      	mov	r1, r6
 800e94e:	2201      	movs	r2, #1
 800e950:	4628      	mov	r0, r5
 800e952:	f7fb f99b 	bl	8009c8c <ucdr_check_final_buffer_behavior_array>
 800e956:	1bbb      	subs	r3, r7, r6
 800e958:	4604      	mov	r4, r0
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d1e9      	bne.n	800e932 <ucdr_deserialize_endian_array_char+0x16>
 800e95e:	2301      	movs	r3, #1
 800e960:	7da8      	ldrb	r0, [r5, #22]
 800e962:	756b      	strb	r3, [r5, #21]
 800e964:	4058      	eors	r0, r3
 800e966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e96a:	463a      	mov	r2, r7
 800e96c:	68a9      	ldr	r1, [r5, #8]
 800e96e:	4640      	mov	r0, r8
 800e970:	f002 fbb2 	bl	80110d8 <memcpy>
 800e974:	68aa      	ldr	r2, [r5, #8]
 800e976:	692b      	ldr	r3, [r5, #16]
 800e978:	443a      	add	r2, r7
 800e97a:	443b      	add	r3, r7
 800e97c:	60aa      	str	r2, [r5, #8]
 800e97e:	612b      	str	r3, [r5, #16]
 800e980:	e7ed      	b.n	800e95e <ucdr_deserialize_endian_array_char+0x42>
 800e982:	bf00      	nop

0800e984 <ucdr_serialize_array_uint8_t>:
 800e984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e988:	4688      	mov	r8, r1
 800e98a:	4611      	mov	r1, r2
 800e98c:	4617      	mov	r7, r2
 800e98e:	4605      	mov	r5, r0
 800e990:	f7fb f8f2 	bl	8009b78 <ucdr_check_buffer_available_for>
 800e994:	b9e0      	cbnz	r0, 800e9d0 <ucdr_serialize_array_uint8_t+0x4c>
 800e996:	463e      	mov	r6, r7
 800e998:	e00b      	b.n	800e9b2 <ucdr_serialize_array_uint8_t+0x2e>
 800e99a:	4441      	add	r1, r8
 800e99c:	68a8      	ldr	r0, [r5, #8]
 800e99e:	4622      	mov	r2, r4
 800e9a0:	1b36      	subs	r6, r6, r4
 800e9a2:	f002 fb99 	bl	80110d8 <memcpy>
 800e9a6:	68ab      	ldr	r3, [r5, #8]
 800e9a8:	6928      	ldr	r0, [r5, #16]
 800e9aa:	4423      	add	r3, r4
 800e9ac:	4420      	add	r0, r4
 800e9ae:	60ab      	str	r3, [r5, #8]
 800e9b0:	6128      	str	r0, [r5, #16]
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	f7fb f968 	bl	8009c8c <ucdr_check_final_buffer_behavior_array>
 800e9bc:	1bb9      	subs	r1, r7, r6
 800e9be:	4604      	mov	r4, r0
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	d1ea      	bne.n	800e99a <ucdr_serialize_array_uint8_t+0x16>
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	7da8      	ldrb	r0, [r5, #22]
 800e9c8:	756b      	strb	r3, [r5, #21]
 800e9ca:	4058      	eors	r0, r3
 800e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d0:	463a      	mov	r2, r7
 800e9d2:	4641      	mov	r1, r8
 800e9d4:	68a8      	ldr	r0, [r5, #8]
 800e9d6:	f002 fb7f 	bl	80110d8 <memcpy>
 800e9da:	68aa      	ldr	r2, [r5, #8]
 800e9dc:	692b      	ldr	r3, [r5, #16]
 800e9de:	443a      	add	r2, r7
 800e9e0:	443b      	add	r3, r7
 800e9e2:	60aa      	str	r2, [r5, #8]
 800e9e4:	612b      	str	r3, [r5, #16]
 800e9e6:	e7ed      	b.n	800e9c4 <ucdr_serialize_array_uint8_t+0x40>

0800e9e8 <ucdr_serialize_endian_array_uint8_t>:
 800e9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	461f      	mov	r7, r3
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	4690      	mov	r8, r2
 800e9f4:	f7fb f8c0 	bl	8009b78 <ucdr_check_buffer_available_for>
 800e9f8:	b9e0      	cbnz	r0, 800ea34 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e9fa:	463e      	mov	r6, r7
 800e9fc:	e00b      	b.n	800ea16 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800e9fe:	4441      	add	r1, r8
 800ea00:	68a8      	ldr	r0, [r5, #8]
 800ea02:	4622      	mov	r2, r4
 800ea04:	1b36      	subs	r6, r6, r4
 800ea06:	f002 fb67 	bl	80110d8 <memcpy>
 800ea0a:	68ab      	ldr	r3, [r5, #8]
 800ea0c:	6928      	ldr	r0, [r5, #16]
 800ea0e:	4423      	add	r3, r4
 800ea10:	4420      	add	r0, r4
 800ea12:	60ab      	str	r3, [r5, #8]
 800ea14:	6128      	str	r0, [r5, #16]
 800ea16:	4631      	mov	r1, r6
 800ea18:	2201      	movs	r2, #1
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	f7fb f936 	bl	8009c8c <ucdr_check_final_buffer_behavior_array>
 800ea20:	1bb9      	subs	r1, r7, r6
 800ea22:	4604      	mov	r4, r0
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d1ea      	bne.n	800e9fe <ucdr_serialize_endian_array_uint8_t+0x16>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	7da8      	ldrb	r0, [r5, #22]
 800ea2c:	756b      	strb	r3, [r5, #21]
 800ea2e:	4058      	eors	r0, r3
 800ea30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea34:	463a      	mov	r2, r7
 800ea36:	4641      	mov	r1, r8
 800ea38:	68a8      	ldr	r0, [r5, #8]
 800ea3a:	f002 fb4d 	bl	80110d8 <memcpy>
 800ea3e:	68aa      	ldr	r2, [r5, #8]
 800ea40:	692b      	ldr	r3, [r5, #16]
 800ea42:	443a      	add	r2, r7
 800ea44:	443b      	add	r3, r7
 800ea46:	60aa      	str	r2, [r5, #8]
 800ea48:	612b      	str	r3, [r5, #16]
 800ea4a:	e7ed      	b.n	800ea28 <ucdr_serialize_endian_array_uint8_t+0x40>

0800ea4c <ucdr_deserialize_array_uint8_t>:
 800ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea50:	4688      	mov	r8, r1
 800ea52:	4611      	mov	r1, r2
 800ea54:	4617      	mov	r7, r2
 800ea56:	4605      	mov	r5, r0
 800ea58:	f7fb f88e 	bl	8009b78 <ucdr_check_buffer_available_for>
 800ea5c:	b9e8      	cbnz	r0, 800ea9a <ucdr_deserialize_array_uint8_t+0x4e>
 800ea5e:	463e      	mov	r6, r7
 800ea60:	e00c      	b.n	800ea7c <ucdr_deserialize_array_uint8_t+0x30>
 800ea62:	eb08 0003 	add.w	r0, r8, r3
 800ea66:	68a9      	ldr	r1, [r5, #8]
 800ea68:	4622      	mov	r2, r4
 800ea6a:	1b36      	subs	r6, r6, r4
 800ea6c:	f002 fb34 	bl	80110d8 <memcpy>
 800ea70:	68ab      	ldr	r3, [r5, #8]
 800ea72:	6928      	ldr	r0, [r5, #16]
 800ea74:	4423      	add	r3, r4
 800ea76:	4420      	add	r0, r4
 800ea78:	60ab      	str	r3, [r5, #8]
 800ea7a:	6128      	str	r0, [r5, #16]
 800ea7c:	4631      	mov	r1, r6
 800ea7e:	2201      	movs	r2, #1
 800ea80:	4628      	mov	r0, r5
 800ea82:	f7fb f903 	bl	8009c8c <ucdr_check_final_buffer_behavior_array>
 800ea86:	1bbb      	subs	r3, r7, r6
 800ea88:	4604      	mov	r4, r0
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d1e9      	bne.n	800ea62 <ucdr_deserialize_array_uint8_t+0x16>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	7da8      	ldrb	r0, [r5, #22]
 800ea92:	756b      	strb	r3, [r5, #21]
 800ea94:	4058      	eors	r0, r3
 800ea96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9a:	463a      	mov	r2, r7
 800ea9c:	68a9      	ldr	r1, [r5, #8]
 800ea9e:	4640      	mov	r0, r8
 800eaa0:	f002 fb1a 	bl	80110d8 <memcpy>
 800eaa4:	68aa      	ldr	r2, [r5, #8]
 800eaa6:	692b      	ldr	r3, [r5, #16]
 800eaa8:	443a      	add	r2, r7
 800eaaa:	443b      	add	r3, r7
 800eaac:	60aa      	str	r2, [r5, #8]
 800eaae:	612b      	str	r3, [r5, #16]
 800eab0:	e7ed      	b.n	800ea8e <ucdr_deserialize_array_uint8_t+0x42>
 800eab2:	bf00      	nop

0800eab4 <ucdr_deserialize_endian_array_uint8_t>:
 800eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab8:	4619      	mov	r1, r3
 800eaba:	461f      	mov	r7, r3
 800eabc:	4605      	mov	r5, r0
 800eabe:	4690      	mov	r8, r2
 800eac0:	f7fb f85a 	bl	8009b78 <ucdr_check_buffer_available_for>
 800eac4:	b9e8      	cbnz	r0, 800eb02 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800eac6:	463e      	mov	r6, r7
 800eac8:	e00c      	b.n	800eae4 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800eaca:	eb08 0003 	add.w	r0, r8, r3
 800eace:	68a9      	ldr	r1, [r5, #8]
 800ead0:	4622      	mov	r2, r4
 800ead2:	1b36      	subs	r6, r6, r4
 800ead4:	f002 fb00 	bl	80110d8 <memcpy>
 800ead8:	68ab      	ldr	r3, [r5, #8]
 800eada:	6928      	ldr	r0, [r5, #16]
 800eadc:	4423      	add	r3, r4
 800eade:	4420      	add	r0, r4
 800eae0:	60ab      	str	r3, [r5, #8]
 800eae2:	6128      	str	r0, [r5, #16]
 800eae4:	4631      	mov	r1, r6
 800eae6:	2201      	movs	r2, #1
 800eae8:	4628      	mov	r0, r5
 800eaea:	f7fb f8cf 	bl	8009c8c <ucdr_check_final_buffer_behavior_array>
 800eaee:	1bbb      	subs	r3, r7, r6
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d1e9      	bne.n	800eaca <ucdr_deserialize_endian_array_uint8_t+0x16>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	7da8      	ldrb	r0, [r5, #22]
 800eafa:	756b      	strb	r3, [r5, #21]
 800eafc:	4058      	eors	r0, r3
 800eafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb02:	463a      	mov	r2, r7
 800eb04:	68a9      	ldr	r1, [r5, #8]
 800eb06:	4640      	mov	r0, r8
 800eb08:	f002 fae6 	bl	80110d8 <memcpy>
 800eb0c:	68aa      	ldr	r2, [r5, #8]
 800eb0e:	692b      	ldr	r3, [r5, #16]
 800eb10:	443a      	add	r2, r7
 800eb12:	443b      	add	r3, r7
 800eb14:	60aa      	str	r2, [r5, #8]
 800eb16:	612b      	str	r3, [r5, #16]
 800eb18:	e7ed      	b.n	800eaf6 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800eb1a:	bf00      	nop

0800eb1c <ucdr_serialize_sequence_char>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	4615      	mov	r5, r2
 800eb20:	460e      	mov	r6, r1
 800eb22:	7d01      	ldrb	r1, [r0, #20]
 800eb24:	4604      	mov	r4, r0
 800eb26:	f7fa fb7d 	bl	8009224 <ucdr_serialize_endian_uint32_t>
 800eb2a:	b90d      	cbnz	r5, 800eb30 <ucdr_serialize_sequence_char+0x14>
 800eb2c:	2001      	movs	r0, #1
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	462b      	mov	r3, r5
 800eb32:	4632      	mov	r2, r6
 800eb34:	7d21      	ldrb	r1, [r4, #20]
 800eb36:	4620      	mov	r0, r4
 800eb38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb3c:	f7ff bebc 	b.w	800e8b8 <ucdr_serialize_endian_array_char>

0800eb40 <ucdr_deserialize_sequence_char>:
 800eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	461d      	mov	r5, r3
 800eb46:	4616      	mov	r6, r2
 800eb48:	460f      	mov	r7, r1
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	7d01      	ldrb	r1, [r0, #20]
 800eb4e:	4604      	mov	r4, r0
 800eb50:	f7fa fc90 	bl	8009474 <ucdr_deserialize_endian_uint32_t>
 800eb54:	682b      	ldr	r3, [r5, #0]
 800eb56:	429e      	cmp	r6, r3
 800eb58:	d201      	bcs.n	800eb5e <ucdr_deserialize_sequence_char+0x1e>
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	75a2      	strb	r2, [r4, #22]
 800eb5e:	b913      	cbnz	r3, 800eb66 <ucdr_deserialize_sequence_char+0x26>
 800eb60:	2001      	movs	r0, #1
 800eb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb66:	463a      	mov	r2, r7
 800eb68:	7d21      	ldrb	r1, [r4, #20]
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb70:	f7ff bed4 	b.w	800e91c <ucdr_deserialize_endian_array_char>

0800eb74 <ucdr_serialize_sequence_uint8_t>:
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	4615      	mov	r5, r2
 800eb78:	460e      	mov	r6, r1
 800eb7a:	7d01      	ldrb	r1, [r0, #20]
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	f7fa fb51 	bl	8009224 <ucdr_serialize_endian_uint32_t>
 800eb82:	b90d      	cbnz	r5, 800eb88 <ucdr_serialize_sequence_uint8_t+0x14>
 800eb84:	2001      	movs	r0, #1
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	462b      	mov	r3, r5
 800eb8a:	4632      	mov	r2, r6
 800eb8c:	7d21      	ldrb	r1, [r4, #20]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb94:	f7ff bf28 	b.w	800e9e8 <ucdr_serialize_endian_array_uint8_t>

0800eb98 <ucdr_deserialize_sequence_uint8_t>:
 800eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9c:	461d      	mov	r5, r3
 800eb9e:	4616      	mov	r6, r2
 800eba0:	460f      	mov	r7, r1
 800eba2:	461a      	mov	r2, r3
 800eba4:	7d01      	ldrb	r1, [r0, #20]
 800eba6:	4604      	mov	r4, r0
 800eba8:	f7fa fc64 	bl	8009474 <ucdr_deserialize_endian_uint32_t>
 800ebac:	682b      	ldr	r3, [r5, #0]
 800ebae:	429e      	cmp	r6, r3
 800ebb0:	d201      	bcs.n	800ebb6 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	75a2      	strb	r2, [r4, #22]
 800ebb6:	b913      	cbnz	r3, 800ebbe <ucdr_deserialize_sequence_uint8_t+0x26>
 800ebb8:	2001      	movs	r0, #1
 800ebba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebbe:	463a      	mov	r2, r7
 800ebc0:	7d21      	ldrb	r1, [r4, #20]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc8:	f7ff bf74 	b.w	800eab4 <ucdr_deserialize_endian_array_uint8_t>

0800ebcc <ucdr_serialize_string>:
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	4608      	mov	r0, r1
 800ebd4:	9101      	str	r1, [sp, #4]
 800ebd6:	f7f1 fb8d 	bl	80002f4 <strlen>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	9901      	ldr	r1, [sp, #4]
 800ebde:	4620      	mov	r0, r4
 800ebe0:	3201      	adds	r2, #1
 800ebe2:	b002      	add	sp, #8
 800ebe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe8:	f7ff bf98 	b.w	800eb1c <ucdr_serialize_sequence_char>

0800ebec <ucdr_deserialize_string>:
 800ebec:	b500      	push	{lr}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	ab01      	add	r3, sp, #4
 800ebf2:	f7ff ffa5 	bl	800eb40 <ucdr_deserialize_sequence_char>
 800ebf6:	b003      	add	sp, #12
 800ebf8:	f85d fb04 	ldr.w	pc, [sp], #4

0800ebfc <get_custom_error>:
 800ebfc:	4b01      	ldr	r3, [pc, #4]	; (800ec04 <get_custom_error+0x8>)
 800ebfe:	7818      	ldrb	r0, [r3, #0]
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	2000dc60 	.word	0x2000dc60

0800ec08 <recv_custom_msg>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	4693      	mov	fp, r2
 800ec0e:	b089      	sub	sp, #36	; 0x24
 800ec10:	2200      	movs	r2, #0
 800ec12:	4604      	mov	r4, r0
 800ec14:	468a      	mov	sl, r1
 800ec16:	9305      	str	r3, [sp, #20]
 800ec18:	f88d 201e 	strb.w	r2, [sp, #30]
 800ec1c:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800ec20:	b322      	cbz	r2, 800ec6c <recv_custom_msg+0x64>
 800ec22:	f200 2902 	addw	r9, r0, #514	; 0x202
 800ec26:	f10d 081f 	add.w	r8, sp, #31
 800ec2a:	af05      	add	r7, sp, #20
 800ec2c:	f10d 061e 	add.w	r6, sp, #30
 800ec30:	f44f 7500 	mov.w	r5, #512	; 0x200
 800ec34:	e002      	b.n	800ec3c <recv_custom_msg+0x34>
 800ec36:	9b05      	ldr	r3, [sp, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	dd0f      	ble.n	800ec5c <recv_custom_msg+0x54>
 800ec3c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800ec40:	4623      	mov	r3, r4
 800ec42:	4622      	mov	r2, r4
 800ec44:	4648      	mov	r0, r9
 800ec46:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ec4a:	e9cd 5600 	strd	r5, r6, [sp]
 800ec4e:	f001 f8d9 	bl	800fe04 <uxr_read_framed_msg>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	d0ef      	beq.n	800ec36 <recv_custom_msg+0x2e>
 800ec56:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ec5a:	b1b3      	cbz	r3, 800ec8a <recv_custom_msg+0x82>
 800ec5c:	4b0f      	ldr	r3, [pc, #60]	; (800ec9c <recv_custom_msg+0x94>)
 800ec5e:	2000      	movs	r0, #0
 800ec60:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ec64:	701a      	strb	r2, [r3, #0]
 800ec66:	b009      	add	sp, #36	; 0x24
 800ec68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6c:	f10d 021f 	add.w	r2, sp, #31
 800ec70:	4601      	mov	r1, r0
 800ec72:	9200      	str	r2, [sp, #0]
 800ec74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec78:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800ec7c:	47a8      	blx	r5
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d0ec      	beq.n	800ec5c <recv_custom_msg+0x54>
 800ec82:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1e8      	bne.n	800ec5c <recv_custom_msg+0x54>
 800ec8a:	f8cb 0000 	str.w	r0, [fp]
 800ec8e:	2001      	movs	r0, #1
 800ec90:	f8ca 4000 	str.w	r4, [sl]
 800ec94:	b009      	add	sp, #36	; 0x24
 800ec96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9a:	bf00      	nop
 800ec9c:	2000dc60 	.word	0x2000dc60

0800eca0 <send_custom_msg>:
 800eca0:	b530      	push	{r4, r5, lr}
 800eca2:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800eca6:	b087      	sub	sp, #28
 800eca8:	4614      	mov	r4, r2
 800ecaa:	b995      	cbnz	r5, 800ecd2 <send_custom_msg+0x32>
 800ecac:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 800ecb0:	f10d 0317 	add.w	r3, sp, #23
 800ecb4:	47a8      	blx	r5
 800ecb6:	1e03      	subs	r3, r0, #0
 800ecb8:	bf18      	it	ne
 800ecba:	2301      	movne	r3, #1
 800ecbc:	42a0      	cmp	r0, r4
 800ecbe:	bf18      	it	ne
 800ecc0:	2300      	movne	r3, #0
 800ecc2:	b91b      	cbnz	r3, 800eccc <send_custom_msg+0x2c>
 800ecc4:	4a0a      	ldr	r2, [pc, #40]	; (800ecf0 <send_custom_msg+0x50>)
 800ecc6:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800ecca:	7011      	strb	r1, [r2, #0]
 800eccc:	4618      	mov	r0, r3
 800ecce:	b007      	add	sp, #28
 800ecd0:	bd30      	pop	{r4, r5, pc}
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f10d 0117 	add.w	r1, sp, #23
 800ecda:	9400      	str	r4, [sp, #0]
 800ecdc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ece0:	4602      	mov	r2, r0
 800ece2:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800ece6:	f200 2002 	addw	r0, r0, #514	; 0x202
 800ecea:	f000 fead 	bl	800fa48 <uxr_write_framed_msg>
 800ecee:	e7e2      	b.n	800ecb6 <send_custom_msg+0x16>
 800ecf0:	2000dc60 	.word	0x2000dc60

0800ecf4 <uxr_set_custom_transport_callbacks>:
 800ecf4:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800ecf8:	9901      	ldr	r1, [sp, #4]
 800ecfa:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800ecfe:	9b00      	ldr	r3, [sp, #0]
 800ed00:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop

0800ed08 <uxr_init_custom_transport>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800ed0e:	b303      	cbz	r3, 800ed52 <uxr_init_custom_transport+0x4a>
 800ed10:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800ed14:	4604      	mov	r4, r0
 800ed16:	b1e2      	cbz	r2, 800ed52 <uxr_init_custom_transport+0x4a>
 800ed18:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800ed1c:	b1ca      	cbz	r2, 800ed52 <uxr_init_custom_transport+0x4a>
 800ed1e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800ed22:	b1b2      	cbz	r2, 800ed52 <uxr_init_custom_transport+0x4a>
 800ed24:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800ed28:	4798      	blx	r3
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	b188      	cbz	r0, 800ed52 <uxr_init_custom_transport+0x4a>
 800ed2e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800ed32:	b98b      	cbnz	r3, 800ed58 <uxr_init_custom_transport+0x50>
 800ed34:	4b0b      	ldr	r3, [pc, #44]	; (800ed64 <uxr_init_custom_transport+0x5c>)
 800ed36:	4628      	mov	r0, r5
 800ed38:	490b      	ldr	r1, [pc, #44]	; (800ed68 <uxr_init_custom_transport+0x60>)
 800ed3a:	4a0c      	ldr	r2, [pc, #48]	; (800ed6c <uxr_init_custom_transport+0x64>)
 800ed3c:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800ed40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed44:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800ed48:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800ed4c:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800ed50:	bd38      	pop	{r3, r4, r5, pc}
 800ed52:	2500      	movs	r5, #0
 800ed54:	4628      	mov	r0, r5
 800ed56:	bd38      	pop	{r3, r4, r5, pc}
 800ed58:	2100      	movs	r1, #0
 800ed5a:	f204 2002 	addw	r0, r4, #514	; 0x202
 800ed5e:	f000 fe6d 	bl	800fa3c <uxr_init_framing_io>
 800ed62:	e7e7      	b.n	800ed34 <uxr_init_custom_transport+0x2c>
 800ed64:	0800ec09 	.word	0x0800ec09
 800ed68:	0800eca1 	.word	0x0800eca1
 800ed6c:	0800ebfd 	.word	0x0800ebfd

0800ed70 <uxr_close_custom_transport>:
 800ed70:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800ed74:	4718      	bx	r3
 800ed76:	bf00      	nop

0800ed78 <uxr_init_input_best_effort_stream>:
 800ed78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed7c:	8003      	strh	r3, [r0, #0]
 800ed7e:	4770      	bx	lr

0800ed80 <uxr_reset_input_best_effort_stream>:
 800ed80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed84:	8003      	strh	r3, [r0, #0]
 800ed86:	4770      	bx	lr

0800ed88 <uxr_receive_best_effort_message>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	8800      	ldrh	r0, [r0, #0]
 800ed8e:	460d      	mov	r5, r1
 800ed90:	f000 fe3c 	bl	800fa0c <uxr_seq_num_cmp>
 800ed94:	4603      	mov	r3, r0
 800ed96:	0fc0      	lsrs	r0, r0, #31
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	bfb8      	it	lt
 800ed9c:	8025      	strhlt	r5, [r4, #0]
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}

0800eda0 <on_full_input_buffer>:
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	460c      	mov	r4, r1
 800eda4:	4605      	mov	r5, r0
 800eda6:	8908      	ldrh	r0, [r1, #8]
 800eda8:	682b      	ldr	r3, [r5, #0]
 800edaa:	7d26      	ldrb	r6, [r4, #20]
 800edac:	e9d1 1200 	ldrd	r1, r2, [r1]
 800edb0:	fbb2 f2f0 	udiv	r2, r2, r0
 800edb4:	eba3 0c01 	sub.w	ip, r3, r1
 800edb8:	fbbc fcf2 	udiv	ip, ip, r2
 800edbc:	f10c 0c01 	add.w	ip, ip, #1
 800edc0:	fa1f f38c 	uxth.w	r3, ip
 800edc4:	fbb3 fcf0 	udiv	ip, r3, r0
 800edc8:	fb00 331c 	mls	r3, r0, ip, r3
 800edcc:	b29b      	uxth	r3, r3
 800edce:	fb02 f303 	mul.w	r3, r2, r3
 800edd2:	1d18      	adds	r0, r3, #4
 800edd4:	4408      	add	r0, r1
 800edd6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800edda:	b116      	cbz	r6, 800ede2 <on_full_input_buffer+0x42>
 800eddc:	2600      	movs	r6, #0
 800edde:	f840 6c04 	str.w	r6, [r0, #-4]
 800ede2:	2a03      	cmp	r2, #3
 800ede4:	d801      	bhi.n	800edea <on_full_input_buffer+0x4a>
 800ede6:	2001      	movs	r0, #1
 800ede8:	bd70      	pop	{r4, r5, r6, pc}
 800edea:	3308      	adds	r3, #8
 800edec:	4628      	mov	r0, r5
 800edee:	3a04      	subs	r2, #4
 800edf0:	4419      	add	r1, r3
 800edf2:	692b      	ldr	r3, [r5, #16]
 800edf4:	f7fa ff0c 	bl	8009c10 <ucdr_init_buffer_origin>
 800edf8:	4628      	mov	r0, r5
 800edfa:	4622      	mov	r2, r4
 800edfc:	4902      	ldr	r1, [pc, #8]	; (800ee08 <on_full_input_buffer+0x68>)
 800edfe:	f7fa fee3 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800ee02:	2000      	movs	r0, #0
 800ee04:	bd70      	pop	{r4, r5, r6, pc}
 800ee06:	bf00      	nop
 800ee08:	0800eda1 	.word	0x0800eda1

0800ee0c <uxr_init_input_reliable_stream>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	e9c0 1200 	strd	r1, r2, [r0]
 800ee12:	2400      	movs	r4, #0
 800ee14:	9a02      	ldr	r2, [sp, #8]
 800ee16:	8103      	strh	r3, [r0, #8]
 800ee18:	6102      	str	r2, [r0, #16]
 800ee1a:	7504      	strb	r4, [r0, #20]
 800ee1c:	b1c3      	cbz	r3, 800ee50 <uxr_init_input_reliable_stream+0x44>
 800ee1e:	600c      	str	r4, [r1, #0]
 800ee20:	8901      	ldrh	r1, [r0, #8]
 800ee22:	2901      	cmp	r1, #1
 800ee24:	d914      	bls.n	800ee50 <uxr_init_input_reliable_stream+0x44>
 800ee26:	f04f 0c01 	mov.w	ip, #1
 800ee2a:	6843      	ldr	r3, [r0, #4]
 800ee2c:	f10c 0e01 	add.w	lr, ip, #1
 800ee30:	fbbc f2f1 	udiv	r2, ip, r1
 800ee34:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee38:	fb01 c212 	mls	r2, r1, r2, ip
 800ee3c:	fa1f fc8e 	uxth.w	ip, lr
 800ee40:	b292      	uxth	r2, r2
 800ee42:	fb02 f303 	mul.w	r3, r2, r3
 800ee46:	6802      	ldr	r2, [r0, #0]
 800ee48:	50d4      	str	r4, [r2, r3]
 800ee4a:	8901      	ldrh	r1, [r0, #8]
 800ee4c:	4561      	cmp	r1, ip
 800ee4e:	d8ec      	bhi.n	800ee2a <uxr_init_input_reliable_stream+0x1e>
 800ee50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee54:	60c3      	str	r3, [r0, #12]
 800ee56:	bd10      	pop	{r4, pc}

0800ee58 <uxr_reset_input_reliable_stream>:
 800ee58:	8901      	ldrh	r1, [r0, #8]
 800ee5a:	b1d9      	cbz	r1, 800ee94 <uxr_reset_input_reliable_stream+0x3c>
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	f04f 0e00 	mov.w	lr, #0
 800ee62:	46f4      	mov	ip, lr
 800ee64:	4674      	mov	r4, lr
 800ee66:	6843      	ldr	r3, [r0, #4]
 800ee68:	f10e 0e01 	add.w	lr, lr, #1
 800ee6c:	fbbc f2f1 	udiv	r2, ip, r1
 800ee70:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee74:	fb01 c212 	mls	r2, r1, r2, ip
 800ee78:	fa1f fc8e 	uxth.w	ip, lr
 800ee7c:	b292      	uxth	r2, r2
 800ee7e:	fb02 f303 	mul.w	r3, r2, r3
 800ee82:	6802      	ldr	r2, [r0, #0]
 800ee84:	50d4      	str	r4, [r2, r3]
 800ee86:	8901      	ldrh	r1, [r0, #8]
 800ee88:	4561      	cmp	r1, ip
 800ee8a:	d8ec      	bhi.n	800ee66 <uxr_reset_input_reliable_stream+0xe>
 800ee8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee90:	60c3      	str	r3, [r0, #12]
 800ee92:	bd10      	pop	{r4, pc}
 800ee94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee98:	60c3      	str	r3, [r0, #12]
 800ee9a:	4770      	bx	lr

0800ee9c <uxr_receive_reliable_message>:
 800ee9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eea0:	4604      	mov	r4, r0
 800eea2:	460d      	mov	r5, r1
 800eea4:	8901      	ldrh	r1, [r0, #8]
 800eea6:	4617      	mov	r7, r2
 800eea8:	8980      	ldrh	r0, [r0, #12]
 800eeaa:	4698      	mov	r8, r3
 800eeac:	f000 fda6 	bl	800f9fc <uxr_seq_num_add>
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	89a0      	ldrh	r0, [r4, #12]
 800eeb6:	f000 fda9 	bl	800fa0c <uxr_seq_num_cmp>
 800eeba:	2800      	cmp	r0, #0
 800eebc:	db0a      	blt.n	800eed4 <uxr_receive_reliable_message+0x38>
 800eebe:	2600      	movs	r6, #0
 800eec0:	4629      	mov	r1, r5
 800eec2:	89e0      	ldrh	r0, [r4, #14]
 800eec4:	f000 fda2 	bl	800fa0c <uxr_seq_num_cmp>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	da00      	bge.n	800eece <uxr_receive_reliable_message+0x32>
 800eecc:	81e5      	strh	r5, [r4, #14]
 800eece:	4630      	mov	r0, r6
 800eed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eed4:	4630      	mov	r0, r6
 800eed6:	4629      	mov	r1, r5
 800eed8:	f000 fd98 	bl	800fa0c <uxr_seq_num_cmp>
 800eedc:	2800      	cmp	r0, #0
 800eede:	dbee      	blt.n	800eebe <uxr_receive_reliable_message+0x22>
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	4638      	mov	r0, r7
 800eee4:	4798      	blx	r3
 800eee6:	4681      	mov	r9, r0
 800eee8:	2101      	movs	r1, #1
 800eeea:	89a0      	ldrh	r0, [r4, #12]
 800eeec:	f000 fd86 	bl	800f9fc <uxr_seq_num_add>
 800eef0:	f1b9 0f00 	cmp.w	r9, #0
 800eef4:	bf08      	it	eq
 800eef6:	4285      	cmpeq	r5, r0
 800eef8:	bf0c      	ite	eq
 800eefa:	2601      	moveq	r6, #1
 800eefc:	2600      	movne	r6, #0
 800eefe:	d104      	bne.n	800ef0a <uxr_receive_reliable_message+0x6e>
 800ef00:	2300      	movs	r3, #0
 800ef02:	9a08      	ldr	r2, [sp, #32]
 800ef04:	81a0      	strh	r0, [r4, #12]
 800ef06:	7013      	strb	r3, [r2, #0]
 800ef08:	e7da      	b.n	800eec0 <uxr_receive_reliable_message+0x24>
 800ef0a:	8922      	ldrh	r2, [r4, #8]
 800ef0c:	6863      	ldr	r3, [r4, #4]
 800ef0e:	fbb5 f0f2 	udiv	r0, r5, r2
 800ef12:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef16:	fb02 5010 	mls	r0, r2, r0, r5
 800ef1a:	b280      	uxth	r0, r0
 800ef1c:	fb03 f000 	mul.w	r0, r3, r0
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	3004      	adds	r0, #4
 800ef24:	4418      	add	r0, r3
 800ef26:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1c7      	bne.n	800eebe <uxr_receive_reliable_message+0x22>
 800ef2e:	4639      	mov	r1, r7
 800ef30:	4642      	mov	r2, r8
 800ef32:	f002 f8d1 	bl	80110d8 <memcpy>
 800ef36:	8921      	ldrh	r1, [r4, #8]
 800ef38:	6863      	ldr	r3, [r4, #4]
 800ef3a:	fbb5 f2f1 	udiv	r2, r5, r1
 800ef3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef42:	fb01 5212 	mls	r2, r1, r2, r5
 800ef46:	b292      	uxth	r2, r2
 800ef48:	fb02 f303 	mul.w	r3, r2, r3
 800ef4c:	6822      	ldr	r2, [r4, #0]
 800ef4e:	f842 8003 	str.w	r8, [r2, r3]
 800ef52:	2301      	movs	r3, #1
 800ef54:	9a08      	ldr	r2, [sp, #32]
 800ef56:	7013      	strb	r3, [r2, #0]
 800ef58:	f1b9 0f00 	cmp.w	r9, #0
 800ef5c:	d0af      	beq.n	800eebe <uxr_receive_reliable_message+0x22>
 800ef5e:	89a6      	ldrh	r6, [r4, #12]
 800ef60:	2101      	movs	r1, #1
 800ef62:	4630      	mov	r0, r6
 800ef64:	f000 fd4a 	bl	800f9fc <uxr_seq_num_add>
 800ef68:	8921      	ldrh	r1, [r4, #8]
 800ef6a:	6863      	ldr	r3, [r4, #4]
 800ef6c:	4606      	mov	r6, r0
 800ef6e:	fbb0 f2f1 	udiv	r2, r0, r1
 800ef72:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef76:	fb01 0212 	mls	r2, r1, r2, r0
 800ef7a:	6820      	ldr	r0, [r4, #0]
 800ef7c:	b292      	uxth	r2, r2
 800ef7e:	fb02 f303 	mul.w	r3, r2, r3
 800ef82:	3304      	adds	r3, #4
 800ef84:	4418      	add	r0, r3
 800ef86:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d097      	beq.n	800eebe <uxr_receive_reliable_message+0x22>
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	4798      	blx	r3
 800ef92:	2802      	cmp	r0, #2
 800ef94:	d002      	beq.n	800ef9c <uxr_receive_reliable_message+0x100>
 800ef96:	2801      	cmp	r0, #1
 800ef98:	d0e2      	beq.n	800ef60 <uxr_receive_reliable_message+0xc4>
 800ef9a:	e790      	b.n	800eebe <uxr_receive_reliable_message+0x22>
 800ef9c:	2601      	movs	r6, #1
 800ef9e:	e78f      	b.n	800eec0 <uxr_receive_reliable_message+0x24>

0800efa0 <uxr_next_input_reliable_buffer_available>:
 800efa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa4:	4604      	mov	r4, r0
 800efa6:	460f      	mov	r7, r1
 800efa8:	8980      	ldrh	r0, [r0, #12]
 800efaa:	2101      	movs	r1, #1
 800efac:	4690      	mov	r8, r2
 800efae:	f000 fd25 	bl	800f9fc <uxr_seq_num_add>
 800efb2:	8922      	ldrh	r2, [r4, #8]
 800efb4:	6866      	ldr	r6, [r4, #4]
 800efb6:	fbb0 f3f2 	udiv	r3, r0, r2
 800efba:	fbb6 f6f2 	udiv	r6, r6, r2
 800efbe:	fb02 0313 	mls	r3, r2, r3, r0
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	fb03 f606 	mul.w	r6, r3, r6
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	3604      	adds	r6, #4
 800efcc:	441e      	add	r6, r3
 800efce:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800efd2:	f1b9 0f00 	cmp.w	r9, #0
 800efd6:	d023      	beq.n	800f020 <uxr_next_input_reliable_buffer_available+0x80>
 800efd8:	4605      	mov	r5, r0
 800efda:	6923      	ldr	r3, [r4, #16]
 800efdc:	4630      	mov	r0, r6
 800efde:	4798      	blx	r3
 800efe0:	4682      	mov	sl, r0
 800efe2:	b300      	cbz	r0, 800f026 <uxr_next_input_reliable_buffer_available+0x86>
 800efe4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800efe8:	2101      	movs	r1, #1
 800efea:	4650      	mov	r0, sl
 800efec:	f000 fd06 	bl	800f9fc <uxr_seq_num_add>
 800eff0:	8921      	ldrh	r1, [r4, #8]
 800eff2:	4682      	mov	sl, r0
 800eff4:	6863      	ldr	r3, [r4, #4]
 800eff6:	6820      	ldr	r0, [r4, #0]
 800eff8:	fbba f2f1 	udiv	r2, sl, r1
 800effc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f000:	fb01 a212 	mls	r2, r1, r2, sl
 800f004:	b292      	uxth	r2, r2
 800f006:	fb02 f303 	mul.w	r3, r2, r3
 800f00a:	3304      	adds	r3, #4
 800f00c:	4418      	add	r0, r3
 800f00e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f012:	b12b      	cbz	r3, 800f020 <uxr_next_input_reliable_buffer_available+0x80>
 800f014:	6923      	ldr	r3, [r4, #16]
 800f016:	4798      	blx	r3
 800f018:	2802      	cmp	r0, #2
 800f01a:	d01b      	beq.n	800f054 <uxr_next_input_reliable_buffer_available+0xb4>
 800f01c:	2801      	cmp	r0, #1
 800f01e:	d0e3      	beq.n	800efe8 <uxr_next_input_reliable_buffer_available+0x48>
 800f020:	2000      	movs	r0, #0
 800f022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f026:	464a      	mov	r2, r9
 800f028:	4631      	mov	r1, r6
 800f02a:	4638      	mov	r0, r7
 800f02c:	f7fa fdf8 	bl	8009c20 <ucdr_init_buffer>
 800f030:	8921      	ldrh	r1, [r4, #8]
 800f032:	6863      	ldr	r3, [r4, #4]
 800f034:	2001      	movs	r0, #1
 800f036:	fbb5 f2f1 	udiv	r2, r5, r1
 800f03a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f03e:	fb01 5212 	mls	r2, r1, r2, r5
 800f042:	b292      	uxth	r2, r2
 800f044:	fb02 f303 	mul.w	r3, r2, r3
 800f048:	6822      	ldr	r2, [r4, #0]
 800f04a:	f842 a003 	str.w	sl, [r2, r3]
 800f04e:	81a5      	strh	r5, [r4, #12]
 800f050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f054:	8920      	ldrh	r0, [r4, #8]
 800f056:	eb06 0108 	add.w	r1, r6, r8
 800f05a:	6863      	ldr	r3, [r4, #4]
 800f05c:	eba9 0208 	sub.w	r2, r9, r8
 800f060:	fbb5 f6f0 	udiv	r6, r5, r0
 800f064:	fbb3 f3f0 	udiv	r3, r3, r0
 800f068:	fb00 5516 	mls	r5, r0, r6, r5
 800f06c:	2000      	movs	r0, #0
 800f06e:	b2ad      	uxth	r5, r5
 800f070:	fb03 f505 	mul.w	r5, r3, r5
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	5158      	str	r0, [r3, r5]
 800f078:	4638      	mov	r0, r7
 800f07a:	f7fa fdd1 	bl	8009c20 <ucdr_init_buffer>
 800f07e:	4638      	mov	r0, r7
 800f080:	4622      	mov	r2, r4
 800f082:	4903      	ldr	r1, [pc, #12]	; (800f090 <uxr_next_input_reliable_buffer_available+0xf0>)
 800f084:	f7fa fda0 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800f088:	2001      	movs	r0, #1
 800f08a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800f08e:	e7c8      	b.n	800f022 <uxr_next_input_reliable_buffer_available+0x82>
 800f090:	0800eda1 	.word	0x0800eda1

0800f094 <uxr_process_heartbeat>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4611      	mov	r1, r2
 800f098:	4604      	mov	r4, r0
 800f09a:	89c0      	ldrh	r0, [r0, #14]
 800f09c:	4615      	mov	r5, r2
 800f09e:	f000 fcb5 	bl	800fa0c <uxr_seq_num_cmp>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	bfb8      	it	lt
 800f0a6:	81e5      	strhlt	r5, [r4, #14]
 800f0a8:	bd38      	pop	{r3, r4, r5, pc}
 800f0aa:	bf00      	nop

0800f0ac <uxr_compute_acknack>:
 800f0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0b0:	8903      	ldrh	r3, [r0, #8]
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	460f      	mov	r7, r1
 800f0b6:	8985      	ldrh	r5, [r0, #12]
 800f0b8:	b1db      	cbz	r3, 800f0f2 <uxr_compute_acknack+0x46>
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	2601      	movs	r6, #1
 800f0be:	e004      	b.n	800f0ca <uxr_compute_acknack+0x1e>
 800f0c0:	4566      	cmp	r6, ip
 800f0c2:	f106 0601 	add.w	r6, r6, #1
 800f0c6:	d214      	bcs.n	800f0f2 <uxr_compute_acknack+0x46>
 800f0c8:	89a0      	ldrh	r0, [r4, #12]
 800f0ca:	b2b1      	uxth	r1, r6
 800f0cc:	f000 fc96 	bl	800f9fc <uxr_seq_num_add>
 800f0d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f0d4:	fbb0 f2fc 	udiv	r2, r0, ip
 800f0d8:	e9d4 1300 	ldrd	r1, r3, [r4]
 800f0dc:	fb0c 0212 	mls	r2, ip, r2, r0
 800f0e0:	fbb3 f3fc 	udiv	r3, r3, ip
 800f0e4:	b292      	uxth	r2, r2
 800f0e6:	fb02 f303 	mul.w	r3, r2, r3
 800f0ea:	58cb      	ldr	r3, [r1, r3]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d1e7      	bne.n	800f0c0 <uxr_compute_acknack+0x14>
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	803d      	strh	r5, [r7, #0]
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	89e6      	ldrh	r6, [r4, #14]
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	f000 fc83 	bl	800fa04 <uxr_seq_num_sub>
 800f0fe:	4601      	mov	r1, r0
 800f100:	4630      	mov	r0, r6
 800f102:	f000 fc7f 	bl	800fa04 <uxr_seq_num_sub>
 800f106:	4606      	mov	r6, r0
 800f108:	b328      	cbz	r0, 800f156 <uxr_compute_acknack+0xaa>
 800f10a:	f04f 0900 	mov.w	r9, #0
 800f10e:	f04f 0801 	mov.w	r8, #1
 800f112:	464d      	mov	r5, r9
 800f114:	fa1f f189 	uxth.w	r1, r9
 800f118:	8838      	ldrh	r0, [r7, #0]
 800f11a:	f000 fc6f 	bl	800f9fc <uxr_seq_num_add>
 800f11e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f122:	6861      	ldr	r1, [r4, #4]
 800f124:	fa08 fe09 	lsl.w	lr, r8, r9
 800f128:	6822      	ldr	r2, [r4, #0]
 800f12a:	f109 0901 	add.w	r9, r9, #1
 800f12e:	ea4e 0e05 	orr.w	lr, lr, r5
 800f132:	fbb0 f3fc 	udiv	r3, r0, ip
 800f136:	fbb1 f1fc 	udiv	r1, r1, ip
 800f13a:	fb03 001c 	mls	r0, r3, ip, r0
 800f13e:	b283      	uxth	r3, r0
 800f140:	fb01 f303 	mul.w	r3, r1, r3
 800f144:	58d3      	ldr	r3, [r2, r3]
 800f146:	b90b      	cbnz	r3, 800f14c <uxr_compute_acknack+0xa0>
 800f148:	fa1f f58e 	uxth.w	r5, lr
 800f14c:	454e      	cmp	r6, r9
 800f14e:	d1e1      	bne.n	800f114 <uxr_compute_acknack+0x68>
 800f150:	4628      	mov	r0, r5
 800f152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f156:	4605      	mov	r5, r0
 800f158:	4628      	mov	r0, r5
 800f15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f15e:	bf00      	nop

0800f160 <uxr_init_output_best_effort_stream>:
 800f160:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800f164:	6001      	str	r1, [r0, #0]
 800f166:	7303      	strb	r3, [r0, #12]
 800f168:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800f16c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop

0800f174 <uxr_reset_output_best_effort_stream>:
 800f174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f178:	7b03      	ldrb	r3, [r0, #12]
 800f17a:	81c2      	strh	r2, [r0, #14]
 800f17c:	6043      	str	r3, [r0, #4]
 800f17e:	4770      	bx	lr

0800f180 <uxr_prepare_best_effort_buffer_to_write>:
 800f180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f182:	4604      	mov	r4, r0
 800f184:	b083      	sub	sp, #12
 800f186:	6840      	ldr	r0, [r0, #4]
 800f188:	460d      	mov	r5, r1
 800f18a:	4616      	mov	r6, r2
 800f18c:	f7fc f922 	bl	800b3d4 <uxr_submessage_padding>
 800f190:	6863      	ldr	r3, [r4, #4]
 800f192:	4418      	add	r0, r3
 800f194:	68a3      	ldr	r3, [r4, #8]
 800f196:	1942      	adds	r2, r0, r5
 800f198:	4293      	cmp	r3, r2
 800f19a:	bf2c      	ite	cs
 800f19c:	2701      	movcs	r7, #1
 800f19e:	2700      	movcc	r7, #0
 800f1a0:	d202      	bcs.n	800f1a8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800f1a2:	4638      	mov	r0, r7
 800f1a4:	b003      	add	sp, #12
 800f1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1a8:	9000      	str	r0, [sp, #0]
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	6821      	ldr	r1, [r4, #0]
 800f1b0:	f7fa fd24 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800f1b4:	6861      	ldr	r1, [r4, #4]
 800f1b6:	4638      	mov	r0, r7
 800f1b8:	4429      	add	r1, r5
 800f1ba:	6061      	str	r1, [r4, #4]
 800f1bc:	b003      	add	sp, #12
 800f1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1c0 <uxr_prepare_best_effort_buffer_to_send>:
 800f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	461d      	mov	r5, r3
 800f1c8:	6840      	ldr	r0, [r0, #4]
 800f1ca:	7b23      	ldrb	r3, [r4, #12]
 800f1cc:	4298      	cmp	r0, r3
 800f1ce:	bf8c      	ite	hi
 800f1d0:	2601      	movhi	r6, #1
 800f1d2:	2600      	movls	r6, #0
 800f1d4:	d802      	bhi.n	800f1dc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1dc:	4688      	mov	r8, r1
 800f1de:	89e0      	ldrh	r0, [r4, #14]
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	4617      	mov	r7, r2
 800f1e4:	f000 fc0a 	bl	800f9fc <uxr_seq_num_add>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	81e0      	strh	r0, [r4, #14]
 800f1ec:	8028      	strh	r0, [r5, #0]
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f8c8 3000 	str.w	r3, [r8]
 800f1f4:	6863      	ldr	r3, [r4, #4]
 800f1f6:	603b      	str	r3, [r7, #0]
 800f1f8:	7b23      	ldrb	r3, [r4, #12]
 800f1fa:	6063      	str	r3, [r4, #4]
 800f1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f200 <on_full_output_buffer>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800f206:	460c      	mov	r4, r1
 800f208:	6803      	ldr	r3, [r0, #0]
 800f20a:	4605      	mov	r5, r0
 800f20c:	7b26      	ldrb	r6, [r4, #12]
 800f20e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800f212:	fbb2 f2fc 	udiv	r2, r2, ip
 800f216:	eba3 0e01 	sub.w	lr, r3, r1
 800f21a:	6903      	ldr	r3, [r0, #16]
 800f21c:	fbbe fef2 	udiv	lr, lr, r2
 800f220:	f10e 0e01 	add.w	lr, lr, #1
 800f224:	fa1f fe8e 	uxth.w	lr, lr
 800f228:	fbbe f7fc 	udiv	r7, lr, ip
 800f22c:	fb0c ec17 	mls	ip, ip, r7, lr
 800f230:	fa1f fc8c 	uxth.w	ip, ip
 800f234:	fb02 fc0c 	mul.w	ip, r2, ip
 800f238:	f851 200c 	ldr.w	r2, [r1, ip]
 800f23c:	44b4      	add	ip, r6
 800f23e:	1b92      	subs	r2, r2, r6
 800f240:	f10c 0c08 	add.w	ip, ip, #8
 800f244:	3a04      	subs	r2, #4
 800f246:	4461      	add	r1, ip
 800f248:	f7fa fce2 	bl	8009c10 <ucdr_init_buffer_origin>
 800f24c:	4628      	mov	r0, r5
 800f24e:	4622      	mov	r2, r4
 800f250:	4902      	ldr	r1, [pc, #8]	; (800f25c <on_full_output_buffer+0x5c>)
 800f252:	f7fa fcb9 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800f256:	2000      	movs	r0, #0
 800f258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f25a:	bf00      	nop
 800f25c:	0800f201 	.word	0x0800f201

0800f260 <uxr_init_output_reliable_stream>:
 800f260:	b530      	push	{r4, r5, lr}
 800f262:	f89d 400c 	ldrb.w	r4, [sp, #12]
 800f266:	8103      	strh	r3, [r0, #8]
 800f268:	7304      	strb	r4, [r0, #12]
 800f26a:	e9c0 1200 	strd	r1, r2, [r0]
 800f26e:	b1e3      	cbz	r3, 800f2aa <uxr_init_output_reliable_stream+0x4a>
 800f270:	600c      	str	r4, [r1, #0]
 800f272:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f276:	f1bc 0f01 	cmp.w	ip, #1
 800f27a:	d916      	bls.n	800f2aa <uxr_init_output_reliable_stream+0x4a>
 800f27c:	f04f 0e01 	mov.w	lr, #1
 800f280:	6843      	ldr	r3, [r0, #4]
 800f282:	f10e 0501 	add.w	r5, lr, #1
 800f286:	7b04      	ldrb	r4, [r0, #12]
 800f288:	6801      	ldr	r1, [r0, #0]
 800f28a:	fbbe f2fc 	udiv	r2, lr, ip
 800f28e:	fbb3 f3fc 	udiv	r3, r3, ip
 800f292:	fb0c e212 	mls	r2, ip, r2, lr
 800f296:	fa1f fe85 	uxth.w	lr, r5
 800f29a:	b292      	uxth	r2, r2
 800f29c:	fb02 f303 	mul.w	r3, r2, r3
 800f2a0:	50cc      	str	r4, [r1, r3]
 800f2a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800f2a6:	45f4      	cmp	ip, lr
 800f2a8:	d8ea      	bhi.n	800f280 <uxr_init_output_reliable_stream+0x20>
 800f2aa:	4b07      	ldr	r3, [pc, #28]	; (800f2c8 <uxr_init_output_reliable_stream+0x68>)
 800f2ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f2b4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800f2b8:	f8c0 300e 	str.w	r3, [r0, #14]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	8242      	strh	r2, [r0, #18]
 800f2c0:	8403      	strh	r3, [r0, #32]
 800f2c2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 800f2c6:	bd30      	pop	{r4, r5, pc}
 800f2c8:	ffff0000 	.word	0xffff0000
 800f2cc:	00000000 	.word	0x00000000

0800f2d0 <uxr_reset_output_reliable_stream>:
 800f2d0:	8901      	ldrh	r1, [r0, #8]
 800f2d2:	b510      	push	{r4, lr}
 800f2d4:	b1b1      	cbz	r1, 800f304 <uxr_reset_output_reliable_stream+0x34>
 800f2d6:	f04f 0e00 	mov.w	lr, #0
 800f2da:	46f4      	mov	ip, lr
 800f2dc:	6843      	ldr	r3, [r0, #4]
 800f2de:	f10e 0e01 	add.w	lr, lr, #1
 800f2e2:	7b04      	ldrb	r4, [r0, #12]
 800f2e4:	fbbc f2f1 	udiv	r2, ip, r1
 800f2e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2ec:	fb01 c212 	mls	r2, r1, r2, ip
 800f2f0:	fa1f fc8e 	uxth.w	ip, lr
 800f2f4:	b292      	uxth	r2, r2
 800f2f6:	fb02 f303 	mul.w	r3, r2, r3
 800f2fa:	6802      	ldr	r2, [r0, #0]
 800f2fc:	50d4      	str	r4, [r2, r3]
 800f2fe:	8901      	ldrh	r1, [r0, #8]
 800f300:	4561      	cmp	r1, ip
 800f302:	d8eb      	bhi.n	800f2dc <uxr_reset_output_reliable_stream+0xc>
 800f304:	4b08      	ldr	r3, [pc, #32]	; (800f328 <uxr_reset_output_reliable_stream+0x58>)
 800f306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f30a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800f320 <uxr_reset_output_reliable_stream+0x50>
 800f30e:	f8c0 300e 	str.w	r3, [r0, #14]
 800f312:	2300      	movs	r3, #0
 800f314:	8242      	strh	r2, [r0, #18]
 800f316:	8403      	strh	r3, [r0, #32]
 800f318:	ed80 7b06 	vstr	d7, [r0, #24]
 800f31c:	bd10      	pop	{r4, pc}
 800f31e:	bf00      	nop
 800f320:	ffffffff 	.word	0xffffffff
 800f324:	7fffffff 	.word	0x7fffffff
 800f328:	ffff0000 	.word	0xffff0000

0800f32c <uxr_prepare_reliable_buffer_to_write>:
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	4604      	mov	r4, r0
 800f332:	b091      	sub	sp, #68	; 0x44
 800f334:	8900      	ldrh	r0, [r0, #8]
 800f336:	468b      	mov	fp, r1
 800f338:	89e6      	ldrh	r6, [r4, #14]
 800f33a:	9204      	str	r2, [sp, #16]
 800f33c:	6865      	ldr	r5, [r4, #4]
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	f894 900c 	ldrb.w	r9, [r4, #12]
 800f344:	fbb6 f2f0 	udiv	r2, r6, r0
 800f348:	fbb5 f5f0 	udiv	r5, r5, r0
 800f34c:	fb00 6212 	mls	r2, r0, r2, r6
 800f350:	1f2f      	subs	r7, r5, #4
 800f352:	b292      	uxth	r2, r2
 800f354:	fb05 3202 	mla	r2, r5, r2, r3
 800f358:	1d11      	adds	r1, r2, #4
 800f35a:	f8d2 8000 	ldr.w	r8, [r2]
 800f35e:	9103      	str	r1, [sp, #12]
 800f360:	2800      	cmp	r0, #0
 800f362:	f000 814a 	beq.w	800f5fa <uxr_prepare_reliable_buffer_to_write+0x2ce>
 800f366:	f04f 0c00 	mov.w	ip, #0
 800f36a:	46e2      	mov	sl, ip
 800f36c:	4661      	mov	r1, ip
 800f36e:	f10c 0c01 	add.w	ip, ip, #1
 800f372:	fbb1 f2f0 	udiv	r2, r1, r0
 800f376:	fb00 1212 	mls	r2, r0, r2, r1
 800f37a:	fa1f f18c 	uxth.w	r1, ip
 800f37e:	b292      	uxth	r2, r2
 800f380:	fb05 f202 	mul.w	r2, r5, r2
 800f384:	589a      	ldr	r2, [r3, r2]
 800f386:	454a      	cmp	r2, r9
 800f388:	d103      	bne.n	800f392 <uxr_prepare_reliable_buffer_to_write+0x66>
 800f38a:	f10a 0a01 	add.w	sl, sl, #1
 800f38e:	fa1f fa8a 	uxth.w	sl, sl
 800f392:	4281      	cmp	r1, r0
 800f394:	d3eb      	bcc.n	800f36e <uxr_prepare_reliable_buffer_to_write+0x42>
 800f396:	4640      	mov	r0, r8
 800f398:	2104      	movs	r1, #4
 800f39a:	f8cd a014 	str.w	sl, [sp, #20]
 800f39e:	f7fa fc43 	bl	8009c28 <ucdr_alignment>
 800f3a2:	4480      	add	r8, r0
 800f3a4:	eb08 020b 	add.w	r2, r8, fp
 800f3a8:	42ba      	cmp	r2, r7
 800f3aa:	f240 80ca 	bls.w	800f542 <uxr_prepare_reliable_buffer_to_write+0x216>
 800f3ae:	7b22      	ldrb	r2, [r4, #12]
 800f3b0:	445a      	add	r2, fp
 800f3b2:	42ba      	cmp	r2, r7
 800f3b4:	f240 80b2 	bls.w	800f51c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 800f3b8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800f3bc:	b2bb      	uxth	r3, r7
 800f3be:	eba2 0209 	sub.w	r2, r2, r9
 800f3c2:	441a      	add	r2, r3
 800f3c4:	b292      	uxth	r2, r2
 800f3c6:	fb0a f902 	mul.w	r9, sl, r2
 800f3ca:	9205      	str	r2, [sp, #20]
 800f3cc:	45d9      	cmp	r9, fp
 800f3ce:	9206      	str	r2, [sp, #24]
 800f3d0:	f0c0 80b3 	bcc.w	800f53a <uxr_prepare_reliable_buffer_to_write+0x20e>
 800f3d4:	f108 0204 	add.w	r2, r8, #4
 800f3d8:	42ba      	cmp	r2, r7
 800f3da:	f080 80da 	bcs.w	800f592 <uxr_prepare_reliable_buffer_to_write+0x266>
 800f3de:	f1a3 0904 	sub.w	r9, r3, #4
 800f3e2:	9b05      	ldr	r3, [sp, #20]
 800f3e4:	eba9 0908 	sub.w	r9, r9, r8
 800f3e8:	fa1f f989 	uxth.w	r9, r9
 800f3ec:	ebab 0b09 	sub.w	fp, fp, r9
 800f3f0:	fbbb f2f3 	udiv	r2, fp, r3
 800f3f4:	fb03 b312 	mls	r3, r3, r2, fp
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f040 80c4 	bne.w	800f586 <uxr_prepare_reliable_buffer_to_write+0x25a>
 800f3fe:	b293      	uxth	r3, r2
 800f400:	4553      	cmp	r3, sl
 800f402:	f200 809a 	bhi.w	800f53a <uxr_prepare_reliable_buffer_to_write+0x20e>
 800f406:	2b00      	cmp	r3, #0
 800f408:	f000 80f9 	beq.w	800f5fe <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800f40c:	f8cd 801c 	str.w	r8, [sp, #28]
 800f410:	f04f 0a00 	mov.w	sl, #0
 800f414:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f418:	f10d 0b20 	add.w	fp, sp, #32
 800f41c:	9505      	str	r5, [sp, #20]
 800f41e:	461d      	mov	r5, r3
 800f420:	e000      	b.n	800f424 <uxr_prepare_reliable_buffer_to_write+0xf8>
 800f422:	46c1      	mov	r9, r8
 800f424:	8922      	ldrh	r2, [r4, #8]
 800f426:	4658      	mov	r0, fp
 800f428:	6863      	ldr	r3, [r4, #4]
 800f42a:	f10a 0a01 	add.w	sl, sl, #1
 800f42e:	fbb6 f1f2 	udiv	r1, r6, r2
 800f432:	fbb3 f3f2 	udiv	r3, r3, r2
 800f436:	fb02 6111 	mls	r1, r2, r1, r6
 800f43a:	463a      	mov	r2, r7
 800f43c:	b289      	uxth	r1, r1
 800f43e:	fb03 f101 	mul.w	r1, r3, r1
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	3104      	adds	r1, #4
 800f446:	4419      	add	r1, r3
 800f448:	2300      	movs	r3, #0
 800f44a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 800f44e:	f8cd c000 	str.w	ip, [sp]
 800f452:	f7fa fbd3 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800f456:	464a      	mov	r2, r9
 800f458:	2300      	movs	r3, #0
 800f45a:	210d      	movs	r1, #13
 800f45c:	4658      	mov	r0, fp
 800f45e:	f7fb ff79 	bl	800b354 <uxr_buffer_submessage_header>
 800f462:	8921      	ldrh	r1, [r4, #8]
 800f464:	6863      	ldr	r3, [r4, #4]
 800f466:	4630      	mov	r0, r6
 800f468:	fbb6 f2f1 	udiv	r2, r6, r1
 800f46c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f470:	fb01 6212 	mls	r2, r1, r2, r6
 800f474:	2101      	movs	r1, #1
 800f476:	b292      	uxth	r2, r2
 800f478:	fb02 f303 	mul.w	r3, r2, r3
 800f47c:	6822      	ldr	r2, [r4, #0]
 800f47e:	50d7      	str	r7, [r2, r3]
 800f480:	f000 fabc 	bl	800f9fc <uxr_seq_num_add>
 800f484:	4606      	mov	r6, r0
 800f486:	fa1f f38a 	uxth.w	r3, sl
 800f48a:	429d      	cmp	r5, r3
 800f48c:	d8c9      	bhi.n	800f422 <uxr_prepare_reliable_buffer_to_write+0xf6>
 800f48e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800f492:	9d05      	ldr	r5, [sp, #20]
 800f494:	8920      	ldrh	r0, [r4, #8]
 800f496:	463a      	mov	r2, r7
 800f498:	6863      	ldr	r3, [r4, #4]
 800f49a:	fbb6 f1f0 	udiv	r1, r6, r0
 800f49e:	fbb3 f3f0 	udiv	r3, r3, r0
 800f4a2:	fb00 6111 	mls	r1, r0, r1, r6
 800f4a6:	4658      	mov	r0, fp
 800f4a8:	b289      	uxth	r1, r1
 800f4aa:	fb01 f303 	mul.w	r3, r1, r3
 800f4ae:	6821      	ldr	r1, [r4, #0]
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	4419      	add	r1, r3
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 800f4ba:	9700      	str	r7, [sp, #0]
 800f4bc:	f7fa fb9e 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800f4c0:	9f06      	ldr	r7, [sp, #24]
 800f4c2:	4658      	mov	r0, fp
 800f4c4:	2302      	movs	r3, #2
 800f4c6:	b2ba      	uxth	r2, r7
 800f4c8:	210d      	movs	r1, #13
 800f4ca:	f7fb ff43 	bl	800b354 <uxr_buffer_submessage_header>
 800f4ce:	f108 0104 	add.w	r1, r8, #4
 800f4d2:	9b03      	ldr	r3, [sp, #12]
 800f4d4:	f1a5 0208 	sub.w	r2, r5, #8
 800f4d8:	8925      	ldrh	r5, [r4, #8]
 800f4da:	440b      	add	r3, r1
 800f4dc:	eba2 0208 	sub.w	r2, r2, r8
 800f4e0:	fbb6 f0f5 	udiv	r0, r6, r5
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6863      	ldr	r3, [r4, #4]
 800f4e8:	fb05 6010 	mls	r0, r5, r0, r6
 800f4ec:	fbb3 f3f5 	udiv	r3, r3, r5
 800f4f0:	b280      	uxth	r0, r0
 800f4f2:	6825      	ldr	r5, [r4, #0]
 800f4f4:	fb00 f303 	mul.w	r3, r0, r3
 800f4f8:	7b20      	ldrb	r0, [r4, #12]
 800f4fa:	3004      	adds	r0, #4
 800f4fc:	4438      	add	r0, r7
 800f4fe:	50e8      	str	r0, [r5, r3]
 800f500:	9d04      	ldr	r5, [sp, #16]
 800f502:	4628      	mov	r0, r5
 800f504:	f7fa fb8c 	bl	8009c20 <ucdr_init_buffer>
 800f508:	4628      	mov	r0, r5
 800f50a:	4622      	mov	r2, r4
 800f50c:	493d      	ldr	r1, [pc, #244]	; (800f604 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800f50e:	f7fa fb5b 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800f512:	2001      	movs	r0, #1
 800f514:	81e6      	strh	r6, [r4, #14]
 800f516:	b011      	add	sp, #68	; 0x44
 800f518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51c:	2101      	movs	r1, #1
 800f51e:	89e0      	ldrh	r0, [r4, #14]
 800f520:	f000 fa6c 	bl	800f9fc <uxr_seq_num_add>
 800f524:	4605      	mov	r5, r0
 800f526:	8921      	ldrh	r1, [r4, #8]
 800f528:	8a60      	ldrh	r0, [r4, #18]
 800f52a:	f000 fa67 	bl	800f9fc <uxr_seq_num_add>
 800f52e:	4601      	mov	r1, r0
 800f530:	4628      	mov	r0, r5
 800f532:	f000 fa6b 	bl	800fa0c <uxr_seq_num_cmp>
 800f536:	2800      	cmp	r0, #0
 800f538:	dd44      	ble.n	800f5c4 <uxr_prepare_reliable_buffer_to_write+0x298>
 800f53a:	2000      	movs	r0, #0
 800f53c:	b011      	add	sp, #68	; 0x44
 800f53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f542:	8921      	ldrh	r1, [r4, #8]
 800f544:	8a60      	ldrh	r0, [r4, #18]
 800f546:	9205      	str	r2, [sp, #20]
 800f548:	f000 fa58 	bl	800f9fc <uxr_seq_num_add>
 800f54c:	4601      	mov	r1, r0
 800f54e:	4630      	mov	r0, r6
 800f550:	f000 fa5c 	bl	800fa0c <uxr_seq_num_cmp>
 800f554:	2800      	cmp	r0, #0
 800f556:	9a05      	ldr	r2, [sp, #20]
 800f558:	dcef      	bgt.n	800f53a <uxr_prepare_reliable_buffer_to_write+0x20e>
 800f55a:	8925      	ldrh	r5, [r4, #8]
 800f55c:	e9d4 7300 	ldrd	r7, r3, [r4]
 800f560:	fbb6 f4f5 	udiv	r4, r6, r5
 800f564:	fbb3 f3f5 	udiv	r3, r3, r5
 800f568:	fb05 6414 	mls	r4, r5, r4, r6
 800f56c:	b2a4      	uxth	r4, r4
 800f56e:	fb04 f303 	mul.w	r3, r4, r3
 800f572:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800f576:	50fa      	str	r2, [r7, r3]
 800f578:	2300      	movs	r3, #0
 800f57a:	f8cd 8000 	str.w	r8, [sp]
 800f57e:	f7fa fb3d 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800f582:	2001      	movs	r0, #1
 800f584:	e7da      	b.n	800f53c <uxr_prepare_reliable_buffer_to_write+0x210>
 800f586:	3201      	adds	r2, #1
 800f588:	9306      	str	r3, [sp, #24]
 800f58a:	b293      	uxth	r3, r2
 800f58c:	4553      	cmp	r3, sl
 800f58e:	d8d4      	bhi.n	800f53a <uxr_prepare_reliable_buffer_to_write+0x20e>
 800f590:	e739      	b.n	800f406 <uxr_prepare_reliable_buffer_to_write+0xda>
 800f592:	4630      	mov	r0, r6
 800f594:	2101      	movs	r1, #1
 800f596:	9307      	str	r3, [sp, #28]
 800f598:	f000 fa30 	bl	800f9fc <uxr_seq_num_add>
 800f59c:	4606      	mov	r6, r0
 800f59e:	8920      	ldrh	r0, [r4, #8]
 800f5a0:	6862      	ldr	r2, [r4, #4]
 800f5a2:	fbb6 f1f0 	udiv	r1, r6, r0
 800f5a6:	fbb2 f2f0 	udiv	r2, r2, r0
 800f5aa:	fb00 6111 	mls	r1, r0, r1, r6
 800f5ae:	b289      	uxth	r1, r1
 800f5b0:	fb01 f202 	mul.w	r2, r1, r2
 800f5b4:	6821      	ldr	r1, [r4, #0]
 800f5b6:	3204      	adds	r2, #4
 800f5b8:	188b      	adds	r3, r1, r2
 800f5ba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800f5be:	9303      	str	r3, [sp, #12]
 800f5c0:	9b07      	ldr	r3, [sp, #28]
 800f5c2:	e70c      	b.n	800f3de <uxr_prepare_reliable_buffer_to_write+0xb2>
 800f5c4:	8921      	ldrh	r1, [r4, #8]
 800f5c6:	6863      	ldr	r3, [r4, #4]
 800f5c8:	9804      	ldr	r0, [sp, #16]
 800f5ca:	fbb5 f2f1 	udiv	r2, r5, r1
 800f5ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5d2:	fb01 5212 	mls	r2, r1, r2, r5
 800f5d6:	6821      	ldr	r1, [r4, #0]
 800f5d8:	b292      	uxth	r2, r2
 800f5da:	fb02 f303 	mul.w	r3, r2, r3
 800f5de:	7b22      	ldrb	r2, [r4, #12]
 800f5e0:	3304      	adds	r3, #4
 800f5e2:	445a      	add	r2, fp
 800f5e4:	4419      	add	r1, r3
 800f5e6:	f841 2c04 	str.w	r2, [r1, #-4]
 800f5ea:	7b23      	ldrb	r3, [r4, #12]
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	f7fa fb04 	bl	8009bfc <ucdr_init_buffer_origin_offset>
 800f5f4:	2001      	movs	r0, #1
 800f5f6:	81e5      	strh	r5, [r4, #14]
 800f5f8:	e7a0      	b.n	800f53c <uxr_prepare_reliable_buffer_to_write+0x210>
 800f5fa:	4682      	mov	sl, r0
 800f5fc:	e6cb      	b.n	800f396 <uxr_prepare_reliable_buffer_to_write+0x6a>
 800f5fe:	f10d 0b20 	add.w	fp, sp, #32
 800f602:	e747      	b.n	800f494 <uxr_prepare_reliable_buffer_to_write+0x168>
 800f604:	0800f201 	.word	0x0800f201

0800f608 <uxr_prepare_next_reliable_buffer_to_send>:
 800f608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f60a:	4604      	mov	r4, r0
 800f60c:	461d      	mov	r5, r3
 800f60e:	460f      	mov	r7, r1
 800f610:	8a00      	ldrh	r0, [r0, #16]
 800f612:	2101      	movs	r1, #1
 800f614:	4616      	mov	r6, r2
 800f616:	f000 f9f1 	bl	800f9fc <uxr_seq_num_add>
 800f61a:	8028      	strh	r0, [r5, #0]
 800f61c:	8922      	ldrh	r2, [r4, #8]
 800f61e:	6863      	ldr	r3, [r4, #4]
 800f620:	fbb0 f1f2 	udiv	r1, r0, r2
 800f624:	fbb3 f3f2 	udiv	r3, r3, r2
 800f628:	fb02 0c11 	mls	ip, r2, r1, r0
 800f62c:	89e1      	ldrh	r1, [r4, #14]
 800f62e:	fa1f fc8c 	uxth.w	ip, ip
 800f632:	fb0c fc03 	mul.w	ip, ip, r3
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	f10c 0c04 	add.w	ip, ip, #4
 800f63c:	4463      	add	r3, ip
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	449c      	add	ip, r3
 800f644:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800f648:	6033      	str	r3, [r6, #0]
 800f64a:	f000 f9df 	bl	800fa0c <uxr_seq_num_cmp>
 800f64e:	2800      	cmp	r0, #0
 800f650:	dd01      	ble.n	800f656 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800f652:	2000      	movs	r0, #0
 800f654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f656:	7b23      	ldrb	r3, [r4, #12]
 800f658:	6832      	ldr	r2, [r6, #0]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d9f9      	bls.n	800f652 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f65e:	8a61      	ldrh	r1, [r4, #18]
 800f660:	8a20      	ldrh	r0, [r4, #16]
 800f662:	f000 f9cf 	bl	800fa04 <uxr_seq_num_sub>
 800f666:	8923      	ldrh	r3, [r4, #8]
 800f668:	4283      	cmp	r3, r0
 800f66a:	d0f2      	beq.n	800f652 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f66c:	8828      	ldrh	r0, [r5, #0]
 800f66e:	89e3      	ldrh	r3, [r4, #14]
 800f670:	8220      	strh	r0, [r4, #16]
 800f672:	4298      	cmp	r0, r3
 800f674:	d001      	beq.n	800f67a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800f676:	2001      	movs	r0, #1
 800f678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f67a:	2101      	movs	r1, #1
 800f67c:	f000 f9be 	bl	800f9fc <uxr_seq_num_add>
 800f680:	4603      	mov	r3, r0
 800f682:	2001      	movs	r0, #1
 800f684:	81e3      	strh	r3, [r4, #14]
 800f686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f688 <uxr_update_output_stream_heartbeat_timestamp>:
 800f688:	b570      	push	{r4, r5, r6, lr}
 800f68a:	8a01      	ldrh	r1, [r0, #16]
 800f68c:	4604      	mov	r4, r0
 800f68e:	8a40      	ldrh	r0, [r0, #18]
 800f690:	4615      	mov	r5, r2
 800f692:	461e      	mov	r6, r3
 800f694:	f000 f9ba 	bl	800fa0c <uxr_seq_num_cmp>
 800f698:	2800      	cmp	r0, #0
 800f69a:	db07      	blt.n	800f6ac <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800f69c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	f894 0020 	ldrb.w	r0, [r4, #32]
 800f6b0:	b940      	cbnz	r0, 800f6c4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	f884 3020 	strb.w	r3, [r4, #32]
 800f6b8:	3564      	adds	r5, #100	; 0x64
 800f6ba:	f146 0600 	adc.w	r6, r6, #0
 800f6be:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
 800f6c4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800f6c8:	4295      	cmp	r5, r2
 800f6ca:	eb76 0303 	sbcs.w	r3, r6, r3
 800f6ce:	db04      	blt.n	800f6da <uxr_update_output_stream_heartbeat_timestamp+0x52>
 800f6d0:	1c43      	adds	r3, r0, #1
 800f6d2:	2001      	movs	r0, #1
 800f6d4:	f884 3020 	strb.w	r3, [r4, #32]
 800f6d8:	e7ee      	b.n	800f6b8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 800f6da:	2000      	movs	r0, #0
 800f6dc:	e7ec      	b.n	800f6b8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 800f6de:	bf00      	nop

0800f6e0 <uxr_begin_output_nack_buffer_it>:
 800f6e0:	8a40      	ldrh	r0, [r0, #18]
 800f6e2:	4770      	bx	lr

0800f6e4 <uxr_next_reliable_nack_buffer_to_send>:
 800f6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e8:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 800f6ec:	b197      	cbz	r7, 800f714 <uxr_next_reliable_nack_buffer_to_send+0x30>
 800f6ee:	4680      	mov	r8, r0
 800f6f0:	460d      	mov	r5, r1
 800f6f2:	4616      	mov	r6, r2
 800f6f4:	461c      	mov	r4, r3
 800f6f6:	8818      	ldrh	r0, [r3, #0]
 800f6f8:	2101      	movs	r1, #1
 800f6fa:	f000 f97f 	bl	800f9fc <uxr_seq_num_add>
 800f6fe:	8020      	strh	r0, [r4, #0]
 800f700:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 800f704:	f000 f982 	bl	800fa0c <uxr_seq_num_cmp>
 800f708:	2800      	cmp	r0, #0
 800f70a:	dd06      	ble.n	800f71a <uxr_next_reliable_nack_buffer_to_send+0x36>
 800f70c:	2300      	movs	r3, #0
 800f70e:	461f      	mov	r7, r3
 800f710:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 800f714:	4638      	mov	r0, r7
 800f716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f71a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800f71e:	8820      	ldrh	r0, [r4, #0]
 800f720:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f724:	fbb0 f3f2 	udiv	r3, r0, r2
 800f728:	fbb1 fcf2 	udiv	ip, r1, r2
 800f72c:	fb02 0313 	mls	r3, r2, r3, r0
 800f730:	b29b      	uxth	r3, r3
 800f732:	fb03 fc0c 	mul.w	ip, r3, ip
 800f736:	f8d8 3000 	ldr.w	r3, [r8]
 800f73a:	f10c 0c04 	add.w	ip, ip, #4
 800f73e:	4463      	add	r3, ip
 800f740:	602b      	str	r3, [r5, #0]
 800f742:	f8d8 3000 	ldr.w	r3, [r8]
 800f746:	4463      	add	r3, ip
 800f748:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f74c:	6033      	str	r3, [r6, #0]
 800f74e:	f898 200c 	ldrb.w	r2, [r8, #12]
 800f752:	429a      	cmp	r2, r3
 800f754:	d0d0      	beq.n	800f6f8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 800f756:	e7dd      	b.n	800f714 <uxr_next_reliable_nack_buffer_to_send+0x30>

0800f758 <uxr_process_acknack>:
 800f758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75a:	4604      	mov	r4, r0
 800f75c:	460e      	mov	r6, r1
 800f75e:	4610      	mov	r0, r2
 800f760:	2101      	movs	r1, #1
 800f762:	f000 f94f 	bl	800fa04 <uxr_seq_num_sub>
 800f766:	8a61      	ldrh	r1, [r4, #18]
 800f768:	f000 f94c 	bl	800fa04 <uxr_seq_num_sub>
 800f76c:	b1c8      	cbz	r0, 800f7a2 <uxr_process_acknack+0x4a>
 800f76e:	4605      	mov	r5, r0
 800f770:	2700      	movs	r7, #0
 800f772:	2101      	movs	r1, #1
 800f774:	8a60      	ldrh	r0, [r4, #18]
 800f776:	f000 f941 	bl	800f9fc <uxr_seq_num_add>
 800f77a:	8923      	ldrh	r3, [r4, #8]
 800f77c:	6862      	ldr	r2, [r4, #4]
 800f77e:	3701      	adds	r7, #1
 800f780:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800f784:	6821      	ldr	r1, [r4, #0]
 800f786:	42bd      	cmp	r5, r7
 800f788:	8260      	strh	r0, [r4, #18]
 800f78a:	fbb0 fef3 	udiv	lr, r0, r3
 800f78e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f792:	fb03 031e 	mls	r3, r3, lr, r0
 800f796:	b29b      	uxth	r3, r3
 800f798:	fb02 f303 	mul.w	r3, r2, r3
 800f79c:	f841 c003 	str.w	ip, [r1, r3]
 800f7a0:	d1e7      	bne.n	800f772 <uxr_process_acknack+0x1a>
 800f7a2:	3e00      	subs	r6, #0
 800f7a4:	f04f 0300 	mov.w	r3, #0
 800f7a8:	bf18      	it	ne
 800f7aa:	2601      	movne	r6, #1
 800f7ac:	f884 3020 	strb.w	r3, [r4, #32]
 800f7b0:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 800f7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7b6:	bf00      	nop

0800f7b8 <uxr_is_output_up_to_date>:
 800f7b8:	8a01      	ldrh	r1, [r0, #16]
 800f7ba:	8a40      	ldrh	r0, [r0, #18]
 800f7bc:	b508      	push	{r3, lr}
 800f7be:	f000 f925 	bl	800fa0c <uxr_seq_num_cmp>
 800f7c2:	fab0 f080 	clz	r0, r0
 800f7c6:	0940      	lsrs	r0, r0, #5
 800f7c8:	bd08      	pop	{r3, pc}
 800f7ca:	bf00      	nop

0800f7cc <get_available_free_slots>:
 800f7cc:	8901      	ldrh	r1, [r0, #8]
 800f7ce:	b1e1      	cbz	r1, 800f80a <get_available_free_slots+0x3e>
 800f7d0:	6843      	ldr	r3, [r0, #4]
 800f7d2:	f04f 0c00 	mov.w	ip, #0
 800f7d6:	b530      	push	{r4, r5, lr}
 800f7d8:	fbb3 fef1 	udiv	lr, r3, r1
 800f7dc:	6805      	ldr	r5, [r0, #0]
 800f7de:	4662      	mov	r2, ip
 800f7e0:	7b04      	ldrb	r4, [r0, #12]
 800f7e2:	4660      	mov	r0, ip
 800f7e4:	f10c 0c01 	add.w	ip, ip, #1
 800f7e8:	fbb2 f3f1 	udiv	r3, r2, r1
 800f7ec:	fb01 2313 	mls	r3, r1, r3, r2
 800f7f0:	fa1f f28c 	uxth.w	r2, ip
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	fb0e f303 	mul.w	r3, lr, r3
 800f7fa:	58eb      	ldr	r3, [r5, r3]
 800f7fc:	429c      	cmp	r4, r3
 800f7fe:	d101      	bne.n	800f804 <get_available_free_slots+0x38>
 800f800:	3001      	adds	r0, #1
 800f802:	b280      	uxth	r0, r0
 800f804:	428a      	cmp	r2, r1
 800f806:	d3ed      	bcc.n	800f7e4 <get_available_free_slots+0x18>
 800f808:	bd30      	pop	{r4, r5, pc}
 800f80a:	4608      	mov	r0, r1
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop

0800f810 <uxr_buffer_cancel_data>:
 800f810:	b510      	push	{r4, lr}
 800f812:	2300      	movs	r3, #0
 800f814:	b094      	sub	sp, #80	; 0x50
 800f816:	4604      	mov	r4, r0
 800f818:	9205      	str	r2, [sp, #20]
 800f81a:	9301      	str	r3, [sp, #4]
 800f81c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f820:	f88d 301e 	strb.w	r3, [sp, #30]
 800f824:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800f828:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800f82c:	2308      	movs	r3, #8
 800f82e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f832:	2201      	movs	r2, #1
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	ab0c      	add	r3, sp, #48	; 0x30
 800f838:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800f83c:	2210      	movs	r2, #16
 800f83e:	f7fb fadd 	bl	800adfc <uxr_prepare_stream_to_write_submessage>
 800f842:	b918      	cbnz	r0, 800f84c <uxr_buffer_cancel_data+0x3c>
 800f844:	4604      	mov	r4, r0
 800f846:	4620      	mov	r0, r4
 800f848:	b014      	add	sp, #80	; 0x50
 800f84a:	bd10      	pop	{r4, pc}
 800f84c:	9905      	ldr	r1, [sp, #20]
 800f84e:	aa06      	add	r2, sp, #24
 800f850:	4620      	mov	r0, r4
 800f852:	f7fb fc0f 	bl	800b074 <uxr_init_base_object_request>
 800f856:	4604      	mov	r4, r0
 800f858:	a906      	add	r1, sp, #24
 800f85a:	a80c      	add	r0, sp, #48	; 0x30
 800f85c:	f7fc fe22 	bl	800c4a4 <uxr_serialize_READ_DATA_Payload>
 800f860:	4620      	mov	r0, r4
 800f862:	b014      	add	sp, #80	; 0x50
 800f864:	bd10      	pop	{r4, pc}
 800f866:	bf00      	nop

0800f868 <read_submessage_format>:
 800f868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f86c:	b095      	sub	sp, #84	; 0x54
 800f86e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 800f872:	b113      	cbz	r3, 800f87a <read_submessage_format+0x12>
 800f874:	b015      	add	sp, #84	; 0x54
 800f876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f87a:	4606      	mov	r6, r0
 800f87c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f87e:	460c      	mov	r4, r1
 800f880:	4615      	mov	r5, r2
 800f882:	9004      	str	r0, [sp, #16]
 800f884:	4699      	mov	r9, r3
 800f886:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f888:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800f88c:	9005      	str	r0, [sp, #20]
 800f88e:	a80c      	add	r0, sp, #48	; 0x30
 800f890:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f894:	1a52      	subs	r2, r2, r1
 800f896:	f7fa f9c3 	bl	8009c20 <ucdr_init_buffer>
 800f89a:	a80c      	add	r0, sp, #48	; 0x30
 800f89c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f8a0:	f7fa f992 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800f8a4:	69e2      	ldr	r2, [r4, #28]
 800f8a6:	b19a      	cbz	r2, 800f8d0 <read_submessage_format+0x68>
 800f8a8:	f1b8 0f07 	cmp.w	r8, #7
 800f8ac:	f882 9014 	strb.w	r9, [r2, #20]
 800f8b0:	d040      	beq.n	800f934 <read_submessage_format+0xcc>
 800f8b2:	f1b8 0f08 	cmp.w	r8, #8
 800f8b6:	d02e      	beq.n	800f916 <read_submessage_format+0xae>
 800f8b8:	f1b8 0f06 	cmp.w	r8, #6
 800f8bc:	d011      	beq.n	800f8e2 <read_submessage_format+0x7a>
 800f8be:	2301      	movs	r3, #1
 800f8c0:	7513      	strb	r3, [r2, #20]
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f7fa f9ff 	bl	8009cc8 <ucdr_advance_buffer>
 800f8ca:	b015      	add	sp, #84	; 0x54
 800f8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d0:	f1b8 0f07 	cmp.w	r8, #7
 800f8d4:	d02e      	beq.n	800f934 <read_submessage_format+0xcc>
 800f8d6:	f1b8 0f08 	cmp.w	r8, #8
 800f8da:	d01c      	beq.n	800f916 <read_submessage_format+0xae>
 800f8dc:	f1b8 0f06 	cmp.w	r8, #6
 800f8e0:	d1ef      	bne.n	800f8c2 <read_submessage_format+0x5a>
 800f8e2:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 800f8e6:	f1b8 0f00 	cmp.w	r8, #0
 800f8ea:	d011      	beq.n	800f910 <read_submessage_format+0xa8>
 800f8ec:	ab0c      	add	r3, sp, #48	; 0x30
 800f8ee:	9501      	str	r5, [sp, #4]
 800f8f0:	463a      	mov	r2, r7
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	2306      	movs	r3, #6
 800f8f8:	f88d 3016 	strb.w	r3, [sp, #22]
 800f8fc:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800f900:	9302      	str	r3, [sp, #8]
 800f902:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f906:	47c0      	blx	r8
 800f908:	2301      	movs	r3, #1
 800f90a:	69e2      	ldr	r2, [r4, #28]
 800f90c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800f910:	2a00      	cmp	r2, #0
 800f912:	d1d4      	bne.n	800f8be <read_submessage_format+0x56>
 800f914:	e7d5      	b.n	800f8c2 <read_submessage_format+0x5a>
 800f916:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d0f8      	beq.n	800f910 <read_submessage_format+0xa8>
 800f91e:	a80c      	add	r0, sp, #48	; 0x30
 800f920:	a906      	add	r1, sp, #24
 800f922:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f926:	f7fc fe63 	bl	800c5f0 <uxr_deserialize_SampleIdentity>
 800f92a:	b9a0      	cbnz	r0, 800f956 <read_submessage_format+0xee>
 800f92c:	69e2      	ldr	r2, [r4, #28]
 800f92e:	2a00      	cmp	r2, #0
 800f930:	d1c5      	bne.n	800f8be <read_submessage_format+0x56>
 800f932:	e7c6      	b.n	800f8c2 <read_submessage_format+0x5a>
 800f934:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 800f938:	b13b      	cbz	r3, 800f94a <read_submessage_format+0xe2>
 800f93a:	a906      	add	r1, sp, #24
 800f93c:	a80c      	add	r0, sp, #48	; 0x30
 800f93e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f942:	f7fc fb4f 	bl	800bfe4 <uxr_deserialize_BaseObjectRequest>
 800f946:	bb60      	cbnz	r0, 800f9a2 <read_submessage_format+0x13a>
 800f948:	69e2      	ldr	r2, [r4, #28]
 800f94a:	68a3      	ldr	r3, [r4, #8]
 800f94c:	442b      	add	r3, r5
 800f94e:	60a3      	str	r3, [r4, #8]
 800f950:	2a00      	cmp	r2, #0
 800f952:	d1b4      	bne.n	800f8be <read_submessage_format+0x56>
 800f954:	e7b5      	b.n	800f8c2 <read_submessage_format+0x5a>
 800f956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f958:	a80c      	add	r0, sp, #48	; 0x30
 800f95a:	eba8 0803 	sub.w	r8, r8, r3
 800f95e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f962:	44a8      	add	r8, r5
 800f964:	1a52      	subs	r2, r2, r1
 800f966:	f7fa f95b 	bl	8009c20 <ucdr_init_buffer>
 800f96a:	a80c      	add	r0, sp, #48	; 0x30
 800f96c:	fa1f f888 	uxth.w	r8, r8
 800f970:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f974:	f7fa f928 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800f978:	ab0c      	add	r3, sp, #48	; 0x30
 800f97a:	2108      	movs	r1, #8
 800f97c:	f8cd 8004 	str.w	r8, [sp, #4]
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	463a      	mov	r2, r7
 800f984:	f88d 1016 	strb.w	r1, [sp, #22]
 800f988:	ab06      	add	r3, sp, #24
 800f98a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 800f98e:	4630      	mov	r0, r6
 800f990:	9102      	str	r1, [sp, #8]
 800f992:	9905      	ldr	r1, [sp, #20]
 800f994:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 800f998:	47b8      	blx	r7
 800f99a:	2301      	movs	r3, #1
 800f99c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800f9a0:	e7c4      	b.n	800f92c <read_submessage_format+0xc4>
 800f9a2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f9a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9a8:	a80c      	add	r0, sp, #48	; 0x30
 800f9aa:	1a52      	subs	r2, r2, r1
 800f9ac:	eba8 0803 	sub.w	r8, r8, r3
 800f9b0:	f7fa f936 	bl	8009c20 <ucdr_init_buffer>
 800f9b4:	a80c      	add	r0, sp, #48	; 0x30
 800f9b6:	44a8      	add	r8, r5
 800f9b8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f9bc:	f7fa f904 	bl	8009bc8 <ucdr_set_on_full_buffer_callback>
 800f9c0:	ab0c      	add	r3, sp, #48	; 0x30
 800f9c2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f9c6:	fa1f f888 	uxth.w	r8, r8
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	463a      	mov	r2, r7
 800f9ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	f8cd 8004 	str.w	r8, [sp, #4]
 800f9d8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f9dc:	2107      	movs	r1, #7
 800f9de:	f88d 1016 	strb.w	r1, [sp, #22]
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 800f9e8:	9102      	str	r1, [sp, #8]
 800f9ea:	9905      	ldr	r1, [sp, #20]
 800f9ec:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 800f9f0:	47b8      	blx	r7
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800f9f8:	e7a6      	b.n	800f948 <read_submessage_format+0xe0>
 800f9fa:	bf00      	nop

0800f9fc <uxr_seq_num_add>:
 800f9fc:	4408      	add	r0, r1
 800f9fe:	b280      	uxth	r0, r0
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop

0800fa04 <uxr_seq_num_sub>:
 800fa04:	1a40      	subs	r0, r0, r1
 800fa06:	b280      	uxth	r0, r0
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop

0800fa0c <uxr_seq_num_cmp>:
 800fa0c:	4288      	cmp	r0, r1
 800fa0e:	d011      	beq.n	800fa34 <uxr_seq_num_cmp+0x28>
 800fa10:	d309      	bcc.n	800fa26 <uxr_seq_num_cmp+0x1a>
 800fa12:	4288      	cmp	r0, r1
 800fa14:	d910      	bls.n	800fa38 <uxr_seq_num_cmp+0x2c>
 800fa16:	1a40      	subs	r0, r0, r1
 800fa18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800fa1c:	bfd4      	ite	le
 800fa1e:	2001      	movle	r0, #1
 800fa20:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 800fa24:	4770      	bx	lr
 800fa26:	1a0b      	subs	r3, r1, r0
 800fa28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa2c:	daf1      	bge.n	800fa12 <uxr_seq_num_cmp+0x6>
 800fa2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa32:	4770      	bx	lr
 800fa34:	2000      	movs	r0, #0
 800fa36:	4770      	bx	lr
 800fa38:	2001      	movs	r0, #1
 800fa3a:	4770      	bx	lr

0800fa3c <uxr_init_framing_io>:
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	7041      	strb	r1, [r0, #1]
 800fa40:	7003      	strb	r3, [r0, #0]
 800fa42:	8583      	strh	r3, [r0, #44]	; 0x2c
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop

0800fa48 <uxr_write_framed_msg>:
 800fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4c:	4617      	mov	r7, r2
 800fa4e:	7842      	ldrb	r2, [r0, #1]
 800fa50:	460e      	mov	r6, r1
 800fa52:	b083      	sub	sp, #12
 800fa54:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 800fa58:	469b      	mov	fp, r3
 800fa5a:	237e      	movs	r3, #126	; 0x7e
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	2901      	cmp	r1, #1
 800fa60:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800fa64:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800fa68:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 800fa6c:	f240 8115 	bls.w	800fc9a <uxr_write_framed_msg+0x252>
 800fa70:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800fa74:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 800fa78:	2202      	movs	r2, #2
 800fa7a:	2901      	cmp	r1, #1
 800fa7c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fa80:	d952      	bls.n	800fb28 <uxr_write_framed_msg+0xe0>
 800fa82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa84:	2103      	movs	r1, #3
 800fa86:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800fa8a:	b2dd      	uxtb	r5, r3
 800fa8c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800fa90:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800fa94:	2a01      	cmp	r2, #1
 800fa96:	d95c      	bls.n	800fb52 <uxr_write_framed_msg+0x10a>
 800fa98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa9a:	1862      	adds	r2, r4, r1
 800fa9c:	3101      	adds	r1, #1
 800fa9e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800faa2:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 800faa6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800faaa:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800faae:	2a01      	cmp	r2, #1
 800fab0:	d961      	bls.n	800fb76 <uxr_write_framed_msg+0x12e>
 800fab2:	1c4a      	adds	r2, r1, #1
 800fab4:	4421      	add	r1, r4
 800fab6:	b2d2      	uxtb	r2, r2
 800fab8:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800fabc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d06a      	beq.n	800fb9a <uxr_write_framed_msg+0x152>
 800fac4:	f04f 0800 	mov.w	r8, #0
 800fac8:	46c1      	mov	r9, r8
 800faca:	e016      	b.n	800fafa <uxr_write_framed_msg+0xb2>
 800facc:	2a29      	cmp	r2, #41	; 0x29
 800face:	d868      	bhi.n	800fba2 <uxr_write_framed_msg+0x15a>
 800fad0:	18a0      	adds	r0, r4, r2
 800fad2:	3201      	adds	r2, #1
 800fad4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800fad8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fadc:	ea88 0101 	eor.w	r1, r8, r1
 800fae0:	4b7d      	ldr	r3, [pc, #500]	; (800fcd8 <uxr_write_framed_msg+0x290>)
 800fae2:	f109 0901 	add.w	r9, r9, #1
 800fae6:	b2c9      	uxtb	r1, r1
 800fae8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800faec:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 800faf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faf2:	454b      	cmp	r3, r9
 800faf4:	d969      	bls.n	800fbca <uxr_write_framed_msg+0x182>
 800faf6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fafa:	f81b 1009 	ldrb.w	r1, [fp, r9]
 800fafe:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800fb02:	2801      	cmp	r0, #1
 800fb04:	d8e2      	bhi.n	800facc <uxr_write_framed_msg+0x84>
 800fb06:	1c50      	adds	r0, r2, #1
 800fb08:	b2c0      	uxtb	r0, r0
 800fb0a:	2829      	cmp	r0, #41	; 0x29
 800fb0c:	d849      	bhi.n	800fba2 <uxr_write_framed_msg+0x15a>
 800fb0e:	18a0      	adds	r0, r4, r2
 800fb10:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800fb14:	3202      	adds	r2, #2
 800fb16:	f081 0520 	eor.w	r5, r1, #32
 800fb1a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800fb1e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 800fb22:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fb26:	e7d9      	b.n	800fadc <uxr_write_framed_msg+0x94>
 800fb28:	2104      	movs	r1, #4
 800fb2a:	f04f 0c03 	mov.w	ip, #3
 800fb2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb30:	4422      	add	r2, r4
 800fb32:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 800fb36:	44a4      	add	ip, r4
 800fb38:	b2dd      	uxtb	r5, r3
 800fb3a:	f080 0020 	eor.w	r0, r0, #32
 800fb3e:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 800fb42:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800fb46:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 800fb4a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800fb4e:	2a01      	cmp	r2, #1
 800fb50:	d8a2      	bhi.n	800fa98 <uxr_write_framed_msg+0x50>
 800fb52:	1862      	adds	r2, r4, r1
 800fb54:	207d      	movs	r0, #125	; 0x7d
 800fb56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb58:	f085 0520 	eor.w	r5, r5, #32
 800fb5c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 800fb60:	3102      	adds	r1, #2
 800fb62:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800fb66:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 800fb6a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800fb6e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800fb72:	2a01      	cmp	r2, #1
 800fb74:	d89d      	bhi.n	800fab2 <uxr_write_framed_msg+0x6a>
 800fb76:	1c4d      	adds	r5, r1, #1
 800fb78:	1c8a      	adds	r2, r1, #2
 800fb7a:	f080 0020 	eor.w	r0, r0, #32
 800fb7e:	4421      	add	r1, r4
 800fb80:	fa54 f585 	uxtab	r5, r4, r5
 800fb84:	b2d2      	uxtb	r2, r2
 800fb86:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800fb8a:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 800fb8e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 800fb92:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d194      	bne.n	800fac4 <uxr_write_framed_msg+0x7c>
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fba0:	e019      	b.n	800fbd6 <uxr_write_framed_msg+0x18e>
 800fba2:	2500      	movs	r5, #0
 800fba4:	e000      	b.n	800fba8 <uxr_write_framed_msg+0x160>
 800fba6:	b160      	cbz	r0, 800fbc2 <uxr_write_framed_msg+0x17a>
 800fba8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800fbac:	1b52      	subs	r2, r2, r5
 800fbae:	4653      	mov	r3, sl
 800fbb0:	4638      	mov	r0, r7
 800fbb2:	4421      	add	r1, r4
 800fbb4:	47b0      	blx	r6
 800fbb6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fbba:	4405      	add	r5, r0
 800fbbc:	4295      	cmp	r5, r2
 800fbbe:	d3f2      	bcc.n	800fba6 <uxr_write_framed_msg+0x15e>
 800fbc0:	d066      	beq.n	800fc90 <uxr_write_framed_msg+0x248>
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	b003      	add	sp, #12
 800fbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbca:	fa5f f188 	uxtb.w	r1, r8
 800fbce:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fbd2:	f8ad 8004 	strh.w	r8, [sp, #4]
 800fbd6:	f04f 0900 	mov.w	r9, #0
 800fbda:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 800fbde:	46c8      	mov	r8, r9
 800fbe0:	e013      	b.n	800fc0a <uxr_write_framed_msg+0x1c2>
 800fbe2:	2a29      	cmp	r2, #41	; 0x29
 800fbe4:	d824      	bhi.n	800fc30 <uxr_write_framed_msg+0x1e8>
 800fbe6:	18a3      	adds	r3, r4, r2
 800fbe8:	3201      	adds	r2, #1
 800fbea:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 800fbee:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fbf2:	f109 0901 	add.w	r9, r9, #1
 800fbf6:	f1b9 0f02 	cmp.w	r9, #2
 800fbfa:	d02d      	beq.n	800fc58 <uxr_write_framed_msg+0x210>
 800fbfc:	f109 0308 	add.w	r3, r9, #8
 800fc00:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fc04:	446b      	add	r3, sp
 800fc06:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 800fc0a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d8e7      	bhi.n	800fbe2 <uxr_write_framed_msg+0x19a>
 800fc12:	1c53      	adds	r3, r2, #1
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b29      	cmp	r3, #41	; 0x29
 800fc18:	d80a      	bhi.n	800fc30 <uxr_write_framed_msg+0x1e8>
 800fc1a:	18a3      	adds	r3, r4, r2
 800fc1c:	f081 0120 	eor.w	r1, r1, #32
 800fc20:	3202      	adds	r2, #2
 800fc22:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 800fc26:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 800fc2a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fc2e:	e7e0      	b.n	800fbf2 <uxr_write_framed_msg+0x1aa>
 800fc30:	2500      	movs	r5, #0
 800fc32:	e001      	b.n	800fc38 <uxr_write_framed_msg+0x1f0>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d0c4      	beq.n	800fbc2 <uxr_write_framed_msg+0x17a>
 800fc38:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800fc3c:	1b52      	subs	r2, r2, r5
 800fc3e:	4653      	mov	r3, sl
 800fc40:	4638      	mov	r0, r7
 800fc42:	4421      	add	r1, r4
 800fc44:	47b0      	blx	r6
 800fc46:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fc4a:	4405      	add	r5, r0
 800fc4c:	4295      	cmp	r5, r2
 800fc4e:	d3f1      	bcc.n	800fc34 <uxr_write_framed_msg+0x1ec>
 800fc50:	d1b7      	bne.n	800fbc2 <uxr_write_framed_msg+0x17a>
 800fc52:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 800fc56:	e7d1      	b.n	800fbfc <uxr_write_framed_msg+0x1b4>
 800fc58:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fc5c:	b19a      	cbz	r2, 800fc86 <uxr_write_framed_msg+0x23e>
 800fc5e:	2500      	movs	r5, #0
 800fc60:	e001      	b.n	800fc66 <uxr_write_framed_msg+0x21e>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d0ad      	beq.n	800fbc2 <uxr_write_framed_msg+0x17a>
 800fc66:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800fc6a:	1b52      	subs	r2, r2, r5
 800fc6c:	4653      	mov	r3, sl
 800fc6e:	4638      	mov	r0, r7
 800fc70:	4421      	add	r1, r4
 800fc72:	47b0      	blx	r6
 800fc74:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fc78:	4405      	add	r5, r0
 800fc7a:	4295      	cmp	r5, r2
 800fc7c:	d3f1      	bcc.n	800fc62 <uxr_write_framed_msg+0x21a>
 800fc7e:	d1a0      	bne.n	800fbc2 <uxr_write_framed_msg+0x17a>
 800fc80:	2300      	movs	r3, #0
 800fc82:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fc86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc88:	b298      	uxth	r0, r3
 800fc8a:	b003      	add	sp, #12
 800fc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc90:	f04f 0300 	mov.w	r3, #0
 800fc94:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fc98:	e72a      	b.n	800faf0 <uxr_write_framed_msg+0xa8>
 800fc9a:	217d      	movs	r1, #125	; 0x7d
 800fc9c:	f082 0220 	eor.w	r2, r2, #32
 800fca0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800fca4:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800fca8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800fcac:	2203      	movs	r2, #3
 800fcae:	2901      	cmp	r1, #1
 800fcb0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fcb4:	d803      	bhi.n	800fcbe <uxr_write_framed_msg+0x276>
 800fcb6:	2105      	movs	r1, #5
 800fcb8:	f04f 0c04 	mov.w	ip, #4
 800fcbc:	e737      	b.n	800fb2e <uxr_write_framed_msg+0xe6>
 800fcbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcc0:	2104      	movs	r1, #4
 800fcc2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800fcc6:	b2dd      	uxtb	r5, r3
 800fcc8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 800fccc:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 800fcd0:	2a01      	cmp	r2, #1
 800fcd2:	f63f aee1 	bhi.w	800fa98 <uxr_write_framed_msg+0x50>
 800fcd6:	e73c      	b.n	800fb52 <uxr_write_framed_msg+0x10a>
 800fcd8:	08013068 	.word	0x08013068

0800fcdc <uxr_framing_read_transport>:
 800fcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce0:	4604      	mov	r4, r0
 800fce2:	b085      	sub	sp, #20
 800fce4:	4692      	mov	sl, r2
 800fce6:	4689      	mov	r9, r1
 800fce8:	461d      	mov	r5, r3
 800fcea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fcec:	f7fb fb78 	bl	800b3e0 <uxr_millis>
 800fcf0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800fcf4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 800fcf8:	4680      	mov	r8, r0
 800fcfa:	42ba      	cmp	r2, r7
 800fcfc:	d05f      	beq.n	800fdbe <uxr_framing_read_transport+0xe2>
 800fcfe:	d817      	bhi.n	800fd30 <uxr_framing_read_transport+0x54>
 800fd00:	3f01      	subs	r7, #1
 800fd02:	1aba      	subs	r2, r7, r2
 800fd04:	2700      	movs	r7, #0
 800fd06:	b2d2      	uxtb	r2, r2
 800fd08:	42b2      	cmp	r2, r6
 800fd0a:	d81a      	bhi.n	800fd42 <uxr_framing_read_transport+0x66>
 800fd0c:	19d3      	adds	r3, r2, r7
 800fd0e:	42b3      	cmp	r3, r6
 800fd10:	d852      	bhi.n	800fdb8 <uxr_framing_read_transport+0xdc>
 800fd12:	b9d2      	cbnz	r2, 800fd4a <uxr_framing_read_transport+0x6e>
 800fd14:	2600      	movs	r6, #0
 800fd16:	f7fb fb63 	bl	800b3e0 <uxr_millis>
 800fd1a:	682b      	ldr	r3, [r5, #0]
 800fd1c:	eba0 0008 	sub.w	r0, r0, r8
 800fd20:	1a1b      	subs	r3, r3, r0
 800fd22:	4630      	mov	r0, r6
 800fd24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fd28:	602b      	str	r3, [r5, #0]
 800fd2a:	b005      	add	sp, #20
 800fd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd30:	2f00      	cmp	r7, #0
 800fd32:	d060      	beq.n	800fdf6 <uxr_framing_read_transport+0x11a>
 800fd34:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 800fd38:	3f01      	subs	r7, #1
 800fd3a:	b2d2      	uxtb	r2, r2
 800fd3c:	b2ff      	uxtb	r7, r7
 800fd3e:	42b2      	cmp	r2, r6
 800fd40:	d9e4      	bls.n	800fd0c <uxr_framing_read_transport+0x30>
 800fd42:	b2f2      	uxtb	r2, r6
 800fd44:	2700      	movs	r7, #0
 800fd46:	2a00      	cmp	r2, #0
 800fd48:	d0e4      	beq.n	800fd14 <uxr_framing_read_transport+0x38>
 800fd4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd4c:	4650      	mov	r0, sl
 800fd4e:	9203      	str	r2, [sp, #12]
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fd56:	682b      	ldr	r3, [r5, #0]
 800fd58:	3102      	adds	r1, #2
 800fd5a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800fe00 <uxr_framing_read_transport+0x124>
 800fd5e:	4421      	add	r1, r4
 800fd60:	47c8      	blx	r9
 800fd62:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fd66:	4606      	mov	r6, r0
 800fd68:	4403      	add	r3, r0
 800fd6a:	0859      	lsrs	r1, r3, #1
 800fd6c:	fbab 2101 	umull	r2, r1, fp, r1
 800fd70:	222a      	movs	r2, #42	; 0x2a
 800fd72:	0889      	lsrs	r1, r1, #2
 800fd74:	fb02 3111 	mls	r1, r2, r1, r3
 800fd78:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d0c9      	beq.n	800fd14 <uxr_framing_read_transport+0x38>
 800fd80:	9a03      	ldr	r2, [sp, #12]
 800fd82:	4290      	cmp	r0, r2
 800fd84:	d1c7      	bne.n	800fd16 <uxr_framing_read_transport+0x3a>
 800fd86:	2f00      	cmp	r7, #0
 800fd88:	d0c5      	beq.n	800fd16 <uxr_framing_read_transport+0x3a>
 800fd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd8c:	3102      	adds	r1, #2
 800fd8e:	463a      	mov	r2, r7
 800fd90:	4650      	mov	r0, sl
 800fd92:	4421      	add	r1, r4
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	2300      	movs	r3, #0
 800fd98:	47c8      	blx	r9
 800fd9a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800fd9e:	4406      	add	r6, r0
 800fda0:	1813      	adds	r3, r2, r0
 800fda2:	085a      	lsrs	r2, r3, #1
 800fda4:	fbab 1b02 	umull	r1, fp, fp, r2
 800fda8:	222a      	movs	r2, #42	; 0x2a
 800fdaa:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800fdae:	fb02 331b 	mls	r3, r2, fp, r3
 800fdb2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800fdb6:	e7ae      	b.n	800fd16 <uxr_framing_read_transport+0x3a>
 800fdb8:	1ab6      	subs	r6, r6, r2
 800fdba:	b2f7      	uxtb	r7, r6
 800fdbc:	e7a9      	b.n	800fd12 <uxr_framing_read_transport+0x36>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	2e28      	cmp	r6, #40	; 0x28
 800fdc2:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800fdc4:	d9bd      	bls.n	800fd42 <uxr_framing_read_transport+0x66>
 800fdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdc8:	2229      	movs	r2, #41	; 0x29
 800fdca:	1ca1      	adds	r1, r4, #2
 800fdcc:	4650      	mov	r0, sl
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	47c8      	blx	r9
 800fdd4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fdd8:	4606      	mov	r6, r0
 800fdda:	212a      	movs	r1, #42	; 0x2a
 800fddc:	4403      	add	r3, r0
 800fdde:	4808      	ldr	r0, [pc, #32]	; (800fe00 <uxr_framing_read_transport+0x124>)
 800fde0:	085a      	lsrs	r2, r3, #1
 800fde2:	fba0 0202 	umull	r0, r2, r0, r2
 800fde6:	0892      	lsrs	r2, r2, #2
 800fde8:	fb01 3312 	mls	r3, r1, r2, r3
 800fdec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800fdf0:	2e00      	cmp	r6, #0
 800fdf2:	d08f      	beq.n	800fd14 <uxr_framing_read_transport+0x38>
 800fdf4:	e78f      	b.n	800fd16 <uxr_framing_read_transport+0x3a>
 800fdf6:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 800fdfa:	b2d2      	uxtb	r2, r2
 800fdfc:	e784      	b.n	800fd08 <uxr_framing_read_transport+0x2c>
 800fdfe:	bf00      	nop
 800fe00:	30c30c31 	.word	0x30c30c31

0800fe04 <uxr_read_framed_msg>:
 800fe04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe08:	461e      	mov	r6, r3
 800fe0a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800fe0e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800fe12:	b083      	sub	sp, #12
 800fe14:	4604      	mov	r4, r0
 800fe16:	4688      	mov	r8, r1
 800fe18:	429d      	cmp	r5, r3
 800fe1a:	4691      	mov	r9, r2
 800fe1c:	f000 818c 	beq.w	8010138 <uxr_read_framed_msg+0x334>
 800fe20:	7823      	ldrb	r3, [r4, #0]
 800fe22:	4dc3      	ldr	r5, [pc, #780]	; (8010130 <uxr_read_framed_msg+0x32c>)
 800fe24:	4fc3      	ldr	r7, [pc, #780]	; (8010134 <uxr_read_framed_msg+0x330>)
 800fe26:	2b07      	cmp	r3, #7
 800fe28:	d8fd      	bhi.n	800fe26 <uxr_read_framed_msg+0x22>
 800fe2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fe2e:	011c      	.short	0x011c
 800fe30:	00d900fb 	.word	0x00d900fb
 800fe34:	008f00ba 	.word	0x008f00ba
 800fe38:	00320051 	.word	0x00320051
 800fe3c:	0008      	.short	0x0008
 800fe3e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fe42:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fe46:	4299      	cmp	r1, r3
 800fe48:	f000 814d 	beq.w	80100e6 <uxr_read_framed_msg+0x2e2>
 800fe4c:	18e2      	adds	r2, r4, r3
 800fe4e:	7892      	ldrb	r2, [r2, #2]
 800fe50:	2a7d      	cmp	r2, #125	; 0x7d
 800fe52:	f000 81b8 	beq.w	80101c6 <uxr_read_framed_msg+0x3c2>
 800fe56:	3301      	adds	r3, #1
 800fe58:	212a      	movs	r1, #42	; 0x2a
 800fe5a:	2a7e      	cmp	r2, #126	; 0x7e
 800fe5c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 800fe60:	fba5 c000 	umull	ip, r0, r5, r0
 800fe64:	ea4f 0090 	mov.w	r0, r0, lsr #2
 800fe68:	fb01 3310 	mls	r3, r1, r0, r3
 800fe6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fe70:	f000 8257 	beq.w	8010322 <uxr_read_framed_msg+0x51e>
 800fe74:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800fe76:	2000      	movs	r0, #0
 800fe78:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800fe7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fe7e:	7020      	strb	r0, [r4, #0]
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	4299      	cmp	r1, r3
 800fe84:	86a3      	strh	r3, [r4, #52]	; 0x34
 800fe86:	f000 8178 	beq.w	801017a <uxr_read_framed_msg+0x376>
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	b003      	add	sp, #12
 800fe8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe92:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fe96:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fe9a:	4298      	cmp	r0, r3
 800fe9c:	f000 8132 	beq.w	8010104 <uxr_read_framed_msg+0x300>
 800fea0:	18e2      	adds	r2, r4, r3
 800fea2:	7891      	ldrb	r1, [r2, #2]
 800fea4:	297d      	cmp	r1, #125	; 0x7d
 800fea6:	f000 8170 	beq.w	801018a <uxr_read_framed_msg+0x386>
 800feaa:	3301      	adds	r3, #1
 800feac:	202a      	movs	r0, #42	; 0x2a
 800feae:	297e      	cmp	r1, #126	; 0x7e
 800feb0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800feb4:	fba5 c202 	umull	ip, r2, r5, r2
 800feb8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800febc:	fb00 3312 	mls	r3, r0, r2, r3
 800fec0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fec4:	f000 821d 	beq.w	8010302 <uxr_read_framed_msg+0x4fe>
 800fec8:	2307      	movs	r3, #7
 800feca:	86a1      	strh	r1, [r4, #52]	; 0x34
 800fecc:	7023      	strb	r3, [r4, #0]
 800fece:	e7aa      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 800fed0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800fed2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800fed6:	459e      	cmp	lr, r3
 800fed8:	d827      	bhi.n	800ff2a <uxr_read_framed_msg+0x126>
 800feda:	e032      	b.n	800ff42 <uxr_read_framed_msg+0x13e>
 800fedc:	fba5 b101 	umull	fp, r1, r5, r1
 800fee0:	f89c c002 	ldrb.w	ip, [ip, #2]
 800fee4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 800fee8:	0889      	lsrs	r1, r1, #2
 800feea:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 800feee:	fb0b 0111 	mls	r1, fp, r1, r0
 800fef2:	f000 80d4 	beq.w	801009e <uxr_read_framed_msg+0x29a>
 800fef6:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800fefa:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 800fefe:	f000 80cb 	beq.w	8010098 <uxr_read_framed_msg+0x294>
 800ff02:	f806 c003 	strb.w	ip, [r6, r3]
 800ff06:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800ff08:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ff0a:	ea80 010c 	eor.w	r1, r0, ip
 800ff0e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800ff12:	3301      	adds	r3, #1
 800ff14:	b2c9      	uxtb	r1, r1
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 800ff1c:	4573      	cmp	r3, lr
 800ff1e:	8663      	strh	r3, [r4, #50]	; 0x32
 800ff20:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800ff24:	86e2      	strh	r2, [r4, #54]	; 0x36
 800ff26:	f080 811d 	bcs.w	8010164 <uxr_read_framed_msg+0x360>
 800ff2a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ff2e:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800ff32:	1c50      	adds	r0, r2, #1
 800ff34:	eb04 0c02 	add.w	ip, r4, r2
 800ff38:	4592      	cmp	sl, r2
 800ff3a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 800ff3e:	d1cd      	bne.n	800fedc <uxr_read_framed_msg+0xd8>
 800ff40:	459e      	cmp	lr, r3
 800ff42:	f040 8114 	bne.w	801016e <uxr_read_framed_msg+0x36a>
 800ff46:	2306      	movs	r3, #6
 800ff48:	7023      	strb	r3, [r4, #0]
 800ff4a:	e76c      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 800ff4c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800ff50:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ff54:	4298      	cmp	r0, r3
 800ff56:	f000 80c6 	beq.w	80100e6 <uxr_read_framed_msg+0x2e2>
 800ff5a:	18e2      	adds	r2, r4, r3
 800ff5c:	7891      	ldrb	r1, [r2, #2]
 800ff5e:	297d      	cmp	r1, #125	; 0x7d
 800ff60:	f000 8193 	beq.w	801028a <uxr_read_framed_msg+0x486>
 800ff64:	3301      	adds	r3, #1
 800ff66:	202a      	movs	r0, #42	; 0x2a
 800ff68:	297e      	cmp	r1, #126	; 0x7e
 800ff6a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800ff6e:	fba5 c202 	umull	ip, r2, r5, r2
 800ff72:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800ff76:	fb00 3312 	mls	r3, r0, r2, r3
 800ff7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ff7e:	f000 81d0 	beq.w	8010322 <uxr_read_framed_msg+0x51e>
 800ff82:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ff84:	2000      	movs	r0, #0
 800ff86:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ff8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ff8c:	8660      	strh	r0, [r4, #50]	; 0x32
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	86e0      	strh	r0, [r4, #54]	; 0x36
 800ff92:	428b      	cmp	r3, r1
 800ff94:	8623      	strh	r3, [r4, #48]	; 0x30
 800ff96:	f240 80e2 	bls.w	801015e <uxr_read_framed_msg+0x35a>
 800ff9a:	7020      	strb	r0, [r4, #0]
 800ff9c:	b003      	add	sp, #12
 800ff9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800ffa6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ffaa:	4298      	cmp	r0, r3
 800ffac:	f000 80aa 	beq.w	8010104 <uxr_read_framed_msg+0x300>
 800ffb0:	18e2      	adds	r2, r4, r3
 800ffb2:	7891      	ldrb	r1, [r2, #2]
 800ffb4:	297d      	cmp	r1, #125	; 0x7d
 800ffb6:	f000 8186 	beq.w	80102c6 <uxr_read_framed_msg+0x4c2>
 800ffba:	3301      	adds	r3, #1
 800ffbc:	202a      	movs	r0, #42	; 0x2a
 800ffbe:	297e      	cmp	r1, #126	; 0x7e
 800ffc0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 800ffc4:	fba5 c202 	umull	ip, r2, r5, r2
 800ffc8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800ffcc:	fb00 3312 	mls	r3, r0, r2, r3
 800ffd0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ffd4:	f000 8195 	beq.w	8010302 <uxr_read_framed_msg+0x4fe>
 800ffd8:	2304      	movs	r3, #4
 800ffda:	8621      	strh	r1, [r4, #48]	; 0x30
 800ffdc:	7023      	strb	r3, [r4, #0]
 800ffde:	e722      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 800ffe0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800ffe4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ffe8:	4290      	cmp	r0, r2
 800ffea:	f000 80b4 	beq.w	8010156 <uxr_read_framed_msg+0x352>
 800ffee:	18a3      	adds	r3, r4, r2
 800fff0:	7899      	ldrb	r1, [r3, #2]
 800fff2:	297d      	cmp	r1, #125	; 0x7d
 800fff4:	f000 8107 	beq.w	8010206 <uxr_read_framed_msg+0x402>
 800fff8:	3201      	adds	r2, #1
 800fffa:	232a      	movs	r3, #42	; 0x2a
 800fffc:	297e      	cmp	r1, #126	; 0x7e
 800fffe:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8010002:	fba5 c000 	umull	ip, r0, r5, r0
 8010006:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801000a:	fb03 2210 	mls	r2, r3, r0, r2
 801000e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010012:	f000 818a 	beq.w	801032a <uxr_read_framed_msg+0x526>
 8010016:	7863      	ldrb	r3, [r4, #1]
 8010018:	428b      	cmp	r3, r1
 801001a:	bf0c      	ite	eq
 801001c:	2303      	moveq	r3, #3
 801001e:	2300      	movne	r3, #0
 8010020:	7023      	strb	r3, [r4, #0]
 8010022:	e700      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 8010024:	2300      	movs	r3, #0
 8010026:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801002a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801002e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010032:	4299      	cmp	r1, r3
 8010034:	d06a      	beq.n	801010c <uxr_read_framed_msg+0x308>
 8010036:	18e2      	adds	r2, r4, r3
 8010038:	7890      	ldrb	r0, [r2, #2]
 801003a:	287d      	cmp	r0, #125	; 0x7d
 801003c:	f000 8100 	beq.w	8010240 <uxr_read_framed_msg+0x43c>
 8010040:	3301      	adds	r3, #1
 8010042:	212a      	movs	r1, #42	; 0x2a
 8010044:	287e      	cmp	r0, #126	; 0x7e
 8010046:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801004a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801004e:	fba5 c202 	umull	ip, r2, r5, r2
 8010052:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010056:	fb01 3312 	mls	r3, r1, r2, r3
 801005a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801005e:	d055      	beq.n	801010c <uxr_read_framed_msg+0x308>
 8010060:	2302      	movs	r3, #2
 8010062:	7023      	strb	r3, [r4, #0]
 8010064:	e6df      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 8010066:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801006a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801006e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010072:	1c5a      	adds	r2, r3, #1
 8010074:	459c      	cmp	ip, r3
 8010076:	eb04 0103 	add.w	r1, r4, r3
 801007a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801007e:	f43f af04 	beq.w	800fe8a <uxr_read_framed_msg+0x86>
 8010082:	fba5 0303 	umull	r0, r3, r5, r3
 8010086:	7889      	ldrb	r1, [r1, #2]
 8010088:	089b      	lsrs	r3, r3, #2
 801008a:	297e      	cmp	r1, #126	; 0x7e
 801008c:	fb0e 2313 	mls	r3, lr, r3, r2
 8010090:	b2db      	uxtb	r3, r3
 8010092:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010096:	d1ec      	bne.n	8010072 <uxr_read_framed_msg+0x26e>
 8010098:	2301      	movs	r3, #1
 801009a:	7023      	strb	r3, [r4, #0]
 801009c:	e6c3      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 801009e:	1c50      	adds	r0, r2, #1
 80100a0:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80100a4:	3202      	adds	r2, #2
 80100a6:	0841      	lsrs	r1, r0, #1
 80100a8:	fba5 c101 	umull	ip, r1, r5, r1
 80100ac:	0889      	lsrs	r1, r1, #2
 80100ae:	fb0b 0111 	mls	r1, fp, r1, r0
 80100b2:	1860      	adds	r0, r4, r1
 80100b4:	b2c9      	uxtb	r1, r1
 80100b6:	458a      	cmp	sl, r1
 80100b8:	f43f af42 	beq.w	800ff40 <uxr_read_framed_msg+0x13c>
 80100bc:	0851      	lsrs	r1, r2, #1
 80100be:	7880      	ldrb	r0, [r0, #2]
 80100c0:	fba5 a101 	umull	sl, r1, r5, r1
 80100c4:	287e      	cmp	r0, #126	; 0x7e
 80100c6:	f080 0c20 	eor.w	ip, r0, #32
 80100ca:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80100ce:	fb0b 2211 	mls	r2, fp, r1, r2
 80100d2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80100d6:	f47f af14 	bne.w	800ff02 <uxr_read_framed_msg+0xfe>
 80100da:	459e      	cmp	lr, r3
 80100dc:	f43f af33 	beq.w	800ff46 <uxr_read_framed_msg+0x142>
 80100e0:	2301      	movs	r3, #1
 80100e2:	7023      	strb	r3, [r4, #0]
 80100e4:	e69f      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 80100e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	2301      	movs	r3, #1
 80100ec:	9301      	str	r3, [sp, #4]
 80100ee:	464a      	mov	r2, r9
 80100f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100f2:	4641      	mov	r1, r8
 80100f4:	4620      	mov	r0, r4
 80100f6:	f7ff fdf1 	bl	800fcdc <uxr_framing_read_transport>
 80100fa:	2800      	cmp	r0, #0
 80100fc:	f43f aec5 	beq.w	800fe8a <uxr_read_framed_msg+0x86>
 8010100:	7823      	ldrb	r3, [r4, #0]
 8010102:	e690      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 8010104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	2302      	movs	r3, #2
 801010a:	e7ef      	b.n	80100ec <uxr_read_framed_msg+0x2e8>
 801010c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801010e:	464a      	mov	r2, r9
 8010110:	4641      	mov	r1, r8
 8010112:	4620      	mov	r0, r4
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	2304      	movs	r3, #4
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801011c:	f7ff fdde 	bl	800fcdc <uxr_framing_read_transport>
 8010120:	2800      	cmp	r0, #0
 8010122:	d1ed      	bne.n	8010100 <uxr_read_framed_msg+0x2fc>
 8010124:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010128:	2b7e      	cmp	r3, #126	; 0x7e
 801012a:	d0e9      	beq.n	8010100 <uxr_read_framed_msg+0x2fc>
 801012c:	e6ad      	b.n	800fe8a <uxr_read_framed_msg+0x86>
 801012e:	bf00      	nop
 8010130:	30c30c31 	.word	0x30c30c31
 8010134:	08013068 	.word	0x08013068
 8010138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	2305      	movs	r3, #5
 801013e:	9301      	str	r3, [sp, #4]
 8010140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010142:	f7ff fdcb 	bl	800fcdc <uxr_framing_read_transport>
 8010146:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801014a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801014e:	429a      	cmp	r2, r3
 8010150:	f43f ae9b 	beq.w	800fe8a <uxr_read_framed_msg+0x86>
 8010154:	e664      	b.n	800fe20 <uxr_read_framed_msg+0x1c>
 8010156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	2303      	movs	r3, #3
 801015c:	e7c6      	b.n	80100ec <uxr_read_framed_msg+0x2e8>
 801015e:	2305      	movs	r3, #5
 8010160:	7023      	strb	r3, [r4, #0]
 8010162:	e660      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 8010164:	f43f aeef 	beq.w	800ff46 <uxr_read_framed_msg+0x142>
 8010168:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801016c:	d094      	beq.n	8010098 <uxr_read_framed_msg+0x294>
 801016e:	ebae 0303 	sub.w	r3, lr, r3
 8010172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010174:	3302      	adds	r3, #2
 8010176:	9200      	str	r2, [sp, #0]
 8010178:	e7b8      	b.n	80100ec <uxr_read_framed_msg+0x2e8>
 801017a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801017e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010180:	7013      	strb	r3, [r2, #0]
 8010182:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8010184:	b003      	add	sp, #12
 8010186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801018a:	1c59      	adds	r1, r3, #1
 801018c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010190:	084a      	lsrs	r2, r1, #1
 8010192:	fba5 e202 	umull	lr, r2, r5, r2
 8010196:	0892      	lsrs	r2, r2, #2
 8010198:	fb0c 1212 	mls	r2, ip, r2, r1
 801019c:	b2d1      	uxtb	r1, r2
 801019e:	4288      	cmp	r0, r1
 80101a0:	d0b0      	beq.n	8010104 <uxr_read_framed_msg+0x300>
 80101a2:	3302      	adds	r3, #2
 80101a4:	4422      	add	r2, r4
 80101a6:	7891      	ldrb	r1, [r2, #2]
 80101a8:	085a      	lsrs	r2, r3, #1
 80101aa:	fba5 0202 	umull	r0, r2, r5, r2
 80101ae:	297e      	cmp	r1, #126	; 0x7e
 80101b0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80101b4:	fb0c 3312 	mls	r3, ip, r2, r3
 80101b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80101bc:	f000 80a1 	beq.w	8010302 <uxr_read_framed_msg+0x4fe>
 80101c0:	f081 0120 	eor.w	r1, r1, #32
 80101c4:	e680      	b.n	800fec8 <uxr_read_framed_msg+0xc4>
 80101c6:	f103 0c01 	add.w	ip, r3, #1
 80101ca:	202a      	movs	r0, #42	; 0x2a
 80101cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80101d0:	fba5 e202 	umull	lr, r2, r5, r2
 80101d4:	0892      	lsrs	r2, r2, #2
 80101d6:	fb00 c212 	mls	r2, r0, r2, ip
 80101da:	fa5f fc82 	uxtb.w	ip, r2
 80101de:	4561      	cmp	r1, ip
 80101e0:	d081      	beq.n	80100e6 <uxr_read_framed_msg+0x2e2>
 80101e2:	3302      	adds	r3, #2
 80101e4:	4422      	add	r2, r4
 80101e6:	0859      	lsrs	r1, r3, #1
 80101e8:	7892      	ldrb	r2, [r2, #2]
 80101ea:	fba5 c101 	umull	ip, r1, r5, r1
 80101ee:	2a7e      	cmp	r2, #126	; 0x7e
 80101f0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80101f4:	fb00 3311 	mls	r3, r0, r1, r3
 80101f8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80101fc:	f000 8091 	beq.w	8010322 <uxr_read_framed_msg+0x51e>
 8010200:	f082 0220 	eor.w	r2, r2, #32
 8010204:	e636      	b.n	800fe74 <uxr_read_framed_msg+0x70>
 8010206:	1c51      	adds	r1, r2, #1
 8010208:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801020c:	084b      	lsrs	r3, r1, #1
 801020e:	fba5 e303 	umull	lr, r3, r5, r3
 8010212:	089b      	lsrs	r3, r3, #2
 8010214:	fb0c 1313 	mls	r3, ip, r3, r1
 8010218:	b2d9      	uxtb	r1, r3
 801021a:	4288      	cmp	r0, r1
 801021c:	d09b      	beq.n	8010156 <uxr_read_framed_msg+0x352>
 801021e:	3202      	adds	r2, #2
 8010220:	4423      	add	r3, r4
 8010222:	0850      	lsrs	r0, r2, #1
 8010224:	789b      	ldrb	r3, [r3, #2]
 8010226:	fba5 1000 	umull	r1, r0, r5, r0
 801022a:	2b7e      	cmp	r3, #126	; 0x7e
 801022c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8010230:	fb0c 2210 	mls	r2, ip, r0, r2
 8010234:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010238:	d077      	beq.n	801032a <uxr_read_framed_msg+0x526>
 801023a:	f083 0120 	eor.w	r1, r3, #32
 801023e:	e6ea      	b.n	8010016 <uxr_read_framed_msg+0x212>
 8010240:	f103 0c01 	add.w	ip, r3, #1
 8010244:	202a      	movs	r0, #42	; 0x2a
 8010246:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801024a:	fba5 e202 	umull	lr, r2, r5, r2
 801024e:	0892      	lsrs	r2, r2, #2
 8010250:	fb00 c212 	mls	r2, r0, r2, ip
 8010254:	fa5f fc82 	uxtb.w	ip, r2
 8010258:	4561      	cmp	r1, ip
 801025a:	f43f af57 	beq.w	801010c <uxr_read_framed_msg+0x308>
 801025e:	3302      	adds	r3, #2
 8010260:	4422      	add	r2, r4
 8010262:	7891      	ldrb	r1, [r2, #2]
 8010264:	085a      	lsrs	r2, r3, #1
 8010266:	fba5 c202 	umull	ip, r2, r5, r2
 801026a:	297e      	cmp	r1, #126	; 0x7e
 801026c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8010270:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8010274:	fb00 3312 	mls	r3, r0, r2, r3
 8010278:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801027c:	f43f af46 	beq.w	801010c <uxr_read_framed_msg+0x308>
 8010280:	f081 0120 	eor.w	r1, r1, #32
 8010284:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8010288:	e6ea      	b.n	8010060 <uxr_read_framed_msg+0x25c>
 801028a:	1c59      	adds	r1, r3, #1
 801028c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010290:	084a      	lsrs	r2, r1, #1
 8010292:	fba5 e202 	umull	lr, r2, r5, r2
 8010296:	0892      	lsrs	r2, r2, #2
 8010298:	fb0c 1212 	mls	r2, ip, r2, r1
 801029c:	b2d1      	uxtb	r1, r2
 801029e:	4288      	cmp	r0, r1
 80102a0:	f43f af21 	beq.w	80100e6 <uxr_read_framed_msg+0x2e2>
 80102a4:	3302      	adds	r3, #2
 80102a6:	4422      	add	r2, r4
 80102a8:	7891      	ldrb	r1, [r2, #2]
 80102aa:	085a      	lsrs	r2, r3, #1
 80102ac:	fba5 0202 	umull	r0, r2, r5, r2
 80102b0:	297e      	cmp	r1, #126	; 0x7e
 80102b2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80102b6:	fb0c 3312 	mls	r3, ip, r2, r3
 80102ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80102be:	d030      	beq.n	8010322 <uxr_read_framed_msg+0x51e>
 80102c0:	f081 0120 	eor.w	r1, r1, #32
 80102c4:	e65d      	b.n	800ff82 <uxr_read_framed_msg+0x17e>
 80102c6:	1c59      	adds	r1, r3, #1
 80102c8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80102cc:	084a      	lsrs	r2, r1, #1
 80102ce:	fba5 e202 	umull	lr, r2, r5, r2
 80102d2:	0892      	lsrs	r2, r2, #2
 80102d4:	fb0c 1212 	mls	r2, ip, r2, r1
 80102d8:	b2d1      	uxtb	r1, r2
 80102da:	4288      	cmp	r0, r1
 80102dc:	f43f af12 	beq.w	8010104 <uxr_read_framed_msg+0x300>
 80102e0:	3302      	adds	r3, #2
 80102e2:	4422      	add	r2, r4
 80102e4:	7891      	ldrb	r1, [r2, #2]
 80102e6:	085a      	lsrs	r2, r3, #1
 80102e8:	fba5 0202 	umull	r0, r2, r5, r2
 80102ec:	297e      	cmp	r1, #126	; 0x7e
 80102ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80102f2:	fb0c 3312 	mls	r3, ip, r2, r3
 80102f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80102fa:	d002      	beq.n	8010302 <uxr_read_framed_msg+0x4fe>
 80102fc:	f081 0120 	eor.w	r1, r1, #32
 8010300:	e66a      	b.n	800ffd8 <uxr_read_framed_msg+0x1d4>
 8010302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010304:	9300      	str	r3, [sp, #0]
 8010306:	2302      	movs	r3, #2
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	464a      	mov	r2, r9
 801030c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801030e:	4641      	mov	r1, r8
 8010310:	4620      	mov	r0, r4
 8010312:	f7ff fce3 	bl	800fcdc <uxr_framing_read_transport>
 8010316:	2800      	cmp	r0, #0
 8010318:	f47f aef2 	bne.w	8010100 <uxr_read_framed_msg+0x2fc>
 801031c:	2301      	movs	r3, #1
 801031e:	7023      	strb	r3, [r4, #0]
 8010320:	e581      	b.n	800fe26 <uxr_read_framed_msg+0x22>
 8010322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010324:	9300      	str	r3, [sp, #0]
 8010326:	2301      	movs	r3, #1
 8010328:	e7ee      	b.n	8010308 <uxr_read_framed_msg+0x504>
 801032a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	2303      	movs	r3, #3
 8010330:	e7ea      	b.n	8010308 <uxr_read_framed_msg+0x504>
 8010332:	bf00      	nop

08010334 <rcl_get_automatic_discovery_range>:
 8010334:	b530      	push	{r4, r5, lr}
 8010336:	2300      	movs	r3, #0
 8010338:	b083      	sub	sp, #12
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	b1c0      	cbz	r0, 8010370 <rcl_get_automatic_discovery_range+0x3c>
 801033e:	4604      	mov	r4, r0
 8010340:	a901      	add	r1, sp, #4
 8010342:	4818      	ldr	r0, [pc, #96]	; (80103a4 <rcl_get_automatic_discovery_range+0x70>)
 8010344:	f7fd f92a 	bl	800d59c <rcutils_get_env>
 8010348:	b110      	cbz	r0, 8010350 <rcl_get_automatic_discovery_range+0x1c>
 801034a:	2001      	movs	r0, #1
 801034c:	b003      	add	sp, #12
 801034e:	bd30      	pop	{r4, r5, pc}
 8010350:	9d01      	ldr	r5, [sp, #4]
 8010352:	782b      	ldrb	r3, [r5, #0]
 8010354:	b13b      	cbz	r3, 8010366 <rcl_get_automatic_discovery_range+0x32>
 8010356:	4914      	ldr	r1, [pc, #80]	; (80103a8 <rcl_get_automatic_discovery_range+0x74>)
 8010358:	4628      	mov	r0, r5
 801035a:	f7ef ffc1 	bl	80002e0 <strcmp>
 801035e:	b950      	cbnz	r0, 8010376 <rcl_get_automatic_discovery_range+0x42>
 8010360:	2301      	movs	r3, #1
 8010362:	7023      	strb	r3, [r4, #0]
 8010364:	e7f2      	b.n	801034c <rcl_get_automatic_discovery_range+0x18>
 8010366:	2303      	movs	r3, #3
 8010368:	2000      	movs	r0, #0
 801036a:	7023      	strb	r3, [r4, #0]
 801036c:	b003      	add	sp, #12
 801036e:	bd30      	pop	{r4, r5, pc}
 8010370:	200b      	movs	r0, #11
 8010372:	b003      	add	sp, #12
 8010374:	bd30      	pop	{r4, r5, pc}
 8010376:	490d      	ldr	r1, [pc, #52]	; (80103ac <rcl_get_automatic_discovery_range+0x78>)
 8010378:	4628      	mov	r0, r5
 801037a:	f7ef ffb1 	bl	80002e0 <strcmp>
 801037e:	b168      	cbz	r0, 801039c <rcl_get_automatic_discovery_range+0x68>
 8010380:	490b      	ldr	r1, [pc, #44]	; (80103b0 <rcl_get_automatic_discovery_range+0x7c>)
 8010382:	4628      	mov	r0, r5
 8010384:	f7ef ffac 	bl	80002e0 <strcmp>
 8010388:	2800      	cmp	r0, #0
 801038a:	d0ec      	beq.n	8010366 <rcl_get_automatic_discovery_range+0x32>
 801038c:	4909      	ldr	r1, [pc, #36]	; (80103b4 <rcl_get_automatic_discovery_range+0x80>)
 801038e:	4628      	mov	r0, r5
 8010390:	f7ef ffa6 	bl	80002e0 <strcmp>
 8010394:	b910      	cbnz	r0, 801039c <rcl_get_automatic_discovery_range+0x68>
 8010396:	2304      	movs	r3, #4
 8010398:	7023      	strb	r3, [r4, #0]
 801039a:	e7d7      	b.n	801034c <rcl_get_automatic_discovery_range+0x18>
 801039c:	2302      	movs	r3, #2
 801039e:	2000      	movs	r0, #0
 80103a0:	7023      	strb	r3, [r4, #0]
 80103a2:	e7d3      	b.n	801034c <rcl_get_automatic_discovery_range+0x18>
 80103a4:	08013268 	.word	0x08013268
 80103a8:	08013288 	.word	0x08013288
 80103ac:	0801328c 	.word	0x0801328c
 80103b0:	08013298 	.word	0x08013298
 80103b4:	080132a0 	.word	0x080132a0

080103b8 <rcl_automatic_discovery_range_to_string>:
 80103b8:	2804      	cmp	r0, #4
 80103ba:	d803      	bhi.n	80103c4 <rcl_automatic_discovery_range_to_string+0xc>
 80103bc:	4b02      	ldr	r3, [pc, #8]	; (80103c8 <rcl_automatic_discovery_range_to_string+0x10>)
 80103be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80103c2:	4770      	bx	lr
 80103c4:	2000      	movs	r0, #0
 80103c6:	4770      	bx	lr
 80103c8:	08013390 	.word	0x08013390

080103cc <rcl_get_discovery_static_peers>:
 80103cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d0:	2300      	movs	r3, #0
 80103d2:	b08e      	sub	sp, #56	; 0x38
 80103d4:	9306      	str	r3, [sp, #24]
 80103d6:	2900      	cmp	r1, #0
 80103d8:	d04b      	beq.n	8010472 <rcl_get_discovery_static_peers+0xa6>
 80103da:	4605      	mov	r5, r0
 80103dc:	2800      	cmp	r0, #0
 80103de:	d048      	beq.n	8010472 <rcl_get_discovery_static_peers+0xa6>
 80103e0:	460c      	mov	r4, r1
 80103e2:	482c      	ldr	r0, [pc, #176]	; (8010494 <rcl_get_discovery_static_peers+0xc8>)
 80103e4:	a906      	add	r1, sp, #24
 80103e6:	f7fd f8d9 	bl	800d59c <rcutils_get_env>
 80103ea:	b118      	cbz	r0, 80103f4 <rcl_get_discovery_static_peers+0x28>
 80103ec:	2001      	movs	r0, #1
 80103ee:	b00e      	add	sp, #56	; 0x38
 80103f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f4:	9b06      	ldr	r3, [sp, #24]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d0f8      	beq.n	80103ec <rcl_get_discovery_static_peers+0x20>
 80103fa:	af07      	add	r7, sp, #28
 80103fc:	4638      	mov	r0, r7
 80103fe:	f000 fc0f 	bl	8010c20 <rcutils_get_zero_initialized_string_array>
 8010402:	f104 0308 	add.w	r3, r4, #8
 8010406:	9703      	str	r7, [sp, #12]
 8010408:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801040c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010410:	213b      	movs	r1, #59	; 0x3b
 8010412:	9806      	ldr	r0, [sp, #24]
 8010414:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010418:	f000 fb44 	bl	8010aa4 <rcutils_split>
 801041c:	2800      	cmp	r0, #0
 801041e:	d1e5      	bne.n	80103ec <rcl_get_discovery_static_peers+0x20>
 8010420:	4622      	mov	r2, r4
 8010422:	9907      	ldr	r1, [sp, #28]
 8010424:	4628      	mov	r0, r5
 8010426:	f000 fc4b 	bl	8010cc0 <rmw_discovery_options_init>
 801042a:	4604      	mov	r4, r0
 801042c:	bb78      	cbnz	r0, 801048e <rcl_get_discovery_static_peers+0xc2>
 801042e:	9e07      	ldr	r6, [sp, #28]
 8010430:	b336      	cbz	r6, 8010480 <rcl_get_discovery_static_peers+0xb4>
 8010432:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010436:	4680      	mov	r8, r0
 8010438:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801043c:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8010440:	4608      	mov	r0, r1
 8010442:	9105      	str	r1, [sp, #20]
 8010444:	f7ef ff56 	bl	80002f4 <strlen>
 8010448:	28ff      	cmp	r0, #255	; 0xff
 801044a:	9905      	ldr	r1, [sp, #20]
 801044c:	d815      	bhi.n	801047a <rcl_get_discovery_static_peers+0xae>
 801044e:	6868      	ldr	r0, [r5, #4]
 8010450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010454:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8010458:	3401      	adds	r4, #1
 801045a:	f001 f842 	bl	80114e2 <strncpy>
 801045e:	686b      	ldr	r3, [r5, #4]
 8010460:	9e07      	ldr	r6, [sp, #28]
 8010462:	444b      	add	r3, r9
 8010464:	42b4      	cmp	r4, r6
 8010466:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801046a:	d209      	bcs.n	8010480 <rcl_get_discovery_static_peers+0xb4>
 801046c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010470:	e7e2      	b.n	8010438 <rcl_get_discovery_static_peers+0x6c>
 8010472:	200b      	movs	r0, #11
 8010474:	b00e      	add	sp, #56	; 0x38
 8010476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801047a:	3401      	adds	r4, #1
 801047c:	42b4      	cmp	r4, r6
 801047e:	d3db      	bcc.n	8010438 <rcl_get_discovery_static_peers+0x6c>
 8010480:	4638      	mov	r0, r7
 8010482:	f000 fbeb 	bl	8010c5c <rcutils_string_array_fini>
 8010486:	3800      	subs	r0, #0
 8010488:	bf18      	it	ne
 801048a:	2001      	movne	r0, #1
 801048c:	e7af      	b.n	80103ee <rcl_get_discovery_static_peers+0x22>
 801048e:	f7fc f8d9 	bl	800c644 <rcl_convert_rmw_ret_to_rcl_ret>
 8010492:	e7ac      	b.n	80103ee <rcl_get_discovery_static_peers+0x22>
 8010494:	080132b0 	.word	0x080132b0

08010498 <rcl_get_default_domain_id>:
 8010498:	b530      	push	{r4, r5, lr}
 801049a:	2300      	movs	r3, #0
 801049c:	b083      	sub	sp, #12
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	b1d0      	cbz	r0, 80104d8 <rcl_get_default_domain_id+0x40>
 80104a2:	4604      	mov	r4, r0
 80104a4:	4669      	mov	r1, sp
 80104a6:	4815      	ldr	r0, [pc, #84]	; (80104fc <rcl_get_default_domain_id+0x64>)
 80104a8:	f7fd f878 	bl	800d59c <rcutils_get_env>
 80104ac:	4602      	mov	r2, r0
 80104ae:	b110      	cbz	r0, 80104b6 <rcl_get_default_domain_id+0x1e>
 80104b0:	2001      	movs	r0, #1
 80104b2:	b003      	add	sp, #12
 80104b4:	bd30      	pop	{r4, r5, pc}
 80104b6:	9b00      	ldr	r3, [sp, #0]
 80104b8:	b18b      	cbz	r3, 80104de <rcl_get_default_domain_id+0x46>
 80104ba:	7818      	ldrb	r0, [r3, #0]
 80104bc:	2800      	cmp	r0, #0
 80104be:	d0f8      	beq.n	80104b2 <rcl_get_default_domain_id+0x1a>
 80104c0:	a901      	add	r1, sp, #4
 80104c2:	4618      	mov	r0, r3
 80104c4:	9201      	str	r2, [sp, #4]
 80104c6:	f001 f8a7 	bl	8011618 <strtoul>
 80104ca:	4605      	mov	r5, r0
 80104cc:	b150      	cbz	r0, 80104e4 <rcl_get_default_domain_id+0x4c>
 80104ce:	1c43      	adds	r3, r0, #1
 80104d0:	d00d      	beq.n	80104ee <rcl_get_default_domain_id+0x56>
 80104d2:	2000      	movs	r0, #0
 80104d4:	6025      	str	r5, [r4, #0]
 80104d6:	e7ec      	b.n	80104b2 <rcl_get_default_domain_id+0x1a>
 80104d8:	200b      	movs	r0, #11
 80104da:	b003      	add	sp, #12
 80104dc:	bd30      	pop	{r4, r5, pc}
 80104de:	4618      	mov	r0, r3
 80104e0:	b003      	add	sp, #12
 80104e2:	bd30      	pop	{r4, r5, pc}
 80104e4:	9b01      	ldr	r3, [sp, #4]
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0f2      	beq.n	80104d2 <rcl_get_default_domain_id+0x3a>
 80104ec:	e7e0      	b.n	80104b0 <rcl_get_default_domain_id+0x18>
 80104ee:	f000 fd71 	bl	8010fd4 <__errno>
 80104f2:	6803      	ldr	r3, [r0, #0]
 80104f4:	2b22      	cmp	r3, #34	; 0x22
 80104f6:	d1ec      	bne.n	80104d2 <rcl_get_default_domain_id+0x3a>
 80104f8:	e7da      	b.n	80104b0 <rcl_get_default_domain_id+0x18>
 80104fa:	bf00      	nop
 80104fc:	080133a4 	.word	0x080133a4

08010500 <rcl_expand_topic_name>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	b08d      	sub	sp, #52	; 0x34
 8010506:	4698      	mov	r8, r3
 8010508:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801050a:	9207      	str	r2, [sp, #28]
 801050c:	2b00      	cmp	r3, #0
 801050e:	bf18      	it	ne
 8010510:	f1b8 0f00 	cmpne.w	r8, #0
 8010514:	bf0c      	ite	eq
 8010516:	2301      	moveq	r3, #1
 8010518:	2300      	movne	r3, #0
 801051a:	2a00      	cmp	r2, #0
 801051c:	bf08      	it	eq
 801051e:	f043 0301 	orreq.w	r3, r3, #1
 8010522:	2900      	cmp	r1, #0
 8010524:	bf08      	it	eq
 8010526:	f043 0301 	orreq.w	r3, r3, #1
 801052a:	2b00      	cmp	r3, #0
 801052c:	d13d      	bne.n	80105aa <rcl_expand_topic_name+0xaa>
 801052e:	fab0 f280 	clz	r2, r0
 8010532:	4604      	mov	r4, r0
 8010534:	0952      	lsrs	r2, r2, #5
 8010536:	2800      	cmp	r0, #0
 8010538:	d037      	beq.n	80105aa <rcl_expand_topic_name+0xaa>
 801053a:	460f      	mov	r7, r1
 801053c:	a90b      	add	r1, sp, #44	; 0x2c
 801053e:	f000 f9ed 	bl	801091c <rcl_validate_topic_name>
 8010542:	4605      	mov	r5, r0
 8010544:	bb68      	cbnz	r0, 80105a2 <rcl_expand_topic_name+0xa2>
 8010546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010548:	2b00      	cmp	r3, #0
 801054a:	d137      	bne.n	80105bc <rcl_expand_topic_name+0xbc>
 801054c:	4602      	mov	r2, r0
 801054e:	a90b      	add	r1, sp, #44	; 0x2c
 8010550:	4638      	mov	r0, r7
 8010552:	f7fd fc3b 	bl	800ddcc <rmw_validate_node_name>
 8010556:	bb68      	cbnz	r0, 80105b4 <rcl_expand_topic_name+0xb4>
 8010558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801055a:	2b00      	cmp	r3, #0
 801055c:	d133      	bne.n	80105c6 <rcl_expand_topic_name+0xc6>
 801055e:	462a      	mov	r2, r5
 8010560:	a90b      	add	r1, sp, #44	; 0x2c
 8010562:	9807      	ldr	r0, [sp, #28]
 8010564:	f7fd fc14 	bl	800dd90 <rmw_validate_namespace>
 8010568:	bb20      	cbnz	r0, 80105b4 <rcl_expand_topic_name+0xb4>
 801056a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801056c:	2d00      	cmp	r5, #0
 801056e:	f040 80a2 	bne.w	80106b6 <rcl_expand_topic_name+0x1b6>
 8010572:	217b      	movs	r1, #123	; 0x7b
 8010574:	4620      	mov	r0, r4
 8010576:	f000 ff8b 	bl	8011490 <strchr>
 801057a:	7823      	ldrb	r3, [r4, #0]
 801057c:	4681      	mov	r9, r0
 801057e:	bb20      	cbnz	r0, 80105ca <rcl_expand_topic_name+0xca>
 8010580:	2b2f      	cmp	r3, #47	; 0x2f
 8010582:	d122      	bne.n	80105ca <rcl_expand_topic_name+0xca>
 8010584:	ab19      	add	r3, sp, #100	; 0x64
 8010586:	e893 0003 	ldmia.w	r3, {r0, r1}
 801058a:	ab16      	add	r3, sp, #88	; 0x58
 801058c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010590:	4620      	mov	r0, r4
 8010592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010594:	f7fd f964 	bl	800d860 <rcutils_strdup>
 8010598:	2800      	cmp	r0, #0
 801059a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801059c:	bf08      	it	eq
 801059e:	250a      	moveq	r5, #10
 80105a0:	6018      	str	r0, [r3, #0]
 80105a2:	4628      	mov	r0, r5
 80105a4:	b00d      	add	sp, #52	; 0x34
 80105a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105aa:	250b      	movs	r5, #11
 80105ac:	4628      	mov	r0, r5
 80105ae:	b00d      	add	sp, #52	; 0x34
 80105b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b4:	f7fc f846 	bl	800c644 <rcl_convert_rmw_ret_to_rcl_ret>
 80105b8:	4605      	mov	r5, r0
 80105ba:	e7f2      	b.n	80105a2 <rcl_expand_topic_name+0xa2>
 80105bc:	2567      	movs	r5, #103	; 0x67
 80105be:	4628      	mov	r0, r5
 80105c0:	b00d      	add	sp, #52	; 0x34
 80105c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c6:	25c9      	movs	r5, #201	; 0xc9
 80105c8:	e7eb      	b.n	80105a2 <rcl_expand_topic_name+0xa2>
 80105ca:	2b7e      	cmp	r3, #126	; 0x7e
 80105cc:	d075      	beq.n	80106ba <rcl_expand_topic_name+0x1ba>
 80105ce:	f1b9 0f00 	cmp.w	r9, #0
 80105d2:	f000 80c2 	beq.w	801075a <rcl_expand_topic_name+0x25a>
 80105d6:	2300      	movs	r3, #0
 80105d8:	46a2      	mov	sl, r4
 80105da:	461e      	mov	r6, r3
 80105dc:	9508      	str	r5, [sp, #32]
 80105de:	4655      	mov	r5, sl
 80105e0:	9409      	str	r4, [sp, #36]	; 0x24
 80105e2:	46b2      	mov	sl, r6
 80105e4:	464c      	mov	r4, r9
 80105e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80105ea:	2c00      	cmp	r4, #0
 80105ec:	f000 80ae 	beq.w	801074c <rcl_expand_topic_name+0x24c>
 80105f0:	217d      	movs	r1, #125	; 0x7d
 80105f2:	4628      	mov	r0, r5
 80105f4:	f000 ff4c 	bl	8011490 <strchr>
 80105f8:	eba0 0904 	sub.w	r9, r0, r4
 80105fc:	4621      	mov	r1, r4
 80105fe:	4869      	ldr	r0, [pc, #420]	; (80107a4 <rcl_expand_topic_name+0x2a4>)
 8010600:	f109 0601 	add.w	r6, r9, #1
 8010604:	4632      	mov	r2, r6
 8010606:	f000 ff58 	bl	80114ba <strncmp>
 801060a:	2800      	cmp	r0, #0
 801060c:	d051      	beq.n	80106b2 <rcl_expand_topic_name+0x1b2>
 801060e:	4632      	mov	r2, r6
 8010610:	4621      	mov	r1, r4
 8010612:	4865      	ldr	r0, [pc, #404]	; (80107a8 <rcl_expand_topic_name+0x2a8>)
 8010614:	f000 ff51 	bl	80114ba <strncmp>
 8010618:	b128      	cbz	r0, 8010626 <rcl_expand_topic_name+0x126>
 801061a:	4632      	mov	r2, r6
 801061c:	4621      	mov	r1, r4
 801061e:	4863      	ldr	r0, [pc, #396]	; (80107ac <rcl_expand_topic_name+0x2ac>)
 8010620:	f000 ff4b 	bl	80114ba <strncmp>
 8010624:	bb38      	cbnz	r0, 8010676 <rcl_expand_topic_name+0x176>
 8010626:	46d9      	mov	r9, fp
 8010628:	ab18      	add	r3, sp, #96	; 0x60
 801062a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801062e:	ab16      	add	r3, sp, #88	; 0x58
 8010630:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010634:	4620      	mov	r0, r4
 8010636:	4631      	mov	r1, r6
 8010638:	cb0c      	ldmia	r3, {r2, r3}
 801063a:	f7fd f937 	bl	800d8ac <rcutils_strndup>
 801063e:	4604      	mov	r4, r0
 8010640:	2800      	cmp	r0, #0
 8010642:	f000 80a3 	beq.w	801078c <rcl_expand_topic_name+0x28c>
 8010646:	464a      	mov	r2, r9
 8010648:	4628      	mov	r0, r5
 801064a:	ab16      	add	r3, sp, #88	; 0x58
 801064c:	4621      	mov	r1, r4
 801064e:	f7fd f807 	bl	800d660 <rcutils_repl_str>
 8010652:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010654:	4605      	mov	r5, r0
 8010656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010658:	4620      	mov	r0, r4
 801065a:	4798      	blx	r3
 801065c:	4650      	mov	r0, sl
 801065e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010660:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010662:	4798      	blx	r3
 8010664:	2d00      	cmp	r5, #0
 8010666:	d06c      	beq.n	8010742 <rcl_expand_topic_name+0x242>
 8010668:	217b      	movs	r1, #123	; 0x7b
 801066a:	4628      	mov	r0, r5
 801066c:	f000 ff10 	bl	8011490 <strchr>
 8010670:	46aa      	mov	sl, r5
 8010672:	4604      	mov	r4, r0
 8010674:	e7b9      	b.n	80105ea <rcl_expand_topic_name+0xea>
 8010676:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801067a:	1c61      	adds	r1, r4, #1
 801067c:	4640      	mov	r0, r8
 801067e:	f7fd fa11 	bl	800daa4 <rcutils_string_map_getn>
 8010682:	4681      	mov	r9, r0
 8010684:	2800      	cmp	r0, #0
 8010686:	d1cf      	bne.n	8010628 <rcl_expand_topic_name+0x128>
 8010688:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801068a:	aa18      	add	r2, sp, #96	; 0x60
 801068c:	2569      	movs	r5, #105	; 0x69
 801068e:	6018      	str	r0, [r3, #0]
 8010690:	ab16      	add	r3, sp, #88	; 0x58
 8010692:	ca07      	ldmia	r2, {r0, r1, r2}
 8010694:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010698:	4631      	mov	r1, r6
 801069a:	4620      	mov	r0, r4
 801069c:	cb0c      	ldmia	r3, {r2, r3}
 801069e:	f7fd f905 	bl	800d8ac <rcutils_strndup>
 80106a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80106a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106a6:	4798      	blx	r3
 80106a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80106ac:	4650      	mov	r0, sl
 80106ae:	4798      	blx	r3
 80106b0:	e777      	b.n	80105a2 <rcl_expand_topic_name+0xa2>
 80106b2:	46b9      	mov	r9, r7
 80106b4:	e7b8      	b.n	8010628 <rcl_expand_topic_name+0x128>
 80106b6:	25ca      	movs	r5, #202	; 0xca
 80106b8:	e773      	b.n	80105a2 <rcl_expand_topic_name+0xa2>
 80106ba:	9e07      	ldr	r6, [sp, #28]
 80106bc:	4630      	mov	r0, r6
 80106be:	f7ef fe19 	bl	80002f4 <strlen>
 80106c2:	4a3b      	ldr	r2, [pc, #236]	; (80107b0 <rcl_expand_topic_name+0x2b0>)
 80106c4:	4b3b      	ldr	r3, [pc, #236]	; (80107b4 <rcl_expand_topic_name+0x2b4>)
 80106c6:	9603      	str	r6, [sp, #12]
 80106c8:	2801      	cmp	r0, #1
 80106ca:	bf18      	it	ne
 80106cc:	4613      	movne	r3, r2
 80106ce:	9704      	str	r7, [sp, #16]
 80106d0:	9302      	str	r3, [sp, #8]
 80106d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	1c63      	adds	r3, r4, #1
 80106d8:	9305      	str	r3, [sp, #20]
 80106da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80106de:	9301      	str	r3, [sp, #4]
 80106e0:	ab16      	add	r3, sp, #88	; 0x58
 80106e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80106e4:	f7fc ff82 	bl	800d5ec <rcutils_format_string_limit>
 80106e8:	4606      	mov	r6, r0
 80106ea:	b350      	cbz	r0, 8010742 <rcl_expand_topic_name+0x242>
 80106ec:	f1b9 0f00 	cmp.w	r9, #0
 80106f0:	d005      	beq.n	80106fe <rcl_expand_topic_name+0x1fe>
 80106f2:	217b      	movs	r1, #123	; 0x7b
 80106f4:	46b2      	mov	sl, r6
 80106f6:	f000 fecb 	bl	8011490 <strchr>
 80106fa:	4681      	mov	r9, r0
 80106fc:	e76e      	b.n	80105dc <rcl_expand_topic_name+0xdc>
 80106fe:	7833      	ldrb	r3, [r6, #0]
 8010700:	2b2f      	cmp	r3, #47	; 0x2f
 8010702:	d01b      	beq.n	801073c <rcl_expand_topic_name+0x23c>
 8010704:	9c07      	ldr	r4, [sp, #28]
 8010706:	4620      	mov	r0, r4
 8010708:	f7ef fdf4 	bl	80002f4 <strlen>
 801070c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010710:	4a29      	ldr	r2, [pc, #164]	; (80107b8 <rcl_expand_topic_name+0x2b8>)
 8010712:	9301      	str	r3, [sp, #4]
 8010714:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010716:	9604      	str	r6, [sp, #16]
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	4b28      	ldr	r3, [pc, #160]	; (80107bc <rcl_expand_topic_name+0x2bc>)
 801071c:	9403      	str	r4, [sp, #12]
 801071e:	2801      	cmp	r0, #1
 8010720:	bf18      	it	ne
 8010722:	4613      	movne	r3, r2
 8010724:	9302      	str	r3, [sp, #8]
 8010726:	ab16      	add	r3, sp, #88	; 0x58
 8010728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801072a:	f7fc ff5f 	bl	800d5ec <rcutils_format_string_limit>
 801072e:	4603      	mov	r3, r0
 8010730:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010732:	4630      	mov	r0, r6
 8010734:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010736:	461e      	mov	r6, r3
 8010738:	4790      	blx	r2
 801073a:	b116      	cbz	r6, 8010742 <rcl_expand_topic_name+0x242>
 801073c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801073e:	601e      	str	r6, [r3, #0]
 8010740:	e72f      	b.n	80105a2 <rcl_expand_topic_name+0xa2>
 8010742:	2300      	movs	r3, #0
 8010744:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010746:	250a      	movs	r5, #10
 8010748:	6013      	str	r3, [r2, #0]
 801074a:	e72a      	b.n	80105a2 <rcl_expand_topic_name+0xa2>
 801074c:	4653      	mov	r3, sl
 801074e:	4656      	mov	r6, sl
 8010750:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d1d2      	bne.n	80106fe <rcl_expand_topic_name+0x1fe>
 8010758:	7823      	ldrb	r3, [r4, #0]
 801075a:	2b2f      	cmp	r3, #47	; 0x2f
 801075c:	d01e      	beq.n	801079c <rcl_expand_topic_name+0x29c>
 801075e:	9e07      	ldr	r6, [sp, #28]
 8010760:	4630      	mov	r0, r6
 8010762:	f7ef fdc7 	bl	80002f4 <strlen>
 8010766:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801076c:	9603      	str	r6, [sp, #12]
 801076e:	9404      	str	r4, [sp, #16]
 8010770:	e9cd 2300 	strd	r2, r3, [sp]
 8010774:	4a10      	ldr	r2, [pc, #64]	; (80107b8 <rcl_expand_topic_name+0x2b8>)
 8010776:	4b11      	ldr	r3, [pc, #68]	; (80107bc <rcl_expand_topic_name+0x2bc>)
 8010778:	2801      	cmp	r0, #1
 801077a:	bf18      	it	ne
 801077c:	4613      	movne	r3, r2
 801077e:	9302      	str	r3, [sp, #8]
 8010780:	ab16      	add	r3, sp, #88	; 0x58
 8010782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010784:	f7fc ff32 	bl	800d5ec <rcutils_format_string_limit>
 8010788:	4606      	mov	r6, r0
 801078a:	e7d6      	b.n	801073a <rcl_expand_topic_name+0x23a>
 801078c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8010790:	4650      	mov	r0, sl
 8010792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010794:	6014      	str	r4, [r2, #0]
 8010796:	250a      	movs	r5, #10
 8010798:	4798      	blx	r3
 801079a:	e702      	b.n	80105a2 <rcl_expand_topic_name+0xa2>
 801079c:	2300      	movs	r3, #0
 801079e:	461e      	mov	r6, r3
 80107a0:	e7cc      	b.n	801073c <rcl_expand_topic_name+0x23c>
 80107a2:	bf00      	nop
 80107a4:	080133bc 	.word	0x080133bc
 80107a8:	080133c4 	.word	0x080133c4
 80107ac:	080133cc 	.word	0x080133cc
 80107b0:	080133b4 	.word	0x080133b4
 80107b4:	080129f0 	.word	0x080129f0
 80107b8:	08012b84 	.word	0x08012b84
 80107bc:	08012a00 	.word	0x08012a00

080107c0 <rcl_get_default_topic_name_substitutions>:
 80107c0:	2800      	cmp	r0, #0
 80107c2:	bf0c      	ite	eq
 80107c4:	200b      	moveq	r0, #11
 80107c6:	2000      	movne	r0, #0
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop

080107cc <rcl_get_zero_initialized_guard_condition>:
 80107cc:	4a03      	ldr	r2, [pc, #12]	; (80107dc <rcl_get_zero_initialized_guard_condition+0x10>)
 80107ce:	4603      	mov	r3, r0
 80107d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80107d8:	4618      	mov	r0, r3
 80107da:	4770      	bx	lr
 80107dc:	080133d8 	.word	0x080133d8

080107e0 <rcl_guard_condition_init_from_rmw>:
 80107e0:	b082      	sub	sp, #8
 80107e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107e6:	b086      	sub	sp, #24
 80107e8:	4604      	mov	r4, r0
 80107ea:	460e      	mov	r6, r1
 80107ec:	4615      	mov	r5, r2
 80107ee:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80107f2:	f10d 0e04 	add.w	lr, sp, #4
 80107f6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80107fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010802:	f8dc 3000 	ldr.w	r3, [ip]
 8010806:	a801      	add	r0, sp, #4
 8010808:	f8ce 3000 	str.w	r3, [lr]
 801080c:	f7f7 fcfc 	bl	8008208 <rcutils_allocator_is_valid>
 8010810:	f080 0301 	eor.w	r3, r0, #1
 8010814:	b2db      	uxtb	r3, r3
 8010816:	bb3b      	cbnz	r3, 8010868 <rcl_guard_condition_init_from_rmw+0x88>
 8010818:	b334      	cbz	r4, 8010868 <rcl_guard_condition_init_from_rmw+0x88>
 801081a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801081e:	f1b8 0f00 	cmp.w	r8, #0
 8010822:	d11a      	bne.n	801085a <rcl_guard_condition_init_from_rmw+0x7a>
 8010824:	b305      	cbz	r5, 8010868 <rcl_guard_condition_init_from_rmw+0x88>
 8010826:	4628      	mov	r0, r5
 8010828:	f7fb ff2a 	bl	800c680 <rcl_context_is_valid>
 801082c:	b1f0      	cbz	r0, 801086c <rcl_guard_condition_init_from_rmw+0x8c>
 801082e:	9b01      	ldr	r3, [sp, #4]
 8010830:	201c      	movs	r0, #28
 8010832:	9905      	ldr	r1, [sp, #20]
 8010834:	4798      	blx	r3
 8010836:	4607      	mov	r7, r0
 8010838:	6060      	str	r0, [r4, #4]
 801083a:	b320      	cbz	r0, 8010886 <rcl_guard_condition_init_from_rmw+0xa6>
 801083c:	b1c6      	cbz	r6, 8010870 <rcl_guard_condition_init_from_rmw+0x90>
 801083e:	6006      	str	r6, [r0, #0]
 8010840:	f880 8004 	strb.w	r8, [r0, #4]
 8010844:	ac01      	add	r4, sp, #4
 8010846:	f107 0c08 	add.w	ip, r7, #8
 801084a:	2500      	movs	r5, #0
 801084c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801084e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010852:	6823      	ldr	r3, [r4, #0]
 8010854:	f8cc 3000 	str.w	r3, [ip]
 8010858:	e000      	b.n	801085c <rcl_guard_condition_init_from_rmw+0x7c>
 801085a:	2564      	movs	r5, #100	; 0x64
 801085c:	4628      	mov	r0, r5
 801085e:	b006      	add	sp, #24
 8010860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010864:	b002      	add	sp, #8
 8010866:	4770      	bx	lr
 8010868:	250b      	movs	r5, #11
 801086a:	e7f7      	b.n	801085c <rcl_guard_condition_init_from_rmw+0x7c>
 801086c:	2565      	movs	r5, #101	; 0x65
 801086e:	e7f5      	b.n	801085c <rcl_guard_condition_init_from_rmw+0x7c>
 8010870:	6828      	ldr	r0, [r5, #0]
 8010872:	3028      	adds	r0, #40	; 0x28
 8010874:	f000 fb7c 	bl	8010f70 <rmw_create_guard_condition>
 8010878:	6038      	str	r0, [r7, #0]
 801087a:	6867      	ldr	r7, [r4, #4]
 801087c:	683e      	ldr	r6, [r7, #0]
 801087e:	b126      	cbz	r6, 801088a <rcl_guard_condition_init_from_rmw+0xaa>
 8010880:	2301      	movs	r3, #1
 8010882:	713b      	strb	r3, [r7, #4]
 8010884:	e7de      	b.n	8010844 <rcl_guard_condition_init_from_rmw+0x64>
 8010886:	250a      	movs	r5, #10
 8010888:	e7e8      	b.n	801085c <rcl_guard_condition_init_from_rmw+0x7c>
 801088a:	9b02      	ldr	r3, [sp, #8]
 801088c:	4638      	mov	r0, r7
 801088e:	9905      	ldr	r1, [sp, #20]
 8010890:	2501      	movs	r5, #1
 8010892:	4798      	blx	r3
 8010894:	6066      	str	r6, [r4, #4]
 8010896:	e7e1      	b.n	801085c <rcl_guard_condition_init_from_rmw+0x7c>

08010898 <rcl_guard_condition_fini>:
 8010898:	b570      	push	{r4, r5, r6, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	b1f0      	cbz	r0, 80108dc <rcl_guard_condition_fini+0x44>
 801089e:	6843      	ldr	r3, [r0, #4]
 80108a0:	4604      	mov	r4, r0
 80108a2:	b163      	cbz	r3, 80108be <rcl_guard_condition_fini+0x26>
 80108a4:	6818      	ldr	r0, [r3, #0]
 80108a6:	68de      	ldr	r6, [r3, #12]
 80108a8:	6999      	ldr	r1, [r3, #24]
 80108aa:	b160      	cbz	r0, 80108c6 <rcl_guard_condition_fini+0x2e>
 80108ac:	791d      	ldrb	r5, [r3, #4]
 80108ae:	b965      	cbnz	r5, 80108ca <rcl_guard_condition_fini+0x32>
 80108b0:	4618      	mov	r0, r3
 80108b2:	47b0      	blx	r6
 80108b4:	2300      	movs	r3, #0
 80108b6:	4628      	mov	r0, r5
 80108b8:	6063      	str	r3, [r4, #4]
 80108ba:	b002      	add	sp, #8
 80108bc:	bd70      	pop	{r4, r5, r6, pc}
 80108be:	461d      	mov	r5, r3
 80108c0:	4628      	mov	r0, r5
 80108c2:	b002      	add	sp, #8
 80108c4:	bd70      	pop	{r4, r5, r6, pc}
 80108c6:	4605      	mov	r5, r0
 80108c8:	e7f2      	b.n	80108b0 <rcl_guard_condition_fini+0x18>
 80108ca:	9101      	str	r1, [sp, #4]
 80108cc:	f000 fb66 	bl	8010f9c <rmw_destroy_guard_condition>
 80108d0:	1e05      	subs	r5, r0, #0
 80108d2:	6863      	ldr	r3, [r4, #4]
 80108d4:	9901      	ldr	r1, [sp, #4]
 80108d6:	bf18      	it	ne
 80108d8:	2501      	movne	r5, #1
 80108da:	e7e9      	b.n	80108b0 <rcl_guard_condition_fini+0x18>
 80108dc:	250b      	movs	r5, #11
 80108de:	4628      	mov	r0, r5
 80108e0:	b002      	add	sp, #8
 80108e2:	bd70      	pop	{r4, r5, r6, pc}

080108e4 <rcl_guard_condition_get_default_options>:
 80108e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e6:	b087      	sub	sp, #28
 80108e8:	4606      	mov	r6, r0
 80108ea:	4c0b      	ldr	r4, [pc, #44]	; (8010918 <rcl_guard_condition_get_default_options+0x34>)
 80108ec:	4668      	mov	r0, sp
 80108ee:	f7f7 fc7d 	bl	80081ec <rcutils_get_default_allocator>
 80108f2:	46ee      	mov	lr, sp
 80108f4:	46a4      	mov	ip, r4
 80108f6:	4625      	mov	r5, r4
 80108f8:	4634      	mov	r4, r6
 80108fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80108fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010904:	f8de 7000 	ldr.w	r7, [lr]
 8010908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801090a:	4630      	mov	r0, r6
 801090c:	f8cc 7000 	str.w	r7, [ip]
 8010910:	6027      	str	r7, [r4, #0]
 8010912:	b007      	add	sp, #28
 8010914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010916:	bf00      	nop
 8010918:	2000dc64 	.word	0x2000dc64

0801091c <rcl_validate_topic_name>:
 801091c:	2800      	cmp	r0, #0
 801091e:	f000 8089 	beq.w	8010a34 <rcl_validate_topic_name+0x118>
 8010922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010926:	460e      	mov	r6, r1
 8010928:	2900      	cmp	r1, #0
 801092a:	f000 8085 	beq.w	8010a38 <rcl_validate_topic_name+0x11c>
 801092e:	4604      	mov	r4, r0
 8010930:	4617      	mov	r7, r2
 8010932:	f7ef fcdf 	bl	80002f4 <strlen>
 8010936:	b1b0      	cbz	r0, 8010966 <rcl_validate_topic_name+0x4a>
 8010938:	f894 e000 	ldrb.w	lr, [r4]
 801093c:	f8df c160 	ldr.w	ip, [pc, #352]	; 8010aa0 <rcl_validate_topic_name+0x184>
 8010940:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8010944:	f013 0304 	ands.w	r3, r3, #4
 8010948:	d139      	bne.n	80109be <rcl_validate_topic_name+0xa2>
 801094a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801094e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8010952:	2a2f      	cmp	r2, #47	; 0x2f
 8010954:	d10f      	bne.n	8010976 <rcl_validate_topic_name+0x5a>
 8010956:	2202      	movs	r2, #2
 8010958:	6032      	str	r2, [r6, #0]
 801095a:	b3a7      	cbz	r7, 80109c6 <rcl_validate_topic_name+0xaa>
 801095c:	4618      	mov	r0, r3
 801095e:	f8c7 8000 	str.w	r8, [r7]
 8010962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010966:	2301      	movs	r3, #1
 8010968:	6033      	str	r3, [r6, #0]
 801096a:	b367      	cbz	r7, 80109c6 <rcl_validate_topic_name+0xaa>
 801096c:	2300      	movs	r3, #0
 801096e:	4618      	mov	r0, r3
 8010970:	603b      	str	r3, [r7, #0]
 8010972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010976:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801097a:	461d      	mov	r5, r3
 801097c:	4619      	mov	r1, r3
 801097e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8010982:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8010986:	f1b9 0f09 	cmp.w	r9, #9
 801098a:	d91f      	bls.n	80109cc <rcl_validate_topic_name+0xb0>
 801098c:	f022 0920 	bic.w	r9, r2, #32
 8010990:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8010994:	f1b9 0f19 	cmp.w	r9, #25
 8010998:	d918      	bls.n	80109cc <rcl_validate_topic_name+0xb0>
 801099a:	2a5f      	cmp	r2, #95	; 0x5f
 801099c:	d024      	beq.n	80109e8 <rcl_validate_topic_name+0xcc>
 801099e:	2a2f      	cmp	r2, #47	; 0x2f
 80109a0:	d058      	beq.n	8010a54 <rcl_validate_topic_name+0x138>
 80109a2:	2a7e      	cmp	r2, #126	; 0x7e
 80109a4:	d04a      	beq.n	8010a3c <rcl_validate_topic_name+0x120>
 80109a6:	2a7b      	cmp	r2, #123	; 0x7b
 80109a8:	d05b      	beq.n	8010a62 <rcl_validate_topic_name+0x146>
 80109aa:	2a7d      	cmp	r2, #125	; 0x7d
 80109ac:	d169      	bne.n	8010a82 <rcl_validate_topic_name+0x166>
 80109ae:	2d00      	cmp	r5, #0
 80109b0:	d15c      	bne.n	8010a6c <rcl_validate_topic_name+0x150>
 80109b2:	2305      	movs	r3, #5
 80109b4:	6033      	str	r3, [r6, #0]
 80109b6:	b137      	cbz	r7, 80109c6 <rcl_validate_topic_name+0xaa>
 80109b8:	2000      	movs	r0, #0
 80109ba:	6039      	str	r1, [r7, #0]
 80109bc:	e7d9      	b.n	8010972 <rcl_validate_topic_name+0x56>
 80109be:	2304      	movs	r3, #4
 80109c0:	6033      	str	r3, [r6, #0]
 80109c2:	2f00      	cmp	r7, #0
 80109c4:	d1d2      	bne.n	801096c <rcl_validate_topic_name+0x50>
 80109c6:	2000      	movs	r0, #0
 80109c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109cc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80109d0:	0752      	lsls	r2, r2, #29
 80109d2:	d509      	bpl.n	80109e8 <rcl_validate_topic_name+0xcc>
 80109d4:	2900      	cmp	r1, #0
 80109d6:	bf0c      	ite	eq
 80109d8:	2200      	moveq	r2, #0
 80109da:	f005 0201 	andne.w	r2, r5, #1
 80109de:	b11a      	cbz	r2, 80109e8 <rcl_validate_topic_name+0xcc>
 80109e0:	1e4d      	subs	r5, r1, #1
 80109e2:	429d      	cmp	r5, r3
 80109e4:	d031      	beq.n	8010a4a <rcl_validate_topic_name+0x12e>
 80109e6:	4615      	mov	r5, r2
 80109e8:	3101      	adds	r1, #1
 80109ea:	4288      	cmp	r0, r1
 80109ec:	d1c7      	bne.n	801097e <rcl_validate_topic_name+0x62>
 80109ee:	2d00      	cmp	r5, #0
 80109f0:	d142      	bne.n	8010a78 <rcl_validate_topic_name+0x15c>
 80109f2:	4628      	mov	r0, r5
 80109f4:	2301      	movs	r3, #1
 80109f6:	e00c      	b.n	8010a12 <rcl_validate_topic_name+0xf6>
 80109f8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80109fc:	d101      	bne.n	8010a02 <rcl_validate_topic_name+0xe6>
 80109fe:	2801      	cmp	r0, #1
 8010a00:	d047      	beq.n	8010a92 <rcl_validate_topic_name+0x176>
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	428b      	cmp	r3, r1
 8010a06:	f100 0001 	add.w	r0, r0, #1
 8010a0a:	f104 0401 	add.w	r4, r4, #1
 8010a0e:	4613      	mov	r3, r2
 8010a10:	d22e      	bcs.n	8010a70 <rcl_validate_topic_name+0x154>
 8010a12:	4580      	cmp	r8, r0
 8010a14:	d0f5      	beq.n	8010a02 <rcl_validate_topic_name+0xe6>
 8010a16:	7822      	ldrb	r2, [r4, #0]
 8010a18:	2a2f      	cmp	r2, #47	; 0x2f
 8010a1a:	d1ed      	bne.n	80109f8 <rcl_validate_topic_name+0xdc>
 8010a1c:	7862      	ldrb	r2, [r4, #1]
 8010a1e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010a22:	0752      	lsls	r2, r2, #29
 8010a24:	d5ed      	bpl.n	8010a02 <rcl_validate_topic_name+0xe6>
 8010a26:	2204      	movs	r2, #4
 8010a28:	6032      	str	r2, [r6, #0]
 8010a2a:	2f00      	cmp	r7, #0
 8010a2c:	d0cb      	beq.n	80109c6 <rcl_validate_topic_name+0xaa>
 8010a2e:	2000      	movs	r0, #0
 8010a30:	603b      	str	r3, [r7, #0]
 8010a32:	e79e      	b.n	8010972 <rcl_validate_topic_name+0x56>
 8010a34:	200b      	movs	r0, #11
 8010a36:	4770      	bx	lr
 8010a38:	200b      	movs	r0, #11
 8010a3a:	e79a      	b.n	8010972 <rcl_validate_topic_name+0x56>
 8010a3c:	2900      	cmp	r1, #0
 8010a3e:	d0d3      	beq.n	80109e8 <rcl_validate_topic_name+0xcc>
 8010a40:	2306      	movs	r3, #6
 8010a42:	6033      	str	r3, [r6, #0]
 8010a44:	2f00      	cmp	r7, #0
 8010a46:	d1b7      	bne.n	80109b8 <rcl_validate_topic_name+0x9c>
 8010a48:	e7bd      	b.n	80109c6 <rcl_validate_topic_name+0xaa>
 8010a4a:	2309      	movs	r3, #9
 8010a4c:	6033      	str	r3, [r6, #0]
 8010a4e:	2f00      	cmp	r7, #0
 8010a50:	d1b2      	bne.n	80109b8 <rcl_validate_topic_name+0x9c>
 8010a52:	e7b8      	b.n	80109c6 <rcl_validate_topic_name+0xaa>
 8010a54:	2d00      	cmp	r5, #0
 8010a56:	d0c7      	beq.n	80109e8 <rcl_validate_topic_name+0xcc>
 8010a58:	2308      	movs	r3, #8
 8010a5a:	6033      	str	r3, [r6, #0]
 8010a5c:	2f00      	cmp	r7, #0
 8010a5e:	d1ab      	bne.n	80109b8 <rcl_validate_topic_name+0x9c>
 8010a60:	e7b1      	b.n	80109c6 <rcl_validate_topic_name+0xaa>
 8010a62:	2d00      	cmp	r5, #0
 8010a64:	d1f8      	bne.n	8010a58 <rcl_validate_topic_name+0x13c>
 8010a66:	460b      	mov	r3, r1
 8010a68:	2501      	movs	r5, #1
 8010a6a:	e7bd      	b.n	80109e8 <rcl_validate_topic_name+0xcc>
 8010a6c:	2500      	movs	r5, #0
 8010a6e:	e7bb      	b.n	80109e8 <rcl_validate_topic_name+0xcc>
 8010a70:	2300      	movs	r3, #0
 8010a72:	4618      	mov	r0, r3
 8010a74:	6033      	str	r3, [r6, #0]
 8010a76:	e77c      	b.n	8010972 <rcl_validate_topic_name+0x56>
 8010a78:	2205      	movs	r2, #5
 8010a7a:	6032      	str	r2, [r6, #0]
 8010a7c:	2f00      	cmp	r7, #0
 8010a7e:	d1d6      	bne.n	8010a2e <rcl_validate_topic_name+0x112>
 8010a80:	e7a1      	b.n	80109c6 <rcl_validate_topic_name+0xaa>
 8010a82:	2d00      	cmp	r5, #0
 8010a84:	bf14      	ite	ne
 8010a86:	2308      	movne	r3, #8
 8010a88:	2303      	moveq	r3, #3
 8010a8a:	6033      	str	r3, [r6, #0]
 8010a8c:	2f00      	cmp	r7, #0
 8010a8e:	d193      	bne.n	80109b8 <rcl_validate_topic_name+0x9c>
 8010a90:	e799      	b.n	80109c6 <rcl_validate_topic_name+0xaa>
 8010a92:	2307      	movs	r3, #7
 8010a94:	6033      	str	r3, [r6, #0]
 8010a96:	2f00      	cmp	r7, #0
 8010a98:	d095      	beq.n	80109c6 <rcl_validate_topic_name+0xaa>
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e7c7      	b.n	8010a2e <rcl_validate_topic_name+0x112>
 8010a9e:	bf00      	nop
 8010aa0:	080133e1 	.word	0x080133e1

08010aa4 <rcutils_split>:
 8010aa4:	b082      	sub	sp, #8
 8010aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aaa:	b08d      	sub	sp, #52	; 0x34
 8010aac:	ac16      	add	r4, sp, #88	; 0x58
 8010aae:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8010ab0:	e884 000c 	stmia.w	r4, {r2, r3}
 8010ab4:	2f00      	cmp	r7, #0
 8010ab6:	f000 80a8 	beq.w	8010c0a <rcutils_split+0x166>
 8010aba:	4605      	mov	r5, r0
 8010abc:	2800      	cmp	r0, #0
 8010abe:	d07e      	beq.n	8010bbe <rcutils_split+0x11a>
 8010ac0:	7803      	ldrb	r3, [r0, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d07b      	beq.n	8010bbe <rcutils_split+0x11a>
 8010ac6:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8010aca:	460e      	mov	r6, r1
 8010acc:	9203      	str	r2, [sp, #12]
 8010ace:	f107 0408 	add.w	r4, r7, #8
 8010ad2:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8010ad6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010adc:	4628      	mov	r0, r5
 8010ade:	f8c4 b000 	str.w	fp, [r4]
 8010ae2:	f7ef fc07 	bl	80002f4 <strlen>
 8010ae6:	782c      	ldrb	r4, [r5, #0]
 8010ae8:	182b      	adds	r3, r5, r0
 8010aea:	1ba4      	subs	r4, r4, r6
 8010aec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010af0:	fab4 f484 	clz	r4, r4
 8010af4:	42b3      	cmp	r3, r6
 8010af6:	bf14      	ite	ne
 8010af8:	4680      	movne	r8, r0
 8010afa:	f1a0 0801 	subeq.w	r8, r0, #1
 8010afe:	2001      	movs	r0, #1
 8010b00:	0964      	lsrs	r4, r4, #5
 8010b02:	6038      	str	r0, [r7, #0]
 8010b04:	4544      	cmp	r4, r8
 8010b06:	d26b      	bcs.n	8010be0 <rcutils_split+0x13c>
 8010b08:	192b      	adds	r3, r5, r4
 8010b0a:	eb05 0108 	add.w	r1, r5, r8
 8010b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b12:	42b2      	cmp	r2, r6
 8010b14:	d101      	bne.n	8010b1a <rcutils_split+0x76>
 8010b16:	3001      	adds	r0, #1
 8010b18:	6038      	str	r0, [r7, #0]
 8010b1a:	4299      	cmp	r1, r3
 8010b1c:	d1f7      	bne.n	8010b0e <rcutils_split+0x6a>
 8010b1e:	9b03      	ldr	r3, [sp, #12]
 8010b20:	0080      	lsls	r0, r0, #2
 8010b22:	4659      	mov	r1, fp
 8010b24:	4798      	blx	r3
 8010b26:	4603      	mov	r3, r0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d05f      	beq.n	8010bee <rcutils_split+0x14a>
 8010b2e:	f04f 0a00 	mov.w	sl, #0
 8010b32:	46a1      	mov	r9, r4
 8010b34:	e002      	b.n	8010b3c <rcutils_split+0x98>
 8010b36:	3401      	adds	r4, #1
 8010b38:	45a0      	cmp	r8, r4
 8010b3a:	d922      	bls.n	8010b82 <rcutils_split+0xde>
 8010b3c:	5d2a      	ldrb	r2, [r5, r4]
 8010b3e:	42b2      	cmp	r2, r6
 8010b40:	d1f9      	bne.n	8010b36 <rcutils_split+0x92>
 8010b42:	45a1      	cmp	r9, r4
 8010b44:	eba4 0209 	sub.w	r2, r4, r9
 8010b48:	d032      	beq.n	8010bb0 <rcutils_split+0x10c>
 8010b4a:	4659      	mov	r1, fp
 8010b4c:	1c90      	adds	r0, r2, #2
 8010b4e:	9302      	str	r3, [sp, #8]
 8010b50:	9b03      	ldr	r3, [sp, #12]
 8010b52:	9201      	str	r2, [sp, #4]
 8010b54:	4798      	blx	r3
 8010b56:	9a01      	ldr	r2, [sp, #4]
 8010b58:	9b02      	ldr	r3, [sp, #8]
 8010b5a:	1c51      	adds	r1, r2, #1
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8010b62:	eb05 0309 	add.w	r3, r5, r9
 8010b66:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	d04f      	beq.n	8010c0e <rcutils_split+0x16a>
 8010b6e:	4a2b      	ldr	r2, [pc, #172]	; (8010c1c <rcutils_split+0x178>)
 8010b70:	f10a 0a01 	add.w	sl, sl, #1
 8010b74:	f000 fc58 	bl	8011428 <sniprintf>
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	3401      	adds	r4, #1
 8010b7c:	45a0      	cmp	r8, r4
 8010b7e:	46a1      	mov	r9, r4
 8010b80:	d8dc      	bhi.n	8010b3c <rcutils_split+0x98>
 8010b82:	45a1      	cmp	r9, r4
 8010b84:	d039      	beq.n	8010bfa <rcutils_split+0x156>
 8010b86:	eba4 0409 	sub.w	r4, r4, r9
 8010b8a:	4659      	mov	r1, fp
 8010b8c:	9301      	str	r3, [sp, #4]
 8010b8e:	1ca0      	adds	r0, r4, #2
 8010b90:	9b03      	ldr	r3, [sp, #12]
 8010b92:	4798      	blx	r3
 8010b94:	9b01      	ldr	r3, [sp, #4]
 8010b96:	4a21      	ldr	r2, [pc, #132]	; (8010c1c <rcutils_split+0x178>)
 8010b98:	1c61      	adds	r1, r4, #1
 8010b9a:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8010b9e:	eb05 0309 	add.w	r3, r5, r9
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	2500      	movs	r5, #0
 8010ba6:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 8010baa:	f000 fc3d 	bl	8011428 <sniprintf>
 8010bae:	e011      	b.n	8010bd4 <rcutils_split+0x130>
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	3a01      	subs	r2, #1
 8010bb6:	603a      	str	r2, [r7, #0]
 8010bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010bbc:	e7dd      	b.n	8010b7a <rcutils_split+0xd6>
 8010bbe:	ac04      	add	r4, sp, #16
 8010bc0:	a804      	add	r0, sp, #16
 8010bc2:	f000 f82d 	bl	8010c20 <rcutils_get_zero_initialized_string_array>
 8010bc6:	2500      	movs	r5, #0
 8010bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010bcc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010bd0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	b00d      	add	sp, #52	; 0x34
 8010bd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	b002      	add	sp, #8
 8010bde:	4770      	bx	lr
 8010be0:	9b03      	ldr	r3, [sp, #12]
 8010be2:	4659      	mov	r1, fp
 8010be4:	2004      	movs	r0, #4
 8010be6:	4798      	blx	r3
 8010be8:	4603      	mov	r3, r0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	b928      	cbnz	r0, 8010bfa <rcutils_split+0x156>
 8010bee:	4638      	mov	r0, r7
 8010bf0:	f000 f834 	bl	8010c5c <rcutils_string_array_fini>
 8010bf4:	b970      	cbnz	r0, 8010c14 <rcutils_split+0x170>
 8010bf6:	2502      	movs	r5, #2
 8010bf8:	e7ec      	b.n	8010bd4 <rcutils_split+0x130>
 8010bfa:	683a      	ldr	r2, [r7, #0]
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	3a01      	subs	r2, #1
 8010c00:	460d      	mov	r5, r1
 8010c02:	603a      	str	r2, [r7, #0]
 8010c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010c08:	e7e4      	b.n	8010bd4 <rcutils_split+0x130>
 8010c0a:	250b      	movs	r5, #11
 8010c0c:	e7e2      	b.n	8010bd4 <rcutils_split+0x130>
 8010c0e:	f8c7 a000 	str.w	sl, [r7]
 8010c12:	e7ec      	b.n	8010bee <rcutils_split+0x14a>
 8010c14:	2502      	movs	r5, #2
 8010c16:	f7f7 fb1b 	bl	8008250 <rcutils_reset_error>
 8010c1a:	e7db      	b.n	8010bd4 <rcutils_split+0x130>
 8010c1c:	080129f4 	.word	0x080129f4

08010c20 <rcutils_get_zero_initialized_string_array>:
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	b086      	sub	sp, #24
 8010c24:	4606      	mov	r6, r0
 8010c26:	4c0c      	ldr	r4, [pc, #48]	; (8010c58 <rcutils_get_zero_initialized_string_array+0x38>)
 8010c28:	4668      	mov	r0, sp
 8010c2a:	f7f7 fab3 	bl	8008194 <rcutils_get_zero_initialized_allocator>
 8010c2e:	46ee      	mov	lr, sp
 8010c30:	f104 0508 	add.w	r5, r4, #8
 8010c34:	46a4      	mov	ip, r4
 8010c36:	4634      	mov	r4, r6
 8010c38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c3e:	f8de 3000 	ldr.w	r3, [lr]
 8010c42:	602b      	str	r3, [r5, #0]
 8010c44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c4a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010c4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010c52:	4630      	mov	r0, r6
 8010c54:	b006      	add	sp, #24
 8010c56:	bd70      	pop	{r4, r5, r6, pc}
 8010c58:	2000dc78 	.word	0x2000dc78

08010c5c <rcutils_string_array_fini>:
 8010c5c:	b328      	cbz	r0, 8010caa <rcutils_string_array_fini+0x4e>
 8010c5e:	b570      	push	{r4, r5, r6, lr}
 8010c60:	4604      	mov	r4, r0
 8010c62:	6840      	ldr	r0, [r0, #4]
 8010c64:	b1e0      	cbz	r0, 8010ca0 <rcutils_string_array_fini+0x44>
 8010c66:	f104 0008 	add.w	r0, r4, #8
 8010c6a:	f7f7 facd 	bl	8008208 <rcutils_allocator_is_valid>
 8010c6e:	b1c0      	cbz	r0, 8010ca2 <rcutils_string_array_fini+0x46>
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	b1c3      	cbz	r3, 8010ca6 <rcutils_string_array_fini+0x4a>
 8010c74:	2500      	movs	r5, #0
 8010c76:	6860      	ldr	r0, [r4, #4]
 8010c78:	462e      	mov	r6, r5
 8010c7a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8010c7e:	68e3      	ldr	r3, [r4, #12]
 8010c80:	69a1      	ldr	r1, [r4, #24]
 8010c82:	4798      	blx	r3
 8010c84:	e9d4 3000 	ldrd	r3, r0, [r4]
 8010c88:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8010c8c:	3501      	adds	r5, #1
 8010c8e:	429d      	cmp	r5, r3
 8010c90:	d3f3      	bcc.n	8010c7a <rcutils_string_array_fini+0x1e>
 8010c92:	68e3      	ldr	r3, [r4, #12]
 8010c94:	69a1      	ldr	r1, [r4, #24]
 8010c96:	4798      	blx	r3
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	e9c4 3300 	strd	r3, r3, [r4]
 8010ca0:	bd70      	pop	{r4, r5, r6, pc}
 8010ca2:	200b      	movs	r0, #11
 8010ca4:	bd70      	pop	{r4, r5, r6, pc}
 8010ca6:	6860      	ldr	r0, [r4, #4]
 8010ca8:	e7f3      	b.n	8010c92 <rcutils_string_array_fini+0x36>
 8010caa:	200b      	movs	r0, #11
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop

08010cb0 <rmw_get_zero_initialized_discovery_options>:
 8010cb0:	b510      	push	{r4, lr}
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	2220      	movs	r2, #32
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	f000 fa1c 	bl	80110f4 <memset>
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	bd10      	pop	{r4, pc}

08010cc0 <rmw_discovery_options_init>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	b318      	cbz	r0, 8010d0c <rmw_discovery_options_init+0x4c>
 8010cc4:	4604      	mov	r4, r0
 8010cc6:	4610      	mov	r0, r2
 8010cc8:	460e      	mov	r6, r1
 8010cca:	4615      	mov	r5, r2
 8010ccc:	f7f7 fa9c 	bl	8008208 <rcutils_allocator_is_valid>
 8010cd0:	b1e0      	cbz	r0, 8010d0c <rmw_discovery_options_init+0x4c>
 8010cd2:	68a3      	ldr	r3, [r4, #8]
 8010cd4:	b9d3      	cbnz	r3, 8010d0c <rmw_discovery_options_init+0x4c>
 8010cd6:	6863      	ldr	r3, [r4, #4]
 8010cd8:	b9c3      	cbnz	r3, 8010d0c <rmw_discovery_options_init+0x4c>
 8010cda:	7823      	ldrb	r3, [r4, #0]
 8010cdc:	b90b      	cbnz	r3, 8010ce2 <rmw_discovery_options_init+0x22>
 8010cde:	2302      	movs	r3, #2
 8010ce0:	7023      	strb	r3, [r4, #0]
 8010ce2:	b1a6      	cbz	r6, 8010d0e <rmw_discovery_options_init+0x4e>
 8010ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010ce8:	4630      	mov	r0, r6
 8010cea:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8010cee:	4798      	blx	r3
 8010cf0:	6060      	str	r0, [r4, #4]
 8010cf2:	b170      	cbz	r0, 8010d12 <rmw_discovery_options_init+0x52>
 8010cf4:	f104 0c0c 	add.w	ip, r4, #12
 8010cf8:	60a6      	str	r6, [r4, #8]
 8010cfa:	2600      	movs	r6, #0
 8010cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d02:	682b      	ldr	r3, [r5, #0]
 8010d04:	4630      	mov	r0, r6
 8010d06:	f8cc 3000 	str.w	r3, [ip]
 8010d0a:	bd70      	pop	{r4, r5, r6, pc}
 8010d0c:	260b      	movs	r6, #11
 8010d0e:	4630      	mov	r0, r6
 8010d10:	bd70      	pop	{r4, r5, r6, pc}
 8010d12:	260a      	movs	r6, #10
 8010d14:	e7fb      	b.n	8010d0e <rmw_discovery_options_init+0x4e>
 8010d16:	bf00      	nop

08010d18 <on_status>:
 8010d18:	b082      	sub	sp, #8
 8010d1a:	b002      	add	sp, #8
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop

08010d20 <on_topic>:
 8010d20:	4a23      	ldr	r2, [pc, #140]	; (8010db0 <on_topic+0x90>)
 8010d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d26:	6812      	ldr	r2, [r2, #0]
 8010d28:	b094      	sub	sp, #80	; 0x50
 8010d2a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010d2c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8010d30:	9113      	str	r1, [sp, #76]	; 0x4c
 8010d32:	9312      	str	r3, [sp, #72]	; 0x48
 8010d34:	b3c2      	cbz	r2, 8010da8 <on_topic+0x88>
 8010d36:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8010d3a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8010d3e:	e001      	b.n	8010d44 <on_topic+0x24>
 8010d40:	6852      	ldr	r2, [r2, #4]
 8010d42:	b38a      	cbz	r2, 8010da8 <on_topic+0x88>
 8010d44:	6894      	ldr	r4, [r2, #8]
 8010d46:	8aa3      	ldrh	r3, [r4, #20]
 8010d48:	428b      	cmp	r3, r1
 8010d4a:	d1f9      	bne.n	8010d40 <on_topic+0x20>
 8010d4c:	7da3      	ldrb	r3, [r4, #22]
 8010d4e:	4283      	cmp	r3, r0
 8010d50:	d1f6      	bne.n	8010d40 <on_topic+0x20>
 8010d52:	2248      	movs	r2, #72	; 0x48
 8010d54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010d58:	4668      	mov	r0, sp
 8010d5a:	f000 f9bd 	bl	80110d8 <memcpy>
 8010d5e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8010d62:	4620      	mov	r0, r4
 8010d64:	cb0c      	ldmia	r3, {r2, r3}
 8010d66:	f7f7 fe3b 	bl	80089e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010d6a:	4607      	mov	r7, r0
 8010d6c:	b1e0      	cbz	r0, 8010da8 <on_topic+0x88>
 8010d6e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8010d72:	462a      	mov	r2, r5
 8010d74:	4630      	mov	r0, r6
 8010d76:	f108 0110 	add.w	r1, r8, #16
 8010d7a:	f7fd fe67 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 8010d7e:	b930      	cbnz	r0, 8010d8e <on_topic+0x6e>
 8010d80:	4639      	mov	r1, r7
 8010d82:	480c      	ldr	r0, [pc, #48]	; (8010db4 <on_topic+0x94>)
 8010d84:	b014      	add	sp, #80	; 0x50
 8010d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d8a:	f7fd b88f 	b.w	800deac <put_memory>
 8010d8e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8010d92:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8010d96:	f7fd fd21 	bl	800e7dc <rmw_uros_epoch_nanos>
 8010d9a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8010d9e:	2305      	movs	r3, #5
 8010da0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010da4:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8010da8:	b014      	add	sp, #80	; 0x50
 8010daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dae:	bf00      	nop
 8010db0:	2000db0c 	.word	0x2000db0c
 8010db4:	2000dafc 	.word	0x2000dafc

08010db8 <on_request>:
 8010db8:	4824      	ldr	r0, [pc, #144]	; (8010e4c <on_request+0x94>)
 8010dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbe:	6800      	ldr	r0, [r0, #0]
 8010dc0:	b094      	sub	sp, #80	; 0x50
 8010dc2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010dc4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8010dc8:	9113      	str	r1, [sp, #76]	; 0x4c
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d03b      	beq.n	8010e46 <on_request+0x8e>
 8010dce:	461d      	mov	r5, r3
 8010dd0:	e001      	b.n	8010dd6 <on_request+0x1e>
 8010dd2:	6840      	ldr	r0, [r0, #4]
 8010dd4:	b3b8      	cbz	r0, 8010e46 <on_request+0x8e>
 8010dd6:	6884      	ldr	r4, [r0, #8]
 8010dd8:	8b21      	ldrh	r1, [r4, #24]
 8010dda:	4291      	cmp	r1, r2
 8010ddc:	d1f9      	bne.n	8010dd2 <on_request+0x1a>
 8010dde:	2248      	movs	r2, #72	; 0x48
 8010de0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010de4:	4668      	mov	r0, sp
 8010de6:	f000 f977 	bl	80110d8 <memcpy>
 8010dea:	f104 0320 	add.w	r3, r4, #32
 8010dee:	4620      	mov	r0, r4
 8010df0:	cb0c      	ldmia	r3, {r2, r3}
 8010df2:	f7f7 fdf5 	bl	80089e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010df6:	4680      	mov	r8, r0
 8010df8:	b328      	cbz	r0, 8010e46 <on_request+0x8e>
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8010e00:	463a      	mov	r2, r7
 8010e02:	f106 0110 	add.w	r1, r6, #16
 8010e06:	f7fd fe21 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 8010e0a:	b930      	cbnz	r0, 8010e1a <on_request+0x62>
 8010e0c:	4641      	mov	r1, r8
 8010e0e:	4810      	ldr	r0, [pc, #64]	; (8010e50 <on_request+0x98>)
 8010e10:	b014      	add	sp, #80	; 0x50
 8010e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e16:	f7fd b849 	b.w	800deac <put_memory>
 8010e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e1c:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8010e20:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8010e24:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8010e28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010e30:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010e34:	f7fd fcd2 	bl	800e7dc <rmw_uros_epoch_nanos>
 8010e38:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8010e3c:	2303      	movs	r3, #3
 8010e3e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010e42:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8010e46:	b014      	add	sp, #80	; 0x50
 8010e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e4c:	2000dadc 	.word	0x2000dadc
 8010e50:	2000dafc 	.word	0x2000dafc

08010e54 <on_reply>:
 8010e54:	4822      	ldr	r0, [pc, #136]	; (8010ee0 <on_reply+0x8c>)
 8010e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5a:	6800      	ldr	r0, [r0, #0]
 8010e5c:	b094      	sub	sp, #80	; 0x50
 8010e5e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010e60:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8010e64:	9113      	str	r1, [sp, #76]	; 0x4c
 8010e66:	b3b8      	cbz	r0, 8010ed8 <on_reply+0x84>
 8010e68:	461d      	mov	r5, r3
 8010e6a:	e001      	b.n	8010e70 <on_reply+0x1c>
 8010e6c:	6840      	ldr	r0, [r0, #4]
 8010e6e:	b398      	cbz	r0, 8010ed8 <on_reply+0x84>
 8010e70:	6884      	ldr	r4, [r0, #8]
 8010e72:	8b21      	ldrh	r1, [r4, #24]
 8010e74:	4291      	cmp	r1, r2
 8010e76:	d1f9      	bne.n	8010e6c <on_reply+0x18>
 8010e78:	2248      	movs	r2, #72	; 0x48
 8010e7a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010e7e:	4668      	mov	r0, sp
 8010e80:	f000 f92a 	bl	80110d8 <memcpy>
 8010e84:	f104 0320 	add.w	r3, r4, #32
 8010e88:	4620      	mov	r0, r4
 8010e8a:	cb0c      	ldmia	r3, {r2, r3}
 8010e8c:	f7f7 fda8 	bl	80089e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010e90:	4680      	mov	r8, r0
 8010e92:	b308      	cbz	r0, 8010ed8 <on_reply+0x84>
 8010e94:	4630      	mov	r0, r6
 8010e96:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8010e9a:	463a      	mov	r2, r7
 8010e9c:	f106 0110 	add.w	r1, r6, #16
 8010ea0:	f7fd fdd4 	bl	800ea4c <ucdr_deserialize_array_uint8_t>
 8010ea4:	b930      	cbnz	r0, 8010eb4 <on_reply+0x60>
 8010ea6:	4641      	mov	r1, r8
 8010ea8:	480e      	ldr	r0, [pc, #56]	; (8010ee4 <on_reply+0x90>)
 8010eaa:	b014      	add	sp, #80	; 0x50
 8010eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb0:	f7fc bffc 	b.w	800deac <put_memory>
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8010eba:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8010ebe:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 8010ec2:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 8010ec6:	f7fd fc89 	bl	800e7dc <rmw_uros_epoch_nanos>
 8010eca:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8010ece:	2304      	movs	r3, #4
 8010ed0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010ed4:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8010ed8:	b014      	add	sp, #80	; 0x50
 8010eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ede:	bf00      	nop
 8010ee0:	200091f0 	.word	0x200091f0
 8010ee4:	2000dafc 	.word	0x2000dafc

08010ee8 <rmw_destroy_client>:
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	b128      	cbz	r0, 8010ef8 <rmw_destroy_client+0x10>
 8010eec:	4604      	mov	r4, r0
 8010eee:	6800      	ldr	r0, [r0, #0]
 8010ef0:	460d      	mov	r5, r1
 8010ef2:	f7f7 fe49 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 8010ef6:	b910      	cbnz	r0, 8010efe <rmw_destroy_client+0x16>
 8010ef8:	2401      	movs	r4, #1
 8010efa:	4620      	mov	r0, r4
 8010efc:	bd70      	pop	{r4, r5, r6, pc}
 8010efe:	6863      	ldr	r3, [r4, #4]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d0f9      	beq.n	8010ef8 <rmw_destroy_client+0x10>
 8010f04:	2d00      	cmp	r5, #0
 8010f06:	d0f7      	beq.n	8010ef8 <rmw_destroy_client+0x10>
 8010f08:	6828      	ldr	r0, [r5, #0]
 8010f0a:	f7f7 fe3d 	bl	8008b88 <is_uxrce_rmw_identifier_valid>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d0f2      	beq.n	8010ef8 <rmw_destroy_client+0x10>
 8010f12:	686e      	ldr	r6, [r5, #4]
 8010f14:	2e00      	cmp	r6, #0
 8010f16:	d0ef      	beq.n	8010ef8 <rmw_destroy_client+0x10>
 8010f18:	6864      	ldr	r4, [r4, #4]
 8010f1a:	6932      	ldr	r2, [r6, #16]
 8010f1c:	6920      	ldr	r0, [r4, #16]
 8010f1e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010f22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010f26:	6819      	ldr	r1, [r3, #0]
 8010f28:	f7fe fc72 	bl	800f810 <uxr_buffer_cancel_data>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	6920      	ldr	r0, [r4, #16]
 8010f30:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010f34:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010f38:	f7f7 fdac 	bl	8008a94 <run_xrce_session>
 8010f3c:	6920      	ldr	r0, [r4, #16]
 8010f3e:	6932      	ldr	r2, [r6, #16]
 8010f40:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010f44:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010f48:	6819      	ldr	r1, [r3, #0]
 8010f4a:	f7f8 fedd 	bl	8009d08 <uxr_buffer_delete_entity>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	6920      	ldr	r0, [r4, #16]
 8010f52:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010f56:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010f5a:	f7f7 fd9b 	bl	8008a94 <run_xrce_session>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	4628      	mov	r0, r5
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	bf14      	ite	ne
 8010f66:	2400      	movne	r4, #0
 8010f68:	2402      	moveq	r4, #2
 8010f6a:	f7f7 fd17 	bl	800899c <rmw_uxrce_fini_client_memory>
 8010f6e:	e7c4      	b.n	8010efa <rmw_destroy_client+0x12>

08010f70 <rmw_create_guard_condition>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4605      	mov	r5, r0
 8010f74:	4808      	ldr	r0, [pc, #32]	; (8010f98 <rmw_create_guard_condition+0x28>)
 8010f76:	f7fc ff89 	bl	800de8c <get_memory>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	b148      	cbz	r0, 8010f92 <rmw_create_guard_condition+0x22>
 8010f7e:	6884      	ldr	r4, [r0, #8]
 8010f80:	2300      	movs	r3, #0
 8010f82:	61e5      	str	r5, [r4, #28]
 8010f84:	7423      	strb	r3, [r4, #16]
 8010f86:	f7fc ffa5 	bl	800ded4 <rmw_get_implementation_identifier>
 8010f8a:	f104 0314 	add.w	r3, r4, #20
 8010f8e:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8010f92:	4618      	mov	r0, r3
 8010f94:	bd38      	pop	{r3, r4, r5, pc}
 8010f96:	bf00      	nop
 8010f98:	2000da9c 	.word	0x2000da9c

08010f9c <rmw_destroy_guard_condition>:
 8010f9c:	b508      	push	{r3, lr}
 8010f9e:	4b08      	ldr	r3, [pc, #32]	; (8010fc0 <rmw_destroy_guard_condition+0x24>)
 8010fa0:	6819      	ldr	r1, [r3, #0]
 8010fa2:	b911      	cbnz	r1, 8010faa <rmw_destroy_guard_condition+0xe>
 8010fa4:	e00a      	b.n	8010fbc <rmw_destroy_guard_condition+0x20>
 8010fa6:	6849      	ldr	r1, [r1, #4]
 8010fa8:	b141      	cbz	r1, 8010fbc <rmw_destroy_guard_condition+0x20>
 8010faa:	688b      	ldr	r3, [r1, #8]
 8010fac:	3314      	adds	r3, #20
 8010fae:	4298      	cmp	r0, r3
 8010fb0:	d1f9      	bne.n	8010fa6 <rmw_destroy_guard_condition+0xa>
 8010fb2:	4803      	ldr	r0, [pc, #12]	; (8010fc0 <rmw_destroy_guard_condition+0x24>)
 8010fb4:	f7fc ff7a 	bl	800deac <put_memory>
 8010fb8:	2000      	movs	r0, #0
 8010fba:	bd08      	pop	{r3, pc}
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	bd08      	pop	{r3, pc}
 8010fc0:	2000da9c 	.word	0x2000da9c

08010fc4 <calloc>:
 8010fc4:	4b02      	ldr	r3, [pc, #8]	; (8010fd0 <calloc+0xc>)
 8010fc6:	460a      	mov	r2, r1
 8010fc8:	4601      	mov	r1, r0
 8010fca:	6818      	ldr	r0, [r3, #0]
 8010fcc:	f000 b89a 	b.w	8011104 <_calloc_r>
 8010fd0:	2000026c 	.word	0x2000026c

08010fd4 <__errno>:
 8010fd4:	4b01      	ldr	r3, [pc, #4]	; (8010fdc <__errno+0x8>)
 8010fd6:	6818      	ldr	r0, [r3, #0]
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop
 8010fdc:	2000026c 	.word	0x2000026c

08010fe0 <getenv>:
 8010fe0:	b507      	push	{r0, r1, r2, lr}
 8010fe2:	4b04      	ldr	r3, [pc, #16]	; (8010ff4 <getenv+0x14>)
 8010fe4:	4601      	mov	r1, r0
 8010fe6:	aa01      	add	r2, sp, #4
 8010fe8:	6818      	ldr	r0, [r3, #0]
 8010fea:	f000 f805 	bl	8010ff8 <_findenv_r>
 8010fee:	b003      	add	sp, #12
 8010ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ff4:	2000026c 	.word	0x2000026c

08010ff8 <_findenv_r>:
 8010ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801106c <_findenv_r+0x74>
 8011000:	4607      	mov	r7, r0
 8011002:	4689      	mov	r9, r1
 8011004:	4616      	mov	r6, r2
 8011006:	f000 fb69 	bl	80116dc <__env_lock>
 801100a:	f8da 4000 	ldr.w	r4, [sl]
 801100e:	b134      	cbz	r4, 801101e <_findenv_r+0x26>
 8011010:	464b      	mov	r3, r9
 8011012:	4698      	mov	r8, r3
 8011014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011018:	b13a      	cbz	r2, 801102a <_findenv_r+0x32>
 801101a:	2a3d      	cmp	r2, #61	; 0x3d
 801101c:	d1f9      	bne.n	8011012 <_findenv_r+0x1a>
 801101e:	4638      	mov	r0, r7
 8011020:	f000 fb62 	bl	80116e8 <__env_unlock>
 8011024:	2000      	movs	r0, #0
 8011026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102a:	eba8 0809 	sub.w	r8, r8, r9
 801102e:	46a3      	mov	fp, r4
 8011030:	f854 0b04 	ldr.w	r0, [r4], #4
 8011034:	2800      	cmp	r0, #0
 8011036:	d0f2      	beq.n	801101e <_findenv_r+0x26>
 8011038:	4642      	mov	r2, r8
 801103a:	4649      	mov	r1, r9
 801103c:	f000 fa3d 	bl	80114ba <strncmp>
 8011040:	2800      	cmp	r0, #0
 8011042:	d1f4      	bne.n	801102e <_findenv_r+0x36>
 8011044:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011048:	eb03 0508 	add.w	r5, r3, r8
 801104c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011050:	2b3d      	cmp	r3, #61	; 0x3d
 8011052:	d1ec      	bne.n	801102e <_findenv_r+0x36>
 8011054:	f8da 3000 	ldr.w	r3, [sl]
 8011058:	ebab 0303 	sub.w	r3, fp, r3
 801105c:	109b      	asrs	r3, r3, #2
 801105e:	4638      	mov	r0, r7
 8011060:	6033      	str	r3, [r6, #0]
 8011062:	f000 fb41 	bl	80116e8 <__env_unlock>
 8011066:	1c68      	adds	r0, r5, #1
 8011068:	e7dd      	b.n	8011026 <_findenv_r+0x2e>
 801106a:	bf00      	nop
 801106c:	20000000 	.word	0x20000000

08011070 <__libc_init_array>:
 8011070:	b570      	push	{r4, r5, r6, lr}
 8011072:	4d0d      	ldr	r5, [pc, #52]	; (80110a8 <__libc_init_array+0x38>)
 8011074:	4c0d      	ldr	r4, [pc, #52]	; (80110ac <__libc_init_array+0x3c>)
 8011076:	1b64      	subs	r4, r4, r5
 8011078:	10a4      	asrs	r4, r4, #2
 801107a:	2600      	movs	r6, #0
 801107c:	42a6      	cmp	r6, r4
 801107e:	d109      	bne.n	8011094 <__libc_init_array+0x24>
 8011080:	4d0b      	ldr	r5, [pc, #44]	; (80110b0 <__libc_init_array+0x40>)
 8011082:	4c0c      	ldr	r4, [pc, #48]	; (80110b4 <__libc_init_array+0x44>)
 8011084:	f001 fbc6 	bl	8012814 <_init>
 8011088:	1b64      	subs	r4, r4, r5
 801108a:	10a4      	asrs	r4, r4, #2
 801108c:	2600      	movs	r6, #0
 801108e:	42a6      	cmp	r6, r4
 8011090:	d105      	bne.n	801109e <__libc_init_array+0x2e>
 8011092:	bd70      	pop	{r4, r5, r6, pc}
 8011094:	f855 3b04 	ldr.w	r3, [r5], #4
 8011098:	4798      	blx	r3
 801109a:	3601      	adds	r6, #1
 801109c:	e7ee      	b.n	801107c <__libc_init_array+0xc>
 801109e:	f855 3b04 	ldr.w	r3, [r5], #4
 80110a2:	4798      	blx	r3
 80110a4:	3601      	adds	r6, #1
 80110a6:	e7f2      	b.n	801108e <__libc_init_array+0x1e>
 80110a8:	08013634 	.word	0x08013634
 80110ac:	08013634 	.word	0x08013634
 80110b0:	08013634 	.word	0x08013634
 80110b4:	0801363c 	.word	0x0801363c

080110b8 <malloc>:
 80110b8:	4b02      	ldr	r3, [pc, #8]	; (80110c4 <malloc+0xc>)
 80110ba:	4601      	mov	r1, r0
 80110bc:	6818      	ldr	r0, [r3, #0]
 80110be:	f000 b8a3 	b.w	8011208 <_malloc_r>
 80110c2:	bf00      	nop
 80110c4:	2000026c 	.word	0x2000026c

080110c8 <free>:
 80110c8:	4b02      	ldr	r3, [pc, #8]	; (80110d4 <free+0xc>)
 80110ca:	4601      	mov	r1, r0
 80110cc:	6818      	ldr	r0, [r3, #0]
 80110ce:	f000 b82f 	b.w	8011130 <_free_r>
 80110d2:	bf00      	nop
 80110d4:	2000026c 	.word	0x2000026c

080110d8 <memcpy>:
 80110d8:	440a      	add	r2, r1
 80110da:	4291      	cmp	r1, r2
 80110dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80110e0:	d100      	bne.n	80110e4 <memcpy+0xc>
 80110e2:	4770      	bx	lr
 80110e4:	b510      	push	{r4, lr}
 80110e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110ee:	4291      	cmp	r1, r2
 80110f0:	d1f9      	bne.n	80110e6 <memcpy+0xe>
 80110f2:	bd10      	pop	{r4, pc}

080110f4 <memset>:
 80110f4:	4402      	add	r2, r0
 80110f6:	4603      	mov	r3, r0
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d100      	bne.n	80110fe <memset+0xa>
 80110fc:	4770      	bx	lr
 80110fe:	f803 1b01 	strb.w	r1, [r3], #1
 8011102:	e7f9      	b.n	80110f8 <memset+0x4>

08011104 <_calloc_r>:
 8011104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011106:	fba1 2402 	umull	r2, r4, r1, r2
 801110a:	b94c      	cbnz	r4, 8011120 <_calloc_r+0x1c>
 801110c:	4611      	mov	r1, r2
 801110e:	9201      	str	r2, [sp, #4]
 8011110:	f000 f87a 	bl	8011208 <_malloc_r>
 8011114:	9a01      	ldr	r2, [sp, #4]
 8011116:	4605      	mov	r5, r0
 8011118:	b930      	cbnz	r0, 8011128 <_calloc_r+0x24>
 801111a:	4628      	mov	r0, r5
 801111c:	b003      	add	sp, #12
 801111e:	bd30      	pop	{r4, r5, pc}
 8011120:	220c      	movs	r2, #12
 8011122:	6002      	str	r2, [r0, #0]
 8011124:	2500      	movs	r5, #0
 8011126:	e7f8      	b.n	801111a <_calloc_r+0x16>
 8011128:	4621      	mov	r1, r4
 801112a:	f7ff ffe3 	bl	80110f4 <memset>
 801112e:	e7f4      	b.n	801111a <_calloc_r+0x16>

08011130 <_free_r>:
 8011130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011132:	2900      	cmp	r1, #0
 8011134:	d044      	beq.n	80111c0 <_free_r+0x90>
 8011136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801113a:	9001      	str	r0, [sp, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	f1a1 0404 	sub.w	r4, r1, #4
 8011142:	bfb8      	it	lt
 8011144:	18e4      	addlt	r4, r4, r3
 8011146:	f000 fbdf 	bl	8011908 <__malloc_lock>
 801114a:	4a1e      	ldr	r2, [pc, #120]	; (80111c4 <_free_r+0x94>)
 801114c:	9801      	ldr	r0, [sp, #4]
 801114e:	6813      	ldr	r3, [r2, #0]
 8011150:	b933      	cbnz	r3, 8011160 <_free_r+0x30>
 8011152:	6063      	str	r3, [r4, #4]
 8011154:	6014      	str	r4, [r2, #0]
 8011156:	b003      	add	sp, #12
 8011158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801115c:	f000 bbda 	b.w	8011914 <__malloc_unlock>
 8011160:	42a3      	cmp	r3, r4
 8011162:	d908      	bls.n	8011176 <_free_r+0x46>
 8011164:	6825      	ldr	r5, [r4, #0]
 8011166:	1961      	adds	r1, r4, r5
 8011168:	428b      	cmp	r3, r1
 801116a:	bf01      	itttt	eq
 801116c:	6819      	ldreq	r1, [r3, #0]
 801116e:	685b      	ldreq	r3, [r3, #4]
 8011170:	1949      	addeq	r1, r1, r5
 8011172:	6021      	streq	r1, [r4, #0]
 8011174:	e7ed      	b.n	8011152 <_free_r+0x22>
 8011176:	461a      	mov	r2, r3
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	b10b      	cbz	r3, 8011180 <_free_r+0x50>
 801117c:	42a3      	cmp	r3, r4
 801117e:	d9fa      	bls.n	8011176 <_free_r+0x46>
 8011180:	6811      	ldr	r1, [r2, #0]
 8011182:	1855      	adds	r5, r2, r1
 8011184:	42a5      	cmp	r5, r4
 8011186:	d10b      	bne.n	80111a0 <_free_r+0x70>
 8011188:	6824      	ldr	r4, [r4, #0]
 801118a:	4421      	add	r1, r4
 801118c:	1854      	adds	r4, r2, r1
 801118e:	42a3      	cmp	r3, r4
 8011190:	6011      	str	r1, [r2, #0]
 8011192:	d1e0      	bne.n	8011156 <_free_r+0x26>
 8011194:	681c      	ldr	r4, [r3, #0]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	6053      	str	r3, [r2, #4]
 801119a:	4421      	add	r1, r4
 801119c:	6011      	str	r1, [r2, #0]
 801119e:	e7da      	b.n	8011156 <_free_r+0x26>
 80111a0:	d902      	bls.n	80111a8 <_free_r+0x78>
 80111a2:	230c      	movs	r3, #12
 80111a4:	6003      	str	r3, [r0, #0]
 80111a6:	e7d6      	b.n	8011156 <_free_r+0x26>
 80111a8:	6825      	ldr	r5, [r4, #0]
 80111aa:	1961      	adds	r1, r4, r5
 80111ac:	428b      	cmp	r3, r1
 80111ae:	bf04      	itt	eq
 80111b0:	6819      	ldreq	r1, [r3, #0]
 80111b2:	685b      	ldreq	r3, [r3, #4]
 80111b4:	6063      	str	r3, [r4, #4]
 80111b6:	bf04      	itt	eq
 80111b8:	1949      	addeq	r1, r1, r5
 80111ba:	6021      	streq	r1, [r4, #0]
 80111bc:	6054      	str	r4, [r2, #4]
 80111be:	e7ca      	b.n	8011156 <_free_r+0x26>
 80111c0:	b003      	add	sp, #12
 80111c2:	bd30      	pop	{r4, r5, pc}
 80111c4:	2000dc94 	.word	0x2000dc94

080111c8 <sbrk_aligned>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	4e0e      	ldr	r6, [pc, #56]	; (8011204 <sbrk_aligned+0x3c>)
 80111cc:	460c      	mov	r4, r1
 80111ce:	6831      	ldr	r1, [r6, #0]
 80111d0:	4605      	mov	r5, r0
 80111d2:	b911      	cbnz	r1, 80111da <sbrk_aligned+0x12>
 80111d4:	f000 f918 	bl	8011408 <_sbrk_r>
 80111d8:	6030      	str	r0, [r6, #0]
 80111da:	4621      	mov	r1, r4
 80111dc:	4628      	mov	r0, r5
 80111de:	f000 f913 	bl	8011408 <_sbrk_r>
 80111e2:	1c43      	adds	r3, r0, #1
 80111e4:	d00a      	beq.n	80111fc <sbrk_aligned+0x34>
 80111e6:	1cc4      	adds	r4, r0, #3
 80111e8:	f024 0403 	bic.w	r4, r4, #3
 80111ec:	42a0      	cmp	r0, r4
 80111ee:	d007      	beq.n	8011200 <sbrk_aligned+0x38>
 80111f0:	1a21      	subs	r1, r4, r0
 80111f2:	4628      	mov	r0, r5
 80111f4:	f000 f908 	bl	8011408 <_sbrk_r>
 80111f8:	3001      	adds	r0, #1
 80111fa:	d101      	bne.n	8011200 <sbrk_aligned+0x38>
 80111fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011200:	4620      	mov	r0, r4
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	2000dc98 	.word	0x2000dc98

08011208 <_malloc_r>:
 8011208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801120c:	1ccd      	adds	r5, r1, #3
 801120e:	f025 0503 	bic.w	r5, r5, #3
 8011212:	3508      	adds	r5, #8
 8011214:	2d0c      	cmp	r5, #12
 8011216:	bf38      	it	cc
 8011218:	250c      	movcc	r5, #12
 801121a:	2d00      	cmp	r5, #0
 801121c:	4607      	mov	r7, r0
 801121e:	db01      	blt.n	8011224 <_malloc_r+0x1c>
 8011220:	42a9      	cmp	r1, r5
 8011222:	d905      	bls.n	8011230 <_malloc_r+0x28>
 8011224:	230c      	movs	r3, #12
 8011226:	603b      	str	r3, [r7, #0]
 8011228:	2600      	movs	r6, #0
 801122a:	4630      	mov	r0, r6
 801122c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011230:	4e2e      	ldr	r6, [pc, #184]	; (80112ec <_malloc_r+0xe4>)
 8011232:	f000 fb69 	bl	8011908 <__malloc_lock>
 8011236:	6833      	ldr	r3, [r6, #0]
 8011238:	461c      	mov	r4, r3
 801123a:	bb34      	cbnz	r4, 801128a <_malloc_r+0x82>
 801123c:	4629      	mov	r1, r5
 801123e:	4638      	mov	r0, r7
 8011240:	f7ff ffc2 	bl	80111c8 <sbrk_aligned>
 8011244:	1c43      	adds	r3, r0, #1
 8011246:	4604      	mov	r4, r0
 8011248:	d14d      	bne.n	80112e6 <_malloc_r+0xde>
 801124a:	6834      	ldr	r4, [r6, #0]
 801124c:	4626      	mov	r6, r4
 801124e:	2e00      	cmp	r6, #0
 8011250:	d140      	bne.n	80112d4 <_malloc_r+0xcc>
 8011252:	6823      	ldr	r3, [r4, #0]
 8011254:	4631      	mov	r1, r6
 8011256:	4638      	mov	r0, r7
 8011258:	eb04 0803 	add.w	r8, r4, r3
 801125c:	f000 f8d4 	bl	8011408 <_sbrk_r>
 8011260:	4580      	cmp	r8, r0
 8011262:	d13a      	bne.n	80112da <_malloc_r+0xd2>
 8011264:	6821      	ldr	r1, [r4, #0]
 8011266:	3503      	adds	r5, #3
 8011268:	1a6d      	subs	r5, r5, r1
 801126a:	f025 0503 	bic.w	r5, r5, #3
 801126e:	3508      	adds	r5, #8
 8011270:	2d0c      	cmp	r5, #12
 8011272:	bf38      	it	cc
 8011274:	250c      	movcc	r5, #12
 8011276:	4629      	mov	r1, r5
 8011278:	4638      	mov	r0, r7
 801127a:	f7ff ffa5 	bl	80111c8 <sbrk_aligned>
 801127e:	3001      	adds	r0, #1
 8011280:	d02b      	beq.n	80112da <_malloc_r+0xd2>
 8011282:	6823      	ldr	r3, [r4, #0]
 8011284:	442b      	add	r3, r5
 8011286:	6023      	str	r3, [r4, #0]
 8011288:	e00e      	b.n	80112a8 <_malloc_r+0xa0>
 801128a:	6822      	ldr	r2, [r4, #0]
 801128c:	1b52      	subs	r2, r2, r5
 801128e:	d41e      	bmi.n	80112ce <_malloc_r+0xc6>
 8011290:	2a0b      	cmp	r2, #11
 8011292:	d916      	bls.n	80112c2 <_malloc_r+0xba>
 8011294:	1961      	adds	r1, r4, r5
 8011296:	42a3      	cmp	r3, r4
 8011298:	6025      	str	r5, [r4, #0]
 801129a:	bf18      	it	ne
 801129c:	6059      	strne	r1, [r3, #4]
 801129e:	6863      	ldr	r3, [r4, #4]
 80112a0:	bf08      	it	eq
 80112a2:	6031      	streq	r1, [r6, #0]
 80112a4:	5162      	str	r2, [r4, r5]
 80112a6:	604b      	str	r3, [r1, #4]
 80112a8:	4638      	mov	r0, r7
 80112aa:	f104 060b 	add.w	r6, r4, #11
 80112ae:	f000 fb31 	bl	8011914 <__malloc_unlock>
 80112b2:	f026 0607 	bic.w	r6, r6, #7
 80112b6:	1d23      	adds	r3, r4, #4
 80112b8:	1af2      	subs	r2, r6, r3
 80112ba:	d0b6      	beq.n	801122a <_malloc_r+0x22>
 80112bc:	1b9b      	subs	r3, r3, r6
 80112be:	50a3      	str	r3, [r4, r2]
 80112c0:	e7b3      	b.n	801122a <_malloc_r+0x22>
 80112c2:	6862      	ldr	r2, [r4, #4]
 80112c4:	42a3      	cmp	r3, r4
 80112c6:	bf0c      	ite	eq
 80112c8:	6032      	streq	r2, [r6, #0]
 80112ca:	605a      	strne	r2, [r3, #4]
 80112cc:	e7ec      	b.n	80112a8 <_malloc_r+0xa0>
 80112ce:	4623      	mov	r3, r4
 80112d0:	6864      	ldr	r4, [r4, #4]
 80112d2:	e7b2      	b.n	801123a <_malloc_r+0x32>
 80112d4:	4634      	mov	r4, r6
 80112d6:	6876      	ldr	r6, [r6, #4]
 80112d8:	e7b9      	b.n	801124e <_malloc_r+0x46>
 80112da:	230c      	movs	r3, #12
 80112dc:	603b      	str	r3, [r7, #0]
 80112de:	4638      	mov	r0, r7
 80112e0:	f000 fb18 	bl	8011914 <__malloc_unlock>
 80112e4:	e7a1      	b.n	801122a <_malloc_r+0x22>
 80112e6:	6025      	str	r5, [r4, #0]
 80112e8:	e7de      	b.n	80112a8 <_malloc_r+0xa0>
 80112ea:	bf00      	nop
 80112ec:	2000dc94 	.word	0x2000dc94

080112f0 <iprintf>:
 80112f0:	b40f      	push	{r0, r1, r2, r3}
 80112f2:	4b0a      	ldr	r3, [pc, #40]	; (801131c <iprintf+0x2c>)
 80112f4:	b513      	push	{r0, r1, r4, lr}
 80112f6:	681c      	ldr	r4, [r3, #0]
 80112f8:	b124      	cbz	r4, 8011304 <iprintf+0x14>
 80112fa:	69a3      	ldr	r3, [r4, #24]
 80112fc:	b913      	cbnz	r3, 8011304 <iprintf+0x14>
 80112fe:	4620      	mov	r0, r4
 8011300:	f000 fa50 	bl	80117a4 <__sinit>
 8011304:	ab05      	add	r3, sp, #20
 8011306:	9a04      	ldr	r2, [sp, #16]
 8011308:	68a1      	ldr	r1, [r4, #8]
 801130a:	9301      	str	r3, [sp, #4]
 801130c:	4620      	mov	r0, r4
 801130e:	f000 fcbb 	bl	8011c88 <_vfiprintf_r>
 8011312:	b002      	add	sp, #8
 8011314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011318:	b004      	add	sp, #16
 801131a:	4770      	bx	lr
 801131c:	2000026c 	.word	0x2000026c

08011320 <srand>:
 8011320:	b538      	push	{r3, r4, r5, lr}
 8011322:	4b10      	ldr	r3, [pc, #64]	; (8011364 <srand+0x44>)
 8011324:	681d      	ldr	r5, [r3, #0]
 8011326:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011328:	4604      	mov	r4, r0
 801132a:	b9b3      	cbnz	r3, 801135a <srand+0x3a>
 801132c:	2018      	movs	r0, #24
 801132e:	f7ff fec3 	bl	80110b8 <malloc>
 8011332:	4602      	mov	r2, r0
 8011334:	63a8      	str	r0, [r5, #56]	; 0x38
 8011336:	b920      	cbnz	r0, 8011342 <srand+0x22>
 8011338:	4b0b      	ldr	r3, [pc, #44]	; (8011368 <srand+0x48>)
 801133a:	480c      	ldr	r0, [pc, #48]	; (801136c <srand+0x4c>)
 801133c:	2142      	movs	r1, #66	; 0x42
 801133e:	f000 f9af 	bl	80116a0 <__assert_func>
 8011342:	490b      	ldr	r1, [pc, #44]	; (8011370 <srand+0x50>)
 8011344:	4b0b      	ldr	r3, [pc, #44]	; (8011374 <srand+0x54>)
 8011346:	e9c0 1300 	strd	r1, r3, [r0]
 801134a:	4b0b      	ldr	r3, [pc, #44]	; (8011378 <srand+0x58>)
 801134c:	6083      	str	r3, [r0, #8]
 801134e:	230b      	movs	r3, #11
 8011350:	8183      	strh	r3, [r0, #12]
 8011352:	2100      	movs	r1, #0
 8011354:	2001      	movs	r0, #1
 8011356:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801135a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801135c:	2200      	movs	r2, #0
 801135e:	611c      	str	r4, [r3, #16]
 8011360:	615a      	str	r2, [r3, #20]
 8011362:	bd38      	pop	{r3, r4, r5, pc}
 8011364:	2000026c 	.word	0x2000026c
 8011368:	080134e8 	.word	0x080134e8
 801136c:	080134ff 	.word	0x080134ff
 8011370:	abcd330e 	.word	0xabcd330e
 8011374:	e66d1234 	.word	0xe66d1234
 8011378:	0005deec 	.word	0x0005deec

0801137c <rand>:
 801137c:	4b16      	ldr	r3, [pc, #88]	; (80113d8 <rand+0x5c>)
 801137e:	b510      	push	{r4, lr}
 8011380:	681c      	ldr	r4, [r3, #0]
 8011382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011384:	b9b3      	cbnz	r3, 80113b4 <rand+0x38>
 8011386:	2018      	movs	r0, #24
 8011388:	f7ff fe96 	bl	80110b8 <malloc>
 801138c:	63a0      	str	r0, [r4, #56]	; 0x38
 801138e:	b928      	cbnz	r0, 801139c <rand+0x20>
 8011390:	4602      	mov	r2, r0
 8011392:	4b12      	ldr	r3, [pc, #72]	; (80113dc <rand+0x60>)
 8011394:	4812      	ldr	r0, [pc, #72]	; (80113e0 <rand+0x64>)
 8011396:	214e      	movs	r1, #78	; 0x4e
 8011398:	f000 f982 	bl	80116a0 <__assert_func>
 801139c:	4a11      	ldr	r2, [pc, #68]	; (80113e4 <rand+0x68>)
 801139e:	4b12      	ldr	r3, [pc, #72]	; (80113e8 <rand+0x6c>)
 80113a0:	e9c0 2300 	strd	r2, r3, [r0]
 80113a4:	4b11      	ldr	r3, [pc, #68]	; (80113ec <rand+0x70>)
 80113a6:	6083      	str	r3, [r0, #8]
 80113a8:	230b      	movs	r3, #11
 80113aa:	8183      	strh	r3, [r0, #12]
 80113ac:	2201      	movs	r2, #1
 80113ae:	2300      	movs	r3, #0
 80113b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80113b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80113b6:	4a0e      	ldr	r2, [pc, #56]	; (80113f0 <rand+0x74>)
 80113b8:	6920      	ldr	r0, [r4, #16]
 80113ba:	6963      	ldr	r3, [r4, #20]
 80113bc:	490d      	ldr	r1, [pc, #52]	; (80113f4 <rand+0x78>)
 80113be:	4342      	muls	r2, r0
 80113c0:	fb01 2203 	mla	r2, r1, r3, r2
 80113c4:	fba0 0101 	umull	r0, r1, r0, r1
 80113c8:	1c43      	adds	r3, r0, #1
 80113ca:	eb42 0001 	adc.w	r0, r2, r1
 80113ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80113d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80113d6:	bd10      	pop	{r4, pc}
 80113d8:	2000026c 	.word	0x2000026c
 80113dc:	080134e8 	.word	0x080134e8
 80113e0:	080134ff 	.word	0x080134ff
 80113e4:	abcd330e 	.word	0xabcd330e
 80113e8:	e66d1234 	.word	0xe66d1234
 80113ec:	0005deec 	.word	0x0005deec
 80113f0:	5851f42d 	.word	0x5851f42d
 80113f4:	4c957f2d 	.word	0x4c957f2d

080113f8 <realloc>:
 80113f8:	4b02      	ldr	r3, [pc, #8]	; (8011404 <realloc+0xc>)
 80113fa:	460a      	mov	r2, r1
 80113fc:	4601      	mov	r1, r0
 80113fe:	6818      	ldr	r0, [r3, #0]
 8011400:	f000 ba8e 	b.w	8011920 <_realloc_r>
 8011404:	2000026c 	.word	0x2000026c

08011408 <_sbrk_r>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	4d06      	ldr	r5, [pc, #24]	; (8011424 <_sbrk_r+0x1c>)
 801140c:	2300      	movs	r3, #0
 801140e:	4604      	mov	r4, r0
 8011410:	4608      	mov	r0, r1
 8011412:	602b      	str	r3, [r5, #0]
 8011414:	f7f0 f9c2 	bl	800179c <_sbrk>
 8011418:	1c43      	adds	r3, r0, #1
 801141a:	d102      	bne.n	8011422 <_sbrk_r+0x1a>
 801141c:	682b      	ldr	r3, [r5, #0]
 801141e:	b103      	cbz	r3, 8011422 <_sbrk_r+0x1a>
 8011420:	6023      	str	r3, [r4, #0]
 8011422:	bd38      	pop	{r3, r4, r5, pc}
 8011424:	2000dca0 	.word	0x2000dca0

08011428 <sniprintf>:
 8011428:	b40c      	push	{r2, r3}
 801142a:	b530      	push	{r4, r5, lr}
 801142c:	4b17      	ldr	r3, [pc, #92]	; (801148c <sniprintf+0x64>)
 801142e:	1e0c      	subs	r4, r1, #0
 8011430:	681d      	ldr	r5, [r3, #0]
 8011432:	b09d      	sub	sp, #116	; 0x74
 8011434:	da08      	bge.n	8011448 <sniprintf+0x20>
 8011436:	238b      	movs	r3, #139	; 0x8b
 8011438:	602b      	str	r3, [r5, #0]
 801143a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801143e:	b01d      	add	sp, #116	; 0x74
 8011440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011444:	b002      	add	sp, #8
 8011446:	4770      	bx	lr
 8011448:	f44f 7302 	mov.w	r3, #520	; 0x208
 801144c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011450:	bf14      	ite	ne
 8011452:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011456:	4623      	moveq	r3, r4
 8011458:	9304      	str	r3, [sp, #16]
 801145a:	9307      	str	r3, [sp, #28]
 801145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011460:	9002      	str	r0, [sp, #8]
 8011462:	9006      	str	r0, [sp, #24]
 8011464:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011468:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801146a:	ab21      	add	r3, sp, #132	; 0x84
 801146c:	a902      	add	r1, sp, #8
 801146e:	4628      	mov	r0, r5
 8011470:	9301      	str	r3, [sp, #4]
 8011472:	f000 fadf 	bl	8011a34 <_svfiprintf_r>
 8011476:	1c43      	adds	r3, r0, #1
 8011478:	bfbc      	itt	lt
 801147a:	238b      	movlt	r3, #139	; 0x8b
 801147c:	602b      	strlt	r3, [r5, #0]
 801147e:	2c00      	cmp	r4, #0
 8011480:	d0dd      	beq.n	801143e <sniprintf+0x16>
 8011482:	9b02      	ldr	r3, [sp, #8]
 8011484:	2200      	movs	r2, #0
 8011486:	701a      	strb	r2, [r3, #0]
 8011488:	e7d9      	b.n	801143e <sniprintf+0x16>
 801148a:	bf00      	nop
 801148c:	2000026c 	.word	0x2000026c

08011490 <strchr>:
 8011490:	b2c9      	uxtb	r1, r1
 8011492:	4603      	mov	r3, r0
 8011494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011498:	b11a      	cbz	r2, 80114a2 <strchr+0x12>
 801149a:	428a      	cmp	r2, r1
 801149c:	d1f9      	bne.n	8011492 <strchr+0x2>
 801149e:	4618      	mov	r0, r3
 80114a0:	4770      	bx	lr
 80114a2:	2900      	cmp	r1, #0
 80114a4:	bf18      	it	ne
 80114a6:	2300      	movne	r3, #0
 80114a8:	e7f9      	b.n	801149e <strchr+0xe>

080114aa <strcpy>:
 80114aa:	4603      	mov	r3, r0
 80114ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114b0:	f803 2b01 	strb.w	r2, [r3], #1
 80114b4:	2a00      	cmp	r2, #0
 80114b6:	d1f9      	bne.n	80114ac <strcpy+0x2>
 80114b8:	4770      	bx	lr

080114ba <strncmp>:
 80114ba:	b510      	push	{r4, lr}
 80114bc:	b17a      	cbz	r2, 80114de <strncmp+0x24>
 80114be:	4603      	mov	r3, r0
 80114c0:	3901      	subs	r1, #1
 80114c2:	1884      	adds	r4, r0, r2
 80114c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80114c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80114cc:	4290      	cmp	r0, r2
 80114ce:	d101      	bne.n	80114d4 <strncmp+0x1a>
 80114d0:	42a3      	cmp	r3, r4
 80114d2:	d101      	bne.n	80114d8 <strncmp+0x1e>
 80114d4:	1a80      	subs	r0, r0, r2
 80114d6:	bd10      	pop	{r4, pc}
 80114d8:	2800      	cmp	r0, #0
 80114da:	d1f3      	bne.n	80114c4 <strncmp+0xa>
 80114dc:	e7fa      	b.n	80114d4 <strncmp+0x1a>
 80114de:	4610      	mov	r0, r2
 80114e0:	e7f9      	b.n	80114d6 <strncmp+0x1c>

080114e2 <strncpy>:
 80114e2:	b510      	push	{r4, lr}
 80114e4:	3901      	subs	r1, #1
 80114e6:	4603      	mov	r3, r0
 80114e8:	b132      	cbz	r2, 80114f8 <strncpy+0x16>
 80114ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80114ee:	f803 4b01 	strb.w	r4, [r3], #1
 80114f2:	3a01      	subs	r2, #1
 80114f4:	2c00      	cmp	r4, #0
 80114f6:	d1f7      	bne.n	80114e8 <strncpy+0x6>
 80114f8:	441a      	add	r2, r3
 80114fa:	2100      	movs	r1, #0
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d100      	bne.n	8011502 <strncpy+0x20>
 8011500:	bd10      	pop	{r4, pc}
 8011502:	f803 1b01 	strb.w	r1, [r3], #1
 8011506:	e7f9      	b.n	80114fc <strncpy+0x1a>

08011508 <strstr>:
 8011508:	780a      	ldrb	r2, [r1, #0]
 801150a:	b570      	push	{r4, r5, r6, lr}
 801150c:	b96a      	cbnz	r2, 801152a <strstr+0x22>
 801150e:	bd70      	pop	{r4, r5, r6, pc}
 8011510:	429a      	cmp	r2, r3
 8011512:	d109      	bne.n	8011528 <strstr+0x20>
 8011514:	460c      	mov	r4, r1
 8011516:	4605      	mov	r5, r0
 8011518:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801151c:	2b00      	cmp	r3, #0
 801151e:	d0f6      	beq.n	801150e <strstr+0x6>
 8011520:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011524:	429e      	cmp	r6, r3
 8011526:	d0f7      	beq.n	8011518 <strstr+0x10>
 8011528:	3001      	adds	r0, #1
 801152a:	7803      	ldrb	r3, [r0, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1ef      	bne.n	8011510 <strstr+0x8>
 8011530:	4618      	mov	r0, r3
 8011532:	e7ec      	b.n	801150e <strstr+0x6>

08011534 <_strtoul_l.constprop.0>:
 8011534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011538:	4f36      	ldr	r7, [pc, #216]	; (8011614 <_strtoul_l.constprop.0+0xe0>)
 801153a:	4686      	mov	lr, r0
 801153c:	460d      	mov	r5, r1
 801153e:	4628      	mov	r0, r5
 8011540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011544:	5de6      	ldrb	r6, [r4, r7]
 8011546:	f016 0608 	ands.w	r6, r6, #8
 801154a:	d1f8      	bne.n	801153e <_strtoul_l.constprop.0+0xa>
 801154c:	2c2d      	cmp	r4, #45	; 0x2d
 801154e:	d12f      	bne.n	80115b0 <_strtoul_l.constprop.0+0x7c>
 8011550:	782c      	ldrb	r4, [r5, #0]
 8011552:	2601      	movs	r6, #1
 8011554:	1c85      	adds	r5, r0, #2
 8011556:	2b00      	cmp	r3, #0
 8011558:	d057      	beq.n	801160a <_strtoul_l.constprop.0+0xd6>
 801155a:	2b10      	cmp	r3, #16
 801155c:	d109      	bne.n	8011572 <_strtoul_l.constprop.0+0x3e>
 801155e:	2c30      	cmp	r4, #48	; 0x30
 8011560:	d107      	bne.n	8011572 <_strtoul_l.constprop.0+0x3e>
 8011562:	7828      	ldrb	r0, [r5, #0]
 8011564:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011568:	2858      	cmp	r0, #88	; 0x58
 801156a:	d149      	bne.n	8011600 <_strtoul_l.constprop.0+0xcc>
 801156c:	786c      	ldrb	r4, [r5, #1]
 801156e:	2310      	movs	r3, #16
 8011570:	3502      	adds	r5, #2
 8011572:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011576:	2700      	movs	r7, #0
 8011578:	fbb8 f8f3 	udiv	r8, r8, r3
 801157c:	fb03 f908 	mul.w	r9, r3, r8
 8011580:	ea6f 0909 	mvn.w	r9, r9
 8011584:	4638      	mov	r0, r7
 8011586:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801158a:	f1bc 0f09 	cmp.w	ip, #9
 801158e:	d814      	bhi.n	80115ba <_strtoul_l.constprop.0+0x86>
 8011590:	4664      	mov	r4, ip
 8011592:	42a3      	cmp	r3, r4
 8011594:	dd22      	ble.n	80115dc <_strtoul_l.constprop.0+0xa8>
 8011596:	2f00      	cmp	r7, #0
 8011598:	db1d      	blt.n	80115d6 <_strtoul_l.constprop.0+0xa2>
 801159a:	4580      	cmp	r8, r0
 801159c:	d31b      	bcc.n	80115d6 <_strtoul_l.constprop.0+0xa2>
 801159e:	d101      	bne.n	80115a4 <_strtoul_l.constprop.0+0x70>
 80115a0:	45a1      	cmp	r9, r4
 80115a2:	db18      	blt.n	80115d6 <_strtoul_l.constprop.0+0xa2>
 80115a4:	fb00 4003 	mla	r0, r0, r3, r4
 80115a8:	2701      	movs	r7, #1
 80115aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115ae:	e7ea      	b.n	8011586 <_strtoul_l.constprop.0+0x52>
 80115b0:	2c2b      	cmp	r4, #43	; 0x2b
 80115b2:	bf04      	itt	eq
 80115b4:	782c      	ldrbeq	r4, [r5, #0]
 80115b6:	1c85      	addeq	r5, r0, #2
 80115b8:	e7cd      	b.n	8011556 <_strtoul_l.constprop.0+0x22>
 80115ba:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80115be:	f1bc 0f19 	cmp.w	ip, #25
 80115c2:	d801      	bhi.n	80115c8 <_strtoul_l.constprop.0+0x94>
 80115c4:	3c37      	subs	r4, #55	; 0x37
 80115c6:	e7e4      	b.n	8011592 <_strtoul_l.constprop.0+0x5e>
 80115c8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80115cc:	f1bc 0f19 	cmp.w	ip, #25
 80115d0:	d804      	bhi.n	80115dc <_strtoul_l.constprop.0+0xa8>
 80115d2:	3c57      	subs	r4, #87	; 0x57
 80115d4:	e7dd      	b.n	8011592 <_strtoul_l.constprop.0+0x5e>
 80115d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80115da:	e7e6      	b.n	80115aa <_strtoul_l.constprop.0+0x76>
 80115dc:	2f00      	cmp	r7, #0
 80115de:	da07      	bge.n	80115f0 <_strtoul_l.constprop.0+0xbc>
 80115e0:	2322      	movs	r3, #34	; 0x22
 80115e2:	f8ce 3000 	str.w	r3, [lr]
 80115e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115ea:	b932      	cbnz	r2, 80115fa <_strtoul_l.constprop.0+0xc6>
 80115ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115f0:	b106      	cbz	r6, 80115f4 <_strtoul_l.constprop.0+0xc0>
 80115f2:	4240      	negs	r0, r0
 80115f4:	2a00      	cmp	r2, #0
 80115f6:	d0f9      	beq.n	80115ec <_strtoul_l.constprop.0+0xb8>
 80115f8:	b107      	cbz	r7, 80115fc <_strtoul_l.constprop.0+0xc8>
 80115fa:	1e69      	subs	r1, r5, #1
 80115fc:	6011      	str	r1, [r2, #0]
 80115fe:	e7f5      	b.n	80115ec <_strtoul_l.constprop.0+0xb8>
 8011600:	2430      	movs	r4, #48	; 0x30
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1b5      	bne.n	8011572 <_strtoul_l.constprop.0+0x3e>
 8011606:	2308      	movs	r3, #8
 8011608:	e7b3      	b.n	8011572 <_strtoul_l.constprop.0+0x3e>
 801160a:	2c30      	cmp	r4, #48	; 0x30
 801160c:	d0a9      	beq.n	8011562 <_strtoul_l.constprop.0+0x2e>
 801160e:	230a      	movs	r3, #10
 8011610:	e7af      	b.n	8011572 <_strtoul_l.constprop.0+0x3e>
 8011612:	bf00      	nop
 8011614:	080133e1 	.word	0x080133e1

08011618 <strtoul>:
 8011618:	4613      	mov	r3, r2
 801161a:	460a      	mov	r2, r1
 801161c:	4601      	mov	r1, r0
 801161e:	4802      	ldr	r0, [pc, #8]	; (8011628 <strtoul+0x10>)
 8011620:	6800      	ldr	r0, [r0, #0]
 8011622:	f7ff bf87 	b.w	8011534 <_strtoul_l.constprop.0>
 8011626:	bf00      	nop
 8011628:	2000026c 	.word	0x2000026c

0801162c <_vsniprintf_r>:
 801162c:	b530      	push	{r4, r5, lr}
 801162e:	4614      	mov	r4, r2
 8011630:	2c00      	cmp	r4, #0
 8011632:	b09b      	sub	sp, #108	; 0x6c
 8011634:	4605      	mov	r5, r0
 8011636:	461a      	mov	r2, r3
 8011638:	da05      	bge.n	8011646 <_vsniprintf_r+0x1a>
 801163a:	238b      	movs	r3, #139	; 0x8b
 801163c:	6003      	str	r3, [r0, #0]
 801163e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011642:	b01b      	add	sp, #108	; 0x6c
 8011644:	bd30      	pop	{r4, r5, pc}
 8011646:	f44f 7302 	mov.w	r3, #520	; 0x208
 801164a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801164e:	bf14      	ite	ne
 8011650:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011654:	4623      	moveq	r3, r4
 8011656:	9302      	str	r3, [sp, #8]
 8011658:	9305      	str	r3, [sp, #20]
 801165a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801165e:	9100      	str	r1, [sp, #0]
 8011660:	9104      	str	r1, [sp, #16]
 8011662:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011666:	4669      	mov	r1, sp
 8011668:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801166a:	f000 f9e3 	bl	8011a34 <_svfiprintf_r>
 801166e:	1c43      	adds	r3, r0, #1
 8011670:	bfbc      	itt	lt
 8011672:	238b      	movlt	r3, #139	; 0x8b
 8011674:	602b      	strlt	r3, [r5, #0]
 8011676:	2c00      	cmp	r4, #0
 8011678:	d0e3      	beq.n	8011642 <_vsniprintf_r+0x16>
 801167a:	9b00      	ldr	r3, [sp, #0]
 801167c:	2200      	movs	r2, #0
 801167e:	701a      	strb	r2, [r3, #0]
 8011680:	e7df      	b.n	8011642 <_vsniprintf_r+0x16>
	...

08011684 <vsniprintf>:
 8011684:	b507      	push	{r0, r1, r2, lr}
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	4613      	mov	r3, r2
 801168a:	460a      	mov	r2, r1
 801168c:	4601      	mov	r1, r0
 801168e:	4803      	ldr	r0, [pc, #12]	; (801169c <vsniprintf+0x18>)
 8011690:	6800      	ldr	r0, [r0, #0]
 8011692:	f7ff ffcb 	bl	801162c <_vsniprintf_r>
 8011696:	b003      	add	sp, #12
 8011698:	f85d fb04 	ldr.w	pc, [sp], #4
 801169c:	2000026c 	.word	0x2000026c

080116a0 <__assert_func>:
 80116a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116a2:	4614      	mov	r4, r2
 80116a4:	461a      	mov	r2, r3
 80116a6:	4b09      	ldr	r3, [pc, #36]	; (80116cc <__assert_func+0x2c>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4605      	mov	r5, r0
 80116ac:	68d8      	ldr	r0, [r3, #12]
 80116ae:	b14c      	cbz	r4, 80116c4 <__assert_func+0x24>
 80116b0:	4b07      	ldr	r3, [pc, #28]	; (80116d0 <__assert_func+0x30>)
 80116b2:	9100      	str	r1, [sp, #0]
 80116b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116b8:	4906      	ldr	r1, [pc, #24]	; (80116d4 <__assert_func+0x34>)
 80116ba:	462b      	mov	r3, r5
 80116bc:	f000 f8f0 	bl	80118a0 <fiprintf>
 80116c0:	f000 febc 	bl	801243c <abort>
 80116c4:	4b04      	ldr	r3, [pc, #16]	; (80116d8 <__assert_func+0x38>)
 80116c6:	461c      	mov	r4, r3
 80116c8:	e7f3      	b.n	80116b2 <__assert_func+0x12>
 80116ca:	bf00      	nop
 80116cc:	2000026c 	.word	0x2000026c
 80116d0:	0801355a 	.word	0x0801355a
 80116d4:	08013567 	.word	0x08013567
 80116d8:	08013595 	.word	0x08013595

080116dc <__env_lock>:
 80116dc:	4801      	ldr	r0, [pc, #4]	; (80116e4 <__env_lock+0x8>)
 80116de:	f000 b911 	b.w	8011904 <__retarget_lock_acquire_recursive>
 80116e2:	bf00      	nop
 80116e4:	2000dc9c 	.word	0x2000dc9c

080116e8 <__env_unlock>:
 80116e8:	4801      	ldr	r0, [pc, #4]	; (80116f0 <__env_unlock+0x8>)
 80116ea:	f000 b90c 	b.w	8011906 <__retarget_lock_release_recursive>
 80116ee:	bf00      	nop
 80116f0:	2000dc9c 	.word	0x2000dc9c

080116f4 <std>:
 80116f4:	2300      	movs	r3, #0
 80116f6:	b510      	push	{r4, lr}
 80116f8:	4604      	mov	r4, r0
 80116fa:	e9c0 3300 	strd	r3, r3, [r0]
 80116fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011702:	6083      	str	r3, [r0, #8]
 8011704:	8181      	strh	r1, [r0, #12]
 8011706:	6643      	str	r3, [r0, #100]	; 0x64
 8011708:	81c2      	strh	r2, [r0, #14]
 801170a:	6183      	str	r3, [r0, #24]
 801170c:	4619      	mov	r1, r3
 801170e:	2208      	movs	r2, #8
 8011710:	305c      	adds	r0, #92	; 0x5c
 8011712:	f7ff fcef 	bl	80110f4 <memset>
 8011716:	4b05      	ldr	r3, [pc, #20]	; (801172c <std+0x38>)
 8011718:	6263      	str	r3, [r4, #36]	; 0x24
 801171a:	4b05      	ldr	r3, [pc, #20]	; (8011730 <std+0x3c>)
 801171c:	62a3      	str	r3, [r4, #40]	; 0x28
 801171e:	4b05      	ldr	r3, [pc, #20]	; (8011734 <std+0x40>)
 8011720:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011722:	4b05      	ldr	r3, [pc, #20]	; (8011738 <std+0x44>)
 8011724:	6224      	str	r4, [r4, #32]
 8011726:	6323      	str	r3, [r4, #48]	; 0x30
 8011728:	bd10      	pop	{r4, pc}
 801172a:	bf00      	nop
 801172c:	08012211 	.word	0x08012211
 8011730:	08012233 	.word	0x08012233
 8011734:	0801226b 	.word	0x0801226b
 8011738:	0801228f 	.word	0x0801228f

0801173c <_cleanup_r>:
 801173c:	4901      	ldr	r1, [pc, #4]	; (8011744 <_cleanup_r+0x8>)
 801173e:	f000 b8c1 	b.w	80118c4 <_fwalk_reent>
 8011742:	bf00      	nop
 8011744:	08012579 	.word	0x08012579

08011748 <__sfmoreglue>:
 8011748:	b570      	push	{r4, r5, r6, lr}
 801174a:	2268      	movs	r2, #104	; 0x68
 801174c:	1e4d      	subs	r5, r1, #1
 801174e:	4355      	muls	r5, r2
 8011750:	460e      	mov	r6, r1
 8011752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011756:	f7ff fd57 	bl	8011208 <_malloc_r>
 801175a:	4604      	mov	r4, r0
 801175c:	b140      	cbz	r0, 8011770 <__sfmoreglue+0x28>
 801175e:	2100      	movs	r1, #0
 8011760:	e9c0 1600 	strd	r1, r6, [r0]
 8011764:	300c      	adds	r0, #12
 8011766:	60a0      	str	r0, [r4, #8]
 8011768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801176c:	f7ff fcc2 	bl	80110f4 <memset>
 8011770:	4620      	mov	r0, r4
 8011772:	bd70      	pop	{r4, r5, r6, pc}

08011774 <__sfp_lock_acquire>:
 8011774:	4801      	ldr	r0, [pc, #4]	; (801177c <__sfp_lock_acquire+0x8>)
 8011776:	f000 b8c5 	b.w	8011904 <__retarget_lock_acquire_recursive>
 801177a:	bf00      	nop
 801177c:	2000dc9e 	.word	0x2000dc9e

08011780 <__sfp_lock_release>:
 8011780:	4801      	ldr	r0, [pc, #4]	; (8011788 <__sfp_lock_release+0x8>)
 8011782:	f000 b8c0 	b.w	8011906 <__retarget_lock_release_recursive>
 8011786:	bf00      	nop
 8011788:	2000dc9e 	.word	0x2000dc9e

0801178c <__sinit_lock_acquire>:
 801178c:	4801      	ldr	r0, [pc, #4]	; (8011794 <__sinit_lock_acquire+0x8>)
 801178e:	f000 b8b9 	b.w	8011904 <__retarget_lock_acquire_recursive>
 8011792:	bf00      	nop
 8011794:	2000dc9f 	.word	0x2000dc9f

08011798 <__sinit_lock_release>:
 8011798:	4801      	ldr	r0, [pc, #4]	; (80117a0 <__sinit_lock_release+0x8>)
 801179a:	f000 b8b4 	b.w	8011906 <__retarget_lock_release_recursive>
 801179e:	bf00      	nop
 80117a0:	2000dc9f 	.word	0x2000dc9f

080117a4 <__sinit>:
 80117a4:	b510      	push	{r4, lr}
 80117a6:	4604      	mov	r4, r0
 80117a8:	f7ff fff0 	bl	801178c <__sinit_lock_acquire>
 80117ac:	69a3      	ldr	r3, [r4, #24]
 80117ae:	b11b      	cbz	r3, 80117b8 <__sinit+0x14>
 80117b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b4:	f7ff bff0 	b.w	8011798 <__sinit_lock_release>
 80117b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117bc:	6523      	str	r3, [r4, #80]	; 0x50
 80117be:	4b13      	ldr	r3, [pc, #76]	; (801180c <__sinit+0x68>)
 80117c0:	4a13      	ldr	r2, [pc, #76]	; (8011810 <__sinit+0x6c>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80117c6:	42a3      	cmp	r3, r4
 80117c8:	bf04      	itt	eq
 80117ca:	2301      	moveq	r3, #1
 80117cc:	61a3      	streq	r3, [r4, #24]
 80117ce:	4620      	mov	r0, r4
 80117d0:	f000 f820 	bl	8011814 <__sfp>
 80117d4:	6060      	str	r0, [r4, #4]
 80117d6:	4620      	mov	r0, r4
 80117d8:	f000 f81c 	bl	8011814 <__sfp>
 80117dc:	60a0      	str	r0, [r4, #8]
 80117de:	4620      	mov	r0, r4
 80117e0:	f000 f818 	bl	8011814 <__sfp>
 80117e4:	2200      	movs	r2, #0
 80117e6:	60e0      	str	r0, [r4, #12]
 80117e8:	2104      	movs	r1, #4
 80117ea:	6860      	ldr	r0, [r4, #4]
 80117ec:	f7ff ff82 	bl	80116f4 <std>
 80117f0:	68a0      	ldr	r0, [r4, #8]
 80117f2:	2201      	movs	r2, #1
 80117f4:	2109      	movs	r1, #9
 80117f6:	f7ff ff7d 	bl	80116f4 <std>
 80117fa:	68e0      	ldr	r0, [r4, #12]
 80117fc:	2202      	movs	r2, #2
 80117fe:	2112      	movs	r1, #18
 8011800:	f7ff ff78 	bl	80116f4 <std>
 8011804:	2301      	movs	r3, #1
 8011806:	61a3      	str	r3, [r4, #24]
 8011808:	e7d2      	b.n	80117b0 <__sinit+0xc>
 801180a:	bf00      	nop
 801180c:	080134e4 	.word	0x080134e4
 8011810:	0801173d 	.word	0x0801173d

08011814 <__sfp>:
 8011814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011816:	4607      	mov	r7, r0
 8011818:	f7ff ffac 	bl	8011774 <__sfp_lock_acquire>
 801181c:	4b1e      	ldr	r3, [pc, #120]	; (8011898 <__sfp+0x84>)
 801181e:	681e      	ldr	r6, [r3, #0]
 8011820:	69b3      	ldr	r3, [r6, #24]
 8011822:	b913      	cbnz	r3, 801182a <__sfp+0x16>
 8011824:	4630      	mov	r0, r6
 8011826:	f7ff ffbd 	bl	80117a4 <__sinit>
 801182a:	3648      	adds	r6, #72	; 0x48
 801182c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011830:	3b01      	subs	r3, #1
 8011832:	d503      	bpl.n	801183c <__sfp+0x28>
 8011834:	6833      	ldr	r3, [r6, #0]
 8011836:	b30b      	cbz	r3, 801187c <__sfp+0x68>
 8011838:	6836      	ldr	r6, [r6, #0]
 801183a:	e7f7      	b.n	801182c <__sfp+0x18>
 801183c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011840:	b9d5      	cbnz	r5, 8011878 <__sfp+0x64>
 8011842:	4b16      	ldr	r3, [pc, #88]	; (801189c <__sfp+0x88>)
 8011844:	60e3      	str	r3, [r4, #12]
 8011846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801184a:	6665      	str	r5, [r4, #100]	; 0x64
 801184c:	f000 f859 	bl	8011902 <__retarget_lock_init_recursive>
 8011850:	f7ff ff96 	bl	8011780 <__sfp_lock_release>
 8011854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801185c:	6025      	str	r5, [r4, #0]
 801185e:	61a5      	str	r5, [r4, #24]
 8011860:	2208      	movs	r2, #8
 8011862:	4629      	mov	r1, r5
 8011864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011868:	f7ff fc44 	bl	80110f4 <memset>
 801186c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011874:	4620      	mov	r0, r4
 8011876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011878:	3468      	adds	r4, #104	; 0x68
 801187a:	e7d9      	b.n	8011830 <__sfp+0x1c>
 801187c:	2104      	movs	r1, #4
 801187e:	4638      	mov	r0, r7
 8011880:	f7ff ff62 	bl	8011748 <__sfmoreglue>
 8011884:	4604      	mov	r4, r0
 8011886:	6030      	str	r0, [r6, #0]
 8011888:	2800      	cmp	r0, #0
 801188a:	d1d5      	bne.n	8011838 <__sfp+0x24>
 801188c:	f7ff ff78 	bl	8011780 <__sfp_lock_release>
 8011890:	230c      	movs	r3, #12
 8011892:	603b      	str	r3, [r7, #0]
 8011894:	e7ee      	b.n	8011874 <__sfp+0x60>
 8011896:	bf00      	nop
 8011898:	080134e4 	.word	0x080134e4
 801189c:	ffff0001 	.word	0xffff0001

080118a0 <fiprintf>:
 80118a0:	b40e      	push	{r1, r2, r3}
 80118a2:	b503      	push	{r0, r1, lr}
 80118a4:	4601      	mov	r1, r0
 80118a6:	ab03      	add	r3, sp, #12
 80118a8:	4805      	ldr	r0, [pc, #20]	; (80118c0 <fiprintf+0x20>)
 80118aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ae:	6800      	ldr	r0, [r0, #0]
 80118b0:	9301      	str	r3, [sp, #4]
 80118b2:	f000 f9e9 	bl	8011c88 <_vfiprintf_r>
 80118b6:	b002      	add	sp, #8
 80118b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118bc:	b003      	add	sp, #12
 80118be:	4770      	bx	lr
 80118c0:	2000026c 	.word	0x2000026c

080118c4 <_fwalk_reent>:
 80118c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118c8:	4606      	mov	r6, r0
 80118ca:	4688      	mov	r8, r1
 80118cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118d0:	2700      	movs	r7, #0
 80118d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118d6:	f1b9 0901 	subs.w	r9, r9, #1
 80118da:	d505      	bpl.n	80118e8 <_fwalk_reent+0x24>
 80118dc:	6824      	ldr	r4, [r4, #0]
 80118de:	2c00      	cmp	r4, #0
 80118e0:	d1f7      	bne.n	80118d2 <_fwalk_reent+0xe>
 80118e2:	4638      	mov	r0, r7
 80118e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118e8:	89ab      	ldrh	r3, [r5, #12]
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d907      	bls.n	80118fe <_fwalk_reent+0x3a>
 80118ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118f2:	3301      	adds	r3, #1
 80118f4:	d003      	beq.n	80118fe <_fwalk_reent+0x3a>
 80118f6:	4629      	mov	r1, r5
 80118f8:	4630      	mov	r0, r6
 80118fa:	47c0      	blx	r8
 80118fc:	4307      	orrs	r7, r0
 80118fe:	3568      	adds	r5, #104	; 0x68
 8011900:	e7e9      	b.n	80118d6 <_fwalk_reent+0x12>

08011902 <__retarget_lock_init_recursive>:
 8011902:	4770      	bx	lr

08011904 <__retarget_lock_acquire_recursive>:
 8011904:	4770      	bx	lr

08011906 <__retarget_lock_release_recursive>:
 8011906:	4770      	bx	lr

08011908 <__malloc_lock>:
 8011908:	4801      	ldr	r0, [pc, #4]	; (8011910 <__malloc_lock+0x8>)
 801190a:	f7ff bffb 	b.w	8011904 <__retarget_lock_acquire_recursive>
 801190e:	bf00      	nop
 8011910:	2000dc9d 	.word	0x2000dc9d

08011914 <__malloc_unlock>:
 8011914:	4801      	ldr	r0, [pc, #4]	; (801191c <__malloc_unlock+0x8>)
 8011916:	f7ff bff6 	b.w	8011906 <__retarget_lock_release_recursive>
 801191a:	bf00      	nop
 801191c:	2000dc9d 	.word	0x2000dc9d

08011920 <_realloc_r>:
 8011920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011924:	4680      	mov	r8, r0
 8011926:	4614      	mov	r4, r2
 8011928:	460e      	mov	r6, r1
 801192a:	b921      	cbnz	r1, 8011936 <_realloc_r+0x16>
 801192c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011930:	4611      	mov	r1, r2
 8011932:	f7ff bc69 	b.w	8011208 <_malloc_r>
 8011936:	b92a      	cbnz	r2, 8011944 <_realloc_r+0x24>
 8011938:	f7ff fbfa 	bl	8011130 <_free_r>
 801193c:	4625      	mov	r5, r4
 801193e:	4628      	mov	r0, r5
 8011940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011944:	f000 fee6 	bl	8012714 <_malloc_usable_size_r>
 8011948:	4284      	cmp	r4, r0
 801194a:	4607      	mov	r7, r0
 801194c:	d802      	bhi.n	8011954 <_realloc_r+0x34>
 801194e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011952:	d812      	bhi.n	801197a <_realloc_r+0x5a>
 8011954:	4621      	mov	r1, r4
 8011956:	4640      	mov	r0, r8
 8011958:	f7ff fc56 	bl	8011208 <_malloc_r>
 801195c:	4605      	mov	r5, r0
 801195e:	2800      	cmp	r0, #0
 8011960:	d0ed      	beq.n	801193e <_realloc_r+0x1e>
 8011962:	42bc      	cmp	r4, r7
 8011964:	4622      	mov	r2, r4
 8011966:	4631      	mov	r1, r6
 8011968:	bf28      	it	cs
 801196a:	463a      	movcs	r2, r7
 801196c:	f7ff fbb4 	bl	80110d8 <memcpy>
 8011970:	4631      	mov	r1, r6
 8011972:	4640      	mov	r0, r8
 8011974:	f7ff fbdc 	bl	8011130 <_free_r>
 8011978:	e7e1      	b.n	801193e <_realloc_r+0x1e>
 801197a:	4635      	mov	r5, r6
 801197c:	e7df      	b.n	801193e <_realloc_r+0x1e>

0801197e <__ssputs_r>:
 801197e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011982:	688e      	ldr	r6, [r1, #8]
 8011984:	429e      	cmp	r6, r3
 8011986:	4682      	mov	sl, r0
 8011988:	460c      	mov	r4, r1
 801198a:	4690      	mov	r8, r2
 801198c:	461f      	mov	r7, r3
 801198e:	d838      	bhi.n	8011a02 <__ssputs_r+0x84>
 8011990:	898a      	ldrh	r2, [r1, #12]
 8011992:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011996:	d032      	beq.n	80119fe <__ssputs_r+0x80>
 8011998:	6825      	ldr	r5, [r4, #0]
 801199a:	6909      	ldr	r1, [r1, #16]
 801199c:	eba5 0901 	sub.w	r9, r5, r1
 80119a0:	6965      	ldr	r5, [r4, #20]
 80119a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119aa:	3301      	adds	r3, #1
 80119ac:	444b      	add	r3, r9
 80119ae:	106d      	asrs	r5, r5, #1
 80119b0:	429d      	cmp	r5, r3
 80119b2:	bf38      	it	cc
 80119b4:	461d      	movcc	r5, r3
 80119b6:	0553      	lsls	r3, r2, #21
 80119b8:	d531      	bpl.n	8011a1e <__ssputs_r+0xa0>
 80119ba:	4629      	mov	r1, r5
 80119bc:	f7ff fc24 	bl	8011208 <_malloc_r>
 80119c0:	4606      	mov	r6, r0
 80119c2:	b950      	cbnz	r0, 80119da <__ssputs_r+0x5c>
 80119c4:	230c      	movs	r3, #12
 80119c6:	f8ca 3000 	str.w	r3, [sl]
 80119ca:	89a3      	ldrh	r3, [r4, #12]
 80119cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d0:	81a3      	strh	r3, [r4, #12]
 80119d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119da:	6921      	ldr	r1, [r4, #16]
 80119dc:	464a      	mov	r2, r9
 80119de:	f7ff fb7b 	bl	80110d8 <memcpy>
 80119e2:	89a3      	ldrh	r3, [r4, #12]
 80119e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80119e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119ec:	81a3      	strh	r3, [r4, #12]
 80119ee:	6126      	str	r6, [r4, #16]
 80119f0:	6165      	str	r5, [r4, #20]
 80119f2:	444e      	add	r6, r9
 80119f4:	eba5 0509 	sub.w	r5, r5, r9
 80119f8:	6026      	str	r6, [r4, #0]
 80119fa:	60a5      	str	r5, [r4, #8]
 80119fc:	463e      	mov	r6, r7
 80119fe:	42be      	cmp	r6, r7
 8011a00:	d900      	bls.n	8011a04 <__ssputs_r+0x86>
 8011a02:	463e      	mov	r6, r7
 8011a04:	6820      	ldr	r0, [r4, #0]
 8011a06:	4632      	mov	r2, r6
 8011a08:	4641      	mov	r1, r8
 8011a0a:	f000 fe69 	bl	80126e0 <memmove>
 8011a0e:	68a3      	ldr	r3, [r4, #8]
 8011a10:	1b9b      	subs	r3, r3, r6
 8011a12:	60a3      	str	r3, [r4, #8]
 8011a14:	6823      	ldr	r3, [r4, #0]
 8011a16:	4433      	add	r3, r6
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	e7db      	b.n	80119d6 <__ssputs_r+0x58>
 8011a1e:	462a      	mov	r2, r5
 8011a20:	f7ff ff7e 	bl	8011920 <_realloc_r>
 8011a24:	4606      	mov	r6, r0
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d1e1      	bne.n	80119ee <__ssputs_r+0x70>
 8011a2a:	6921      	ldr	r1, [r4, #16]
 8011a2c:	4650      	mov	r0, sl
 8011a2e:	f7ff fb7f 	bl	8011130 <_free_r>
 8011a32:	e7c7      	b.n	80119c4 <__ssputs_r+0x46>

08011a34 <_svfiprintf_r>:
 8011a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a38:	4698      	mov	r8, r3
 8011a3a:	898b      	ldrh	r3, [r1, #12]
 8011a3c:	061b      	lsls	r3, r3, #24
 8011a3e:	b09d      	sub	sp, #116	; 0x74
 8011a40:	4607      	mov	r7, r0
 8011a42:	460d      	mov	r5, r1
 8011a44:	4614      	mov	r4, r2
 8011a46:	d50e      	bpl.n	8011a66 <_svfiprintf_r+0x32>
 8011a48:	690b      	ldr	r3, [r1, #16]
 8011a4a:	b963      	cbnz	r3, 8011a66 <_svfiprintf_r+0x32>
 8011a4c:	2140      	movs	r1, #64	; 0x40
 8011a4e:	f7ff fbdb 	bl	8011208 <_malloc_r>
 8011a52:	6028      	str	r0, [r5, #0]
 8011a54:	6128      	str	r0, [r5, #16]
 8011a56:	b920      	cbnz	r0, 8011a62 <_svfiprintf_r+0x2e>
 8011a58:	230c      	movs	r3, #12
 8011a5a:	603b      	str	r3, [r7, #0]
 8011a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a60:	e0d1      	b.n	8011c06 <_svfiprintf_r+0x1d2>
 8011a62:	2340      	movs	r3, #64	; 0x40
 8011a64:	616b      	str	r3, [r5, #20]
 8011a66:	2300      	movs	r3, #0
 8011a68:	9309      	str	r3, [sp, #36]	; 0x24
 8011a6a:	2320      	movs	r3, #32
 8011a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a74:	2330      	movs	r3, #48	; 0x30
 8011a76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011c20 <_svfiprintf_r+0x1ec>
 8011a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a7e:	f04f 0901 	mov.w	r9, #1
 8011a82:	4623      	mov	r3, r4
 8011a84:	469a      	mov	sl, r3
 8011a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a8a:	b10a      	cbz	r2, 8011a90 <_svfiprintf_r+0x5c>
 8011a8c:	2a25      	cmp	r2, #37	; 0x25
 8011a8e:	d1f9      	bne.n	8011a84 <_svfiprintf_r+0x50>
 8011a90:	ebba 0b04 	subs.w	fp, sl, r4
 8011a94:	d00b      	beq.n	8011aae <_svfiprintf_r+0x7a>
 8011a96:	465b      	mov	r3, fp
 8011a98:	4622      	mov	r2, r4
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	4638      	mov	r0, r7
 8011a9e:	f7ff ff6e 	bl	801197e <__ssputs_r>
 8011aa2:	3001      	adds	r0, #1
 8011aa4:	f000 80aa 	beq.w	8011bfc <_svfiprintf_r+0x1c8>
 8011aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011aaa:	445a      	add	r2, fp
 8011aac:	9209      	str	r2, [sp, #36]	; 0x24
 8011aae:	f89a 3000 	ldrb.w	r3, [sl]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f000 80a2 	beq.w	8011bfc <_svfiprintf_r+0x1c8>
 8011ab8:	2300      	movs	r3, #0
 8011aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ac2:	f10a 0a01 	add.w	sl, sl, #1
 8011ac6:	9304      	str	r3, [sp, #16]
 8011ac8:	9307      	str	r3, [sp, #28]
 8011aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ace:	931a      	str	r3, [sp, #104]	; 0x68
 8011ad0:	4654      	mov	r4, sl
 8011ad2:	2205      	movs	r2, #5
 8011ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ad8:	4851      	ldr	r0, [pc, #324]	; (8011c20 <_svfiprintf_r+0x1ec>)
 8011ada:	f7ee fbb1 	bl	8000240 <memchr>
 8011ade:	9a04      	ldr	r2, [sp, #16]
 8011ae0:	b9d8      	cbnz	r0, 8011b1a <_svfiprintf_r+0xe6>
 8011ae2:	06d0      	lsls	r0, r2, #27
 8011ae4:	bf44      	itt	mi
 8011ae6:	2320      	movmi	r3, #32
 8011ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011aec:	0711      	lsls	r1, r2, #28
 8011aee:	bf44      	itt	mi
 8011af0:	232b      	movmi	r3, #43	; 0x2b
 8011af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011af6:	f89a 3000 	ldrb.w	r3, [sl]
 8011afa:	2b2a      	cmp	r3, #42	; 0x2a
 8011afc:	d015      	beq.n	8011b2a <_svfiprintf_r+0xf6>
 8011afe:	9a07      	ldr	r2, [sp, #28]
 8011b00:	4654      	mov	r4, sl
 8011b02:	2000      	movs	r0, #0
 8011b04:	f04f 0c0a 	mov.w	ip, #10
 8011b08:	4621      	mov	r1, r4
 8011b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b0e:	3b30      	subs	r3, #48	; 0x30
 8011b10:	2b09      	cmp	r3, #9
 8011b12:	d94e      	bls.n	8011bb2 <_svfiprintf_r+0x17e>
 8011b14:	b1b0      	cbz	r0, 8011b44 <_svfiprintf_r+0x110>
 8011b16:	9207      	str	r2, [sp, #28]
 8011b18:	e014      	b.n	8011b44 <_svfiprintf_r+0x110>
 8011b1a:	eba0 0308 	sub.w	r3, r0, r8
 8011b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8011b22:	4313      	orrs	r3, r2
 8011b24:	9304      	str	r3, [sp, #16]
 8011b26:	46a2      	mov	sl, r4
 8011b28:	e7d2      	b.n	8011ad0 <_svfiprintf_r+0x9c>
 8011b2a:	9b03      	ldr	r3, [sp, #12]
 8011b2c:	1d19      	adds	r1, r3, #4
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	9103      	str	r1, [sp, #12]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	bfbb      	ittet	lt
 8011b36:	425b      	neglt	r3, r3
 8011b38:	f042 0202 	orrlt.w	r2, r2, #2
 8011b3c:	9307      	strge	r3, [sp, #28]
 8011b3e:	9307      	strlt	r3, [sp, #28]
 8011b40:	bfb8      	it	lt
 8011b42:	9204      	strlt	r2, [sp, #16]
 8011b44:	7823      	ldrb	r3, [r4, #0]
 8011b46:	2b2e      	cmp	r3, #46	; 0x2e
 8011b48:	d10c      	bne.n	8011b64 <_svfiprintf_r+0x130>
 8011b4a:	7863      	ldrb	r3, [r4, #1]
 8011b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8011b4e:	d135      	bne.n	8011bbc <_svfiprintf_r+0x188>
 8011b50:	9b03      	ldr	r3, [sp, #12]
 8011b52:	1d1a      	adds	r2, r3, #4
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	9203      	str	r2, [sp, #12]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	bfb8      	it	lt
 8011b5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011b60:	3402      	adds	r4, #2
 8011b62:	9305      	str	r3, [sp, #20]
 8011b64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011c30 <_svfiprintf_r+0x1fc>
 8011b68:	7821      	ldrb	r1, [r4, #0]
 8011b6a:	2203      	movs	r2, #3
 8011b6c:	4650      	mov	r0, sl
 8011b6e:	f7ee fb67 	bl	8000240 <memchr>
 8011b72:	b140      	cbz	r0, 8011b86 <_svfiprintf_r+0x152>
 8011b74:	2340      	movs	r3, #64	; 0x40
 8011b76:	eba0 000a 	sub.w	r0, r0, sl
 8011b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8011b7e:	9b04      	ldr	r3, [sp, #16]
 8011b80:	4303      	orrs	r3, r0
 8011b82:	3401      	adds	r4, #1
 8011b84:	9304      	str	r3, [sp, #16]
 8011b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b8a:	4826      	ldr	r0, [pc, #152]	; (8011c24 <_svfiprintf_r+0x1f0>)
 8011b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b90:	2206      	movs	r2, #6
 8011b92:	f7ee fb55 	bl	8000240 <memchr>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d038      	beq.n	8011c0c <_svfiprintf_r+0x1d8>
 8011b9a:	4b23      	ldr	r3, [pc, #140]	; (8011c28 <_svfiprintf_r+0x1f4>)
 8011b9c:	bb1b      	cbnz	r3, 8011be6 <_svfiprintf_r+0x1b2>
 8011b9e:	9b03      	ldr	r3, [sp, #12]
 8011ba0:	3307      	adds	r3, #7
 8011ba2:	f023 0307 	bic.w	r3, r3, #7
 8011ba6:	3308      	adds	r3, #8
 8011ba8:	9303      	str	r3, [sp, #12]
 8011baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bac:	4433      	add	r3, r6
 8011bae:	9309      	str	r3, [sp, #36]	; 0x24
 8011bb0:	e767      	b.n	8011a82 <_svfiprintf_r+0x4e>
 8011bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	2001      	movs	r0, #1
 8011bba:	e7a5      	b.n	8011b08 <_svfiprintf_r+0xd4>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	3401      	adds	r4, #1
 8011bc0:	9305      	str	r3, [sp, #20]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	f04f 0c0a 	mov.w	ip, #10
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bce:	3a30      	subs	r2, #48	; 0x30
 8011bd0:	2a09      	cmp	r2, #9
 8011bd2:	d903      	bls.n	8011bdc <_svfiprintf_r+0x1a8>
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d0c5      	beq.n	8011b64 <_svfiprintf_r+0x130>
 8011bd8:	9105      	str	r1, [sp, #20]
 8011bda:	e7c3      	b.n	8011b64 <_svfiprintf_r+0x130>
 8011bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011be0:	4604      	mov	r4, r0
 8011be2:	2301      	movs	r3, #1
 8011be4:	e7f0      	b.n	8011bc8 <_svfiprintf_r+0x194>
 8011be6:	ab03      	add	r3, sp, #12
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	462a      	mov	r2, r5
 8011bec:	4b0f      	ldr	r3, [pc, #60]	; (8011c2c <_svfiprintf_r+0x1f8>)
 8011bee:	a904      	add	r1, sp, #16
 8011bf0:	4638      	mov	r0, r7
 8011bf2:	f3af 8000 	nop.w
 8011bf6:	1c42      	adds	r2, r0, #1
 8011bf8:	4606      	mov	r6, r0
 8011bfa:	d1d6      	bne.n	8011baa <_svfiprintf_r+0x176>
 8011bfc:	89ab      	ldrh	r3, [r5, #12]
 8011bfe:	065b      	lsls	r3, r3, #25
 8011c00:	f53f af2c 	bmi.w	8011a5c <_svfiprintf_r+0x28>
 8011c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c06:	b01d      	add	sp, #116	; 0x74
 8011c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0c:	ab03      	add	r3, sp, #12
 8011c0e:	9300      	str	r3, [sp, #0]
 8011c10:	462a      	mov	r2, r5
 8011c12:	4b06      	ldr	r3, [pc, #24]	; (8011c2c <_svfiprintf_r+0x1f8>)
 8011c14:	a904      	add	r1, sp, #16
 8011c16:	4638      	mov	r0, r7
 8011c18:	f000 f9d4 	bl	8011fc4 <_printf_i>
 8011c1c:	e7eb      	b.n	8011bf6 <_svfiprintf_r+0x1c2>
 8011c1e:	bf00      	nop
 8011c20:	080135f8 	.word	0x080135f8
 8011c24:	08013602 	.word	0x08013602
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	0801197f 	.word	0x0801197f
 8011c30:	080135fe 	.word	0x080135fe

08011c34 <__sfputc_r>:
 8011c34:	6893      	ldr	r3, [r2, #8]
 8011c36:	3b01      	subs	r3, #1
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	b410      	push	{r4}
 8011c3c:	6093      	str	r3, [r2, #8]
 8011c3e:	da08      	bge.n	8011c52 <__sfputc_r+0x1e>
 8011c40:	6994      	ldr	r4, [r2, #24]
 8011c42:	42a3      	cmp	r3, r4
 8011c44:	db01      	blt.n	8011c4a <__sfputc_r+0x16>
 8011c46:	290a      	cmp	r1, #10
 8011c48:	d103      	bne.n	8011c52 <__sfputc_r+0x1e>
 8011c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c4e:	f000 bb23 	b.w	8012298 <__swbuf_r>
 8011c52:	6813      	ldr	r3, [r2, #0]
 8011c54:	1c58      	adds	r0, r3, #1
 8011c56:	6010      	str	r0, [r2, #0]
 8011c58:	7019      	strb	r1, [r3, #0]
 8011c5a:	4608      	mov	r0, r1
 8011c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c60:	4770      	bx	lr

08011c62 <__sfputs_r>:
 8011c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c64:	4606      	mov	r6, r0
 8011c66:	460f      	mov	r7, r1
 8011c68:	4614      	mov	r4, r2
 8011c6a:	18d5      	adds	r5, r2, r3
 8011c6c:	42ac      	cmp	r4, r5
 8011c6e:	d101      	bne.n	8011c74 <__sfputs_r+0x12>
 8011c70:	2000      	movs	r0, #0
 8011c72:	e007      	b.n	8011c84 <__sfputs_r+0x22>
 8011c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c78:	463a      	mov	r2, r7
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7ff ffda 	bl	8011c34 <__sfputc_r>
 8011c80:	1c43      	adds	r3, r0, #1
 8011c82:	d1f3      	bne.n	8011c6c <__sfputs_r+0xa>
 8011c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c88 <_vfiprintf_r>:
 8011c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c8c:	460d      	mov	r5, r1
 8011c8e:	b09d      	sub	sp, #116	; 0x74
 8011c90:	4614      	mov	r4, r2
 8011c92:	4698      	mov	r8, r3
 8011c94:	4606      	mov	r6, r0
 8011c96:	b118      	cbz	r0, 8011ca0 <_vfiprintf_r+0x18>
 8011c98:	6983      	ldr	r3, [r0, #24]
 8011c9a:	b90b      	cbnz	r3, 8011ca0 <_vfiprintf_r+0x18>
 8011c9c:	f7ff fd82 	bl	80117a4 <__sinit>
 8011ca0:	4b89      	ldr	r3, [pc, #548]	; (8011ec8 <_vfiprintf_r+0x240>)
 8011ca2:	429d      	cmp	r5, r3
 8011ca4:	d11b      	bne.n	8011cde <_vfiprintf_r+0x56>
 8011ca6:	6875      	ldr	r5, [r6, #4]
 8011ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011caa:	07d9      	lsls	r1, r3, #31
 8011cac:	d405      	bmi.n	8011cba <_vfiprintf_r+0x32>
 8011cae:	89ab      	ldrh	r3, [r5, #12]
 8011cb0:	059a      	lsls	r2, r3, #22
 8011cb2:	d402      	bmi.n	8011cba <_vfiprintf_r+0x32>
 8011cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cb6:	f7ff fe25 	bl	8011904 <__retarget_lock_acquire_recursive>
 8011cba:	89ab      	ldrh	r3, [r5, #12]
 8011cbc:	071b      	lsls	r3, r3, #28
 8011cbe:	d501      	bpl.n	8011cc4 <_vfiprintf_r+0x3c>
 8011cc0:	692b      	ldr	r3, [r5, #16]
 8011cc2:	b9eb      	cbnz	r3, 8011d00 <_vfiprintf_r+0x78>
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	f000 fb4a 	bl	8012360 <__swsetup_r>
 8011ccc:	b1c0      	cbz	r0, 8011d00 <_vfiprintf_r+0x78>
 8011cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011cd0:	07dc      	lsls	r4, r3, #31
 8011cd2:	d50e      	bpl.n	8011cf2 <_vfiprintf_r+0x6a>
 8011cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cd8:	b01d      	add	sp, #116	; 0x74
 8011cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cde:	4b7b      	ldr	r3, [pc, #492]	; (8011ecc <_vfiprintf_r+0x244>)
 8011ce0:	429d      	cmp	r5, r3
 8011ce2:	d101      	bne.n	8011ce8 <_vfiprintf_r+0x60>
 8011ce4:	68b5      	ldr	r5, [r6, #8]
 8011ce6:	e7df      	b.n	8011ca8 <_vfiprintf_r+0x20>
 8011ce8:	4b79      	ldr	r3, [pc, #484]	; (8011ed0 <_vfiprintf_r+0x248>)
 8011cea:	429d      	cmp	r5, r3
 8011cec:	bf08      	it	eq
 8011cee:	68f5      	ldreq	r5, [r6, #12]
 8011cf0:	e7da      	b.n	8011ca8 <_vfiprintf_r+0x20>
 8011cf2:	89ab      	ldrh	r3, [r5, #12]
 8011cf4:	0598      	lsls	r0, r3, #22
 8011cf6:	d4ed      	bmi.n	8011cd4 <_vfiprintf_r+0x4c>
 8011cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cfa:	f7ff fe04 	bl	8011906 <__retarget_lock_release_recursive>
 8011cfe:	e7e9      	b.n	8011cd4 <_vfiprintf_r+0x4c>
 8011d00:	2300      	movs	r3, #0
 8011d02:	9309      	str	r3, [sp, #36]	; 0x24
 8011d04:	2320      	movs	r3, #32
 8011d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d0e:	2330      	movs	r3, #48	; 0x30
 8011d10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ed4 <_vfiprintf_r+0x24c>
 8011d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d18:	f04f 0901 	mov.w	r9, #1
 8011d1c:	4623      	mov	r3, r4
 8011d1e:	469a      	mov	sl, r3
 8011d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d24:	b10a      	cbz	r2, 8011d2a <_vfiprintf_r+0xa2>
 8011d26:	2a25      	cmp	r2, #37	; 0x25
 8011d28:	d1f9      	bne.n	8011d1e <_vfiprintf_r+0x96>
 8011d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8011d2e:	d00b      	beq.n	8011d48 <_vfiprintf_r+0xc0>
 8011d30:	465b      	mov	r3, fp
 8011d32:	4622      	mov	r2, r4
 8011d34:	4629      	mov	r1, r5
 8011d36:	4630      	mov	r0, r6
 8011d38:	f7ff ff93 	bl	8011c62 <__sfputs_r>
 8011d3c:	3001      	adds	r0, #1
 8011d3e:	f000 80aa 	beq.w	8011e96 <_vfiprintf_r+0x20e>
 8011d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d44:	445a      	add	r2, fp
 8011d46:	9209      	str	r2, [sp, #36]	; 0x24
 8011d48:	f89a 3000 	ldrb.w	r3, [sl]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	f000 80a2 	beq.w	8011e96 <_vfiprintf_r+0x20e>
 8011d52:	2300      	movs	r3, #0
 8011d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d5c:	f10a 0a01 	add.w	sl, sl, #1
 8011d60:	9304      	str	r3, [sp, #16]
 8011d62:	9307      	str	r3, [sp, #28]
 8011d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d68:	931a      	str	r3, [sp, #104]	; 0x68
 8011d6a:	4654      	mov	r4, sl
 8011d6c:	2205      	movs	r2, #5
 8011d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d72:	4858      	ldr	r0, [pc, #352]	; (8011ed4 <_vfiprintf_r+0x24c>)
 8011d74:	f7ee fa64 	bl	8000240 <memchr>
 8011d78:	9a04      	ldr	r2, [sp, #16]
 8011d7a:	b9d8      	cbnz	r0, 8011db4 <_vfiprintf_r+0x12c>
 8011d7c:	06d1      	lsls	r1, r2, #27
 8011d7e:	bf44      	itt	mi
 8011d80:	2320      	movmi	r3, #32
 8011d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d86:	0713      	lsls	r3, r2, #28
 8011d88:	bf44      	itt	mi
 8011d8a:	232b      	movmi	r3, #43	; 0x2b
 8011d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d90:	f89a 3000 	ldrb.w	r3, [sl]
 8011d94:	2b2a      	cmp	r3, #42	; 0x2a
 8011d96:	d015      	beq.n	8011dc4 <_vfiprintf_r+0x13c>
 8011d98:	9a07      	ldr	r2, [sp, #28]
 8011d9a:	4654      	mov	r4, sl
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	f04f 0c0a 	mov.w	ip, #10
 8011da2:	4621      	mov	r1, r4
 8011da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011da8:	3b30      	subs	r3, #48	; 0x30
 8011daa:	2b09      	cmp	r3, #9
 8011dac:	d94e      	bls.n	8011e4c <_vfiprintf_r+0x1c4>
 8011dae:	b1b0      	cbz	r0, 8011dde <_vfiprintf_r+0x156>
 8011db0:	9207      	str	r2, [sp, #28]
 8011db2:	e014      	b.n	8011dde <_vfiprintf_r+0x156>
 8011db4:	eba0 0308 	sub.w	r3, r0, r8
 8011db8:	fa09 f303 	lsl.w	r3, r9, r3
 8011dbc:	4313      	orrs	r3, r2
 8011dbe:	9304      	str	r3, [sp, #16]
 8011dc0:	46a2      	mov	sl, r4
 8011dc2:	e7d2      	b.n	8011d6a <_vfiprintf_r+0xe2>
 8011dc4:	9b03      	ldr	r3, [sp, #12]
 8011dc6:	1d19      	adds	r1, r3, #4
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	9103      	str	r1, [sp, #12]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	bfbb      	ittet	lt
 8011dd0:	425b      	neglt	r3, r3
 8011dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8011dd6:	9307      	strge	r3, [sp, #28]
 8011dd8:	9307      	strlt	r3, [sp, #28]
 8011dda:	bfb8      	it	lt
 8011ddc:	9204      	strlt	r2, [sp, #16]
 8011dde:	7823      	ldrb	r3, [r4, #0]
 8011de0:	2b2e      	cmp	r3, #46	; 0x2e
 8011de2:	d10c      	bne.n	8011dfe <_vfiprintf_r+0x176>
 8011de4:	7863      	ldrb	r3, [r4, #1]
 8011de6:	2b2a      	cmp	r3, #42	; 0x2a
 8011de8:	d135      	bne.n	8011e56 <_vfiprintf_r+0x1ce>
 8011dea:	9b03      	ldr	r3, [sp, #12]
 8011dec:	1d1a      	adds	r2, r3, #4
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	9203      	str	r2, [sp, #12]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	bfb8      	it	lt
 8011df6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011dfa:	3402      	adds	r4, #2
 8011dfc:	9305      	str	r3, [sp, #20]
 8011dfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011ee4 <_vfiprintf_r+0x25c>
 8011e02:	7821      	ldrb	r1, [r4, #0]
 8011e04:	2203      	movs	r2, #3
 8011e06:	4650      	mov	r0, sl
 8011e08:	f7ee fa1a 	bl	8000240 <memchr>
 8011e0c:	b140      	cbz	r0, 8011e20 <_vfiprintf_r+0x198>
 8011e0e:	2340      	movs	r3, #64	; 0x40
 8011e10:	eba0 000a 	sub.w	r0, r0, sl
 8011e14:	fa03 f000 	lsl.w	r0, r3, r0
 8011e18:	9b04      	ldr	r3, [sp, #16]
 8011e1a:	4303      	orrs	r3, r0
 8011e1c:	3401      	adds	r4, #1
 8011e1e:	9304      	str	r3, [sp, #16]
 8011e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e24:	482c      	ldr	r0, [pc, #176]	; (8011ed8 <_vfiprintf_r+0x250>)
 8011e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e2a:	2206      	movs	r2, #6
 8011e2c:	f7ee fa08 	bl	8000240 <memchr>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d03f      	beq.n	8011eb4 <_vfiprintf_r+0x22c>
 8011e34:	4b29      	ldr	r3, [pc, #164]	; (8011edc <_vfiprintf_r+0x254>)
 8011e36:	bb1b      	cbnz	r3, 8011e80 <_vfiprintf_r+0x1f8>
 8011e38:	9b03      	ldr	r3, [sp, #12]
 8011e3a:	3307      	adds	r3, #7
 8011e3c:	f023 0307 	bic.w	r3, r3, #7
 8011e40:	3308      	adds	r3, #8
 8011e42:	9303      	str	r3, [sp, #12]
 8011e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e46:	443b      	add	r3, r7
 8011e48:	9309      	str	r3, [sp, #36]	; 0x24
 8011e4a:	e767      	b.n	8011d1c <_vfiprintf_r+0x94>
 8011e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e50:	460c      	mov	r4, r1
 8011e52:	2001      	movs	r0, #1
 8011e54:	e7a5      	b.n	8011da2 <_vfiprintf_r+0x11a>
 8011e56:	2300      	movs	r3, #0
 8011e58:	3401      	adds	r4, #1
 8011e5a:	9305      	str	r3, [sp, #20]
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	f04f 0c0a 	mov.w	ip, #10
 8011e62:	4620      	mov	r0, r4
 8011e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e68:	3a30      	subs	r2, #48	; 0x30
 8011e6a:	2a09      	cmp	r2, #9
 8011e6c:	d903      	bls.n	8011e76 <_vfiprintf_r+0x1ee>
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d0c5      	beq.n	8011dfe <_vfiprintf_r+0x176>
 8011e72:	9105      	str	r1, [sp, #20]
 8011e74:	e7c3      	b.n	8011dfe <_vfiprintf_r+0x176>
 8011e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e7f0      	b.n	8011e62 <_vfiprintf_r+0x1da>
 8011e80:	ab03      	add	r3, sp, #12
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	462a      	mov	r2, r5
 8011e86:	4b16      	ldr	r3, [pc, #88]	; (8011ee0 <_vfiprintf_r+0x258>)
 8011e88:	a904      	add	r1, sp, #16
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f3af 8000 	nop.w
 8011e90:	4607      	mov	r7, r0
 8011e92:	1c78      	adds	r0, r7, #1
 8011e94:	d1d6      	bne.n	8011e44 <_vfiprintf_r+0x1bc>
 8011e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e98:	07d9      	lsls	r1, r3, #31
 8011e9a:	d405      	bmi.n	8011ea8 <_vfiprintf_r+0x220>
 8011e9c:	89ab      	ldrh	r3, [r5, #12]
 8011e9e:	059a      	lsls	r2, r3, #22
 8011ea0:	d402      	bmi.n	8011ea8 <_vfiprintf_r+0x220>
 8011ea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ea4:	f7ff fd2f 	bl	8011906 <__retarget_lock_release_recursive>
 8011ea8:	89ab      	ldrh	r3, [r5, #12]
 8011eaa:	065b      	lsls	r3, r3, #25
 8011eac:	f53f af12 	bmi.w	8011cd4 <_vfiprintf_r+0x4c>
 8011eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011eb2:	e711      	b.n	8011cd8 <_vfiprintf_r+0x50>
 8011eb4:	ab03      	add	r3, sp, #12
 8011eb6:	9300      	str	r3, [sp, #0]
 8011eb8:	462a      	mov	r2, r5
 8011eba:	4b09      	ldr	r3, [pc, #36]	; (8011ee0 <_vfiprintf_r+0x258>)
 8011ebc:	a904      	add	r1, sp, #16
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f000 f880 	bl	8011fc4 <_printf_i>
 8011ec4:	e7e4      	b.n	8011e90 <_vfiprintf_r+0x208>
 8011ec6:	bf00      	nop
 8011ec8:	080135b8 	.word	0x080135b8
 8011ecc:	080135d8 	.word	0x080135d8
 8011ed0:	08013598 	.word	0x08013598
 8011ed4:	080135f8 	.word	0x080135f8
 8011ed8:	08013602 	.word	0x08013602
 8011edc:	00000000 	.word	0x00000000
 8011ee0:	08011c63 	.word	0x08011c63
 8011ee4:	080135fe 	.word	0x080135fe

08011ee8 <_printf_common>:
 8011ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eec:	4616      	mov	r6, r2
 8011eee:	4699      	mov	r9, r3
 8011ef0:	688a      	ldr	r2, [r1, #8]
 8011ef2:	690b      	ldr	r3, [r1, #16]
 8011ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	bfb8      	it	lt
 8011efc:	4613      	movlt	r3, r2
 8011efe:	6033      	str	r3, [r6, #0]
 8011f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f04:	4607      	mov	r7, r0
 8011f06:	460c      	mov	r4, r1
 8011f08:	b10a      	cbz	r2, 8011f0e <_printf_common+0x26>
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	6033      	str	r3, [r6, #0]
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	0699      	lsls	r1, r3, #26
 8011f12:	bf42      	ittt	mi
 8011f14:	6833      	ldrmi	r3, [r6, #0]
 8011f16:	3302      	addmi	r3, #2
 8011f18:	6033      	strmi	r3, [r6, #0]
 8011f1a:	6825      	ldr	r5, [r4, #0]
 8011f1c:	f015 0506 	ands.w	r5, r5, #6
 8011f20:	d106      	bne.n	8011f30 <_printf_common+0x48>
 8011f22:	f104 0a19 	add.w	sl, r4, #25
 8011f26:	68e3      	ldr	r3, [r4, #12]
 8011f28:	6832      	ldr	r2, [r6, #0]
 8011f2a:	1a9b      	subs	r3, r3, r2
 8011f2c:	42ab      	cmp	r3, r5
 8011f2e:	dc26      	bgt.n	8011f7e <_printf_common+0x96>
 8011f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f34:	1e13      	subs	r3, r2, #0
 8011f36:	6822      	ldr	r2, [r4, #0]
 8011f38:	bf18      	it	ne
 8011f3a:	2301      	movne	r3, #1
 8011f3c:	0692      	lsls	r2, r2, #26
 8011f3e:	d42b      	bmi.n	8011f98 <_printf_common+0xb0>
 8011f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f44:	4649      	mov	r1, r9
 8011f46:	4638      	mov	r0, r7
 8011f48:	47c0      	blx	r8
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	d01e      	beq.n	8011f8c <_printf_common+0xa4>
 8011f4e:	6823      	ldr	r3, [r4, #0]
 8011f50:	68e5      	ldr	r5, [r4, #12]
 8011f52:	6832      	ldr	r2, [r6, #0]
 8011f54:	f003 0306 	and.w	r3, r3, #6
 8011f58:	2b04      	cmp	r3, #4
 8011f5a:	bf08      	it	eq
 8011f5c:	1aad      	subeq	r5, r5, r2
 8011f5e:	68a3      	ldr	r3, [r4, #8]
 8011f60:	6922      	ldr	r2, [r4, #16]
 8011f62:	bf0c      	ite	eq
 8011f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f68:	2500      	movne	r5, #0
 8011f6a:	4293      	cmp	r3, r2
 8011f6c:	bfc4      	itt	gt
 8011f6e:	1a9b      	subgt	r3, r3, r2
 8011f70:	18ed      	addgt	r5, r5, r3
 8011f72:	2600      	movs	r6, #0
 8011f74:	341a      	adds	r4, #26
 8011f76:	42b5      	cmp	r5, r6
 8011f78:	d11a      	bne.n	8011fb0 <_printf_common+0xc8>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e008      	b.n	8011f90 <_printf_common+0xa8>
 8011f7e:	2301      	movs	r3, #1
 8011f80:	4652      	mov	r2, sl
 8011f82:	4649      	mov	r1, r9
 8011f84:	4638      	mov	r0, r7
 8011f86:	47c0      	blx	r8
 8011f88:	3001      	adds	r0, #1
 8011f8a:	d103      	bne.n	8011f94 <_printf_common+0xac>
 8011f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f94:	3501      	adds	r5, #1
 8011f96:	e7c6      	b.n	8011f26 <_printf_common+0x3e>
 8011f98:	18e1      	adds	r1, r4, r3
 8011f9a:	1c5a      	adds	r2, r3, #1
 8011f9c:	2030      	movs	r0, #48	; 0x30
 8011f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011fa2:	4422      	add	r2, r4
 8011fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011fac:	3302      	adds	r3, #2
 8011fae:	e7c7      	b.n	8011f40 <_printf_common+0x58>
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	4622      	mov	r2, r4
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	4638      	mov	r0, r7
 8011fb8:	47c0      	blx	r8
 8011fba:	3001      	adds	r0, #1
 8011fbc:	d0e6      	beq.n	8011f8c <_printf_common+0xa4>
 8011fbe:	3601      	adds	r6, #1
 8011fc0:	e7d9      	b.n	8011f76 <_printf_common+0x8e>
	...

08011fc4 <_printf_i>:
 8011fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc8:	7e0f      	ldrb	r7, [r1, #24]
 8011fca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011fcc:	2f78      	cmp	r7, #120	; 0x78
 8011fce:	4691      	mov	r9, r2
 8011fd0:	4680      	mov	r8, r0
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	469a      	mov	sl, r3
 8011fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011fda:	d807      	bhi.n	8011fec <_printf_i+0x28>
 8011fdc:	2f62      	cmp	r7, #98	; 0x62
 8011fde:	d80a      	bhi.n	8011ff6 <_printf_i+0x32>
 8011fe0:	2f00      	cmp	r7, #0
 8011fe2:	f000 80d8 	beq.w	8012196 <_printf_i+0x1d2>
 8011fe6:	2f58      	cmp	r7, #88	; 0x58
 8011fe8:	f000 80a3 	beq.w	8012132 <_printf_i+0x16e>
 8011fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ff4:	e03a      	b.n	801206c <_printf_i+0xa8>
 8011ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ffa:	2b15      	cmp	r3, #21
 8011ffc:	d8f6      	bhi.n	8011fec <_printf_i+0x28>
 8011ffe:	a101      	add	r1, pc, #4	; (adr r1, 8012004 <_printf_i+0x40>)
 8012000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012004:	0801205d 	.word	0x0801205d
 8012008:	08012071 	.word	0x08012071
 801200c:	08011fed 	.word	0x08011fed
 8012010:	08011fed 	.word	0x08011fed
 8012014:	08011fed 	.word	0x08011fed
 8012018:	08011fed 	.word	0x08011fed
 801201c:	08012071 	.word	0x08012071
 8012020:	08011fed 	.word	0x08011fed
 8012024:	08011fed 	.word	0x08011fed
 8012028:	08011fed 	.word	0x08011fed
 801202c:	08011fed 	.word	0x08011fed
 8012030:	0801217d 	.word	0x0801217d
 8012034:	080120a1 	.word	0x080120a1
 8012038:	0801215f 	.word	0x0801215f
 801203c:	08011fed 	.word	0x08011fed
 8012040:	08011fed 	.word	0x08011fed
 8012044:	0801219f 	.word	0x0801219f
 8012048:	08011fed 	.word	0x08011fed
 801204c:	080120a1 	.word	0x080120a1
 8012050:	08011fed 	.word	0x08011fed
 8012054:	08011fed 	.word	0x08011fed
 8012058:	08012167 	.word	0x08012167
 801205c:	682b      	ldr	r3, [r5, #0]
 801205e:	1d1a      	adds	r2, r3, #4
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	602a      	str	r2, [r5, #0]
 8012064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801206c:	2301      	movs	r3, #1
 801206e:	e0a3      	b.n	80121b8 <_printf_i+0x1f4>
 8012070:	6820      	ldr	r0, [r4, #0]
 8012072:	6829      	ldr	r1, [r5, #0]
 8012074:	0606      	lsls	r6, r0, #24
 8012076:	f101 0304 	add.w	r3, r1, #4
 801207a:	d50a      	bpl.n	8012092 <_printf_i+0xce>
 801207c:	680e      	ldr	r6, [r1, #0]
 801207e:	602b      	str	r3, [r5, #0]
 8012080:	2e00      	cmp	r6, #0
 8012082:	da03      	bge.n	801208c <_printf_i+0xc8>
 8012084:	232d      	movs	r3, #45	; 0x2d
 8012086:	4276      	negs	r6, r6
 8012088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801208c:	485e      	ldr	r0, [pc, #376]	; (8012208 <_printf_i+0x244>)
 801208e:	230a      	movs	r3, #10
 8012090:	e019      	b.n	80120c6 <_printf_i+0x102>
 8012092:	680e      	ldr	r6, [r1, #0]
 8012094:	602b      	str	r3, [r5, #0]
 8012096:	f010 0f40 	tst.w	r0, #64	; 0x40
 801209a:	bf18      	it	ne
 801209c:	b236      	sxthne	r6, r6
 801209e:	e7ef      	b.n	8012080 <_printf_i+0xbc>
 80120a0:	682b      	ldr	r3, [r5, #0]
 80120a2:	6820      	ldr	r0, [r4, #0]
 80120a4:	1d19      	adds	r1, r3, #4
 80120a6:	6029      	str	r1, [r5, #0]
 80120a8:	0601      	lsls	r1, r0, #24
 80120aa:	d501      	bpl.n	80120b0 <_printf_i+0xec>
 80120ac:	681e      	ldr	r6, [r3, #0]
 80120ae:	e002      	b.n	80120b6 <_printf_i+0xf2>
 80120b0:	0646      	lsls	r6, r0, #25
 80120b2:	d5fb      	bpl.n	80120ac <_printf_i+0xe8>
 80120b4:	881e      	ldrh	r6, [r3, #0]
 80120b6:	4854      	ldr	r0, [pc, #336]	; (8012208 <_printf_i+0x244>)
 80120b8:	2f6f      	cmp	r7, #111	; 0x6f
 80120ba:	bf0c      	ite	eq
 80120bc:	2308      	moveq	r3, #8
 80120be:	230a      	movne	r3, #10
 80120c0:	2100      	movs	r1, #0
 80120c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120c6:	6865      	ldr	r5, [r4, #4]
 80120c8:	60a5      	str	r5, [r4, #8]
 80120ca:	2d00      	cmp	r5, #0
 80120cc:	bfa2      	ittt	ge
 80120ce:	6821      	ldrge	r1, [r4, #0]
 80120d0:	f021 0104 	bicge.w	r1, r1, #4
 80120d4:	6021      	strge	r1, [r4, #0]
 80120d6:	b90e      	cbnz	r6, 80120dc <_printf_i+0x118>
 80120d8:	2d00      	cmp	r5, #0
 80120da:	d04d      	beq.n	8012178 <_printf_i+0x1b4>
 80120dc:	4615      	mov	r5, r2
 80120de:	fbb6 f1f3 	udiv	r1, r6, r3
 80120e2:	fb03 6711 	mls	r7, r3, r1, r6
 80120e6:	5dc7      	ldrb	r7, [r0, r7]
 80120e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80120ec:	4637      	mov	r7, r6
 80120ee:	42bb      	cmp	r3, r7
 80120f0:	460e      	mov	r6, r1
 80120f2:	d9f4      	bls.n	80120de <_printf_i+0x11a>
 80120f4:	2b08      	cmp	r3, #8
 80120f6:	d10b      	bne.n	8012110 <_printf_i+0x14c>
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	07de      	lsls	r6, r3, #31
 80120fc:	d508      	bpl.n	8012110 <_printf_i+0x14c>
 80120fe:	6923      	ldr	r3, [r4, #16]
 8012100:	6861      	ldr	r1, [r4, #4]
 8012102:	4299      	cmp	r1, r3
 8012104:	bfde      	ittt	le
 8012106:	2330      	movle	r3, #48	; 0x30
 8012108:	f805 3c01 	strble.w	r3, [r5, #-1]
 801210c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012110:	1b52      	subs	r2, r2, r5
 8012112:	6122      	str	r2, [r4, #16]
 8012114:	f8cd a000 	str.w	sl, [sp]
 8012118:	464b      	mov	r3, r9
 801211a:	aa03      	add	r2, sp, #12
 801211c:	4621      	mov	r1, r4
 801211e:	4640      	mov	r0, r8
 8012120:	f7ff fee2 	bl	8011ee8 <_printf_common>
 8012124:	3001      	adds	r0, #1
 8012126:	d14c      	bne.n	80121c2 <_printf_i+0x1fe>
 8012128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801212c:	b004      	add	sp, #16
 801212e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012132:	4835      	ldr	r0, [pc, #212]	; (8012208 <_printf_i+0x244>)
 8012134:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012138:	6829      	ldr	r1, [r5, #0]
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012140:	6029      	str	r1, [r5, #0]
 8012142:	061d      	lsls	r5, r3, #24
 8012144:	d514      	bpl.n	8012170 <_printf_i+0x1ac>
 8012146:	07df      	lsls	r7, r3, #31
 8012148:	bf44      	itt	mi
 801214a:	f043 0320 	orrmi.w	r3, r3, #32
 801214e:	6023      	strmi	r3, [r4, #0]
 8012150:	b91e      	cbnz	r6, 801215a <_printf_i+0x196>
 8012152:	6823      	ldr	r3, [r4, #0]
 8012154:	f023 0320 	bic.w	r3, r3, #32
 8012158:	6023      	str	r3, [r4, #0]
 801215a:	2310      	movs	r3, #16
 801215c:	e7b0      	b.n	80120c0 <_printf_i+0xfc>
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	f043 0320 	orr.w	r3, r3, #32
 8012164:	6023      	str	r3, [r4, #0]
 8012166:	2378      	movs	r3, #120	; 0x78
 8012168:	4828      	ldr	r0, [pc, #160]	; (801220c <_printf_i+0x248>)
 801216a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801216e:	e7e3      	b.n	8012138 <_printf_i+0x174>
 8012170:	0659      	lsls	r1, r3, #25
 8012172:	bf48      	it	mi
 8012174:	b2b6      	uxthmi	r6, r6
 8012176:	e7e6      	b.n	8012146 <_printf_i+0x182>
 8012178:	4615      	mov	r5, r2
 801217a:	e7bb      	b.n	80120f4 <_printf_i+0x130>
 801217c:	682b      	ldr	r3, [r5, #0]
 801217e:	6826      	ldr	r6, [r4, #0]
 8012180:	6961      	ldr	r1, [r4, #20]
 8012182:	1d18      	adds	r0, r3, #4
 8012184:	6028      	str	r0, [r5, #0]
 8012186:	0635      	lsls	r5, r6, #24
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	d501      	bpl.n	8012190 <_printf_i+0x1cc>
 801218c:	6019      	str	r1, [r3, #0]
 801218e:	e002      	b.n	8012196 <_printf_i+0x1d2>
 8012190:	0670      	lsls	r0, r6, #25
 8012192:	d5fb      	bpl.n	801218c <_printf_i+0x1c8>
 8012194:	8019      	strh	r1, [r3, #0]
 8012196:	2300      	movs	r3, #0
 8012198:	6123      	str	r3, [r4, #16]
 801219a:	4615      	mov	r5, r2
 801219c:	e7ba      	b.n	8012114 <_printf_i+0x150>
 801219e:	682b      	ldr	r3, [r5, #0]
 80121a0:	1d1a      	adds	r2, r3, #4
 80121a2:	602a      	str	r2, [r5, #0]
 80121a4:	681d      	ldr	r5, [r3, #0]
 80121a6:	6862      	ldr	r2, [r4, #4]
 80121a8:	2100      	movs	r1, #0
 80121aa:	4628      	mov	r0, r5
 80121ac:	f7ee f848 	bl	8000240 <memchr>
 80121b0:	b108      	cbz	r0, 80121b6 <_printf_i+0x1f2>
 80121b2:	1b40      	subs	r0, r0, r5
 80121b4:	6060      	str	r0, [r4, #4]
 80121b6:	6863      	ldr	r3, [r4, #4]
 80121b8:	6123      	str	r3, [r4, #16]
 80121ba:	2300      	movs	r3, #0
 80121bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121c0:	e7a8      	b.n	8012114 <_printf_i+0x150>
 80121c2:	6923      	ldr	r3, [r4, #16]
 80121c4:	462a      	mov	r2, r5
 80121c6:	4649      	mov	r1, r9
 80121c8:	4640      	mov	r0, r8
 80121ca:	47d0      	blx	sl
 80121cc:	3001      	adds	r0, #1
 80121ce:	d0ab      	beq.n	8012128 <_printf_i+0x164>
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	079b      	lsls	r3, r3, #30
 80121d4:	d413      	bmi.n	80121fe <_printf_i+0x23a>
 80121d6:	68e0      	ldr	r0, [r4, #12]
 80121d8:	9b03      	ldr	r3, [sp, #12]
 80121da:	4298      	cmp	r0, r3
 80121dc:	bfb8      	it	lt
 80121de:	4618      	movlt	r0, r3
 80121e0:	e7a4      	b.n	801212c <_printf_i+0x168>
 80121e2:	2301      	movs	r3, #1
 80121e4:	4632      	mov	r2, r6
 80121e6:	4649      	mov	r1, r9
 80121e8:	4640      	mov	r0, r8
 80121ea:	47d0      	blx	sl
 80121ec:	3001      	adds	r0, #1
 80121ee:	d09b      	beq.n	8012128 <_printf_i+0x164>
 80121f0:	3501      	adds	r5, #1
 80121f2:	68e3      	ldr	r3, [r4, #12]
 80121f4:	9903      	ldr	r1, [sp, #12]
 80121f6:	1a5b      	subs	r3, r3, r1
 80121f8:	42ab      	cmp	r3, r5
 80121fa:	dcf2      	bgt.n	80121e2 <_printf_i+0x21e>
 80121fc:	e7eb      	b.n	80121d6 <_printf_i+0x212>
 80121fe:	2500      	movs	r5, #0
 8012200:	f104 0619 	add.w	r6, r4, #25
 8012204:	e7f5      	b.n	80121f2 <_printf_i+0x22e>
 8012206:	bf00      	nop
 8012208:	08013609 	.word	0x08013609
 801220c:	0801361a 	.word	0x0801361a

08012210 <__sread>:
 8012210:	b510      	push	{r4, lr}
 8012212:	460c      	mov	r4, r1
 8012214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012218:	f000 fa84 	bl	8012724 <_read_r>
 801221c:	2800      	cmp	r0, #0
 801221e:	bfab      	itete	ge
 8012220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012222:	89a3      	ldrhlt	r3, [r4, #12]
 8012224:	181b      	addge	r3, r3, r0
 8012226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801222a:	bfac      	ite	ge
 801222c:	6563      	strge	r3, [r4, #84]	; 0x54
 801222e:	81a3      	strhlt	r3, [r4, #12]
 8012230:	bd10      	pop	{r4, pc}

08012232 <__swrite>:
 8012232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012236:	461f      	mov	r7, r3
 8012238:	898b      	ldrh	r3, [r1, #12]
 801223a:	05db      	lsls	r3, r3, #23
 801223c:	4605      	mov	r5, r0
 801223e:	460c      	mov	r4, r1
 8012240:	4616      	mov	r6, r2
 8012242:	d505      	bpl.n	8012250 <__swrite+0x1e>
 8012244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012248:	2302      	movs	r3, #2
 801224a:	2200      	movs	r2, #0
 801224c:	f000 f9d0 	bl	80125f0 <_lseek_r>
 8012250:	89a3      	ldrh	r3, [r4, #12]
 8012252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801225a:	81a3      	strh	r3, [r4, #12]
 801225c:	4632      	mov	r2, r6
 801225e:	463b      	mov	r3, r7
 8012260:	4628      	mov	r0, r5
 8012262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012266:	f000 b869 	b.w	801233c <_write_r>

0801226a <__sseek>:
 801226a:	b510      	push	{r4, lr}
 801226c:	460c      	mov	r4, r1
 801226e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012272:	f000 f9bd 	bl	80125f0 <_lseek_r>
 8012276:	1c43      	adds	r3, r0, #1
 8012278:	89a3      	ldrh	r3, [r4, #12]
 801227a:	bf15      	itete	ne
 801227c:	6560      	strne	r0, [r4, #84]	; 0x54
 801227e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012286:	81a3      	strheq	r3, [r4, #12]
 8012288:	bf18      	it	ne
 801228a:	81a3      	strhne	r3, [r4, #12]
 801228c:	bd10      	pop	{r4, pc}

0801228e <__sclose>:
 801228e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012292:	f000 b8db 	b.w	801244c <_close_r>
	...

08012298 <__swbuf_r>:
 8012298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229a:	460e      	mov	r6, r1
 801229c:	4614      	mov	r4, r2
 801229e:	4605      	mov	r5, r0
 80122a0:	b118      	cbz	r0, 80122aa <__swbuf_r+0x12>
 80122a2:	6983      	ldr	r3, [r0, #24]
 80122a4:	b90b      	cbnz	r3, 80122aa <__swbuf_r+0x12>
 80122a6:	f7ff fa7d 	bl	80117a4 <__sinit>
 80122aa:	4b21      	ldr	r3, [pc, #132]	; (8012330 <__swbuf_r+0x98>)
 80122ac:	429c      	cmp	r4, r3
 80122ae:	d12b      	bne.n	8012308 <__swbuf_r+0x70>
 80122b0:	686c      	ldr	r4, [r5, #4]
 80122b2:	69a3      	ldr	r3, [r4, #24]
 80122b4:	60a3      	str	r3, [r4, #8]
 80122b6:	89a3      	ldrh	r3, [r4, #12]
 80122b8:	071a      	lsls	r2, r3, #28
 80122ba:	d52f      	bpl.n	801231c <__swbuf_r+0x84>
 80122bc:	6923      	ldr	r3, [r4, #16]
 80122be:	b36b      	cbz	r3, 801231c <__swbuf_r+0x84>
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	6820      	ldr	r0, [r4, #0]
 80122c4:	1ac0      	subs	r0, r0, r3
 80122c6:	6963      	ldr	r3, [r4, #20]
 80122c8:	b2f6      	uxtb	r6, r6
 80122ca:	4283      	cmp	r3, r0
 80122cc:	4637      	mov	r7, r6
 80122ce:	dc04      	bgt.n	80122da <__swbuf_r+0x42>
 80122d0:	4621      	mov	r1, r4
 80122d2:	4628      	mov	r0, r5
 80122d4:	f000 f950 	bl	8012578 <_fflush_r>
 80122d8:	bb30      	cbnz	r0, 8012328 <__swbuf_r+0x90>
 80122da:	68a3      	ldr	r3, [r4, #8]
 80122dc:	3b01      	subs	r3, #1
 80122de:	60a3      	str	r3, [r4, #8]
 80122e0:	6823      	ldr	r3, [r4, #0]
 80122e2:	1c5a      	adds	r2, r3, #1
 80122e4:	6022      	str	r2, [r4, #0]
 80122e6:	701e      	strb	r6, [r3, #0]
 80122e8:	6963      	ldr	r3, [r4, #20]
 80122ea:	3001      	adds	r0, #1
 80122ec:	4283      	cmp	r3, r0
 80122ee:	d004      	beq.n	80122fa <__swbuf_r+0x62>
 80122f0:	89a3      	ldrh	r3, [r4, #12]
 80122f2:	07db      	lsls	r3, r3, #31
 80122f4:	d506      	bpl.n	8012304 <__swbuf_r+0x6c>
 80122f6:	2e0a      	cmp	r6, #10
 80122f8:	d104      	bne.n	8012304 <__swbuf_r+0x6c>
 80122fa:	4621      	mov	r1, r4
 80122fc:	4628      	mov	r0, r5
 80122fe:	f000 f93b 	bl	8012578 <_fflush_r>
 8012302:	b988      	cbnz	r0, 8012328 <__swbuf_r+0x90>
 8012304:	4638      	mov	r0, r7
 8012306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012308:	4b0a      	ldr	r3, [pc, #40]	; (8012334 <__swbuf_r+0x9c>)
 801230a:	429c      	cmp	r4, r3
 801230c:	d101      	bne.n	8012312 <__swbuf_r+0x7a>
 801230e:	68ac      	ldr	r4, [r5, #8]
 8012310:	e7cf      	b.n	80122b2 <__swbuf_r+0x1a>
 8012312:	4b09      	ldr	r3, [pc, #36]	; (8012338 <__swbuf_r+0xa0>)
 8012314:	429c      	cmp	r4, r3
 8012316:	bf08      	it	eq
 8012318:	68ec      	ldreq	r4, [r5, #12]
 801231a:	e7ca      	b.n	80122b2 <__swbuf_r+0x1a>
 801231c:	4621      	mov	r1, r4
 801231e:	4628      	mov	r0, r5
 8012320:	f000 f81e 	bl	8012360 <__swsetup_r>
 8012324:	2800      	cmp	r0, #0
 8012326:	d0cb      	beq.n	80122c0 <__swbuf_r+0x28>
 8012328:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801232c:	e7ea      	b.n	8012304 <__swbuf_r+0x6c>
 801232e:	bf00      	nop
 8012330:	080135b8 	.word	0x080135b8
 8012334:	080135d8 	.word	0x080135d8
 8012338:	08013598 	.word	0x08013598

0801233c <_write_r>:
 801233c:	b538      	push	{r3, r4, r5, lr}
 801233e:	4d07      	ldr	r5, [pc, #28]	; (801235c <_write_r+0x20>)
 8012340:	4604      	mov	r4, r0
 8012342:	4608      	mov	r0, r1
 8012344:	4611      	mov	r1, r2
 8012346:	2200      	movs	r2, #0
 8012348:	602a      	str	r2, [r5, #0]
 801234a:	461a      	mov	r2, r3
 801234c:	f7ef f9d5 	bl	80016fa <_write>
 8012350:	1c43      	adds	r3, r0, #1
 8012352:	d102      	bne.n	801235a <_write_r+0x1e>
 8012354:	682b      	ldr	r3, [r5, #0]
 8012356:	b103      	cbz	r3, 801235a <_write_r+0x1e>
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	bd38      	pop	{r3, r4, r5, pc}
 801235c:	2000dca0 	.word	0x2000dca0

08012360 <__swsetup_r>:
 8012360:	4b32      	ldr	r3, [pc, #200]	; (801242c <__swsetup_r+0xcc>)
 8012362:	b570      	push	{r4, r5, r6, lr}
 8012364:	681d      	ldr	r5, [r3, #0]
 8012366:	4606      	mov	r6, r0
 8012368:	460c      	mov	r4, r1
 801236a:	b125      	cbz	r5, 8012376 <__swsetup_r+0x16>
 801236c:	69ab      	ldr	r3, [r5, #24]
 801236e:	b913      	cbnz	r3, 8012376 <__swsetup_r+0x16>
 8012370:	4628      	mov	r0, r5
 8012372:	f7ff fa17 	bl	80117a4 <__sinit>
 8012376:	4b2e      	ldr	r3, [pc, #184]	; (8012430 <__swsetup_r+0xd0>)
 8012378:	429c      	cmp	r4, r3
 801237a:	d10f      	bne.n	801239c <__swsetup_r+0x3c>
 801237c:	686c      	ldr	r4, [r5, #4]
 801237e:	89a3      	ldrh	r3, [r4, #12]
 8012380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012384:	0719      	lsls	r1, r3, #28
 8012386:	d42c      	bmi.n	80123e2 <__swsetup_r+0x82>
 8012388:	06dd      	lsls	r5, r3, #27
 801238a:	d411      	bmi.n	80123b0 <__swsetup_r+0x50>
 801238c:	2309      	movs	r3, #9
 801238e:	6033      	str	r3, [r6, #0]
 8012390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012394:	81a3      	strh	r3, [r4, #12]
 8012396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801239a:	e03e      	b.n	801241a <__swsetup_r+0xba>
 801239c:	4b25      	ldr	r3, [pc, #148]	; (8012434 <__swsetup_r+0xd4>)
 801239e:	429c      	cmp	r4, r3
 80123a0:	d101      	bne.n	80123a6 <__swsetup_r+0x46>
 80123a2:	68ac      	ldr	r4, [r5, #8]
 80123a4:	e7eb      	b.n	801237e <__swsetup_r+0x1e>
 80123a6:	4b24      	ldr	r3, [pc, #144]	; (8012438 <__swsetup_r+0xd8>)
 80123a8:	429c      	cmp	r4, r3
 80123aa:	bf08      	it	eq
 80123ac:	68ec      	ldreq	r4, [r5, #12]
 80123ae:	e7e6      	b.n	801237e <__swsetup_r+0x1e>
 80123b0:	0758      	lsls	r0, r3, #29
 80123b2:	d512      	bpl.n	80123da <__swsetup_r+0x7a>
 80123b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123b6:	b141      	cbz	r1, 80123ca <__swsetup_r+0x6a>
 80123b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123bc:	4299      	cmp	r1, r3
 80123be:	d002      	beq.n	80123c6 <__swsetup_r+0x66>
 80123c0:	4630      	mov	r0, r6
 80123c2:	f7fe feb5 	bl	8011130 <_free_r>
 80123c6:	2300      	movs	r3, #0
 80123c8:	6363      	str	r3, [r4, #52]	; 0x34
 80123ca:	89a3      	ldrh	r3, [r4, #12]
 80123cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123d0:	81a3      	strh	r3, [r4, #12]
 80123d2:	2300      	movs	r3, #0
 80123d4:	6063      	str	r3, [r4, #4]
 80123d6:	6923      	ldr	r3, [r4, #16]
 80123d8:	6023      	str	r3, [r4, #0]
 80123da:	89a3      	ldrh	r3, [r4, #12]
 80123dc:	f043 0308 	orr.w	r3, r3, #8
 80123e0:	81a3      	strh	r3, [r4, #12]
 80123e2:	6923      	ldr	r3, [r4, #16]
 80123e4:	b94b      	cbnz	r3, 80123fa <__swsetup_r+0x9a>
 80123e6:	89a3      	ldrh	r3, [r4, #12]
 80123e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123f0:	d003      	beq.n	80123fa <__swsetup_r+0x9a>
 80123f2:	4621      	mov	r1, r4
 80123f4:	4630      	mov	r0, r6
 80123f6:	f000 f933 	bl	8012660 <__smakebuf_r>
 80123fa:	89a0      	ldrh	r0, [r4, #12]
 80123fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012400:	f010 0301 	ands.w	r3, r0, #1
 8012404:	d00a      	beq.n	801241c <__swsetup_r+0xbc>
 8012406:	2300      	movs	r3, #0
 8012408:	60a3      	str	r3, [r4, #8]
 801240a:	6963      	ldr	r3, [r4, #20]
 801240c:	425b      	negs	r3, r3
 801240e:	61a3      	str	r3, [r4, #24]
 8012410:	6923      	ldr	r3, [r4, #16]
 8012412:	b943      	cbnz	r3, 8012426 <__swsetup_r+0xc6>
 8012414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012418:	d1ba      	bne.n	8012390 <__swsetup_r+0x30>
 801241a:	bd70      	pop	{r4, r5, r6, pc}
 801241c:	0781      	lsls	r1, r0, #30
 801241e:	bf58      	it	pl
 8012420:	6963      	ldrpl	r3, [r4, #20]
 8012422:	60a3      	str	r3, [r4, #8]
 8012424:	e7f4      	b.n	8012410 <__swsetup_r+0xb0>
 8012426:	2000      	movs	r0, #0
 8012428:	e7f7      	b.n	801241a <__swsetup_r+0xba>
 801242a:	bf00      	nop
 801242c:	2000026c 	.word	0x2000026c
 8012430:	080135b8 	.word	0x080135b8
 8012434:	080135d8 	.word	0x080135d8
 8012438:	08013598 	.word	0x08013598

0801243c <abort>:
 801243c:	b508      	push	{r3, lr}
 801243e:	2006      	movs	r0, #6
 8012440:	f000 f9aa 	bl	8012798 <raise>
 8012444:	2001      	movs	r0, #1
 8012446:	f7ef f931 	bl	80016ac <_exit>
	...

0801244c <_close_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	4d06      	ldr	r5, [pc, #24]	; (8012468 <_close_r+0x1c>)
 8012450:	2300      	movs	r3, #0
 8012452:	4604      	mov	r4, r0
 8012454:	4608      	mov	r0, r1
 8012456:	602b      	str	r3, [r5, #0]
 8012458:	f7ef f96b 	bl	8001732 <_close>
 801245c:	1c43      	adds	r3, r0, #1
 801245e:	d102      	bne.n	8012466 <_close_r+0x1a>
 8012460:	682b      	ldr	r3, [r5, #0]
 8012462:	b103      	cbz	r3, 8012466 <_close_r+0x1a>
 8012464:	6023      	str	r3, [r4, #0]
 8012466:	bd38      	pop	{r3, r4, r5, pc}
 8012468:	2000dca0 	.word	0x2000dca0

0801246c <__sflush_r>:
 801246c:	898a      	ldrh	r2, [r1, #12]
 801246e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012472:	4605      	mov	r5, r0
 8012474:	0710      	lsls	r0, r2, #28
 8012476:	460c      	mov	r4, r1
 8012478:	d458      	bmi.n	801252c <__sflush_r+0xc0>
 801247a:	684b      	ldr	r3, [r1, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	dc05      	bgt.n	801248c <__sflush_r+0x20>
 8012480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012482:	2b00      	cmp	r3, #0
 8012484:	dc02      	bgt.n	801248c <__sflush_r+0x20>
 8012486:	2000      	movs	r0, #0
 8012488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801248c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801248e:	2e00      	cmp	r6, #0
 8012490:	d0f9      	beq.n	8012486 <__sflush_r+0x1a>
 8012492:	2300      	movs	r3, #0
 8012494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012498:	682f      	ldr	r7, [r5, #0]
 801249a:	602b      	str	r3, [r5, #0]
 801249c:	d032      	beq.n	8012504 <__sflush_r+0x98>
 801249e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	075a      	lsls	r2, r3, #29
 80124a4:	d505      	bpl.n	80124b2 <__sflush_r+0x46>
 80124a6:	6863      	ldr	r3, [r4, #4]
 80124a8:	1ac0      	subs	r0, r0, r3
 80124aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80124ac:	b10b      	cbz	r3, 80124b2 <__sflush_r+0x46>
 80124ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80124b0:	1ac0      	subs	r0, r0, r3
 80124b2:	2300      	movs	r3, #0
 80124b4:	4602      	mov	r2, r0
 80124b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80124b8:	6a21      	ldr	r1, [r4, #32]
 80124ba:	4628      	mov	r0, r5
 80124bc:	47b0      	blx	r6
 80124be:	1c43      	adds	r3, r0, #1
 80124c0:	89a3      	ldrh	r3, [r4, #12]
 80124c2:	d106      	bne.n	80124d2 <__sflush_r+0x66>
 80124c4:	6829      	ldr	r1, [r5, #0]
 80124c6:	291d      	cmp	r1, #29
 80124c8:	d82c      	bhi.n	8012524 <__sflush_r+0xb8>
 80124ca:	4a2a      	ldr	r2, [pc, #168]	; (8012574 <__sflush_r+0x108>)
 80124cc:	40ca      	lsrs	r2, r1
 80124ce:	07d6      	lsls	r6, r2, #31
 80124d0:	d528      	bpl.n	8012524 <__sflush_r+0xb8>
 80124d2:	2200      	movs	r2, #0
 80124d4:	6062      	str	r2, [r4, #4]
 80124d6:	04d9      	lsls	r1, r3, #19
 80124d8:	6922      	ldr	r2, [r4, #16]
 80124da:	6022      	str	r2, [r4, #0]
 80124dc:	d504      	bpl.n	80124e8 <__sflush_r+0x7c>
 80124de:	1c42      	adds	r2, r0, #1
 80124e0:	d101      	bne.n	80124e6 <__sflush_r+0x7a>
 80124e2:	682b      	ldr	r3, [r5, #0]
 80124e4:	b903      	cbnz	r3, 80124e8 <__sflush_r+0x7c>
 80124e6:	6560      	str	r0, [r4, #84]	; 0x54
 80124e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124ea:	602f      	str	r7, [r5, #0]
 80124ec:	2900      	cmp	r1, #0
 80124ee:	d0ca      	beq.n	8012486 <__sflush_r+0x1a>
 80124f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124f4:	4299      	cmp	r1, r3
 80124f6:	d002      	beq.n	80124fe <__sflush_r+0x92>
 80124f8:	4628      	mov	r0, r5
 80124fa:	f7fe fe19 	bl	8011130 <_free_r>
 80124fe:	2000      	movs	r0, #0
 8012500:	6360      	str	r0, [r4, #52]	; 0x34
 8012502:	e7c1      	b.n	8012488 <__sflush_r+0x1c>
 8012504:	6a21      	ldr	r1, [r4, #32]
 8012506:	2301      	movs	r3, #1
 8012508:	4628      	mov	r0, r5
 801250a:	47b0      	blx	r6
 801250c:	1c41      	adds	r1, r0, #1
 801250e:	d1c7      	bne.n	80124a0 <__sflush_r+0x34>
 8012510:	682b      	ldr	r3, [r5, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d0c4      	beq.n	80124a0 <__sflush_r+0x34>
 8012516:	2b1d      	cmp	r3, #29
 8012518:	d001      	beq.n	801251e <__sflush_r+0xb2>
 801251a:	2b16      	cmp	r3, #22
 801251c:	d101      	bne.n	8012522 <__sflush_r+0xb6>
 801251e:	602f      	str	r7, [r5, #0]
 8012520:	e7b1      	b.n	8012486 <__sflush_r+0x1a>
 8012522:	89a3      	ldrh	r3, [r4, #12]
 8012524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012528:	81a3      	strh	r3, [r4, #12]
 801252a:	e7ad      	b.n	8012488 <__sflush_r+0x1c>
 801252c:	690f      	ldr	r7, [r1, #16]
 801252e:	2f00      	cmp	r7, #0
 8012530:	d0a9      	beq.n	8012486 <__sflush_r+0x1a>
 8012532:	0793      	lsls	r3, r2, #30
 8012534:	680e      	ldr	r6, [r1, #0]
 8012536:	bf08      	it	eq
 8012538:	694b      	ldreq	r3, [r1, #20]
 801253a:	600f      	str	r7, [r1, #0]
 801253c:	bf18      	it	ne
 801253e:	2300      	movne	r3, #0
 8012540:	eba6 0807 	sub.w	r8, r6, r7
 8012544:	608b      	str	r3, [r1, #8]
 8012546:	f1b8 0f00 	cmp.w	r8, #0
 801254a:	dd9c      	ble.n	8012486 <__sflush_r+0x1a>
 801254c:	6a21      	ldr	r1, [r4, #32]
 801254e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012550:	4643      	mov	r3, r8
 8012552:	463a      	mov	r2, r7
 8012554:	4628      	mov	r0, r5
 8012556:	47b0      	blx	r6
 8012558:	2800      	cmp	r0, #0
 801255a:	dc06      	bgt.n	801256a <__sflush_r+0xfe>
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012562:	81a3      	strh	r3, [r4, #12]
 8012564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012568:	e78e      	b.n	8012488 <__sflush_r+0x1c>
 801256a:	4407      	add	r7, r0
 801256c:	eba8 0800 	sub.w	r8, r8, r0
 8012570:	e7e9      	b.n	8012546 <__sflush_r+0xda>
 8012572:	bf00      	nop
 8012574:	20400001 	.word	0x20400001

08012578 <_fflush_r>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	690b      	ldr	r3, [r1, #16]
 801257c:	4605      	mov	r5, r0
 801257e:	460c      	mov	r4, r1
 8012580:	b913      	cbnz	r3, 8012588 <_fflush_r+0x10>
 8012582:	2500      	movs	r5, #0
 8012584:	4628      	mov	r0, r5
 8012586:	bd38      	pop	{r3, r4, r5, pc}
 8012588:	b118      	cbz	r0, 8012592 <_fflush_r+0x1a>
 801258a:	6983      	ldr	r3, [r0, #24]
 801258c:	b90b      	cbnz	r3, 8012592 <_fflush_r+0x1a>
 801258e:	f7ff f909 	bl	80117a4 <__sinit>
 8012592:	4b14      	ldr	r3, [pc, #80]	; (80125e4 <_fflush_r+0x6c>)
 8012594:	429c      	cmp	r4, r3
 8012596:	d11b      	bne.n	80125d0 <_fflush_r+0x58>
 8012598:	686c      	ldr	r4, [r5, #4]
 801259a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d0ef      	beq.n	8012582 <_fflush_r+0xa>
 80125a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80125a4:	07d0      	lsls	r0, r2, #31
 80125a6:	d404      	bmi.n	80125b2 <_fflush_r+0x3a>
 80125a8:	0599      	lsls	r1, r3, #22
 80125aa:	d402      	bmi.n	80125b2 <_fflush_r+0x3a>
 80125ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125ae:	f7ff f9a9 	bl	8011904 <__retarget_lock_acquire_recursive>
 80125b2:	4628      	mov	r0, r5
 80125b4:	4621      	mov	r1, r4
 80125b6:	f7ff ff59 	bl	801246c <__sflush_r>
 80125ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125bc:	07da      	lsls	r2, r3, #31
 80125be:	4605      	mov	r5, r0
 80125c0:	d4e0      	bmi.n	8012584 <_fflush_r+0xc>
 80125c2:	89a3      	ldrh	r3, [r4, #12]
 80125c4:	059b      	lsls	r3, r3, #22
 80125c6:	d4dd      	bmi.n	8012584 <_fflush_r+0xc>
 80125c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125ca:	f7ff f99c 	bl	8011906 <__retarget_lock_release_recursive>
 80125ce:	e7d9      	b.n	8012584 <_fflush_r+0xc>
 80125d0:	4b05      	ldr	r3, [pc, #20]	; (80125e8 <_fflush_r+0x70>)
 80125d2:	429c      	cmp	r4, r3
 80125d4:	d101      	bne.n	80125da <_fflush_r+0x62>
 80125d6:	68ac      	ldr	r4, [r5, #8]
 80125d8:	e7df      	b.n	801259a <_fflush_r+0x22>
 80125da:	4b04      	ldr	r3, [pc, #16]	; (80125ec <_fflush_r+0x74>)
 80125dc:	429c      	cmp	r4, r3
 80125de:	bf08      	it	eq
 80125e0:	68ec      	ldreq	r4, [r5, #12]
 80125e2:	e7da      	b.n	801259a <_fflush_r+0x22>
 80125e4:	080135b8 	.word	0x080135b8
 80125e8:	080135d8 	.word	0x080135d8
 80125ec:	08013598 	.word	0x08013598

080125f0 <_lseek_r>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	4d07      	ldr	r5, [pc, #28]	; (8012610 <_lseek_r+0x20>)
 80125f4:	4604      	mov	r4, r0
 80125f6:	4608      	mov	r0, r1
 80125f8:	4611      	mov	r1, r2
 80125fa:	2200      	movs	r2, #0
 80125fc:	602a      	str	r2, [r5, #0]
 80125fe:	461a      	mov	r2, r3
 8012600:	f7ef f8be 	bl	8001780 <_lseek>
 8012604:	1c43      	adds	r3, r0, #1
 8012606:	d102      	bne.n	801260e <_lseek_r+0x1e>
 8012608:	682b      	ldr	r3, [r5, #0]
 801260a:	b103      	cbz	r3, 801260e <_lseek_r+0x1e>
 801260c:	6023      	str	r3, [r4, #0]
 801260e:	bd38      	pop	{r3, r4, r5, pc}
 8012610:	2000dca0 	.word	0x2000dca0

08012614 <__swhatbuf_r>:
 8012614:	b570      	push	{r4, r5, r6, lr}
 8012616:	460e      	mov	r6, r1
 8012618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801261c:	2900      	cmp	r1, #0
 801261e:	b096      	sub	sp, #88	; 0x58
 8012620:	4614      	mov	r4, r2
 8012622:	461d      	mov	r5, r3
 8012624:	da08      	bge.n	8012638 <__swhatbuf_r+0x24>
 8012626:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801262a:	2200      	movs	r2, #0
 801262c:	602a      	str	r2, [r5, #0]
 801262e:	061a      	lsls	r2, r3, #24
 8012630:	d410      	bmi.n	8012654 <__swhatbuf_r+0x40>
 8012632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012636:	e00e      	b.n	8012656 <__swhatbuf_r+0x42>
 8012638:	466a      	mov	r2, sp
 801263a:	f000 f8c9 	bl	80127d0 <_fstat_r>
 801263e:	2800      	cmp	r0, #0
 8012640:	dbf1      	blt.n	8012626 <__swhatbuf_r+0x12>
 8012642:	9a01      	ldr	r2, [sp, #4]
 8012644:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012648:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801264c:	425a      	negs	r2, r3
 801264e:	415a      	adcs	r2, r3
 8012650:	602a      	str	r2, [r5, #0]
 8012652:	e7ee      	b.n	8012632 <__swhatbuf_r+0x1e>
 8012654:	2340      	movs	r3, #64	; 0x40
 8012656:	2000      	movs	r0, #0
 8012658:	6023      	str	r3, [r4, #0]
 801265a:	b016      	add	sp, #88	; 0x58
 801265c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012660 <__smakebuf_r>:
 8012660:	898b      	ldrh	r3, [r1, #12]
 8012662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012664:	079d      	lsls	r5, r3, #30
 8012666:	4606      	mov	r6, r0
 8012668:	460c      	mov	r4, r1
 801266a:	d507      	bpl.n	801267c <__smakebuf_r+0x1c>
 801266c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012670:	6023      	str	r3, [r4, #0]
 8012672:	6123      	str	r3, [r4, #16]
 8012674:	2301      	movs	r3, #1
 8012676:	6163      	str	r3, [r4, #20]
 8012678:	b002      	add	sp, #8
 801267a:	bd70      	pop	{r4, r5, r6, pc}
 801267c:	ab01      	add	r3, sp, #4
 801267e:	466a      	mov	r2, sp
 8012680:	f7ff ffc8 	bl	8012614 <__swhatbuf_r>
 8012684:	9900      	ldr	r1, [sp, #0]
 8012686:	4605      	mov	r5, r0
 8012688:	4630      	mov	r0, r6
 801268a:	f7fe fdbd 	bl	8011208 <_malloc_r>
 801268e:	b948      	cbnz	r0, 80126a4 <__smakebuf_r+0x44>
 8012690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012694:	059a      	lsls	r2, r3, #22
 8012696:	d4ef      	bmi.n	8012678 <__smakebuf_r+0x18>
 8012698:	f023 0303 	bic.w	r3, r3, #3
 801269c:	f043 0302 	orr.w	r3, r3, #2
 80126a0:	81a3      	strh	r3, [r4, #12]
 80126a2:	e7e3      	b.n	801266c <__smakebuf_r+0xc>
 80126a4:	4b0d      	ldr	r3, [pc, #52]	; (80126dc <__smakebuf_r+0x7c>)
 80126a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80126a8:	89a3      	ldrh	r3, [r4, #12]
 80126aa:	6020      	str	r0, [r4, #0]
 80126ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126b0:	81a3      	strh	r3, [r4, #12]
 80126b2:	9b00      	ldr	r3, [sp, #0]
 80126b4:	6163      	str	r3, [r4, #20]
 80126b6:	9b01      	ldr	r3, [sp, #4]
 80126b8:	6120      	str	r0, [r4, #16]
 80126ba:	b15b      	cbz	r3, 80126d4 <__smakebuf_r+0x74>
 80126bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126c0:	4630      	mov	r0, r6
 80126c2:	f000 f897 	bl	80127f4 <_isatty_r>
 80126c6:	b128      	cbz	r0, 80126d4 <__smakebuf_r+0x74>
 80126c8:	89a3      	ldrh	r3, [r4, #12]
 80126ca:	f023 0303 	bic.w	r3, r3, #3
 80126ce:	f043 0301 	orr.w	r3, r3, #1
 80126d2:	81a3      	strh	r3, [r4, #12]
 80126d4:	89a0      	ldrh	r0, [r4, #12]
 80126d6:	4305      	orrs	r5, r0
 80126d8:	81a5      	strh	r5, [r4, #12]
 80126da:	e7cd      	b.n	8012678 <__smakebuf_r+0x18>
 80126dc:	0801173d 	.word	0x0801173d

080126e0 <memmove>:
 80126e0:	4288      	cmp	r0, r1
 80126e2:	b510      	push	{r4, lr}
 80126e4:	eb01 0402 	add.w	r4, r1, r2
 80126e8:	d902      	bls.n	80126f0 <memmove+0x10>
 80126ea:	4284      	cmp	r4, r0
 80126ec:	4623      	mov	r3, r4
 80126ee:	d807      	bhi.n	8012700 <memmove+0x20>
 80126f0:	1e43      	subs	r3, r0, #1
 80126f2:	42a1      	cmp	r1, r4
 80126f4:	d008      	beq.n	8012708 <memmove+0x28>
 80126f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126fe:	e7f8      	b.n	80126f2 <memmove+0x12>
 8012700:	4402      	add	r2, r0
 8012702:	4601      	mov	r1, r0
 8012704:	428a      	cmp	r2, r1
 8012706:	d100      	bne.n	801270a <memmove+0x2a>
 8012708:	bd10      	pop	{r4, pc}
 801270a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801270e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012712:	e7f7      	b.n	8012704 <memmove+0x24>

08012714 <_malloc_usable_size_r>:
 8012714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012718:	1f18      	subs	r0, r3, #4
 801271a:	2b00      	cmp	r3, #0
 801271c:	bfbc      	itt	lt
 801271e:	580b      	ldrlt	r3, [r1, r0]
 8012720:	18c0      	addlt	r0, r0, r3
 8012722:	4770      	bx	lr

08012724 <_read_r>:
 8012724:	b538      	push	{r3, r4, r5, lr}
 8012726:	4d07      	ldr	r5, [pc, #28]	; (8012744 <_read_r+0x20>)
 8012728:	4604      	mov	r4, r0
 801272a:	4608      	mov	r0, r1
 801272c:	4611      	mov	r1, r2
 801272e:	2200      	movs	r2, #0
 8012730:	602a      	str	r2, [r5, #0]
 8012732:	461a      	mov	r2, r3
 8012734:	f7ee ffc4 	bl	80016c0 <_read>
 8012738:	1c43      	adds	r3, r0, #1
 801273a:	d102      	bne.n	8012742 <_read_r+0x1e>
 801273c:	682b      	ldr	r3, [r5, #0]
 801273e:	b103      	cbz	r3, 8012742 <_read_r+0x1e>
 8012740:	6023      	str	r3, [r4, #0]
 8012742:	bd38      	pop	{r3, r4, r5, pc}
 8012744:	2000dca0 	.word	0x2000dca0

08012748 <_raise_r>:
 8012748:	291f      	cmp	r1, #31
 801274a:	b538      	push	{r3, r4, r5, lr}
 801274c:	4604      	mov	r4, r0
 801274e:	460d      	mov	r5, r1
 8012750:	d904      	bls.n	801275c <_raise_r+0x14>
 8012752:	2316      	movs	r3, #22
 8012754:	6003      	str	r3, [r0, #0]
 8012756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801275a:	bd38      	pop	{r3, r4, r5, pc}
 801275c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801275e:	b112      	cbz	r2, 8012766 <_raise_r+0x1e>
 8012760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012764:	b94b      	cbnz	r3, 801277a <_raise_r+0x32>
 8012766:	4620      	mov	r0, r4
 8012768:	f000 f830 	bl	80127cc <_getpid_r>
 801276c:	462a      	mov	r2, r5
 801276e:	4601      	mov	r1, r0
 8012770:	4620      	mov	r0, r4
 8012772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012776:	f000 b817 	b.w	80127a8 <_kill_r>
 801277a:	2b01      	cmp	r3, #1
 801277c:	d00a      	beq.n	8012794 <_raise_r+0x4c>
 801277e:	1c59      	adds	r1, r3, #1
 8012780:	d103      	bne.n	801278a <_raise_r+0x42>
 8012782:	2316      	movs	r3, #22
 8012784:	6003      	str	r3, [r0, #0]
 8012786:	2001      	movs	r0, #1
 8012788:	e7e7      	b.n	801275a <_raise_r+0x12>
 801278a:	2400      	movs	r4, #0
 801278c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012790:	4628      	mov	r0, r5
 8012792:	4798      	blx	r3
 8012794:	2000      	movs	r0, #0
 8012796:	e7e0      	b.n	801275a <_raise_r+0x12>

08012798 <raise>:
 8012798:	4b02      	ldr	r3, [pc, #8]	; (80127a4 <raise+0xc>)
 801279a:	4601      	mov	r1, r0
 801279c:	6818      	ldr	r0, [r3, #0]
 801279e:	f7ff bfd3 	b.w	8012748 <_raise_r>
 80127a2:	bf00      	nop
 80127a4:	2000026c 	.word	0x2000026c

080127a8 <_kill_r>:
 80127a8:	b538      	push	{r3, r4, r5, lr}
 80127aa:	4d07      	ldr	r5, [pc, #28]	; (80127c8 <_kill_r+0x20>)
 80127ac:	2300      	movs	r3, #0
 80127ae:	4604      	mov	r4, r0
 80127b0:	4608      	mov	r0, r1
 80127b2:	4611      	mov	r1, r2
 80127b4:	602b      	str	r3, [r5, #0]
 80127b6:	f7ee ff69 	bl	800168c <_kill>
 80127ba:	1c43      	adds	r3, r0, #1
 80127bc:	d102      	bne.n	80127c4 <_kill_r+0x1c>
 80127be:	682b      	ldr	r3, [r5, #0]
 80127c0:	b103      	cbz	r3, 80127c4 <_kill_r+0x1c>
 80127c2:	6023      	str	r3, [r4, #0]
 80127c4:	bd38      	pop	{r3, r4, r5, pc}
 80127c6:	bf00      	nop
 80127c8:	2000dca0 	.word	0x2000dca0

080127cc <_getpid_r>:
 80127cc:	f7ee bf56 	b.w	800167c <_getpid>

080127d0 <_fstat_r>:
 80127d0:	b538      	push	{r3, r4, r5, lr}
 80127d2:	4d07      	ldr	r5, [pc, #28]	; (80127f0 <_fstat_r+0x20>)
 80127d4:	2300      	movs	r3, #0
 80127d6:	4604      	mov	r4, r0
 80127d8:	4608      	mov	r0, r1
 80127da:	4611      	mov	r1, r2
 80127dc:	602b      	str	r3, [r5, #0]
 80127de:	f7ee ffb4 	bl	800174a <_fstat>
 80127e2:	1c43      	adds	r3, r0, #1
 80127e4:	d102      	bne.n	80127ec <_fstat_r+0x1c>
 80127e6:	682b      	ldr	r3, [r5, #0]
 80127e8:	b103      	cbz	r3, 80127ec <_fstat_r+0x1c>
 80127ea:	6023      	str	r3, [r4, #0]
 80127ec:	bd38      	pop	{r3, r4, r5, pc}
 80127ee:	bf00      	nop
 80127f0:	2000dca0 	.word	0x2000dca0

080127f4 <_isatty_r>:
 80127f4:	b538      	push	{r3, r4, r5, lr}
 80127f6:	4d06      	ldr	r5, [pc, #24]	; (8012810 <_isatty_r+0x1c>)
 80127f8:	2300      	movs	r3, #0
 80127fa:	4604      	mov	r4, r0
 80127fc:	4608      	mov	r0, r1
 80127fe:	602b      	str	r3, [r5, #0]
 8012800:	f7ee ffb3 	bl	800176a <_isatty>
 8012804:	1c43      	adds	r3, r0, #1
 8012806:	d102      	bne.n	801280e <_isatty_r+0x1a>
 8012808:	682b      	ldr	r3, [r5, #0]
 801280a:	b103      	cbz	r3, 801280e <_isatty_r+0x1a>
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	bd38      	pop	{r3, r4, r5, pc}
 8012810:	2000dca0 	.word	0x2000dca0

08012814 <_init>:
 8012814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012816:	bf00      	nop
 8012818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801281a:	bc08      	pop	{r3}
 801281c:	469e      	mov	lr, r3
 801281e:	4770      	bx	lr

08012820 <_fini>:
 8012820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012822:	bf00      	nop
 8012824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012826:	bc08      	pop	{r3}
 8012828:	469e      	mov	lr, r3
 801282a:	4770      	bx	lr
